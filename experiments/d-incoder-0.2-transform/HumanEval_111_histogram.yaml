name: HumanEval_111_histogram
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return a dictionary\n    of the letter with\
  \ the most repetition and containing the corresponding count.\n    If several letters\
  \ have the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"\
  a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"a\
  \ b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
  )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n    [\"\
  b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\n    \n*/\nNullable!(long[string])\
  \ histogram(string test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    var histogram = Dictionary<long, int>()\n    test.split(\" \"\
    ).foreach(x => histogram[x] = histogram.getOrElse(x, 0) + 1)\n    return histogram.filter(_._2\
    \ > 1).map(_._1)\n}", "{\n    var dict = Nullable!(long[string]);\n    foreach(test,\
    \ char => {\n        var count = dict[char];\n        if(!count.isNull)\n    \
    \        dict[char] = count.value + 1;\n        else\n            dict[char] =\
    \ 1;\n    });\n    return dict;\n}", "{\n    Nullable!(long[string]) result =\
    \ null;\n    \n    foreach(test, char => \n    {\n        long count = test.count(char);\n\
    \        if(result == null)\n        {\n            result = __new__(Nullable!(long[string]));\n\
    \            result.__init(__new__(long[char]));\n        }\n        result.__setAt(char,\
    \ count);\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    foreach(test, char => \n    {\n        Nullable!(long[string])\
    \ subresult = histogram(test.substring(0,char+1));\n        \n        if(subresult\
    \ == null)\n        {\n            result = Nullable!(long[string])[char];\n \
    \       }\n        else\n        {\n            foreach(subresult, subchar =>\
    \ \n            {\n                if(subchar == char)\n                {\n  \
    \                  result = subresult;\n                }\n            });\n \
    \       }\n    });\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        Nullable!(long)\
    \ count = count(test);\n        \n        if(count == 0)\n        {\n        \
    \    result = null;\n        }\n        else if(count > 0)\n        {\n      \
    \      Nullable!(long) maxCount = 0;\n            foreach(test, char => {\n  \
    \              if(char == char)\n                {\n                    if(count(test)\
    \ > maxCount)\n                    {\n                        maxCount = count(test);\n\
    \                        result = char;\n                    }\n             \
    \   }\n            });\n        }\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(test, char => {\n\
    \        \n        Nullable!(long) count = get!(result, char);\n        \n   \
    \     if(count == null) {\n            count = 1L;\n        }\n        \n    \
    \    set(result, char, count + 1L);\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = Nullable!(long[string]);\n    \n    foreach(test,\
    \ char => \n    {\n        result += (char)\n            : \n            long[string]\n\
    \            { \n                add(char);\n                add(1L);\n      \
    \      };\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ?? 0L;\n        histogram[char] +=\
    \ 1;\n    });\n    \n    return histogram;\n}", "{\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n \
    \   \n    foreach(test, char => \n    {\n        Nullable!(long) count = count(test);\n\
    \        \n        if(count == 0)\n        {\n            result = null;\n   \
    \     }\n        else if(count > result)\n        {\n            result = count;\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        Nullable!(long) count\
    \ = histogram(test + char);\n        if(!count.isNull)\n        {\n          \
    \  if(!result.isNull)\n            {\n                if(count.value > result.get!(0))\n\
    \                {\n                    result = count;\n                }\n \
    \           }\n            else\n            {\n                result = count;\n\
    \            }\n        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ? histogram[char] + 1L : 1L;\n    });\n\
    \    \n    return histogram;\n}", "{\n    var dict: Nullable!(long[string]) =\n\
    \        Nullable!(long[string])(\n            dict.empty,\n            fn __key__:\
    \ string -> Nullable!(long[string]) -> (long[string], long[string]) => \n    \
    \        {\n                let mutable count = 1L;\n                let mutable\
    \ max = 0L;\n                let mutable maxKey = \"\"L;\n                let\
    \ mutable maxCount = 0L;\n                let mutable maxKeyCount = 0L;\n    \
    \            let mutable maxKeyCountKey = \"\"L;\n                let mutable\
    \ maxKeyCountKeyCount = 0L;\n                let mutable maxKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCount = 0L;\n  \
    \              let mutable maxKeyCountKeyCountKeyCountKey = \"\"L;\n         \
    \       let mutable maxKeyCountKeyCountKeyCountKeyCount = 0L;\n              \
    \  let mutable maxKeyCountKeyCountKeyCountKeyCountKey = \"\"L;\n             \
    \   let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCount = 0L;\n          \
    \      let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKey = \"\"L;\n \
    \               let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                ", "{\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => {\n        \n        long count = count(test, char);\n        \n   \
    \     if(result == null) {\n            result = Nullable!(long[string])(char,\
    \ count);\n        } else {\n            \n            Nullable!(long[string])(char,\
    \ count) += result;\n        }\n    });\n    \n    return result;\n}", "{\n  \
    \  Nullable!(long[string]) result = null;\n    \n    foreach(test, char c : char[])\
    \ \n    {\n        Nullable!(long) count = histogram(test + c);\n        \n  \
    \      if(count == null) \n        {\n            result = Nullable!(long[string])(Nullable!(char));\n\
    \        }\n        else \n        {\n            Nullable!(long) maxCount = count.max;\n\
    \            Nullable!(char) maxChar = count.maxKey;\n            \n         \
    \   if(maxCount > result.max) \n            {\n                result = Nullable!(long[string])(maxChar,\
    \ maxCount);\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(test, char => {\n\
    \        \n        foreach(result, char => {\n            \n            if(char\
    \ == char) {\n                result[char] += 1;\n            }\n            else\
    \ {\n                result[char] = 1;\n            }\n            \n        });\n\
    \    });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) histogram\
    \ = Nullable!(long[string])();\n    \n    foreach(test, function(x){\n       \
    \ histogram[x] = histogram[x] ? histogram[x] + 1 : 1;\n    });\n    \n    return\
    \ histogram;\n}", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach\
    \ (char c in test)\n    {\n        Nullable!(long) count = histogram(c);\n   \
    \     if (count == null)\n        {\n            count = long.zero;\n        }\n\
    \        if (result == null)\n        {\n            result = count;\n       \
    \ }\n        else\n        {\n            result = result.add(count);\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char =>\
    \ {\n        Nullable!(long[string]) temp = null;\n        \n        foreach(result,\
    \ char => {\n            Nullable!(long[string]) temp2 = null;\n            \n\
    \            foreach(temp, char => {\n                Nullable!(long[string])\
    \ temp3 = null;\n                \n                foreach(temp2, char => {\n\
    \                    Nullable!(long[string]) temp4 = null;\n                 \
    \   \n                    foreach(temp3, char => {\n                        Nullable!(long[string])\
    \ temp5 = null;\n                        \n                        foreach(temp4,\
    \ char => {\n                            Nullable!(long[string]) temp6 = null;\n\
    \                            \n                            foreach(temp5, char\
    \ => {\n                                Nullable!(long[string]) temp7 = null;\n\
    \                                \n                                foreach(temp6,\
    \ char => {\n                                    Nullable!(long[string]) temp8\
    \ = null;\n                                    \n                            \
    \        foreach(temp7, char => {\n                                        Nullable!(long[string])\
    \ temp9 = null;\n                                        \n                  \
    \                      foreach(temp8, char => {\n                            \
    \                Nullable!(long[string]) temp10 = null;\n                    \
    \                        \n                                            foreach(temp9,\
    \ char => {\n                                                Nullable!(long[string])\
    \ temp11 = null;\n                                                \n         \
    \                                       foreach(temp10, char => {\n          \
    \                                          Nullable!(long[string]) temp12 = null;\n\
    \                                                    \n                      \
    \                              foreach(temp11, char => {\n                   \
    \                                     Nullable!(long[string]) temp13 = null;\n\
    \                                                        \n                  \
    \                                      foreach(temp12, char => {\n           \
    \                                                 Nullable!(long[string]) temp14\
    \ = null;\n                                                            \n    \
    \                                                        foreach(temp13, char\
    \ => {\n                                                                Nullable!(long[string])\
    \ temp15 = null;\n                                                           \
    \     \n                                                                foreach(temp14,\
    \ char => {\n                                                                \
    \    Nullable!(long[string]) temp16 = null;\n                                \
    \                                    \n                                      \
    \                              foreach(temp15, char => {\n                   \
    \                                                     Nullable!(long[string])\
    \ temp17 = null;\n                                                           \
    \             \n                                                             \
    \           foreach(temp16, char => {\n                                      \
    \                                      Nullable!(long[string]) temp18 = null;\n\
    \                                                                            \n\
    \                                                                            foreach(temp17,\
    \ char => {\n                                                                \
    \                Nullable!(long[string]) temp19 = null;\n                    \
    \                                                            \n              \
    \                                                                  foreach(temp18,\
    \ char => {\n                                                                \
    \                    Nullable!(long[string]) temp20 = null;\n                \
    \                                                                    \n      \
    \                                                                            \
    \  foreach(temp19, char => {\n                                               \
    \                                         Nullable!(long[string]) temp21 = null;\n\
    \                                                                            \
    \            \n                                                              \
    \                          foreach(temp20, char => {\n                       \
    \                                                                     Nullable!(long[string])\
    \ temp22", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(char\
    \ c in test)\n    {\n        Nullable!(long[string]) subResult = histogram(test.substring(1));\n\
    \        \n        if(subResult.value == null)\n        {\n            subResult.value\
    \ = 1;\n        }\n        else\n        {\n            subResult.value += 1;\n\
    \        }\n        \n        if(result == null)\n        {\n            result\
    \ = subResult;\n        }\n        else\n        {\n            result = result.unionWith(subResult);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test);\n        \n        if(result == null) {\n            result =\
    \ __nullable_long__[char];\n        }\n        \n        if(count > result[char])\
    \ {\n            result[char] = count;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        Nullable!(long) count = get!(result, char);\n      \
    \  \n        if(count == null) {\n            count = 1L;\n        }\n       \
    \ \n        set(result, char, count + 1L);\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string]) [];\n\
    \    \n    foreach(test, char => {\n        histogram[char] = histogram[char]\
    \ ?? 0L;\n        histogram[char] += 1;\n    });\n    \n    return histogram;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        long count = count(test, char);\n        \n        if(result\
    \ == null || count > result.get!())\n        {\n            result = Nullable!(long[string])(char,\
    \ count);\n        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]);\n    \n    foreach(test, \n    function(char)\
    \ \n    {\n        histogram[char] = histogram[char] ?? 0L;\n        histogram[char]\
    \ += 1;\n    });\n    \n    return histogram;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => \n    {\n        Nullable!(long)\
    \ count = get(test, char);\n        if(!count.isNull)\n        {\n           \
    \ if(!result.isNull)\n            {\n                set(result, char, max(get(result,\
    \ char), count));\n            }\n            else\n            {\n          \
    \      set(result, char, count);\n            }\n        }\n    });\n    \n  \
    \  return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char =>\
    \ {\n        \n        long count = test.length();\n        \n        if(result\
    \ == null) {\n            result = dict[char] = count;\n        } else {\n   \
    \         dict[char] += count;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string])();\n \
    \   \n    foreach(test, |c|{\n        histogram[to!string(c)]++;\n    });\n  \
    \  \n    return histogram;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string]);\n\
    \    \n    foreach(test, \n        function(char) \n        {\n            histogram[char]\
    \ = histogram[char] ?? 0L;\n            histogram[char] += 1;\n        });\n \
    \   \n    return histogram;\n}", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string])\
    \ [];\n    \n    foreach(test, char => {\n        histogram[char] = histogram[char]\
    \ ?? 0L;\n        histogram[char] += 1;\n    });\n    \n    return histogram;\n\
    }", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(char c in test)\n    {\n        Nullable!(long)\
    \ count = count(test);\n        \n        if(count == 0)\n        {\n        \
    \    throw new Exception(\"Histogram of empty string\");\n        }\n        \n\
    \        if(result == null)\n        {\n            result = dict();\n       \
    \ }\n        \n        if(!result.containsKey(c))\n        {\n            result[c]\
    \ = count;\n        }\n        else\n        {\n            result[c] += count;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ Nullable!(long[string]) result = null;\n    \n    foreach(test, char => \n \
    \   {\n        Nullable!(long[string]) count = null;\n        foreach(result,\
    \ char => \n        {\n            Nullable!(long[string]) count2 = null;\n  \
    \          foreach(count, char => \n            {\n                count2 = count\
    \ + 1;\n            });\n            \n            if(count2 == null)\n      \
    \      {\n                count = 1;\n            }\n            else\n      \
    \      {\n                count = count2;\n            }\n            \n     \
    \       if(count > result.value)\n            {\n                result = Nullable!(long[string])(char,\
    \ count);\n            }\n        });\n    });\n    \n    return result;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char =>\
    \ {\n        \n        long count = count(test);\n        \n        if(result\
    \ == null || count > result[char])\n        {\n            result[char] = count;\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => \n    {\n        Nullable!(long[string])\
    \ temp = null;\n        \n        foreach(result, char => \n        {\n      \
    \      Nullable!(long[string]) temp2 = null;\n            \n            foreach(temp,\
    \ char => \n            {\n                temp2 = temp;\n                \n \
    \               if(char == char)\n                {\n                    temp2[char]\
    \ = temp2[char] + 1L;\n                    break;\n                }\n       \
    \         else\n                {\n                    temp2[char] = temp2[char]\
    \ + 1L;\n                }\n            });\n            \n            if(temp2\
    \ == null)\n            {\n                temp2 = temp;\n                temp2[char]\
    \ = 1L;\n            }\n            else\n            {\n                temp2[char]\
    \ = temp2[char] + 1L;\n            }\n            \n            if(temp2 > result)\n\
    \            {\n                result = temp2;\n            }\n        });\n\
    \    });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    \n \
    \   foreach(test, char => {\n        long count = count(test);\n        \n   \
    \     if(result == null) {\n            result = __new__(Nullable!(long[string]));\n\
    \        }\n        \n        if(result.isNull) {\n            result.value =\
    \ __new__(Nullable!(long[string]));\n        }\n        \n        if(result.isNull)\
    \ {\n            result.value = __new__(Nullable!(long[string]));\n        }\n\
    \        \n        if(result.isNull) {\n            result.value = __new__(Nullable!(long[string]));\n\
    \        }\n        \n        if(result.isNull) {\n            result.value =\
    \ __new__(Nullable!(long[string]));\n        }\n        \n        if(result.isNull)\
    \ {\n            result.value = __new__(Nullable!(long[string]));\n        }\n\
    \        \n        if(result.isNull) {\n            result.value = __new__(Nullable!(long[string]));\n\
    \        }\n        \n        if(result.isNull) {\n            result.value =\
    \ __new__(Nullable!(long[string]));\n        }\n        \n        if(result.isNull)\
    \ {\n            result.value = __new__(Nullable!(long[string]));\n        }\n\
    \        \n        if(result.isNull) {\n            result.value = __new__(Nullable!(long[string]));\n\
    \        }\n        \n        if(result.isNull) {\n            result.value =\
    \ __new__(Nullable!(long[string]));\n        }\n        \n        if(result.isNull)\
    \ {\n            result.value = __new__(Nullable!(long[string]));\n        }\n\
    \        \n        if(result.isNull) {\n            result.value = __new__(Nullable!(long[string]));\n\
    \        }\n        \n        if(result.isNull) {\n            result.value =\
    \ __new__(Nullable!(long[string]));\n        }\n        \n        if(result.isNull)\
    \ {\n            result.value = __new__(Nullable!(long[string]));\n        }\n\
    \        \n        if(result.isNull) {\n            result.value = __new__(Nullable!(long[string]));\n\
    \        }\n        \n        if(result.isNull) {\n            result.value =\
    \ __new__(Nullable!(long[string]));\n        }\n        \n        if(result.isNull)\
    \ {\n            result.value = __new__(Nullable!(long[string]));\n        }\n\
    \        \n        if(result.isNull) {\n            result.value = __new__(Nullable!(long[string]));\n\
    \        }\n        \n        if(result.isNull) {\n            result.value =\
    \ __new__(Nullable!(long[string]));\n        }\n        \n        if(result.isNull)\
    \ {\n            result.value = __new__(Nullable!(long[string]));\n        }\n\
    \        \n        if(result.isNull) {\n            result.value = __new__(Nullable!(long[string]));\n\
    \        }\n        \n", "{\n    var result = Nullable!(long[string]);\n    var\
    \ letters = test.split(\" \");\n    var letterCounts = letters.map(letter => letter:\
    \ letter, count: 0);\n    foreach(letterCounts, letter => letterCounts[letter.letter]\
    \ += letter.count);\n    foreach(letterCounts, letter => result.insert(letter.letter,\
    \ letter.count));\n    return result;\n}", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    \n \
    \   foreach(test, char => {\n        \n        long count = count(test);\n   \
    \     \n        if (result == null) {\n            result = make_pair(char(count),\
    \ count);\n        } else {\n            Nullable!(long) maxCount;\n         \
    \   foreach(result, pair => {\n                if (pair.second > maxCount.second)\
    \ {\n                    maxCount = pair;\n                }\n            });\n\
    \            \n            if (maxCount.second < count) {\n                result\
    \ = make_pair(char(maxCount.second), maxCount.second);\n            }\n      \
    \  }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => \n    {\n        Nullable!(long) count\
    \ = count(test);\n        \n        if(count == 0)\n        {\n            result\
    \ = null;\n        }\n        else if(count > 0)\n        {\n            foreach(test,\
    \ char => \n            {\n                if(char == char)\n                {\n\
    \                    result = __;\n                }\n            });\n      \
    \  }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        if(result == null)\
    \ {\n            result = dict[char];\n        } else {\n            dict[char]\
    \ = dict[char] + result[char];\n        }\n    });\n    \n    return result;\n\
    }\n/*\nGiven a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    [\"a\":\
    \ 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"a b b a\")\n    [\"\
    a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\")\n    [\"a\": 2L,\
    \ \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n    [\"b\": 4L].nullable\n\
    \    >>> histogram(\"\")\n    ___null_dict___", "{\n    var dict: __dict_long\
    \ = dict();\n    foreach(test, i, test) \n    {\n        dict[test] = dict[test]\
    \ ? dict[test] + 1L : 1L;\n    }\n    return dict;\n}", "{\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) histogram =\
    \ Nullable!(long[string]);\n    \n    foreach(test, \n    \n    function(string\
    \ letter) \n    {\n        histogram[letter] = (histogram[letter] ?? 0L) + 1;\n\
    \    });\n    \n    return histogram;\n}", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    \n \
    \   foreach(test, char => {\n        \n        Nullable!(long) count = histogram(test\
    \ + \" \" + char);\n        \n        if(count == null) {\n            \n    \
    \        Nullable!(long) count = 1;\n            \n        }\n        \n     \
    \   foreach(count, char => {\n            \n            if((result == null) ||\
    \ (result[char] == null)) {\n                \n                result[char] =\
    \ count;\n                \n            }\n            \n            else {\n\
    \                \n                result[char] += count;\n                \n\
    \            }\n            \n        });\n        \n    });\n    \n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => \n    {\n        \n        Nullable!(long[string]) temp = null;\n  \
    \      \n        foreach(result, char => \n        {\n            \n         \
    \   Nullable!(long[string]) temp2 = null;\n            \n            foreach(temp,\
    \ char => \n            {\n                \n                Nullable!(long[string])\
    \ temp3 = null;\n                \n                foreach(temp2, char => \n \
    \               {\n                    \n                    Nullable!(long[string])\
    \ temp4 = null;\n                    \n                    foreach(temp3, char\
    \ => \n                    {\n                        \n                     \
    \   Nullable!(long[string]) temp5 = null;\n                        \n        \
    \                foreach(temp4, char => \n                        {\n        \
    \                    \n                            Nullable!(long[string]) temp6\
    \ = null;\n                            \n                            foreach(temp5,\
    \ char => \n                            {\n                                \n\
    \                                Nullable!(long[string]) temp7 = null;\n     \
    \                           \n                                foreach(temp6, char\
    \ => \n                                {\n                                   \
    \ \n                                    Nullable!(long[string]) temp8 = null;\n\
    \                                    \n                                    foreach(temp7,\
    \ char => \n                                    {\n                          \
    \              \n                                        Nullable!(long[string])\
    \ temp9 = null;\n                                        \n                  \
    \                      foreach(temp8, char => \n                             \
    \           {\n                                            \n                \
    \                            Nullable!(long[string]) temp10 = null;\n        \
    \                                    \n                                      \
    \      foreach(temp9, char => \n                                            {\n\
    \                                                \n                          \
    \                      Nullable!(long[string]) temp11 = null;\n              \
    \                                  \n                                        \
    \        foreach(temp10, char => \n                                          \
    \      {\n                                                    \n             \
    \                                       Nullable!(long[string]) temp12 = null;\n\
    \                                                    \n                      \
    \                              foreach(temp11, char => \n                    \
    \                                {\n                                         \
    \               \n                                                        Nullable!(long[string])\
    \ temp13 = null;\n                                                        \n \
    \                                                       foreach(temp12, char =>\
    \ \n                                                        {\n              \
    \                                              \n                            \
    \                                Nullable!(long[string]) temp14 = null;\n    \
    \                                                        \n                  \
    \                                          foreach(temp13, char => \n        \
    \                                                    {\n                     \
    \                                           \n                               \
    \                                 Nullable!(long[string]) temp15 = null;\n   \
    \                                                             \n             \
    \                                                   foreach(temp14, char => \n\
    \                                                                {\n         \
    \                                                           \n               \
    \                                                     Nullable!(long[string])\
    \ temp16 = null;\n                                                           \
    \         \n                                                                 \
    \   foreach(temp15, char => \n                                               \
    \                     {\n                                                    \
    \                    \n                                                      \
    \                  Nullable!(long[string]) temp17 = null;\n                  \
    \                                                      \n                    \
    \                                                    foreach(temp16, char => \n\
    \                                                                        {\n \
    \                                                                           \n\
    \                                                                            Nullable!(long[string])\
    \ temp18 = null;\n                                                           \
    \                 \n                                                         \
    \                   foreach(temp17, ", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= long[char] + (result ??= long[char]);\n        \n\
    \    });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) histogram\
    \ = Nullable!(long[string]) [];\n    \n    foreach(test, char => histogram! +=\
    \ (char, histogram![char] + 1));\n    \n    foreach(histogram, (count, char) =>\
    \ histogram! += (char, count));\n    \n    return histogram;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => \n    {\n        Nullable!(long[string])\
    \ counts = histogram(test.trim());\n        \n        foreach(counts, count =>\
    \ \n        {\n            if((result == null) || (count > result[char]))\n  \
    \          {\n                result = counts;\n            }\n        });\n \
    \   });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(char c in test)\n\
    \    {\n        Nullable!(long) count = count(test);\n        \n        foreach(char\
    \ c2 in test)\n        {\n            if(c != c2)\n            {\n           \
    \     count += count(test);\n            }\n        }\n        \n        if(result\
    \ == null)\n        {\n            result = count;\n        }\n        else\n\
    \        {\n            result = max(result, count);\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string])\
    \ [];\n    \n    foreach(test, char => {\n        histogram[char] = histogram[char]\
    \ ?? 0L;\n        histogram[char] += 1;\n    });\n    \n    return histogram;\n\
    }", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        if(!isLetter(char))\n\
    \            throw Exception(\"Invalid character\");\n        \n        long count\
    \ = count(test, char);\n        \n        if(result == null)\n            result\
    \ = Nullable!(long[string]);\n        \n        result[char] = count;\n    });\n\
    \    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    foreach(test, char => \n    {\n        Nullable!(long) count\
    \ = histogram(test.split(char));\n        if(count == null)\n        {\n     \
    \       count = 1;\n        }\n        \n        if(result == null)\n        {\n\
    \            result = count;\n        }\n        else\n        {\n           \
    \ result = result.add(count);\n        }\n    });\n    \n    return result;\n}",
  "{\n    Nullable!(long[string]) histogram = Nullable!(long[string]);\n    \n   \
    \ foreach(test, function(char) {\n        histogram[char] = histogram[char] ??\
    \ 0L;\n        histogram[char] += 1;\n    });\n    \n    return histogram;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char =>\
    \ {\n        long count = count(test, char);\n        \n        if(result == null)\
    \ {\n            result = make_dict(char: char, count: count);\n        } else\
    \ {\n            result[char] = count;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        Nullable!(long) count = histogram(test.substring_of(char));\n\
    \        \n        if(count == null) {\n            count = long.zero;\n     \
    \   }\n        \n        if(result == null) {\n            result = count;\n \
    \       } else {\n            result = result.add(count);\n        }\n    });\n\
    \    \n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    \n    foreach(test, char => {\n        \n        long count = count(test);\n\
    \        \n        if(result == null) {\n            result = dict();\n      \
    \  }\n        \n        foreach(result, key => {\n            \n            if(result[key]\
    \ == null) {\n                result[key] = count;\n            } else {\n   \
    \             result[key] += count;\n            }\n        });\n    });\n   \
    \ \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach (char\
    \ c in test) {\n        Nullable!(long) count = histogram(c);\n        if (count\
    \ == null) {\n            count = long.zero;\n        }\n        \n        if\
    \ (result == null) {\n            result = count;\n        } else {\n        \
    \    result = max(result, count);\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        Nullable!(long) count = histogram(test + \" \" + char);\n\
    \        \n        if(count == null) {\n            \n            Nullable!(long)\
    \ count = new Nullable!(long);\n            \n            foreach(test, char =>\
    \ {\n                \n                Nullable!(long) count = histogram(test\
    \ + \" \" + char);\n                \n                if(count == null) {\n  \
    \                  \n                    count = new Nullable!(long);\n      \
    \              \n                    foreach(test, char => {\n               \
    \         \n                        Nullable!(long) count = histogram(test + \"\
    \ \" + char);\n                        \n                        if(count == null)\
    \ {\n                            \n                            count = new Nullable!(long);\n\
    \                            \n                            foreach(test, char\
    \ => {\n                                \n                                Nullable!(long)\
    \ count = histogram(test + \" \" + char);\n                                \n\
    \                                if(count == null) {\n                       \
    \             \n                                    count = new Nullable!(long);\n\
    \                                    \n                                    foreach(test,\
    \ char => {\n                                        \n                      \
    \                  Nullable!(long) count = histogram(test + \" \" + char);\n \
    \                                       \n                                   \
    \     if(count == null) {\n                                            \n    \
    \                                        count = new Nullable!(long);\n      \
    \                                      \n                                    \
    \        foreach(test, char => {\n                                           \
    \     \n                                                Nullable!(long) count\
    \ = histogram(test + \" \" + char);\n                                        \
    \        \n                                                if(count == null) {\n\
    \                                                    \n                      \
    \                              count = new Nullable!(long);\n                \
    \                                    \n                                      \
    \              foreach(test, char => {\n                                     \
    \                   \n                                                       \
    \ Nullable!(long) count = histogram(test + \" \" + char);\n                  \
    \                                      \n                                    \
    \                    if(count == null) {\n                                   \
    \                         \n                                                 \
    \           count = new Nullable!(long);\n                                   \
    \                         \n                                                 \
    \           foreach(test, char => {\n                                        \
    \                        \n                                                  \
    \              Nullable!(long) count = histogram(test + \" \" + char);\n     \
    \                                                           \n               \
    \                                                 if(count == null) {\n      \
    \                                                              \n            \
    \                                                        count = new Nullable!(long);\n\
    \                                                                    \n      \
    \                                                              foreach(test, char\
    \ => {\n                                                                     \
    \   \n                                                                       \
    \ Nullable!(long) count = histogram(test + \" \" + char);\n                  \
    \                                                      \n                    \
    \                                                    if(count == null) {\n   \
    \                                                                         \n \
    \                                                                           count\
    \ = new Nullable!(long);\n                                                   \
    \                         \n                                                 \
    \                           foreach(test, char => {\n                        \
    \                                                        \n                  \
    \                                                              Nullable!(long)\
    \ count = histogram(test + \" \" + char);\n                                  \
    \                                              \n                            \
    \                                                    if(count == null) {\n   \
    \                                                                            \
    \     \n                                                                     \
    \               count = new Nullable!(long);\n                               \
    \                                                     \n                     \
    \                                                               foreach(test,\
    \ char => {\n                                                                \
    \                        \n                                                  \
    \                                      Nullable!(long) count = histogram(test\
    \ + \" \" + char);\n                                                         \
    \                               \n                                           \
    \                                             if(count == null) {\n", "{\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => {\n        \n        long count = count(test);\n        \n        if\
    \ (result == null) {\n            result = dict();\n        }\n        \n    \
    \    Nullable!(long) value = result.get(char);\n        \n        if (value ==\
    \ null) {\n            result[char] = count;\n        } else {\n            result[char]\
    \ = value + count;\n        }\n    });\n    \n    return result;\n}", "{\n   \
    \ Nullable!(long[string]) result = null;\n    \n    foreach(test, char => {\n\
    \        \n        foreach(test, char => {\n            \n            foreach(test,\
    \ char => {\n                \n                foreach(test, char => {\n     \
    \               \n                    foreach(test, char => {\n              \
    \          \n                        foreach(test, char => {\n               \
    \             \n                            foreach(test, char => {\n        \
    \                        \n                                foreach(test, char\
    \ => {\n                                    \n                               \
    \     foreach(test, char => {\n                                        \n    \
    \                                    foreach(test, char => {\n               \
    \                             \n                                            foreach(test,\
    \ char => {\n                                                \n              \
    \                                  foreach(test, char => {\n                 \
    \                                   \n                                       \
    \             foreach(test, char => {\n                                      \
    \                  \n                                                        foreach(test,\
    \ char => {\n                                                            \n  \
    \                                                          foreach(test, char\
    \ => {\n                                                                \n   \
    \                                                             foreach(test, char\
    \ => {\n                                                                    \n\
    \                                                                    foreach(test,\
    \ char => {\n                                                                \
    \        \n                                                                  \
    \      foreach(test, char => {\n                                             \
    \                               \n                                           \
    \                                 foreach(test, char => {\n                  \
    \                                                              \n            \
    \                                                                    foreach(test,\
    \ char => {\n                                                                \
    \                    \n                                                      \
    \                              foreach(test, char => {\n                     \
    \                                                                   \n       \
    \                                                                            \
    \     foreach(test, char => {\n                                              \
    \                                              \n                            \
    \                                                                foreach(test,\
    \ char => {\n                                                                \
    \                                \n                                          \
    \                                                      foreach(test, char => {\n\
    \                                                                            \
    \                        \n                                                  \
    \                                                  foreach(test, char => {\n \
    \                                                                            \
    \                           \n                                               \
    \                                                         foreach(test, char =>\
    \ {\n                                                                        \
    \                                    \n                                      \
    \                                                                      foreach(test,\
    \ char => {\n                                                                \
    \                                                \n                          \
    \                                                                            \
    \          foreach(test, char => {\n                                         \
    \                                                                           \n\
    \                                                                            \
    \                                        foreach(test, char => {\n           \
    \                                                                            \
    \                                 \n                                         \
    \                                                                            \
    \   foreach(test, char => {\n                                                \
    \                                                                            \n\
    \                                                                            \
    \                                                foreach(test, char => {\n   \
    \                                                                            \
    \                                                 \n                         \
    \                                                                            \
    \                           foreach(test, char => {\n                        \
    \                                                                            \
    \                                \n                                          \
    \                                                                            \
    \              foreach(test, char => {\n                                     \
    \                                                                            \
    \                       \n                                                   \
    \                                                                            \
    \         foreach(test, char => {\n                                          \
    \                                                                            \
    \                      \n                                                    \
    \                                                                            \
    \            foreach(test, char => {\n                                       \
    \                                                                            \
    \                             \n                                             \
    \                                                                            \
    \                       foreach(test, char => {\n                            \
    \                                                                            \
    \                                            \n                              \
    \                                                                            \
    \                                          foreach(test, char => {\n         \
    \                                                                            \
    \                                                                   \n       \
    \                                                                            \
    \                                                                     foreach(test,\
    \ char => {\n                                                                \
    \                                                                            \
    \                \n                                                          \
    \                                                                            \
    \                      foreach(test, char => {\n                             \
    \                                                                            \
    \                                                       \n                   \
    \                                                                            \
    \                                                                 foreach(test,\
    \ char => {\n                                                                \
    \                                                                            \
    \                        \n                                                  \
    \                                                                            \
    \                                      foreach(test, char => {\n             \
    \                                                                            \
    \                                                                            \
    \   \n                                                                       \
    \                                                                            \
    \                     foreach(test, char => {\n                              \
    \                                                                            \
    \                                                                  \n        \
    \                                                                            \
    \                                                                            \
    \            foreach(test, char => {\n                                       \
    \                                                                            \
    \                                                             \n             \
    \                                                                            \
    \                                                                            \
    \           foreach(test, char => {\n                                        \
    \                                                                            \
    \                                                                \n          \
    \                                                                            \
    \                                                                            \
    \                  foreach(test, char => {\n                                 \
    \                                                                            \
    \                                                                           \n\
    \                                                                            \
    \                                                                            \
    \                                foreach(test, ", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]);\n    \n    foreach(test, test) |test|\n\
    \    {\n        histogram[test] = histogram[test] ?? 0L;\n        histogram[test]\
    \ += 1;\n    }\n    \n    return histogram;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test);\n        \n        if(result == null || count > result[char])\n\
    \        {\n            result[char] = count;\n        }\n    });\n    \n    return\
    \ result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ Nullable!(long[string]) result = null;\n    \n    foreach (char c in test) {\n\
    \        Nullable!(long) count = histogram(c);\n        if (count == null) {\n\
    \            count = long.zero;\n        }\n        \n        if (result == null)\
    \ {\n            result = count;\n        } else {\n            result = max(result,\
    \ count);\n        }\n    }\n    \n    return result;\n}", "{\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        if(!isLetter(char))\n\
    \            throw new Exception(\"Invalid character\");\n        \n        if(result\
    \ == null)\n            result = dict[char];\n        else\n            result[char]\
    \ += 1;\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        if(result\
    \ == null) {\n            result = dict[char];\n        } else {\n           \
    \ \n            if(dict[char] > result[char]) {\n                result = dict[char];\n\
    \            }\n        }\n    });\n    \n    return result;\n}", "{\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        foreach(result,\
    \ char => {\n            \n            if(result[char] == null) {\n          \
    \      result[char] = 1;\n            } else {\n                result[char] +=\
    \ 1;\n            }\n            \n        });\n        \n    });\n    \n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => {\n        \n        Nullable!(long) count = count(test);\n        \n\
    \        if(count == 0)\n        {\n            result = Nullable!({char: count});\n\
    \        }\n        else if(count > result.value)\n        {\n            result\
    \ = Nullable!({char: count});\n        }\n    });\n    \n    return result;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char =>\
    \ {\n        \n        long count = count(test);\n        \n        if(result\
    \ == null || count > result[char])\n        {\n            result[char] = count;\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    var dict: Nullable!{string: long} = {};\n\
    \    var max: long = 0;\n    var maxKey: Nullable!{string} = Nullable!{string:\
    \ long};\n    var i: long = 0;\n    var j: long = 0;\n    var key: Nullable!{string}\
    \ = Nullable!{string: long};\n    var count: long = 0;\n    var testChar: char;\n\
    \    var testString: String;\n    var testStringChar: char;\n    \n    for (i\
    \ = 0; i < test.length(); ++i)\n    {\n        testChar = test.charAt(i);\n  \
    \      testString = testChar.toString();\n        for (j = 0; j < test.length();\
    \ ++j)\n        {\n            testStringChar = test.charAt(j);\n            if\
    \ (testChar == testStringChar)\n            {\n                ++count;\n    \
    \        }\n        }\n        if (count > max)\n        {\n            max =\
    \ count;\n            maxKey = key;\n        }\n        key = Nullable!{string:\
    \ count};\n        dict[testChar] = count;\n        count = 0;\n    }\n    return\
    \ Nullable!{dict: dict, max: max, maxKey: maxKey};\n}\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___",
  "{\n    Nullable!(long[string]) result = Nullable!(long[string]);\n    \n    foreach(test,\
    \ char => \n    {\n        result += (char)\n            : long[string]\n    \
    \        : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            : long[string]\n            : long[string]\n\
    \            : long[string]\n            ", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => \n    {\n        Nullable!(long[string])\
    \ charCount = null;\n        foreach(test, char => \n        {\n            charCount[char]\
    \ = charCount[char] + 1L;\n        });\n        \n        if(charCount == null)\n\
    \        {\n            charCount = { char: 1 };\n        }\n        \n      \
    \  if(charCount.char > result.char)\n        {\n            result = charCount;\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test);\n        \n        if(result == null || count > result[char])\n\
    \        {\n            result[char] = count;\n        }\n    });\n    \n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => {\n        \n        Nullable!(long[string]) subresult = histogram(test.substring(0,char.length));\n\
    \        \n        if(subresult.isNull)\n        {\n            result = subresult;\n\
    \        }\n        else\n        {\n            result[char] = subresult.getValue()\
    \ + 1;\n        }\n    });\n    \n    return result;\n}", "{\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, function(char) {\n        \n        Nullable!(long)\
    \ count = count(test, char);\n        \n        if(count == null) {\n        \
    \    \n            Nullable!(long) maxCount = 0;\n            foreach(test, function(char)\
    \ {\n                \n                Nullable!(long) count = count(test, char);\n\
    \                \n                if(count > maxCount) {\n                  \
    \  maxCount = count;\n                }\n            });\n            \n     \
    \       result[char] = maxCount;\n        } else {\n            \n           \
    \ result[char] = count;\n        }\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = Nullable!(long[string])();\n    \n    foreach(test,\
    \ char => \n    {\n        Nullable!(long) count = histogram(test).get(char);\n\
    \        \n        if(count.isNull)\n        {\n            result[char] = Nullable!(long)();\n\
    \        }\n        else\n        {\n            result[char] = count.value;\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        if(!isLetter(char))\
    \ {\n            throw new ArgumentException(\"histogram: invalid character\"\
    );\n        }\n        \n        if(result == null) {\n            result = dict();\n\
    \        }\n        \n        long count = result.get(char);\n        \n     \
    \   if(count == null) {\n            result[char] = 1;\n        } else {\n   \
    \         result[char] += 1;\n        }\n    });\n    \n    return result;\n}",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        long count = count(test);\n\
    \        \n        if (result == null) {\n            result = make(long, char);\n\
    \        }\n        \n        if (count > result[char]) {\n            result[char]\
    \ = count;\n        }\n    });\n    \n    return result;\n}", "{\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(char c in test)\n\
    \    {\n        if(!result.containsKey(c))\n        {\n            result[c] =\
    \ 0L;\n        }\n        result[c] += 1;\n    }\n    \n    return result;\n}",
  "{\n    var result = Nullable!(long[string]);\n    var letters = test.split(\" \"\
    );\n    var letterCounts = letters.map(l => l.length).distinct().toArray();\n\
    \    \n    foreach(letterCounts, letterCount => {\n        var letterCountDict\
    \ = letters.map(l => l).filter(l => l.length == letterCount).map(l => l.toUpperCase()).groupBy(l\
    \ => l).map(g => g.key).map(k => [k, g.count()]).toArray();\n        var maxCount\
    \ = letterCountDict.reduce((a,b) => a > b ? a : b);\n        var maxLetter = letterCountDict.reduce((a,b)\
    \ => a > b ? a : b);\n        var maxLetterCount = maxCount[1];\n        \n  \
    \      result[maxLetter[0]] = maxLetterCount;\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        long count = count(test);\n        \n        if(result\
    \ == null) {\n            result = __dict_add(result, char, count);\n        }\
    \ else {\n            Nullable!(long) max = __dict_max(result);\n            \n\
    \            if(count > max) {\n                result = __dict_add(result, char,\
    \ count);\n            }\n        }\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(test, char => {\n\
    \        Nullable!(long[string]) counts = Nullable!(long[string]);\n        foreach(test,\
    \ char => {\n            counts = counts + 1L;\n        });\n        \n      \
    \  if(counts == null) {\n            counts = 0L;\n        }\n        \n     \
    \   if(result == null) {\n            result = counts;\n        } else {\n   \
    \         result = result + counts;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        long count = count(test);\n        \n        if(result\
    \ == null) {\n            result = __nullable_long__();\n        }\n        \n\
    \        if(result[char] == null) {\n            result[char] = count;\n     \
    \   } else {\n            result[char] += count;\n        }\n    });\n    \n \
    \   return result;\n}", "{\n    Nullable!(long[string]) result = null;\n    \n\
    \    foreach(test, char => {\n        long count = test.count(char);\n       \
    \ \n        if(result == null) {\n            result = __dict_add(result, char,\
    \ count);\n        } else {\n            __dict_add(result, char, count);\n  \
    \      }\n    });\n    \n    return result;\n}", "{\n    var result = Nullable!{long[string]};\n\
    \    \n    foreach(test, char => {\n        var count = long.zero;\n        foreach(result,\
    \ letter => {\n            if (letter == char) {\n                count += 1;\n\
    \            }\n        });\n        \n        if (count > result.value) {\n \
    \           result = Nullable!{long[string]};\n            result.value = count;\n\
    \            result.key = char;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => \n    {\n        Nullable!(long) count = histogram(test).get(char);\n   \
    \     if(count == null)\n        {\n            count = long.zero;\n        }\n\
    \        \n        if(result == null)\n        {\n            result = count;\n\
    \        }\n        else\n        {\n            result = result.add(count);\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char c : char[]) \n    {\n        long count = long.zero;\n        foreach(result,\
    \ key : char) \n        {\n            count += result[key];\n        }\n    \
    \    \n        if(count > long.zero)\n        {\n            result[c] = count;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n \
    \   \n    foreach(char c in test)\n    {\n        Nullable!(long) count = count(test);\n\
    \        \n        if(count == 0)\n        {\n            Nullable!(long) max\
    \ = 0;\n            foreach(char c2 in test)\n            {\n                Nullable!(long)\
    \ count2 = count(test);\n                \n                if(count2 > max)\n\
    \                {\n                    max = count2;\n                    result[c]\
    \ = max;\n                }\n            }\n        }\n        else\n        {\n\
    \            Nullable!(long) max = 0;\n            foreach(char c2 in test)\n\
    \            {\n                Nullable!(long) count2 = count(test);\n      \
    \          \n                if(count2 > max)\n                {\n           \
    \         max = count2;\n                    result[c] = max;\n              \
    \  }\n            }\n        }\n    }\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ?? 0L;\n        histogram[char] +=\
    \ 1;\n    });\n    \n    return histogram;\n}", "{\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n \
    \   \n    foreach(char c in test)\n    {\n        Nullable!(long[string]) counts\
    \ = histogram(test.substring(1));\n        \n        if(counts.isNull)\n     \
    \   {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n   \
    \     }\n        \n        if(counts.isNull)\n        {\n            counts =\
    \ Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n        if(counts.isNull)\n\
    \        {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n\
    \        }\n        \n        if(counts.isNull)\n        {\n            counts\
    \ = Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n      \
    \  if(counts.isNull)\n        {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n\
    \        }\n        \n        if(counts.isNull)\n        {\n            counts\
    \ = Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n      \
    \  if(counts.isNull)\n        {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n\
    \        }\n        \n        if(counts.isNull)\n        {\n            counts\
    \ = Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n      \
    \  if(counts.isNull)\n        {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n\
    \        }\n        \n        if(counts.isNull)\n        {\n            counts\
    \ = Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n      \
    \  if(counts.isNull)\n        {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n\
    \        }\n        \n        if(counts.isNull)\n        {\n            counts\
    \ = Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n      \
    \  if(counts.isNull)\n        {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n\
    \        }\n        \n        if(counts.isNull)\n        {\n            counts\
    \ = Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n      \
    \  if(counts.isNull)\n        {\n            counts = Nullable!(long[string])[char.charCodeAt(0)];\n\
    \        }\n        \n        if(counts.isNull)\n        {\n            counts\
    \ = Nullable!(long[string])[char.charCodeAt(0)];\n        }\n        \n      \
    \  if(counts.isNull)", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string]);\n\
    \    \n    foreach(test, function(char) {\n        histogram[char] = histogram[char]\
    \ ?? 0L;\n        histogram[char] += 1;\n    });\n    \n    return histogram;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach (char c\
    \ in test) {\n        Nullable!(long) count = histogram(c);\n        if (count\
    \ == null) {\n            throw new Exception(\"Invalid histogram\");\n      \
    \  }\n        \n        if (result == null) {\n            result = count;\n \
    \       } else {\n            result = add(result, count);\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => {\n        Nullable!(long) count = histogram(test).get(char);\n    \
    \    if(count == null) count = 0;\n        if(result == null) {\n            result\
    \ = Nullable!(long[string])(char, count);\n        } else {\n            result[char]\
    \ = count;\n        }\n    });\n    \n    return result;\n}", "{\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    \n \
    \   foreach(test, char => {\n        \n        long count = count(test);\n   \
    \     \n        if(result == null) {\n            result = dict();\n        }\n\
    \        \n        if(result.containsKey(char)) {\n            result[char] +=\
    \ count;\n        } else {\n            result[char] = count;\n        }\n   \
    \ });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(char c in test)\n\
    \    {\n        Nullable!(long) count = histogram[char]!;\n        \n        if(count\
    \ == null)\n        {\n            histogram[char] = 1;\n        }\n        else\n\
    \        {\n            histogram[char] += 1;\n        }\n    }\n    \n    foreach(char\
    \ c in test)\n    {\n        if(histogram[char] == null)\n        {\n        \
    \    histogram[char] = 1;\n        }\n        else\n        {\n            histogram[char]\
    \ += 1;\n        }\n    }\n    \n    foreach(char c in test)\n    {\n        if(histogram[char]\
    \ == null)\n        {\n            histogram[char] = 1;\n        }\n        else\n\
    \        {\n            histogram[char] += 1;\n        }\n    }\n    \n    foreach(char\
    \ c in test)\n    {\n        if(histogram[char] == null)\n        {\n        \
    \    histogram[char] = 1;\n        }\n        else\n        {\n            histogram[char]\
    \ += 1;\n        }\n    }\n    \n    foreach(char c in test)\n    {\n        if(histogram[char]\
    \ == null)\n        {\n            histogram[char] = 1;\n        }\n        else\n\
    \        {\n            histogram[char] += 1;\n        }\n    }\n    \n    foreach(char\
    \ c in test)\n    {\n        if(histogram[char] == null)\n        {\n        \
    \    histogram[char] = 1;\n        }\n        else\n        {\n            histogram[char]\
    \ += 1;\n        }\n    }\n    \n    foreach(char c in test)\n    {\n        if(histogram[char]\
    \ == null)\n        {\n            histogram[char] = 1;\n        }\n        else\n\
    \        {\n            histogram[char] += 1;\n        }\n    }\n    \n    foreach(char\
    \ c in test)\n    {\n        if(histogram[char] == null)\n        {\n        \
    \    histogram[char] = 1;\n        }\n        else\n        {\n            histogram[char]\
    \ += 1;\n        }\n    }\n    \n    foreach(char c in test)\n    {\n        if(histogram[char]\
    \ == null)\n        {\n            histogram[char] = 1;\n        }\n        else\n\
    \        {\n            histogram[char] += 1;\n        }\n    }\n    \n    foreach(char\
    \ c in test)\n    {\n        if(histogram[char] == null)\n        {\n        \
    \    histogram[char] = 1;\n        }\n        else\n        {\n            histogram[char]\
    \ += 1;\n        }\n    }\n    \n    foreach(char c in test)\n    {\n        if(histogram[char]\
    \ == null)\n        {\n            histogram[char] = 1;\n        }\n        else\n\
    \        {\n            histogram[char] += 1;\n        }\n    }\n    \n", "{\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        Nullable!(long)\
    \ occurrences = count(test);\n        \n        if(occurrences > 0) {\n      \
    \      \n            foreach(test, char => {\n                \n             \
    \   if((char == char)) {\n                    \n                    occurrences\
    \ = occurrences - 1;\n                    \n                }\n              \
    \  \n            });\n            \n            result[char] = occurrences;\n\
    \            \n        }\n        \n    });\n    \n    return result;\n}", "{\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n\
    \    \n    foreach(test, char => {\n        \n        Nullable!(long[string])\
    \ subresult = histogram(test.substring(0,char.length));\n        \n        if(subresult.isNull)\n\
    \        {\n            result = subresult;\n        }\n        else\n       \
    \ {\n            foreach(subresult, subchar => {\n                \n         \
    \       if(subchar == char)\n                {\n                    result = subresult;\n\
    \                }\n            });\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string])({});\n\
    \    \n    foreach(test, |letter| {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0L) + 1;\n    });\n    \n    return histogram;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ?? 0L;\n        histogram[char] +=\
    \ 1;\n    });\n    \n    return histogram;\n}", "{\n    Nullable!(long[string])\
    \ result = Nullable!(long[string]);\n    \n    foreach(test, char => \n    {\n\
    \        long count = count(test.chars);\n        \n        if(count > 0)\n  \
    \      {\n            foreach(test.chars, char => \n            {\n          \
    \      if(char == char)\n                {\n                    result[char] =\
    \ result[char] + count;\n                }\n            });\n        }\n    });\n\
    \    \n    return result;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    \n    foreach(test, char => {\n        \n        Nullable!(long) count =\
    \ get!(result, char);\n        \n        if(count == null) {\n            count\
    \ = 1L;\n        }\n        \n        set(result, char, count + 1L);\n    });\n\
    \    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => {\n        \n        long count = count(test);\n        \n        if(result\
    \ == null) {\n            result = make(long, char);\n        }\n        \n  \
    \      result[char] = count;\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test);\n        \n        if(count == 0)\n        {\n            \n\
    \            result := Nullable!(long[string])(Nullable!(char));\n           \
    \ \n        }\n        else if(count > 0)\n        {\n            \n         \
    \   foreach(test, char => {\n                \n                if(char == char)\n\
    \                {\n                    \n                    result := result\
    \ + Nullable!(long[string])(Nullable!(char));\n                    \n        \
    \        }\n                \n            });\n            \n        }\n     \
    \   \n    });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    Nullable!(long[string]) histogram = Nullable!(long[string]) null;\n    \n\
    \    foreach(test, char c : char[]) \n    {\n        histogram[c] = histogram[c]\
    \ ? histogram[c] + 1L : 1L;\n    }\n    \n    return histogram;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(char c in test) {\n        Nullable!(long[string])\
    \ subresult = histogram(test.substring(1));\n        \n        if(subresult ==\
    \ null) {\n            subresult = dict();\n        }\n        \n        Nullable!(long)\
    \ subcount = subresult[c];\n        \n        if(subcount == null) {\n       \
    \     subcount = 1L;\n        }\n        \n        subresult[c] = subcount + 1L;\n\
    \        \n        if(result == null) {\n            result = subresult;\n   \
    \     } else {\n            result = merge!(result, subresult);\n        }\n \
    \   }\n    \n    return result;\n}", "{\n    Nullable!(long[string]) result =\
    \ null;\n    \n    foreach(test, char => {\n        \n        Nullable!(long)\
    \ count = get!(result, char);\n        \n        if(count == null) {\n       \
    \     count = 1L;\n        }\n        \n        set(result, char, count + 1L);\n\
    \    });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) histogram\
    \ = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n        histogram[char]\
    \ = histogram[char] ?? 0L;\n        histogram[char] += 1;\n    });\n    \n   \
    \ return histogram;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    var dict: __Nullable[long[string]] = null;\n    var maxCount: long = 0;\n\
    \    var maxLetter: char = null;\n    var letterCount: long = 0;\n    var letter:\
    \ char = null;\n    \n    for (letter in test) {\n        letterCount = dict[letter];\n\
    \        if (letterCount == null) {\n            dict[letter] = 1;\n        }\
    \ else {\n            dict[letter] += 1;\n        }\n        if (dict[letter]\
    \ > maxCount) {\n            maxCount = dict[letter];\n            maxLetter =\
    \ letter;\n        }\n    }\n    \n    return __Nullable(dict[maxLetter]);\n}",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        long count = count(test);\n\
    \        \n        if(result == null || count > result[char]) {\n            result[char]\
    \ = count;\n        }\n    });\n    \n    return result;\n}", "{\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    var result = Nullable!(long[string]);\n\
    \    \n    foreach(test, function(letter) {\n        \n        var count = long[string];\n\
    \        \n        foreach(result, function(k, v) {\n            \n          \
    \  if(v > count) {\n                count = v;\n                result.value =\
    \ k;\n            }\n        });\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = Nullable!(long[string])();\n    \n    foreach(test,\
    \ char => {\n        \n        long count = long(test);\n        \n        if(!result.contains(char))\n\
    \        {\n            result[char] = count;\n        }\n        else\n     \
    \   {\n            result[char] += count;\n        }\n    });\n    \n    return\
    \ result;\n}", "{\n    Nullable!(long[string]) result = null;\n    foreach(test,\
    \ char => {\n        Nullable!(long) count = histogram(test + char);\n       \
    \ if (count == null) {\n            count = long.zero;\n        }\n        if\
    \ (result == null) {\n            result = count;\n        } else {\n        \
    \    result = max(result, count);\n        }\n    });\n    return result;\n}",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(char c in test)\n    {\n        Nullable!(long)\
    \ count = histogram(c);\n        if(count == null)\n        {\n            count\
    \ = long.zero;\n        }\n        if(result == null)\n        {\n           \
    \ result = count;\n        }\n        else\n        {\n            result = result.add(count);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string])({});\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ? histogram[char] + 1L : 1L;\n    });\n\
    \    \n    return histogram;\n}", "{\n    Nullable!(long[string]) result = null;\n\
    \    \n    foreach(test, char => \n    {\n        Nullable!(long) count = get(test,\
    \ char);\n        if(!count.isNull)\n        {\n            if(!result.isNull)\n\
    \            {\n                result[char] = result[char] + count;\n       \
    \     }\n            else\n            {\n                result[char] = count;\n\
    \            }\n        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        Nullable!(long) count\
    \ = get!(result, char);\n        \n        if(count == null) {\n            count\
    \ = long.zero;\n        }\n        \n        count = count + 1;\n        \n  \
    \      set!(result, char, count);\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    foreach(test, char => {\n   \
    \     Nullable!(long) count = count(test);\n        if(!result.isNull) {\n   \
    \         foreach(result, item => {\n                if(item.key == char) {\n\
    \                    item.count += count;\n                    return;\n     \
    \           }\n            });\n        }\n        result = Some(Nullable!(long[string])(char,\
    \ count));\n    });\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        long count = count(test,\
    \ char);\n        \n        if(result == null || count > result.get!())\n    \
    \    {\n            result = Nullable!(long[string])(char, count);\n        }\n\
    \    });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long[char]\
    \ counts = __nullable_long__();\n        \n        foreach(test, char => {\n \
    \           \n            if(char == char) {\n                counts[char] = counts[char]\
    \ + 1L;\n            }\n        });\n        \n        if(counts[char] > result.value)\
    \ {\n            result = Nullable!(long[char])(counts[char]);\n        }\n  \
    \  });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) result =\
    \ null;\n    \n    foreach(test, char => {\n        \n        long count = count(test);\n\
    \        \n        if(result == null) {\n            result = make(string, count);\n\
    \        } else {\n            \n            foreach(result, char => {\n     \
    \           \n                if(char == char) {\n                    result =\
    \ (result._1 + count);\n                }\n            });\n        }\n    });\n\
    \    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n   \
    \ Nullable!(long[string]) result = null;\n    \n    foreach(test, char => \n \
    \   {\n        Nullable!(long[string]) subResult = histogram(test.substring(0,char));\n\
    \        \n        if(subResult.nonNull)\n        {\n            foreach(subResult,\
    \ char => \n            {\n                if((result == null) || (result[char]\
    \ > result[char].value)) \n                {\n                    result = subResult;\n\
    \                }\n            });\n        }\n    });\n    \n    return result;\n\
    }", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string])();\n\
    \    \n    foreach(test, \n        function(char: char) \n        {\n        \
    \    histogram[char] = histogram[char] + (histogram[char] ? 1 : 0);\n        }\n\
    \    );\n    \n    return histogram;\n}", "{\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n    \n \
    \   foreach(test, char => {\n        \n        long count = count(test, char);\n\
    \        \n        if (result == null) {\n            result = Nullable!(long[string])(char,\
    \ count);\n        } else {\n            Nullable!(long[string])(char, count).ifPresent(x\
    \ => result = result.orElse(Nullable!(long[string])(char, count)));\n        }\n\
    \    });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n        \n        result\
    \ ??= Nullable!(long[string]);\n        \n        result ??= Nullable!(long[string]);\n\
    \        \n        result ??= Nullable!(long[string]);\n", "{\n    var dict: Dictionary[string,\
    \ long] = Dictionary[string, long]();\n    var maxCount: long = 0;\n    var maxLetter:\
    \ char = null;\n    \n    for (let i = 0; i < test.length; ++i)\n    {\n     \
    \   let letter = test.charAt(i);\n        let count = dict[letter];\n        \n\
    \        if (count > maxCount)\n        {\n            maxCount = count;\n   \
    \         maxLetter = letter;\n        }\n        \n        dict[letter] = count\
    \ + 1;\n    }\n    \n    return Nullable[dict[maxLetter], dict[maxLetter]];\n}",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach (char c in test)\
    \ {\n        Nullable!(long[string]) sub = histogram(c + \" \" + test);\n    \
    \    if (sub != null)\n            result = sub;\n    }\n    \n    if (result\
    \ == null)\n        result = ___null_dict___;\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(test, char => \n\
    \    {\n        Nullable!(long) count = count(test);\n        \n        if(count\
    \ == 0)\n        {\n            result = Nullable!(long[string]());\n        }\n\
    \        else if(count > 0)\n        {\n            foreach(test, char => \n \
    \           {\n                if(char == char)\n                {\n         \
    \           result = append(result, char);\n                }\n            });\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Nullable!(long[string]) histogram = Nullable!(long[string]);\n\
    \    \n    foreach(test, function(char) {\n        histogram[char] = histogram[char]\
    \ ?? 0L;\n        histogram[char] += 1;\n    });\n    \n    return histogram;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ => {\n        \n        long count = count(test);\n        \n        if(result\
    \ == null) {\n            result = make_dict(char,count);\n        } else {\n\
    \            result[char] = count;\n        }\n    });\n    \n    return result;\n\
    }", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char\
    \ c : char[]) \n    {\n        Nullable!(long) count = histogram(c);\n       \
    \ \n        if(count == null) \n        {\n            result = null;\n      \
    \      break;\n        }\n        \n        if(result == null) \n        {\n \
    \           result = count;\n        }\n        else \n        {\n           \
    \ result = max(result, count);\n        }\n    }\n    \n    return result;\n}",
  "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test, char =>\
    \ {\n        Nullable!(long) count = histogram(test).get(char);\n        \n  \
    \      if(count == null) {\n            count = 1L;\n        }\n        \n   \
    \     if(result == null) {\n            result = count;\n        } else {\n  \
    \          result = max(result, count);\n        }\n    });\n    \n    return\
    \ result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
