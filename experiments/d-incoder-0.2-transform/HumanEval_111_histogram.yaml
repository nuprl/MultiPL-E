name: HumanEval_111_histogram
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing a\
  \ space separated lowercase letters, return a dictionary\n    of the letter with\
  \ the most repetition and containing the corresponding count.\n    If several letters\
  \ have the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram(\"\
  a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    >>> histogram(\"a\
  \ b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"a b c a b\"\
  )\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"b b b b a\")\n    [\"\
  b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\n    \n*/\nNullable!(long[string])\
  \ histogram(string test) \n"
tests: "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result =\
  \ candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\"\
  : 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n  \
  \      assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n\
  \        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
  \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\
  \n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"\
  b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
  \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
  \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n\
  }\n\n}\nvoid main(){}"
completions: ["{\n    var histogram = Dictionary<long, int>()\n    test.split(\" \"\
    ).foreach(x => histogram[x] = histogram.getOrElse(x, 0) + 1)\n    return histogram.filter(_._2\
    \ > 1).map(_._1)\n}", "{\n    var dict = Nullable!(long[string]);\n    foreach(test,\
    \ char => {\n        var count = dict[char];\n        if(!count.isNull)\n    \
    \        dict[char] = count.value + 1;\n        else\n            dict[char] =\
    \ 1;\n    });\n    return dict;\n}", "{\n    Nullable!(long[string]) result =\
    \ null;\n    \n    foreach(test, char => \n    {\n        long count = test.count(char);\n\
    \        if(result == null)\n        {\n            result = __new__(Nullable!(long[string]));\n\
    \            result.__init(__new__(long[char]));\n        }\n        result.__setAt(char,\
    \ count);\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    foreach(test, char => \n    {\n        Nullable!(long[string])\
    \ subresult = histogram(test.substring(0,char+1));\n        \n        if(subresult\
    \ == null)\n        {\n            result = Nullable!(long[string])[char];\n \
    \       }\n        else\n        {\n            foreach(subresult, subchar =>\
    \ \n            {\n                if(subchar == char)\n                {\n  \
    \                  result = subresult;\n                }\n            });\n \
    \       }\n    });\n    return result;\n}", "{\n    Nullable!(long[string]) result\
    \ = null;\n    \n    foreach(test, char => {\n        \n        Nullable!(long)\
    \ count = count(test);\n        \n        if(count == 0)\n        {\n        \
    \    result = null;\n        }\n        else if(count > 0)\n        {\n      \
    \      Nullable!(long) maxCount = 0;\n            foreach(test, char => {\n  \
    \              if(char == char)\n                {\n                    if(count(test)\
    \ > maxCount)\n                    {\n                        maxCount = count(test);\n\
    \                        result = char;\n                    }\n             \
    \   }\n            });\n        }\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(test, char => {\n\
    \        \n        Nullable!(long) count = get!(result, char);\n        \n   \
    \     if(count == null) {\n            count = 1L;\n        }\n        \n    \
    \    set(result, char, count + 1L);\n    });\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = Nullable!(long[string]);\n    \n    foreach(test,\
    \ char => \n    {\n        result += (char)\n            : \n            long[string]\n\
    \            { \n                add(char);\n                add(1L);\n      \
    \      };\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ?? 0L;\n        histogram[char] +=\
    \ 1;\n    });\n    \n    return histogram;\n}", "{\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Nullable!(long[string]) result = null;\n \
    \   \n    foreach(test, char => \n    {\n        Nullable!(long) count = count(test);\n\
    \        \n        if(count == 0)\n        {\n            result = null;\n   \
    \     }\n        else if(count > result)\n        {\n            result = count;\n\
    \        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        Nullable!(long) count\
    \ = histogram(test + char);\n        if(!count.isNull)\n        {\n          \
    \  if(!result.isNull)\n            {\n                if(count.value > result.get!(0))\n\
    \                {\n                    result = count;\n                }\n \
    \           }\n            else\n            {\n                result = count;\n\
    \            }\n        }\n    });\n    \n    return result;\n}", "{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ? histogram[char] + 1L : 1L;\n    });\n\
    \    \n    return histogram;\n}", "{\n    var dict: Nullable!(long[string]) =\n\
    \        Nullable!(long[string])(\n            dict.empty,\n            fn __key__:\
    \ string -> Nullable!(long[string]) -> (long[string], long[string]) => \n    \
    \        {\n                let mutable count = 1L;\n                let mutable\
    \ max = 0L;\n                let mutable maxKey = \"\"L;\n                let\
    \ mutable maxCount = 0L;\n                let mutable maxKeyCount = 0L;\n    \
    \            let mutable maxKeyCountKey = \"\"L;\n                let mutable\
    \ maxKeyCountKeyCount = 0L;\n                let mutable maxKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCount = 0L;\n  \
    \              let mutable maxKeyCountKeyCountKeyCountKey = \"\"L;\n         \
    \       let mutable maxKeyCountKeyCountKeyCountKeyCount = 0L;\n              \
    \  let mutable maxKeyCountKeyCountKeyCountKeyCountKey = \"\"L;\n             \
    \   let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCount = 0L;\n          \
    \      let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKey = \"\"L;\n \
    \               let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                ", "{\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach(test,\
    \ char => {\n        \n        long count = count(test, char);\n        \n   \
    \     if(result == null) {\n            result = Nullable!(long[string])(char,\
    \ count);\n        } else {\n            \n            Nullable!(long[string])(char,\
    \ count) += result;\n        }\n    });\n    \n    return result;\n}", "{\n  \
    \  Nullable!(long[string]) result = null;\n    \n    foreach(test, char c : char[])\
    \ \n    {\n        Nullable!(long) count = histogram(test + c);\n        \n  \
    \      if(count == null) \n        {\n            result = Nullable!(long[string])(Nullable!(char));\n\
    \        }\n        else \n        {\n            Nullable!(long) maxCount = count.max;\n\
    \            Nullable!(char) maxChar = count.maxKey;\n            \n         \
    \   if(maxCount > result.max) \n            {\n                result = Nullable!(long[string])(maxChar,\
    \ maxCount);\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Nullable!(long[string]) result = null;\n    \n    foreach(test, char => {\n\
    \        \n        foreach(result, char => {\n            \n            if(char\
    \ == char) {\n                result[char] += 1;\n            }\n            else\
    \ {\n                result[char] = 1;\n            }\n            \n        });\n\
    \    });\n    \n    return result;\n}", "{\n    Nullable!(long[string]) histogram\
    \ = Nullable!(long[string])();\n    \n    foreach(test, function(x){\n       \
    \ histogram[x] = histogram[x] ? histogram[x] + 1 : 1;\n    });\n    \n    return\
    \ histogram;\n}", "{\n    Nullable!(long[string]) result = null;\n    \n    foreach\
    \ (char c in test)\n    {\n        Nullable!(long) count = histogram(c);\n   \
    \     if (count == null)\n        {\n            count = long.zero;\n        }\n\
    \        if (result == null)\n        {\n            result = count;\n       \
    \ }\n        else\n        {\n            result = result.add(count);\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
