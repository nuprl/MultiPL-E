language: d
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a > 0 && a < 64) return true;\n    if (a > 64 && a < 128)\
    \ return true;\n    if (a > 128 && a < 192) return true;\n    if (a > 192 && a\
    \ < 256) return true;\n    if (a > 256 && a < 320) return true;\n    if (a > 320\
    \ && a < 384) return true;\n    if (a > 384 && a < 448) return true;\n    if (a\
    \ > 448 && a < 512) return true;\n    if (a > 512 && a < 576) return true;\n \
    \   if (a > 576 && a < 640) return true;\n    if (a > 640 && a < 704) return true;\n\
    \    if (a > 704 && a < 768) return true;\n    if (a > 768 && a < 832) return\
    \ true;\n    if (a > 832 && a < 896) return true;\n    if (a > 896 && a < 960)\
    \ return true;\n    if (a > 960 && a < 1024) return true;\n    if (a > 1024 &&\
    \ a < 1088) return true;\n    if (a > 1088 && a < 1152) return true;\n    if (a\
    \ > 1152 && a < 1216) return true;\n    if (a > 1216 && a < 1280) return true;\n\
    \    if (a > 1280 && a < 1344) return true;\n    if (a > 1344 && a < 1408) return\
    \ true;\n    if (a > 1408 && a < 1472) return true;\n    if (a > 1472 && a < 1536)\
    \ return true;\n    if (a > 1536 && a < 1600) return true;\n    if (a > 1600 &&\
    \ a < 1664) return true;\n    if (a > 1664 && a < 1728) return true;\n    if (a\
    \ > 1728 && a < 1792) return true;\n    if (a > 1792 && a < 1856) return true;\n\
    \    if (a > 1856 && a < 1920) return true;\n    if (a > 1920 && a < 1984) return\
    \ true;\n    if (a > 1984 && a < 2048) return true;\n    if (a > 2048 && a < 2096)\
    \ return true;\n    if (a > 2096 && a < 2112) return true;\n    if (a > 2112 &&\
    \ a < 2176) return true;\n    if (a > 2176 && a < 2240) return true;\n    if (a\
    \ > 2240 && a < 2304) return true;\n    if (a > 2304 && a < 2368) return true;\n\
    \    if (a > 2368 && a < 2432) return true;\n    if (a > 2432 && a < 2496) return\
    \ true;\n    if (a > 2496 && a < 2560) return true;\n    if (a > \nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnvml7my.d(68): Error: expression expected, not `unittest`\n/tmp/tmpgnvml7my.d(69):
    Error: found `{` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgnvml7my.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ a * a * a;\n    return cube == a && cube % a == 0;\n}\n</code>\n<|/ a tags=c++,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `iscube(-10)` returns `true`\
    \ but `iscube(-100)` returns `false`.\n<|/ c |>\n<| c |>\nI guess you meant `iscube(-10)`\
    \ returns `true` but `iscube(-100)` returns `false`.\n<|/ c |>\n<| c |>\nYes,\
    \ I meant that. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `iscube(-10)` returns `true` but `iscube(-100)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nYes, I meant that. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpep76cwgc.d(28): Error: declaration expected, not `<`\n/tmp/tmpep76cwgc.d(31):
    Error: unterminated character constant\n/tmp/tmpep76cwgc.d(40): Error: unterminated
    character constant\n/tmp/tmpep76cwgc.d(51): Error: declaration expected, not `assert`\n/tmp/tmpep76cwgc.d(52):
    Error: declaration expected, not `assert`\n/tmp/tmpep76cwgc.d(53): Error: declaration
    expected, not `assert`\n/tmp/tmpep76cwgc.d(54): Error: declaration expected, not
    `assert`\n/tmp/tmpep76cwgc.d(55): Error: declaration expected, not `assert`\n/tmp/tmpep76cwgc.d(56):
    Error: declaration expected, not `assert`\n/tmp/tmpep76cwgc.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmpep76cwgc.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmpep76cwgc.d(59): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpep76cwgc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return iscube(a);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe that `iscube` should return\
    \ `true` if the number is divisible by `3`, not `9`.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. Thanks for pointing that out. I will edit my answer.\n<|/ c |>\n\
    <| c |>\nI believe that `iscube` should return `true` if the number is divisible\
    \ by `3`, not `9`.\n<|/ c |>\n<| c |>\nI believe that `iscube` should return `true`\
    \ if the number is divisible by `3`, not `9`.\n<|/ c |>\n<| c |>\nI believe that\
    \ `iscube` should return `true` if the number is divisible by `3`, not `9`.\n\
    <|/ c |>\n<| a tags=c++,math,algorithm |>\n<code>\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgpp87tbg.d(27): Error: declaration expected, not `<`\n/tmp/tmpgpp87tbg.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmpgpp87tbg.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmpgpp87tbg.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmpgpp87tbg.d(53): Error: declaration expected, not `assert`\n/tmp/tmpgpp87tbg.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmpgpp87tbg.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmpgpp87tbg.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmpgpp87tbg.d(57): Error: declaration expected, not `assert`\n/tmp/tmpgpp87tbg.d(58):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpp87tbg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return iscube_impl(a,\
    \ 0L, 0L);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_tvwveny.d(25): Error: undefined identifier `iscube_impl`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_tvwveny.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ a * a * a;\n    return cube == a && cube == a * a && cube == a * a * a;\n}\n\
    </code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with\
    \ `iscube(180)`.\n<|/ c |>\n<| c |>\n: I missed that one. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n: I added a solution that works with negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\n: I added a solution that works with negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\n: I added a solution that works with negative numbers\
    \ as well.\n<|/ c |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsosk3ppk.d(28): Error: declaration expected, not `<`\n/tmp/tmpsosk3ppk.d(31):
    Error: unterminated character constant\n/tmp/tmpsosk3ppk.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmpsosk3ppk.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmpsosk3ppk.d(53): Error: declaration expected, not `assert`\n/tmp/tmpsosk3ppk.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmpsosk3ppk.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmpsosk3ppk.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmpsosk3ppk.d(57): Error: declaration expected, not `assert`\n/tmp/tmpsosk3ppk.d(58):
    Error: declaration expected, not `assert`\n/tmp/tmpsosk3ppk.d(59): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsosk3ppk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ cube(a);\n    return cube != 0;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1gheq2eq.d(25): Error: undefined identifier `cube`, did you
    mean function `iscube`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gheq2eq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ a * a * a;\n    return cube == a && a % a == 0;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp377ek63d.d(28): Error: declaration expected, not `<`\n/tmp/tmp377ek63d.d(36):
    Error: declaration expected, not `assert`\n/tmp/tmp377ek63d.d(37): Error: declaration
    expected, not `assert`\n/tmp/tmp377ek63d.d(38): Error: declaration expected, not
    `assert`\n/tmp/tmp377ek63d.d(39): Error: declaration expected, not `assert`\n/tmp/tmp377ek63d.d(40):
    Error: declaration expected, not `assert`\n/tmp/tmp377ek63d.d(41): Error: declaration
    expected, not `assert`\n/tmp/tmp377ek63d.d(42): Error: declaration expected, not
    `assert`\n/tmp/tmp377ek63d.d(43): Error: declaration expected, not `assert`\n/tmp/tmp377ek63d.d(44):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp377ek63d.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        return false;\n    if (a % 3 ==\
    \ 0)\n        return true;\n    if (a % 3 == 1)\n        return false;\n    if\
    \ (a % 3 == 2)\n        return true;\n    if (a % 3 == 3)\n        return false;\n\
    \    if (a % 3 == 4)\n        return true;\n    if (a % 3 == 5)\n        return\
    \ false;\n    if (a % 3 == 6)\n        return true;\n    if (a % 3 == 7)\n   \
    \     return false;\n    if (a % 3 == 8)\n        return true;\n    if (a % 3\
    \ == 9)\n        return false;\n    if (a % 3 == 10)\n        return true;\n \
    \   if (a % 3 == 11)\n        return false;\n    if (a % 3 == 12)\n        return\
    \ true;\n    if (a % 3 == 13)\n        return false;\n    if (a % 3 == 14)\n \
    \       return true;\n    if (a % 3 == 15)\n        return false;\n    if (a %\
    \ 3 == 16)\n        return true;\n    if (a % 3 == 17)\n        return false;\n\
    \    if (a % 3 == 18)\n        return true;\n    if (a % 3 == 19)\n        return\
    \ false;\n    if (a % 3 == 20)\n        return true;\n    if (a % 3 == 21)\n \
    \       return false;\n    if (a % 3 == 22)\n        return true;\n    if (a %\
    \ 3 == 23)\n        return false;\n    if (a % 3 == 24)\n        return true;\n\
    \    if (a % 3 == 25)\n        return false;\n    if (a % 3 == 26)\n        return\
    \ true;\n    if (a % 3 == 27)\n        return false;\n    if (a % 3 == 28)\n \
    \       return true;\n    if (a % 3 == 29)\n        return false;\n    if (a %\
    \ 3 == 30)\n        return true;\n    if (a % 3 == 31)\n        return false;\n\
    \    if (a % 3 == 32)\n        return true;\n    if (a % 33 == 0)\n        return\
    \ true;\n    if (a % 33 == 1)\n        return false;\n    if (a % 33 == 2)\n \
    \       return true;\n    if (a % 33 == 3)\n        return false;\n    if (a %\
    \ 33 == 4)\n        return true;\n    if (a % 33 == 5)\n        return false;\n\
    \    if (a % 33 == 6)\n        return true;\n    if (a % 33 == 7)\n        return\
    \ false;\n    if (a % 33 == 8)\n        return true;\n    if (a % 33 == 9)\n \
    \       return false;\n    if (a % 33 == 10)\n        return true;\n    if (a\
    \ % 33 == 11)\n        return false;\n    if (a % 33 == 12)\n        return true;\n\
    \    if (a % 33 == 13)\n        return false;\n    if (a % 33 == 14)\n       \
    \ return true;\n    if (a % 33 == 15)\n        return false;\n    if (a % 33 ==\
    \ 16)\n        return true;\n    if (a % 33 == 17)\n        return false;\n  \
    \  if (a % 33 == 18)\n        return true;\n    if (a % 33 == 19)\n        return\
    \ false;\n    if (a % 33 == 20)\n        return true;\n    if (a % 33 == 21)\n\
    \        return false;\n    if (a % 33 == 22)\n        return true;\n    if (a\
    \ % 33 == 23)\n        return false;\n    if (a % 33 == 24)\n\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt62_o8dw.d(145): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt62_o8dw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ a*a*a*a;\n    return cube == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm_xdvs9f.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427da5]\n??:? void tmpm_xdvs9f.__unittest_L28_C1() [0x427a78]\n??:?
    void tmpm_xdvs9f.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42817b]\n??:? _d_run_main [0x4280e6]\n??:? main [0x427b37]\n??:?
    __libc_start_main [0x3fa08554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a > 0)\n    {\n        if (a % 2 == 0)\n      \
    \  {\n            if (a % 3 == 0)\n            {\n                if (a % 5 ==\
    \ 0)\n                {\n                    if (a % 7 == 0)\n               \
    \         return true;\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe `iscube`\
    \ function doesn't work for `iscube(180)`\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed it.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnkx5e7_v.d(43): Error: declaration expected, not `<`\n/tmp/tmpnkx5e7_v.d(46):
    Error: unterminated character constant\n/tmp/tmpnkx5e7_v.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmpnkx5e7_v.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmpnkx5e7_v.d(59): Error: declaration expected, not `assert`\n/tmp/tmpnkx5e7_v.d(60):
    Error: declaration expected, not `assert`\n/tmp/tmpnkx5e7_v.d(61): Error: declaration
    expected, not `assert`\n/tmp/tmpnkx5e7_v.d(62): Error: declaration expected, not
    `assert`\n/tmp/tmpnkx5e7_v.d(63): Error: declaration expected, not `assert`\n/tmp/tmpnkx5e7_v.d(64):
    Error: declaration expected, not `assert`\n/tmp/tmpnkx5e7_v.d(65): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkx5e7_v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    \n    long b = a / 3;\n    long c = a % 3;\n    \n\
    \    if (b == 0 && c == 0)\n        return true;\n    \n    if (b == 0 && c !=\
    \ 0)\n        return false;\n    \n    if (b != 0 && c == 0)\n        return false;\n\
    \    \n    if (b != 0 && c != 0)\n        return true;\n    \n    return false;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n`iscube(180L)` returns `true`\
    \ but `iscube(181L)` returns `false`\n<|/ c |>\n<| c |>\nI fixed the bug, thank\
    \ you for pointing it out!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl9b79zut.d(45): Error: declaration expected, not `<`\n/tmp/tmpl9b79zut.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpl9b79zut.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpl9b79zut.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpl9b79zut.d(62): Error: declaration expected, not `assert`\n/tmp/tmpl9b79zut.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmpl9b79zut.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmpl9b79zut.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmpl9b79zut.d(66): Error: declaration expected, not `assert`\n/tmp/tmpl9b79zut.d(67):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9b79zut.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ std.math.pow(a, 3);\n    return cube == a;\n}\n</code>\n<|/ a tags=c++,function,boolean,if-statement\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code, and you didn't explain how to fix it.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation to the code. Thanks for your comment\n\
    <|/ c |>\n<| c |>\nI didn't downvote either, but this answer doesn't explain how\
    \ to fix OP's code, and it still doesn't explain why OP's code doesn't work.\n\
    <|/ c |>\n<| c |>\nI added some explanation to the code. Thanks for your comment\n\
    <|/ c |>\n<| c |>\nI added some explanation to the code. Thanks for your comment\n\
    <|/ c |>\n<| a dscore=0 |>\nThe problem is that the if statement is always true\
    \ because you always return true in the first if statement. \n<code>\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkqkaqiul.d(28): Error: declaration expected, not `<`\n/tmp/tmpkqkaqiul.d(31):
    Error: unterminated character constant\n/tmp/tmpkqkaqiul.d(31): Error: unterminated
    character constant\n/tmp/tmpkqkaqiul.d(31): Error: unterminated character constant\n/tmp/tmpkqkaqiul.d(31):
    Error: unterminated character constant\n/tmp/tmpkqkaqiul.d(31): Error: unterminated
    character constant\n/tmp/tmpkqkaqiul.d(37): Error: unterminated character constant\n/tmp/tmpkqkaqiul.d(37):
    Error: unterminated character constant\n/tmp/tmpkqkaqiul.d(37): Error: unterminated
    character constant\n/tmp/tmpkqkaqiul.d(37): Error: unterminated character constant\n/tmp/tmpkqkaqiul.d(37):
    Error: unterminated character constant\n/tmp/tmpkqkaqiul.d(37): Error: unterminated
    character constant\n/tmp/tmpkqkaqiul.d(52): Error: declaration expected, not `assert`\n/tmp/tmpkqkaqiul.d(53):
    Error: declaration expected, not `assert`\n/tmp/tmpkqkaqiul.d(54): Error: declaration
    expected, not `assert`\n/tmp/tmpkqkaqiul.d(55): Error: declaration expected, not
    `assert`\n/tmp/tmpkqkaqiul.d(56): Error: declaration expected, not `assert`\n/tmp/tmpkqkaqiul.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpkqkaqiul.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmpkqkaqiul.d(59): Error: declaration expected, not
    `assert`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqkaqiul.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ a * a * a;\n    return cube == a ? true : false;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry but I don't understand how this\
    \ works. Could you please explain it a little bit more?\n<|/ c |>\n<| c |>\nI\
    \ added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I'm sorry but I don't understand how this works. Could you\
    \ please explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm\
    \ sorry but I don't understand how this works. Could you please explain it a little\
    \ bit more?\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n\
    using namespace std;\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpppb61k8z.d(28): Error: declaration expected, not `<`\n/tmp/tmpppb61k8z.d(31):
    Error: unterminated character constant\n/tmp/tmpppb61k8z.d(31): Error: unterminated
    character constant\n/tmp/tmpppb61k8z.d(37): Error: unterminated character constant\n/tmp/tmpppb61k8z.d(37):
    Error: unterminated character constant\n/tmp/tmpppb61k8z.d(43): Error: unterminated
    character constant\n/tmp/tmpppb61k8z.d(43): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppb61k8z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a%4==0)\
    \ && (a%8==0) && (a%16==0) && (a%32==0) && (a%64==0) && (a%128==0) && (a%256==0)\
    \ && (a%512==0) && (a%1024==0) && (a%2048==0) && (a%4096==0);\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI like your solution, but I wonder how it compares to\
    \ other solutions posted so far.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I wonder how it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder how it compares to other solutions posted so\
    \ far.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder how it compares\
    \ to other solutions posted so far.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder how it compares to other solutions posted so far.\n<|/ c |>\n<|\
    \ a |>\n<code>\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdg9_pr1e.d(27): Error: declaration expected, not `<`\n/tmp/tmpdg9_pr1e.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmpdg9_pr1e.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmpdg9_pr1e.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmpdg9_pr1e.d(53): Error: declaration expected, not `assert`\n/tmp/tmpdg9_pr1e.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmpdg9_pr1e.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmpdg9_pr1e.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmpdg9_pr1e.d(57): Error: declaration expected, not `assert`\n/tmp/tmpdg9_pr1e.d(58):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdg9_pr1e.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ a*a*a*a;\n    return cube == a && cube > 0;\n}\n</code>\n<|/ a tags=c++,c,math,algorithm\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any loops and\
    \ is very readable. Thanks!\n<|/ c |>\n<| c |>\nI like this solution as well,\
    \ because it doesn't require any loops and is very readable. Thanks!\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any loops and\
    \ is very readable. Thanks!\n<|/ c |>\n<| c |>\nI like this solution as well,\
    \ because it doesn't require any loops and is very readable. Thanks!\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any loops and\
    \ is very readable. Thanks!\n<|/ c |>\n<| a |>\n<code>\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhqn4lvl.d(28): Error: declaration expected, not `<`\n/tmp/tmpjhqn4lvl.d(31):
    Error: unterminated character constant\n/tmp/tmpjhqn4lvl.d(34): Error: unterminated
    character constant\n/tmp/tmpjhqn4lvl.d(37): Error: unterminated character constant\n/tmp/tmpjhqn4lvl.d(40):
    Error: unterminated character constant\n/tmp/tmpjhqn4lvl.d(43): Error: unterminated
    character constant\n/tmp/tmpjhqn4lvl.d(51): Error: declaration expected, not `assert`\n/tmp/tmpjhqn4lvl.d(52):
    Error: declaration expected, not `assert`\n/tmp/tmpjhqn4lvl.d(53): Error: declaration
    expected, not `assert`\n/tmp/tmpjhqn4lvl.d(54): Error: declaration expected, not
    `assert`\n/tmp/tmpjhqn4lvl.d(55): Error: declaration expected, not `assert`\n/tmp/tmpjhqn4lvl.d(56):
    Error: declaration expected, not `assert`\n/tmp/tmpjhqn4lvl.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmpjhqn4lvl.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmpjhqn4lvl.d(59): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjhqn4lvl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long long int\
    \ i;\n    long long int j;\n    long long int k;\n    long long int l;\n    long\
    \ long int m;\n    long long int n;\n    long long int o;\n    long long int p;\n\
    \    long long int q;\n    long long int r;\n    long long int s;\n    long long\
    \ int t;\n    long long int u;\n    long long int v;\n    long long int w;\n \
    \   long long int x;\n    long long int y;\n    long long int z;\n    long long\
    \ int aa;\n    long long int ab;\n    long long int ac;\n    long long int ad;\n\
    \    long long int ae;\n    long long int af;\n    long long int ag;\n    long\
    \ long int ah;\n    long long int ai;\n    long long int aj;\n    long long int\
    \ ak;\n    long long int al;\n    long long int am;\n    long long int an;\n \
    \   long long int ao;\n    long long int ap;\n    long long int aq;\n    long\
    \ long int ar;\n    long long int as;\n    long long int at;\n    long long int\
    \ au;\n    long long int av;\n    long long int aw;\n    long long int ax;\n \
    \   long long int ay;\n    long long int az;\n    long long int a0;\n    long\
    \ long int a1;\n    long long int a2;\n    long long int a3;\n    long long int\
    \ a4;\n    long long int a5;\n    long long int a6;\n    long long int a7;\n \
    \   long long int a8;\n    long long int a9;\n    long long int a10;\n    long\
    \ long int a11;\n    long long int a12;\n    long long int a13;\n    long long\
    \ int a14;\n    long long int a15;\n    long long int a16;\n    long long int\
    \ a17;\n    long long int a18;\n    long long int a19;\n    long long int a20;\n\
    \    long long int a21;\n    long long int a22;\n    long long int a23;\n    long\
    \ long int a24;\n    long long int a25;\n    long long int a26;\n    long long\
    \ int a27;\n    long long int a28;\n    long long int \nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcb1l3p5w.d(25): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpcb1l3p5w.d(25): Error: no identifier for declarator `long`\n/tmp/tmpcb1l3p5w.d(26):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpcb1l3p5w.d(26):
    Error: no identifier for declarator `long`\n/tmp/tmpcb1l3p5w.d(27): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpcb1l3p5w.d(27): Error:
    no identifier for declarator `long`\n/tmp/tmpcb1l3p5w.d(28): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmpcb1l3p5w.d(28): Error: no
    identifier for declarator `long`\n/tmp/tmpcb1l3p5w.d(29): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmpcb1l3p5w.d(29): Error: no identifier
    for declarator `long`\n/tmp/tmpcb1l3p5w.d(30): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpcb1l3p5w.d(30): Error: no identifier for
    declarator `long`\n/tmp/tmpcb1l3p5w.d(31): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpcb1l3p5w.d(31): Error: no identifier for declarator
    `long`\n/tmp/tmpcb1l3p5w.d(32): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpcb1l3p5w.d(32): Error: no identifier for declarator `long`\n/tmp/tmpcb1l3p5w.d(33):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpcb1l3p5w.d(33):
    Error: no identifier for declarator `long`\n/tmp/tmpcb1l3p5w.d(34): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpcb1l3p5w.d(34): Error:
    no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpcb1l3p5w.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a > 0)\n    {\n        if (a % 2 == 0)\n      \
    \      return iscube(a / 2);\n        else\n            return iscube(a / 2) &&\
    \ iscube(a / 2);\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. Try it with `iscube(-1L)`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. Try it with `iscube(64L)`.\n<|/ c |>\n<| c |>\n: It doesn't work for\
    \ `iscube(-1L)` because `-1L` isn't a cube. Try it with `iscube(64L)`.\n<|/ c\
    \ |>\n<| c |>\n: It works for `iscube(64L)` because `64L` _is_ a cube.\n<|/ c\
    \ |>\n<| c |>\n: It works for `iscube(64L)` because `64L` _is_ a cube. Try it\
    \ with `iscube(-1L)`.\n<|/ c |>\n<| a tags=c++,recursion,algorithm |>\n<code>\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpkmy3mb.d(36): Error: declaration expected, not `<`\n/tmp/tmpfpkmy3mb.d(39):
    Error: unterminated character constant\n/tmp/tmpfpkmy3mb.d(45): Error: unterminated
    character constant\n/tmp/tmpfpkmy3mb.d(45): Error: unterminated character constant\n/tmp/tmpfpkmy3mb.d(59):
    Error: declaration expected, not `assert`\n/tmp/tmpfpkmy3mb.d(60): Error: declaration
    expected, not `assert`\n/tmp/tmpfpkmy3mb.d(61): Error: declaration expected, not
    `assert`\n/tmp/tmpfpkmy3mb.d(62): Error: declaration expected, not `assert`\n/tmp/tmpfpkmy3mb.d(63):
    Error: declaration expected, not `assert`\n/tmp/tmpfpkmy3mb.d(64): Error: declaration
    expected, not `assert`\n/tmp/tmpfpkmy3mb.d(65): Error: declaration expected, not
    `assert`\n/tmp/tmpfpkmy3mb.d(66): Error: declaration expected, not `assert`\n/tmp/tmpfpkmy3mb.d(67):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpkmy3mb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long long int\
    \ b = a;\n    long long int c = a;\n    long long int d = a;\n    long long int\
    \ e = a;\n    long long int f = a;\n    long long int g = a;\n    long long int\
    \ h = a;\n    long long int i = a;\n    long long int j = a;\n    long long int\
    \ k = a;\n    long long int l = a;\n    long long int m = a;\n    long long int\
    \ n = a;\n    long long int o = a;\n    long long int p = a;\n    long long int\
    \ q = a;\n    long long int r = a;\n    long long int s = a;\n    long long int\
    \ t = a;\n    long long int u = a;\n    long long int v = a;\n    long long int\
    \ w = a;\n    long long int x = a;\n    long long int y = a;\n    long long int\
    \ z = a;\n    long long int A = a;\n    long long int B = a;\n    long long int\
    \ C = a;\n    long long int D = a;\n    long long int E = a;\n    long long int\
    \ F = a;\n    long long int G = a;\n    long long int H = a;\n    long long int\
    \ I = a;\n    long long int J = a;\n    long long int K = a;\n    long long int\
    \ L = a;\n    long long int M = a;\n    long long int N = a;\n    long long int\
    \ O = a;\n    long long int P = a;\n    long long int Q = a;\n    long long int\
    \ R = a;\n    long long int S = a;\n    long long int T = a;\n    long long int\
    \ U = a;\n    long long int V = a;\n    long long int W = a;\n    long long int\
    \ X = a;\n    long long int Y = a;\n    long long int Z = a;\n    long long int\
    \ AA = a;\n    long long int AB = a;\n    long long int AC = a;\n    long long\
    \ int AD = a;\n    long long int AE = a;\n    long long int AF = a;\n    long\
    \ long int AG = a;\n    long long int AH = a;\n    long long int AI = a;\n   \
    \ long long int AJ = a;\n    long long int AK = a;\n    long long int AL = a;\n\
    \    long long int AM = a;\n    long long int AN = a;\n    long long int AO =\
    \ a;\n    long long int AP = a;\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb15m89mr.d(25): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpb15m89mr.d(25): Error: no identifier for declarator `long`\n/tmp/tmpb15m89mr.d(26):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpb15m89mr.d(26):
    Error: no identifier for declarator `long`\n/tmp/tmpb15m89mr.d(27): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpb15m89mr.d(27): Error:
    no identifier for declarator `long`\n/tmp/tmpb15m89mr.d(28): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmpb15m89mr.d(28): Error: no
    identifier for declarator `long`\n/tmp/tmpb15m89mr.d(29): Error: use `long` for
    a 64 bit integer instead of `long long`\n/tmp/tmpb15m89mr.d(29): Error: no identifier
    for declarator `long`\n/tmp/tmpb15m89mr.d(30): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpb15m89mr.d(30): Error: no identifier for
    declarator `long`\n/tmp/tmpb15m89mr.d(31): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpb15m89mr.d(31): Error: no identifier for declarator
    `long`\n/tmp/tmpb15m89mr.d(32): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpb15m89mr.d(32): Error: no identifier for declarator `long`\n/tmp/tmpb15m89mr.d(33):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmpb15m89mr.d(33):
    Error: no identifier for declarator `long`\n/tmp/tmpb15m89mr.d(34): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpb15m89mr.d(34): Error:
    no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb15m89mr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return cube(a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4jpn42w.d(25): Error: undefined identifier `cube`, did you
    mean function `iscube`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4jpn42w.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns True \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ a * a*a*a;\n    return cube == a ? true : false;\n}\n</code>\n<|/ a tags=c++,c++11\
    \ |>\n<| c |>\n`return cube == a ? true : false;` can be simplified to `return\
    \ cube == a;`\n<|/ c |>\n<| c |>\n: Yes, but that would make the code less readable.\
    \ `return cube == a` is more readable than `return cube == a ? true : false;`\n\
    <|/ c |>\n<| c |>\n: I agree, but I find it easier to read and understand `return\
    \ cube == a` than `return cube == a ? true : false;`\n<|/ c |>\n<| c |>\n: I agree,\
    \ but I find it easier to read and understand `return cube == a` than `return\
    \ cube == a ? true : false;`\n<|/ c |>\n<| c |>\n: I agree, but I find it easier\
    \ to read and understand `return cube == a` than `return cube == a ? true : false;`\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9nonhjns.d(28): Error: declaration expected, not `<`\n/tmp/tmp9nonhjns.d(51):
    Error: declaration expected, not `assert`\n/tmp/tmp9nonhjns.d(52): Error: declaration
    expected, not `assert`\n/tmp/tmp9nonhjns.d(53): Error: declaration expected, not
    `assert`\n/tmp/tmp9nonhjns.d(54): Error: declaration expected, not `assert`\n/tmp/tmp9nonhjns.d(55):
    Error: declaration expected, not `assert`\n/tmp/tmp9nonhjns.d(56): Error: declaration
    expected, not `assert`\n/tmp/tmp9nonhjns.d(57): Error: declaration expected, not
    `assert`\n/tmp/tmp9nonhjns.d(58): Error: declaration expected, not `assert`\n/tmp/tmp9nonhjns.d(59):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9nonhjns.d",
    "-I/tmp"]\n'''
  stdout: b''
