name: HumanEval_79_decimal_to_binary
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou will be given a number in\
  \ decimal form and your task is to convert it to\n    binary format. The function\
  \ should return a string, with each character representing a binary\n    number.\
  \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
  \ couple of characters 'db' at the beginning and at the end of the string.\n   \
  \ The extra characters are there to help with the format.\n\n    Examples:\n   \
  \ >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
  \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n"
tests: "unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
  \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
  \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
completions: ["{\n    string binary = \"\";\n    long remainder;\n    long power =\
    \ 1;\n    long counter = 0;\n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        counter += 1;\n        binary\
    \ += to_string(power);\n        binary += to_string(remainder);\n        power\
    \ = power * 2;\n    }\n    binary += to_string(power);\n    binary += to_string(counter);\n\
    \    return binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    long power = 1;\n    \n \
    \   while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        power = power * 10;\n        result += char(remainder);\n   \
    \ }\n    \n    while(power > 0)\n    {\n        result += char(power % 2);\n \
    \       power /= 2;\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder = decimal;\n    string binary\
    \ = \"\";\n    \n    while(decimal > 0)\n    {\n        remainder = decimal %\
    \ 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n    result\
    \ += binary;\n    \n    if(decimal > 0)\n    {\n        result += \"db\";\n  \
    \  }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries other than\
    \ std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries\
    \ other than std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use\
    \ any libraries other than std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n  \
    \  {\n        remainder = remainder % 2;\n        result = char(remainder) + result;\n\
    \        remainder = remainder / 2;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,algorithm,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    string binary = \"\";\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    binary = to_string(remainder) + binary;\n    }\n    string db = \"db\";\n\
    \    string result = db + binary + db;\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,string |>\n<| c |>\nThis doesn't work. `to_string` returns a `string`\
    \ not a `char`.\n<|/ c |>\n<| c |>\nI fixed the code above. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\n`to_string` returns a `string` not a `char`.\n\
    <|/ c |>\n<| c |>\nI fixed the code above. Thanks for pointing that out.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long remainder;\n    \n\
    \    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        result += char(remainder);\n    }\n    \n    result += \"db\"\
    ;\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 0;\n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        counter++;\n        if(counter\
    \ % 2 == 0)\n        {\n            result += remainder;\n        }\n    }\n \
    \   result += \"db\";\n    while(counter > 0)\n    {\n        result += remainder;\n\
    \        counter -= 2;\n        remainder = remainder % 2;\n    }\n    result\
    \ += \"db\";\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    \n    while (remainder > 0)\n    {\n        remainder\
    \ = remainder % 2;\n        result = char(remainder) + result;\n        remainder\
    \ = remainder / 2;\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    long\
    \ power;\n    long digit;\n    long i;\n    \n    temp = decimal;\n    \n    while(temp\
    \ > 0)\n    {\n        remainder = temp % 2;\n        temp = temp / 2;\n     \
    \   power = 1;\n        \n        while(temp > 0)\n        {\n            digit\
    \ = temp % 10;\n            temp /= 10;\n            power *= 10;\n          \
    \  \n            if((digit == remainder) && (power > 0))\n            {\n    \
    \            binary += \"1\";\n                power -= 1;\n            }\n  \
    \          else\n            {\n                binary += \"0\";\n           \
    \ }\n        }\n    }\n    \n    binary = binary + \"db\";\n    \n    for(i =\
    \ 0; i < binary.length(); i++)\n    {\n        if(binary[i] == '0')\n        {\n\
    \            binary[i] = '1';\n        }\n        else\n        {\n          \
    \  binary[i] = '0';\n        }\n    }\n    \n    return binary;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n    {\n \
    \       remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring decimal_to_binary(long decimal)\n\
    {\n    string result = \"\";\n    long remainder;", "{\n    string result = \"\
    \";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while ((remainder = decimal %\
    \ 2L) != 0L)\n    {\n        result += char(remainder + '0');\n        decimal\
    \ /= 2L;\n    }\n    \n    while ((remainder = decimal % 10L) != 0L)\n    {\n\
    \        result += char(remainder + '0');\n        decimal /= 10L;\n    }\n  \
    \  \n    result += 'db';\n    \n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    string remainderAsString = to_string(remainder);\n    for(int i = 0; i <\
    \ remainderAsString.length(); i++)\n    {\n        if(remainder % 2 == 0)\n  \
    \      {\n            result += \"0\";\n        }\n        else\n        {\n \
    \           result += \"1\";\n        }\n        remainder = remainder / 2;\n\
    \    }\n    result += \"db\";\n    result += remainderAsString;\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    long power = 1;\n    string binary = \"\";\n    \n\
    \    while (remainder > 0)\n    {\n        remainder = remainder % 2;\n      \
    \  binary = to_string(power) + binary;\n        power = power * 10;\n    }\n \
    \   \n    string db = \"db\";\n    string extra = db + binary;\n    \n    if (decimal\
    \ < 0)\n    {\n        extra = extra + db + \"1\";\n    }\n    \n    result =\
    \ extra;\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for `decimal_to_binary(-15)`. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n<| c |>\n\
    It doesn't work for `decimal_to_binary(-15)`. Try it with `decimal_to_binary(-15)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring decimal_to_binary(long decimal)\n{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long power = 1;\n\
    \    string binary = \"\";\n    \n    while (remainder > 0)\n    {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(power) + binary;\n        power\
    \ = power * 10;\n    }\n    \n    string db = \"db\";\n    string extra = db +\
    \ binary;\n    \n    if (decimal < 0)\n    {\n        extra = extra + db + \"\
    1\";\n    }\n    \n    result = extra;\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string,binary |>\n<| c |>\nThis doesn't work. Try it with `decimal_to_binary(-15)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `decimal_to_binary(-15)`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for `decimal_to_binary(-15)`. Try it with `decimal_to_binary(-15)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `decimal_to_binary(-15)`.", "{\n\
    \    string result = \"\";\n    long remainder;\n    long power;\n    long digit;\n\
    \    bool isNegative;\n    bool isZero;\n    bool isOne;\n    bool isTwo;\n  \
    \  bool isThree;\n    bool isFour;\n    bool isFive;\n    bool isSix;\n    bool\
    \ isSeven;\n    bool isEight;\n    bool isNine;\n    bool isTen;\n    bool isEleven;\n\
    \    bool isTwelve;\n    bool isThirteen;\n    bool isFourteen;\n    bool isFifteen;\n\
    \    bool isSixteen;\n    bool isSeventeen;\n    bool isEighteen;\n    bool isNineteen;\n\
    \    bool isTwenty;\n    bool isTwentyOne;\n    bool isTwentyTwo;\n    bool isTwentyThree;\n\
    \    bool isTwentyFour;\n    bool isTwentyFive;\n    bool isTwentySix;\n    bool\
    \ isTwentySeven;\n    bool isTwentyEight;\n    bool isTwentyNine;\n    bool isThirty;\n\
    \    bool isThirtyOne;\n    bool isThirtyTwo;\n    bool isThirtyThree;\n    bool\
    \ isThirtyFour;\n    bool isThirtyFive;\n    bool isThirtySix;\n    bool isThirtySeven;\n\
    \    bool isThirtyEight;\n    bool isThirtyNine;\n    bool isForty;\n    bool\
    \ isFortyOne;\n    bool isFortyTwo;\n    bool isFortyThree;\n    bool isFortyFour;\n\
    \    bool isFortyFive;\n    bool isFortySix;\n    bool isFortySeven;\n    bool\
    \ isFortyEight;\n    bool isFortyNine;\n    bool isFifty;\n    bool isFiftyOne;\n\
    \    bool isFiftyTwo;\n    bool isFiftyThree;\n    bool isFiftyFour;\n    bool\
    \ isFiftyFive;\n    bool isFiftySix;\n    bool isFiftySeven;\n    bool isFiftyEight",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    \n    return binary;\n}", "{\n    string binary =\
    \ \"\";\n    long remainder;\n    long counter = 1;\n    \n    while(decimal !=\
    \ 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n       \
    \ binary += to_string(counter);\n        binary += to_string(remainder);\n   \
    \     counter += 1;\n    }\n    \n    return binary;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while ((remainder\
    \ = decimal % 2L) != 0L) \n    {\n        binary = char(remainder) + '0' + binary;\n\
    \        decimal = decimal / 2L;\n    }\n    \n    while ((remainder = decimal\
    \ % 10L) != 0L) \n    {\n        binary = char(remainder) + '0' + binary;\n  \
    \      decimal = decimal / 10L;\n    }\n    \n    return binary;\n}", "{\n   \
    \ string binary = \"\";\n    long remainder;\n    \n    while ((remainder = decimal\
    \ % 2) == 0)\n    {\n        binary = binary + \"0\";\n        decimal = decimal\
    \ / 2;\n    }\n    \n    while ((remainder = decimal % 10) == 0)\n    {\n    \
    \    binary = binary + \"1\";\n        decimal = decimal / 10;\n    }\n    \n\
    \    return binary;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        result += char(remainder);\n    }\n    \n    if(decimal\
    \ != 0)\n    {\n        result += \"db\";\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder = decimal;\n    long counter =\
    \ 1;\n    while(counter <= 64)\n    {\n        if(remainder >= counter)\n    \
    \    {\n            result += to_string(counter);\n            remainder -= counter;\n\
    \        }\n        counter *= 2;\n    }\n    result += \"db\" + to_string(remainder);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    string binary =\
    \ \"\";\n    \n    while (remainder > 0)\n    {\n        remainder = remainder\
    \ % 2;\n        binary = remainder + binary;\n        remainder = remainder /\
    \ 2;\n    }\n    \n    result += \"db\" + binary;\n    \n    return result;\n}",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += char(remainder);\n    }\n    \n    return binary;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your efforts, but I already know how to use strings\
    \ in C#. I am looking for a solution in C. Thanks anyways.\n<|/ c |>\n<| c |>\n\
    I added a C solution as well. Hope it helps.\n<|/ c |>\n<| c |>\nThanks, I appreciate\
    \ your efforts. I already know how to use strings in C#. I am looking for a solution\
    \ in C. Thanks anyways.\n<|/ c |>\n<| a tags=c,c++,c#,string |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>\n#include <string.h>", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal % 2;\n        binary = char(remainder) + binary;\n        decimal\
    \ = decimal / 2;\n    }\n    \n    return binary;\n}", "{\n    string binary =\
    \ \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while(counter\
    \ <= decimal)\n    {\n        remainder = remainder % 2;\n        binary = char(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter = counter + 1;\n\
    \    }\n    binary = char(remainder) + binary;\n    return binary;\n}", "{\n \
    \   string binary = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ > 0)\n    {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n\
    \        temp = remainder;\n        while(temp > 0)\n        {\n            binary\
    \ = binary + \"0\";\n            temp--;\n        }\n        binary = binary +\
    \ \"1\";\n    }\n    binary = binary + \"db\";\n    return binary;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    long remainder\
    \ = decimal;\n    string binary = \"\";\n    \n    while (remainder > 0)\n   \
    \ {\n        binary = to_string(remainder);\n        remainder = decimal % 2;\n\
    \        result += binary;\n    }\n    \n    result += \"db\";\n    result +=\
    \ to_string(remainder);\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    bool isNegative = false;\n    \n    if (decimal\
    \ < 0)\n    {\n        isNegative = true;\n        decimal = -decimal;\n    }\n\
    \    \n    remainder = decimal;\n    \n    while (remainder > 0)\n    {\n    \
    \    int remainderInt = remainder % 2;\n        string remainderString = string(remainderInt);\n\
    \        result += remainderString;\n        remainder = remainder / 2;\n    }\n\
    \    \n    if (isNegative)\n    {\n        result = \"-\" + result;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    long power;\n    \n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        power = decimal / 2;\n        \n        result += \"0\";\n   \
    \     result += remainder;\n        result += power;\n        \n        decimal\
    \ = power;\n    }\n    \n    result += \"db\";\n    \n    return result;\n}",
  "{\n    string binary = \"\";\n    long remainder = decimal;\n    \n    while(decimal\
    \ > 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n     \
    \   binary += remainder;\n    }\n    \n    binary = std.string.format(binary);\n\
    \    \n    string db = \"db\";\n    string result = db + binary;\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n\
    \    long power;\n    \n    temp = decimal;\n    \n    while(temp != 0)\n    {\n\
    \        remainder = temp % 2;\n        temp = temp / 2;\n        power = 1;\n\
    \        \n        while(temp != 0)\n        {\n            temp = temp * 2;\n\
    \            power *= 10;\n        }\n        \n        result += char(remainder);\n\
    \        result += char('0' + power);\n    }\n    \n    result += 'db';\n    result\
    \ += '0';\n    result += 'db';\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThis code is not working with decimal number greater than 9223372036854775807\n\
    <|/ c |>\n<| c |>\nIt works for me with decimal numbers up to 9223372036854775807.\n\
    <|/ c |>\n<| c |>\nI tested with decimal number 9223372036854775808 but it is\
    \ giving output as db1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb1111dbdb",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    \n    binary = std.string.format(binary);\n    binary\
    \ = std.string.format(\"db{0}db\", binary);\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long counter =\
    \ 1;\n    while(counter <= remainder)\n    {\n        string temp = to_string(counter);\n\
    \        result += temp;\n        remainder = remainder % counter;\n        counter\
    \ *= 2;\n    }\n    string temp = to_string(remainder);\n    result += temp;\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    \n    while (remainder >\
    \ 0)\n    {\n        remainder = remainder % 2;\n        result += char(remainder);\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,string,binary,decimal\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        result += char(remainder);\n    }\n    result += \"db\";\n  \
    \  result += char(remainder);\n    return result;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\n`string decimal_to_binary(long decimal)` should be `string decimal_to_binary(long\
    \ decimal)`\n<|/ c |>\n<| c |>\nThanks, fixed it\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    \n    result += \"db\";\n    \n  \
    \  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string binary = \"\";\n    long remainder;\n    \n    while ((remainder =\
    \ decimal % 2) == 0)\n    {\n        binary = binary(remainder) + binary;\n  \
    \      decimal /= 2;\n    }\n    \n    while ((remainder = decimal % 10) == 0)\n\
    \    {\n        binary = binary(remainder) + binary;\n        decimal /= 10;\n\
    \    }\n    \n    binary = binary(decimal) + binary;\n    \n    return binary;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n    long\
    \ power = 1;\n    long power2 = 1;\n    long power3 = 1;\n    long power4 = 1;\n\
    \    long power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n    long power8\
    \ = 1;\n    long power9 = 1;\n    long power10 = 1;\n    long power11 = 1;\n \
    \   long power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n    long\
    \ power15 = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long power18\
    \ = 1;\n    long power19 = 1;\n    long power20 = 1;\n    long power21 = 1;\n\
    \    long power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n    long\
    \ power25 = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long power28\
    \ = 1;\n    long power29 = 1;\n    long power30 = 1;\n    long power31 = 1;\n\
    \    long power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n    long\
    \ power35 = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long power38\
    \ = 1;\n    long power39 = 1;\n    long power40 = 1;\n    long power41 = 1;\n\
    \    long power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n    long\
    \ power45 = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long power48\
    \ = 1;\n    long power49 = 1;\n    long power50 = 1;\n    long power51 = 1;\n\
    \    long power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n    long\
    \ power55 = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long power58\
    \ = 1;\n    long power59 = 1;\n    long power60 = 1;\n    long power61 = 1;\n\
    \    long power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n    long\
    \ power65 = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long power68\
    \ = 1;\n    long power69 = 1;\n    long power70 = 1;\n    long power71 = 1;\n\
    \    long power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n    long\
    \ power75 = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long power78\
    \ = 1;\n    long power79 = 1;\n    long power80 = 1;\n    long power81 = 1;\n\
    \    ", "{\n    string result = \"\";\n    long remainder;\n    bool isNegative\
    \ = decimal < 0;\n    decimal /= 2;\n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal%2;\n        result += char(remainder);\n        decimal /= 2;\n  \
    \  }\n    if(isNegative)\n    {\n        result = \"-\" + result;\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| a tags=c++,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    long power = 1;\n    string\
    \ temp;\n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n  \
    \      decimal /= 2;\n        temp = to_string(power);\n        result += temp;\n\
    \        power *= 2;\n    }\n    result += \"db\";\n    result += to_string(power);\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| c |>\nThis\
    \ code doesn't work. `power *= 2;` should be `power *= 10;`\n<|/ c |>\n<| c |>\n\
    I fixed the code by changing power *= 2 to power *= 10. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n\
    #include <string>", "{\n    string result = \"\";\n    long remainder;\n    \n\
    \    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        result += char(remainder);\n    }\n    \n    result += \"db\"\
    ;\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder\
    \ = decimal;\n    string binary = \"\";\n    while(decimal != 0)\n    {\n    \
    \    remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary\
    \ = remainder + binary;\n    }\n    string db = \"db\";\n    string front = db\
    \ + binary;\n    string back = front.substr(0, front.length() - 1);\n    string\
    \ result = front + back;\n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n      \
    \  decimal /= 2;\n        result += string(remainder);\n    }\n    \n    result\
    \ += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        string remainderAsString = to_string(remainder);\n    \
    \    \n        if (remainder > 1)\n        {\n            remainderAsString +=\
    \ \"b\";\n        }\n        \n        result += remainderAsString;\n        remainder\
    \ -= 1;\n    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long counter =\
    \ 1;\n    string temp = \"\";\n    \n    while (remainder > 0)\n    {\n      \
    \  remainder = remainder % 2;\n        temp = temp + remainder;\n        counter\
    \ = counter * 10;\n    }\n    \n    temp = temp + \"db\";\n    \n    for(int i\
    \ = 0; i < counter; i++)\n    {\n        result = result + \"0\";\n    }\n   \
    \ \n    result = result + temp;\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThanks for the help! I appreciate it.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string binary = \"\";\n    long remainder;\n    long quotient;\n    \n  \
    \  while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        quotient\
    \ = decimal / 2;\n        binary = char(remainder) + binary;\n        decimal\
    \ = quotient;\n    }\n    \n    binary = char('d') + binary + char('b');\n   \
    \ return binary;\n}", "{\n    string result = \"\";\n    long remainder;\n   \
    \ \n    while ((remainder = decimal % 2L) != 0L)\n    {\n        result += char('0'\
    \ + remainder);\n        decimal /= 2L;\n    }\n    \n    while ((remainder =\
    \ decimal % 10L) != 0L)\n    {\n        result += char('0' + remainder);\n   \
    \     decimal /= 10L;\n    }\n    \n    result += 'db';\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        result += char(remainder);\n    }\n   \
    \ \n    result += \"db\";\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    long temp;\n    \n    while (decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n   \
    \     temp = remainder;\n        \n        while (temp != 0)\n        {\n    \
    \        result = \"0\" + result;\n            temp--;\n        }\n    }\n   \
    \ \n    result = \"db\" + result + \"db\";\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,binary,decimal |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string remainderDigits = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  \
    \  string temp = \"\";\n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        temp = digits[remainder] + temp;\n\
    \    }\n    for(int i = 0; i < temp.length(); i++)\n    {\n        result += temp[i];\n\
    \    }\n    result += \"db\";\n    for(int i = 0; i < remainderDigits.length();\
    \ i++)\n    {\n        result += remainderDigits[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;\nstring decimalToBinary(long\
    \ decimal)\n{\n    string result = \"\";\n    long remainder = decimal;\n    string\
    \ digits = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    string remainderDigits\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    string temp = \"\";\n    while(decimal\
    \ > 0)\n    {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n\
    \        temp = digits[remainder] + temp;\n    }\n    for(int i = 0; i < temp.length();\
    \ i++)\n    {\n        result += temp[i];\n    }\n    result += \"db\";\n    for(int\
    \ i = 0; i < remainderDigits.length(); i++)\n    {\n        result += remainderDigits[i];\n\
    \    }\n    return result;\n}", "{\n    string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while(counter <= decimal)\n    {\n  \
    \      remainder = remainder % 2;\n        binary = char(remainder) + binary;\n\
    \        remainder = remainder / 2;\n        counter = counter + 1;\n    }\n \
    \   binary = char(remainder) + binary;\n    return binary;\n}\n</code>\n<|/ a\
    \ tags=c++,binary,decimal |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder;\n    long power = 1;\n    long temp;\n    long\
    \ digit;\n    bool flag = false;\n    \n    while(decimal != 0)\n    {\n     \
    \   remainder = decimal % 2;\n        temp = decimal / 2;\n        digit = temp;\n\
    \        \n        if(digit == 0)\n        {\n            flag = true;\n     \
    \   }\n        \n        result += flag ? \"0\" : \"1\";\n        \n        decimal\
    \ /= 2;\n        power = power * 10;\n        \n        if(flag)\n        {\n\
    \            result += power.to_string();\n            power = 1;\n          \
    \  flag = false;\n        }\n    }\n    \n    result += \"db\";\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    long counter = 0;\n    while(decimal > 0)\n    {\n        remainder *= 10;\n\
    \        decimal -= remainder;\n        counter++;\n    }\n    for(int i = 0;\
    \ i < counter; i++)\n    {\n        result += char('0' + remainder % 2);\n   \
    \     remainder = remainder / 2;\n    }\n    result += \"db\";\n    result +=\
    \ \"0\" * (counter - 1);\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work for negative numbers. `decimal_to_binary(-15)` returns\
    \ `\"db1111db\"` instead of `\"-db1111db\"`.\n<|/ c |>\n<| c |>\nYeah, I noticed\
    \ that and fixed it. I was just trying to give a general idea of how it could\
    \ be done.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while ( decimal > 0 )\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        result += char(remainder);\n    }\n   \
    \ \n    if ( decimal > 0 )\n    {\n        remainder = decimal % 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder = decimal;\n    string binary\
    \ = \"\";\n    string temp = \"\";\n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        binary = remainder +\
    \ binary;\n    }\n    for(int i = 0; i < binary.length(); i++)\n    {\n      \
    \  if(binary[i] == '1')\n        {\n            temp = temp + \"1\";\n       \
    \ }\n        else\n        {\n            temp = temp + \"0\";\n        }\n  \
    \  }\n    temp = temp + \"db\";\n    for(int i = 0; i < binary.length(); i++)\n\
    \    {\n        if(binary[i] == '1')\n        {\n            temp = temp + \"\
    1\";\n        }\n        else\n        {\n            temp = temp + \"0\";\n \
    \       }\n    }\n    result = temp;\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThe question was about C/C++, not C#.\n<|/ c |>\n<| c |>\nI didn't\
    \ realize that until I saw the tags. I edited the answer to include a solution\
    \ in C/C++.\n<|/ c |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <stdio.h>\n\
    #include <stdlib.h>\n#include <string.h>\n#include <math.h>", "{\n    string result\
    \ = \"\";\n    long remainder;\n    long counter = 1;\n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += to_string(counter) + to_string(remainder);\n        counter *= 10;\n    }\n\
    \    result += \"db\";\n    result += to_string(counter);\n    return result;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long power = 1;\n\
    \    long temp;\n    long count = 0;\n    \n    while(decimal != 0)\n    {\n \
    \       remainder = decimal % 2;\n        temp = decimal / 2;\n        decimal\
    \ -= temp;\n        \n        while(temp != 0)\n        {\n            power =\
    \ power * 10;\n            temp = temp / 2;\n        }\n        \n        binary\
    \ = binary.concat(to_string(power));\n        binary = binary.concat(remainder);\n\
    \        \n        power = 1;\n        \n        count++;\n    }\n    \n    binary\
    \ = binary.concat(to_string(power));\n    binary = binary.concat(remainder);\n\
    \    \n    binary = binary.concat(\"db\");\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    while(decimal >\
    \ 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n       \
    \ result += char(remainder);\n    }\n    result += \"db\";\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    result += \"db\";\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += string(remainder, '1');\n\
    \    }\n    \n    binary = binary.substr(0, binary.length()-1);\n    \n    return\
    \ binary;\n}", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n\
    \    bool isNegative = false;\n    bool isEven = false;\n    bool isOdd = false;\n\
    \    bool isPositive = false;\n    bool isZero = false;\n    bool isOne = false;\n\
    \    bool isTwo = false;\n    bool isThree = false;\n    bool isFour = false;\n\
    \    bool isFive = false;\n    bool isSix = false;\n    bool isSeven = false;\n\
    \    bool isEight = false;\n    bool isNine = false;\n    bool isTen = false;\n\
    \    bool isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen =\
    \ false;\n    bool isFourteen = false;\n    bool isFifteen = false;\n    bool\
    \ isSixteen = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n\
    \    bool isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne\
    \ = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n \
    \   bool isTwentyFour = false;\n    bool isTwentyFive = false;\n    bool isTwentySix\
    \ = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight = false;\n\
    \    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool isThirtyOne\
    \ = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree = false;\n \
    \   bool isThirtyFour = false;\n    bool isThirtyFive = false;\n    bool isThirtySix\
    \ = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight = false;\n\
    \    bool isThirtyNine = false;\n    bool isForty = false;\n    bool isFortyOne\
    \ = false;\n    bool isFortyTwo = false;\n    bool isFortyThree = false;\n   \
    \ bool isFortyFour = false;\n    bool isFortyFive = false;\n    bool isFortySix\
    \ = false;\n    bool isFortySeven = false;\n    bool isFortyEight = false;\n \
    \   bool isFortyNine = false;\n    bool isFifty = false;\n    bool isFiftyOne\
    \ = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n   \
    \ bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = false;\n    bool is", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long power = 1;\n    long decimal2 = decimal;\n    while(decimal2 > 0)\n\
    \    {\n        remainder = decimal2 % 2;\n        decimal2 /= 2;\n        power\
    \ *= 10;\n        binary += char(remainder + power);\n    }\n    return binary;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cmath>\nusing namespace std;", "{\n    string result = \"\
    \";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n    {\n \
    \       remainder = remainder % 2;\n        result = char(remainder) + result;\n\
    \        remainder = remainder / 2;\n    }\n    \n    if (result.length() > 0)\n\
    \    {\n        result = \"db\" + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    long counter = 1;\n    long\
    \ power = 1;\n    long temp;\n    \n    while (decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        temp = power;\n    \
    \    power = power * 10;\n        temp = temp + remainder;\n        counter =\
    \ counter * power;\n        result += to_string(temp);\n    }\n    \n    result\
    \ += \"db\";\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n    \
    \    if(result.at(i) == '0')\n        {\n            result += \"0\";\n      \
    \  }\n        else\n        {\n            result += \"1\";\n        }\n    }\n\
    \    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        binary += string(remainder,\
    \ '0');\n    }\n    \n    return binary + \"db\";\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long remainder;\n    long\
    \ temp;\n    \n    while (decimal > 0)\n    {\n        remainder = decimal % 2;\n\
    \        temp = decimal / 2;\n        decimal -= temp;\n        result += to_string(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    \n    while (remainder >\
    \ 0)\n    {\n        long digit = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        \n        if (digit == 1)\n        {\n            result += \"\
    1\";\n        }\n        else\n        {\n            result += \"0\";\n     \
    \   }\n    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring decimal_to_binary(long decimal)\n\
    {\n    string result = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        long digit = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        \n        if (digit == 1)\n        {\n            result += \"\
    1\";\n        }\n        else\n        {\n            result += \"0\";\n     \
    \   }\n    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,binary,decimal |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string binary\
    \ = \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n  \
    \  {\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ % 2;\n    }\n    \n    return binary + \"db\";\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| c |>\nThis doesn't work. Try it with `decimal_to_binary(15L)`.\n<|/ c\
    \ |>\n<| c |>\nIt works. I tested it before posting it. I just tried it again\
    \ and it works. I must have done something wrong the first time I tested it.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I must have done something\
    \ wrong the first time I tested it.\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works. I must have done something wrong the first time I tested it.\n<|/\
    \ c |>\n<| c |>\nI tested it again and it works. I must have done something wrong\
    \ the first time I tested it.\n<|/ c |>\n<| a tags=c++,binary,decimal |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    \n    while (remainder >\
    \ 0)\n    {\n        remainder = remainder % 2;\n        result = char(remainder)\
    \ + result;\n        remainder = remainder / 2;\n    }\n    \n    result += \"\
    db\";\n    \n    return result;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    \n    while ((remainder = decimal % 2L) != 0L) {\n        binary = char(remainder\
    \ + '0');\n        decimal /= 2L;\n    }\n    \n    while ((remainder = decimal\
    \ % 10L) != 0L) {\n        binary = char(remainder + '0' + binary);\n        decimal\
    \ /= 10L;\n    }\n    \n    return binary;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    long power;\n    long digit;\n    bool isNegative;\n\
    \    bool isEven;\n    bool isOdd;\n    bool isPositive;\n    bool isZero;\n \
    \   bool isOne;\n    bool isTwo;\n    bool isThree;\n    bool isFour;\n    bool\
    \ isFive;\n    bool isSix;\n    bool isSeven;\n    bool isEight;\n    bool isNine;\n\
    \    bool isTen;\n    bool isEleven;\n    bool isTwelve;\n    bool isThirteen;\n\
    \    bool isFourteen;\n    bool isFifteen;\n    bool isSixteen;\n    bool isSeventeen;\n\
    \    bool isEighteen;\n    bool isNineteen;\n    bool isTwenty;\n    bool isTwentyOne;\n\
    \    bool isTwentyTwo;\n    bool isTwentyThree;\n    bool isTwentyFour;\n    bool\
    \ isTwentyFive;\n    bool isTwentySix;\n    bool isTwentySeven;\n    bool isTwentyEight;\n\
    \    bool isTwentyNine;\n    bool isThirty;\n    bool isThirtyOne;\n    bool isThirtyTwo;\n\
    \    bool isThirtyThree;\n    bool isThirtyFour;\n    bool isThirtyFive;\n   \
    \ bool isThirtySix;\n    bool isThirtySeven;\n    bool isThirtyEight;\n    bool\
    \ isThirtyNine;\n    bool isForty;\n    bool isFortyOne;\n    bool isFortyTwo;\n\
    \    bool isFortyThree;\n    bool isFortyFour;\n    bool isFortyFive;\n    bool\
    \ isFortySix;\n    bool isFortySeven;\n    bool isFortyEight;\n    bool isFortyNine;\n\
    \    bool isFifty;\n    bool isFiftyOne;\n    bool isFiftyTwo;\n    bool isFiftyThree;\n\
    \    bool isFiftyFour;\n    bool isFiftyFive;\n    bool isFiftySix;", "{\n   \
    \ string result = \"\";\n    long remainder;\n    long temp;\n    bool isNegative\
    \ = decimal < 0;\n    \n    if(isNegative)\n    {\n        decimal = -decimal;\n\
    \    }\n    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n\
    \        decimal = decimal / 2;\n        temp = remainder;\n        \n       \
    \ while(temp > 0)\n        {\n            result += std.char.digit(temp % 10);\n\
    \            temp = temp / 10;\n        }\n    }\n    \n    if(isNegative)\n \
    \   {\n        result += \"1\";\n    }\n    \n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal%2;\n        temp = decimal/2;\n  \
    \      decimal -= temp;\n        result += char(remainder);\n    }\n    \n   \
    \ if(decimal != 0)\n    {\n        result += char(remainder);\n    }\n    \n \
    \   result += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nstring decimal_to_binary(long decimal)\n{\n    string result\
    \ = \"\";\n    long remainder;\n    long temp;", "{\n    string result = \"\"\
    ;\n    long remainder = decimal;\n    string binary = \"\";\n    \n    while (remainder\
    \ > 0)\n    {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    \n    result += \"\
    db\" + binary + \"db\";\n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder = decimal;\n    \n    while(remainder > 0)\n    {\n    \
    \    int digit = remainder % 2;\n        remainder = remainder / 2;\n        result\
    \ += digit;\n    }\n    \n    result += \"db\";\n    \n    return result;\n}\n\
    </code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with\
    \ `decimal_to_binary(0)`.\n<|/ c |>\n<| c |>\nYeah, I realized that after I posted\
    \ it. I fixed it now.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `decimal_to_binary(0)`.\n\
    <|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    long remainder = decimal;\n    \n\
    \    while (remainder > 0)\n    {\n        remainder = remainder % 2;\n      \
    \  result += char(remainder);\n        remainder = remainder / 2;\n    }\n   \
    \ \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| c |>\nThis does not answer the question. OP wants to know how to convert\
    \ decimal to binary in C++.\n<|/ c |>\n<| c |>\nThe question was how to convert\
    \ decimal to binary in C++. My answer was how to do it in C++. My answer was also\
    \ the only answer that actually answered the question. My answer was also the\
    \ only answer that actually answered the question. My answer was also the only\
    \ answer that actually answered the question. My answer was also the only answer\
    \ that actually answered the question. My answer was also the only answer that\
    \ actually answered the question. My answer was also the only answer that actually\
    \ answered the question. My answer was also the only answer that actually answered\
    \ the question. My answer was also the only answer that actually answered the\
    \ question. My answer was also the only answer that actually answered the question.\
    \ My answer was also the only answer that actually answered the question. My answer\
    \ was also the only answer that actually answered the question. My answer was\
    \ also the only answer that actually answered the question. My answer was also\
    \ the only answer that actually answered the question. My answer was also the\
    \ only answer that actually answered the question. My answer was also the only\
    \ answer that actually answered the question. My answer was also the only answer\
    \ that actually answered the question. My answer was also the only answer that\
    \ actually answered the question. My answer was also the only answer that actually\
    \ answered the question. My answer was also the only answer that actually answered\
    \ the question. My answer was also the only answer that actually answered the\
    \ question. My answer was also the only answer that actually answered the question.\
    \ My answer was also the only answer that actually answered the question. My answer\
    \ was also the only answer that actually answered the question. My answer was\
    \ also the only answer that actually answered the question. My answer was also\
    \ the only answer that actually answered the question. My answer was also the ",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while ((remainder\
    \ = decimal % 2L) != 0L) {\n        result += char('0' + remainder);\n       \
    \ decimal /= 2L;\n    }\n    \n    while ((remainder = decimal % 10L) != 0L) {\n\
    \        result += char('0' + remainder);\n        decimal /= 10L;\n    }\n  \
    \  \n    result += 'db';\n    \n    return result;\n}", "{\n    string binary\
    \ = \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n  \
    \  {\n        remainder = remainder % 2;\n        binary = char(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    \n    return binary;\n}", "{\n\
    \    string binary = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += string(remainder, '0');\n    }\n    \n    return binary + \"db\";\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        string digit = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        result += digit;\n    }\n    \n    result += \"db\";\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    long temp;\n    \n    while (remainder > 0)\n    {\n        temp = (remainder\
    \ % 2);\n        remainder = remainder / 2;\n        result += to_string(temp);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,binary,decimal |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder;\n    long power;\n    long digit;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        power = decimal / 2;\n\
    \        digit = remainder * power;\n        result += to_string(digit);\n   \
    \     decimal = power;\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder = decimal;\n    \n    while\
    \ (remainder > 0)\n    {\n        remainder = remainder % 2;\n        result +=\
    \ char(remainder);\n        remainder = remainder / 2;\n    }\n    \n    if (decimal\
    \ != 0)\n    {\n        result += \"db\" + char(remainder);\n    }\n    \n   \
    \ return result;\n}", "{\n    string binary = \"\";\n    long remainder;\n   \
    \ long temp;\n    \n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        temp = remainder;\n        while(temp\
    \ > 0)\n        {\n            binary = \"0\" + binary;\n            temp = temp\
    \ / 2;\n        }\n        binary = \"1\" + binary;\n    }\n    \n    return binary;\n\
    }\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string binary\
    \ = \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n  \
    \  {\n        remainder *= 2;\n        binary += \"0\";\n    }\n    \n    while\
    \ (remainder != 0)\n    {\n        binary += \"1\";\n        remainder--;\n  \
    \  }\n    \n    return binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    long remainder;\n    long power;\n    long digit;\n    \n\
    \    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        power = 1;\n        \n        while(decimal > 0)\n \
    \       {\n            digit = decimal % 10;\n            decimal /= 10;\n   \
    \         power *= 10;\n            \n            if(digit == remainder)\n   \
    \         {\n                result += to_string(power) + to_string(digit);\n\
    \            }\n        }\n    }\n    \n    result += \"db\";\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    \n    while (remainder > 0)\n    {\n        int remainder2 = remainder %\
    \ 2;\n        remainder = remainder / 2;\n        result += char(remainder2);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c++,string,binary,decimal |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    string binary = \"\";\n    while(decimal != 0)\n \
    \   {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    string db = \"db\";\n    string result = db + binary\
    \ + db;\n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    long remainder = decimal;\n    string\
    \ binary = \"\";\n    \n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary = remainder + binary;\n    }\n \
    \   \n    for(int i = 0; i < binary.length(); i++)\n    {\n        if(binary[i]\
    \ == '1')\n        {\n            result += \"1\";\n        }\n        else\n\
    \        {\n            result += \"0\";\n        }\n    }\n    \n    result +=\
    \ \"db\";\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    string binary = \"\";\n    while(decimal != 0)\n \
    \   {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n    \
    \    binary = remainder + binary;\n    }\n    string db = \"db\";\n    string\
    \ front = db + binary;\n    string back = front.substr(2);\n    result += front;\n\
    \    result += back;\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,binary,decimal\
    \ |>\n<| c |>\nThis doesn't work. Try it with `decimal_to_binary(15L)`.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I used the example you gave.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `decimal_to_binary(15L)`. Try it with `decimal_to_binary(15L)`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the example you gave.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for `decimal_to_binary(15L)`. Try it with `decimal_to_binary(15L)`.\n\
    <|/ c |>\n<| a tags=c++,algorithm,binary,decimal |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <bitset>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder;\n    long power;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n   \
    \     power = 1;\n        \n        while(decimal > 0)\n        {\n          \
    \  power = power * 2;\n            decimal = decimal / 2;\n        }\n       \
    \ \n        result = result + char(remainder) + char('0' + power);\n    }\n  \
    \  \n    if(result.length() > 0)\n    {\n        result = \"db\" + result;\n \
    \   }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n\
    <| c |>\nThe `while` loop can be replaced with `result = result + char(remainder)\
    \ + char('0' + power);`\n<|/ c |>\n<| c |>\nThanks for your answer. I'm still\
    \ a beginner at C++ so I appreciate your help. I did try this out and it worked\
    \ perfectly. Thanks again!\n<|/ c |>\n<| c |>\nThis code doesn't work for negative\
    \ numbers. Try it with `decimal_to_binary(-32L)`.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I fixed the code by adding an if statement to check if decimal\
    \ is negative.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm still a beginner\
    \ at C++ so I appreciate your help. I did try this out and it worked perfectly.\
    \ Thanks again!\n<|/ c |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    \n    while (remainder > 0)\n    {\n        remainder\
    \ = remainder % 2;\n        result += char(remainder);\n        remainder = remainder\
    \ / 2;\n    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    string binary =\
    \ \"\";\n    string temp = \"\";\n    \n    while(decimal > 0)\n    {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        \n        binary =\
    \ remainder + binary;\n    }\n    \n    for(int i = 0; i < binary.length(); i++)\n\
    \    {\n        if(binary[i] == '1')\n        {\n            temp = \"1\";\n \
    \       }\n        else\n        {\n            temp = \"0\";\n        }\n   \
    \     \n        result += temp;\n    }\n    \n    result += \"db\";\n    \n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| a tags=c++,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long counter =\
    \ 0;\n    while(counter < 64)\n    {\n        if(remainder > 0)\n        {\n \
    \           result += \"1\";\n            remainder -= 1;\n        }\n       \
    \ else\n        {\n            result += \"0\";\n        }\n        counter +=\
    \ 1;\n    }\n    result += \"db\";\n    while(counter > 0)\n    {\n        result\
    \ += \"0\";\n        counter -= 1;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,string,binary,decimal |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `decimal_to_binary(-15)` returns `\"db1111db\"` instead of `\"db111111db\"\
    `.\n<|/ c |>\n<| c |>\nI added a fix for negative numbers. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `decimal_to_binary(-15)`\
    \ returns `\"db111111db\"` instead of `\"db1111db\"`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,string,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    if(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        result += char(remainder);\n    }\n    \n    result\
    \ += \"db\";\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long remainder;\n    \n    while(decimal != 0)\n    {\n        remainder =\
    \ decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n  \
    \  }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    \n    while (remainder >\
    \ 0)\n    {\n        int digit = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        result += char('0' + digit);\n    }\n    \n    if (remainder >\
    \ 0)\n    {\n        result += char('0' + remainder);\n    }\n    \n    result\
    \ += 'db';\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long power = 1;\n    long counter = 1;\n    bool first = true;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        \n        if(first)\n        {\n            result\
    \ += \"db\";\n            first = false;\n        }\n        \n        result\
    \ += to_string(remainder);\n        \n        power *= 2;\n        counter +=\
    \ 1;\n    }\n    \n    result += \"db\";\n    \n    while(counter > 0)\n    {\n\
    \        remainder = counter % 2;\n        counter /= 2;\n        \n        if(first)\n\
    \        {\n            result += \"db\";\n            first = false;\n      \
    \  }\n        \n        result += to_string(remainder);\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,string,binary,decimal |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    long power;\n    long temp;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n     \
    \   decimal = decimal / 2;\n        power = 1;\n        temp = remainder;\n  \
    \      while(temp > 0)\n        {\n            power = power * 2;\n          \
    \  temp = temp / 2;\n        }\n        result = result + std.string.format(std.string.format(\"\
    %c\", remainder), power);\n    }\n    \n    if(result == \"0\")\n    {\n     \
    \   result = \"db\";\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while(counter <= 32)\n    {\n        remainder = remainder\
    \ % 2;\n        result += remainder == 0 ? \"0\" : \"1\";\n        remainder =\
    \ remainder / 2;\n        counter++;\n    }\n    result += \"db\";\n    while(counter\
    \ > 0)\n    {\n        remainder = remainder % 2;\n        result += remainder\
    \ == 0 ? \"0\" : \"1\";\n        remainder = remainder / 2;\n        counter--;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <math.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <inttypes.h>\n\
    #include <time.h>", "{\n    string binary = \"\";\n    long remainder = decimal;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    return binary\
    \ + \"db\" + binary + \"db\";\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    bool isNegative = false;\n    bool isEven = false;\n    bool isOdd = false;\n\
    \    bool isPositive = false;\n    bool isZero = false;\n    bool isOne = false;\n\
    \    bool isTwo = false;\n    bool isThree = false;\n    bool isFour = false;\n\
    \    bool isFive = false;\n    bool isSix = false;\n    bool isSeven = false;\n\
    \    bool isEight = false;\n    bool isNine = false;\n    bool isTen = false;\n\
    \    bool isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen =\
    \ false;\n    bool isFourteen = false;\n    bool isFifteen = false;\n    bool\
    \ isSixteen = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n\
    \    bool isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne\
    \ = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n \
    \   bool isTwentyFour = false;\n    bool isTwentyFive = false;\n    bool isTwentySix\
    \ = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight = false;\n\
    \    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool isThirtyOne\
    \ = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree = false;\n \
    \   bool isThirtyFour = false;\n    bool isThirtyFive = false;\n    bool isThirtySix\
    \ = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight = false;\n\
    \    bool isThirtyNine = false;\n    bool isForty = false;\n    bool isFortyOne\
    \ = false;\n    bool isFortyTwo = false;\n    bool isFortyThree = false;\n   \
    \ bool isFortyFour = false;\n    bool isFortyFive = false;\n    bool isFortySix\
    \ = false;\n    bool isFortySeven = false;\n    bool isFortyEight = false;\n \
    \   bool isFortyNine = false;\n    bool isFifty = false;\n    bool isFiftyOne\
    \ = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n   \
    \ bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = false;\n    bool isFiftySeven", "{\n    string binary = \"\";\n    long remainder;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n     \
    \   decimal /= 2;\n        binary += string(remainder, '1');\n    }\n    \n  \
    \  return binary + \"db\";\n}", "{\n    string result = \"\";\n    long remainder\
    \ = decimal;\n    \n    while (remainder > 0)\n    {\n        remainder = remainder\
    \ % 2;\n        result += char(remainder);\n    }\n    \n    result += \"db\"\
    ;\n    \n    while (remainder > 0)\n    {\n        remainder = remainder % 2;\n\
    \        result += char(remainder);\n    }\n    \n    return result;\n}", "{\n\
    \    string binary = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        string digit = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        binary = digit + binary;\n    }\n    \n    return binary + \"\
    db\";\n}", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    temp = decimal / 2;\n        result += char(remainder);\n        decimal\
    \ = temp;\n    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,binary,decimal |>\n<| c |>\nThis code does not work.\
    \ Try it with `decimal_to_binary(15L)`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works fine. Can you please elaborate on what is not working?\n<|/ c |>\n<| c\
    \ |>\nThe code does not work. Try it with `decimal_to_binary(15L)`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Can you please elaborate on what is not\
    \ working?\n<|/ c |>\n<| c |>\nThe code does not work. Try it with `decimal_to_binary(15L)`.\n\
    <|/ c |>\n<| a tags=c++,algorithm,binary,decimal |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        result += char(remainder);\n    }\n   \
    \ \n    result += \"db\";\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    string binary = \"\";\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal = decimal /\
    \ 2;\n        binary = remainder + binary;\n    }\n    for(int i = 0; i < binary.length();\
    \ i++)\n    {\n        if(binary[i] == '1')\n        {\n            result +=\
    \ '1';\n        }\n        else\n        {\n            result += '0';\n     \
    \   }\n    }\n    result += 'db';\n    result += binary.substr(0, binary.length()\
    \ - 2);\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question\
    \ was about a recursive solution, not iterative.\n<|/ c |>\n<| c |>\nI didn't\
    \ see that in the question. My bad.\n<|/ c |>\n<| c |>\nI added a recursive solution\
    \ as well. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic String decimalToBinary(long\
    \ decimal) {\n    long remainder = decimal;\n    String binary = \"\";\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal = decimal\
    \ / 2;\n        binary = remainder + binary;\n    }\n    StringBuilder result\
    \ = new StringBuilder();\n    for (int i = 0; i < binary.length(); i++) {\n  \
    \      if (binary.charAt(i) == '1') {\n            result.append('1');\n     \
    \   } else {\n            result.append('0');\n        }\n    }\n    result.insert(0,\
    \ \"db\");\n    return result.toString();\n}\n</code>\n<|/ a tags=recursion,java\
    \ |>\n<| a dscore=0 |>\n<code>\npublic String decimalToBinary(long decimal) {\n\
    \    long remainder = decimal;\n    String binary = \"\";\n    while (decimal\
    \ != 0) {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n\
    \        binary = remainder + binary;\n    }\n    StringBuilder result = new StringBuilder();\n\
    \    for (int i = 0; i < binary.length(); i++) {\n        if (binary.charAt(i)\
    \ == '1') {\n            result.append('1');\n        } else {\n            result.append('0');\n\
    \        }\n    }\n    result.insert(0, \"db\");\n    return result.toString();\n\
    }\n</code>\n<|/ a tags=recursion,java |>\n<| a tags=recursion,java |>\n<code>\n\
    public String decimalToBinary(long decimal) {\n    long remainder = decimal;\n\
    \    String binary = \"\";\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        binary = remainder + binary;\n\
    \    }\n    StringBuilder ", "{\n    string result = \"\";\n    long remainder;\n\
    \    long power = 1;\n    long temp;\n    \n    while(decimal != 0)\n    {\n \
    \       remainder = decimal % 2;\n        temp = decimal / 2;\n        decimal\
    \ -= temp;\n        power = power * 10;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    while(power != 0)\n    {\n        remainder\
    \ = power % 2;\n        temp = power / 2;\n        power -= temp;\n        result\
    \ += char(remainder);\n    }\n    \n    return result;\n}", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        binary += string(remainder,\
    \ '0');\n    }\n    \n    binary = binary + \"db\";\n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    string binary =\
    \ \"\";\n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n   \
    \     decimal = decimal / 2;\n        binary = remainder + binary;\n    }\n  \
    \  string extra = \"db\";\n    for(int i = 0; i < binary.length(); i++)\n    {\n\
    \        if(binary.at(i) == '1')\n        {\n            extra = extra + \"1\"\
    ;\n        }\n        else\n        {\n            extra = extra + \"0\";\n  \
    \      }\n    }\n    result = extra + binary;\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try `decimal_to_binary(0)`\
    \ which returns `\"db\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It\
    \ returns `\"db\"` for `decimal_to_binary(0)`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `decimal_to_binary(0)` because `decimal % 2` is `0` and the loop never\
    \ executes.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns `\"\
    db\"` for `decimal_to_binary(0)`.\n<|/ c |>\n<| c |>\nIt doesn't work for `decimal_to_binary(0)`\
    \ because `decimal % 2` is `0` and the loop never executes.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long counter =\
    \ 1;\n    while(counter <= decimal)\n    {\n        remainder = remainder % 2;\n\
    \        result += char(remainder);\n        counter++;\n    }\n    result +=\
    \ \"db\";\n    while(counter > 0)\n    {\n        remainder = remainder % 2;\n\
    \        result += char(remainder);\n        counter--;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `decimal_to_binary(-15)` returns `
  "{\n    string result = \"\";\n    long remainder = decimal;\n    string binary\
    \ = \"\";\n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    for(int i = 0;\
    \ i < binary.length(); i++)\n    {\n        if(binary[i] == '1')\n        {\n\
    \            result += binary[i];\n        }\n    }\n    result += \"db\";\n \
    \   result += binary;\n    result += \"db\";\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    string result = \"\";\n    long remainder = decimal;\n    long temp;\n \
    \   while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        temp\
    \ = remainder;\n        decimal /= 2;\n        result += to_string(temp);\n  \
    \  }\n    result += \"db\";\n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal % 2;\n        temp = remainder;\n        decimal /= 2;\n        result\
    \ += to_string(temp);\n    }\n    result += \"db\";\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nThe `to_string` function can be replaced with\
    \ `std::bitset<8>(remainder).to_string()`.\n<|/ c |>\n<| c |>\nThanks so much!\
    \ I appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <bitset>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while ((remainder = decimal % 2L) !=\
    \ 0L)\n    {\n        result += char(remainder + '0');\n        decimal /= 2L;\n\
    \    }\n    \n    while ((remainder = decimal % 10L) != 0L)\n    {\n        result\
    \ += char(remainder + '0');\n        decimal /= 10L;\n    }\n    \n    result\
    \ += 'db';\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain what is the purpose\
    \ of \"long remainder\" in the first while loop?\n<|/ c |>\n<| c |>\nThe first\
    \ while loop will loop until it reaches 0. The remainder is what remains after\
    \ dividing by 2 until it reaches 0. After that it will loop until it reaches 10.\
    \ The remainder is what remains after dividing by 10 until it reaches 0. After\
    \ that it will loop until it reaches 0. The remainder is what remains after dividing\
    \ by 2 until it reaches 0. After that it will loop until it reaches 10. The remainder\
    \ is what remains after dividing by 10 until it reaches 0. After that it will\
    \ loop until it reaches 0. The remainder is what remains after dividing by 2 until\
    \ it reaches 0. After that it will loop until it reaches 10. The remainder is\
    \ what remains after dividing by 10 until it reaches 0. After that it will loop\
    \ until it reaches 0. The remainder is what remains after dividing by 2 until\
    \ it reaches 0. After that it will loop until it reaches 10. The remainder is\
    \ what remains after dividing by 10 until it reaches 0. After that it will loop\
    \ until it reaches 0. The remainder is what remains after dividing by 2 until\
    \ it reaches 0. After that it will loop until it reaches 10. The remainder is\
    \ what remains after dividing by 10 until it reaches 0. After that it will loop\
    \ until it reaches 0. The remainder is what remains after dividing by 2 until\
    \ it reaches 0. After that it will loop until it reaches 10. The remainder is\
    \ what remains after dividing by 10 until it reaches 0. After that it will loop\
    \ until it reaches 0. The remainder is what remains after dividing by 2 until\
    \ it reaches 0. After that it will loop until it reaches 10. The remainder is\
    \ what remains after dividing by 10 until it reaches 0. After that it will loop\
    \ until it reaches 0", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long power;\n    long temp;\n    long digit;\n    bool isNegative;\n    bool\
    \ isEven;\n    bool isOdd;\n    bool isPositive;\n    bool isZero;\n    bool isOne;\n\
    \    bool isTwo;\n    bool isThree;\n    bool isFour;\n    bool isFive;\n    bool\
    \ isSix;\n    bool isSeven;\n    bool isEight;\n    bool isNine;\n    bool isTen;\n\
    \    bool isEleven;\n    bool isTwelve;\n    bool isThirteen;\n    bool isFourteen;\n\
    \    bool isFifteen;\n    bool isSixteen;\n    bool isSeventeen;\n    bool isEighteen;\n\
    \    bool isNineteen;\n    bool isTwenty;\n    bool isTwentyOne;\n    bool isTwentyTwo;\n\
    \    bool isTwentyThree;\n    bool isTwentyFour;\n    bool isTwentyFive;\n   \
    \ bool isTwentySix;\n    bool isTwentySeven;\n    bool isTwentyEight;\n    bool\
    \ isTwentyNine;\n    bool isThirty;\n    bool isThirtyOne;\n    bool isThirtyTwo;\n\
    \    bool isThirtyThree;\n    bool isThirtyFour;\n    bool isThirtyFive;\n   \
    \ bool isThirtySix;\n    bool isThirtySeven;\n    bool isThirtyEight;\n    bool\
    \ isThirtyNine;\n    bool isForty;\n    bool isFortyOne;\n    bool isFortyTwo;\n\
    \    bool isFortyThree;\n    bool isFortyFour;\n    bool isFortyFive;\n    bool\
    \ isFortySix;\n    bool isFortySeven;\n    bool isFortyEight;\n    bool isFortyNine;\n\
    \    bool isFifty;\n    bool isFiftyOne;\n    bool isFiftyTwo;\n    bool isFiftyThree;\n\
    \    bool isFiftyFour;\n    bool isFiftyFive;\n    bool isF", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += string(remainder, '0');\n\
    \    }\n    \n    binary = binary + \"db\";\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long power;\n    bool\
    \ isNegative = false;\n    \n    if(decimal < 0)\n    {\n        isNegative =\
    \ true;\n        decimal = -decimal;\n    }\n    \n    while(decimal > 0)\n  \
    \  {\n        remainder = decimal%2;\n        decimal = decimal/2;\n        power\
    \ = 1;\n        \n        while(decimal > 0)\n        {\n            power *=\
    \ 10;\n            decimal -= 1;\n        }\n        \n        if(isNegative)\n\
    \        {\n            power *= -1;\n        }\n        \n        result = to_string(power)\
    \ + result;\n    }\n    \n    if(isNegative)\n    {\n        result = \"-\" +\
    \ result;\n    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ code does not work for negative numbers. I added a fix for that.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nstring decimal_to_binary(long decimal)\n{\n    string\
    \ result = \"\";\n    long remainder;\n    long power;\n    bool isNegative =\
    \ false;\n    \n    if(decimal < 0)\n    {\n        isNegative = true;\n     \
    \   decimal = -decimal;\n    }\n    \n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal%2;\n        decimal = decimal/2;\n        power = 1;\n        \n \
    \       while(decimal > 0)\n        {\n            power *= 10;\n            decimal\
    \ -= 1;\n        }\n        \n        if(isNegative)\n        {\n            power\
    \ *= -1;\n        }\n        \n        result = to_string(power) + result;\n \
    \   }\n    \n    if(isNegative)\n    {\n        result = \"-\" + result;\n   \
    \ }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,c++11 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=c++,c++11 |>\n<code>\nstring decimal_to_binary(long decimal)\n\
    {\n    string result = \"\";\n    long remainder;\n    long power;\n    bool isNegative\
    \ = false;\n    \n    if(decimal < 0)\n    {\n        isNegative = true;\n   \
    \     decimal = -decimal;\n    }\n    \n    while(decimal > 0)\n    {\n      \
    \  remainder = decimal%2;\n        decimal = decimal/2;\n        power = 1;\n\
    \        \n        while(decimal > 0)\n        {\n            power *= 10;\n \
    \           decimal -= 1;\n        }\n        \n        if(", "{\n    string result\
    \ = \"\";\n    long remainder;\n    bool isNegative = decimal < 0;\n    bool isEven\
    \ = decimal % 2 == 0;\n    bool isOdd = !isEven;\n    bool isPositive = decimal\
    \ > 0;\n    bool isNegative = decimal < 0;\n    bool isEven = decimal % 2 == 0;\n\
    \    bool isOdd = !isEven;\n    bool isPositive = decimal > 0;\n    bool isNegative\
    \ = decimal < 0;\n    bool isEven = decimal % 2 == 0;\n    bool isOdd = !isEven;\n\
    \    bool isPositive = decimal > 0;\n    bool isNegative = decimal < 0;\n    bool\
    \ isEven = decimal % 2 == 0;\n    bool isOdd = !isEven;\n    bool isPositive =\
    \ decimal > 0;\n    bool isNegative = decimal < 0;\n    bool isEven = decimal\
    \ % 2 == 0;\n    bool isOdd = !isEven;\n    bool isPositive = decimal > 0;\n \
    \   bool isNegative = decimal < 0;\n    bool isEven = decimal % 2 == 0;\n    bool\
    \ isOdd = !isEven;\n    bool isPositive = decimal > 0;\n    bool isNegative =\
    \ decimal < 0;\n    bool isEven = decimal % 2 == 0;\n    bool isOdd = !isEven;\n\
    \    bool isPositive = decimal > 0;\n    bool isNegative = decimal < 0;\n    bool\
    \ isEven = decimal % 2 == 0;\n    bool isOdd = !isEven;\n    bool isPositive =\
    \ decimal > 0;\n    bool isNegative = decimal < 0;\n    bool isEven = decimal\
    \ % 2 == 0;\n    bool isOdd = !isEven;\n    bool isPositive = decimal > 0;\n \
    \   bool isNegative = decimal < 0;\n    bool isEven = decimal % 2 == 0;\n    bool\
    \ isOdd = !isEven;\n    bool isPositive = decimal > 0;\n    bool isNegative =\
    \ decimal < 0;\n    bool isEven = decimal % 2 == 0;\n    bool isOdd = !isEven;\n\
    \    bool isPositive = decimal > 0;\n    bool isNegative = decimal < 0;\n    bool\
    \ isEven = decimal % 2 == 0;\n    bool isOdd = !isEven;\n    bool isPositive =\
    \ decimal > 0;\n    bool isNegative = decimal < 0;\n    bool isEven = decimal\
    \ % 2 == 0;\n    bool isOdd = !isEven;\n    ", "{\n    string binary = \"\";\n\
    \    long remainder = decimal;\n    \n    while(remainder > 0)\n    {\n      \
    \  binary = remainder % 2 == 0 ? \"0\" + binary : \"1\" + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    \n    return binary;\n}", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while ((remainder = decimal % 2L) !=\
    \ 0L)\n    {\n        binary = char(remainder) + '0' + binary;\n        decimal\
    \ = decimal / 2L;\n    }\n    \n    while ((remainder = decimal % 10L) != 0L)\n\
    \    {\n        binary = char(remainder) + '0' + binary;\n        decimal = decimal\
    \ / 10L;\n    }\n    \n    return binary;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while (decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        binary += string(remainder,\
    \ '0');\n    }\n    \n    return binary;\n}", "{\n    string binary = \"\";\n\
    \    long remainder = decimal;\n    \n    while (remainder > 0)\n    {\n     \
    \   string bit = remainder % 2 == 0 ? \"1\" : \"0\";\n        binary = bit + binary;\n\
    \        remainder = remainder / 2;\n    }\n    \n    binary = binary + \"db\"\
    ;\n    \n    return binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    \n    while ((remainder = decimal % 2L) != 0L)\n    {\n        binary = char(remainder)\
    \ + '0' + binary;\n        decimal /= 2L;\n    }\n    \n    while ((remainder\
    \ = decimal % 10L) != 0L)\n    {\n        binary = char(remainder) + '0' + binary;\n\
    \        decimal /= 10L;\n    }\n    \n    return binary;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic String decimalToBinary(long decimal) {\n\
    \    StringBuilder sb = new StringBuilder();\n    long remainder;\n    \n    while\
    \ ((remainder = decimal % 2L) != 0L) {\n        sb.append(remainder);\n      \
    \  decimal /= 2L;\n    }\n    \n    while ((remainder = decimal % 10L) != 0L)\
    \ {\n        sb.append(remainder);\n        decimal /= 10L;\n    }\n    \n   \
    \ return sb.toString();\n}\n</code>\n<|/ a tags=java,string,binary |>\n<| a |>\n\
    <code>\npublic class DecimalToBinary {", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    string binary = \"\";\n    while(decimal != 0)\n \
    \   {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    result += \"db\" + binary + \"db\";\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ answer the question. OP asked for a solution in C#, not C++.\n<|/ c |>\n<| c\
    \ |>\nI apologize for that, I was looking at the tags and thought this was a C#\
    \ question. I'll leave the answer here anyway in case it helps someone else.\n\
    <|/ c |>\n<| c |>\nNo problem. Thanks for your efforts. I appreciate it.\n<|/\
    \ c |>\n<| a |>\n<code>\npublic string DecimalToBinary(long decimal)\n{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    string binary = \"\";\n \
    \   while (decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    result += \"db\" + binary +\
    \ \"db\";\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic string DecimalToBinary(long\
    \ decimal)\n{\n    string result = \"\";\n    long remainder = decimal;\n    string\
    \ binary = \"\";\n    while (decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    result\
    \ += \"db\" + binary + \"db\";\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\npublic string DecimalToBinary(long\
    \ decimal)\n{\n    string result = \"\";\n    long remainder = decimal;\n    string\
    \ binary = \"\";\n    while (decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    result\
    \ += \"db\" + binary + \"db\";\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>", "{\n    string binary = \"\";\n    long remainder = decimal;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        binary\
    \ = char(remainder) + binary;\n        decimal = decimal / 2;\n    }\n    binary\
    \ = char('0') + binary;\n    binary = char('b') + binary;\n    return binary;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    \n\
    \    while(decimal != 0)\n    {\n        remainder = decimal%2;\n        temp\
    \ = decimal/2;\n        decimal -= temp;\n        binary += to_string(temp);\n\
    \        binary += to_string(remainder);\n    }\n    \n    return binary;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    long remainder;\n\
    \    long power;\n    string binary = \"\";\n    \n    while(decimal > 0)\n  \
    \  {\n        remainder = decimal % 2;\n        decimal /= 2;\n        power =\
    \ 1;\n        while(decimal > 0)\n        {\n            decimal /= 2;\n     \
    \       power *= 10;\n        }\n        binary = to_string(power) + binary;\n\
    \        \n        if(remainder == 1)\n        {\n            result += binary;\n\
    \        }\n    }\n    \n    if(result.length() > 0)\n    {\n        result +=\
    \ \"db\";\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. Try it with `decimal_to_binary(15L)`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it with `decimal_to_binary(15L)`.\n<|/ c |>\n<| c |>\n\
    It doesn't work for `decimal_to_binary(15L)`. Try it with `decimal_to_binary(15L)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `decimal_to_binary(15L)`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for `decimal_to_binary(15L)`. Try it with `decimal_to_binary(15L)`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string binary = \"\";\n    long remainder;\n  \
    \  \n    while ((remainder = decimal % 2L) != 0L)\n    {\n        binary = char(remainder)\
    \ + '0' + binary;\n        decimal = decimal / 2L;\n    }\n    \n    while ((remainder\
    \ = decimal % 10L) != 0L)\n    {\n        binary = char(remainder) + '0' + binary;\n\
    \        decimal = decimal / 10L;\n    }\n    \n    return binary;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26832248)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to convert decimal to binary\
    \ and I provided a solution. He also asked for help with his code so I provided\
    \ a solution. He also asked for help with his code so I provided a solution. He\
    \ also asked for help with his code so I provided a solution. He also asked for\
    \ help with his code so I provided a solution. He also asked for help with his\
    \ code so I provided a solution. He also asked for help with his code so I provided\
    \ a solution. He also asked for help with his code so I provided a solution. He\
    \ also asked for help with his code so I provided a solution. He also asked for\
    \ help with his code so I provided a solution. He also asked for help with his\
    \ code so I provided a solution. He also asked for help with his code so I provided\
    \ a solution. He also asked for help with his code so I provided a solution. He\
    \ also asked for help with his code so I provided a solution. He also asked for\
    \ help with his code so I provided a solution. He also asked for help with his\
    \ code so I provided a solution. He also asked for help with his code so I provided\
    \ a solution. He also asked for help with his code so I provided a solution. He\
    \ also asked for help with his code so I provided a solution. He also asked for\
    \ help with his code so I provided a solution. He also asked for help with his\
    \ code so ", "{\n    string binary = \"\";\n    long remainder = decimal;\n  \
    \  while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder ? \"1\" : \"0\";\n    }\n    return binary;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long power;\n    long\
    \ temp;\n    bool isNegative;\n    bool isEven;\n    bool isOdd;\n    bool isPowerOf2;\n\
    \    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n    bool\
    \ isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    bool isPowerOf10;\n\
    \    bool isPowerOf2;\n    bool isPowerOf10;\n    bool isPowerOf2;\n    ", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long power = 1;\n\
    \    long temp;\n    while(decimal != 0)\n    {\n        temp = remainder/power;\n\
    \        remainder = remainder%power;\n        power = power*10;\n        result\
    \ += to_string(temp);\n    }\n    result += \"db\";\n    result += to_string(power);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;",
  "{\n    string result = \"\";\n    long remainder = decimal;\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    result += \"db\";\n    result += \"\
    0\";\n    result += \"1\";\n    result += \"db\";\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        remainder = remainder % 2;\n        result += char(remainder);\n\
    \        remainder = remainder / 2;\n    }\n    \n    result += \"db\";\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n     \
    \   decimal /= 2;\n        result += char(remainder);\n    }\n    \n    if(decimal\
    \ > 0)\n    {\n        remainder = decimal;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,binary,decimal |>\n<| c |>\nThis code does not work for negative\
    \ numbers. For example, `decimal_to_binary(-15)` returns `\"db1111db\"` instead\
    \ of `\"db111111db\"`.\n<|/ c |>\n<| c |>\nI fixed it by adding an if statement\
    \ to check if decimal is negative.\n<|/ c |>\n<| c |>\nThis code does not work\
    \ for negative numbers. For example, `decimal_to_binary(-15)` returns `\"db1111db\"\
    ` instead of `\"db111111db\"`.\n<|/ c |>\n<| c |>\nI fixed it by adding an if\
    \ statement to check if decimal is negative.\n<|/ c |>\n<| c |>\nThis code does\
    \ not work for negative numbers. For example, `decimal_to_binary(-15)` returns\
    \ `\"db1111db\"` instead of `\"db111111db\"`.\n<|/ c |>\n<| a tags=c++,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long power = 1;\n\
    \    string binary = \"\";\n    string db = \"db\";\n    \n    while (remainder\
    \ > 0)\n    {\n        remainder = remainder % 2;\n        binary = binary + remainder;\n\
    \        power = power * 10;\n    }\n    \n    string result = db + binary;\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so\
    \ much for helping me out. I am new to programming and I really appreciate your\
    \ help. I really appreciate your time and effort.\n<|/ c |>\n<| c |>\nNo problem.\
    \ Good luck with your coding journey!\n<|/ c |>\n<| c |>\nI really appreciate\
    \ your help. I really appreciate your time and effort.\n<|/ c |>\n<| c |>\nI really\
    \ appreciate your help. I really appreciate your time and effort.\n<|/ c |>\n\
    <| c |>\nI really appreciate your help. I really appreciate your time and effort.\n\
    <|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  bool isNegative = false;\n    \n    if(decimal < 0)\n    {\n        isNegative\
    \ = true;\n        decimal = -decimal;\n    }\n    \n    remainder = decimal;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = remainder % 2;\n   \
    \     decimal /= 2;\n        \n        if(remainder == 0)\n        {\n       \
    \     result += \"1\";\n        }\n        else\n        {\n            result\
    \ += \"0\";\n        }\n    }\n    \n    if(isNegative)\n    {\n        result\
    \ = \"-\" + result;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    string binary = \"\";\n    \n  \
    \  while (remainder > 0)\n    {\n        binary = to_string(remainder);\n    \
    \    remainder = decimal % 2;\n        result += binary;\n    }\n    \n    result\
    \ += \"db\";\n    result += result;\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        binary += string(remainder,\
    \ '0');\n    }\n    \n    return binary;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    bool isNegative = decimal < 0;\n    long power = 1;\n\
    \    \n    while (decimal > 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        power = power * 2;\n        \n        if (remainder\
    \ == 1)\n        {\n            result += \"1\";\n        }\n        else\n  \
    \      {\n            result += \"0\";\n        }\n    }\n    \n    if (isNegative)\n\
    \    {\n        result = \"-\" + result;\n    }\n    \n    result += \"db\";\n\
    \    \n    while (power > 0)\n    {\n        result += \"0\";\n        power--;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        result += char(remainder);\n    }\n   \
    \ result += \"db\";\n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 10;\n        decimal /= 10;\n        result += char(remainder);\n    }\n \
    \   result += \"db\";\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long digit;\n    bool isNegative = decimal < 0;\n    bool isEven = decimal\
    \ % 2 == 0;\n    bool isOdd = !isEven;\n    bool isPositive = decimal > 0;", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        remainder = remainder % 2;\n        result += char(remainder);\n\
    \        remainder = remainder / 2;\n    }\n    \n    result += \"db\";\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    \n    while (remainder > 0)\n    {\n        remainder *= 2;\n        result\
    \ += char(remainder % 2);\n        remainder /= 2;\n    }\n    \n    result +=\
    \ \"db\";\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long temp;\n    \n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        temp = remainder;\n        \n\
    \        while(temp > 0)\n        {\n            result += binary_digits[temp];\n\
    \            temp--;\n        }\n    }\n    \n    result += \"db\";\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    string binary\
    \ = \"\";\n    string db = \"db\";\n    \n    while (remainder > 0)\n    {\n \
    \       binary = digits[remainder % 2];\n        remainder = remainder / 2;\n\
    \        result += binary;\n    }\n    \n    result += db;\n    \n    return result;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    \n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        temp\
    \ = decimal / 2;\n        decimal -= temp;\n        \n        binary += string(remainder,\
    \ 2);\n    }\n    \n    binary = binary + \"db\";\n    \n    return binary;\n}",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while (decimal !=\
    \ 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n       \
    \ binary += string(remainder, '0');\n    }\n    \n    return binary;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic String decimalToBinary(int\
    \ decimal) {\n    String binary = \"\";\n    while (decimal > 0) {\n        binary\
    \ += decimalToBinary(decimal % 2);\n        decimal /= 2;\n    }\n    return binary;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long power;\n    long\
    \ digit;\n    bool isNegative;", "{\n    string binary = \"\";\n    long remainder\
    \ = decimal;\n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder == 1 ? \"1\" : \"0\";\n  \
    \  }\n    binary = binary.substr(0, binary.length() - 2);\n    return binary;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    long remainder;\n\
    \    long counter = 0;\n    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n   \
    \     decimal /= 2;\n        \n        result += digits[remainder];\n        counter\
    \ += 1;\n    }\n    \n    result += \"db\";\n    \n    while(counter > 0)\n  \
    \  {\n        result += digits[counter % 10];\n        counter /= 10;\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate\
    \ your efforts, but I do not understand why you use strings and why you use stringstream\
    \ to convert a number to binary. Can you please explain why you use strings and\
    \ why you use stringstream to convert a number to binary?\n<|/ c |>\n<| c |>\n\
    I used strings and stringstream to convert a number to binary. Because I wanted\
    \ to use strings and stringstream to convert a number to binary. I wanted to use\
    \ strings and stringstream to convert a number to binary. I wanted to use strings\
    \ and stringstream to convert a number to binary. I wanted to use strings and\
    \ stringstream to convert a number to binary. I wanted to use strings and stringstream\
    \ to convert a number to binary. I wanted to use strings and stringstream to convert\
    \ a number to binary. I wanted to use strings and stringstream to convert a number\
    \ to binary. I wanted to use strings and stringstream to convert a number to binary.\
    \ I wanted to use strings and stringstream to convert a number to binary. I wanted\
    \ to use strings and stringstream to convert a number to binary. I wanted to use\
    \ strings and stringstream to convert a number to binary. I wanted to use strings\
    \ and stringstream to convert a number to binary. I wanted to use strings and\
    \ stringstream to convert a number to binary. I wanted to use strings and stringstream\
    \ to convert a number to binary. I wanted to use strings and stringstream to convert\
    \ a number to binary. I wanted to use strings and stringstream to convert a number\
    \ to binary. I wanted to use strings and stringstream to convert a number to binary.\
    \ I wanted to use strings and stringstream to convert a number to binary. I wanted\
    \ to use strings and stringstream to convert a number to binary. I wanted to use\
    \ strings and stringstream to convert a number to binary. I wanted to use strings\
    \ and stringstream to convert a number to binary. I wanted to use strings and\
    \ stringstream to convert a number to binary. I wanted to use strings and stringstream\
    \ to convert a number to binary. I wanted to use strings and stringstream to convert\
    \ a number to binary. I wanted to use strings and stringstream to convert a number\
    \ to binary. I wanted to use strings and stringstream to convert a ", "{\n   \
    \ string result = \"\";\n    long remainder = decimal;\n    string binary = \"\
    \";\n    \n    while (remainder > 0)\n    {\n        remainder = remainder % 2;\n\
    \        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    \n    result += \"db\" + binary + \"db\";\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    string binary = \"\";\n    string db = \"\";\n    \n    while (remainder\
    \ > 0)\n    {\n        remainder = remainder % 2;\n        binary = binary + remainder;\n\
    \        remainder = remainder / 2;\n    }\n    \n    if (binary.length() > 0)\n\
    \    {\n        db = db + \"1\";\n    }\n    \n    for(int i = 0; i < binary.length();\
    \ i++)\n    {\n        result = result + binary[i];\n    }\n    \n    if (binary.length()\
    \ > 0)\n    {\n        result = result + db;\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| c |>\nThis does not answer the\
    \ question. OP wants to convert a decimal number to a binary number in C++.\n\
    <|/ c |>\n<| c |>\nThe question was how to convert a decimal number to a binary\
    \ number in C++. He already had the code to convert a decimal number to a binary\
    \ number in C. He just needed to translate it to C++.\n<|/ c |>\n<| c |>\nThe\
    \ question was how to convert a decimal number to a binary number in C++. He already\
    \ had the code to convert a decimal number to a binary number in C. He just needed\
    \ to translate it to C++.\n<|/ c |>\n<| c |>\nThe question was how to convert\
    \ a decimal number to a binary number in C++. He already had the code to convert\
    \ a decimal number to a binary number in C. He just needed to translate it to\
    \ C++.\n<|/ c |>\n<| c |>\nThe question was how to convert a decimal number to\
    \ a binary number in C++. He already had the code to convert a decimal number\
    \ to a binary number in C. He just needed to translate it to C++.\n<|/ c |>\n\
    <| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    long power = 1;\n    string binary = \"\";\n    while(decimal != 0)\n   \
    \ {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary =\
    \ to_string(power) + binary;\n        power *= 2;\n    }\n    string db = \"db\"\
    ;\n    string front = db + binary;\n    string back = front.substr(0, front.length()\
    \ - 2);\n    result += front;\n    result += back;\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        remainder = remainder % 2;\n        result = char(remainder)\
    \ + result;\n        remainder = remainder / 2;\n    }\n    \n    return result\
    \ + \"db\";\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    \n    while (remainder > 0)\n    {\n        remainder = remainder % 2;\n\
    \        result = char(remainder) + result;\n        remainder = remainder / 2;\n\
    \    }\n    \n    if (result.length() > 0)\n    {\n        result = \"db\" + result;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    \n    while (remainder\
    \ > 0)\n    {\n        int digit = remainder % 2;\n        remainder = remainder\
    \ / 2;\n        \n        if (digit == 0)\n        {\n            result += \"\
    0\";\n        }\n        else\n        {\n            result += \"1\";\n     \
    \   }\n    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n\
    \        decimal -= temp;\n        result += char(remainder);\n    }\n    \n \
    \   result += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long remainder;\n    \n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        result += char(remainder);\n    }\n    \n    result += \"db\"\
    ;\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder\
    \ = decimal;\n    string remainderAsString = to_string(remainder);\n    string\
    \ remainderAsStringWithoutDb = remainderAsString.substr(2);\n    string remainderAsStringWithoutDb\
    \ = remainderAsStringWithoutDb.substr(0, remainderAsStringWithoutDb.length()-2);\n\
    \    string remainderAsStringWithoutDb = remainderAsStringWithoutDb.substr(0,\
    \ remainderAsStringWithoutDb.length()-1);\n    \n    for(int i = 0; i < remainderAsStringWithoutDb.length();\
    \ i++)\n    {\n        result += remainderAsStringWithoutDb[i];\n    }\n    \n\
    \    for(int i = 0; i < remainderAsStringWithoutDb.length(); i++)\n    {\n   \
    \     result += remainderAsStringWithoutDb[i];\n    }\n    \n    result += \"\
    db\";\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `decimal_to_binary(15L)`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the output I got from your example to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the output I got from your\
    \ example to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the output I got from your example to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the output I got from your example to the answer.\n\
    <|/ c |>\n<| a |>\n<code>\nstring decimal_to_binary(long decimal)\n{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    string remainderAsString\
    \ = to_string(remainder);\n    string remainderAsStringWithoutDb = remainderAsString.substr(2);\n\
    \    string remainderAsStringWithoutDb = remainderAsStringWithoutDb.substr(0,\
    \ remainderAsStringWithoutDb.length()-2);\n    string remainderAsStringWithoutDb\
    \ = remainderAsStringWithoutDb.substr(0, remainderAsStringWithoutDb.length()-1);\n\
    \    \n    for(int i = 0; i < remainderAsStringWithoutDb.length(); i++)\n    {\n\
    \        result += remainderAsStringWithoutDb[i];\n    }\n    \n    for(int i\
    \ = 0; i < remainderAsStringWithoutDb.length(); i++)\n    {\n        result +=\
    \ remainderAsStringWithoutDb[i];\n    }\n    \n    result += \"db\";\n    \n \
    \   return result;\n}\n</code>\n", "{\n    string result = \"\";\n    long remainder\
    \ = decimal;\n    \n    while (remainder > 0)\n    {\n        remainder = remainder\
    \ % 2;\n        result += char(remainder);\n        remainder = remainder / 2;\n\
    \    }\n    \n    if (decimal < 0)\n    {\n        result += \"1\";\n    }\n \
    \   \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a |>\n\
    <| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    string binary = \"\";\n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        binary = remainder +\
    \ binary;\n    }\n    string db = \"db\";\n    string extra = \"\";\n    if(binary.length()\
    \ > 1)\n    {\n        extra = binary.substr(0, binary.length() - 1);\n    }\n\
    \    if(binary.length() == 1)\n    {\n        extra = binary;\n    }\n    result\
    \ += db + extra;\n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `decimal_to_binary(-32L)`\
    \ returns `\"db1111db\"` instead of `\"db111111db\"`.\n<|/ c |>\n<| c |>\nI added\
    \ a check for negative numbers, it now returns `\"db111111db\"`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for negative numbers. `decimal_to_binary(-32L)` returns\
    \ `\"db111111db\"` instead of `\"db111111db\"`.\n<|/ c |>\n<| c |>\nI added a\
    \ check for negative numbers, it now returns `\"db111111db\"`.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `decimal_to_binary(-32L)` returns\
    \ `\"db111111db\"` instead of `\"db111111db\"`.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string result = \"\";\n    long remainder;\n    long power;\n    long digit;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n     \
    \   power = decimal / 2;\n        digit = power * 2;\n        \n        if(digit\
    \ > 9)\n        {\n            result += to_string(digit);\n        }\n      \
    \  else\n        {\n            result += to_string(digit);\n        }\n     \
    \   \n        decimal = remainder;\n    }\n    \n    result += \"db\";\n    \n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while(counter\
    \ <= remainder)\n    {\n        remainder = remainder % 2;\n        binary = char(remainder)\
    \ + binary;\n        counter++;\n    }\n    return binary;\n}", "{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    \n    while (remainder >\
    \ 0)\n    {\n        remainder = remainder % 2;\n        result += char(remainder);\n\
    \        remainder = remainder / 2;\n    }\n    \n    result += \"db\";\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n     \
    \   decimal /= 2;\n        result += char(remainder);\n    }\n    \n    if(decimal\
    \ > 0)\n    {\n        remainder = decimal % 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder = decimal;\n    string remainderAsString\
    \ = to_string(remainder);\n    string decimalAsString = to_string(decimal);\n\
    \    \n    for(int i = 0; i < remainderAsString.length(); i++)\n    {\n      \
    \  if(remainder == 0)\n        {\n            binary = \"0\" + binary;\n     \
    \       remainder = 0;\n        }\n        else\n        {\n            binary\
    \ = \"1\" + binary;\n            remainder--;\n        }\n    }\n    \n    binary\
    \ = binary + decimalAsString;\n    \n    return binary;\n}", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n  \
    \  {\n        remainder *= 2;\n        result += char(remainder % 2);\n      \
    \  remainder /= 2;\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    binary += string(remainder, '0');\n    }\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += \"0\" + remainder;\n    }\n    \n    result += \"db\";\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    long power;\n\
    \    long digit;\n    bool isNegative;\n    bool isEven;\n    bool isOdd;\n  \
    \  bool isPositive;\n    bool isZero;\n    bool isOne;\n    bool isTwo;\n    bool\
    \ isThree;\n    bool isFour;\n    bool isFive;\n    bool isSix;\n    bool isSeven;\n\
    \    bool isEight;\n    bool isNine;\n    bool isTen;\n    bool isEleven;\n  \
    \  bool isTwelve;\n    bool isThirteen;\n    bool isFourteen;\n    bool isFifteen;\n\
    \    bool isSixteen;\n    bool isSeventeen;\n    bool isEighteen;\n    bool isNineteen;\n\
    \    bool isTwenty;\n    bool isTwentyOne;\n    bool isTwentyTwo;\n    bool isTwentyThree;\n\
    \    bool isTwentyFour;\n    bool isTwentyFive;\n    bool isTwentySix;\n    bool\
    \ isTwentySeven;\n    bool isTwentyEight;\n    bool isTwentyNine;\n    bool isThirty;\n\
    \    bool isThirtyOne;\n    bool isThirtyTwo;\n    bool isThirtyThree;\n    bool\
    \ isThirtyFour;\n    bool isThirtyFive;\n    bool isThirtySix;\n    bool isThirtySeven;\n\
    \    bool isThirtyEight;\n    bool isThirtyNine;\n    bool isForty;\n    bool\
    \ isFortyOne;\n    bool isFortyTwo;\n    bool isFortyThree;\n    bool isFortyFour;\n\
    \    bool isFortyFive;\n    bool isFortySix;\n    bool isFortySeven;\n    bool\
    \ isFortyEight;\n    bool isFortyNine;\n    bool isFifty;\n    bool isFiftyOne;\n\
    \    bool isFiftyTwo;\n    bool isFiftyThree;\n    bool isFiftyFour;\n    bool\
    \ isFiftyFive;\n    bool isFiftySix;", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    \n    while(remainder > 0)\n    {\n        remainder\
    \ = remainder % 2;\n        result += char(remainder);\n        remainder = remainder\
    \ / 2;\n    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    long power = 1;\n    long\
    \ digit;\n    long power2;\n    long i;\n    \n    while(decimal > 0)\n    {\n\
    \        remainder = decimal % 2;\n        digit = decimal / 2;\n        power2\
    \ = power * 2;\n        \n        for(i = 0; i < power2; i++)\n        {\n   \
    \         result += (remainder % 2 == 0) ? \"0\" : \"1\";\n            remainder\
    \ = (remainder / 2);\n        }\n        \n        power = power2;\n        decimal\
    \ = digit;\n    }\n    \n    result += \"db\";\n    \n    return result;\n}",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += string(remainder, '0');\n    }\n    \n    return binary + \"db\";\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while ((remainder\
    \ = decimal % 2L) != 0L)\n    {\n        result += char('0' + remainder);\n  \
    \      decimal /= 2L;\n    }\n    \n    while ((remainder = decimal % 10L) !=\
    \ 0L)\n    {\n        result += char('0' + remainder);\n        decimal /= 10L;\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n    {\n \
    \       remainder = decimal % 2;\n        decimal /= 2;\n        result += string(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long temp;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        temp = remainder;\n        \n\
    \        if(temp == 1)\n        {\n            result += \"1\";\n        }\n \
    \       else\n        {\n            result += \"0\";\n        }\n    }\n    \n\
    \    result += \"db\";\n    \n    return result;\n}", "{\n    string binary =\
    \ \"\";\n    long remainder = decimal;\n    while(decimal > 0)\n    {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder\
    \ ? \"1\" : \"0\";\n    }\n    return binary + \"db\" + binary + \"db\";\n}",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += string(remainder, '0');\n    }\n    \n    return binary;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring decimal_to_binary(long decimal)\n\
    {\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal !=\
    \ 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n       \
    \ binary += string(remainder, '0');\n    }\n    \n    return binary;\n}\n</code>\n\
    <|/ a tags=c++ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long power;\n    long digit;\n    \n    while(decimal != 0)\n    {\n      \
    \  remainder = decimal % 2;\n        digit = decimal / 2;\n        power = 1;\n\
    \        \n        while(digit != 0)\n        {\n            power *= 10;\n  \
    \          digit /= 2;\n        }\n        \n        result += char(remainder);\n\
    \        result += char((power % 10) + '0');\n        \n        decimal /= 2;\n\
    \    }\n    \n    result += 'db';\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n\
    \        decimal -= temp;\n        result += char(remainder);\n    }\n    \n \
    \   result += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| c |>\nI believe this answer should be accepted as the correct one as\
    \ it is the most efficient and simplest to understand.\n<|/ c |>\n<| a tags=c++,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += string(remainder, '0');\n    }\n    \n    result += \"db\";\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    string binary = \"\";\n    string db = \"db\";\n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n   \
    \     binary = binary + remainder;\n    }\n    for(int i = 0; i < binary.length();\
    \ i++)\n    {\n        if(binary[i] == '1')\n        {\n            result +=\
    \ db;\n        }\n        else\n        {\n            result += \"0\";\n    \
    \    }\n    }\n    result += db;\n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. For example, `decimal_to_binary(-15)`\
    \ returns `\"db1111db\"` instead of `\"db111111db\"`.\n<|/ c |>\n<| c |>\nYes,\
    \ I forgot to mention that this only works for positive numbers. I edited my answer\
    \ to include a solution for negative numbers.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a solution for negative numbers as well.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. For example, `decimal_to_binary(-15)`\
    \ returns `\"db1111db\"` instead of `\"db111111db\"`.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution for negative numbers as well.\n<|/ c |>\n<|\
    \ a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    \n    return binary;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `decimal_to_binary(-32L)`.\n<|/ c\
    \ |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ the code accordingly.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n      \
    \  decimal -= temp;\n        result += char(remainder);\n    }\n    \n    result\
    \ += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>", "{\n    string result =\
    \ \"\";\n    long remainder;\n    long power;\n    long digit;\n    long i;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n     \
    \   power = decimal / 2;\n        digit = remainder;\n        \n        for(i\
    \ = 0; i < power; i++)\n        {\n            result += digit;\n        }\n \
    \       \n        decimal /= 2;\n    }\n    \n    result += \"db\";\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    \n    while (remainder > 0)\n    {\n        remainder = remainder % 2;\n\
    \        result += digits[remainder];\n        counter++;\n    }\n    \n    if\
    \ (counter > 1)\n    {\n        result += \"db\" + counter;\n    }\n    \n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long remainder;\n   \
    \ long power = 1;\n    long temp;\n    long i;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n      \
    \  decimal -= temp;\n        \n        for(i = 0; i < remainder; i++)\n      \
    \  {\n            result += to_string(power);\n            power *= 2;\n     \
    \   }\n        \n        result += to_string(power);\n        power *= 2;\n  \
    \  }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm,binary,decimal |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `decimal_to_binary(-32L)` returns `\"db111111db\"`.\n<|/ c |>\n<| c\
    \ |>\nYes, I forgot about negative numbers. I fixed the code by adding an if statement\
    \ that checks if the number is negative.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `decimal_to_binary(-32L)` returns `\"db111111db\"`.\n\
    <|/ c |>\n<| a tags=c++,algorithm,binary,decimal |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <sstream>\n#include <vector>", "{\n    string result\
    \ = \"\";\n    long remainder;\n    bool isNegative = false;\n    bool isEven\
    \ = false;\n    bool isOdd = false;\n    \n    if (decimal < 0)\n    {\n     \
    \   isNegative = true;\n        decimal = -decimal;\n    }\n    \n    remainder\
    \ = decimal;\n    \n    while (decimal > 0)\n    {\n        isEven = (remainder\
    \ % 2L == 0L);\n        isOdd = !isEven;\n        \n        if (isEven)\n    \
    \    {\n            result += \"0\";\n        }\n        else if (isOdd)\n   \
    \     {\n            result += \"1\";\n        }\n        \n        remainder\
    \ = remainder / 2L;\n    }\n    \n    if (isNegative)\n    {\n        result =\
    \ \"-\" + result;\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| c |>\nI see that you are using recursion. Can you explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| c |>\n\
    I see that you are using recursion. Can you explain how this works?\n<|/ c |>\n\
    <| c |>\nI added some explanation to the answer.\n<|/ c |>\n<| c |>\nI see that\
    \ you are using recursion. Can you explain how this works?\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\n#include <iostream>\n#include <string>", "{\n    string binary =\
    \ \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n    {\n\
    \        string temp = remainder % 2 == 0 ? \"1\" : \"0\";\n        binary = temp\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    \n    binary = binary\
    \ + \"db\";\n    \n    return binary;\n}", "{\n    string result = \"\";\n   \
    \ long remainder;\n    long temp;\n    \n    while(decimal > 0)\n    {\n     \
    \   remainder = decimal % 2;\n        temp = decimal / 2;\n        decimal -=\
    \ temp;\n        result += string(remainder, 2);\n    }\n    \n    result += \"\
    db\";\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while ((remainder = decimal % 2L) != 0L) {\n        result += char(remainder);\n\
    \        decimal /= 2L;\n    }\n    \n    while ((remainder = decimal % 10L) !=\
    \ 0L) {\n        result += char(remainder);\n        decimal /= 10L;\n    }\n\
    \    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        result += string(remainder, '0');\n\
    \    }\n    \n    if(decimal != 0)\n    {\n        remainder = decimal % 2;\n\
    \        result += string(remainder, '1');\n    }\n    \n    result += 'db';\n\
    \    result += '0';\n    result += '0';\n    \n    return result;\n}", "{\n  \
    \  string result = \"\";\n    long remainder = decimal;\n    string binary = \"\
    \";\n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n      \
    \  decimal /= 2;\n        binary += remainder;\n    }\n    string db = \"db\"\
    ;\n    result += db + binary;\n    result += db;\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for negative numbers. `decimal_to_binary(-15)`\
    \ returns `\"db1111db\"` instead of `\"db111111db\"`.\n<|/ c |>\n<| c |>\nI didn't\
    \ realize that OP wanted negative numbers. I edited my answer to include a solution\
    \ for negative numbers.\n<|/ c |>\n<| c |>\nI added a solution for negative numbers\
    \ as well.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\nstring decimal_to_binary(long\
    \ decimal)\n{\n    string result = \"\";\n    long remainder = decimal;\n    string\
    \ binary = \"\";\n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    string\
    \ db = \"db\";\n    result += db + binary;\n    result += db;\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring decimal_to_binary(long\
    \ decimal)\n{\n    string result = \"\";\n    long remainder = decimal;\n    string\
    \ binary = \"\";\n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    string\
    \ db = \"db\";\n    result += db + binary;\n    result += db;\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `decimal_to_binary(-15)` returns `\"db1111db\"` instead of `\"db111111db\"\
    `.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring decimal_to_binary(long decimal)\n\
    {\n    string result = \"\";\n    long remainder = decimal;\n    string binary\
    \ = \"\";\n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n\
    \        decimal /= 2;\n        binary += remainder;\n    }\n    string db = \"\
    db\";\n    result += db + binary;\n    result += db;\n    return result;\n}\n\
    </code>\n<|/", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    long power = 0;\n    bool isNegative = false;\n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        power++;\n\
    \    }\n    while(power > 0)\n    {\n        if(power % 2 == 0)\n        {\n \
    \           result += \"1\";\n        }\n        else\n        {\n           \
    \ result += \"0\";\n        }\n        power--;\n    }\n    if(isNegative)\n \
    \   {\n        result = \"-\" + result;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I appreciate it! I understand\
    \ your code, but I still don't understand why my code doesn't work. Could you\
    \ please explain to me why my code doesn't work? Thanks!\n<|/ c |>\n<| c |>\n\
    I added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I appreciate it! I understand your code, but I still don't\
    \ understand why my code doesn't work. Could you please explain to me why my code\
    \ doesn't work? Thanks!\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I appreciate it!\
    \ I understand your code, but I still don't understand why my code doesn't work.\
    \ Could you please explain to me why my code doesn't work? Thanks!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
