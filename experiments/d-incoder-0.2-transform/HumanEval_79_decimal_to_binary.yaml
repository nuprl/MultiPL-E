name: HumanEval_79_decimal_to_binary
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou will be given a number in\
  \ decimal form and your task is to convert it to\n    binary format. The function\
  \ should return a string, with each character representing a binary\n    number.\
  \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
  \ couple of characters 'db' at the beginning and at the end of the string.\n   \
  \ The extra characters are there to help with the format.\n\n    Examples:\n   \
  \ >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
  \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n"
tests: "unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
  \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
  \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
completions: ["{\n    string binary = \"\";\n    long remainder;\n    long power =\
    \ 1;\n    long counter = 0;\n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        counter += 1;\n        binary\
    \ += to_string(power);\n        binary += to_string(remainder);\n        power\
    \ = power * 2;\n    }\n    binary += to_string(power);\n    binary += to_string(counter);\n\
    \    return binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    long power = 1;\n    \n \
    \   while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        power = power * 10;\n        result += char(remainder);\n   \
    \ }\n    \n    while(power > 0)\n    {\n        result += char(power % 2);\n \
    \       power /= 2;\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder = decimal;\n    string binary\
    \ = \"\";\n    \n    while(decimal > 0)\n    {\n        remainder = decimal %\
    \ 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n    result\
    \ += binary;\n    \n    if(decimal > 0)\n    {\n        result += \"db\";\n  \
    \  }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries other than\
    \ std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries\
    \ other than std.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use\
    \ any libraries other than std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n  \
    \  {\n        remainder = remainder % 2;\n        result = char(remainder) + result;\n\
    \        remainder = remainder / 2;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c++,algorithm,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    string binary = \"\";\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    binary = to_string(remainder) + binary;\n    }\n    string db = \"db\";\n\
    \    string result = db + binary + db;\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,string |>\n<| c |>\nThis doesn't work. `to_string` returns a `string`\
    \ not a `char`.\n<|/ c |>\n<| c |>\nI fixed the code above. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\n`to_string` returns a `string` not a `char`.\n\
    <|/ c |>\n<| c |>\nI fixed the code above. Thanks for pointing that out.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    long remainder;\n    \n\
    \    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        result += char(remainder);\n    }\n    \n    result += \"db\"\
    ;\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 0;\n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        counter++;\n        if(counter\
    \ % 2 == 0)\n        {\n            result += remainder;\n        }\n    }\n \
    \   result += \"db\";\n    while(counter > 0)\n    {\n        result += remainder;\n\
    \        counter -= 2;\n        remainder = remainder % 2;\n    }\n    result\
    \ += \"db\";\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    \n    while (remainder > 0)\n    {\n        remainder\
    \ = remainder % 2;\n        result = char(remainder) + result;\n        remainder\
    \ = remainder / 2;\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    long\
    \ power;\n    long digit;\n    long i;\n    \n    temp = decimal;\n    \n    while(temp\
    \ > 0)\n    {\n        remainder = temp % 2;\n        temp = temp / 2;\n     \
    \   power = 1;\n        \n        while(temp > 0)\n        {\n            digit\
    \ = temp % 10;\n            temp /= 10;\n            power *= 10;\n          \
    \  \n            if((digit == remainder) && (power > 0))\n            {\n    \
    \            binary += \"1\";\n                power -= 1;\n            }\n  \
    \          else\n            {\n                binary += \"0\";\n           \
    \ }\n        }\n    }\n    \n    binary = binary + \"db\";\n    \n    for(i =\
    \ 0; i < binary.length(); i++)\n    {\n        if(binary[i] == '0')\n        {\n\
    \            binary[i] = '1';\n        }\n        else\n        {\n          \
    \  binary[i] = '0';\n        }\n    }\n    \n    return binary;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal > 0)\n    {\n \
    \       remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring decimal_to_binary(long decimal)\n\
    {\n    string result = \"\";\n    long remainder;", "{\n    string result = \"\
    \";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while ((remainder = decimal %\
    \ 2L) != 0L)\n    {\n        result += char(remainder + '0');\n        decimal\
    \ /= 2L;\n    }\n    \n    while ((remainder = decimal % 10L) != 0L)\n    {\n\
    \        result += char(remainder + '0');\n        decimal /= 10L;\n    }\n  \
    \  \n    result += 'db';\n    \n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    string remainderAsString = to_string(remainder);\n    for(int i = 0; i <\
    \ remainderAsString.length(); i++)\n    {\n        if(remainder % 2 == 0)\n  \
    \      {\n            result += \"0\";\n        }\n        else\n        {\n \
    \           result += \"1\";\n        }\n        remainder = remainder / 2;\n\
    \    }\n    result += \"db\";\n    result += remainderAsString;\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    long power = 1;\n    string binary = \"\";\n    \n\
    \    while (remainder > 0)\n    {\n        remainder = remainder % 2;\n      \
    \  binary = to_string(power) + binary;\n        power = power * 10;\n    }\n \
    \   \n    string db = \"db\";\n    string extra = db + binary;\n    \n    if (decimal\
    \ < 0)\n    {\n        extra = extra + db + \"1\";\n    }\n    \n    result =\
    \ extra;\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for `decimal_to_binary(-15)`. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `decimal_to_binary(-15)`.\n<|/ c |>\n<| c |>\n\
    It doesn't work for `decimal_to_binary(-15)`. Try it with `decimal_to_binary(-15)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring decimal_to_binary(long decimal)\n{\n\
    \    string result = \"\";\n    long remainder = decimal;\n    long power = 1;\n\
    \    string binary = \"\";\n    \n    while (remainder > 0)\n    {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(power) + binary;\n        power\
    \ = power * 10;\n    }\n    \n    string db = \"db\";\n    string extra = db +\
    \ binary;\n    \n    if (decimal < 0)\n    {\n        extra = extra + db + \"\
    1\";\n    }\n    \n    result = extra;\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string,binary |>\n<| c |>\nThis doesn't work. Try it with `decimal_to_binary(-15)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `decimal_to_binary(-15)`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for `decimal_to_binary(-15)`. Try it with `decimal_to_binary(-15)`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `decimal_to_binary(-15)`.", "{\n\
    \    string result = \"\";\n    long remainder;\n    long power;\n    long digit;\n\
    \    bool isNegative;\n    bool isZero;\n    bool isOne;\n    bool isTwo;\n  \
    \  bool isThree;\n    bool isFour;\n    bool isFive;\n    bool isSix;\n    bool\
    \ isSeven;\n    bool isEight;\n    bool isNine;\n    bool isTen;\n    bool isEleven;\n\
    \    bool isTwelve;\n    bool isThirteen;\n    bool isFourteen;\n    bool isFifteen;\n\
    \    bool isSixteen;\n    bool isSeventeen;\n    bool isEighteen;\n    bool isNineteen;\n\
    \    bool isTwenty;\n    bool isTwentyOne;\n    bool isTwentyTwo;\n    bool isTwentyThree;\n\
    \    bool isTwentyFour;\n    bool isTwentyFive;\n    bool isTwentySix;\n    bool\
    \ isTwentySeven;\n    bool isTwentyEight;\n    bool isTwentyNine;\n    bool isThirty;\n\
    \    bool isThirtyOne;\n    bool isThirtyTwo;\n    bool isThirtyThree;\n    bool\
    \ isThirtyFour;\n    bool isThirtyFive;\n    bool isThirtySix;\n    bool isThirtySeven;\n\
    \    bool isThirtyEight;\n    bool isThirtyNine;\n    bool isForty;\n    bool\
    \ isFortyOne;\n    bool isFortyTwo;\n    bool isFortyThree;\n    bool isFortyFour;\n\
    \    bool isFortyFive;\n    bool isFortySix;\n    bool isFortySeven;\n    bool\
    \ isFortyEight;\n    bool isFortyNine;\n    bool isFifty;\n    bool isFiftyOne;\n\
    \    bool isFiftyTwo;\n    bool isFiftyThree;\n    bool isFiftyFour;\n    bool\
    \ isFiftyFive;\n    bool isFiftySix;\n    bool isFiftySeven;\n    bool isFiftyEight",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    \n    return binary;\n}", "{\n    string binary =\
    \ \"\";\n    long remainder;\n    long counter = 1;\n    \n    while(decimal !=\
    \ 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n       \
    \ binary += to_string(counter);\n        binary += to_string(remainder);\n   \
    \     counter += 1;\n    }\n    \n    return binary;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>",
  "{\n    string binary = \"\";\n    long remainder;\n    \n    while ((remainder\
    \ = decimal % 2L) != 0L) \n    {\n        binary = char(remainder) + '0' + binary;\n\
    \        decimal = decimal / 2L;\n    }\n    \n    while ((remainder = decimal\
    \ % 10L) != 0L) \n    {\n        binary = char(remainder) + '0' + binary;\n  \
    \      decimal = decimal / 10L;\n    }\n    \n    return binary;\n}", "{\n   \
    \ string binary = \"\";\n    long remainder;\n    \n    while ((remainder = decimal\
    \ % 2) == 0)\n    {\n        binary = binary + \"0\";\n        decimal = decimal\
    \ / 2;\n    }\n    \n    while ((remainder = decimal % 10) == 0)\n    {\n    \
    \    binary = binary + \"1\";\n        decimal = decimal / 10;\n    }\n    \n\
    \    return binary;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
