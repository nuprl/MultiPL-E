name: HumanEval_56_correct_bracketing
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"<\"\
  \ and \">\".\n    return True if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
  <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
  ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n"
tests: "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
  <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
  <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\")\
  \ == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
  ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
  <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
  <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"\
  <><><<><>><>>><>\") == false);\n}\nvoid main(){}"
completions: ["{\n    size_t len = brackets.length();\n    size_t i;\n    bool result\
    \ = true;\n    for(i = 0; i < len; ++i)\n    {\n        if(!brackets.at(i).isdigit())\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n \
    \   size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    bool result = true;\n    \n    for (size_t i = 0; i < brackets_size; ++i)\n\
    \    {\n        if (brackets[i] == '<')\n        {\n            if (opening_brackets_index\
    \ != closing_brackets_index)\n            {\n                result = false;\n\
    \                break;\n            }\n            opening_brackets_size++;\n\
    \            opening_brackets_index++;\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            if (opening_brackets_index != closing_brackets_index)\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n            closing_brackets_size++;\n            closing_brackets_index++;\n\
    \        }\n    }\n    \n    if (opening_brackets_size != closing_brackets_size)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}", "{\n\tauto\
    \ bracket = brackets.front();\n\tauto brackets = brackets.substr(1);\n\tauto opening_brackets\
    \ = brackets.split('<');\n\tauto closing_brackets = brackets.split('>');\n\t\n\
    \tfor (auto opening_bracket : opening_brackets)\n\t{\n\t\tauto closing_bracket\
    \ = closing_brackets.front();\n\t\tauto closing_brackets = closing_brackets.substr(1);\n\
    \t\t\n\t\tif (opening_bracket != closing_bracket)\n\t\t\treturn false;\n\t\t\n\
    \t\tclosing_brackets = closing_brackets.split('<');\n\t\tclosing_brackets = closing_brackets.split('>');\n\
    \t\t\n\t\tfor (auto closing_bracket : closing_brackets)\n\t\t{\n\t\t\tif (opening_bracket\
    \ != closing_bracket)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(brackets[i] == '<')\n        {\n  \
    \          if(brackets[i+1] != '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index2\
    \ = 0;\n    size_t closing_brackets_index2 = 0;\n    size_t opening_brackets_index3\
    \ = 0;\n    size_t closing_brackets_index3 = 0;\n    size_t opening_brackets_index4\
    \ = 0;\n    size_t closing_brackets_index4 = 0;\n    size_t opening_brackets_index5\
    \ = 0;\n    size_t closing_brackets_index5 = 0;\n    size_t opening_brackets_index6\
    \ = 0;\n    size_t closing_brackets_index6 = 0;\n    size_t opening_brackets_index7\
    \ = 0;\n    size_t closing_brackets_index7 = 0;\n    size_t opening_brackets_index8\
    \ = 0;\n    size_t closing_brackets_index8 = 0;\n    size_t opening_brackets_index9\
    \ = 0;\n    size_t closing_brackets_index9 = 0;\n    size_t opening_brackets_index10\
    \ = 0;\n    size_t closing_brackets_index10 = 0;\n    size_t opening_brackets_index11\
    \ = 0;\n    size_t closing_brackets_index11 = 0;\n    size_t opening_brackets_index12\
    \ = 0;\n    size_t closing_brackets_index12 = 0;\n    size_t opening_brackets_index13\
    \ = 0;\n    size_t closing_brackets_index13 = 0;\n    size_t opening_brackets_index14\
    \ = 0;\n    size_t closing_brackets_index14 = 0;\n    size_t opening_brackets_index15\
    \ = 0;\n    size_t closing_brackets_index15 = 0;\n    size_t opening_brackets_index16\
    \ = 0;\n    size_t closing_brackets_index16 = 0;\n    size_t opening_brackets_index17\
    \ = 0;\n    size_t closing_brackets_index17 = 0;\n    size_t opening_brackets_index18\
    \ = 0;\n    size_t closing_brackets_index18 = 0;\n    size_t opening_brackets_index19\
    \ = 0;\n    size_t closing_brackets_index19 = 0;\n    size_t opening_brackets_index20\
    \ = 0;\n    size_t closing_brackets_index20 = 0;\n    size_t opening_brackets_index21\
    \ = 0;\n    size_t closing_brackets_index21 = 0;\n    size_t opening_bracket",
  "{\n    size_t brackets_size = brackets.length();\n    size_t open_brackets_size\
    \ = 0;\n    size_t close_brackets_size = 0;\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    \n    while (i<brackets_size) {\n        char\
    \ c = brackets[i];\n        \n        if (c != '>') {\n            i++;\n    \
    \        continue;\n        }\n        \n        open_brackets_size++;\n     \
    \   \n        while (j<brackets_size && brackets[j]==c) j++;\n        \n     \
    \   if (j==brackets_size) {\n            result = false;\n            break;\n\
    \        }\n        \n        close_brackets_size++;\n        \n        while\
    \ (j<brackets_size && brackets[j]!='<') j++;\n        \n        if (j==brackets_size)\
    \ {\n            result = false;\n            break;\n        }\n        \n  \
    \      i++;\n    }\n    \n    if (close_brackets_size != open_brackets_size) {\n\
    \        result = false;\n    }\n    \n    return result;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,string |>\n<| c |>\nThis fails for `<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n\
    \    {\n        char c = brackets[i];\n        if(c == '>')\n        {\n     \
    \       if(brackets[i+1] == '>')\n                return false;\n            else\n\
    \                ++i;\n        }\n        else if(c == '<')\n        {\n     \
    \       if(brackets[i+1] == '<')\n                return false;\n            else\n\
    \                ++i;\n        }\n    }\n    return true;\n}", "{\n    size_t\
    \ len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i+1] != '>')\n\
    \                return false;\n            i += 2;\n        }\n    }\n    return\
    \ true;\n}", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        char c = brackets[i];\n        if(c == '>')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                result =\
    \ false;\n            }\n        }\n        else if(c == '<')\n        {\n   \
    \         if(brackets[i+1] == '<')\n            {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI believe this fails for `<<><>>` where it returns true.\n<|/ c\
    \ |>\n<| c |>\nYes, it fails for `<<><>>` because `<<><>>` has two `<` characters\
    \ and two `>` characters. But I believe that `<<><>>` should return false because\
    \ `<<><>>` has two `<` characters and one `>` character.\n<|/ c |>\n<| c |>\n\
    Yes, I agree. I was just pointing out that your solution doesn't work for `<<><>>`\
    \ but your comment does. I guess I should delete my comment.\n<|/ c |>\n<| c |>\n\
    I deleted my comment because I realized that my solution was wrong and I fixed\
    \ it.\n<|/ c |>\n<| c |>\nI deleted my comment because I realized that my solution\
    \ was wrong and I fixed it.\n<|/ c |>\n<| a tags=c++,algorithm |>\nI believe that\
    \ you can solve this problem by using a stack. \nThe idea is to push all opening\
    \ brackets onto the stack and pop them off as you encounter closing brackets.\
    \ \n<code>", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] != '<')\n            return false;\n    }\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != '>')\n\
    \            return false;\n    }\n    return true;\n}", "{\n    bool result =\
    \ true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              result = false;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n\tauto bracket = brackets.front();\n\tauto brackets = brackets.back();\n\
    \tauto opening_brackets = brackets.find_first_of(bracket);\n\tauto closing_brackets\
    \ = brackets.find_last_of(bracket);\n\t\n\tif (opening_brackets == string::npos)\
    \ return false;\n\tif (closing_brackets == string::npos) return false;\n\t\n\t\
    auto opening_bracket = brackets[opening_brackets];\n\tauto closing_bracket = brackets[closing_brackets];\n\
    \t\n\tif (opening_bracket != closing_bracket) return false;\n\t\n\tauto opening_brackets_end\
    \ = brackets.find_first_of(bracket, opening_brackets);\n\tauto closing_brackets_end\
    \ = brackets.find_last_of(bracket, closing_brackets);\n\t\n\tif (opening_brackets_end\
    \ == string::npos) return false;\n\tif (closing_brackets_end == string::npos)\
    \ return false;\n\t\n\tauto opening_brackets_end_index = brackets.find_first_of(bracket,\
    \ opening_brackets_end);\n\tauto closing_brackets_end_index = brackets.find_last_of(bracket,\
    \ closing_brackets_end);\n\t\n\tif (opening_brackets_end_index == string::npos)\
    \ return false;\n\tif (closing_brackets_end_index == string::npos) return false;\n\
    \t\n\tauto opening_brackets_end_index_plus_one = opening_brackets_end_index +\
    \ 1;\n\tauto closing_brackets_end_index_plus_one = closing_brackets_end_index\
    \ + 1;\n\t\n\tif (opening_brackets_end_index_plus_one != closing_brackets_end_index_plus_one)\
    \ return false;\n\t\n\tauto opening_brackets_end_index_minus_one = opening_brackets_end_index\
    \ - 1;\n\tauto closing_brackets_end_index_minus_one = closing_brackets_end_index\
    \ - 1;\n\t\n\tif (opening_brackets_end_index_minus_one != closing_brackets_end_index_minus_one)\
    \ return false;\n\t\n\treturn true;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n        case '<':\n\
    \            if(brackets[j] == '>') {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        case '>':\n            if(brackets[j] == '<') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            result = false;\n            break;\n        }\n        i++;\n  \
    \  }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i\
    \ + 1] == '>')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    bool result = true;\n    for(int i\
    \ = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '<') {\n     \
    \       if(brackets[i + 1] != '>') {\n                result = false;\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    for(int i = 0; i <\
    \ brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    size_t i;\n    bool result = true;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if(c == '<')\n        {\n\
    \            ++open_brackets;\n        }\n        else if(c == '>')\n        {\n\
    \            ++close_brackets;\n        }\n        else\n        {\n         \
    \   assert(false);\n        }\n    }\n    if(open_brackets != close_brackets)\n\
    \    {\n        result = false;\n    }\n    return result;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n \
    \   bool result = true;\n    while(i < len) {\n        if(brackets[i] == '<')\
    \ {\n            i++;\n            while(i < len && brackets[i] != '<') {\n  \
    \              i++;\n            }\n            if(i == len) {\n             \
    \   result = false;\n                break;\n            }\n            j = i;\n\
    \            while(j < len && brackets[j] != '>') {\n                j++;\n  \
    \          }\n            if(i == j) {\n                result = false;\n    \
    \            break;\n            }\n            i += j - i;\n        }\n     \
    \   else if(brackets[i] == '>') {\n            i++;\n            while(i < len\
    \ && brackets[i] != '<') {\n                i++;\n            }\n            if(i\
    \ == len) {\n                result = false;\n                break;\n       \
    \     }\n            j = i;\n            while(j < len && brackets[j] != '>')\
    \ {\n                j++;\n            }\n            if(i == j) {\n         \
    \       result = false;\n                break;\n            }\n            i\
    \ += j - i;\n        }\n        i++;\n    }\n    return result;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the brackets are nested or overlapping.\n\
    <|/ c |>\n<| c |>\nIt doesn't work because you didn't test it properly.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works fine. Did you test it properly?\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works fine. Did you test it properly?\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works fine. Did you test it properly?\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n                return true;\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len && j < len) {\n        if(brackets[i]\
    \ == '<') {\n            if(brackets[j] == '>')\n                j++;\n      \
    \      else\n                j++;\n        }\n        else if(brackets[i] == '>')\
    \ {\n            if(brackets[j] == '<')\n                j++;\n            else\n\
    \                j++;\n        }\n        else if(brackets[i] == '<' && brackets[j]\
    \ == '>')\n            j++;\n        else if(brackets[i] == '>' && brackets[j]\
    \ == '<')\n            j++;\n        else\n            i++;\n    }\n    while(i\
    \ < len) {\n        if(brackets[i] == '<')\n            i++;\n        else\n \
    \           result = false;\n    }\n    while(j < len) {\n        if(brackets[j]\
    \ == '>')\n            j++;\n        else\n            result = false;\n    }\n\
    \    return result;\n}", "{\n\tauto bracket = brackets.front();\n\tauto brackets\
    \ = brackets.back();\n\tauto open_brackets = brackets.find_first_of(bracket);\n\
    \tauto close_brackets = brackets.find_first_of(bracket);\n\t\n\tif (open_brackets\
    \ == string::npos)\n\t\treturn false;\n\t\n\tif (close_brackets == string::npos)\n\
    \t\treturn false;\n\t\n\tfor (auto i = open_brackets; i < close_brackets; ++i)\n\
    \t{\n\t\tauto next_bracket = brackets[i];\n\t\tif (next_bracket != bracket)\n\t\
    \t\treturn false;\n\t}\n\t\n\treturn true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '<')\n            return false;\n   \
    \ }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '>')\n            return false;\n    }\n    return true;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis code does not work if brackets are \"<<<>>\"\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I tested it on\
    \ \"<<<>>\" and it returned true.\n<|/ c |>\n<| c |>\nI tested it on \"<<<>>\"\
    \ and it returned true.\n<|/ c |>\n<| c |>\nI tested it on \"<<<>>\" and it returned\
    \ true.\n<|/ c |>\n<| c |>\nI tested it on \"<<<>>\" and it returned true.\n<|/\
    \ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n\
    <| c |>\nThis doesn't work. Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\n: It\
    \ works fine for me. Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\n: It works\
    \ for me too. Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\n: It works for me\
    \ too. Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\n: It works for me too. Try\
    \ it with `\"<<><>>\"`.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>",
  "{\n\tsize_t brackets_size = brackets.length();\n\tsize_t opening_brackets_size\
    \ = 0;\n\tsize_t closing_brackets_size = 0;\n\tsize_t opening_brackets_index =\
    \ 0;\n\tsize_t closing_brackets_index = 0;\n\tsize_t opening_brackets_index_next\
    \ = 0;\n\tsize_t closing_brackets_index_next = 0;\n\tsize_t opening_brackets_index_prev\
    \ = 0;\n\tsize_t closing_brackets_index_prev = 0;\n\tsize_t opening_brackets_index_next_prev\
    \ = 0;\n\tsize_t closing_brackets_index_next_prev = 0;\n\tsize_t opening_brackets_index_next_next_prev\
    \ = 0;\n\tsize_t closing_brackets_index_next_next_prev = 0;\n\tsize_t opening_brackets_index_next_next_next_prev\
    \ = 0;\n\tsize_t closing_brackets_index_next_next_next_prev = 0;\n\tsize_t opening_brackets_index_next_next_next_next_prev\
    \ = 0;\n\tsize_t closing_brackets_index_next_next_next_next_prev = 0;\n\tsize_t\
    \ opening_brackets_index_next_next_next_next_next_prev = 0;\n\tsize_t closing_brackets_index_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t opening_brackets_index_next_next_next_next_next_next_prev = 0;\n\
    \tsize_t closing_brackets_index_next_next_next_next_next_next_prev = 0;\n\tsize_t\
    \ opening_brackets_index_next_next_next_next_next_next_next_prev = 0;\n\tsize_t\
    \ closing_brackets_index_next_next_next_next_next_next_next_prev = 0;\n\tsize_t\
    \ opening_brackets_index_next_next_next_next_next_next_next_next_prev = 0;\n\t\
    size_t closing_brackets_index_next_next_next_next_next_next_next_next_prev = 0;\n\
    \tsize_t opening_brackets_index_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t closing_brackets_index_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t opening_brackets_index_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t closing_brackets_index_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t opening_brackets_index_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t closing_brackets_index_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t opening_brackets_index_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 0;\n\tsize_t closing_bra", "{\n\tsize_t brackets_size = brackets.length();\n\
    \tsize_t opening_brackets_size = 0;\n\tsize_t closing_brackets_size = 0;\n\tsize_t\
    \ opening_brackets_index = 0;\n\tsize_t closing_brackets_index = 0;\n\tsize_t\
    \ opening_brackets_end = 0;\n\tsize_t closing_brackets_end = 0;\n\tsize_t opening_brackets_index2\
    \ = 0;\n\tsize_t closing_brackets_index2 = 0;\n\tsize_t opening_brackets_end2\
    \ = 0;\n\tsize_t closing_brackets_end2 = 0;\n\tsize_t opening_brackets_index3\
    \ = 0;\n\tsize_t closing_brackets_index3 = 0;\n\tsize_t opening_brackets_end3\
    \ = 0;\n\tsize_t closing_brackets_end3 = 0;\n\tsize_t opening_brackets_index4\
    \ = 0;\n\tsize_t closing_brackets_index4 = 0;\n\tsize_t opening_brackets_end4\
    \ = 0;\n\tsize_t closing_brackets_end4 = 0;\n\tsize_t opening_brackets_index5\
    \ = 0;\n\tsize_t closing_brackets_index5 = 0;\n\tsize_t opening_brackets_end5\
    \ = 0;\n\tsize_t closing_brackets_end5 = 0;\n\tsize_t opening_brackets_index6\
    \ = 0;\n\tsize_t closing_brackets_index6 = 0;\n\tsize_t opening_brackets_end6\
    \ = 0;\n\tsize_t closing_brackets_end6 = 0;\n\tsize_t opening_brackets_index7\
    \ = 0;\n\tsize_t closing_brackets_index7 = 0;\n\tsize_t opening_brackets_end7\
    \ = 0;\n\tsize_t closing_brackets_end7 = 0;\n\tsize_t opening_brackets_index8\
    \ = 0;\n\tsize_t closing_brackets_index8 = 0;\n\tsize_t opening_brackets_end8\
    \ = 0;\n\tsize_t closing_brackets_end8 = 0;\n\tsize_t opening_brackets_index9\
    \ = 0;\n\tsize_t closing_brackets_index9 = 0;\n\tsize_t opening_brackets_end9\
    \ = 0;\n\tsize_t closing_brackets_end9 = 0;\n\tsize_t opening_brackets_index10\
    \ = 0;\n\tsize_t closing_brackets_index10 = 0;\n\tsize_t opening_brackets_end10\
    \ = 0;\n\tsize_t closing_brackets_end10 = 0;\n\tsize_t opening_brackets_index11\
    \ = 0;\n\tsize_t closing_brackets_index11 = 0;\n\tsize_t opening_brackets_end11\
    \ = 0;\n\tsize_t closing_bra", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] == '>')\n        {\n            if(i+1 < len && brackets[i+1]\
    \ == '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i + 1] == '>')\n            {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,string |>\n<| c |>\nI like this solution. One thing I\
    \ would add is that if you have nested brackets, this solution will fail.\n<|/\
    \ c |>\n<| c |>\nYes, I agree with you. Nested brackets would require a more complex\
    \ algorithm.\n<|/ c |>\n<| c |>\nI added a solution that handles nested brackets.\n\
    <|/ c |>\n<| c |>\nI added a solution that handles nested brackets.\n<|/ c |>\n\
    <| a |>\n<code>", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\n\
    This fails for `<><>`, which should return `true`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've fixed the code now.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                ++i;\n            }\n            else\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i+1]\
    \ == '<')\n            {\n                ++i;\n            }\n            else\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n        case '<':\n\
    \            if(brackets[j] == '>') {\n                j++;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \            break;\n        case '>':\n            if(brackets[j] == '<') {\n\
    \                j++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            result = false;\n            break;\n        }\n        i++;\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI\
    \ like your solution. I'm going to try it out and see how it works. Thanks!\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require any extra memory and\
    \ should be faster.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require\
    \ any extra memory and should be faster.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require any extra memory and should be faster.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that doesn't require any extra memory and should be faster.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    size_t len = brackets.length();\n    for(size_t\
    \ i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c ==\
    \ '<')\n        {\n            if(brackets[i+1] != '>')\n                return\
    \ false;\n            i += 2;\n        }\n        else if(c == '>')\n        {\n\
    \            if(brackets[i-1] != '>')\n                return false;\n       \
    \     i -= 2;\n        }\n    }\n    return true;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    bool result = true;\n    while(i < len) {\n        char\
    \ c = brackets[i];\n        if(c == '<') {\n            if(brackets[i+1] == '>')\
    \ {\n                i++;\n            } else {\n                result = false;\n\
    \                break;\n            }\n        } else if(c == '>') {\n      \
    \      if(brackets[i+1] == '<') {\n                i++;\n            } else {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else {\n            result = false;\n            break;\n        }\n  \
    \      i++;\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n                return true;\n        }\n    }\n    return false;\n\
    }", "{\n\tauto opening_brackets = brackets.split(\"<\");\n\tauto closing_brackets\
    \ = brackets.split(\">\");\n\t\n\tfor (auto &opening_bracket : opening_brackets)\n\
    \t{\n\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\t\t\
    if (closing_bracket == closing_brackets.end())\n\t\t\treturn false;\n\t\t\n\t\t\
    auto opening_brackets_size = opening_brackets.size();\n\t\tauto closing_brackets_size\
    \ = closing_brackets.size();\n\t\t\n\t\tif (opening_brackets_size != closing_brackets_size)\n\
    \t\t\treturn false;\n\t\t\n\t\tfor (auto &closing_bracket : closing_brackets)\n\
    \t\t{\n\t\t\tif (opening_bracket != closing_bracket)\n\t\t\t\treturn false;\n\t\
    \t}\n\t}\n\t\n\treturn true;\n}", "{\n    bool result = true;\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != '<')\n    \
    \    {\n            result = false;\n            break;\n        }\n    }\n  \
    \  for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] !=\
    \ '>')\n        {\n            result = false;\n            break;\n        }\n\
    \    }\n    return result;\n}", "{\n\tsize_t brackets_size = brackets.length();\n\
    \tsize_t opening_brackets_size = 0;\n\tsize_t closing_brackets_size = 0;\n\tsize_t\
    \ opening_brackets_index = 0;\n\tsize_t closing_brackets_index = 0;\n\tsize_t\
    \ opening_brackets_index2 = 0;\n\tsize_t closing_brackets_index2 = 0;\n\tsize_t\
    \ opening_brackets_index3 = 0;\n\tsize_t closing_brackets_index3 = 0;\n\tsize_t\
    \ opening_brackets_index4 = 0;\n\tsize_t closing_brackets_index4 = 0;\n\tsize_t\
    \ opening_brackets_index5 = 0;\n\tsize_t closing_brackets_index5 = 0;\n\tsize_t\
    \ opening_brackets_index6 = 0;\n\tsize_t closing_brackets_index6 = 0;\n\tsize_t\
    \ opening_brackets_index7 = 0;\n\tsize_t closing_brackets_index7 = 0;\n\tsize_t\
    \ opening_brackets_index8 = 0;\n\tsize_t closing_brackets_index8 = 0;\n\tsize_t\
    \ opening_brackets_index9 = 0;\n\tsize_t closing_brackets_index9 = 0;\n\tsize_t\
    \ opening_brackets_index10 = 0;\n\tsize_t closing_brackets_index10 = 0;\n\tsize_t\
    \ opening_brackets_index11 = 0;\n\tsize_t closing_brackets_index11 = 0;\n\tsize_t\
    \ opening_brackets_index12 = 0;\n\tsize_t closing_brackets_index12 = 0;\n\tsize_t\
    \ opening_brackets_index13 = 0;\n\tsize_t closing_brackets_index13 = 0;\n\tsize_t\
    \ opening_brackets_index14 = 0;\n\tsize_t closing_brackets_index14 = 0;\n\tsize_t\
    \ opening_brackets_index15 = 0;\n\tsize_t closing_brackets_index15 = 0;\n\tsize_t\
    \ opening_brackets_index16 = 0;\n\tsize_t closing_brackets_index16 = 0;\n\tsize_t\
    \ opening_brackets_index17 = 0;\n\tsize_t closing_brackets_index17 = 0;\n\tsize_t\
    \ opening_brackets_index18 = 0;\n\tsize_t closing_brackets_index18 = 0;\n\tsize_t\
    \ opening_brackets_index19 = 0;\n\tsize_t closing_brackets_index19 = 0;\n\tsize_t\
    \ opening_brackets_index20 = 0;\n\tsize_t closing_brackets_index20 = 0;\n\tsize_t\
    \ opening_brackets_index21 = 0;\n\tsize_t closing_brackets_index21 = 0;\n\tsize_t\
    \ opening_bracket", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i + 1] ==\
    \ '>')\n            {\n                return true;\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_next = 0;\n    size_t closing_brackets_index_next\
    \ = 0;\n    size_t opening_brackets_index_prev = 0;\n    size_t closing_brackets_index_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next = 0;\n    size_t closing_brackets_index_prev_next\
    \ = 0;\n    size_t opening_brackets_index_prev_prev = 0;\n    size_t closing_brackets_index_prev_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next = 0;\n    size_t closing_brackets_index_prev_next_next\
    \ = 0;\n    size_t opening_brackets_index_prev_prev_next = 0;\n    size_t closing_brackets_index_prev_prev_next\
    \ = 0;\n    size_t opening_brackets_index_prev_prev_prev = 0;\n    size_t closing_brackets_index_prev_prev_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next = 0;\n    size_t\
    \ closing_brackets_index_prev_next_next_next = 0;\n    size_t opening_brackets_index_prev_prev_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_prev_next_next = 0;\n    size_t\
    \ opening_brackets_index_prev_prev_prev_next = 0;\n    size_t closing_brackets_index_prev_prev_prev_next\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next = 0;\n    size_t\
    \ closing_brackets_index_prev_next_next_next = 0;\n    size_t opening_brackets_index_prev_prev_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_prev_next_next = 0;\n    size_t\
    \ opening_brackets_index_prev_prev_prev_next = 0;\n    size_t closing_brackets_index_prev_prev_prev_next\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next = 0;\n    size_t\
    \ closing_brackets_index_prev_next_next_next = 0;\n    size_t opening_brackets_index_prev_prev_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_prev_next_next = 0;\n    size_t\
    \ opening_brackets_index_prev_prev_prev_next = 0;\n    size_t closing_brackets_index_prev_prev_prev_next\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next = 0;\n    size_t\
    \ closing_bracket", "{\n    size_t brackets_size = brackets.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i<brackets_size\
    \ && j<brackets_size)\n    {\n        char left_bracket = brackets[i];\n     \
    \   char right_bracket = brackets[j];\n        switch(left_bracket)\n        {\n\
    \        case '<':\n            switch(right_bracket)\n            {\n       \
    \     case '>':\n                result = true;\n                break;\n    \
    \        case '<':\n                result = false;\n                break;\n\
    \            case '>':\n                result = true;\n                break;\n\
    \            default:\n                result = false;\n                break;\n\
    \            }\n            break;\n        case '>':\n            switch(right_bracket)\n\
    \            {\n            case '<':\n                result = true;\n      \
    \          break;\n            case '>':\n                result = false;\n  \
    \              break;\n            case '<':\n                result = true;\n\
    \                break;\n            default:\n                result = false;\n\
    \                break;\n            }\n            break;\n        default:\n\
    \            result = false;\n            break;\n        }\n        i++;\n  \
    \      j++;\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.size();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_next = 0;\n    size_t closing_brackets_index_next\
    \ = 0;\n    size_t opening_brackets_index_end = 0;\n    size_t closing_brackets_index_end\
    \ = 0;\n    size_t opening_brackets_index_end2 = 0; // end index for next loop\n\
    \    size_t closing_brackets_index_end2 = 0; // end index for next loop\n    size_t\
    \ opening_brackets_index_end3 = 0; // end index for next loop\n    size_t closing_brackets_index_end3\
    \ = 0; // end index for next loop\n    size_t opening_brackets_index_end4 = 0;\
    \ // end index for next loop\n    size_t closing_brackets_index_end4 = 0; // end\
    \ index for next loop\n    size_t opening_brackets_index_end5 = 0; // end index\
    \ for next loop\n    size_t closing_brackets_index_end5 = 0; // end index for\
    \ next loop\n    size_t opening_brackets_index_end6 = 0; // end index for next\
    \ loop\n    size_t closing_brackets_index_end6 = 0; // end index for next loop\n\
    \    size_t opening_brackets_index_end7 = 0; // end index for next loop\n    size_t\
    \ closing_brackets_index_end7 = 0; // end index for next loop\n    size_t opening_brackets_index_end8\
    \ = 0; // end index for next loop\n    size_t closing_brackets_index_end8 = 0;\
    \ // end index for next loop\n    size_t opening_brackets_index_end9 = 0; // end\
    \ index for next loop\n    size_t closing_brackets_index_end9 = 0; // end index\
    \ for next loop\n    size_t opening_brackets_index_end10 = 0; // end index for\
    \ next loop\n    size_t closing_brackets_index_end10 = 0; // end index for next\
    \ loop\n    size_t opening_brackets_index_end11 = 0; // end index for next loop\n\
    \    size_t closing_brackets_index_end11 = 0; // end index for next loop\n   \
    \ size_t opening_brackets_index_end12 = 0; // end index for next loop\n    size_t\
    \ closing_brackets_index_end12 = 0; // end index for next loop\n    size_t opening_bra",
  "{\n    size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n \
    \   for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n            {\n                ++i;\n \
    \           }\n            else\n            {\n                ret = false;\n\
    \            }\n        }\n    }\n    return ret;\n}", "{\n    bool result = true;\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n        {\n            result = false;\n            break;\n      \
    \  }\n        for(int j = i + 1; j < brackets.length(); j++)\n        {\n    \
    \        if(brackets[j] != '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\t\tchar c = brackets[i];\n\
    \t\tif (c == '<')\n\t\t{\n\t\t\tif (brackets[i+1] == '>')\n\t\t\t\treturn true;\n\
    \t\t}\n\t\telse if (c == '>')\n\t\t{\n\t\t\tif (brackets[i-1] == '<')\n\t\t\t\t\
    return true;\n\t\t}\n\t}\n\treturn false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n            case\
    \ '<':\n                if(brackets[j] == '>') {\n                    i++;\n \
    \                   j++;\n                } else {\n                    result\
    \ = false;\n                    break;\n                }\n            case '>':\n\
    \                if(brackets[j] == '<') {\n                    i++;\n        \
    \            j++;\n                } else {\n                    result = false;\n\
    \                    break;\n                }\n            default:\n       \
    \         i++;\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis fails for `<<><>>`\
    \ which should return `true` but returns `false`.\n<|/ c |>\n<| c |>\n: Yes, I\
    \ realized that after I posted my comment. Fixed now.\n<|/ c |>\n<| c |>\nThis\
    \ fails for `<<><>>` which should return `true` but returns `false`.\n<|/ c |>\n\
    <| c |>\n: Yes, I realized that after I posted my comment. Fixed now.\n<|/ c |>\n\
    <| a |>\n<code>", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work. `<` doesn't match `>`.\n<|/ c |>\n<| c |>\nI fixed the problem by changing\
    \ the `if` statement to `if(brackets[i+1] == '<')`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. `<` doesn't match `>`.\n<|/ c |>\n<| c |>\nI fixed the problem by changing\
    \ the `if` statement to `if(brackets[i+1] == '<')`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. `<` doesn't match `>`.\n<|/ c |>\n<| a dscore=4 |>\nThis can be done with\
    \ regular expressions:\n<code>\n#include <iostream>\n#include <regex>\n#include\
    \ <string>\nusing namespace std;", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i\
    \ + 1] == '>')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(!(brackets[i] == '<' || brackets[i] == '>'))\n        {\n        \
    \    result = false;\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis fails for `
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '>')\n        {\n            if(brackets[i + 1] == '>')\n            {\n\
    \                return true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets\
    \ = 0;\n    size_t closing_brackets = 0;\n    size_t i;\n    for(i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            ++opening_brackets;\n\
    \        }\n        else if(brackets[i] == '>')\n        {\n            ++closing_brackets;\n\
    \        }\n        else\n        {\n            assert(false);\n        }\n \
    \   }\n    return opening_brackets == closing_brackets;\n}", "{\n\tfor (int i\
    \ = 0; i < brackets.length(); i++)\n\t{\n\t\tchar c = brackets[i];\n\t\tif (c\
    \ == '<')\n\t\t{\n\t\t\tfor (int j = i + 1; j < brackets.length(); j++)\n\t\t\t\
    {\n\t\t\t\tif (brackets[j] == '>')\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_in_brackets = 0;\n    size_t closing_brackets_index_in_brackets\
    \ = 0;\n    size_t opening_brackets_index_in_string = 0;\n    size_t closing_brackets_index_in_string\
    \ = 0;\n    size_t opening_brackets_index_in_string_in_brackets = 0;\n    size_t\
    \ closing_brackets_index_in_string_in_brackets = 0;\n    size_t opening_brackets_index_in_string_in_string\
    \ = 0;\n    size_t closing_brackets_index_in_string_in_string = 0;\n    size_t\
    \ opening_brackets_index_in_string_in_string_in_brackets = 0;\n    size_t closing_brackets_index_in_string_in_string_in_brackets\
    \ = 0;\n    size_t opening_brackets_index_in_string_in_string_in_string = 0;\n\
    \    size_t closing_brackets_index_in_string_in_string_in_string = 0;\n    size_t\
    \ opening_brackets_index_in_string_in_string_in_string_in_brackets = 0;\n    size_t\
    \ closing_brackets_index_in_string_in_string_in_string_in_brackets = 0;\n    size_t\
    \ opening_brackets_index_in_string_in_string_in_string_in_string = 0;\n    size_t\
    \ closing_brackets_index_in_string_in_string_in_string_in_string = 0;\n    size_t\
    \ opening_brackets_index_in_string_in_string_in_string_in_string_in_brackets =\
    \ 0;\n    size_t closing_brackets_index_in_string_in_string_in_string_in_string_in_brackets\
    \ = 0;\n    size_t opening_brackets_index_in_string_in_string_in_string_in_string_in_string\
    \ = 0;\n    size_t closing_brackets_index_in_string_in_string_in_string_in_string_in_string\
    \ = 0;\n    size_t opening_brackets_index_in_string_in_string_in_string_in_string_in_string_in_brackets\
    \ = 0;\n    size_t closing_brackets_index_in_string_in_string_in_string_in_string_in_string_in_brackets\
    \ = 0;\n    size_t opening_brackets_index_in_string_in_string_in_string_in_string_in_string_in_string\
    \ = 0;\n    size_t closing_brackets_index_in_string_in_string_in_string_in_string_in_string\
    \ = 0;\n    size_t opening_brackets_index_in_string_in_string_in_string_in_string_in_string_in_string",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tauto bracket = brackets.front();\n\tauto brackets = brackets.back();\n\
    \tauto opening_brackets = brackets.find_first_of(bracket);\n\tauto closing_brackets\
    \ = brackets.find_last_of(bracket);\n\t\n\tif (opening_brackets == string::npos)\n\
    \t\treturn false;\n\t\n\tif (closing_brackets == string::npos)\n\t\treturn false;\n\
    \t\n\tif (opening_brackets == closing_brackets)\n\t\treturn true;\n\t\n\treturn\
    \ false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n    \
    \    if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    size_t brackets_size = brackets.length();\n  \
    \  size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t i;\n\
    \    for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            open_brackets++;\n        }\n        else if(brackets[i]\
    \ == '>')\n        {\n            close_brackets++;\n        }\n    }\n    return\
    \ open_brackets == close_brackets;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ brackets_size) {\n        char c = brackets[i];\n        switch(c) {\n     \
    \   case '<':\n            if(brackets[j] == '>') {\n                i++;\n  \
    \              j++;\n            } else {\n                result = false;\n \
    \           }\n            break;\n        case '>':\n            if(brackets[j]\
    \ == '<') {\n                i++;\n                j++;\n            } else {\n\
    \                result = false;\n            }\n            break;\n        default:\n\
    \            i++;\n            j++;\n        }\n    }\n    return result;\n}",
  "{\n    size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c\
    \ == '>')\n        {\n            if(brackets[i+1] != '<')\n            {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n        else if(c == '<')\n        {\n            if(brackets[i-1] != '>')\n\
    \            {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t opening_brackets = 0;\n    size_t closing_brackets\
    \ = 0;\n    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index\
    \ = 0;\n    size_t opening_brackets_index_next = 0;\n    size_t closing_brackets_index_next\
    \ = 0;\n    size_t opening_brackets_index_end = 0;\n    size_t closing_brackets_index_end\
    \ = 0;\n    size_t opening_brackets_index_end2 = 0;\n    size_t closing_brackets_index_end2\
    \ = 0;\n    size_t opening_brackets_index_end3 = 0;\n    size_t closing_brackets_index_end3\
    \ = 0;\n    size_t opening_brackets_index_end4 = 0;\n    size_t closing_brackets_index_end4\
    \ = 0;\n    size_t opening_brackets_index_end5 = 0;\n    size_t closing_brackets_index_end5\
    \ = 0;\n    size_t opening_brackets_index_end6 = 0;\n    size_t closing_brackets_index_end6\
    \ = 0;\n    size_t opening_brackets_index_end7 = 0;\n    size_t closing_brackets_index_end7\
    \ = 0;\n    size_t opening_brackets_index_end8 = 0;\n    size_t closing_brackets_index_end8\
    \ = 0;\n    size_t opening_brackets_index_end9 = 0;\n    size_t closing_brackets_index_end9\
    \ = 0;\n    size_t opening_brackets_index_end10 = 0;\n    size_t closing_brackets_index_end10\
    \ = 0;\n    size_t opening_brackets_index_end11 = 0;\n    size_t closing_brackets_index_end11\
    \ = 0;\n    size_t opening_brackets_index_end12 = 0;\n    size_t closing_brackets_index_end12\
    \ = 0;\n    size_t opening_brackets_index_end13 = 0;\n    size_t closing_brackets_index_end13\
    \ = 0;\n    size_t opening_brackets_index_end14 = 0;\n    size_t closing_brackets_index_end14\
    \ = 0;\n    size_t opening_brackets_index_end15 = 0;\n    size_t closing_brackets_index_end15\
    \ = 0;\n    size_t opening_brackets_index_end16 = 0;\n    size_t closing_brackets_index_end16\
    \ = 0;\n    size_t opening_brackets_index_end17 = 0;\n    size_t closing_brackets_index_end17\
    \ = 0;\n    size_t opening_brackets_index_end18 = 0;\n    size_t closing_brackets_index_end18\
    \ = 0;\n", "{\n    size_t len = brackets.length();\n    bool result = true;\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n \
    \       if(c == '>')\n        {\n            if(i+1 < len && brackets[i+1] ==\
    \ '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(i+1\
    \ < len && brackets[i+1] == '>')\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n            return false;\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '>')\n            return false;\n   \
    \ }\n    return true;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n        char\
    \ c = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ != '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    size_t brackets_size\
    \ = brackets.length();\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    \n    for (size_t i = 0; i < brackets_size; ++i)\n    {\n        char\
    \ c = brackets[i];\n        if (c == '<')\n            ++opening_brackets_size;\n\
    \        else if (c == '>')\n            ++closing_brackets_size;\n    }\n   \
    \ \n    return opening_brackets_size == closing_brackets_size;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] != '>')\n\
    \                return false;\n            i += 2;\n        }\n    }\n    return\
    \ true;\n}", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            if(brackets[i+1] == '>')\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\n\
    This fails for `
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n                return\
    \ true;\n        }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '<')\n            return false;\n   \
    \ }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '>')\n            return false;\n    }\n    return true;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \tauto bracket = brackets.front();\n\tauto brackets = brackets.back();\n\tauto\
    \ opening_brackets = brackets.find_first_of(bracket);\n\tauto closing_brackets\
    \ = brackets.find_last_of(bracket);\n\t\n\tif (opening_brackets == string::npos)\n\
    \t{\n\t\treturn false;\n\t}\n\t\n\tif (closing_brackets == string::npos)\n\t{\n\
    \t\treturn true;\n\t}\n\t\n\tif (opening_brackets == closing_brackets)\n\t{\n\t\
    \treturn false;\n\t}\n\t\n\treturn true;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < brackets_size; ++i)\n\
    \    {\n        char c = brackets[i];\n        if(c == '<')\n        {\n     \
    \       ++opening_brackets_size;\n        }\n        else if(c == '>')\n     \
    \   {\n            ++closing_brackets_size;\n        }\n        else\n       \
    \ {\n            result = false;\n            break;\n        }\n    }\n    if(opening_brackets_size\
    \ != closing_brackets_size)\n    {\n        result = false;\n    }\n    return\
    \ result;\n}", "{\n\tsize_t len = brackets.length();\n\tsize_t i;\n\tbool result\
    \ = true;\n\tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c = brackets[i];\n\t\tif(c\
    \ == '>')\n\t\t{\n\t\t\tif(!(i+1 < len && brackets[i+1] == '<'))\n\t\t\t{\n\t\t\
    \t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(c == '<')\n\t\
    \t{\n\t\t\tif(!(i-1 >= 0 && brackets[i-1] == '>'))\n\t\t\t{\n\t\t\t\tresult =\
    \ false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your solution,\
    \ but I believe it can be made more efficient by using a stack to keep track of\
    \ opening and closing brackets.\n<|/ c |>\n<| c |>\nI believe that would be more\
    \ efficient, but I haven't done any benchmarking.\n<|/ c |>\n<| c |>\nI believe\
    \ that would be more efficient, but I haven't done any benchmarking.\n<|/ c |>\n\
    <| c |>\nI believe that would be more efficient, but I haven't done any benchmarking.\n\
    <|/ c |>\n<| c |>\nI believe that would be more efficient, but I haven't done\
    \ any benchmarking.\n<|/ c |>\n<| a tags=c++,string |>\n<code>", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_in_brackets\
    \ = -1;\n    size_t closing_brackets_index_in_brackets = -1;\n    size_t opening_brackets_index_in_string\
    \ = 0;\n    size_t closing_brackets_index_in_string = 0;\n    size_t opening_brackets_index_in_string2\
    \ = 0;\n    size_t closing_brackets_index_in_string2 = 0;\n    size_t opening_brackets_index_in_string3\
    \ = 0;\n    size_t closing_brackets_index_in_string3 = 0;\n    size_t opening_brackets_index_in_string4\
    \ = 0;\n    size_t closing_brackets_index_in_string4 = 0;\n    size_t opening_brackets_index_in_string5\
    \ = 0;\n    size_t closing_brackets_index_in_string5 = 0;\n    size_t opening_brackets_index_in_string6\
    \ = 0;\n    size_t closing_brackets_index_in_string6 = 0;\n    size_t opening_brackets_index_in_string7\
    \ = 0;\n    size_t closing_brackets_index_in_string7 = 0;\n    size_t opening_brackets_index_in_string8\
    \ = 0;\n    size_t closing_brackets_index_in_string8 = 0;\n    size_t opening_brackets_index_in_string9\
    \ = 0;\n    size_t closing_brackets_index_in_string9 = 0;\n    size_t opening_brackets_index_in_string10\
    \ = 0;\n    size_t closing_brackets_index_in_string10 = 0;\n    size_t opening_brackets_index_in_string11\
    \ = 0;\n    size_t closing_brackets_index_in_string11 = 0;\n    size_t opening_brackets_index_in_string12\
    \ = 0;\n    size_t closing_brackets_index_in_string12 = 0;\n    size_t opening_brackets_index_in_string13\
    \ = 0;\n    size_t closing_brackets_index_in_string13 = 0;\n    size_t opening_brackets_index_in_string14\
    \ = 0;\n    size_t closing_brackets_index_in_string14 = 0;\n    size_t opening_brackets_index_in_string15\
    \ = 0;\n    size_t closing_brackets_index_in_string15 = 0;\n    size_t opening_brackets_index_in_string16\
    \ = 0;\n    size_t closing_brackets_index_in_string16 = 0;\n    size_t opening_brackets_index_in_",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional libraries. However, it does require a little more memory\
    \ than my solution, since it requires two arrays of size `brackets.length()`.\
    \ But I like your solution better because it doesn't require any additional libraries.\
    \ Thanks!\n<|/ c |>\n<| c |>\nYeah, I like your solution better too. My solution\
    \ was more of a \"proof of concept\" solution, since I didn't want to use any\
    \ libraries. But I like your solution better because it doesn't require any additional\
    \ libraries. Thanks!\n<|/ c |>\n<| c |>\nI added a solution that doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| a tags=c++,string |>\n<code>", "{\n\
    \    size_t len = brackets.length();\n    size_t i;\n    bool result = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '<')\n       \
    \ {\n            if(brackets[i+1] == '>')\n            {\n                ++i;\n\
    \            }\n            else\n            {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t opening_brackets_index\
    \ = 0;\n    size_t closing_brackets_index = 0;\n    size_t opening_brackets_index_next\
    \ = 0;\n    size_t closing_brackets_index_next = 0;\n    size_t opening_brackets_index_prev\
    \ = 0;\n    size_t closing_brackets_index_prev = 0;\n    size_t opening_brackets_index_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_prev = 0;\n    size_t opening_brackets_index_prev_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next = 0;\n    size_t opening_brackets_index_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next = 0;\n    size_t opening_brackets_index_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ opening_brackets_index_next_next_next_next_prev = 0;\n    size_t closing_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t opening_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ closing_brackets_index_prev_next_next_next_next = 0;\n    size_t opening_brackets_index_next_next_next_next_prev\
    \ = 0;\n    size_t closing_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ opening_brackets_index_prev_next_next_next_next = 0;\n    size_t closing_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t opening_brackets_index_next_next_next_next_prev = 0;\n    size_t\
    \ closing_brackets_index_next_next_next_next_prev = 0;\n    size_t opening_brackets_index_prev_next_next_next_next\
    \ = 0;\n    size_t closing_brackets_index_prev_next_next_next_next = 0;\n    size_t\
    \ open", "{\n\tsize_t len = brackets.length();\n\tsize_t i;\n\tbool ret = true;\n\
    \tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c = brackets[i];\n\t\tif(c == '<')\n\
    \t\t{\n\t\t\tif(brackets[i+1] != '>')\n\t\t\t{\n\t\t\t\tret = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\telse if(c == '>')\n\t\t{\n\t\t\tif(brackets[i-1] !=\
    \ '<')\n\t\t\t{\n\t\t\t\tret = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return ret;\n}", "{\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n\
    \    size_t n = 0;\n    size_t m = 0;\n    size_t n2 = 0;\n    size_t m2 = 0;\n\
    \    size_t n3 = 0;\n    size_t m3 = 0;\n    size_t n4 = 0;\n    size_t m4 = 0;\n\
    \    size_t n5 = 0;\n    size_t m5 = 0;\n    size_t n6 = 0;\n    size_t m6 = 0;\n\
    \    size_t n7 = 0;\n    size_t m7 = 0;\n    size_t n8 = 0;\n    size_t m8 = 0;\n\
    \    size_t n9 = 0;\n    size_t m9 = 0;\n    size_t n10 = 0;\n    size_t m10 =\
    \ 0;\n    size_t n11 = 0;\n    size_t m11 = 0;\n    size_t n12 = 0;\n    size_t\
    \ m12 = 0;\n    size_t n13 = 0;\n    size_t m13 = 0;\n    size_t n14 = 0;\n  \
    \  size_t m14 = 0;\n    size_t n15 = 0;\n    size_t m15 = 0;\n    size_t n16 =\
    \ 0;\n    size_t m16 = 0;\n    size_t n17 = 0;\n    size_t m17 = 0;\n    size_t\
    \ n18 = 0;\n    size_t m18 = 0;\n    size_t n19 = 0;\n    size_t m19 = 0;\n  \
    \  size_t n20 = 0;\n    size_t m20 = 0;\n    size_t n21 = 0;\n    size_t m21 =\
    \ 0;\n    size_t n22 = 0;\n    size_t m22 = 0;\n    size_t n23 = 0;\n    size_t\
    \ m23 = 0;\n    size_t n24 = 0;\n    size_t m24 = 0;\n    size_t n25 = 0;\n  \
    \  size_t m25 = 0;\n    size_t n26 = 0;\n    size_t m26 = 0;\n    size_t n27 =\
    \ 0;\n    size_t m27 = 0;\n    size_t n28 = 0;\n    size_t m28 = 0;\n    size_t\
    \ n29 = 0;\n    size_t m29 = 0;\n    size_t n30 = 0;\n    size_t m30 = 0;\n  \
    \  size_t n31 = 0;\n    size_t m31 = 0;\n    size_t n32 = 0;\n    size_t m32 =\
    \ 0;\n    size_t n33 = 0;\n    size_t m33 = 0;\n    size_t n34 = 0;\n    size_t\
    \ m34 = 0;\n    size_t n35 = 0;\n    size_t m35 = 0;\n    size_t n36 = 0;\n  \
    \  size_t m36 = 0;\n    size_t n37 = 0;\n    size_t m37 = 0;\n    size_t n38 =\
    \ 0;\n    size_t m38 = 0;\n    size_t n39 = 0;\n    size_t m39 = 0;\n    size_t\
    \ n40 = 0;\n    size_t m40 = 0;\n    size_t n41 = 0;\n    size_t m41 = 0;\n  \
    \  size_t n42 = 0;\n    size_t m42 = 0;\n    size_t ", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i <\
    \ len) {\n        char c = brackets[i];\n        switch(c) {\n        case '<':\n\
    \            if(brackets[j] == '>') {\n                j++;\n            } else\
    \ {\n                result = false;\n            }\n            break;\n    \
    \    case '>':\n            if(brackets[j] == '<') {\n                j++;\n \
    \           } else {\n                result = false;\n            }\n       \
    \     break;\n        default:\n            i++;\n            break;\n       \
    \ }\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '<')\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n\tsize_t brackets_size = brackets.length();\n\
    \tsize_t opening_brackets_size = 0;\n\tsize_t closing_brackets_size = 0;\n\tsize_t\
    \ i;\n\t\n\tfor (i = 0; i < brackets_size; ++i)\n\t{\n\t\tif (brackets[i] == '<')\n\
    \t\t{\n\t\t\topening_brackets_size++;\n\t\t}\n\t\telse if (brackets[i] == '>')\n\
    \t\t{\n\t\t\tclosing_brackets_size++;\n\t\t}\n\t}\n\t\n\tif (opening_brackets_size\
    \ == closing_brackets_size)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n\
    }", "{\n\tauto bracket = brackets.find(\"<\");\n\twhile (bracket != string::npos)\n\
    \t{\n\t\tauto next_bracket = brackets.find(\">\", bracket);\n\t\tif (next_bracket\
    \ == string::npos)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    auto open_bracket = brackets.substr(bracket, next_bracket - bracket);\n\t\t\t\
    auto close_bracket = brackets.substr(next_bracket);\n\t\t\tif (open_bracket !=\
    \ close_bracket)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tbracket\
    \ = next_bracket;\n\t}\n\treturn true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't\
    \ work if you have a string like `<<<>>>` which should return true.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. Did you try it? It returns `true` for `<<<>>>`.\n<|/\
    \ c |>\n<| c |>\nYes, I did. But I thought you meant `<<<>>` should return `true`\
    \ because `<<<` is `<<<` which is not `<`. But it returns `false` because `<<<`\
    \ is `<<<` which is not `<<<` which is not `<`.\n<|/ c |>\n<| c |>\n: Yes, I did\
    \ mean `<<<` should return `true` because `<<<` is `<<<` which is not `<`. But\
    \ it returns `false` because `<<<` is `<<<` which is not `<<<` which is not `<`.\n\
    <|/ c |>\n<| c |>\n: Yes, I did mean `<<<` should return `true` because `<<<`\
    \ is `<<<` which is not `<`. But it returns `false` because `<<<` is `<<<` which\
    \ is not `<<<` which is not `<`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n  \
    \  for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] ==\
    \ '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n     \
    \           return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    bool ret = true;\n\
    \    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] == '>')\n       \
    \ {\n            if(brackets[i+1] != '<')\n            {\n                ret\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ ret;\n}", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    size_t i;\n    for(i = 0; i\
    \ < brackets_size; ++i)\n    {\n        if(brackets[i] == '<')\n            ++opening_brackets_size;\n\
    \        else if(brackets[i] == '>')\n            ++closing_brackets_size;\n \
    \   }\n    if(opening_brackets_size != closing_brackets_size)\n        return\
    \ false;\n    for(i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n                return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis is not correct. `<` does not mean \"open bracket\", it means\
    \ \"left angle bracket\". `<` does not mean \"open bracket\", it means \"left\
    \ angle bracket\".\n<|/ c |>\n<| c |>\n: I see what you mean. Thanks for the correction.\n\
    <|/ c |>\n<| c |>\n: I added a corrected version to my answer.\n<|/ c |>\n<| c\
    \ |>\n: I added a corrected version to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ a corrected version to my answer.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    bool result = true;\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != '<')\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '>')\n        {\n            result = false;\n            break;\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c\
    \ |>\nThis doesn't work. Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\n: It works.\
    \ I tested it with `\"<<><>>\"`. What do you mean by \"doesn't work\"?\n<|/ c\
    \ |>\n<| c |>\n: I tested it with `\"<<><>>\"`. What do you mean by \"doesn't\
    \ work\"?\n<|/ c |>\n<| c |>\n: It doesn't work. Try it with `\"<<><>>\"`.\n<|/\
    \ c |>\n<| c |>\n: I tested it with `\"<<><>>\"`. What do you mean by \"doesn't\
    \ work\"?\n<|/ c |>\n<| a tags=c++,algorithm |>\nI believe that this is what you\
    \ are looking for:\n<code>", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    bool result = true;\n    \n    while (opening_brackets_index < brackets_size)\
    \ {\n        size_t opening_brackets_index_next = opening_brackets_index + 1;\n\
    \        size_t closing_brackets_index_next = opening_brackets_index + 1;\n  \
    \      \n        if (opening_brackets_index_next == brackets_size) {\n       \
    \     opening_brackets_index_next = 0;\n        }\n        \n        while (closing_brackets_index\
    \ < closing_brackets_size) {\n            size_t closing_brackets_index_next =\
    \ closing_brackets_index + 1;\n            \n            if (closing_brackets_index_next\
    \ == closing_brackets_size) {\n                closing_brackets_index_next = 0;\n\
    \            }\n            \n            if (brackets[opening_brackets_index]\
    \ == brackets[closing_brackets_index]) {\n                opening_brackets_index\
    \ = opening_brackets_index_next;\n                closing_brackets_index = closing_brackets_index_next;\n\
    \            } else {\n                closing_brackets_index = closing_brackets_index_next;\n\
    \            }\n        }\n        opening_brackets_index = opening_brackets_index_next;\n\
    \        closing_brackets_index = closing_brackets_index_next;\n    }\n    \n\
    \    return result;\n}", "{\n\tfor (int i = 0; i < brackets.length(); i++)\n\t\
    {\n\t\tif (brackets[i] == '<')\n\t\t{\n\t\t\tfor (int j = i; j < brackets.length();\
    \ j++)\n\t\t\t{\n\t\t\t\tif (brackets[j] == '>')\n\t\t\t\t{\n\t\t\t\t\treturn\
    \ true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "{\n    bool result\
    \ = true;\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n        {\n            result = false;\n            break;\n      \
    \  }\n    }\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '>')\n        {\n            result = false;\n            break;\n      \
    \  }\n    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_index_next = 0;\n    size_t closing_brackets_index_next\
    \ = 0;\n    size_t opening_brackets_index_current = 0;\n    size_t closing_brackets_index_current\
    \ = 0;\n    size_t opening_brackets_index_previous = 0;\n    size_t closing_brackets_index_previous\
    \ = 0;\n    size_t opening_brackets_index_end = 0;\n    size_t closing_brackets_index_end\
    \ = 0;\n    size_t opening_brackets_index_end_previous = 0;\n    size_t closing_brackets_index_end_previous\
    \ = 0;\n    size_t opening_brackets_index_end_next = 0;\n    size_t closing_brackets_index_end_next\
    \ = 0;\n    size_t opening_brackets_index_end_current = 0;\n    size_t closing_brackets_index_end_current\
    \ = 0;\n    size_t opening_brackets_index_end_previous = 0;\n    size_t closing_brackets_index_end_previous\
    \ = 0;\n    size_t opening_brackets_index_end_end = 0;\n    size_t closing_brackets_index_end_end\
    \ = 0;\n    size_t opening_brackets_index_end_end_previous = 0;\n    size_t closing_brackets_index_end_end_previous\
    \ = 0;\n    size_t opening_brackets_index_end_end_next = 0;\n    size_t closing_brackets_index_end_end_next\
    \ = 0;\n    size_t opening_brackets_index_end_end_current = 0;\n    size_t closing_brackets_index_end_end_current\
    \ = 0;\n    size_t opening_brackets_index_end_end_previous = 0;\n    size_t closing_brackets_index_end_end_previous\
    \ = 0;\n    size_t opening_brackets_index_end_end_end = 0;\n    size_t closing_brackets_index_end_end_end\
    \ = 0;\n    size_t opening_brackets_index_end_end_end_previous = 0;\n    size_t\
    \ closing_brackets_index_end_end_end_previous = 0;\n    size_t opening_brackets_index_end_end_end_next\
    \ = 0;\n    size_t closing_brackets_index_end_end_end_next = 0;\n    size_t opening_brackets_index_end_end_end_current\
    \ = 0;\n    size_t closing_brackets_index_end_end_end_current = 0;\n    size_t\
    \ opening_brackets_index_end_end_end_previous = 0;\n    size_t closing_bra", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n        {\n            return false;\n        }\n    }\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != '>')\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while(i < len && j < len) {\n        char left\
    \ = brackets[i];\n        char right = brackets[j];\n        switch(left) {\n\
    \        case '<':\n            if(right != '<') {\n                result = false;\n\
    \                break;\n            }\n            ++i;\n            ++j;\n \
    \           break;\n        case '>':\n            if(right != '>') {\n      \
    \          result = false;\n                break;\n            }\n          \
    \  ++i;\n            ++j;\n            break;\n        default:\n            ++i;\n\
    \            ++j;\n            break;\n        }\n    }\n    return result;\n}",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '<')\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '<')\n        {\n            result =\
    \ false;\n            break;\n        }\n    }\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] != '>')\n        {\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis code does not compile. `brackets` should be `string`\
    \ not `char`. `brackets.length()` should be `brackets.length()-1`. `brackets[i]`\
    \ should be `brackets[i+1]`. `brackets[i+1]` should be `brackets[i+2]`. `brackets[i+2]`\
    \ should be `brackets[i+3]`. `brackets[i+3]` should be `brackets[i+4]`. `brackets[i+4]`\
    \ should be `brackets[i+5]`. `brackets[i+5]` should be `brackets[i+6]`. `brackets[i+6]`\
    \ should be `brackets[i+7]`. `brackets[i+7]` should be `brackets[i+8]`. `brackets[i+8]`\
    \ should be `brackets[i+9]`. `brackets[i+9]` should be `brackets[i+10]`. `brackets[i+10]`\
    \ should be `brackets[i+11]`. `brackets[i+11]` should be `brackets[i+12]`. `brackets[i+12]`\
    \ should be `brackets[i+13]`. `brackets[i+13]` should be `brackets[i+14]`. `brackets[i+14]`\
    \ should be `brackets[i+15]`. `brackets[i+15]` should be `brackets[i+16]`. `brackets[i+16]`\
    \ should be `brackets[i+17]`. `brackets[i+17]` should be `brackets[i+18]`. `brackets[i+18]`\
    \ should be `brackets[i+19]`. `brackets[i+19]` should be `brackets[i+20]`. `brackets[i+20]`\
    \ should be `brackets[i+21]`. `brackets[i+21]` should be `brackets[i+22]`. `brackets[i+22]`\
    \ should be `brackets[i+23]`. `brackets[i+23]` should be `brackets[i+24]`. `brackets[i+24]`\
    \ should be `brackets[i+25]`. `brackets[i+25]` should be `brackets[i+26]`. `brackets[i+26]`\
    \ should be `brackets[i+27]`. `brackets[i+27]` should be `brackets[i+28]`. `brackets[i+28]",
  "{\n    size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i < len;\
    \ ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n\tfor (int i = 0; i < brackets.length();\
    \ i++) {\n\t\tif (brackets[i] == '<') {\n\t\t\tif (brackets[i+1] == '>')\n\t\t\
    \t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "{\n    for(int i = 0; i <\
    \ brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n        {\n\
    \            if(brackets[i+1] == '>')\n                return true;\n        }\n\
    \    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n\tsize_t len = brackets.length();\n\t\
    size_t i;\n\tbool result = true;\n\tfor(i = 0; i < len; ++i)\n\t{\n\t\tchar c\
    \ = brackets[i];\n\t\tif(c == '>')\n\t\t{\n\t\t\tif(brackets[i+1] != '<')\n\t\t\
    \t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(c ==\
    \ '<')\n\t\t{\n\t\t\tif(brackets[i-1] != '>')\n\t\t\t{\n\t\t\t\tresult = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n                return true;\n \
    \       }\n    }\n    return false;\n}", "{\n    bool result = true;\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] != '<')\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != '>')\n        {\n            result = false;\n            break;\n      \
    \  }\n    }\n    return result;\n}", "{\n\tauto bracket = brackets.front();\n\t\
    auto brackets = brackets.back();\n\tauto opening_brackets = brackets.find_first_of(bracket);\n\
    \tauto closing_brackets = brackets.find_last_of(bracket);\n\t\n\tif (opening_brackets\
    \ == string::npos || closing_brackets == string::npos)\n\t{\n\t\treturn false;\n\
    \t}\n\t\n\tauto opening_char = brackets[opening_brackets];\n\tauto closing_char\
    \ = brackets[closing_brackets];\n\t\n\tif (opening_char != closing_char)\n\t{\n\
    \t\treturn false;\n\t}\n\t\n\tauto opening_bracket = brackets[opening_brackets\
    \ + 1];\n\tauto closing_bracket = brackets[closing_brackets - 1];\n\t\n\tif (opening_bracket\
    \ != closing_bracket)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets\
    \ = 0;\n    size_t closing_brackets = 0;\n    size_t i;\n    \n    for (i = 0;\
    \ i < brackets_size; ++i)\n    {\n        if (brackets[i] == '<')\n        {\n\
    \            ++opening_brackets;\n        }\n        else if (brackets[i] == '>')\n\
    \        {\n            ++closing_brackets;\n        }\n    }\n    \n    return\
    \ opening_brackets == closing_brackets;\n}", "{\n    size_t len = brackets.length();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i)\n    {\n      \
    \  char c = brackets[i];\n        if (c == '>')\n        {\n            if (i\
    \ < len - 1)\n            {\n                char next = brackets[i + 1];\n  \
    \              if (next != '<')\n                {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        else if (c == '<')\n        {\n            if (i > 0)\n     \
    \       {\n                char prev = brackets[i - 1];\n                if (prev\
    \ != '>')\n                {\n                    result = false;\n          \
    \          break;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '>')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n     \
    \   else if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '<')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `\"<<><>>\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"\
    <<><>>\"`. You just need to add one more `if` statement.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `\"<<><>>\"`. You just need to add one more `if`\
    \ statement.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"<<><>>\"`. You just\
    \ need to add one more `if` statement.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `\"<<><>>\"`. You just need to add one more `if` statement.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    bool result = false;\n\
    \    \n    while (i < brackets_size) {\n        char c = brackets[i];\n      \
    \  \n        if (c == '<') {\n            opening_brackets_size++;\n        }\n\
    \        else if (c == '>') {\n            closing_brackets_size++;\n        }\n\
    \        \n        i++;\n    }\n    \n    if (opening_brackets_size != closing_brackets_size)\
    \ {\n        result = false;\n    }\n    else {\n        for (j = 0; j < opening_brackets_size;\
    \ j++) {\n            char c = brackets[j];\n            \n            if (c ==\
    \ '<') {\n                k++;\n            }\n            else if (c == '>')\
    \ {\n                k--;\n            }\n            \n            if (k == 0)\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n    }\n    \n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    for(i = 0; i < len; ++i)\n    {\n        if(brackets[i] ==\
    \ '<')\n        {\n            if(brackets[i+1] != '>')\n            {\n     \
    \           return false;\n            }\n        }\n    }\n    return true;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] != brackets[brackets.length() - 1 - i])\n     \
    \   {\n            result = false;\n            break;\n        }\n    }\n   \
    \ return result;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n   \
    \ {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] ==\
    \ '>')\n            {\n                return true;\n            }\n        }\n\
    \    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    while(i < len) {\n \
    \       char c = brackets[i];\n        switch(c) {\n        case '<':\n      \
    \      if(brackets[j] == '>') {\n                j++;\n            } else {\n\
    \                result = false;\n            }\n            break;\n        case\
    \ '>':\n            if(brackets[j] == '<') {\n                j++;\n         \
    \   } else {\n                result = false;\n            }\n            break;\n\
    \        default:\n            result = false;\n            break;\n        }\n\
    \        i++;\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c\
    \ |>\nThis fails for `
  "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n  \
    \  {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    for(int i =\
    \ 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n    \
    \    {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n    size_t\
    \ len = brackets.length();\n    size_t i;\n    bool result = true;\n    for(i\
    \ = 0; i < len; ++i)\n    {\n        char c = brackets[i];\n        if(c == '>')\n\
    \        {\n            if(brackets[i+1] != '<')\n            {\n            \
    \    result = false;\n                break;\n            }\n            ++i;\n\
    \        }\n        else if(c == '<')\n        {\n            if(brackets[i-1]\
    \ != '>')\n            {\n                result = false;\n                break;\n\
    \            }\n            --i;\n        }\n    }\n    return result;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i;\n    for(i = 0; i <\
    \ len; ++i)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n                return true;\n        }\n    }\n    return false;\n\
    }", "{\n    size_t len = brackets.length();\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = true;\n    while (i < len) {\n        if (brackets[i]\
    \ == '<') {\n            if (j == i) {\n                result = false;\n    \
    \            break;\n            }\n            j = i;\n            i++;\n   \
    \     } else if (brackets[i] == '>') {\n            if (j == i) {\n          \
    \      result = false;\n                break;\n            }\n            j =\
    \ i;\n            i++;\n        } else {\n            i++;\n        }\n    }\n\
    \    return result;\n}", "{\n\tauto brackets_array = brackets.toCharArray();\n\
    \tfor (auto bracket = brackets_array.begin(); bracket != brackets_array.end();\
    \ ++bracket)\n\t{\n\t\tif (*bracket != '<')\n\t\t{\n\t\t\treturn false;\n\t\t\
    }\n\t\t++bracket;\n\t\twhile (*bracket != '>')\n\t\t{\n\t\t\t++bracket;\n\t\t\
    }\n\t\tif (*bracket != '>')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n     \
    \   if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for `<<><>>`\n<|/ c |>\n<| c |>\n: Yes, it does. `correct_bracketing` returns\
    \ `true` for `<<><>>`.\n<|/ c |>\n<| c |>\n: Yes, it does. `correct_bracketing`\
    \ returns `true` for `<<><>>`.\n<|/ c |>\n<| c |>\n: Yes, it does. `correct_bracketing`\
    \ returns `true` for `<<><>>`.\n<|/ c |>\n<| c |>\n: Yes, it does. `correct_bracketing`\
    \ returns `true` for `<<><>>`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't work. `correct_bracketing(\"\
    <<><>>\")` returns `true` when it should be `false`\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've fixed the code now.\n<|/ c |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n   \
    \     if(brackets[i] == '<')\n        {\n            if(brackets[i+1] == '>')\n\
    \            {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n \
    \   {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i\
    \ + 1] == '>')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n        else if(c == '<')\n        {\n            if(brackets[i+1]\
    \ == '<')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets = 0;\n    size_t closing_brackets\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    \n    while (i < brackets_size)\n\
    \    {\n        if (brackets[i] == '<')\n        {\n            opening_brackets++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            closing_brackets++;\n\
    \        }\n        i++;\n    }\n    \n    if (opening_brackets != closing_brackets)\n\
    \    {\n        return false;\n    }\n    \n    while (j < brackets_size)\n  \
    \  {\n        if (brackets[j] == '<')\n        {\n            closing_brackets--;\n\
    \        }\n        else if (brackets[j] == '>')\n        {\n            opening_brackets--;\n\
    \        }\n        j++;\n    }\n    \n    if (opening_brackets != closing_brackets)\n\
    \    {\n        return false;\n    }\n    \n    return true;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n   \
    \ {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1] !=\
    \ '>')\n            {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n\tauto brackets_array\
    \ = brackets.toCharArray();\n\tauto brackets_array_size = brackets_array.size();\n\
    \t\n\tfor (int i = 0; i < brackets_array_size; ++i)\n\t{\n\t\tauto opening_bracket\
    \ = brackets_array[i];\n\t\tauto closing_bracket = brackets_array[i+1];\n\t\t\n\
    \t\tif (opening_bracket != closing_bracket)\n\t\t{\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\t\n\treturn true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '>')\n        {\n            if(brackets[i\
    \ + 1] == '>')\n            {\n                return true;\n            }\n \
    \       }\n        else if(brackets[i] == '<')\n        {\n            if(brackets[i\
    \ + 1] == '<')\n            {\n                return true;\n            }\n \
    \       }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i;\n    bool result = true;\n    for(i = 0; i < len; ++i)\n    {\n\
    \        if(brackets[i] != '<')\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    for(i = len - 1; i >= 0; --i)\n    {\n\
    \        if(brackets[i] != '>')\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    return result;\n}", "{\n\tauto bracket\
    \ = brackets.front();\n\tauto brackets = brackets.back();\n\tauto opening_brackets\
    \ = brackets.find_first_of(bracket);\n\tauto closing_brackets = brackets.find_first_of(bracket);\n\
    \tauto opening_bracket = brackets.find_first_of(bracket);\n\tauto closing_bracket\
    \ = brackets.find_first_of(bracket);\n\tauto opening_brackets = brackets.find_first_of(bracket);\n\
    \tauto closing_brackets = brackets.find_first_of(bracket);\n\tauto opening_bracket\
    \ = brackets.find_first_of(bracket);\n\tauto closing_bracket = brackets.find_first_of(bracket);\n\
    \tauto opening_brackets = brackets.find_first_of(bracket);\n\tauto closing_brackets\
    \ = brackets.find_first_of(bracket);\n\tauto opening_bracket = brackets.find_first_of(bracket);\n\
    \tauto closing_bracket = brackets.find_first_of(bracket);\n\tauto opening_brackets\
    \ = brackets.find_first_of(bracket);\n\tauto closing_brackets = brackets.find_first_of(bracket);\n\
    \tauto opening_bracket = brackets.find_first_of(bracket);\n\tauto closing_bracket\
    \ = brackets.find_first_of(bracket);\n\tauto opening_brackets = brackets.find_first_of(bracket);\n\
    \tauto closing_brackets = brackets.find_first_of(bracket);\n\tauto opening_bracket\
    \ = brackets.find_first_of(bracket);\n\tauto closing_bracket = brackets.find_first_of(bracket);\n\
    \tauto opening_brackets = brackets.find_first_of(bracket);\n\tauto closing_brackets\
    \ = brackets.find_first_of(bracket);\n\tauto opening_bracket = brackets.find_first_of(bracket);\n\
    \tauto closing_bracket = brackets.find_first_of(bracket);\n\tauto opening_brackets\
    \ = brackets.find_first_of(bracket);\n\tauto closing_brackets = brackets.find_first_of(bracket);\n\
    \tauto opening_bracket = brackets.find_first_of(bracket);\n\tauto closing_bracket\
    \ = brackets.find_first_of(bracket);\n\tauto ", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code\
    \ doesn't work. `correct_bracketing(\"<<><>>\")` returns true.\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I've fixed it now.\n<|/ c |>\n<| a |>\n<code>",
  "{\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t n = 0;\n\
    \    size_t m = 0;\n    size_t n2 = 0;\n    size_t m2 = 0;\n    bool result =\
    \ true;\n    \n    while(i < brackets.length())\n    {\n        j = brackets.find(\"\
    <\", i);\n        k = brackets.find(\">\", i);\n        n = j - i;\n        m2\
    \ = k - i;\n        \n        if(n != m2)\n        {\n            result = false;\n\
    \        }\n        \n        i = j + 1;\n    }\n    \n    return result;\n}",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    bool result = true;\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                result = true;\n            }\n    \
    \        else\n            {\n                result = false;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n\tauto opening_brackets = brackets.split('<');\n\
    \tauto closing_brackets = brackets.split('>');\n\t\n\tfor(auto &opening_bracket\
    \ : opening_brackets)\n\t{\n\t\tauto closing_bracket = closing_brackets.find(opening_bracket);\n\
    \t\tif(closing_bracket == closing_brackets.end())\n\t\t\treturn false;\n\t\telse\n\
    \t\t\tclosing_brackets.erase(closing_bracket);\n\t}\n\t\n\treturn true;\n}", "{\n\
    \tauto brackets_iter = brackets.begin();\n\tauto brackets_end = brackets.end();\n\
    \twhile (brackets_iter != brackets_end)\n\t{\n\t\tauto opening_bracket = *brackets_iter;\n\
    \t\tauto closing_bracket = *(brackets_iter + 1);\n\t\tif (opening_bracket != closing_bracket)\n\
    \t\t\treturn false;\n\t\tbrackets_iter += 2;\n\t}\n\treturn true;\n}", "{\n  \
    \  size_t len = brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n   \
    \ bool result = true;\n    while (i < len && j < len) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[j] == '>') {\n                i++;\n   \
    \             j++;\n            } else {\n                result = false;\n  \
    \          }\n        } else if (brackets[i] == '>') {\n            if (brackets[j]\
    \ == '<') {\n                i++;\n                j++;\n            } else {\n\
    \                result = false;\n            }\n        } else {\n          \
    \  i++;\n            j++;\n        }\n    }\n    return result;\n}", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n\
    \        {\n            if(brackets[i+1] == '>')\n            {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != \"<\" && brackets[i] != \">\")\n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}", "{\n\tfor (int i = 0; i < brackets.length();\
    \ i++)\n\t{\n\t\tchar c = brackets[i];\n\t\tif (c == '<')\n\t\t{\n\t\t\tif (brackets[i+1]\
    \ == '>')\n\t\t\t\treturn true;\n\t\t}\n\t\telse if (c == '>')\n\t\t{\n\t\t\t\
    if (brackets[i-1] == '<')\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }", "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<')\n        {\n            if(brackets[i+1] == '>')\n            {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }", "{\n\tsize_t len = brackets.length();\n\tsize_t i = 0;\n\tsize_t j = 0;\n\t\
    bool result = true;\n\twhile(i < len && j < len) {\n\t\tif(brackets[i] == '<')\
    \ {\n\t\t\tif(brackets[j] == '>')\n\t\t\t\tresult = true;\n\t\t\telse\n\t\t\t\t\
    result = false;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(brackets[i] == '>')\
    \ {\n\t\t\tif(brackets[j] == '<')\n\t\t\t\tresult = true;\n\t\t\telse\n\t\t\t\t\
    result = false;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(brackets[i] == '<'\
    \ && brackets[j] == '>')\n\t\t\ti++;\n\t\telse if(brackets[i] == '>' && brackets[j]\
    \ == '<')\n\t\t\ti++;\n\t\telse if(brackets[i] == '<' && brackets[j] == '<')\n\
    \t\t\tj++;\n\t\telse if(brackets[i] == '>' && brackets[j] == '>')\n\t\t\tj++;\n\
    \t\telse\n\t\t\tresult = false;\n\t}\n\treturn result;\n}", "{\n    for(int i\
    \ = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n  \
    \      {\n            for(int j = i; j < brackets.length(); j++)\n           \
    \ {\n                if(brackets[j] == '>')\n                {\n             \
    \       return true;\n                }\n            }\n        }\n    }\n   \
    \ return false;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it on \"\
    <<><>>\"\n<|/ c |>\n<| c |>\nI tested it on \"<<><>>\" and it returned true.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it on \"<<><>>\" and it returned true.\n\
    <|/ c |>\n<| c |>\nI tested it on \"<<><>>\" and it returned true.\n<|/ c |>\n\
    <| c |>\nI tested it on \"<<><>>\" and it returned true.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>", "{\n    size_t brackets_size = brackets.length();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i)\n    {\n        if (brackets[i] == '<')\n            ++opening_brackets_size;\n\
    \        else if (brackets[i] == '>')\n            ++closing_brackets_size;\n\
    \    }\n    return opening_brackets_size == closing_brackets_size;\n}", "{\n \
    \   size_t len = brackets.length();\n    bool result = true;\n    for (size_t\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] != '<') result = false;\n  \
    \  }\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '>')\
    \ result = false;\n    }\n    return result;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while (i <\
    \ len) {\n        if (brackets[i] == '<') {\n            if (j < i) {\n      \
    \          result = false;\n            }\n            ++i;\n        } else if\
    \ (brackets[i] == '>') {\n            if (j > i) {\n                result = false;\n\
    \            }\n            ++i;\n        } else {\n            ++i;\n       \
    \ }\n    }\n    return result;\n}", "{\n    size_t len = brackets.length();\n\
    \    size_t i = 0;\n    size_t j = 0;\n    bool result = true;\n    while (i <\
    \ len) {\n        if (brackets[i] == '<') {\n            if (j < i) {\n      \
    \          string left = brackets.substr(0, j);\n                string right\
    \ = brackets.substr(j + 1, len - j);\n                if (left != right) {\n \
    \                   result = false;\n                }\n            }\n      \
    \      i++;\n            j++;\n        }\n        else if (brackets[i] == '>')\
    \ {\n            if (j > i) {\n                string left = brackets.substr(0,\
    \ i);\n                string right = brackets.substr(i + 1, len - i);\n     \
    \           if (left != right) {\n                    result = false;\n      \
    \          }\n            }\n            i++;\n            j++;\n        }\n \
    \       else if (brackets[i] == '(') {\n            if (j < i) {\n           \
    \     string left = brackets.substr(0, j);\n                string right = brackets.substr(j\
    \ + 1, len - j);\n                if (left != right) {\n                    result\
    \ = false;\n                }\n            }\n            i++;\n            j++;\n\
    \        }\n        else if (brackets[i] == ')') {\n            if (j > i) {\n\
    \                string left = brackets.substr(0, i);\n                string\
    \ right = brackets.substr(i + 1, len - i);\n                if (left != right)\
    \ {\n                    result = false;\n                }\n            }\n \
    \           i++;\n            j++;\n        }\n        else if (brackets[i] ==\
    \ '[') {\n            if (j < i) {\n                string left = brackets.substr(0,\
    \ j);\n                string right = brackets.substr(j + 1, len - j);\n     \
    \           if (left != right) {\n                    result = false;\n      \
    \          }\n            }\n            i++;\n            j++;\n        }\n \
    \       else if (brackets[i] == ']') {\n            if (j > i) {\n           \
    \     string left = brackets.substr(0, i);\n                string right = brackets.substr(i\
    \ + 1, len - i);\n                if (left != right) {\n                    result\
    \ = false;\n                }\n            }\n            i++;\n            j++;\n\
    \        }\n        else if (brackets[i] == '{') {\n            if (j < i) {\n\
    \                string left = brackets.substr(0, j);\n                string\
    \ right = brackets.substr(j + 1, len - j);\n                if (left != right)\
    \ {\n                    result = false;\n                }\n            }\n \
    \           i++;\n            j++;\n        }\n        else if (brackets[i] ==\
    \ '}') {\n            if (j > i) {\n                string left = brackets.substr(0,\
    \ i);\n                string right = brackets.substr(i + 1, len - i);\n     \
    \           if (left != right) {\n                    result = false;\n      \
    \          }\n            }\n            i++;\n            j++;\n        }\n \
    \       else if (brackets[i] == '<') {\n            if (j < i) {\n           \
    \     string left = brackets.substr(0, j);\n                string right = brackets.substr(j\
    \ + 1, len - j);\n                if (left != right) {\n                    ",
  "{\n    size_t len = brackets.length();\n    for(size_t i = 0; i < len; ++i)\n \
    \   {\n        char c = brackets[i];\n        if(c == '<')\n        {\n      \
    \      if(brackets[i+1] == '>')\n                return true;\n        }\n   \
    \ }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n\
    \    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '<')\n        {\n            if(brackets[i+1]\
    \ == '>')\n            {\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}", "{\n    bool result = true;\n    for(int i\
    \ = 0; i < brackets.length(); i++)\n    {\n        char opening = brackets[i];\n\
    \        char closing = brackets[brackets.length() - 1 - i];\n        if(opening\
    \ != '<' || closing != '>')\n        {\n            result = false;\n        \
    \    break;\n        }\n    }\n    return result;\n}", "{\n    for(int i = 0;\
    \ i < brackets.length(); i++)\n    {\n        if(brackets[i] == '<')\n       \
    \ {\n            if(brackets[i+1] == '>')\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}", "{\n\tauto opening_brackets\
    \ = brackets.split(\"<\");\n\tauto closing_brackets = brackets.split(\">\");\n\
    \t\n\tfor (auto &opening_bracket : opening_brackets)\n\t{\n\t\tauto closing_bracket\
    \ = closing_brackets.find(opening_bracket);\n\t\tif (closing_bracket == closing_brackets.end())\n\
    \t\t\treturn false;\n\t\telse\n\t\t\topening_bracket = opening_bracket.substr(0,\
    \ closing_bracket);\n\t}\n\t\n\treturn true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
