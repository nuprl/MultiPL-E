language: d
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        result = to_string(digit)\
    \ + result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvcg55ux.d(21): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmpmvcg55ux.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvcg55ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnug4eb3c.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnug4eb3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result += to_string(temp);\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzaog7pad.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaog7pad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c8_akji.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0c8_akji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp != 0) {\n    \
    \    temp = temp / base;\n        result += to_string(temp % base);\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n   \
    \ assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5b9jtrnl.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5b9jtrnl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\n/*\n    Convert decimal number to binary number.\n    \n    Input\
    \ numbers are less than 10.\n    \n    Output numbers are less than 10.\n    \n\
    \    Output numbers are in reverse order.\n    \n    >>> to_binary(8L)\n    \"\
    1000\"\n    >>> to_binary(7L)\n    \"111\"\n    >>> to_binary(6L)\n    \"110\"\
    \n    >>> to_binary(5L)\n    \"101\"\n    >>> to_binary(4L)\n    \"100\"\n   \
    \ >>> to_binary(3L)\n    \"10\"\n    >>> to_binary(2L)\n    \"1\"\n    >>> to_binary(1L)\n\
    \    \"0\"\n    \n*/\nstring to_binary(long x) \n{\n    string result = \"\";\n\
    \    long temp;\n    \n    while (x != 0) {\n        temp = x % 2;\n        result\
    \ += to_string(temp);\n        x /= 2;\n    }\n    \n    return result;\n}\n/*\n\
    \    Convert binary number to decimal number.\n    \n    Input numbers are less\
    \ than 10.\n    \n    Output numbers are less than 10.\n    \n    Output numbers\
    \ are in reverse order.\n    \n    >>> to_decimal(\"1000\")\n    8L\n    >>> to_decimal(\"\
    111\")\n    7L\n    >>> to_decimal(\"110\")\n    6L\n    >>> to_decimal(\"101\"\
    )\n    5L\n    >>> to_decimal(\"100\")\n    4L\n    >>> to_decimal(\"10\")\n \
    \   3L\n    >>> to_decimal(\"1\")\n    2L\n    >>> to_decimal(\"0\")\n    1L\n\
    \    \n*/\nlong to_decimal(string x) \n{\n    long result = 0;\n    \n    for\
    \ (auto it = x.rbegin(); it != x.rend(); ++it) {\n        result *= 2;\n     \
    \   result += *it - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ decimal number to hexadecimal number.\n    \n    Input numbers are less than\
    \ 10.\n    \n    Output numbers are less than 10.\n    \n    Output numbers are\
    \ in reverse order.\n    \n    >>> to_hex(8L)\n    \"0x1000\"\n    >>> to_hex(7L)\n\
    \    \"0x111\"\n    >>> to_hex(6L)\n    \"0x110\"\n    >>> to_hex(5L)\n    \"\
    0x101\"\n    >>> to_hex(4L)\n    \"0x100\"\n    >>> to_hex(3L)\n    \"0x10\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivzaxpax.d(106): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivzaxpax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jsgyyoe.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jsgyyoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long remainder = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(remainder) + result;\n    }\n    \n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        long remainder = temp % base;\n        temp = temp / base;\n \
    \       result = to_string(remainder) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        long remainder = temp % base;\n        temp = temp / base;\n\
    \        result = to_string(remainder) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        long remainder = temp % base;\n        temp = temp / base;\n \
    \       result = to_string(remainder) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj661j9e9.d(111): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj661j9e9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c8_akji.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0c8_akji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    \n    while (temp > 0) {\n        long r =\
    \ temp % base;\n        temp = temp / base;\n        result = char(r) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s9g2od7.d(23): Error: cannot implicitly convert expression `r`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s9g2od7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long digit = temp % base;\n        temp = temp / base;\n        result\
    \ = digit.to_string() + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0x2466k2.d(25): Error: no property `to_string` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0x2466k2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi24huv1w.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi24huv1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\twhile(x != 0)\n\t{\n\t\ttemp = x % base;\n\t\tresult\
    \ = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf0t0hyfv.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0t0hyfv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long xx = x;\n\
    \    string result = \"\";\n    while(base > 0)\n    {\n        long r = xx %\
    \ base;\n        xx = xx / base;\n        result = char(r) + result;\n       \
    \ base--;\n    }\n    while(base < 0)\n    {\n        long r = xx % base;\n  \
    \      xx = xx / base;\n        result = char(r) + result;\n        base++;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <math.h>\n#include <stdbool.h>\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9qzao7m.d(35): Error: declaration expected, not `<`

    /tmp/tmpd9qzao7m.d(48): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(49): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(50): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(51): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(52): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(53): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(54): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(55): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(56): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(57): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(58): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(59): Error: declaration expected, not `assert`

    /tmp/tmpd9qzao7m.d(60): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9qzao7m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6l0hlcn0.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6l0hlcn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        \n    \
    \    if (rem != 0) {\n            result += char(rem);\n        }\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpupeu53bg.d(27): Error: cannot implicitly convert expression `rem`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupeu53bg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h8ps6jx.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h8ps6jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        int digit = temp % base;\n        \n        if (digit > 0)\n  \
    \      {\n            result += digit;\n        }\n        \n        temp /= base;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_nyfb_6.d(24): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmpb_nyfb_6.d(28): Error: incompatible types for `(result) += (digit)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_nyfb_6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x != 0) {\n        remainder\
    \ = x % base;\n        result += char(remainder);\n        x /= base;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0h8knk8.d(22): Error: cannot implicitly convert expression `remainder`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0h8knk8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\n/*\n \
    \   Convert binary number to decimal number.\n    \n    Input binary number is\
    \ represented as a string.\n    \n    Output decimal number is represented as\
    \ a string.\n    \n    Input binary number is represented as a string.\n    \n\
    \    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented \nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwthvowmv.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwthvowmv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdjymdf1m.d(22): Error: C style cast illegal, use `cast(char)(''0''
    + temp)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjymdf1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2c55ulv.d(24): Error: undefined identifier `to_string`

    /tmp/tmpx2c55ulv.d(30): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2c55ulv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c8_akji.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0c8_akji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tlong rem = temp\
    \ % base;\n\t\ttemp = temp / base;\n\t\tresult = to_string(base) + result;\n\t\
    \tif (rem != 0) {\n\t\t\tresult = to_string(base) + result;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3_v2b4n2.d(24): Error: undefined identifier `to_string`

    /tmp/tmp3_v2b4n2.d(26): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_v2b4n2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result;\n    \n    temp = x;\n    \n    while (temp > 0) {\n      \
    \  temp = temp / base;\n        result = to_string(temp) + result;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyeg2aa9p.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyeg2aa9p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long rem = tmp % base;\n    string tmpstr =\
    \ to_string(tmp);\n    string rem = to_string(rem);\n    string tmpstr2 = \"\"\
    ;\n    string rem = \"\";\n    \n    for(int i = 0; i < tmpstr.length(); i++)\n\
    \    {\n        if(tmpstr[i] >= '0' && tmpstr[i] <= '9')\n        {\n        \
    \    tmpstr2 += tmpstr[i];\n        }\n    }\n    \n    for(int i = 0; i < rem.length();\
    \ i++)\n    {\n        if(rem[i] >= '0' && rem[i] <= '9')\n        {\n       \
    \     rem += rem[i];\n        }\n    }\n    \n    if(tmpstr2 == rem)\n    {\n\
    \        result += \"0\";\n    }\n    else\n    {\n        result += tmpstr2;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngqg9lct.d(20): Error: undefined identifier `to_string`

    /tmp/tmpngqg9lct.d(21): Error: undefined identifier `to_string`

    /tmp/tmpngqg9lct.d(21): Error: declaration `tmpngqg9lct.change_base.rem` is already
    defined

    /tmp/tmpngqg9lct.d(23): Error: declaration `tmpngqg9lct.change_base.rem` is already
    defined

    /tmp/tmpngqg9lct.d(25): Error: no property `length` for type `string`

    /tmp/tmpngqg9lct.d(29): Error: slice `tmpstr2` is not mutable

    /tmp/tmpngqg9lct.d(33): Error: no property `length` for type `long`

    /tmp/tmpngqg9lct.d(35): Error: only one index allowed to index `long`

    /tmp/tmpngqg9lct.d(35): Error: only one index allowed to index `long`

    /tmp/tmpngqg9lct.d(37): Error: only one index allowed to index `long`

    /tmp/tmpngqg9lct.d(41): Error: incompatible types for `(tmpstr2) == (rem)`: `string`
    and `long`

    /tmp/tmpngqg9lct.d(43): Error: slice `result` is not mutable

    /tmp/tmpngqg9lct.d(47): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngqg9lct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp = x;\n\
    \    string result = \"\";\n    while(temp > 0)\n    {\n        int digit = temp\
    \ % base;\n        result += digit;\n        temp /= base;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm,c |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp12w2lx03.d(27): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp12w2lx03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppl0bckvd.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl0bckvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp != 0)\n\t{\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprjd_8dv8.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjd_8dv8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jsgyyoe.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jsgyyoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long remainder = temp % base;\n        temp = temp / base;\n        \n\
    \        if (remainder > 0) {\n            result += char(remainder);\n      \
    \  }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpknf092ad.d(27): Error: cannot implicitly convert expression `remainder`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknf092ad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long result =\
    \ x;\n    long remainder;\n    \n    while (result > base) {\n        remainder\
    \ = result % base;\n        result = base;\n        base = remainder;\n    }\n\
    \    \n    while (result < base) {\n        remainder = result % base;\n     \
    \   result = base;\n        base = remainder;\n    }\n    \n    return to_string(result);\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgkxi727y.d(32): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkxi727y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkvae1n0n.d(21): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmpkvae1n0n.d(25): Error: incompatible types for `(result) += (digit)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvae1n0n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        long rem = temp % base;\n        temp = temp / base;\n       \
    \ result = to_string(base) + to_string(rem) + result;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2hzguuux.d(26): Error: undefined identifier `to_string`

    /tmp/tmp2hzguuux.d(26): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2hzguuux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long rem = tmp % base;\n    tmp = tmp / base;\n\
    \    while(!(tmp == 0))\n    {\n        result = to_string(tmp) + result;\n  \
    \      tmp = tmp / base;\n    }\n    result = to_string(tmp) + result;\n    if(rem\
    \ != 0)\n    {\n        result = to_string(tmp) + result;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rnz6lkc.d(23): Error: undefined identifier `to_string`

    /tmp/tmp9rnz6lkc.d(26): Error: undefined identifier `to_string`

    /tmp/tmp9rnz6lkc.d(29): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rnz6lkc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp != 0) {\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplk3z62lv.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk3z62lv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf5vwl0z.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf5vwl0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6uzg0tu.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6uzg0tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n\
    \    {\n        result = to_string(temp);\n    }\n    \n    while (temp > 0)\n\
    \    {\n        temp = temp / base;\n        \n        if (temp > 0)\n       \
    \ {\n            result = to_string(temp) + result;\n        }\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4sxi6c5.d(24): Error: undefined identifier `to_string`

    /tmp/tmpv4sxi6c5.d(33): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4sxi6c5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0) {\n        long digit = temp\
    \ % base;\n        result += digit;\n        temp /= base;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvwm295zr.d(21): Error: incompatible types for `(result) += (digit)`:
    `string` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwm295zr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h8ps6jx.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h8ps6jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    while\
    \ (x < 0) {\n        temp = abs(x) % base;\n        result += to_string(temp);\n\
    \        x = abs(x) / base;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5th2b30.d(22): Error: undefined identifier `to_string`

    /tmp/tmpt5th2b30.d(28): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5th2b30.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long rem =\
    \ temp % base;\n        temp = temp / base;\n        if(rem > 0)\n        {\n\
    \            result += char(rem);\n        }\n    }\n    return result;\n}\n/*\n\
    \    Convert number x to string representation in base base using radix base.\n\
    \    base numbers are less than 10.\n    >>> to_string(8L, 3L)\n    \"22\"\n \
    \   >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n    \"111\"\
    \n    \n*/\nstring to_string(long x, long base) \n{\n    string result = \"\"\
    ;\n    long temp = x;\n    while(temp > 0)\n    {\n        long rem = temp % base;\n\
    \        temp = temp / base;\n        if(rem > 0)\n        {\n            result\
    \ += char(rem);\n        }\n    }\n    return result;\n}\n/*\n    Convert number\
    \ x to string representation in base base using radix base.\n    base numbers\
    \ are less than 10.\n    >>> to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L,\
    \ 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ to_string(long x, int base) \n{\n    string result = \"\";\n    long temp =\
    \ x;\n    while(temp > 0)\n    {\n        long rem = temp % base;\n        temp\
    \ = temp / base;\n        if(rem > 0)\n        {\n            result += char(rem);\n\
    \        }\n    }\n    return result;\n}\n/*\n    Convert number x to string representation\
    \ in base base using radix base.\n    base numbers are less than 10.\n    >>>\
    \ to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n   \
    \ >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(long x, int radix)\
    \ \n{\n    string result = \"\";\n    long temp = x;\n    while(temp > 0)\n  \
    \  {\n        long rem = temp % radix;\n        temp = temp / radix;\n       \
    \ if(rem > 0)\n        {\n            result += char(rem);\n        }\n    }\n\
    \    return result;\n}\n/*\n    Convert number x to string representation in base\
    \ base using radix base.\n    base numbers are less than 10.\n    >>> to_string(8L,\
    \ 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring \nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz6tc68v0.d(120): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz6tc68v0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long tmp2 = base;\n    \n    while (true)\n\
    \    {\n        if (tmp2 > 10)\n        {\n            tmp2 /= 10;\n         \
    \   tmp += tmp2;\n        }\n        else\n        {\n            result += (char)(tmp\
    \ % base);\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjp52a00.d(30): Error: C style cast illegal, use `cast(char)(tmp
    % base)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjp52a00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvoodt371.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoodt371.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp != 0)\n    {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdszjrrpc.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdszjrrpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile (x > 0) {\n\t\tlong r = x % base;\n\t\tresult = to_string(base)\
    \ + result;\n\t\tx = x / base;\n\t\tbase = base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2qlnntk.d(21): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2qlnntk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    \n    while(tmp != 0)\n    {\n        long r\
    \ = tmp % base;\n        tmp = tmp / base;\n        result = to_string(base) +\
    \ result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_66ps47.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_66ps47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long d = base;\n    long r = 1;\n    \n    while\
    \ (n >= base) {\n        r = r * d;\n        n = n / base;\n    }\n    \n    r\
    \ = r * d;\n    \n    while (n > 0) {\n        result = char(r % 10) + result;\n\
    \        r = r / 10;\n        n = n - 1;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo5i3qgei.d(30): Error: cannot implicitly convert expression `r
    % 10L` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5i3qgei.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppl0bckvd.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl0bckvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp != 0) {\n\t\tresult = to_string(temp\
    \ % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5wwyx43.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5wwyx43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x /= base;\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsu1anfu.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsu1anfu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0)\n\t{\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0cdrcjt.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0cdrcjt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2mij8_jt.d(24): Error: undefined identifier `to_string`

    /tmp/tmp2mij8_jt.d(30): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mij8_jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    while (x != 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ok7ng1v.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ok7ng1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf5vwl0z.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf5vwl0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf5vwl0z.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf5vwl0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ujjk7ot.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ujjk7ot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        \n    \
    \    if (rem != 0) {\n            result += char(rem);\n        }\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpupeu53bg.d(27): Error: cannot implicitly convert expression `rem`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupeu53bg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgab87n5t.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgab87n5t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05h4o0aj.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05h4o0aj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tresult = to_string(temp\
    \ % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpup1r5jl2.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpup1r5jl2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long r = x;\n\
    \    string s = \"\";\n    while(base>0)\n    {\n        r = r*base;\n       \
    \ base = base-1;\n    }\n    while(base<0)\n    {\n        r = r / base;\n   \
    \     base = base+1;\n    }\n    while(base>0)\n    {\n        s = to_string(base)+s;\n\
    \        base = base-1;\n    }\n    while(base<0)\n    {\n        s = to_string(abs(base))+s;\n\
    \        base = base+1;\n    }\n    while(base>0)\n    {\n        s = to_string(abs(base))+s;\n\
    \        base = base-1;\n    }\n    return s;\n}\n/*\n    Convert a string to\
    \ integer.\n    base numbers are less than 10.\n    >>> to_int(\"22\")\n    22\n\
    \    >>> to_int(\"1000\")\n    1000\n    >>> to_int(\"111\")\n    111\n    \n\
    */\nlong to_int(string s) \n{\n    long r = 0;\n    for(int i=0; i<s.length();\
    \ i++)\n    {\n        r = r*10 + s[i] - '0';\n    }\n    return r;\n}\n/*\n \
    \   Convert a string to double.\n    base numbers are less than 10.\n    >>> to_double(\"\
    22\")\n    22\n    >>> to_double(\"1000\")\n    1000\n    >>> to_double(\"111\"\
    )\n    111\n    \n*/\ndouble to_double(string s) \n{\n    double r = 0;\n    for(int\
    \ i=0; i<s.length(); i++)\n    {\n        r = r*10 + s[i] - '0';\n    }\n    return\
    \ r;\n}\n/*\n    Convert a string to bool.\n    base numbers are less than 10.\n\
    \    >>> to_bool(\"22\")\n    True\n    >>> to_bool(\"1000\")\n    False\n   \
    \ >>> to_bool(\"111\")\n    False\n    \n*/\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxh420czm.d(31): Error: undefined identifier `to_string`

    /tmp/tmpxh420czm.d(36): Error: undefined identifier `to_string`

    /tmp/tmpxh420czm.d(41): Error: undefined identifier `to_string`

    /tmp/tmpxh420czm.d(60): Error: no property `length` for type `string`

    /tmp/tmpxh420czm.d(80): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxh420czm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp != 0) {\n    \
    \    temp = temp / base;\n        result += to_string(temp);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt67c7dmx.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt67c7dmx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        \n        if (temp == 0)\n       \
    \ {\n            result = result + \"0\";\n        }\n        else\n        {\n\
    \            result = result + \"1\";\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi85hf1bc.d(28): Error: invalid array operation `result + "0"` (possible
    missing [])

    /tmp/tmpi85hf1bc.d(32): Error: invalid array operation `result + "1"` (possible
    missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi85hf1bc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (temp == 0)\n        result = to_string(temp %\
    \ base) + result;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabjgytcy.d(23): Error: undefined identifier `to_string`

    /tmp/tmpabjgytcy.d(28): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabjgytcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (temp == 0)\n        result = to_string(temp %\
    \ base) + result;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabjgytcy.d(23): Error: undefined identifier `to_string`

    /tmp/tmpabjgytcy.d(28): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabjgytcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppl0bckvd.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl0bckvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile (x != 0)\n\t{\n\t\tlong r = x % base;\n\t\t\n\t\tif (r >\
    \ 0)\n\t\t\tresult = char(r + 48) + result;\n\t\t\n\t\tx = x / base;\n\t}\n\t\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk4401dpj.d(24): Error: cannot implicitly convert expression `r
    + 48L` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk4401dpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        temp = temp / base;\n        \n        if (temp == 0)\n      \
    \  {\n            result += \"0\";\n        }\n        else\n        {\n     \
    \       result += to_string(temp % base);\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplj1s28_i.d(28): Error: slice `result` is not mutable

    /tmp/tmplj1s28_i.d(32): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj1s28_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3dcjvgtx.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dcjvgtx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppl0bckvd.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl0bckvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long r = x;\n\
    \    string result = \"\";\n    \n    while (base > 0)\n    {\n        r = r /\
    \ base;\n        result = to_string(base) + result;\n        base = base * 10;\n\
    \    }\n    \n    if (r > 0)\n    {\n        result = to_string(base) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz56bxu4w.d(23): Error: undefined identifier `to_string`

    /tmp/tmpz56bxu4w.d(29): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz56bxu4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\tlong rem\
    \ = temp % base;\n\t\tresult = char(rem) + result;\n\t\ttemp /= base;\n\t}\n\t\
    \n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n   \
    \ assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp56oe0puu.d(24): Error: cannot implicitly convert expression `rem`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56oe0puu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnug4eb3c.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnug4eb3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi24huv1w.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi24huv1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphvla0fnr.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvla0fnr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        long mod = temp\
    \ % base;\n        temp = temp / base;\n        result = to_string(mod) + result;\n\
    \    }\n    return result;\n}\n/*\nChange numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, int base) \n{\n    string result = \"\";\n    long temp\
    \ = x;\n    while (temp > 0) {\n        long mod = temp % base;\n        temp\
    \ = temp / base;\n        result = to_string(mod) + result;\n    }\n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n\
    \    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring change_base(long\
    \ x, short base) \n{\n    string result = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        long mod = temp % base;\n        temp = temp / base;\n\
    \        result = to_string(mod) + result;\n    }\n    return result;\n}\n/*\n\
    Change numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string\
    \ result = \"\";\n    long temp = x;\n    while (temp > 0) {\n        long mod\
    \ = temp % base;\n        temp = temp / base;\n        result = to_string(mod)\
    \ + result;\n    }\n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, double base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        long mod = temp\
    \ % base;\n        temp = temp / base;\n\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_j9hqdce.d(115): Error: found `unittest` instead of statement

    /tmp/tmp_j9hqdce.d(132): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_j9hqdce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ujjk7ot.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ujjk7ot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = base;\n    \n    while (n > 0)\n    {\n\
    \        long r = n % m;\n        n /= m;\n        result += char(r + '0');\n\
    \    }\n    \n    return result;\n}\n/*\n    Convert binary number to decimal\
    \ number.\n    \n    Input binary number is a string containing only '0' and '1'.\n\
    \    \n    Output decimal number is a string containing only '0' and '1'.\n  \
    \  \n    Input binary number is a string containing only '0' and '1'.\n    \n\
    \    Output decimal number is a string containing only '0' and '1'.\n    \n  \
    \  Input binary number is a string containing only '0' and '1'.\n    \n    Output\
    \ decimal number is a string containing only '0' and '1'.\n    \n    Input binary\
    \ number is a string containing only '0' and '1'.\n    \n    Output decimal number\
    \ is a string containing only '0' and '1'.\n    \n    Input binary number is a\
    \ string containing only '0' and '1'.\n    \n    Output decimal number is a string\
    \ containing only '0' and '1'.\n    \n    Input binary number is a string containing\
    \ only '0' and '1'.\n    \n    Output decimal number is a string containing only\
    \ '0' and '1'.\n    \n    Input binary number is a string containing only '0'\
    \ and '1'.\n    \n    Output decimal number is a string containing only '0' and\
    \ '1'.\n    \n    Input binary number is a string containing only '0' and '1'.\n\
    \    \n    Output decimal number is a string containing only '0' and '1'.\n  \
    \  \n    Input binary number is a string containing only '0' and '1'.\n    \n\
    \    Output decimal number is a string containing only '0' and '1'.\n    \n  \
    \  Input binary number is a string containing only '0' and '1'.\n    \n    Output\
    \ decimal number is a string containing only '0' and '1'.\n    \n    Input binary\
    \ number is a string containing only '0' and '1'.\n    \n    Output decimal number\
    \ is a string containing only '0' and '1'.\n    \n    Input binary number is a\
    \ string containing only '0' and '1'.\n    \n    Output decimal number is a string\
    \ containing only '0' and '1'.\n    \n    Input binary number is a string containing\
    \ only '0' and '1'.\n    \n    Output decimal number is a string containing only\
    \ '0' and '1'.\n    \n    Input binary number is a string containing only '0'\
    \ and '1'.\n    \n    Output decimal number is a string containing only '0' and\
    \ '1'.\n    \n\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6aar9ek.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6aar9ek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnug4eb3c.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnug4eb3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += std.string.format(std.string.format(\"%0\" + std.string.format(base)\
    \ + \"d\", temp));\n        x /= base;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd7p3z_bz.d(22): Error: undefined identifier `string` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7p3z_bz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp = x;\n\twhile(temp > 0) {\n\t\tlong mod = temp % base;\n\t\
    \tresult += char(mod);\n\t\ttemp /= base;\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmtvenuxd.d(21): Error: cannot implicitly convert expression `mod`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtvenuxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnug4eb3c.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnug4eb3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdv190b9_.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdv190b9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6l0hlcn0.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6l0hlcn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9s_neils.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9s_neils.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6uzg0tu.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6uzg0tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(rem) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl1jumnw3.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1jumnw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\tlong\
    \ mod = temp % base;\n\t\t\n\t\tif (mod != 0) {\n\t\t\tresult += char(mod);\n\t\
    \t}\n\t\t\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprt5x0nou.d(27): Error: cannot implicitly convert expression `mod`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt5x0nou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile (x > 0)\n\t{\n\t\tlong r = x % base;\n\t\tresult = char(r\
    \ + 48) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppec4afmr.d(22): Error: cannot implicitly convert expression `r
    + 48L` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppec4afmr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6uzg0tu.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6uzg0tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    result += (temp % base)\
    \ + \"\";\n    \n    temp = x % base;\n    result += (temp / base) + \"\";\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5hj_8iu8.d(21): Error: incompatible types for `(temp % base) +
    ("")`: `long` and `string`

    /tmp/tmp5hj_8iu8.d(24): Error: incompatible types for `(temp / base) + ("")`:
    `long` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5hj_8iu8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvoodt371.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoodt371.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\ttemp = temp\
    \ / base;\n\t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwndl1sve.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwndl1sve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result += to_string(temp);\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzaog7pad.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaog7pad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        if (temp % base == 0) {\n            result += to_string(temp / base);\n\
    \        }\n        temp = temp / base;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl99nawk1.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl99nawk1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long res = 0;\n\
    \    string str = \"\";\n    while(x != 0)\n    {\n        res = (res * base)\
    \ + x % base;\n        x /= base;\n    }\n    str = to_string(res);\n    return\
    \ str;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_8tww2d.d(27): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_8tww2d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        result += digit;\n        temp /= base;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't\
    \ work. Try `change_base(8L, 3L)`.\n<|/ c |>\n<| c |>\n: It works for me. `change_base(8L,\
    \ 3L)` returns `\"22\"`.\n<|/ c |>\n<| c |>\n: It works for me too. `change_base(8L,\
    \ 3L)` returns `\"22\"`.\n<|/ c |>\n<| c |>\n: It works for me too. `change_base(8L,\
    \ 3L)` returns `\"22\"`.\n<|/ c |>\n<| c |>\n: It works for me too. `change_base(8L,\
    \ 3L)` returns `\"22\"`.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>\n\
    using namespace std;\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2gp_bho_.d(27): Error: declaration expected, not `<`

    /tmp/tmp2gp_bho_.d(30): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2gp_bho_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6uzg0tu.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6uzg0tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp % base);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp03hiqmvf.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03hiqmvf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp != 0)\n\t{\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzb08dvjv.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb08dvjv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdrb9z1y.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdrb9z1y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        \n        if (temp > 0) {\n            result\
    \ += to_string(temp);\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaeke4j1m.d(26): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaeke4j1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    while(!(tmp >> base))\n    {\n        result\
    \ += (char)(tmp % base);\n        tmp /= base;\n    }\n    result += (char)(tmp\
    \ % base);\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qdqn14i.d(21): Error: C style cast illegal, use `cast(char)(tmp
    % base)`

    /tmp/tmp8qdqn14i.d(24): Error: C style cast illegal, use `cast(char)(tmp % base)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qdqn14i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long tmp2 = base;\n    while(true)\n    {\n\
    \        if(tmp2 > 10)\n        {\n            tmp2 /= 10;\n            result\
    \ += (char)(tmp + '0');\n            tmp = 0;\n        }\n        else\n     \
    \   {\n            result += (char)(tmp + '0');\n            break;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmic03_jn.d(25): Error: C style cast illegal, use `cast(char)(tmp
    + ''0'')`

    /tmp/tmpmic03_jn.d(30): Error: C style cast illegal, use `cast(char)(tmp + ''0'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmic03_jn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(x != 0)\n    {\n        remainder\
    \ = x % base;\n        result += char(remainder);\n        x /= base;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmczhgp3u.d(23): Error: cannot implicitly convert expression `remainder`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmczhgp3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tint digit =\
    \ temp % base;\n\t\tresult = digits[digit] + result;\n\t\ttemp /= base;\n\t}\n\
    \t\n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n \
    \   assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6pbu12v.d(22): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmpb6pbu12v.d(23): Error: undefined identifier `digits`, did you mean variable
    `digit`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6pbu12v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        if (temp % base == 0) {\n            result += to_string(temp % base);\n\
    \        }\n        temp = temp / base;\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugpkhv54.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugpkhv54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jsgyyoe.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jsgyyoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        int digit = temp\
    \ % base;\n        temp = temp / base;\n        result = to_string(digit) + result;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwfbn_4xg.d(20): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmpwfbn_4xg.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfbn_4xg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        temp = temp / base;\n        result += to_string(temp);\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0koivzgh.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0koivzgh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long rem =\
    \ temp % base;\n        if(rem > 0)\n        {\n            result += char(rem);\n\
    \        }\n        temp /= base;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5hl9hzxf.d(24): Error: cannot implicitly convert expression `rem`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5hl9hzxf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile(x != 0)\n\t{\n\t\tlong temp = x % base;\n\t\tresult = to_string(temp)\
    \ + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu1127bzv.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu1127bzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        result += digit;\n        temp /= base;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyygqckf4.d(21): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmpyygqckf4.d(22): Error: incompatible types for `(result) += (digit)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyygqckf4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\tif (temp > 0)\n\t{\n\t\t\
    result += temp.to_string();\n\t\t\n\t\twhile (temp > 0)\n\t\t{\n\t\t\ttemp = temp\
    \ / base;\n\t\t\tresult += base.to_string();\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult\
    \ += temp.to_string();\n\t\t\n\t\twhile (temp < 0)\n\t\t{\n\t\t\ttemp = temp *\
    \ base;\n\t\t\tresult += base.to_string();\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_wx2npdu.d(24): Error: no property `to_string` for type `long`

    /tmp/tmp_wx2npdu.d(29): Error: no property `to_string` for type `long`

    /tmp/tmp_wx2npdu.d(34): Error: no property `to_string` for type `long`

    /tmp/tmp_wx2npdu.d(39): Error: no property `to_string` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wx2npdu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (x < base) {\n        result = to_string(x - base)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptw_mx5nn.d(23): Error: undefined identifier `to_string`

    /tmp/tmptw_mx5nn.d(28): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptw_mx5nn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3bwx_pod.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3bwx_pod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tresult = to_string(temp\
    \ % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpup1r5jl2.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpup1r5jl2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long rem = tmp % base;\n    tmp = tmp / base;\n\
    \    while(!(tmp == 0))\n    {\n        result = to_string(tmp) + result;\n  \
    \      tmp /= base;\n    }\n    result = to_string(tmp) + result;\n    if(rem\
    \ != 0)\n    {\n        result = to_string(tmp) + result;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq61e6vh3.d(23): Error: undefined identifier `to_string`

    /tmp/tmpq61e6vh3.d(26): Error: undefined identifier `to_string`

    /tmp/tmpq61e6vh3.d(29): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq61e6vh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\n/*\n \
    \   Convert binary number to decimal number.\n    \n    Input binary number x\
    \ is represented as a string.\n    \n    Output decimal number y is represented\
    \ as a string.\n    \n    Each character in x represents one digit in y.\n   \
    \ \n    Each digit in x is either 0 or 1.\n    \n    Output decimal number y is\
    \ represented as a string.\n    \n    Each character in x represents one digit\
    \ in y.\n    \n    Each digit in x is either 0 or 1.\n    \n    Output decimal\
    \ number y is represented as a string.\n    \n    Each character in x represents\
    \ one digit in y.\n    \n    Each digit in x is either 0 or 1.\n    \n    Output\
    \ decimal number y is represented as a string.\n    \n    Each character in x\
    \ represents one digit in y.\n    \n    Each digit in x is either 0 or 1.\n  \
    \  \n    Output decimal number y is represented as a string.\n    \n    Each character\
    \ in x represents one digit in y.\n    \n    Each digit in x is either 0 or 1.\n\
    \    \n    Output decimal number y is represented as a string.\n    \n    Each\
    \ character in x represents one digit in y.\n    \n    Each digit in x is either\
    \ 0 or 1.\n    \n    Output decimal number y is represented as a string.\n   \
    \ \n    Each character in x represents one digit in y.\n    \n    Each digit in\
    \ x is either 0 or 1.\n    \n    Output decimal number y is represented as a string.\n\
    \    \n    Each character in x represents one digit in y.\n    \n    Each digit\
    \ in x is either 0 or 1.\n    \n    Output decimal number y is represented as\
    \ a string.\n    \n    Each character in x represents one digit in y.\n    \n\
    \    Each digit in x is either 0 or 1.\n    \n    Output decimal number y is represented\
    \ as a string.\n    \n    Each character in x represents one digit in y.\n   \
    \ \n    Each digit in x is either 0 or 1.\n    \n    Output decimal number y is\
    \ represented as a string.\n    \n    Each character in x represents one digit\
    \ in y.\n    \n    Each digit in x is either 0 or 1.\n    \n    Output decimal\
    \ number y is represented as a string.\n    \n    Each character in x represents\
    \ one digit in y.\n    \n    \nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd454idej.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd454idej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (temp == 0)\n        result = to_string(temp %\
    \ base) + result;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfe1rsekv.d(23): Error: undefined identifier `to_string`

    /tmp/tmpfe1rsekv.d(28): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfe1rsekv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp != 0) {\n    \
    \    temp = temp / base;\n        result += to_string(temp);\n    }\n    \n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0xc342ow.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xc342ow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile(x != 0)\n\t{\n\t\tlong r = x / base;\n\t\tresult = to_string(r)\
    \ + result;\n\t\tx = x % base;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n  \
    \  alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1sq0mes7.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1sq0mes7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjl2aw6sm.d(22): Error: C style cast illegal, use `cast(char)(''0''
    + temp)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl2aw6sm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   result = to_string(temp % base) + result;\n        temp = temp / base;\n \
    \   }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcmj1mkbz.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmj1mkbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result += (char)('0' + temp % base);\n \
    \   }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpafs74z3n.d(24): Error: C style cast illegal, use `cast(char)(''0''
    + temp % base)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafs74z3n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long mod =\
    \ temp % base;\n        temp = temp / base;\n        if(mod != 0)\n        {\n\
    \            result += char(mod);\n        }\n    }\n    return result;\n}\n/*\n\
    \    Convert string to integer.\n    \n    input string must be in base 10.\n\
    \    \n    return integer value.\n    \n    exceptions:\n    \n    exception if\
    \ input string is not in base 10.\n    exception if input string contains non-numeric\
    \ characters.\n    exception if input string contains non-numeric characters.\n\
    \    exception if input string contains non-numeric characters.\n    \n*/\nlong\
    \ string_to_int(string str)\n{\n    long result = 0;\n    for(auto c : str)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            result += c -\
    \ '0';\n        }\n        else\n        {\n            throw runtime_error(\"\
    string_to_int: input string contains non-numeric characters.\");\n        }\n\
    \    }\n    return result;\n}\n/*\n    Convert integer to string.\n    \n    input\
    \ integer must be in base 10.\n    \n    return string value.\n    \n    exceptions:\n\
    \    \n    exception if input integer is not in base 10.\n    exception if input\
    \ integer is 0.\n    exception if input integer is negative.\n    exception if\
    \ input integer is greater than base 10.\n    exception if input integer is less\
    \ than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    \nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_t2k9s0q.d(48): Error: no identifier for declarator `c`

    /tmp/tmp_t2k9s0q.d(48): Error: expression expected, not `:`

    /tmp/tmp_t2k9s0q.d(48): Error: found `str` when expecting `;` following `for`
    condition

    /tmp/tmp_t2k9s0q.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_t2k9s0q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string\
    \ result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int\
    \ digit = temp % base;\n        temp = temp / base;\n        if(digit > 0)\n \
    \       {\n            result += digit;\n        }\n    }\n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n    \
    \    int digit = temp % base;\n        temp = temp / base;\n        if(digit >\
    \ 0)\n        {\n            result += digit;\n        }\n    }\n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string\
    \ result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int\
    \ digit = temp % base;\n        temp = temp / base;\n        if(digit > 0)\n \
    \       {\n            result += digit;\n        }\n    }\n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring \nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkowg16ir.d(124): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkowg16ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n\
    \    {\n        result += (temp % base) + \"\";\n    }\n    \n    temp = x % base;\n\
    \    \n    if (temp > 0)\n    {\n        result += (temp % base) + \"\";\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv420gw0e.d(24): Error: incompatible types for `(temp % base) +
    ("")`: `long` and `string`

    /tmp/tmpv420gw0e.d(31): Error: incompatible types for `(temp % base) + ("")`:
    `long` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv420gw0e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\ttemp = temp\
    \ / base;\n\t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa31zkenw.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa31zkenw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    while(base > 0)\n    {\n        if(tmp % base\
    \ == 0)\n        {\n            result += (char)('0' + base);\n            tmp\
    \ /= base;\n        }\n        else\n        {\n            result += (char)('0'\
    \ + base - tmp % base);\n            tmp /= base;\n        }\n        base--;\n\
    \    }\n    while(base < 0)\n    {\n        if(tmp % base == 0)\n        {\n \
    \           result += (char)('0' + base);\n            tmp /= base;\n        }\n\
    \        else\n        {\n            result += (char)('0' + base + tmp % base);\n\
    \            tmp /= base;\n        }\n        base++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpko4kebzv.d(23): Error: C style cast illegal, use `cast(char)(''0''
    + base)`

    /tmp/tmpko4kebzv.d(28): Error: C style cast illegal, use `cast(char)(''0'' + base
    - tmp % base)`

    /tmp/tmpko4kebzv.d(37): Error: C style cast illegal, use `cast(char)(''0'' + base)`

    /tmp/tmpko4kebzv.d(42): Error: C style cast illegal, use `cast(char)(''0'' + base
    + tmp % base)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpko4kebzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        if (temp % base == 0)\n        {\n            result += to_string(temp\
    \ / base);\n        }\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    long\
    \ temp;\n    string result = \"\";\n    \n    temp = x;\n    \n    while (temp\
    \ != 0)\n    {\n        if (temp % base == 0)\n        {\n            result +=\
    \ to_string(temp / base);\n        }\n        temp = temp / base;\n    }\n   \
    \ \n    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, short base) \n{\n    long temp;\n    string result = \"\"\
    ;\n    \n    temp = x;\n    \n    while (temp != 0)\n    {\n        if (temp %\
    \ base == 0)\n        {\n            result += to_string(temp / base);\n     \
    \   }\n        temp = temp / base;\n    }\n    \n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    long\
    \ temp;\n    string result = \"\";\n    \n    temp = x;\n    \n    while (temp\
    \ != 0)\n    {\n        if (temp % base == 0)\n        {\n            result +=\
    \ to_string(temp / base);\n        }\n        temp = temp / base;\n    }\n   \
    \ \n    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> \nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpffrm3_ae.d(123): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpffrm3_ae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (x < base)\n    {\n        result = to_string(x\
    \ - base) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzmaeqba8.d(24): Error: undefined identifier `to_string`

    /tmp/tmpzmaeqba8.d(30): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmaeqba8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n\
    \    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_nglcbba.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_nglcbba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        result += char((digit < 10) ? digit + '0' : digit + 'a'\
    \ - 10);\n        temp /= base;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n\
    \    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) ==\
    \ \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7obn6e_.d(21): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmph7obn6e_.d(22): Error: cannot implicitly convert expression `digit < 10
    ? digit + 48 : digit + 97 - 10` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7obn6e_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long tmp = x;\n\
    \    string res = \"\";\n    \n    while (tmp > 0) {\n        long r = tmp % base;\n\
    \        tmp = tmp / base;\n        res = char(r) + res;\n    }\n    \n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5efxv80f.d(23): Error: cannot implicitly convert expression `r`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5efxv80f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6uzg0tu.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6uzg0tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\twhile (temp > 0) {\n\t\t\
    result = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\t\
    while (result != \"0\" && result != \"1\") {\n\t\tresult = to_string(x - temp\
    \ * base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaldbkicw.d(23): Error: undefined identifier `to_string`

    /tmp/tmpaldbkicw.d(28): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaldbkicw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3dcjvgtx.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dcjvgtx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp != 0)\n\t{\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzb08dvjv.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb08dvjv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n  \
    \  assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\"\
    );\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6l0hlcn0.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6l0hlcn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdjymdf1m.d(22): Error: C style cast illegal, use `cast(char)(''0''
    + temp)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjymdf1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\twhile (x != 0)\n\t{\n\t\tlong r = x % base;\n\t\tresult = char(r\
    \ + 48) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb48cilv4.d(22): Error: cannot implicitly convert expression `r
    + 48L` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb48cilv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp == 0)\n\
    \    {\n        result = \"0\";\n    }\n    else\n    {\n        result = to_string(temp);\n\
    \    }\n    \n    temp = x % base;\n    \n    if (temp > 0)\n    {\n        result\
    \ += \"0\";\n    }\n    \n    result += \"0\";\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L)\
    \ == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qia3w2w.d(28): Error: undefined identifier `to_string`

    /tmp/tmp1qia3w2w.d(35): Error: slice `result` is not mutable

    /tmp/tmp1qia3w2w.d(38): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qia3w2w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long mod = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(mod) + result;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuzwe0qui.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuzwe0qui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        long r = temp %\
    \ base;\n        temp = temp / base;\n        result = to_string(r) + result;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37vy0s90.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37vy0s90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += (char)('0' + temp);\n        x = x / base;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpru5fomwh.d(22): Error: C style cast illegal, use `cast(char)(''0''
    + temp)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpru5fomwh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp = x;\n\twhile (temp > 0) {\n\t\tlong r = temp % base;\n\t\
    \ttemp = temp / base;\n\t\tresult = to_string(r) + result;\n\t}\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1cg5647q.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1cg5647q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf5vwl0z.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf5vwl0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdrb9z1y.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdrb9z1y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long tmp = x;\n    long rem = tmp % base;\n    long quotient =\
    \ tmp / base;\n    \n    while(quotient != 0)\n    {\n        if(rem < base)\n\
    \        {\n            result += (char)(quotient + '0');\n            rem = rem\
    \ + base;\n        }\n        else\n        {\n            result += (char)(quotient\
    \ + 'A' - '0');\n            rem = rem - base;\n        }\n        quotient =\
    \ quotient / base;\n    }\n    \n    if(rem > 0)\n    {\n        result += (char)(rem\
    \ + '0');\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_0pmwvo.d(26): Error: C style cast illegal, use `cast(char)(quotient
    + ''0'')`

    /tmp/tmp7_0pmwvo.d(31): Error: C style cast illegal, use `cast(char)(quotient
    + ''A'' - ''0'')`

    /tmp/tmp7_0pmwvo.d(39): Error: C style cast illegal, use `cast(char)(rem + ''0'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_0pmwvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        result += char(temp % base);\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcvi_qie9.d(25): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcvi_qie9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   if (temp % base == 0) {\n            result += to_string(temp / base);\n \
    \       }\n        temp = temp / base;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dx42p43.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dx42p43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf5vwl0z.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf5vwl0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0)\n    {\n        temp = x %\
    \ base;\n        result += to_string(temp);\n        x = x / base;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ftakrus.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ftakrus.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf5vwl0z.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf5vwl0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi24huv1w.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi24huv1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n \
    \   {\n        temp = temp / base;\n        \n        if (temp == 0)\n       \
    \ {\n            result += \"0\";\n        }\n        else\n        {\n      \
    \      result += to_string(temp % base);\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjlr6w61w.d(28): Error: slice `result` is not mutable

    /tmp/tmpjlr6w61w.d(32): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjlr6w61w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    long temp2 = base;\n    while(temp > 0)\n \
    \   {\n        temp = temp % base;\n        result = to_string(temp) + result;\n\
    \        temp2 = temp2;\n    }\n    while(temp2 > 0)\n    {\n        temp2 = temp2\
    \ % base;\n        result = to_string(temp2) + result;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjaz64ln.d(23): Error: undefined identifier `to_string`

    /tmp/tmpzjaz64ln.d(29): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjaz64ln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6uzg0tu.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6uzg0tu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\t\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4te07940.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4te07940.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        if (temp % base == 0) {\n            result += to_string(temp / base);\n\
    \        }\n        temp = temp / base;\n    }\n    \n    return result;\n}\n\
    /*\n    Convert string to integer.\n    \n    input string must be in base 10.\n\
    \    \n    return integer number.\n    \n    exception:\n        when input string\
    \ is not in base 10.\n    \n*/\nlong to_int(string str) \n{\n    long result =\
    \ 0;\n    \n    foreach (char c in str) {\n        result += to_int(c) * pow(10,\
    \ str.length() - 1 - str.length() % 2);\n    }\n    \n    return result;\n}\n\
    /*\n    Convert integer to string.\n    \n    input integer must be in base 10.\n\
    \    \n    return string in base 10.\n    \n    exception:\n        when input\
    \ integer is not in base 10.\n    \n*/\nstring to_string(long x) \n{\n    string\
    \ result = \"\";\n    \n    while (x > 0) {\n        result += to_string(x%10);\n\
    \        x /= 10;\n    }\n    \n    return result;\n}\n/*\n    Convert integer\
    \ to string.\n    \n    input integer must be in base 10.\n    \n    return string\
    \ in base 10.\n    \n    exception:\n        when input integer is not in base\
    \ 10.\n    \n*/\nstring to_string(long x, int base) \n{\n    string result = \"\
    \";\n    \n    while (x > 0) {\n        result += to_string(x%base, base);\n \
    \       x /= base;\n    }\n    \n    return result;\n}\n/*\n    Convert integer\
    \ to string.\n    \n    input integer must be in base 10.\n    \n    return string\
    \ in base 10.\n    \n    exception:\n        when input integer is not in base\
    \ 10.\n    \n*/\nstring to_string(long x, int base, int digits) \n{\n    string\
    \ result = \"\";\n    \n    while (x > 0) {\n        result += to_string(x%base,\
    \ base, digits);\n        x /= base;\n    }\n    \n    return result;\n}\n/*\n\
    \    Convert integer to string.\n    \n    input integer must be in base 10.\n\
    \    \n    return string in base 10.\n    \n    exception:\n        when input\
    \ integer is not in base 10.\n    \n*/\nstring to_string(long x, int base, int\
    \ digits, int precision) \n{\n    string result = \"\";\n    \n    while (x >\
    \ 0) {\n        result += to_string(x%base, base, digits, precision);\n      \
    \  x /= base;\n    }\n    \n    return result;\n\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqdjifkt2.d(46): Error: found `in` when expecting `;`

    /tmp/tmpqdjifkt2.d(140): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdjifkt2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp == 0)\n\
    \    {\n        result += \"0\";\n    }\n    else\n    {\n        result += (temp\
    \ % base) + \"\";\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp0i6xsih.d(24): Error: slice `result` is not mutable

    /tmp/tmpp0i6xsih.d(28): Error: incompatible types for `(temp % base) + ("")`:
    `long` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0i6xsih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while (temp > 0) {\n        long mod = temp\
    \ % base;\n        result = to_string(mod) + result;\n        temp = temp / base;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6ljwe9w.d(21): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6ljwe9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        result += digit;\n        temp /= base;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyygqckf4.d(21): Error: cannot implicitly convert expression `temp
    % base` of type `long` to `int`

    /tmp/tmpyygqckf4.d(22): Error: incompatible types for `(result) += (digit)`: `string`
    and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyygqckf4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphvla0fnr.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvla0fnr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3bwx_pod.d(25): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3bwx_pod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x>0)\n    {\n        remainder\
    \ = x % base;\n        x /= base;\n        result += char(remainder);\n    }\n\
    \    \n    return result;\n}\n/*\n    Convert a string to integer.\n    \n   \
    \ input string must be in base 10 and only contain digits.\n    \n    returns\
    \ 0 if the string cannot be converted to a number.\n    returns -1 if the string\
    \ is not a valid number.\n    returns number if the string is a valid number.\n\
    \    \n*/\nlong string_to_int(string str)\n{\n    long result = 0;\n    \n   \
    \ foreach(char c in str)\n    {\n        result += char_to_int(c);\n    }\n  \
    \  \n    return result;\n}\n/*\n    Convert a string to integer.\n    \n    input\
    \ string must be in base 10 and only contain digits.\n    \n    returns 0 if the\
    \ string cannot be converted to a number.\n    returns -1 if the string is not\
    \ a valid number.\n    returns number if the string is a valid number.\n    \n\
    */\nlong string_to_int(string str, int base)\n{\n    long result = 0;\n    \n\
    \    foreach(char c in str)\n    {\n        result += char_to_int(c, base);\n\
    \    }\n    \n    return result;\n}\n/*\n    Convert a string to integer.\n  \
    \  \n    input string must be in base 10 and only contain digits.\n    \n    returns\
    \ 0 if the string cannot be converted to a number.\n    returns -1 if the string\
    \ is not a valid number.\n    returns number if the string is a valid number.\n\
    \    \n*/\nlong string_to_int(string str, int base, int radix)\n{\n    long result\
    \ = 0;\n    \n    foreach(char c in str)\n    {\n        result += char_to_int(c,\
    \ base, radix);\n    }\n    \n    return result;\n}\n/*\n    Convert a string\
    \ to integer.\n    \n    input string must be in base 10 and only contain digits.\n\
    \    \n    returns 0 if the string cannot be converted to a number.\n    returns\
    \ -1 if the string is not a valid number.\n    returns number if the string is\
    \ a valid number.\n    \n*/\nlong string_to_int(string str, int radix)\n{\n  \
    \  long result = 0;\n    \n    foreach(char c in str)\n    {\n        result +=\
    \ char_to_int(c, radix);\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ a string to integer.\n    \n    input string must be in base 10 and only contain\
    \ digits.\n    \n    returns 0 if the string cannot be converted to a number.\n\
    \    returns -1 if the string is not a valid number.\n    returns number if the\
    \ string is a valid number.\n    \n*/\nlong string_to_int(string str)\n{\nunittest\n\
    {\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\"\
    );\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L)\
    \ == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0h2k1xg3.d(43): Error: found `in` when expecting `;`

    /tmp/tmp0h2k1xg3.d(64): Error: found `in` when expecting `;`

    /tmp/tmp0h2k1xg3.d(85): Error: found `in` when expecting `;`

    /tmp/tmp0h2k1xg3.d(106): Error: found `in` when expecting `;`

    /tmp/tmp0h2k1xg3.d(125): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0h2k1xg3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi24huv1w.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi24huv1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tlong rem = temp\
    \ % base;\n\t\tresult = char(rem) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbxjz31fd.d(23): Error: cannot implicitly convert expression `rem`
    of type `long` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxjz31fd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2mij8_jt.d(24): Error: undefined identifier `to_string`

    /tmp/tmp2mij8_jt.d(30): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mij8_jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0)\n    {\n        result = to_string(temp % base) + result;\n        temp =\
    \ temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2c55ulv.d(24): Error: undefined identifier `to_string`

    /tmp/tmpx2c55ulv.d(30): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2c55ulv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long n = x;\n    long r = 1;\n    long m = 1;\n    long temp;\n\
    \    \n    while (n > 0)\n    {\n        temp = n % base;\n        result += to_string(temp);\n\
    \        n = n / base;\n    }\n    \n    while (m > 0)\n    {\n        temp =\
    \ m % base;\n        result += to_string(temp);\n        m = m / base;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5em1jdaj.d(26): Error: undefined identifier `to_string`

    /tmp/tmp5em1jdaj.d(33): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5em1jdaj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\twhile (temp > 0)\n\t{\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx10zw1gr.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx10zw1gr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n\
    \    {\n        result += to_string(temp);\n    }\n    \n    temp = x % base;\n\
    \    \n    if (temp > 0)\n    {\n        result += to_string(temp);\n    }\n \
    \   \n    return result;\n}\n/*\n    Convert a string to a number.\n    \n   \
    \ Input string must be in decimal or hexadecimal format.\n    \n    Input string\
    \ must be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n\
    \    \n    Input string must be in base 10 or 16.\n    \n    Input string must\
    \ be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n   \
    \ \n    Input string must be in base 10 or 16.\n    \n    Input string must be\
    \ in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n\
    \    Input string must be in base 10 or 16.\n    \n    Input string must be in\
    \ base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n   \
    \ Input string must be in base 10 or 16.\n    \n    Input string must be in base\
    \ 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input\
    \ string must be in base 10 or 16.\n    \n    Input string must be in base 10\
    \ or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input string\
    \ must be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n\
    \    \n    Input string must be in base 10 or 16.\n    \n    Input string must\
    \ be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n   \
    \ \n    Input string must be in base 10 or 16.\n    \n    Input string must be\
    \ in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n\
    \    Input string must be in base 10 or 16.\n    \n    Input string must be in\
    \ base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n   \
    \ Input string must be in base 10 or 16.\n    \n    Input string must be in base\
    \ 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input\
    \ string must be in base 10 or 16.\n    \n    Input string must be in base 10\
    \ or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input string\
    \ must be in base 10 or 16.\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s9snhib.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s9snhib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string result = \"\";\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
    \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
    \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
    \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
    \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
    \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
    \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp0sh29e3.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0sh29e3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n\tstring result =\
    \ \"\";\n\tlong temp = x;\n\twhile (temp > 0) {\n\t\tlong mod = temp % base;\n\
    \t\tresult = char((mod < 10 ? mod + '0' : mod + 'A' - 10) + result);\n\t\ttemp\
    \ /= base;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdddy_9nx.d(21): Error: incompatible types for `(mod < cast(long)10
    ? mod + cast(long)cast(int)''0'' : mod + cast(long)cast(int)''A'' - cast(long)10)
    + (result)`: `long` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdddy_9nx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtq6e02f.d(24): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtq6e02f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164270
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    long temp;\n \
    \   string res = \"\";\n    \n    temp = x % base;\n    \n    while (temp != 0)\
    \ {\n        res = to_string(temp) + res;\n        temp = x / base;\n    }\n \
    \   \n    return res;\n}\nunittest\n{\n    alias candidate = change_base;\n\n\
    \    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl5uaakfx.d(23): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5uaakfx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n     \
    \   result = to_string(temp % base) + result;\n        temp = temp / base;\n \
    \   }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = change_base;\n\
    \n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"\
    100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcmj1mkbz.d(22): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmj1mkbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp >\
    \ 0) {\n        result = to_string(temp % base) + result;\n        temp = temp\
    \ / base;\n    }\n    \n    if (temp == 0) {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps2umwwna.d(23): Error: undefined identifier `to_string`

    /tmp/tmps2umwwna.d(28): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps2umwwna.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, long base) \n{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp > 0)\n    {\n\
    \        int digit = temp % base;\n        temp = temp / base;\n        result\
    \ = digits[digit] + result;\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ string representation of number to integer number.\n    \n    input string representation\
    \ must be in base 10.\n    \n    return integer number after conversion.\n   \
    \ \n    Exceptions:\n        Exception if string representation is not in base\
    \ 10.\n        Exception if string representation is empty or contains non-numeric\
    \ characters.\n    \n*/\nlong string_to_int(string str) \n{\n    long result =\
    \ 0;\n    \n    if (str.length() == 0)\n        throw new Exception(\"String representation\
    \ is empty.\");\n    \n    for (int i = 0; i < str.length(); i++)\n    {\n   \
    \     char c = str[i];\n        if (c < '0' || c > '9')\n            throw new\
    \ Exception(\"String representation contains non-numeric characters.\");\n   \
    \     \n        result = result * 10 + c - '0';\n    }\n    \n    return result;\n\
    }\n/*\n    Convert integer number to string representation.\n    \n    input integer\
    \ number must be in base 10.\n    \n    return string representation of integer\
    \ number after conversion.\n    \n    Exceptions:\n        Exception if integer\
    \ number is not in base 10.\n        Exception if integer number is 0.\n    \n\
    */\nstring int_to_string(long x) \n{\n    if (x == 0)\n        throw new Exception(\"\
    Integer number is 0.\");\n    \n    string result = \"\";\n    \n    while (x\
    \ > 0)\n    {\n        int digit = x % 10;\n        x = x / 10;\n        result\
    \ = digits[digit] + result;\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ integer number to string representation.\n    \n    input integer number must\
    \ be in base 10.\n    \n    return string representation of integer number after\
    \ conversion.\n    \n    Exceptions:\n        Exception if integer number is not\
    \ in base 10.\n        Exception if integer number is 0.\n    \n*/\nstring int_to_string_base(long\
    \ x, long base) \n{\n    if (x == 0)\n        throw new Exception(\"Integer number\
    \ is 0.\");\n    \n    string result = \"\";\n    \n    while (x > 0)\n    {\n\
    \        int digit = x % base;\n        x = x / base;\n        result = digits[digit]\
    \ + result;\n    }\n    \n    return result;\n}\n/*\n    Convert integer number\
    \ to string representation.\n    \n    input integer number must be in base 10.\n\
    \    \n    return string representation of integer number after conversion.\n\
    \    \n    Exceptions:\n        Exception if integer number is not in base 10.\n\
    \        Exception if integer number is 0.\n    \n\nunittest\n{\n    alias candidate\
    \ = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L,\
    \ 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L,\
    \ 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L,\
    \ 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L,\
    \ 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L,\
    \ 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L,\
    \ 8L) == \"7\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsuud2saw.d(116): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsuud2saw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164271
