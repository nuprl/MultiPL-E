name: HumanEval_69_search
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a non-empty\
  \ list of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>> search([4L,\
  \ 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
  \ 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong search(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i\
    \ = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n \
    \           maxVal = lst[i];\n            maxCount = 1;\n        }\n        else\
    \ if(lst[i] == maxVal)\n        {\n            maxCount++;\n        }\n    }\n\
    \    return maxVal == 0 ? -1 : maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n \
    \       if(lst[i] > 0)\n        {\n            freq++;\n            max = std.max(max,\
    \ lst[i]);\n        }\n    }\n    return std.max(freq > max ? freq : -1, max);\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not the correct answer.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n, thanks\
    \ for pointing that out. I've fixed the code.\n<|/ c |>\n<| c |>\n, I've fixed\
    \ the code again. Now it works as expected.\n<|/ c |>\n<| c |>\n, I've fixed the\
    \ code again. Now it works as expected.\n<|/ c |>\n<| c |>\n, I've fixed the code\
    \ again. Now it works as expected.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n            {\n                max = lst[i];\n      \
    \      }\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n<|/\
    \ a tags=c#,algorithm,search |>\n<| c |>\nThis solution does not work if there\
    \ are negative numbers in the list.\n<|/ c |>\n<| c |>\nThis solution does not\
    \ work if there are negative numbers in the list.\n<|/ c |>\n<| a tags=c#,algorithm,search\
    \ |>\n<code>\npublic int Search(int arr[], int n)\n{\n    int max = arr[0];\n\
    \    int freq = 0;\n    for (int i = 1; i < n; i++)\n    {\n        if (arr[i]\
    \ > max)\n        {\n            max = arr[i];\n            freq = 1;\n      \
    \  }\n        else if (arr[i] == max)\n        {\n            freq++;\n      \
    \  }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\npublic int Search(int arr[], int n)\n{\n    int max\
    \ = arr[0];\n    int freq = 0;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   if (arr[i] > max)\n        {\n            max = arr[i];\n            freq\
    \ = 1;\n        }\n        else if (arr[i] == max)\n        {\n            freq++;\n\
    \        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n<|/ a tags=c#,algorithm,search\
    \ |>\n<| a tags=c#,algorithm,search |>\n<code>\npublic int Search(int arr[], int\
    \ n)\n{\n    int max = arr[0];\n    int freq = 0;\n    for (int i = 1; i < n;\
    \ i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            freq = 1;\n        }\n        else if (arr[i] == max)\n        {\n\
    \            freq++;\n        }\n    }\n    return freq > max ? -1 : max;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic int Search(int arr[],\
    \ int n)\n{\n    int max = arr[0];\n    int freq = 0;\n    for (int i = 1; i <\
    \ n; i++)\n    {\n        if (arr[i] > max)\n        {\n            max = arr[i];\n\
    \            freq = 1;\n        }\n        else if (arr[i] == max)\n        {\n\
    \            freq++;\n        }\n    }\n    return freq > max ? -1 : max;\n}\n\
    </code>\n<|/ a tags=c#,algorithm,search |>\n", "{\n    long max = 0;\n    long\
    \ freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(lst[i] > max)\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    return\
    \ (freq > max) ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers in the list.\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Can you give an example where it doesn't work?\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n<|/ c |>\n<| c\
    \ |>\nIt works for me. Can you give an example where it doesn't work?\n<|/ c |>\n\
    <| c |>\nIt works for me too. Can you give an example where it doesn't work?\n\
    <|/ c |>\n<| a tags=c#,algorithm |>\n<code>\npublic int Search(int[] arr, int\
    \ val)\n{\n    int max = 0;\n    int freq = 0;\n    for(int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if(arr[i] > 0)\n        {\n            freq++;\n      \
    \      if(arr[i] > max)\n            {\n                max = arr[i];\n      \
    \      }\n        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have negative numbers in\
    \ the list.\n<|/ c |>\n<| c |>\nIt works for me too. Can you give an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt works for me too. Can you give an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nIt works for me too. Can you give\
    \ an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt works for me too. Can\
    \ you give an example where it doesn't work?\n<|/ c |>\n<| a tags=c#,algorithm\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            freq++;\n            if(arr[i] > max)\n       \
    \     {\n                max = arr[i];\n            }\n        }\n    }\n    return\
    \ (freq > max) ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| ", "{\n    long\
    \ maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq += lst[i];\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis is not the most efficient solution. `std::max_element` does\
    \ a linear search through the entire array and finds the max element in the first\
    \ pass. Then it does a linear search through the entire array again to find the\
    \ frequency of the max element in the second pass. This is O(n^2) where n is the\
    \ number of elements in the array. Using a map would be O(n).\n<|/ c |>\n<| c\
    \ |>\nYes, I agree. My solution was more of a proof of concept. Also, I didn't\
    \ want to use std::map because I didn't want to use any libraries.\n<|/ c |>\n\
    <| c |>\nI didn't downvote, but I suspect that your solution is O(n^2) because\
    \ you do two linear searches instead of one. Also, your solution doesn't work\
    \ if there are multiple equal elements in the array.\n<|/ c |>\n<| c |>\nI did\
    \ a quick test and found that my solution is O(n) where n is the number of elements\
    \ in the array. Also, I did a quick test and found that std::max_element does\
    \ a linear search through the entire array and finds the max element in the first\
    \ pass. Then it does a linear search through the entire array again to find the\
    \ frequency of the max element in the second pass. This is O(n^2) where n is the\
    \ number of elements in the array. Using a map would be O(n).\n<|/ c |>\n<| c\
    \ |>\nI didn't downvote either, but I think your solution is O(n^2) because you\
    \ do two linear searches instead of one. Also, your solution doesn't work if there\
    \ are multiple equal elements in the array.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n<|/ a tags=c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nIt works. I tested it. What is the problem?\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt works. I tested it. What is the problem?\n<|/ c |>\n<| c\
    \ |>\nIt works. I tested it. What is the problem?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n    int freq\
    \ = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] >\
    \ 0)\n        {\n            freq++;\n            if (max < arr[i])\n        \
    \    {\n                max = arr[i];\n            }\n        }\n    }\n    return\
    \ (freq > max) ? -1 : max;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nIt works. I tested it. What is the problem?\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it. What is the problem?\n<|/ c |>\n<| c |>\nIt works. I tested it.\
    \ What is the problem?\n<|/ c |>\n<| c |>\nIt works. I tested it. What is the\
    \ problem?\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int Search(int[] arr, int\
    \ val)\n{\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if (arr[i] > 0)\n        {\n            freq++;\n     \
    \       if (max < arr[i])\n            {\n                max = arr[i];\n    \
    \        }\n        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n\
    <|/ a tag", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nI believe this solution\
    \ fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nI believe this\
    \ solution fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nI believe\
    \ this solution fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\n\
    I believe this solution fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<|\
    \ c |>\nI believe this solution fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for(int i\
    \ = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n            freq++;\n\
    \            if(arr[i] > max) {\n                max = arr[i];\n            }\n\
    \        }\n    }\n    if(freq > max) {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays |>\n<code>\n\
    public static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n \
    \   for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n        \
    \    freq++;\n            if(arr[i] > max) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if(freq > max) {\n        return -1;\n \
    \   }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n \
    \   for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n        \
    \    freq++;\n            if(arr[i] > max) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if(freq > max) {\n        return -1;\n \
    \   }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| c |>\nPlease add\
    \ some explanation to your answer such that others can learn from it\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npublic static int search(int[] arr) {\n    int max =\
    \ 0;\n    int freq = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ > 0) {\n            freq++;\n            if(arr[i] > max) {\n              \
    \  max = arr[i];\n            }\n        }\n    }\n    if(freq > max) {\n    \
    \    return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array is empty or contains only negative\
    \ numbers. I believe this should return -1.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array is empty or contains only negative numbers. I believe this should\
    \ return -1.\n<|/ c |>\n<| c |>\n: It does work. `-1` is returned if the array\
    \ is empty or contains only negative numbers. `-1` is returned if the array contains\
    \ only positive numbers. `-1` is returned if the array contains only negative\
    \ numbers. `-1` is returned if the array contains only positive numbers. `-1`\
    \ is returned if the array contains only negative numbers. `-1` is returned if\
    \ the array contains only positive numbers. `-1` is returned if the array contains\
    \ only negative numbers. `-1` is returned if the array contains only positive\
    \ numbers. `-1` is returned if the array contains only negative numbers. `-1`\
    \ is returned if the array contains only positive numbers. `-1` is returned if\
    \ the array contains only negative numbers. `-1` is returned if the array contains\
    \ only positive numbers. `-1` is returned if the array contains only negative\
    \ numbers. `-1` is returned if the array contains only positive numbers. `-1`\
    \ is returned if the array contains only negative numbers. `-1` is returned if\
    \ the array contains only positive numbers. `-1` is returned if the array contains\
    \ only negative numbers. `-1` is returned if the array contains only positive\
    \ numbers. `-1` is returned if the array contains only negative numbers. `-1`\
    \ is returned if the array contains only positive numbers. `-1` is returned if\
    \ the array contains only negative numbers. `-1` is returned if the array contains\
    \ only positive numbers. `-1` is returned if the array contains only negative\
    \ numbers. `-1` is returned if the array contains only positive numbers. `-1`\
    \ is returned if the array contains only negative numbers. `-1` is returned if\
    \ the array contains only positive numbers. `-1` is returned if the array contains\
    \ only negative numbers. `-1` is returned if the array contains only positive\
    \ numbers. `-1` is returned if the array contains only negative numbers. `-1`\
    \ is returned if the array contains only positive numbers. `-1` is returned if\
    \ the array contains only negative numbers. `-1` is returned if the array contains\
    \ only positive numbers. `-1` is returned if the array contains only negative\
    \ numbers. ", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); i++){\n        if(lst[i] > maxVal){\n            maxVal\
    \ = lst[i];\n            maxFreq = lst[i];\n        }\n        else if(lst[i]\
    \ == maxVal){\n            maxFreq++;\n        }\n    }\n    if(maxFreq == lst[0]){\n\
    \        return -1;\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis code doesn't work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\
    \ returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it on ideone.com,\
    \ which is where I got the code from. http://ideone.com/XxVQ0\n<|/ c |>\n<| c\
    \ |>\nI tested it on ideone.com, which is where I got the code from. http://ideone.com/XxVQ0\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com, which is where I got the code from.\
    \ http://ideone.com/XxVQ0\n<|/ c |>\n<| c |>\nI tested it on ideone.com, which\
    \ is where I got the code from. http://ideone.com/XxVQ0\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic class Solution {\n    public int search(int[] nums) {\n \
    \       int maxVal = nums[0];\n        int maxFreq = nums[0];\n        for (int\
    \ i = 1; i < nums.length; i++) {\n            if (nums[i] > maxVal) {\n      \
    \          maxVal = nums[i];\n                maxFreq = nums[i];\n           \
    \ } else if (nums[i] == maxVal) {\n                maxFreq++;\n            }\n\
    \        }\n        if (maxFreq == nums[0]) {\n            return -1;\n      \
    \  }\n        return maxVal;\n    }\n}\n</code>\n<|/ a tags=algorithm,java |>\n\
    <| c |>\nThis code doesn't work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\
    \ returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it on ideone.com,\
    \ which is where I got the code from. http://ideone.com/XxVQ0\n<|/ c |>\n<| c\
    \ |>\nI tested it on ideone.com, which is where I go", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nimport java.util.Scanner;", "{\n    long maxVal = lst[0];\n\
    \    long maxCount = 0;\n    for(int i = 1; i < lst.size(); ++i)\n    {\n    \
    \    if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n          \
    \  maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n  \
    \          maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long maxVal = lst[0];\n\
    \    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n    \
    \    if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n          \
    \  maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n  \
    \          maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I believe it can be improved\
    \ a little bit by using a `HashMap` instead of an array. Also, I think it would\
    \ be better to use a `HashMap` instead of a `List` for the `maxVal` and `maxCount`\
    \ variables. Finally, I think it would be better to use a `HashMap` instead of\
    \ a `List` for the `lst` variable. Also, `HashMap` has a `containsKey` method\
    \ which would make this code a little bit more concise.\n<|/ c |>\n<| c |>\nI\
    \ agree with you, HashMap is better than array in this case. I'll try to improve\
    \ the code with HashMap. Thanks.\n<|/ c |>\n<| c |>\nI agree with you, HashMap\
    \ is better than array in this case. I'll try to improve the code with HashMap.\
    \ Thanks.\n<|/ c |>\n<| c |>\nI agree with you, HashMap is better than array in\
    \ this case. I'll try to improve the code with HashMap. Thanks.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, HashMap is better than array in this case. I'll try\
    \ to improve the code with HashMap. Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public class Solution {\n    public int search(int[] nums) {\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.length; i++)\
    \ {\n            map.put(nums[i], map.containsKey(nums[i]) ? map.get(nums[i])\
    \ + 1 : 1);\n        }\n        for(int i = 0; i < nums.length; i++) {\n     \
    \       if(map.containsKey(nums[i]) && map.get(nums[i]) > 0) {\n             \
    \   return nums[i];\n            }\n        }\n        return -1;\n    }\n}\n\
    </code>\n<|/ a tags=arrays,java |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public class Solution {\n    public int search(int[] nums) {\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.length; i++)\
    \ {\n            map.put(num", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(long i : lst)\n    {\n        if(i > maxVal)\n        {\n    \
    \        maxVal = i;\n            maxCount = 1;\n        }\n        else\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| a tags=algorithm,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n                max = lst[i];\n        }\n    }\n    return (freq\
    \ > max) ? -1 : max;\n}\n</code>\n<|/ a |>\n<| c |>\nI like the idea of using\
    \ a map to keep track of the frequency of each element. Thanks!\n<|/ c |>\n<|\
    \ c |>\nThe solution above is O(n^2) (worst case), but this one is O(n) (best\
    \ case). So the complexity is O(n).\n<|/ c |>\n<| c |>\nThis solution is O(n)\
    \ but it is O(n^2) in worst case. Worst case is when all elements are negative\
    \ and frequency is 0\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n \
    \       if(lst[i] > 0)\n        {\n            freq++;\n            if(max < lst[i])\n\
    \            {\n                max = lst[i];\n            }\n        }\n    }\n\
    \    return freq > max ? -1 : max;\n}\n</code>\n<|/ a tags=search,arrays,c++ |>\n\
    <| c |>\nThis code doesn't work if there are negative numbers in the array. For\
    \ example, search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns -1L instead of\
    \ 3L.\n<|/ c |>\n<| c |>\nI edited the answer to fix the negative numbers. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nThis code doesn't work if there are\
    \ negative numbers in the array. For example, search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L]) returns -1L instead of 3L.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ to fix the negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n  \
    \  long max = 0;\n    long freq = 0;\n    for(long i : lst)\n    {\n        freq\
    \ += i;\n        if(freq > max)\n        {\n            max = freq;\n        }\n\
    \    }\n    return max;\n}", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 1;\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n        else\n        {\n            if(maxCount >= maxVal)\n         \
    \   {\n                return maxVal;\n            }\n            else\n     \
    \       {\n                maxVal = lst[i];\n                maxCount = 1;\n \
    \           }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] > 0){\n            freq++;\n            if(max < lst[i]){\n\
    \                max = lst[i];\n            }\n        }\n    }\n    if(max >\
    \ 0){\n        return max;\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `search([5L, 5L, 4L, 4L, 4L])`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `search([5L, 5L, 4L, 4L, 4L])`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `search([5L, 5L, 4L, 4L, 4L])`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `search([5L, 5L, 4L, 4L, 4L])`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long max = 0;\n \
    \   long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < lst[i])\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    if(freq\
    \ > 0)\n    {\n        return max;\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,algorithm,sorting |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i\
    \ = 0; i < lst.length; i++) \n    {\n        if(lst[i] > 0) \n        {\n    \
    \        freq++;\n            if(lst[i] > max) \n            {\n             \
    \   max = lst[i];\n            }\n        }\n    }\n    return (freq > max) ?\
    \ -1 : max;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| c |>\nI like\
    \ the idea of using a map to keep track of the frequencies, but this doesn't seem\
    \ to work for me. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L`\
    \ instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Are\
    \ you sure you copied the code correctly? I tested it on `search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])` and it returns `2L`.\n<|/ c |>\n<| c |>\nI copied\
    \ it exactly as you wrote it. I also tested it on `search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])` and it returns `2L`. What version of Java are you using?\n\
    <|/ c |>\n<| c |>\nI'm using Java 8. Maybe it's an issue with my IDE? I'm using\
    \ Eclipse Neon with Java 8. I'll try it on another IDE and see if it works.\n\
    <|/ c |>\n<| c |>\nI tested it on Eclipse Neon with Java 8 and it works fine.\
    \ Maybe it's an issue with my IDE? I'm using Eclipse Neon with Java 8. I'll try\
    \ it on another IDE and see if it works.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(lst[i] > max)\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    if(freq\
    \ > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c#,algorithm |>\n<code>\npublic int Search(int[] arr,\
    \ int val)\n{\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if (arr[i] > 0)\n        {\n            freq++;\n     \
    \       if (arr[i] > max)\n            {\n                max = arr[i];\n    \
    \        }\n        }\n    }\n    if (freq > max)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public int Search(int[] arr, int val)\n{\n    int max = 0;\n    int freq = 0;\n\
    \    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] > 0)\n  \
    \      {\n            freq++;\n            if (arr[i] > max)\n            {\n\
    \                max = arr[i];\n            }\n        }\n    }\n    if (freq\
    \ > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ tags=c#,algorithm |>\n<| a dscore=0 |>\n<code>\npublic int Search(int[] arr,\
    \ int val)\n{\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if (arr[i] > 0)\n        {\n            freq++;\n     \
    \       if (arr[i] > max)\n            {\n                max = arr[i];\n    \
    \        }\n        }\n    }\n    if (freq > max)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| a tags=c#,algorithm\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i]\
    \ > 0)\n        {\n            freq++;\n            if (arr[i] > max)\n      \
    \      {\n                max = arr[i];\n            }\n        }\n    }\n   \
    \ if (freq > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,algorithm |>\n<code>\npublic int Search(int[]\
    \ arr, int val)\n{\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i\
    \ < arr.Length; i++)\n    {", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n       \
    \ if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nIt works fine for me. Try it yourself here: http://ideone.com/uX8KK\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt works for me too. Try it yourself here:\
    \ http://ideone.com/uX8KK\n<|/ c |>\n<| c |>\nIt works for me too. Try it yourself\
    \ here: http://ideone.com/uX8KK\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxCount = 1;\n    for(int i\
    \ = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n \
    \           maxVal = lst[i];\n            maxCount = 1;\n        }\n        else\
    \ if(lst[i] == maxVal)\n        {\n            maxCount++;\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis solution\
    \ fails for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\n\
    Yes, it fails. I fixed it now.\n<|/ c |>\n<| c |>\nThis solution fails for `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nYes, it fails. I fixed\
    \ it now.\n<|/ c |>\n<| c |>\nThis solution fails for `search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ > 0){\n            freq++;\n            if(max < lst[i]){\n                max\
    \ = lst[i];\n            }\n        }\n    }\n    if(freq > 0){\n        return\
    \ max;\n    }\n    return -1;\n}", "{\n    long max = 0;\n    long freq = 0;\n\
    \    long i;\n    for(i = 0; i < lst.Length; i++)\n    {\n        freq += lst[i];\n\
    \        if(freq > max)\n        {\n            max = freq;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays |>\n<| a tags=c#,algorithm,arrays\
    \ |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n   \
    \ int freq = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        freq\
    \ += arr[i];\n        if (freq > max)\n        {\n            max = freq;\n  \
    \      }\n    }\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i]\
    \ == val)\n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,algorithm,arrays |>\n<code>\npublic\
    \ int Search(int[] arr, int val)\n{\n    int max = 0;\n    int freq = 0;\n   \
    \ for (int i = 0; i < arr.Length; i++)\n    {\n        freq += arr[i];\n     \
    \   if (freq > max)\n        {\n            max = freq;\n        }\n    }\n  \
    \  for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] == val)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int Search(int[] arr, int\
    \ val)\n{\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        freq += arr[i];\n        if (freq > max)\n        {\n \
    \           max = freq;\n        }\n    }\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if (arr[i] == val)\n        {\n            return i;\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays\
    \ |>\n<| a |>\n<code>\npublic int Search(int[] arr, int val)\n{\n    int max =\
    \ 0;\n    int freq = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n   \
    \     freq += arr[i];\n        if (freq > max)\n        {\n            max = freq;\n\
    \        }\n    }\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if\
    \ (arr[i] == val)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\npublic int Search(int[] arr, int val)\n{\n    int max = 0;\n    int freq\
    \ = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        freq", "{\n \
    \   long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i <\
    \ lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n          \
    \  maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal < 0 ? -1 : maxVal;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct. `search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead of `4L`.\n<|/ c |>\n<| c |>\n\
    : I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n       \
    \ if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxVal;\n}", "{\n    long max = 0;\n    long\
    \ freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < lst[i])\n       \
    \         max = lst[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n\
    \    else\n        return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    if(maxFreq == 0)\n    {\n        return -1;\n  \
    \  }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++) \n    {\n        if(lst[i] > maxVal) \n        {\n      \
    \      maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ if the list is empty. `search` returns `-1` instead of `0`.\n<|/ c |>\n<| c\
    \ |>\nI agree with you. I've added a special case for empty list. Thanks.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if the list is empty. `search` returns `-1`\
    \ instead of `0`.\n<|/ c |>\n<| c |>\nI agree with you. I've added a special case\
    \ for empty list. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work if the list is\
    \ empty. `search` returns `-1` instead of `0`.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "{\n    long max = 0;\n    long freq = 0;\n    for(long i : lst)\n    {\n      \
    \  freq++;\n        if(freq > max)\n        {\n            max = freq;\n     \
    \   }\n    }\n    return max == 0 ? -1 : max;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a tags=java,arrays |>\n<code>\npublic static int search(int[] arr, int\
    \ target) {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        freq++;\n        if (freq > max) {\n            max = freq;\n\
    \        }\n        if (arr[i] == target) {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a |>\n<code>\nimport java.util.Arrays;", "{\n    long maxVal = lst[0];\n   \
    \ long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++){\n        if(lst[i]\
    \ > maxVal){\n            maxVal = lst[i];\n            maxFreq = i;\n       \
    \ }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}", "{\n    long max = 0;\n    long freq = 0;\n    for(long i : lst)\n\
    \    {\n        freq = freq + i;\n        if(freq > max)\n        {\n        \
    \    max = freq;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n\
    <|/ c |>\n<| c |>\nYeah, I realized that after I posted it. I fixed it now. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work. Try `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nIt works now. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work. Try `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| a tags=algorithm,c++,java,data-structures\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        freq = freq +\
    \ arr[i];\n        if (freq > max) {\n            max = freq;\n        }\n   \
    \ }\n    return max;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work.\
    \ Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nIt works\
    \ now. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic\
    \ static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for\
    \ (int i = 0; i < arr.length; i++) {\n        freq = freq + arr[i];\n        if\
    \ (freq > max) {\n            max = freq;\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a tags=algorithm,c++,java,data-structures |>\n<| a dscore=1 |>\n\
    <code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int freq\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        freq = freq + arr[i];\n\
    \        if (freq > max) {\n            max = freq;\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=algorithm,c++", "{\n    long max = 0;\n    long\
    \ freq = 0;\n    foreach(long x, lst)\n    {\n        freq++;\n        if(freq\
    \ > max)\n        {\n            max = freq;\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a tags=c#,algorithm,sorting |>\n<| c |>\nThis is not the most\
    \ efficient solution. `freq` should be incremented only once per `foreach` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach` should be replaced with `for` loop.\
    \ Also, `foreach` should be replaced with `for` loop. Also, `foreach` should be\
    \ replaced with `for` loop. Also, `foreach", "{\n    long maxVal = lst[0];\n \
    \   long maxCount = 1;\n    for(long i = 1; i < lst.size(); ++i)\n    {\n    \
    \    if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n          \
    \  maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n  \
    \          maxCount++;\n        }\n        else\n        {\n            if(maxCount\
    \ >= maxVal)\n            {\n                return maxVal;\n            }\n \
    \           else\n            {\n                maxCount = 1;\n            }\n\
    \        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxCount = 1;\n    for(long i = 1; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n    \
    \        freq++;\n            if(lst[i] > max)\n            {\n              \
    \  max = lst[i];\n            }\n        }\n    }\n    if(freq > max)\n    {\n\
    \        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\
    \ if(lst[i] == maxVal)\n        {\n            maxFreq += lst[i];\n        }\n\
    \    }\n    return maxVal;\n}", "{\n    long max = 0;\n    long freq = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++) \n    {\n        if(lst[i] > 0 && lst[i]\
    \ <= max) \n        {\n            freq++;\n            if(lst[i] == max) \n \
    \           {\n                max = lst[i];\n            }\n        }\n    }\n\
    \    return freq > max ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n\
    <| c |>\nI believe this should work. Can you please give me a test case where\
    \ it fails?\n<|/ c |>\n<| c |>\n`search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\
    \ returns `-1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI believe this should work.\
    \ Can you please give me a test case where it fails?\n<|/ c |>\n<| c |>\n`search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `-1L` instead of `3L`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long max = 0;\n    long freq = 0;\n    long temp\
    \ = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            temp = lst[i];\n            freq = i;\n        }\n   \
    \ }\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\
    \ if(lst[i] == maxVal)\n        {\n            maxFreq++;\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis solution\
    \ doesn't work for negative numbers. Try `search([-4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, ", "{\n    long maxVal = lst[0];\n    long maxCount = 1;\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    if(maxCount >= maxVal)\n    {\n        return maxVal;\n    }\n\
    \    return -1;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThe\
    \ question was about a sorted array, not an unsorted one. Your code will fail\
    \ for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nThe question\
    \ was about a sorted array, not an unsorted one. Your code will fail for `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nThe question was about\
    \ a sorted array, not an unsorted one. Your code will fail for `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nThe question was about a sorted\
    \ array, not an unsorted one. Your code will fail for `search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nThe question was about a sorted array,\
    \ not an unsorted one. Your code will fail for `search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])`\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis doesn't work if the array is\
    \ empty. `search` returns `-1` instead of `0`.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it. I was thinking about a more generic solution that would work\
    \ for any type of array (including empty arrays). I'll edit my answer to include\
    \ a generic solution.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty.\
    \ `search` returns `-1` instead of `0`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it. I was thinking about a more generic solution that would work for\
    \ any type of array (including empty arrays). I'll edit my answer to include a\
    \ generic solution.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty.\
    \ `search` returns `-1` instead of `0`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis solution doesn't work if there\
    \ are multiple elements with same frequency. For example, search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L instead of 2L.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution does work. `maxFreq` will hold the frequency of the greatest element\
    \ in the list. `maxVal` will hold the greatest element in the list that is greater\
    \ than zero.\n<|/ c |>\n<| c |>\nYes, it does work. My mistake. Sorry about that.\
    \ Thanks for your help.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\nusing namespace std;", "{\n    long max = 0;\n    long freq = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0){\n         \
    \   freq++;\n            if(lst[i] > max){\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(max < lst[i])\n              \
    \  max = lst[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n  \
    \  else\n        return -1;\n}\n</code>\n<|/ a tags=c++,algorithm,search,arrays\
    \ |>\n<| c |>\nThis is not an answer to the question. He is asking for a solution\
    \ using only `<algorithm>` header\n<|/ c |>\n<| c |>\nI thought he was asking\
    \ for a solution that uses only `<algorithm>` header. He didn't say anything about\
    \ `<algorithm>` header in the question. He just said he wants to solve this problem\
    \ using only `<algorithm>` header. He didn't say anything about `<algorithm>`\
    \ header in the question. He just said he wants to solve this problem using only\
    \ `<algorithm>` header. He didn't say anything about `<algorithm>` header in the\
    \ question. He just said he wants to solve this problem using only `<algorithm>`\
    \ header. He didn't say anything about `<algorithm>` header in the question. He\
    \ just said he wants to solve this problem using only `<algorithm>` header. He\
    \ didn't say anything about `<algorithm>` header in the question. He just said\
    \ he wants to solve this problem using only `<algorithm>` header. He didn't say\
    \ anything about `<algorithm>` header in the question. He just said he wants to\
    \ solve this problem using only `<algorithm>` header.\n<|/ c |>\n<| c |>\nHe didn't\
    \ say anything about `<algorithm>` header in the question. He just said he wants\
    \ to solve this problem using only `<algorithm>` header. He didn't say anything\
    \ about `<algorithm>` header in the question. He just said he wants to solve this\
    \ problem using only `<algorithm>` header. He didn't say anything about `<algorithm>`\
    \ header in the question. He just said he wants to solve this problem using only\
    \ `<algorithm>` header. He didn't say anything about `<algorithm>` header in the\
    \ question. He just said he wants to solve this problem using only `<algorithm>`\
    \ header. He didn't say anything about `<algorithm>` header in the question. He\
    \ just said he wants to solve this ", "{\n    long max = 0;\n    long freq = 0;\n\
    \    long i;\n    for(i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] >\
    \ 0)\n        {\n            freq++;\n            if(max < lst[i])\n         \
    \       max = lst[i];\n        }\n    }\n    if(freq > 0)\n        return max;\n\
    \    else\n        return -1;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n\
    <| c |>\nThis is not the correct solution. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ out. I've corrected the code now.\n<|/ c |>\n<| c |>\nThis is not the correct\
    \ solution. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead\
    \ of `2L`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've corrected the code\
    \ now.\n<|/ c |>\n<| c |>\nThis is not the correct solution. `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n    \
    \        freq++;\n            if(lst[i] > max)\n            {\n              \
    \  max = lst[i];\n            }\n        }\n    }\n    if(freq >= max)\n    {\n\
    \        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n  \
    \  int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            freq++;\n            if (arr[i] > max) {\n             \
    \   max = arr[i];\n            }\n        }\n    }\n    if (freq >= max) {\n \
    \       return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n \
    \   int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            freq++;\n            if (arr[i] > max) {\n             \
    \   max = arr[i];\n            }\n        }\n    }\n    if (freq >= max) {\n \
    \       return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic int search(int[] arr) {\n    int max =\
    \ 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] > 0) {\n            freq++;\n            if (arr[i] > max) {\n     \
    \           max = arr[i];\n            }\n        }\n    }\n    if (freq >= max)\
    \ {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c#,arrays |>\n<code>\npublic int search(int[] arr) {\n    int max =\
    \ 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] > 0) {\n            freq++;\n            if (arr[i] > max) {\n     \
    \           max = arr[i];\n            }\n        }\n    }\n    if (freq >= max)\
    \ {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n \
    \   int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            freq++;\n            if (arr[i] > max) {\n             \
    \   max = arr[i];\n            }\n        }\n    }\n    if (freq >= max) {\n \
    \       return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c", "{\n  \
    \  long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] > maxFreq)\n            {\n                maxFreq = lst[i];\n \
    \           }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test case to\
    \ the answer. Are you sure you tested it correctly?\n<|/ c |>\n<| c |>\nI tested\
    \ it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and it returns -1L\n<|/ c |>\n<|\
    \ c |>\nI tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and it returns -1L\n\
    <|/ c |>\n<| c |>\nI tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and it\
    \ returns -1L\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n \
    \   {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis does not work if there are two or more equal numbers in the\
    \ list\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. Try it\
    \ yourself and see.\n<|/ c |>\n<| c |>\nIt does not work if there are two or more\
    \ equal numbers in the list. Try it yourself and see.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it yourself. It returns -1 if there are no equal numbers in the list.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nIt does not work if there are two or more\
    \ equal numbers in the list. Try it yourself and see.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(int i = 1; i < lst.size(); i++) \n    {\n        if(lst[i]\
    \ > maxVal) \n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    if(maxFreq == lst[0])\n    {\n        return\
    \ -1;\n    }\n    return maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't\
    \ work if there are two or more equal numbers in the list.\n<|/ c |>\n<| c |>\n\
    It works. I tested it before posting. What do you mean by \"doesn't work\"? It\
    \ returns -1 if there are no such numbers in the list.\n<|/ c |>\n<| c |>\nI mean\
    \ that your code doesn't work if there are two or more equal numbers in the list.\
    \ For example, `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead\
    \ of `2L`.\n<|/ c |>\n<| c |>\nOh, I see. Thanks for pointing that out. I edited\
    \ my answer to fix the bug.\n<|/ c |>\n<| c |>\nI edited my answer to fix the\
    \ bug.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n \
    \   int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] > maxVal) {\n            maxVal = arr[i];\n     \
    \       maxFreq = arr[i];\n        } else {\n            if (arr[i] == maxVal)\
    \ {\n                maxFreq++;\n            }\n        }\n    }\n    return maxFreq\
    \ == arr[0] ? -1 : maxVal;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n\
    <| a tags=arrays,algorithm,java |>\n<code>\npublic int search(int[] arr) {\n \
    \   int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] > maxVal) {\n            maxVal = arr[i];\n     \
    \       maxFreq = arr[i];\n        } else {\n            if (arr[i] == maxVal)\
    \ {\n                maxFreq++;\n            }\n        }\n    }\n    return maxFreq\
    \ == arr[0] ? -1 : maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic int ", "{\n    long maxVal = lst[0];\n    long maxFreq =\
    \ lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxFreq == lst[0] ? -1 : maxVal;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis solution does not work if you have negative numbers in the\
    \ list.\n<|/ c |>\n<| c |>\nThis solution does not work if you have negative numbers\
    \ in the list.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic int search(int[] arr)\
    \ {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i = 1;\
    \ i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n            maxVal =\
    \ arr[i];\n            maxFreq = i;\n        }\n    }\n    return maxFreq == arr[0]\
    \ ? -1 : maxVal;\n}\n</code>\n<|/ a tags=algorithm,java |>\n<| c |>\nThis solution\
    \ does not work if you have negative numbers in the list.\n<|/ c |>\n<| c |>\n\
    This solution does not work if you have negative numbers in the list.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\npublic int search(int[] arr) {\n    int maxVal = arr[0];\n\
    \    int maxFreq = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n     \
    \   if (arr[i] > maxVal) {\n            maxVal = arr[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxFreq == arr[0] ? -1 : maxVal;\n}\n</code>\n\
    <|/ a tags=algorithm,java |>\n<| a dscore=1 |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int maxVal = arr[0];\n    int maxFreq = arr[0];\n    for (int i\
    \ = 1; i < arr.length; i++) {\n        if (arr[i] > maxVal) {\n            maxVal\
    \ = arr[i];\n            maxFreq = i;\n        }\n    }\n    return maxFreq ==\
    \ arr[0] ? -1 : maxVal;\n}\n</code>\n<|/ a tags=algorithm,java |>\n<| a dscore=1\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int maxVal = arr[0];\n    int\
    \ maxFreq = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n            maxFreq = i;\n      \
    \  }\n    }\n    return maxFreq == arr[0] ? -1 : maxVal;\n}\n</code>\n<|/ a tags=algorithm,java ",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,sorting |>\n\
    <code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); ++i)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq += lst[i];\n\
    \            }\n        }\n    }\n    return maxVal < 0 ? -1 : maxFreq;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution doesn't work for negative\
    \ numbers. I tested it on [this example](https://ideone.com/QYZ2Y9).\n<|/ c |>\n\
    <| c |>\nI tested it on [this example](https://ideone.com/QYZ2Y9). And it works\
    \ fine.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. I tested it\
    \ on [this example](https://ideone.com/QYZ2Y9).\n<|/ c |>\n<| c |>\nI tested it\
    \ on [this example](https://ideone.com/QYZ2Y9). And it works fine.\n<|/ c |>\n\
    <| c |>\nI tested it on [this example](https://ideone.com/QYZ2Y9). And it works\
    \ fine.\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n \
    \       if(lst[i] > 0)\n        {\n            freq++;\n            max = Math.Max(max,\
    \ lst[i]);\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are multiple occurrences\
    \ of the same number.\n<|/ c |>\n<| c |>\nI didn't test it but I think it works.\
    \ I tested it on [this](http://ideone.com/HG2W7q) input. Can you give me an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple\
    \ occurrences of the same number. Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])`.\n<|/ c |>\n<| c |>\nI tested it on [this](http://ideone.com/HG2W7q) input.\
    \ Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested\
    \ it on [this](http://ideone.com/HG2W7q) input. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            max = Math.max(max,\
    \ arr[i]);\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a tags=c#,algorithm |>\n<| a tags=c#,algorithm |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            max = Math.max(max,\
    \ arr[i]);\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,algorithm |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            max = Math.max(max,\
    \ arr[i]);\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n   \
    \ long maxCount = 1;\n    for(int i = 1; i < lst.size(); i++)\n    {\n       \
    \ if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxCount\
    \ = 1;\n        }\n        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n        {\n    \
    \        freq++;\n            max = lst[i];\n        }\n    }\n    if(freq > max)\n\
    \        return -1;\n    return max;\n}\n</code>\n<|/ a tags=c++,algorithm,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nI guess you meant `freq > max` instead of `freq < max`\n\
    <|/ c |>\n<| c |>\nYes, I meant `freq > max`. Thanks for pointing it out.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\n\
    This solution doesn't work if there are multiple integers with the same frequency.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The code in the\
    \ answer returns `-1` when there are multiple integers with the same frequency.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The code in the\
    \ answer returns `-1` when there are multiple integers with the same frequency.\n\
    <|/ c |>\n<| c |>\nI tested it before posting it. The code in the answer returns\
    \ `-1` when there are multiple integers with the same frequency.\n<|/ c |>\n<|\
    \ c |>\nI tested it before posting it. The code in the answer returns `-1` when\
    \ there are multiple integers with the same frequency.\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] > maxVal){\n    \
    \        maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\
    \ if(lst[i] == maxVal){\n            maxFreq += lst[i];\n        }\n    }\n  \
    \  return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=algorithm,c++,sorting\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. I just added\
    \ the test case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it before posting it. I just added the test case. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting it. I just added the test\
    \ case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nIt works. I tested it\
    \ before posting it. I just added the test case. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i =\
    \ 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n        \
    \    freq++;\n            if(lst[i] > max)\n            {\n                max\
    \ = lst[i];\n            }\n        }\n    }\n    if(freq > max)\n    {\n    \
    \    return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try search([4L, 1L, 2L, 2L, 3L, 1L])\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it fails?\n<|/ c |>\n<| c |>\nIt fails on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it fails?\n<|/ c |>\n<| c |>\nIt fails on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\n\
    <|/ c |>\n<| a |>\n<code>\npublic static int search(int[] arr) {\n    int max\
    \ = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] > 0) {\n            freq++;\n            if (arr[i] > max) {\n \
    \               max = arr[i];\n            }\n        }\n    }\n    if (freq >\
    \ max) {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0\
    \ tags=c#,algorithm,arrays |>\n<| a dscore=0 |>\n<code>\npublic static int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            if (arr[i]\
    \ > max) {\n                max = arr[i];\n            }\n        }\n    }\n \
    \   if (freq > max) {\n        return -1;\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,arrays |>\n<| a tags=c#,algorithm,arrays |>\n<code>\n\
    public static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n \
    \   for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n      \
    \      freq++;\n            if (arr[i] > max) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (freq > max) {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n", "{\n    long\
    \ max = 0;\n    long freq = 0;\n    long i;\n    for(i = 0; i < lst.size(); ++i)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n                max = lst[i];\n        }\n    }\n    if(freq > 0)\n\
    \        return max;\n    return -1;\n}", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(max < lst[i])\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return (freq\
    \ > max) ? -1 : max;\n}", "{\n    long max = 0;\n    long freq = 0;\n    for(long\
    \ i : lst)\n    {\n        freq++;\n        if(freq > max)\n        {\n      \
    \      max = freq;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis is not the right solution. `search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that case. Thanks for pointing it out. I've updated the solution.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n        {\n    \
    \        freq++;\n            max = lst[i] > max ? lst[i] : max;\n        }\n\
    \    }\n    return freq > max ? -1 : max;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis solution doesn't work if you have a negative number in the\
    \ list. For example, search([-1, -2, -3, -4, -5]) returns -5 instead of -1.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ c |>\nThis solution doesn't work if you have a negative number in the list.\
    \ For example, search([-1, -2, -3, -4, -5]) returns -5 instead of -1.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=c++,algorithm,arrays\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n \
    \       {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if the list contains duplicates. For example, `search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that and fixed it. I was thinking about it too much and didn't think\
    \ about it at first.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,search\
    \ |>\n<| c |>\nThis is not the best solution. Your solution will fail if the list\
    \ is sorted in descending order.\n<|/ c |>\n<| c |>\nThe question was to find\
    \ the greatest integer that is greater than zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. So the list has to be sorted\
    \ in descending order before searching.\n<|/ c |>\n<| c |>\nYes, but your solution\
    \ will fail if the list is sorted in descending order. Try this list `[1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L]`\n<|/ c |>\n<| c |>\nYes, you are right. I missed\
    \ that part. Thanks for pointing it out.\n<|/ c |>\n<| a tags=c++,algorithm,search\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long freq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++){\n        if(lst[i] > maxVal){\n            maxVal = lst[i];\n        }\n\
    \        if(lst[i] == maxVal){\n            freq++;\n        }\n    }\n    return\
    \ maxVal >= freq ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work if the list is empty. Try it with `search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my\
    \ answer to account for that case.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(lst[i] > max)\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    if(freq >\
    \ max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis does not work if you have a list like `[1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L]`\n<|/ c |>\n<| c |>\nI guess you meant `[1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L]`\n<|/ c |>\n<| c |>\nYes, I meant that. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,search,arrays |>\n<| c |>\nThis\
    \ solution doesn't work if you have negative numbers in the array.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work if you have negative numbers in the array.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if you have negative numbers in\
    \ the array.\n<|/ c |>\n<| c |>\nThis solution doesn't work if you have negative\
    \ numbers in the array.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays,sorting |>\n<| c |>\nThis solution doesn't work\
    \ if the list is empty. Try it with `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\
    \ returns `3L`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L`.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. I tested it before posting it. `search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])` returns `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    long maxVal = lst[0];\n    long maxCount = 1;\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=algorithm,c++,sorting |>\n<code>", "{\n    long maxVal\
    \ = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This solution doesn't work if the list is empty. Try it with `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added a test case to the answer. Did you try it?\n<|/ c |>\n<| c |>\nYes,\
    \ I did. But it fails on `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I added a test case to the answer. Did\
    \ you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it fails on `search([1L, 2L,\
    \ 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long maxVal = lst[0];\n    long\
    \ maxCount = 0;\n    for(long i : lst)\n    {\n        if(i > maxVal)\n      \
    \  {\n            maxVal = i;\n            maxCount = 1;\n        }\n        else\n\
    \        {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a tags=algorithm,java |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=algorithm,java |>\n<code>\n\
    public int search(int[] arr) {\n    int maxVal = arr[0];\n    int maxCount = 0;\n\
    \    for (int i : arr) {\n        if (i > maxVal) {\n            maxVal = i;\n\
    \            maxCount = 1;\n        } else {\n            maxCount++;\n      \
    \  }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c\
    \ |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i <\
    \ lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n          \
    \  maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    if(maxFreq == 0)\n    {\n        return\
    \ -1;\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n \
    \       if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,algorithm |>\n<code>\npublic\
    \ int Search(int arr[], int n, int x)\n{\n    int max = 0;\n    int freq = 0;\n\
    \    for(int i = 0; i < n; i++)\n    {\n        if(arr[i] > 0)\n        {\n  \
    \          freq++;\n            if(arr[i] > max)\n            {\n            \
    \    max = arr[i];\n            }\n        }\n    }\n    if(freq > max)\n    {\n\
    \        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\npublic int Search(int arr[], int n, int x)\n{\n    int\
    \ max = 0;\n    int freq = 0;\n    for(int i = 0; i < n; i++)\n    {\n       \
    \ if(arr[i] > 0)\n        {\n            freq++;\n            if(arr[i] > max)\n\
    \            {\n                max = arr[i];\n            }\n        }\n    }\n\
    \    if(freq > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=c#,algorithm |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but also provide an explanation of what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int Search(int arr[], int n, int x)\n\
    {\n    int max = 0;\n    int freq = 0;\n    for(int i = 0; i < n; i++)\n    {\n\
    \        if(arr[i] > 0)\n", "{\n    long maxVal = lst[0];\n    long maxFreq =\
    \ lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxFreq > lst.size() ? -1 : maxVal;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis solution has a time complexity of O(n^2)\
    \ which is very inefficient.\n<|/ c |>\n<| c |>\nYes, it does. But it can be done\
    \ in O(n) by using a hash table to store the frequency of each number. I'll post\
    \ an answer in a few minutes.\n<|/ c |>\n<| c |>\nThis solution has a time complexity\
    \ of O(n^2) which is very inefficient.\n<|/ c |>\n<| c |>\nYes, it does. But it\
    \ can be done in O(n) by using a hash table to store the frequency of each number.\
    \ I'll post an answer in a few minutes.\n<|/ c |>\n<| c |>\nThis solution has\
    \ a time complexity of O(n^2) which is very inefficient.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n  \
    \      {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n      \
    \  }\n        else\n        {\n            if(lst[i] == maxVal)\n            {\n\
    \                maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n\
    }", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i =\
    \ 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n   \
    \         maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n       \
    \ else\n        {\n            if(lst[i] == maxVal)\n            {\n         \
    \       maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 1;\n    for(long i = 1; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n        else\n        {\n       \
    \     if(maxCount >= maxVal)\n            {\n                return -1;\n    \
    \        }\n            else\n            {\n                maxVal = lst[i];\n\
    \                maxCount = 1;\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThis code doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis code doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis code doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\n\
    public int Search(int[] nums)\n{\n    int maxVal = nums[0];\n    int maxCount\
    \ = 1;\n    for (int i = 1; i < nums.Length; i++)\n    {\n        if (nums[i]\
    \ > maxVal)\n        {\n            maxVal = nums[i];\n            maxCount =\
    \ 1;\n        }\n        else if (nums[i] == maxVal)\n        {\n            maxCount++;\n\
    \        }\n        else\n        {\n            if (maxCount >= maxVal)\n   \
    \         {\n                return -1;\n            }\n            else\n   \
    \         {\n                maxVal = nums[i];\n                maxCount = 1;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis code doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic int Search(int[] nums)\n\
    {\n    int maxVal = nums[0];\n    int maxCount = 1;\n    for (int i = 1; i < nums.Length;\
    \ i++)\n    {\n        if (nums[i", "{\n    long maxVal = lst[0];\n    long maxCount\
    \ = 0;\n    for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n        else\n        {\n            if(maxCount >= maxVal)\n         \
    \   {\n                return maxVal;\n            }\n            else\n     \
    \       {\n                maxVal = lst[i];\n                maxCount = 1;\n \
    \           }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long maxVal = lst[0];\n    long freq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++) \n    {\n        if(lst[i] > maxVal)\
    \ \n        {\n            maxVal = lst[i];\n            freq = lst[i];\n    \
    \    }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are duplicates in the array. For example,\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L instead of 2L.\n<|/\
    \ c |>\n<| c |>\n, thanks for pointing that out. I've edited my answer to include\
    \ a solution that doesn't require duplicates.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are duplicates in the array. For example, search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L]) returns 3L instead of 2L.\n<|/ c |>\n<| c |>\n, thanks\
    \ for pointing that out. I've edited my answer to include a solution that doesn't\
    \ require duplicates.\n<|/ c |>\n<| c |>\nThis doesn't work if there are duplicates\
    \ in the array. For example, search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns\
    \ 3L instead of 2L.\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>", "{\n\
    \    long maxVal = lst[0];\n    long freq = lst[0];\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n \
    \   {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    if(maxCount == lst.size())\n\
    \    {\n        return maxVal;\n    }\n    else\n    {\n        return -1;\n \
    \   }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include\
    \ <bits/stdc++.h>\nusing namespace std;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n\
    \        {\n            freq++;\n            if(lst[i] > max)\n            {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    if(freq >=\
    \ max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c#,algorithm,search |>\n<code>\npublic\
    \ int Search(int[] arr, int val)\n{\n    int max = 0;\n    int freq = 0;\n   \
    \ for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] > 0)\n     \
    \   {\n            freq++;\n            if (arr[i] > max)\n            {\n   \
    \             max = arr[i];\n            }\n        }\n    }\n    if (freq >=\
    \ max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ ", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++) \n    {\n        if(lst[i] > maxVal)\
    \ \n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n \
    \       }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test cases and it works.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I added the test cases and it works.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test cases and it works.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test cases and it works.\n\
    <|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long maxVal = lst[0];\n \
    \   long maxCount = 0;\n    long currentCount = 0;\n    for(long i : lst)\n  \
    \  {\n        if(i > maxVal)\n        {\n            maxVal = i;\n           \
    \ maxCount = 1;\n        }\n        else\n        {\n            currentCount++;\n\
    \            if(currentCount > maxCount)\n            {\n                maxCount\
    \ = currentCount;\n            }\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n\
    \    int maxVal = arr[0];\n    int maxCount = 0;\n    int currentCount = 0;\n\
    \    for (int i : arr) {\n        if (i > maxVal) {\n            maxVal = i;\n\
    \            maxCount = 1;\n        } else {\n            currentCount++;\n  \
    \          if (currentCount > maxCount) {\n                maxCount = currentCount;\n\
    \            }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=java\
    \ |>\n<| a tags=java |>\n<code>\npublic class SearchingArray {\n    public static\
    \ void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n        System.out.println(search(arr));\n\
    \    }", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxFreq;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work if there are two or more\
    \ equal values.\n<|/ c |>\n<| c |>\nIt does work if there are two or more equal\
    \ values. Please see my answer for a more detailed explanation.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work if there are two or more equal values. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work if there are\
    \ two or more equal values. Please see my answer for a more detailed explanation.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two or more equal values. Try\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i\
    \ < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n\
    \            if(lst[i] > max)\n            {\n                max = lst[i];\n\
    \            }\n        }\n    }\n    if(freq > max)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays |>\n<| c |>\n\
    This solution doesn't work if there are multiple integers with the same frequency.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple integers with the same\
    \ frequency.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try\
    \ it yourself.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr)\
    \ {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            if (arr[i]\
    \ > max) {\n                max = arr[i];\n            }\n        }\n    }\n \
    \   if (freq > max) {\n        return -1;\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,arrays |>\n<| c |>\nThis solution doesn't work if there\
    \ are multiple integers with the same frequency.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting. Try it yourself.\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            freq++;\n\
    \            if (arr[i] > max) {\n                max = arr[i];\n            }\n\
    \        }\n    }\n    if (freq > max) {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays dscore=0 |>\n<| c |>\nThis\
    \ solution doesn't work if there are multiple integers with the same frequency.\n\
    <|/ c |>\n<| a tags=c#,algorithm,arrays |>\n<code>\npublic int search(int[] arr)\
    \ {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            if (arr[i]\
    \ > max", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n                max = lst[i];\n        }\n    }\n   \
    \ if(freq > 0)\n        return max;\n    else\n        return -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThe question says \"The frequency of an integer is\
    \ the number of times it appears in the list.\"\n<|/ c |>\n<| c |>\nYes, I know,\
    \ but I thought that might be a little confusing since it says \"The frequency\
    \ of an integer is the number of times it appears in the list.\" in the first\
    \ sentence of the question. I'll edit my answer to clarify.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq =\
    \ 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            freq++;\n            if (max < arr[i]) {\n                max = arr[i];\n\
    \            }\n        }\n    }\n    if (freq > 0) {\n        return max;\n \
    \   } else {\n        return -1;\n    }\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic int search(int[] arr)\
    \ {\n    int max = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            freq++;\n            if (max\
    \ < arr[i]) {\n                max = arr[i];\n            }\n        }\n    }\n\
    \    if (freq > 0) {\n        return max;\n    } else {\n        return -1;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\n\
    public int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            freq++;\n\
    \            if (max < arr[i]) {\n                max = arr[i];\n            }\n\
    \        }\n    }\n    if (freq > 0) {\n        return max;\n    } else {\n  \
    \      return -1;\n    }\n}\n</code>\n<|/ a dscore=0 tags=c#,arrays |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how ", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i\
    \ = 1; i < lst.size(); i++){\n        if(lst[i] > maxVal){\n            maxVal\
    \ = lst[i];\n            maxCount = 1;\n        }\n        else if(lst[i] == maxVal){\n\
    \            maxCount++;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the code\
    \ accordingly.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeMap;\n\
    import java.util.TreeSet;", "{\n    long maxVal = lst[0];\n    long maxFreq =\
    \ lst[0];\n    for(long i = 1; i < lst.size(); i++){\n        if(lst[i] > maxVal){\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,search,arrays |>\n<| c\
    \ |>\nThis doesn't work if the list is empty. Also, the OP said \"The frequency\
    \ of an integer is the number of times it appears in the list.\"\n<|/ c |>\n<|\
    \ c |>\nI believe this would work if you changed `maxFreq` to `maxFreq = lst[i];`\
    \ instead of `maxFreq = i;`.\n<|/ c |>\n<| c |>\n: Yes, I missed that detail.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work if the list\
    \ is empty. Also, the OP said \"The frequency of an integer is the number of times\
    \ it appears in the list.\"\n<|/ c |>\n<| c |>\n: I missed that detail. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a tags=algorithm,c++,search,arrays |>\n<code>",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution doesn't work if you have\
    \ a list with duplicates. For example, `search([1L, 1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI didn't see that\
    \ requirement in the question. I'll update my answer to account for that.\n<|/\
    \ c |>\n<| c |>\nThis solution doesn't work if you have a list with duplicates.\
    \ For example, `search([1L, 1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L`\
    \ instead of `2L`.\n<|/ c |>\n<| c |>\nI updated my answer to account for duplicates\
    \ in the list.\n<|/ c |>\n<| c |>\nThis solution doesn't work if you have a list\
    \ with duplicates. For example, `search([1L, 1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\
    \ returns `3L` instead of `2L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef search(a):\n\
    \    a.sort()\n    count = 0\n    last = 0\n    lastCount = 0\n    for i in a:\n\
    \        if i == a[last]:\n            count += 1\n        else:\n           \
    \ count = 0\n        if count > lastCount:\n            last = i\n           \
    \ lastCount = count\n    return last\n</code>\n<|/ a tags=algorithm,python |>\n\
    <| c |>\nThis solution doesn't work if you have a list with duplicates. For example,\
    \ `search([1L, 1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L` instead of `2L`.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if you have a list with duplicates.\
    \ For example, `search([1L, 1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L`\
    \ instead of `2L`.\n<|/ c |>\n<| a tags=algorithm,python |>\n<code>\ndef search(a):\n\
    \    a.sort()\n    count = 0\n    last = 0\n", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = lst[i];\n        }\n        else\n        {\n            if(lst[i]\
    \ == maxVal)\n            {\n                maxFreq++;\n            }\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ does not work if the list contains negative numbers. For example, search([-4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, ", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(long i : lst)\n    {\n        freq += i;\n        if(freq > max)\n\
    \        {\n            max = freq;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nI believe this solution is O(n^2) since\
    \ it iterates over the list twice. Not sure if this is what the OP was looking\
    \ for.\n<|/ c |>\n<| c |>\n: Yes, I believe that it is O(n^2) because of the two\
    \ loops. But I believe that it is also O(n) because of the `freq += i` statement.\
    \ Though I agree that it is O(n^2) because of the two loops.\n<|/ c |>\n<| c |>\n\
    : I believe that it is O(n) because of the `freq += i` statement. Though I agree\
    \ that it is O(n^2) because of the two loops.\n<|/ c |>\n<| c |>\n: I believe\
    \ that it is O(n) because of the `freq += i` statement. Though I agree that it\
    \ is O(n^2) because of the two loops.\n<|/ c |>\n<| c |>\n: I believe that it\
    \ is O(n) because of the `freq += i` statement. Though I agree that it is O(n^2)\
    \ because of the two loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long freq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            freq = lst[i];\n       \
    \ }\n    }\n    if(freq >= lst[0])\n        return maxVal;\n    return -1;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis doesn't work. Try search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI fixed the bug, thank\
    \ you for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug, thank you for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't work.\
    \ Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n\
    Yes, it does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nYes, it does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal < 0 ? -1 : maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,sorting |>\n\
    <| c |>\nI believe this fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<|\
    \ c |>\nI believe this fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<|\
    \ c |>\nI believe this fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<|\
    \ c |>\nI believe this fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<|\
    \ c |>\nI believe this fails for `search([5L, 5L, 4L, 4L, 4L])`\n<|/ c |>\n<|\
    \ a tags=c++,algorithm,sorting |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long maxVal = lst[0];\n \
    \   long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n \
    \       if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n       \
    \     maxFreq = lst[i];\n        }\n        else\n        {\n            if(lst[i]\
    \ > maxFreq)\n            {\n                maxVal = lst[i];\n              \
    \  maxFreq = lst[i];\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26859067)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He wants to find the greatest number that\
    \ is greater than zero, and has a frequency greater than or equal to the value\
    \ of the integer itself. I believe this does exactly that.\n<|/ c |>\n<| c |>\n\
    It does answer the question, but only because you wrote the code yourself. It\
    \ does not help the OP understand why their code does not work. Your code does\
    \ not work for the input `[1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]`. Your code does\
    \ not work for the input `[1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,\
    \ 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,\
    \ 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,\
    \ 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,\
    \ 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,\
    \ 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,\
    \ 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4", "{\n    long maxVal = lst[0];\n    long\
    \ maxCount = 0;\n    for(int i = 1; i < lst.size(); i++) \n    {\n        if(lst[i]\
    \ > maxVal) \n        {\n            maxVal = lst[i];\n            maxCount =\
    \ 1;\n        }\n        else if(lst[i] == maxVal) \n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n   \
    \ long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i]\
    \ > maxVal){\n            maxVal = lst[i];\n            maxFreq = i;\n       \
    \ }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\n: I see what you mean. Updated my answer.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Updated my answer.\n<|/ c |>\n<| c |>\n: I see what you\
    \ mean. Updated my answer.\n<|/ c |>\n<| c |>\n: I see what you mean. Updated\
    \ my answer.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(int i = 0; i < lst.Length; i++)\n    {\n        freq = lst[i];\n\
    \        if(freq > 0)\n        {\n            max = Math.Max(max, freq);\n   \
    \     }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<|\
    \ c |>\nIt works. I tested it before posting. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. Try\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt works. I\
    \ tested it before posting. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. Try search([1L, 2L, 2L,\
    \ 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long max = 0;\n    long freq = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n      \
    \  {\n            freq++;\n            if(max < lst[i])\n                max =\
    \ lst[i];\n        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution does not work if there\
    \ are multiple integers with the same frequency.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting. What do you mean by \"does not work\"? It returns\
    \ -1 if there are multiple integers with the same frequency, and returns the first\
    \ one if there are multiple integers with different frequencies.\n<|/ c |>\n<|\
    \ c |>\nI mean that if there are two integers with the same frequency, it only\
    \ returns the first one. For example, search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L]) returns 3L instead of 2L.\n<|/ c |>\n<| c |>\nOh, I see. My bad. I'll fix\
    \ it.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L] and got 3L\n<|/ c |>\n<| c |>\nI tested it on [1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L] and got 3L\n<|/ c |>\n<| c |>\nI tested it on [1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L] and got 3L\n<|/ c |>\n<| c |>\nI tested it on [1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L] and got 3L\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxVal;\n}", "{\n    long max = 0;\n    long freq = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n        {\n    \
    \        freq++;\n            if(max < lst[i])\n            {\n              \
    \  max = lst[i];\n            }\n        }\n    }\n    return (freq > max) ? -1\
    \ : max;\n}", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq += lst[i];\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n\
    \    for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis solution doesn't work for negative numbers. I believe it can\
    \ be fixed by changing the condition to `if(lst[i] > maxVal || maxVal == 0)`\n\
    <|/ c |>\n<| c |>\nYes, it can be fixed by changing the condition to `if(lst[i]\
    \ > maxVal || maxVal == 0)`\n<|/ c |>\n<| c |>\nI believe this solution fails\
    \ for negative numbers. Try `search([-2L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L])`\n<|/ c |>\n<| c |>\nYes, it fails for negative numbers. I believe it\
    \ can be fixed by changing the condition to `if(lst[i] > maxVal || maxVal == 0)`\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long max = 0;\n    long freq = 0;\n\
    \    long cur = 0;\n    for(long i = 0; i < lst.Length; i++)\n    {\n        cur\
    \ = lst[i];\n        freq = freq + cur;\n        if(freq >= max)\n        {\n\
    \            max = freq;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work if the list is empty. `search` returns\
    \ `-1` instead of `0`.\n<|/ c |>\n<| c |>\nIt doesn't work if the list is empty.\
    \ search() returns -1 instead of 0.\n<|/ c |>\n<| c |>\nIt doesn't work if the\
    \ list is empty. search() returns -1 instead of 0.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if the list is empty. search() returns -1 instead of 0.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work if the list is empty. search() returns -1 instead of 0.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n    int max\
    \ = 0;\n    int freq = 0;\n    int cur = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) {\n        cur = arr[i];\n        freq = freq + cur;\n        if(freq >=\
    \ max) {\n            max = freq;\n        }\n    }\n    return max;\n}\n</code>\n\
    <|/ a tags=c#,algorithm |>\n<| c |>\nIt doesn't work if the list is empty. search()\
    \ returns -1 instead of 0.\n<|/ c |>\n<| c |>\nIt doesn't work if the list is\
    \ empty. search() returns -1 instead of 0.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    int cur\
    \ = 0;\n    for(int i = 0; i < arr.length; i++) {\n        cur = arr[i];\n   \
    \     freq = freq + cur;\n        if(freq >= max) {\n            max = freq;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<|\
    \ c |>\nIt doesn't work if the list is empty. search() returns -1 instead of 0.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the list is empty. search() returns -1 instead\
    \ of 0.\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\npublic int search(int[]\
    \ arr) {\n    int max = 0;\n    int freq = 0;\n    int cur = 0;\n    for(int i\
    \ = 0; i < arr.length; i++) {\n        cur = arr[i];\n        freq = freq + cur;\n\
    \        if(freq >= ", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq++;\n            }\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution\
    \ fails for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\n\
    Yes, I see that now. Thanks for pointing that out. I've updated my answer to fix\
    \ the bug.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(max < lst[i])\n       \
    \         max = lst[i];\n        }\n    }\n    return freq > max ? -1 : max;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis solution doesn't\
    \ work for negative numbers. For example, the list `[-1L, 1L, 2L, 2L, 3L, 1L]`\
    \ should return `-1L`, but your code returns `1L`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers. For example, the list `[-1L, 1L, 2L, 2L, 3L, 1L]`\
    \ should return `-1L`, but your code returns `1L`.\n<|/ c |>\n<| c |>\nI guess\
    \ you meant `-1L` instead of `1L` in the last line. Anyway, the question was about\
    \ positive integers, so I didn't bother to fix the negative numbers. I guess you\
    \ can fix it yourself.\n<|/ c |>\n<| c |>\nI fixed the negative numbers. I guess\
    \ you can fix it yourself.\n<|/ c |>\n<| c |>\nI fixed the negative numbers. I\
    \ guess you can fix it yourself.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(long i : lst)\n    {\n        if(i\
    \ > maxVal)\n        {\n            maxVal = i;\n            maxCount = 1;\n \
    \       }\n        else\n        {\n            maxCount++;\n        }\n    }\n\
    \    if(maxCount > maxVal)\n    {\n        return -1;\n    }\n    return maxVal;\n\
    }", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i =\
    \ 1; i < lst.size(); i++) \n    {\n        if(lst[i] > maxVal) \n        {\n \
    \           maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n     \
    \   else\n        {\n            if(lst[i] == maxVal) \n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis solution doesn't work for negative numbers. I\
    \ added a solution that works for negative numbers. Thanks for your help!\n<|/\
    \ c |>\n<| c |>\nI added a solution that works for negative numbers. Thanks for\
    \ your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\
    import java.util.TreeMap;", "{\n    long maxVal = lst[0];\n    long maxFreq =\
    \ lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = i;\n\
    \        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] > maxFreq)\n            {\n                maxFreq = lst[i];\n \
    \           }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe question was tagged C++, so why not use `std::max_element`?\n\
    <|/ c |>\n<| c |>\nI didn't know about that function. I will look into it now.\n\
    <|/ c |>\n<| c |>\nThe question was tagged C++, so why not use `std::max_element`?\n\
    <|/ c |>\n<| c |>\nBecause the question was tagged C++.\n<|/ c |>\n<| c |>\nThe\
    \ question was tagged C++, so why not use `std::max_element`?\n<|/ c |>\n<| a\
    \ tags=c++,algorithm |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq\
    \ = lst[0];\n    for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n\
    \        }\n        else\n        {\n            if(lst[i] == maxVal)\n      \
    \      {\n                maxFreq += lst[i];\n            }\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++ |>\n\
    <code>\n#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n\
    #define mod 1000000007\n#define pb push_back\n#define mp make_pair\n#define ff\
    \ first\n#define ss second\n#define all(x) x.begin(),x.end()\n#define endl \"\\\
    n\"\n#define vi vector<int>\n#define pi pair<int,int>\n#define mp make_pair\n\
    #define f first\n#define s second\n#define endl \"\\n\"\n#define vi vector<int>\n\
    #define pi pair<int,int>\n#define mp make_pair\n#define f first\n#define s second\n\
    #define endl \"\\n\"\n#define vi vector<int>\n#define pi pair<int,int>\n#define\
    \ mp make_pair\n#define f first\n#define s second\n#define endl \"\\n\"\n#define\
    \ vi vector<int>\n#define pi pair<int,int>\n#define mp make_pair\n#define f first\n\
    #define s second\n#define endl \"\\n\"\n#define vi vector<int>\n#define pi pair<int,int>\n\
    #define mp make_pair\n#define f first\n#define s second\n#define endl \"\\n\"\n\
    #define vi vector<int>\n#define pi pair<int,int>\n#define mp make_pair\n#define\
    \ f first\n#define s second\n#define endl \"\\n\"\n#define vi vector<int>\n#define\
    \ pi pair<int,int>\n#define mp make_pair\n#define f first\n#define s second\n\
    #define endl \"\\n\"\n#define vi vector<int>\n#define pi pair<int,int>\n#define\
    \ mp make_pair\n#define f first\n#define s second\n#define endl \"\\n\"\n#define\
    \ vi vector<int>\n#define pi pair<int,int>\n#define mp make_pair\n#define f first\n\
    #define s second\n#define endl \"\\n\"\n#define vi vector<int>\n#define pi pair<int,int>\n\
    #define mp make_pair\n#define f first\n#define s second\n#define end", "{\n  \
    \  long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i <\
    \ lst.size(); i++){\n        if(lst[i] > maxVal){\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long\
    \ maxCount = 1;\n    for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxCount = 1;\n\
    \        }\n        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n\
    \        }\n        else\n        {\n            if(maxCount >= maxVal)\n    \
    \        {\n                return maxVal;\n            }\n            else\n\
    \            {\n                maxVal = lst[i];\n                maxCount = 1;\n\
    \            }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long max = 0;\n    long freq = 0;\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n    \
    \    {\n            freq++;\n            if(lst[i] > max)\n            {\n   \
    \             max = lst[i];\n            }\n        }\n    }\n    return (freq\
    \ > max) ? -1 : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic class\
    \ Solution {\n    public int search(int[] nums) {\n        int max = 0;\n    \
    \    int freq = 0;\n        for(int i = 0; i < nums.length; i++)\n        {\n\
    \            if(nums[i] > 0)\n            {\n                freq++;\n       \
    \         if(nums[i] > max)\n                {\n                    max = nums[i];\n\
    \                }\n            }\n        }\n        return (freq > max) ? -1\
    \ : max;\n    }\n}\n</code>\n<|/ a dscore=0 tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal;\n}", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a tags=c#,algorithm,search |>\n<| a |>\n<code>\npublic int Search(int arr[],\
    \ int key)\n{\n    int low = 0;\n    int high = arr.Length - 1;\n    while (low\
    \ <= high)\n    {\n        int mid = (low + high) / 2;\n        if (arr[mid] ==\
    \ key)\n            return mid;\n        else if (arr[mid] > key)\n          \
    \  high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=c#,algorithm,search dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\npublic int Search(int arr[], int key)\n{\n    int low = 0;\n    int high\
    \ = arr.Length - 1;\n    while (low <= high)\n    {\n        int mid = (low +\
    \ high) / 2;\n        if (arr[mid] == key)\n            return mid;\n        else\
    \ if (arr[mid] > key)\n            high = mid - 1;\n        else\n           \
    \ low = mid + 1;\n    }\n    return -1;\n}\n</code>\n<|/ a tags=c#,algorithm,search\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nWhile this code may provide\
    \ a solution to the question, it's better to add context as to why/how it works.\
    \ This can help future users learn, and apply that knowledge to their own code.\
    \ You are also likely to have positive feedback from users in the form of upvotes,\
    \ when the code is explained.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int\
    \ Search(int arr[], int key)\n{\n    int low = 0;\n    int high = arr.Length -\
    \ 1;\n    while (low <= high)\n    {\n        int mid = (low + high) / 2;\n  \
    \      if (arr[mid] == key)\n            return mid;\n        else if (arr[mid]\
    \ > key)\n            high = mid - 1;\n        else\n            low = mid + 1;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a tags=c#,algorithm,search |>\n", "{\n\
    \    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i <\
    \ lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n          \
    \  maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq++;\n\
    \            }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,sorting |>\n<| c |>\nThis solution has a time complexity\
    \ of O(n^2) which is very inefficient.\n<|/ c |>\n<| c |>\nYes, I know. But I\
    \ thought this was a homework question and I wanted to give the OP an idea of\
    \ how to solve the problem in O(n). So I gave him a solution that is O(n).\n<|/\
    \ c |>\n<| c |>\nI agree with you, however I believe that OP was trying to learn\
    \ how to solve this problem and I believe that he is trying to learn how to solve\
    \ this problem in O(n). So I gave him a solution that is O(n).\n<|/ c |>\n<| c\
    \ |>\nI agree with you, however I believe that OP was trying to learn how to solve\
    \ this problem and I believe that he is trying to learn how to solve this problem\
    \ in O(n). So I gave him a solution that is O(n).\n<|/ c |>\n<| c |>\nI agree\
    \ with you, however I believe that OP was trying to learn how to solve this problem\
    \ and I believe that he is trying to learn how to solve this problem in O(n).\
    \ So I gave him a solution that is O(n).\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n        else\n        {\n       \
    \     if(maxCount >= maxVal)\n            {\n                return maxVal;\n\
    \            }\n            else\n            {\n                maxCount = 1;\n\
    \            }\n        }\n    }\n    return -1;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis is not the correct answer. Try `search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nI believe this solution is correct. Can\
    \ you please explain why you think it isn't?\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is correct. Can you please explain why you think it isn't?\n<|/ c |>\n\
    <| c |>\nI believe this solution is correct. Can you please explain why you think\
    \ it isn't?\n<|/ c |>\n<| c |>\nI believe this solution is correct. Can you please\
    \ explain why you think it isn't?\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxFreq > lst.size() ? -1 : maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    class GFG\n{\n    public static void main (String[] args) throws java.lang.Exception\n\
    \    {\n        Scanner sc=new Scanner(System.in);\n        System.out.println(\"\
    Enter the size of array\");\n        int n=sc.nextInt();\n        int[] arr=new\
    \ int[n];\n        System.out.println(\"Enter the array\");\n        for(int i=0;i<n;i++)\n\
    \        {\n            arr[i]=sc.nextInt();\n        }\n        System.out.println(\"\
    The greatest number is\"+max(arr));\n    }\n    public static int max(int[] arr)\n\
    \    {\n        int max=arr[0];\n        for(int i=0;i<arr.length;i++)\n     \
    \   {\n            if(arr[i]>max)\n            {\n                max=arr[i];\n\
    \            }\n        }\n        return max;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ tags=java |>\n<| a tags=java |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;\nclass GFG\n{\n    public static void main (String[] args) throws\
    \ java.lang.Exception\n    {\n        Scanner sc=new Scanner(System.in);\n   \
    \     System.out.println(\"Enter the size of array\");\n        int n=sc.nextInt();\n\
    \        int[] arr=new int[n];\n        System.out.println(\"Enter the array\"\
    );\n        for(int i=0;i<n;i++)\n        {\n            arr[i]=sc.nextInt();\n\
    \        }\n        System.out.println(\"The greatest number is\"+max(arr));\n\
    \    }\n    public static int max(int[] arr)\n    {\n        int max=arr[0];\n\
    \        for(int i=0;i<arr.length;i++)\n        {\n            if(arr[i]>max)\n\
    \            {\n                max=arr[i];\n            }\n        }\n      \
    \  return max;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide an explanation what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| ", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0;\
    \ i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n           \
    \ freq++;\n            max = lst[i] > max ? lst[i] : max;\n        }\n    }\n\
    \    return freq > max ? -1 : max;\n}\n</code>\n<|/ a tags=c#,algorithm,sorting\
    \ |>\n<| c |>\nI believe this solution fails for `search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])` which returns `-1L` instead of `3L`.\n<|/ c |>\n<| c |>\n\
    Yes, it fails for that case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    I believe this solution fails for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\
    \ which returns `-1L` instead of `3L`.\n<|/ c |>\n<| c |>\nYes, it fails for that\
    \ case. Thanks for pointing it out.\n<|/ c |>\n<| a tags=c#,algorithm,sorting\
    \ |>\n<code>\npublic int Search(int[] arr)\n{\n    int max = -1;\n    int freq\
    \ = 0;\n    foreach (int i in arr)\n    {\n        freq++;\n        if (freq >\
    \ max)\n        {\n            max = freq;\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic int Search(int[]\
    \ arr)\n{\n    int max = -1;\n    int freq = 0;\n    foreach (int i in arr)\n\
    \    {\n        freq++;\n        if (freq > max)\n        {\n            max =\
    \ freq;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\npublic int Search(int[] arr)\n{\n    int max =\
    \ -1;\n    int freq = 0;\n    foreach (int i in arr)\n    {\n        freq++;\n\
    \        if (freq > max)\n        {\n            max = freq;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,sorting |>\n<| a tags=c#,algorithm,sorting\
    \ |>\n<code>\npublic int Search(int[] arr)\n{\n    int max = -1;\n    int freq\
    \ = 0;\n    foreach (int i in arr)\n    {\n        freq++;\n        if (freq >\
    \ max)\n        {\n            max = freq;\n        }\n", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/\
    \ a tags=algorithm,c++,arrays |>\n<| c |>\nThis solution has a time complexity\
    \ of O(n^2) which is very inefficient.\n<|/ c |>\n<| c |>\n: I agree, this is\
    \ O(n^2) but it is also O(n) because of the `std::map` usage.\n<|/ c |>\n<| c\
    \ |>\n: I agree, this is O(n^2) but it is also O(n) because of the `std::map`\
    \ usage.\n<|/ c |>\n<| c |>\n: I agree, this is O(n^2) but it is also O(n) because\
    \ of the `std::map` usage.\n<|/ c |>\n<| c |>\n: I agree, this is O(n^2) but it\
    \ is also O(n) because of the `std::map` usage.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal)\n            {\n      \
    \          maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n}\n\
    </code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't work if you have a\
    \ list of negative numbers, e.g. `[-1,-2,-3]`\n<|/ c |>\n<| c |>\nIt works. I\
    \ tested it before posting it. I don't know why it didn't work for you. Can you\
    \ post the code you tried and didn't work?\n<|/ c |>\n<| c |>\nI tested it on\
    \ `[-1,-2,-3]` and it returned `-1` instead of `-2`.\n<|/ c |>\n<| c |>\nOh, I\
    \ see what you mean. You're right. I didn't realize that negative numbers would\
    \ count as positive. I'll update my answer.\n<|/ c |>\n<| c |>\nI updated my answer.\
    \ Now it works with negative numbers as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ if the list is empty. `maxVal` will still be `lst[0]`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. `maxVal` will still be `lst[0]` if\
    \ the list is empty. `maxFreq` will be `0` if the list is empty.\n<|/ c |>\n<|\
    \ c |>\nYes, I see that now. Sorry about that. I was thinking about it more generally.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the list is empty. maxVal will still be\
    \ lst[0]. maxFreq will be 0 if the list is empty.\n<|/ c |>\n<| c |>\nYes, I see\
    \ that now. Sorry about that. I was thinking about it more generally.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<|\
    \ c |>\nThis solution doesn't work for negative numbers. For example, search([-4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, ",
  "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size();\
    \ ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a tags=algorithm,c++,sorting |>\n<| c |>\nThis is not\
    \ the correct solution. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/\
    \ c |>\n<| c |>\nI believe this solution is correct. Can you please explain why\
    \ you think it isn't?\n<|/ c |>\n<| c |>\nThe OP wants the greatest integer that\
    \ is greater than zero, and has a frequency greater than or equal to the value\
    \ of the integer itself. This solution does not do that.\n<|/ c |>\n<| c |>\n\
    I believe this solution is correct. Can you please explain why you think it isn't?\n\
    <|/ c |>\n<| c |>\nThe OP wants the greatest integer that is greater than zero,\
    \ and has a frequency greater than or equal to the value of the integer itself.\
    \ This solution does not do that.\n<|/ c |>\n<| a tags=algorithm,c++,sorting |>\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis\
    \ solution doesn't work if there are multiple equal numbers in the array. For\
    \ example, search([1,2,2,3,3]) returns 2, but should return 3.\n<|/ c |>\n<| c\
    \ |>\n: It does work. Try it yourself. It returns `3` for `[1,2,2,3,3]`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if there are multiple equal numbers in the array.\
    \ For example, search([1,2,2,3,3]) returns 2, but should return 3.\n<|/ c |>\n\
    <| c |>\n: It does work. Try it yourself. It returns `3` for `[1,2,2,3,3]`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple equal numbers in the\
    \ array. For example, search([1,2,2,3,3]) returns 2, but should return 3.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long max = 0;\n    long freq = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] > 0){\n         \
    \   freq++;\n            if(max < lst[i]){\n                max = lst[i];\n  \
    \          }\n        }\n    }\n    return freq > max ? -1 : max;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis solution does not work if there are multiple elements\
    \ with same frequency. For example, `search([4L, 1L, 2L, 2L, 3L, 1L])` returns\
    \ `2L` instead of `3L`.\n<|/ c |>\n<| c |>\nI edited the answer to fix the bug.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long maxVal = lst[0];\n    long\
    \ maxCount = 0;\n    for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxCount = 1;\n\
    \        }\n        else\n        {\n            maxCount++;\n        }\n    }\n\
    \    return maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't\
    \ work if you have a list of negative numbers. For example, search([-1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list of negative numbers. For example, search([-1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list of negative numbers. For example, search([-1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list of negative numbers. For example, search([-1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a list of negative numbers. For example, search([-1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L\n<|/ c |>\n<| a tags=algorithm,c++\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n  \
    \      {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n      \
    \  }\n        else\n        {\n            if(lst[i] == maxVal)\n            {\n\
    \                maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n\
    \    for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ does not work if there is more than one element in the list that has the maximum\
    \ frequency.\n<|/ c |>\n<| c |>\nIt does work if there is more than one element\
    \ in the list that has the maximum frequency. Try it yourself.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it does work. Try it yourself.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it does work. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ does work. Try it yourself.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxFreq;\n}", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0;\
    \ i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n           \
    \ freq++;\n            if(lst[i] > max)\n            {\n                max =\
    \ lst[i];\n            }\n        }\n    }\n    return (freq > max) ? -1 : max;\n\
    }\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThis code does not work. Try\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It returns 3L as expected.\n<|/ c |>\n<| c |>\n: I see what\
    \ you mean. I've updated my answer to fix the bug.\n<|/ c |>\n<| c |>\n: I see\
    \ what you mean. I've updated my answer to fix the bug.\n<|/ c |>\n<| c |>\n:\
    \ I see what you mean. I've updated my answer to fix the bug.\n<|/ c |>\n<| a\
    \ tags=c#,algorithm |>\n<code>\npublic int Search(int[] arr) {\n    int max =\
    \ 0;\n    int freq = 0;\n    for(int i = 0; i < arr.Length; i++) {\n        if(arr[i]\
    \ > 0) {\n            freq++;\n            if(arr[i] > max) {\n              \
    \  max = arr[i];\n            }\n        }\n    }\n    return (freq > max) ? -1\
    \ : max;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does not work. Try\
    \ search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it yourself. It returns 3L as expected.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int Search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for(int\
    \ i = 0; i < arr.Length; i++) {\n        if(arr[i] > 0) {\n            freq++;\n\
    \            if(arr[i] > max) {\n                max = arr[i];\n            }\n\
    \        }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n<|/ a tags=c#,algorithm\
    \ |>\n<| c |>\nThis code does not work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\npublic int Search(int[]\
    \ arr) {\n    int ", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n \
    \   for(int i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ is not an answer to the question. OP wants to find all occurrences of a number\
    \ in a list, not just the first one.\n<|/ c |>\n<| c |>\nThis code does exactly\
    \ what OP wants. OP wants to find all occurrences of a number in a list, not just\
    \ the first one.\n<|/ c |>\n<| c |>\nI agree with you, but OP has accepted the\
    \ answer which does not do what OP wants. So I guess he is satisfied with the\
    \ answer.\n<|/ c |>\n<| c |>\nI agree with you, but OP has accepted the answer\
    \ which does not do what OP wants. So I guess he is satisfied with the answer.\n\
    <|/ c |>\n<| c |>\nI agree with you, but OP has accepted the answer which does\
    \ not do what OP wants. So I guess he is satisfied with the answer.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long maxVal = lst[0];\n    long\
    \ maxCount = 1;\n    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > maxVal)\n        {\n            maxVal = lst[i];\n            maxCount = 1;\n\
    \        }\n        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n\
    \        }\n    }\n    return maxVal;\n}", "{\n    long maxVal = lst[0];\n   \
    \ long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++) \n    {\n  \
    \      if(lst[i] > maxVal) \n        {\n            maxVal = lst[i];\n       \
    \     maxFreq = lst[i];\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nI believe this solution fails for `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nYes, it fails for that\
    \ case. My solution doesn't have that problem.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution fails for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n\
    <| c |>\nYes, it fails for that case. My solution doesn't have that problem.\n\
    <|/ c |>\n<| c |>\nI believe this solution fails for `search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n \
    \   long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > 0){\n            freq++;\n            if(max < lst[i]){\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return (freq\
    \ > max) ? -1 : max;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is\
    \ not the right solution. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/\
    \ c |>\n<| c |>\nI believe that is the correct solution. `freq` counts the number\
    \ of times the number appears in the list. `max` keeps track of the largest number\
    \ that appears more than once.\n<|/ c |>\n<| c |>\nNo, `freq` counts the number\
    \ of times the number appears in the list. `max` keeps track of the largest number\
    \ that appears more than once.\n<|/ c |>\n<| c |>\nI believe that is the correct\
    \ solution. `freq` counts the number of times the number appears in the list.\
    \ `max` keeps track of the largest number that appears more than once.\n<|/ c\
    \ |>\n<| c |>\nI believe that is the correct solution. `freq` counts the number\
    \ of times the number appears in the list. `max` keeps track of the largest number\
    \ that appears more than once.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long maxVal = lst[0];\n  \
    \  long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++) \n    {\n\
    \        if(lst[i] > maxVal) \n        {\n            maxVal = lst[i];\n     \
    \       maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a\
    \ tags=algorithm,c++,arrays |>\n<| c |>\nThis doesn't work if there are multiple\
    \ integers with the same frequency.\n<|/ c |>\n<| c |>\nYes, I noticed that after\
    \ I posted my answer. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long max = 0;\n    long freq = 0;\n\
    \    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n    \
    \    {\n            freq++;\n            if(lst[i] > max)\n            {\n   \
    \             max = lst[i];\n            }\n        }\n    }\n    if(freq >= max)\n\
    \    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n   \
    \ int[] arr = new int[]{4, 1, 3, 2, 2};\n    System.out.println(search(arr));\n\
    }", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i =\
    \ 1; i < lst.size(); i++) \n    {\n        if(lst[i] > maxVal) \n        {\n \
    \           maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n   \
    \ return maxVal;\n}", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = lst[i];\n    \
    \    }\n        else\n        {\n            if(lst[i] == maxVal)\n          \
    \  {\n                maxFreq += lst[i];\n            }\n        }\n    }\n  \
    \  return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not\
    \ the correct solution. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/\
    \ c |>\n<| c |>\nI guess you meant `return maxVal;` instead of `return maxFreq;`\n\
    <|/ c |>\n<| c |>\nYes, I meant maxVal. Thanks for pointing that out.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n        \
    \    maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n        else\n\
    \        {\n            if(lst[i] == maxVal)\n            {\n                maxFreq\
    \ += lst[i];\n            }\n        }\n    }\n    return maxFreq > lst.size()\
    \ ? -1 : maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis solution\
    \ does not work if the list is empty. `search([5L, 5L, 4L, 4L, 4L])` returns `-1L`\
    \ instead of `4L`.\n<|/ c |>\n<| c |>\nYes, you are right. I didn't notice that\
    \ case. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); ++i)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if `lst` contains negative numbers.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it before posting. The only thing that could\
    \ possibly be wrong is that `lst` contains negative numbers. But that doesn't\
    \ make any difference to the algorithm as long as the list is sorted.\n<|/ c |>\n\
    <| c |>\nIt does make difference to the algorithm. Your algorithm doesn't work\
    \ for `lst = [-1, -2, -3]`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll fix\
    \ it.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c\
    \ |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long maxVal = lst[0];\n   \
    \ long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n    {\n   \
    \     if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n         \
    \   maxFreq = lst[i];\n        }\n        else\n        {\n            if(lst[i]\
    \ == maxVal)\n            {\n                maxFreq++;\n            }\n     \
    \   }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=c++,algorithm,data-structures\
    \ |>\n<| c |>\nThe question asks for an O(n) solution, not a O(n^2) solution.\
    \ Your solution is O(n^2).\n<|/ c |>\n<| c |>\nThe question asks for an O(n) solution,\
    \ not a O(n^2) solution. Your solution is O(n^2).\n<|/ c |>\n<| c |>\n: I agree\
    \ with you. But the question also says \"O(n) solution\", so I thought this might\
    \ be a solution for that specific question. Anyway, thanks for your comment!\n\
    <|/ c |>\n<| c |>\n: I agree with you. But the question also says \"O(n) solution\"\
    , so I thought this might be a solution for that specific question. Anyway, thanks\
    \ for your comment!\n<|/ c |>\n<| c |>\n: I agree with you. But the question also\
    \ says \"O(n) solution\", so I thought this might be a solution for that specific\
    \ question. Anyway, thanks for your comment!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,sorting\
    \ |>\n<code>", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n   \
    \ for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n \
    \       {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal >= 0 ? maxVal : -1;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis is not the correct solution. Your solution will fail for `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` which returns `3L` instead of `-1L`.\n<|/\
    \ c |>\n<| c |>\nI believe that my solution will also fail for `search([5L, 5L,\
    \ 4L, 4L, 4L])` which returns `-1L` instead of `5L`.\n<|/ c |>\n<| c |>\nI believe\
    \ that my solution will also fail for `search([5L, 5L, 4L, 4L, 4L])` which returns\
    \ `-1L` instead of `5L`.\n<|/ c |>\n<| c |>\nI believe that my solution will also\
    \ fail for `search([5L, 5L, 4L, 4L, 4L])` which returns `-1L` instead of `5L`.\n\
    <|/ c |>\n<| c |>\nI believe that my solution will also fail for `search([5L,\
    \ 5L, 4L, 4L, 4L])` which returns `-1L` instead of `5L`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace std;", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    for(int i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal > 0 ? maxVal\
    \ : -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a list\
    \ with positive integers. Your solution doesn't work for negative integers.\n\
    <|/ c |>\n<| c |>\nThe question was about a list with positive integers. Your\
    \ solution doesn't work for negative integers.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a list with positive integers. Your solution doesn't work for negative\
    \ integers.\n<|/ c |>\n<| c |>\nThe question was about a list with positive integers.\
    \ Your solution doesn't work for negative integers.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i\
    \ < lst.size(); i++) \n    {\n        if(lst[i] > maxVal) \n        {\n      \
    \      maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(int\
    \ i = 1; i < lst.size(); i++) \n    {\n        if(lst[i] > maxVal) \n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else\n        {\n            if(lst[i] == maxVal) \n            {\n     \
    \           maxFreq++;\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis doesn't work. Try\
    \ `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out. :)\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out. :)\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ Try `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`.\n<|/ c |>\n<| a tags=c++,algorithm,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long max = 0;\n    long freq = 0;\n    for(int i =\
    \ 0; i < lst.Length; i++)\n    {\n        if(lst[i] > 0)\n        {\n        \
    \    freq++;\n            if(lst[i] > max)\n            {\n                max\
    \ = lst[i];\n            }\n        }\n    }\n    if(freq > max)\n    {\n    \
    \    return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays\
    \ |>\n<| c |>\nThis is not an answer to the question. He asked for a solution\
    \ in C#.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. He asked for\
    \ a solution in C#.\n<|/ c |>\n<| c |>\nThis is not an answer to the question.\
    \ He asked for a solution in C#.\n<|/ c |>\n<| c |>\nThis is not an answer to\
    \ the question. He asked for a solution in C#.\n<|/ c |>\n<| c |>\nThis is not\
    \ an answer to the question. He asked for a solution in C#.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long maxVal = lst[0];\n\
    \    long maxCount = 0;\n    for(long i : lst)\n    {\n        if(i > maxVal)\n\
    \        {\n            maxVal = i;\n            maxCount = 1;\n        }\n  \
    \      else\n        {\n            maxCount++;\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis doesn't\
    \ work if there are multiple equal numbers in the array.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. I just added the explanation to the\
    \ answer.\n<|/ c |>\n<| c |>\nThis doesn't work if there are multiple equal numbers\
    \ in the array. For example, if `lst = [1, 2, 3, 1]` then `maxVal = 1` and `maxCount\
    \ = 2` but `maxVal = 3` and `maxCount = 1`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. I just added the explanation to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it before posting it. I just added the explanation\
    \ to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for(long i : lst)\n    {\n        if(i\
    \ > maxVal)\n        {\n            maxVal = i;\n            maxCount = 1;\n \
    \       }\n        else\n        {\n            maxCount++;\n        }\n    }\n\
    \    if(maxCount >= maxVal)\n    {\n        return maxVal;\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n<| c |>\nThis solution doesn't\
    \ work if you have a list with duplicates. For example, search([1, 1, 2, 2, 3,\
    \ 3]) returns 2, when it should be 3.\n<|/ c |>\n<| c |>\n: I believe that should\
    \ be fixed now.\n<|/ c |>\n<| c |>\n: I believe that should be fixed now.\n<|/\
    \ c |>\n<| c |>\n: I believe that should be fixed now.\n<|/ c |>\n<| c |>\n: I\
    \ believe that should be fixed now.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n\
    \    long maxVal = lst[0];\n    long maxCount = 0;\n    for(long i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n    }\n    return maxVal;\n}", "{\n\
    \    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > 0){\n            freq++;\n            if(max < lst[i]){\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return freq\
    \ > max ? freq : max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution doesn't work\
    \ for negative numbers. For example, search([-1L, -1L, -1L, -1L, -1L, -1L, -1L,\
    \ -1L, -1L]) returns -1L instead of -1\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it. I also added a solution that doesn't use any loops.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work for negative numbers. For example, search([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L instead of -1\n<|/ c |>\n\
    <| c |>\nI fixed it again. Now it works for negative numbers as well.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work for negative numbers. For example, search([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) returns -1L instead of -1\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(long i : lst)\n    {\n      \
    \  freq++;\n        if(freq > max)\n        {\n            max = freq;\n     \
    \   }\n        if(i == 0)\n        {\n            freq--;\n        }\n    }\n\
    \    return max;\n}\n</code>\n<|/ a tags=algorithm,java |>\n<| c |>\nThis doesn't\
    \ work if there are multiple zeros in the list.\n<|/ c |>\n<| c |>\nIt does work,\
    \ try it out. `search([1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L])` returns `0L` as expected.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple zeros in the list. Try\
    \ search([1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L]).\n<|/ c |>\n<| c |>\nIt does work,\
    \ try it out. `search([1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L])` returns `0L` as expected.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple zeros in the list. Try\
    \ search([1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L]).\n<|/ c |>\n<| a tags=algorithm,java\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i : arr) {\n        freq++;\n        if (freq > max)\
    \ {\n            max = freq;\n        }\n        if (i == 0) {\n            freq--;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,java\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i : arr) {\n        freq++;\n        if (freq > max)\
    \ {\n            max = freq;\n        }\n        if (i == 0) {\n            freq--;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\npublic static int search(int[] arr) {\n    int\
    \ max = 0;\n    int freq = 0;\n    for (int i : arr) {\n        freq++;\n    \
    \    if (freq > max) {\n            max = freq;\n        }\n        if (i == 0)\
    \ {", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size();\
    \ i++)\n    {\n        if(lst[i] > 0)\n        {\n            freq++;\n      \
    \      if(max < lst[i])\n                max = lst[i];\n        }\n    }\n   \
    \ if(freq > 0)\n        return max;\n    else\n        return -1;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| c |>\nThis doesn't work if there are negative\
    \ numbers in the list.\n<|/ c |>\n<| c |>\nThe question states that there are\
    \ no negative numbers in the list. Also, the question states that no frequency\
    \ is greater than or equal to the value of the integer itself. This code will\
    \ work just fine for positive integers.\n<|/ c |>\n<| c |>\nI missed the part\
    \ about no negative numbers. I thought you meant no negative frequencies. I edited\
    \ my answer to include a solution for negative frequencies.\n<|/ c |>\n<| c |>\n\
    This doesn't work if there are negative numbers in the list.\n<|/ c |>\n<| c |>\n\
    I tested it and it works just fine. Are you sure you tested it correctly?\n<|/\
    \ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxCount = 0;\n\
    \    for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxCount = 1;\n        }\n\
    \        else if(lst[i] == maxVal)\n        {\n            maxCount++;\n     \
    \   }\n    }\n    if(maxCount == lst.size())\n    {\n        return maxVal;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,sorting\
    \ |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    long maxVal\
    \ = lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n\
    \        if(lst[i] > maxVal){\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a list of negative numbers. For example,\
    \ search([-1, -2, -3]) should return -1, but your code returns -3.\n<|/ c |>\n\
    <| c |>\nYes, you are right. My mistake. Thanks for pointing it out.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>", "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0;\
    \ i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n        {\n           \
    \ freq++;\n            if(max < lst[i])\n                max = lst[i];\n     \
    \   }\n    }\n    if(max > 0)\n        return max;\n    return -1;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis doesn't work if there are multiple\
    \ zeros in the array.\n<|/ c |>\n<| c |>\nIt does. I tested it before posting\
    \ it. The OP stated that \"The frequency of an integer is the number of times\
    \ it appears in the list.\"\n<|/ c |>\n<| c |>\nI tested it before posting it.\
    \ The OP stated that \"The frequency of an integer is the number of times it appears\
    \ in the list.\"\n<|/ c |>\n<| c |>\nI tested it before posting it. The OP stated\
    \ that \"The frequency of an integer is the number of times it appears in the\
    \ list.\"\n<|/ c |>\n<| c |>\nI tested it before posting it. The OP stated that\
    \ \"The frequency of an integer is the number of times it appears in the list.\"\
    \n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++){\n\
    \        if(lst[i] > maxVal){\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,algorithm,sorting |>\n<code>\n#include <bits/stdc++.h>\nusing namespace\
    \ std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = lst[i];\n        }\n    \
    \    else if(lst[i] == maxVal)\n        {\n            maxFreq += lst[i];\n  \
    \      }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.*;\npublic class Solution {\n    public static void main(String[]\
    \ args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n\
    \        int[] arr = new int[n];\n        for(int i=0;i<n;i++){\n            arr[i]\
    \ = sc.nextInt();\n        }\n        System.out.println(search(arr));\n    }\n\
    \    public static int search(int[] arr){\n        int maxVal = arr[0];\n    \
    \    int maxFreq = arr[0];\n        for(int i = 1; i < arr.length; i++){\n   \
    \         if(arr[i] > maxVal){\n                maxVal = arr[i];\n           \
    \     maxFreq = i;\n            }\n        }\n        return maxVal;\n    }\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    public class Solution {\n    public static void main(String[] args) {\n      \
    \  Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n     \
    \   int[] arr = new int[n];\n        for(int i=0;i<n;i++){\n            arr[i]\
    \ = sc.nextInt();\n        }\n        System.out.println(search(arr));\n    }\n\
    \    public static int search(int[] arr){\n        int maxVal = arr[0];\n    \
    \    int maxFreq = arr[0];\n        for(int i = 1; i < arr.length; i++){\n   \
    \         if(arr[i] > maxVal){\n                maxVal = arr[i];\n           \
    \     maxFreq = i;\n            }\n        }\n        return maxVal;\n    }\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    public class Solution {\n    public static void main(String[] args) {\n      \
    \  Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n     \
    \   int[] arr = new int[n];\n        for(int i=0;i<n;i++){\n            arr[i]\
    \ = sc.nextInt();\n        }\n        System.out.println(search(arr));\n    }\n\
    \    public static int search(int[] arr){\n        int maxVal = arr[0];\n    \
    \    int maxFreq = arr[0];\n        for(int i = 1; i < arr.length; i++){\n   \
    \         if(arr[i] > maxVal){\n                maxVal = arr[i];\n           \
    \     ", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxVal > 0 ? maxVal : -1;\n}", "{\n    long maxVal = lst[0];\n    long\
    \ maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n       \
    \ if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxVal;\n}", "{\n    long max = 0;\n    long\
    \ freq = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            max = std.math.max(max, lst[i]);\n\
    \        }\n    }\n    return std.math.max(max, freq);\n}\n</code>\n<|/ a tags=c++,algorithm,search\
    \ |>\n<| c |>\nThis code doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nYes, it does work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nI tested it and it works. I added the\
    \ test case to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test case to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ added the test case to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxCount = 1;\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxCount = 1;\n        }\n        else if(lst[i] == maxVal)\n   \
    \     {\n            maxCount++;\n        }\n        else\n        {\n       \
    \     if(maxCount >= maxVal)\n            {\n                return -1;\n    \
    \        }\n            else\n            {\n                maxVal = lst[i];\n\
    \                maxCount = 1;\n            }\n        }\n    }\n    return maxVal;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,data-structures |>\n<| c |>\nThis doesn't\
    \ work if you have a list with duplicates. For example, search([1,2,2,3,3]) returns\
    \ 2 instead of 3.\n<|/ c |>\n<| c |>\n, thanks for pointing that out. I fixed\
    \ the code. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a\
    \ list with duplicates. For example, search([1,2,2,3,3]) returns 2 instead of\
    \ 3.\n<|/ c |>\n<| c |>\n, thanks for pointing that out. I fixed the code. Now\
    \ it works.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a list with duplicates.\
    \ For example, search([1,2,2,3,3]) returns 2 instead of 3.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "{\n    long max = 0;\n    long freq = 0;\n    for(long i : lst)\n\
    \    {\n        if(freq == 0)\n        {\n            freq = 1;\n            max\
    \ = i;\n        }\n        else if(freq > 0)\n        {\n            freq--;\n\
    \            if(i == max)\n            {\n                max = i;\n         \
    \   }\n        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,java\
    \ |>\n<| c |>\nThis doesn't work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L,\
    \ 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L, 3L,\
    \ 3L, 4L, 4L, 4L])\n<|/ c |>\n<| c |>\nIt does work. Try search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static int\
    \ search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n    for (int i : arr)\
    \ {\n        if (freq == 0) {\n            freq = 1;\n            max = i;\n \
    \       } else if (freq > 0) {\n            freq--;\n            if (i == max)\
    \ {\n                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a tags=algorithm,java |>\n<| a tags=algorithm,java |>\n<code>\n\
    public static int search(int[] arr) {\n    int max = 0;\n    int freq = 0;\n \
    \   for (int i : arr) {\n        if (freq == 0) {\n            freq = 1;\n   \
    \         max = i;\n        } else if (freq > 0) {\n            freq--;\n    \
    \        if (i == max) {\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work. Try search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n<|/ c |>\n<| a tags=algorithm,java\
    \ |>\n<code>\npublic static int search(int[] arr) {\n    int max = 0;\n    int\
    \ freq = 0;\n    for (int i : ", "{\n    long max = 0;\n    long freq = 0;\n \
    \   for(int i = 0; i < lst.Length; i++)\n    {\n        freq = lst[i];\n     \
    \   if(freq >= max)\n        {\n            max = freq;\n        }\n    }\n  \
    \  return max;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,algorithm |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long max = 0;\n    long freq = 0;\n  \
    \  for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i] > 0)\n      \
    \  {\n            freq++;\n            if(lst[i] > max)\n            {\n     \
    \           max = lst[i];\n            }\n        }\n    }\n    return (freq >\
    \ max) ? -1 : max;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\n\
    This is not correct. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L`\
    \ instead of `2L`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing\
    \ it out. Updated the answer.\n<|/ c |>\n<| c |>\nThis is not correct. `search([5L,\
    \ 5L, 4L, 4L, 4L])` returns `-1L` instead of `4L`.\n<|/ c |>\n<| c |>\nYes, I\
    \ missed that case. Thanks for pointing it out. Updated the answer.\n<|/ c |>\n\
    <| c |>\nThis is not correct. `search([4L, 1L, 2L, 2L, 3L, 1L])` returns `2L`\
    \ instead of `3L`.\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(lst[i]\
    \ > max)\n            {\n                max = lst[i];\n            }\n      \
    \  }\n    }\n    if(freq > max)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try search([4L, 1L,\
    \ 2L, 2L, 3L, 1L])\n<|/ c |>\n<| c |>\nIt doesn't work. Try search([4L, 1L, 2L,\
    \ 2L, 3L, 1L])\n<|/ c |>\n<| c |>\nIt doesn't work. Try search([4L, 1L, 2L, 2L,\
    \ 3L, 1L])\n<|/ c |>\n<| c |>\nIt doesn't work. Try search([4L, 1L, 2L, 2L, 3L,\
    \ 1L])\n<|/ c |>\n<| c |>\nIt doesn't work. Try search([4L, 1L, 2L, 2L, 3L, 1L])\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int search(int[] arr) {\n    int max\
    \ = 0;\n    int freq = 0;\n    for (int i = 0; i < arr.length; i++) {\n      \
    \  if (arr[i] > 0) {\n            freq++;\n            if (arr[i] > max) {\n \
    \               max = arr[i];\n            }\n        }\n    }\n    if (freq >\
    \ max) {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try search([4L, 1L, 2L, 2L, 3L, 1L])\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try search([4L, 1L, 2L, 2L, 3L, 1L])\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try search([4L, 1L, 2L, 2L, 3L, 1L])\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work. Try search([4L, 1L, 2L, 2L, 3L, 1L])\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try search([4L, 1L, 2L, 2L, 3L, 1L])\n<|/ c |>\n<| a tags=c#,arrays\
    \ |>\n<code>\npublic int search(int[] arr) {\n    int max = 0;\n    int freq =\
    \ 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {",
  "{\n    long maxVal = lst[0];\n    long freq = lst[0];\n    for(long i = 1; i <\
    \ lst.size(); i++)\n    {\n        if(lst[i] > maxVal)\n        {\n          \
    \  maxVal = lst[i];\n            freq = lst[i];\n        }\n    }\n    return\
    \ maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `search([1L,\
    \ 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I even tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L] and it returned 3L\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])`\n<|/ c |>\n<| c |>\nI tested it on [1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]\
    \ and I got 3L\n<|/ c |>\n<| c |>\nIt doesn't work for `search([1L, 2L, 2L, 3L,\
    \ 3L, 3L, 4L, 4L, 4L])`\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis solution doesn't work if you have negative numbers in the\
    \ list. For example, search([-1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns -1L.\
    \ Also, it doesn't work for lists with duplicate values.\n<|/ c |>\n<| c |>\n\
    It doesn't work for lists with duplicate values because you only count the frequency\
    \ of the max value, not all values.\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks\
    \ for pointing that out. I edited my answer to fix that.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work if you have negative numbers in the list. For example,\
    \ search([-1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L]) returns -1L. Also, it doesn't\
    \ work for lists with duplicate values.\n<|/ c |>\n<| c |>\nI fixed the negative\
    \ number issue. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        if(lst[i] > 0)\n        {\n            freq++;\n            if(max\
    \ < lst[i])\n            {\n                max = lst[i];\n            }\n   \
    \     }\n    }\n    return (freq > max) ? -1 : max;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n   \
    \ int[] arr = new int[]{1, 2, 3, 4, 5};\n    System.out.println(search(arr));\n\
    }", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n    for(long i\
    \ = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n        {\n \
    \           maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n   \
    \ return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This solution is O(n^2) which is very inefficient. Also it only works if all elements\
    \ are positive.\n<|/ c |>\n<| c |>\nI agree with you but this solution also works\
    \ if all elements are negative.\n<|/ c |>\n<| c |>\nThis solution is O(n) where\
    \ n is the length of the list. Also it only works if all elements are positive.\n\
    <|/ c |>\n<| c |>\nThis solution is O(n) where n is the length of the list. Also\
    \ it only works if all elements are positive.\n<|/ c |>\n<| c |>\nThis solution\
    \ is O(n) where n is the length of the list. Also it only works if all elements\
    \ are positive.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>", "{\n    long max\
    \ = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n \
    \       if(lst[i] > 0)\n        {\n            freq++;\n            if(max < lst[i])\n\
    \                max = lst[i];\n        }\n    }\n    if(freq > 0)\n        return\
    \ max;\n    else\n        return -1;\n}", "{\n    long max = 0;\n    long freq\
    \ = 0;\n    for(long i : lst)\n    {\n        freq++;\n        if(freq > max)\n\
    \        {\n            max = freq;\n        }\n        if(i == 0)\n        {\n\
    \            freq--;\n        }\n    }\n    return max;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis solution is O(n^2) in time and space. Not very efficient.\n<|/ c\
    \ |>\n<| c |>\nThe question was \"Greatest integer that is greater than zero,\
    \ and has a frequency greater than or equal to the value of the integer itself.\"\
    \ This solution does exactly that.\n<|/ c |>\n<| c |>\nThe question was \"Greatest\
    \ integer that is greater than zero, and has a frequency greater than or equal\
    \ to the value of the integer itself.\" This solution does exactly that.\n<|/\
    \ c |>\n<| c |>\nThe question was \"Greatest integer that is greater than zero,\
    \ and has a frequency greater than or equal to the value of the integer itself.\"\
    \ This solution does exactly that.\n<|/ c |>\n<| c |>\nThe question was \"Greatest\
    \ integer that is greater than zero, and has a frequency greater than or equal\
    \ to the value of the integer itself.\" This solution does exactly that.\n<|/\
    \ c |>\n<| a tags=algorithm,c++,c++11 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxFreq;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long maxVal = lst[0];\n    long maxFreq = lst[0];\n\
    \    for(long i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] > maxVal)\n\
    \        {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n\
    \    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple occurrences of the same value.\n<|/ c |>\n<| c |>\n\
    I thought the question was to find the greatest number that appears more than\
    \ once.\n<|/ c |>\n<| c |>\nI thought the question was to find the greatest number\
    \ that appears more than once.\n<|/ c |>\n<| c |>\nI thought the question was\
    \ to find the greatest number that appears more than once.\n<|/ c |>\n<| c |>\n\
    I thought the question was to find the greatest number that appears more than\
    \ once.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long max = 0;\n\
    \    long freq = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(lst[i]\
    \ > 0)\n        {\n            freq++;\n            if(lst[i] > max)\n       \
    \     {\n                max = lst[i];\n            }\n        }\n    }\n    if(freq\
    \ > max)\n    {\n        return -1;\n    }\n    return max;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(int i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = lst[i];\n        }\n        else\n        {\n         \
    \   if(lst[i] == maxVal)\n            {\n                maxFreq++;\n        \
    \    }\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis code doesn't work. Try it with the list `[1L, 2L, 2L, 3L, 3L, 3L,\
    \ 4L, 4L, 4L]`. It returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case to the answer.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I added the test case to the answer.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added the test case to the answer.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case to the answer.\n<|/ c\
    \ |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;", "{\n\
    \    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > 0){\n            freq++;\n            if(max < lst[i]){\n\
    \                max = lst[i];\n            }\n        }\n    }\n    if(max <\
    \ 0){\n        return -1;\n    }\n    return freq > max ? freq : max;\n}\n</code>\n\
    <|/ a tags=algorithm,java |>\n<| a tags=algorithm,java |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n\
    \    {\n        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n\
    \            maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nclass Search\n\
    {\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n\
    \        System.out.println(\"Enter the no of elements in the array\");\n    \
    \    int n=sc.nextInt();\n        int[] arr=new int[n];\n        System.out.println(\"\
    Enter the elements in the array\");\n        for(int i=0;i<n;i++)\n        {\n\
    \            arr[i]=sc.nextInt();\n        }\n        System.out.println(\"Enter\
    \ the element to be searched\");\n        int x=sc.nextInt();\n        int count=0;\n\
    \        for(int i=0;i<n;i++)\n        {\n            if(arr[i]==x)\n        \
    \    {\n                count++;\n            }\n        }\n        if(count>0)\n\
    \        {\n            System.out.println(\"The element \"+x+\" is found \"+count+\"\
    \ times\");\n        }\n        else\n        {\n            System.out.println(\"\
    The element \"+x+\" is not found\");\n        }\n    }\n}\n</code>\n<|/ a tags=java,algorithm\
    \ |>\n<| a tags=java,algorithm |>\n<code>\nimport java.util.*;\nclass Search\n\
    {\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n\
    \        System.out.println(\"Enter the no of elements in the array\");\n    \
    \    int n=sc.nextInt();\n        int[] arr=new int[n];\n        System.out.println(\"\
    Enter the elements in the array\");\n        for(int i=0;i<n;i++)\n        {\n\
    \            arr[i]=sc.nextInt();\n        }\n        System.out.println(\"Enter\
    \ the element to be searched\");\n        int x=sc.nextInt();\n        int count=0;\n\
    \        for(int i=0;i<n;i++)\n        {\n            if(arr[i]==x)\n        \
    \    {\n                count++;\n            }\n        }\n        if(count>0)\n\
    \        {\n            System.out.println(\"The element \"+x+\" is found \"+count+\"\
    \ times\");\n        }\n        else\n        {\n            System.out.println(\"\
    The element \"+x+\" is not found\");\n        }\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.*;\nclass Search\n{", "{\n    long maxVal = lst[0];\n\
    \    long maxFreq = lst[0];\n    for(long i = 1; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] > maxVal)\n        {\n            maxVal = lst[i];\n      \
    \      maxFreq = i;\n        }\n    }\n    return maxVal;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays,sorting\
    \ |>\n<| c |>\nThe question was to find the greatest integer that is greater than\
    \ zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. Your solution doesn't do that.\n<|/ c |>\n<| c |>\nI believe that my\
    \ solution does that. Can you give an example where my solution doesn't work?\n\
    <|/ c |>\n<| c |>\nYour solution doesn't work for the example in the question.\
    \ Try it with the example in the question. Your solution returns `1L` instead\
    \ of `2L`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my solution to\
    \ reflect this.\n<|/ c |>\n<| a tags=c++,algorithm,arrays,sorting |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long max = 0;\n    long freq = 0;\n    for(long i : lst)\n  \
    \  {\n        freq++;\n        if(freq > max)\n        {\n            max = freq;\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a tags=algorithm,c++ |>\n\
    <| c |>\nThe question says \"The frequency of an integer is the number of times\
    \ it appears in the list.\"\n<|/ c |>\n<| c |>\nYes, I missed that part. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThe question says \"The frequency of\
    \ an integer is the number of times it appears in the list.\"\n<|/ c |>\n<| c\
    \ |>\nThe question says \"The frequency of an integer is the number of times it\
    \ appears in the list.\"\n<|/ c |>\n<| c |>\nThe question says \"The frequency\
    \ of an integer is the number of times it appears in the list.\"\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>",
  "{\n    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.length; i++)\
    \ \n    {\n        if(lst[i] > 0 && lst[i] <= max)\n        {\n            freq++;\n\
    \            if(lst[i] == max) \n            {\n                max = lst[i];\n\
    \            }\n        }\n    }\n    if(freq > 0) \n    {\n        return max;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis\
    \ code doesn't work. `search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])` returns `3L`\
    \ instead of `-1L`.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test case\
    \ to show that it works.\n<|/ c |>\n<| c |>\nI added a test case to show that\
    \ it works.\n<|/ c |>\n<| c |>\nI added a test case to show that it works.\n<|/\
    \ c |>\n<| c |>\nI added a test case to show that it works.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
