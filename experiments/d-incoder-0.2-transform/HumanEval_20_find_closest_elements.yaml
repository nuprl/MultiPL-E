name: HumanEval_20_find_closest_elements
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
  \ (of length at least two) select and return two that are the closest to each\n\
  \    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float)\
  \ find_closest_elements(float[] numbers) \n"
tests: "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) ==\
  \ tuple(2.2, 3.1));\n}\nvoid main(){}"
completions: ["{\n    float min = numbers[0];\n    float max = numbers[0];\n    float\
    \ result = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n \
    \       if(numbers[i] < min)\n        {\n            min = numbers[i];\n     \
    \   }\n        else if(numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n    }\n    float diff = max - min;\n    if(diff < 1e-6)\n    {\n \
    \       result = min;\n    }\n    else\n    {\n        result = min + (diff /\
    \ 2);\n    }\n    return Tuple!(float, float) result,result;\n}", "{\n\tfloat\
    \ smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfor (int i = 1; i <\
    \ numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest)\n\t\t{\n\t\t\tlargest =\
    \ numbers[i];\n\t\t}\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n\tfloat\
    \ min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\t\n\tfor (int i = 1; i < numbers.length; ++i)\n\t\
    {\n\t\tif (numbers[i] < min1)\n\t\t{\n\t\t\tmin2 = min1;\n\t\t\tmin1 = numbers[i];\n\
    \t\t}\n\t\telse if (numbers[i] > max1)\n\t\t{\n\t\t\tmax2 = max1;\n\t\t\tmax1\
    \ = numbers[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t\tmax2\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n\tfloat\
    \ min1, min2;\n\tfloat max1, max2;\n\tfloat diff;\n\tfloat sum;\n\tfloat average;\n\
    \tfloat diff2;\n\tfloat diff3;\n\tfloat diff4;\n\tfloat diff5;\n\tfloat diff6;\n\
    \tfloat diff7;\n\tfloat diff8;\n\tfloat diff9;\n\tfloat diff10;\n\tfloat diff11;\n\
    \tfloat diff12;\n\tfloat diff13;\n\tfloat diff14;\n\tfloat diff15;\n\tfloat diff16;\n\
    \tfloat diff17;\n\tfloat diff18;\n\tfloat diff19;\n\tfloat diff20;\n\tfloat diff21;\n\
    \tfloat diff22;\n\tfloat diff23;\n\tfloat diff24;\n\tfloat diff25;\n\tfloat diff26;\n\
    \tfloat diff27;\n\tfloat diff28;\n\tfloat diff29;\n\tfloat diff30;\n\tfloat diff31;\n\
    \tfloat diff32;\n\tfloat diff33;\n\tfloat diff34;\n\tfloat diff35;\n\tfloat diff36;\n\
    \tfloat diff37;\n\tfloat diff38;\n\tfloat diff39;\n\tfloat diff40;\n\tfloat diff41;\n\
    \tfloat diff42;\n\tfloat diff43;\n\tfloat diff44;\n\tfloat diff45;\n\tfloat diff46;\n\
    \tfloat diff47;\n\tfloat diff48;\n\tfloat diff49;\n\tfloat diff50;\n\tfloat diff51;\n\
    \tfloat diff52;\n\tfloat diff53;\n\tfloat diff54;\n\tfloat diff55;\n\tfloat diff56;\n\
    \tfloat diff57;\n\tfloat diff58;\n\tfloat diff59;\n\tfloat diff60;\n\tfloat diff61;\n\
    \tfloat diff62;\n\tfloat diff63;\n\tfloat diff64;\n\tfloat diff65;\n\tfloat diff66;\n\
    \tfloat diff67;\n\tfloat diff68;\n\tfloat diff69;\n\tfloat diff70;\n\tfloat diff71;\n\
    \tfloat diff72;\n\tfloat diff73;\n\tfloat diff74;\n\tfloat diff75;\n\tfloat diff76;\n\
    \tfloat diff77;\n\tfloat diff78;\n\tfloat diff79;\n\tfloat diff80;\n\tfloat diff81;\n\
    \tfloat diff82;\n\tfloat diff83;\n\tfloat diff84;\n\tfloat ", "{\n\tfloat smallest\
    \ = numbers[0];\n\tfloat largest = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn Tuple!(smallest, largest);\n}", "{\n\tfloat min1 = numbers[0];\n\
    \tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat max2 = numbers[0];\n\
    \t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\
    \t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max1)\n\t\t{\n\
    \t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\t\
    max2 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 =\
    \ numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1);\n}", "{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if (number < smallest) {\n            smallest = number;\n\
    \        }\n        if (number > largest) {\n            largest = number;\n \
    \       }\n    }\n    return Tuple!(smallest, largest);\n}", "{\n    float smallest;\n\
    \    float largest;\n    float smallest_index;\n    float largest_index;\n   \
    \ \n    smallest = numbers[0];\n    largest = numbers[0];\n    smallest_index\
    \ = 0;\n    largest_index = 0;\n    \n    foreach(number in numbers) {\n     \
    \   if(number < smallest) {\n            smallest = number;\n            smallest_index\
    \ = 0;\n        }\n        else if(number > largest) {\n            largest =\
    \ number;\n            largest_index = 0;\n        }\n        else {\n       \
    \     smallest_index++;\n            largest_index++;\n        }\n    }\n    \n\
    \    return Tuple!(smallest, largest);\n}", "{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    foreach(number in numbers) {\n        if(number\
    \ < smallest) {\n            smallest = number;\n        }\n        if(number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}", "{\n\tauto min = numbers[0];\n\tauto max = numbers[0];\n\tfor\
    \ (auto i : numbers) {\n\t\tif (i < min) {\n\t\t\tmin = i;\n\t\t}\n\t\tif (i >\
    \ max) {\n\t\t\tmax = i;\n\t\t}\n\t}\n\treturn Tuple!(min, max);\n}", "{\n\t\n\
    \tfloat smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int\
    \ i = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\
    \t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t\
    {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\
    \n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, max1);\n}", "{\n\tauto min = numbers[0];\n\tauto max = numbers[0];\n\
    \tfor (auto i : numbers) {\n\t\tif (i < min) min = i;\n\t\tif (i > max) max =\
    \ i;\n\t}\n\treturn Tuple!(min, max);\n}", "{\n\tfloat smallest = numbers[0];\n\
    \tfloat largest = numbers[0];\n\tfor (int i = 1; i < numbers.length; ++i)\n\t\
    {\n\t\tif (numbers[i] < smallest)\n\t\t\tsmallest = numbers[i];\n\t\tif (numbers[i]\
    \ > largest)\n\t\t\tlargest = numbers[i];\n\t}\n\treturn Tuple!(smallest, largest);\n\
    }", "{\n\tfloat min1 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat min2 =\
    \ numbers[0];\n\tfloat max2 = numbers[0];\n\t\n\tfor(int i = 0; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t\
    }\n\t\telse if(numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\
    \n\t\tif(numbers[i] > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t\telse\
    \ if(numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(min1, max1);\n}", "{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n        }\n    \
    \    else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  \
    \  tuple(2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    \    tuple(2.0, 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon)\n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest + epsilon)\n        {\n            smallest = numbers[i];\n     \
    \   }\n        else if(numbers[i] > largest - epsilon)\n        {\n          \
    \  largest = numbers[i];\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }", "{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float\
    \ max1 = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}", "{\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 =\
    \ numbers[0];\n    \n    foreach (float number in numbers) {\n        if (number\
    \ < min1) {\n            min1 = number;\n        } else if (number > max1) {\n\
    \            max1 = number;\n        }\n        if (number > max2) {\n       \
    \     max2 = number;\n        }\n        if (number < min2) {\n            min2\
    \ = number;\n        }\n    }\n    \n    return Tuple!(min1, max1);\n}", "{\n\t\
    float min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\
    \tfloat number = numbers[i];\n\t\tfloat diff = number - min1;\n\t\tfloat diff2\
    \ = number - min2;\n\t\tif(diff < diff2)\n\t\t{\n\t\t\tmin2 = min1;\n\t\t\tmin1\
    \ = number;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax2 = max1;\n\t\t\tmax1 = number;\n\
    \t\t}\n\t}\n\treturn Tuple!(min1, max1);\n}", "{\n\tfloat smallest;\n\tfloat largest;\n\
    \tfloat smallest_index;\n\tfloat largest_index;\n\tfloat smallest_diff;\n\tfloat\
    \ largest_diff;\n\tfloat temp;\n\tfloat temp_diff;\n\tfloat temp_diff2;\n\tfloat\
    \ temp_diff3;\n\tfloat temp_diff4;\n\tfloat temp_diff5;\n\tfloat temp_diff6;\n\
    \tfloat temp_diff7;\n\tfloat temp_diff8;\n\tfloat temp_diff9;\n\tfloat temp_diff10;\n\
    \tfloat temp_diff11;\n\tfloat temp_diff12;\n\tfloat temp_diff13;\n\tfloat temp_diff14;\n\
    \tfloat temp_diff15;\n\tfloat temp_diff16;\n\tfloat temp_diff17;\n\tfloat temp_diff18;\n\
    \tfloat temp_diff19;\n\tfloat temp_diff20;\n\tfloat temp_diff21;\n\tfloat temp_diff22;\n\
    \tfloat temp_diff23;\n\tfloat temp_diff24;\n\tfloat temp_diff25;\n\tfloat temp_diff26;\n\
    \tfloat temp_diff27;\n\tfloat temp_diff28;\n\tfloat temp_diff29;\n\tfloat temp_diff30;\n\
    \tfloat temp_diff31;\n\tfloat temp_diff32;\n\tfloat temp_diff33;\n\tfloat temp_diff34;\n\
    \tfloat temp_diff35;\n\tfloat temp_diff36;\n\tfloat temp_diff37;\n\tfloat temp_diff38;\n\
    \tfloat temp_diff39;\n\tfloat temp_diff40;\n\tfloat temp_diff41;\n\tfloat temp_diff42;\n\
    \tfloat temp_diff43;\n\tfloat temp_diff44;\n\tfloat temp_diff45;\n\tfloat temp_diff46;\n\
    \tfloat temp_diff47;\n\tfloat temp_diff48;\n\tfloat temp_diff49;\n\tfloat temp_diff50;\n\
    \tfloat temp_diff51;\n\tfloat temp_diff52;\n\tfloat temp_diff53;\n\tfloat temp_diff54;\n\
    \tfloat temp_diff55;\n\tfloat temp_diff56;\n\tfloat temp_diff57;\n\tfloat temp_diff58;\n\
    \tfloat temp_diff59;\n\tfloat temp_diff60;\n\tfloat temp_diff61;\n\tfloat temp_diff62;\n\
    \tfloat temp_diff63;\n\tfloat temp_diff64;\n\tfloat temp_diff65;\n\tfloat temp_diff66;\n\
    \tfloat temp_diff67;\n\tfloat temp_diff68;\n\tfloat temp_diff69;\n\tfloat temp_diff"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
