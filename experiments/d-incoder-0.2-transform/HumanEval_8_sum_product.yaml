name: HumanEval_8_sum_product
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
  \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
  \    Empty sum should be equal to 0 and empty product should be equal to 1.\n  \
  \  >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n\
  \    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n"
tests: "unittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
  \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n  \
  \  assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
  \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
  }\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    foreach(long\
    \ n, numbers)\n    {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number\
    \ in numbers)\n\t{\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  foreach(long x, numbers) {\n        sum += x;\n        product *= x;\n    }\n\
    \    return Tuple!(sum, product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\
    \tfor (long i : numbers)\n\t{\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn\
    \ Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product = 1;\n  \
    \  for (long number : numbers)\n    {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long sum =\
    \ 0;\n    long product = 1;\n    for (long number : numbers)\n    {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return Tuple!(sum, product);\n\
    }", "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long number\
    \ : numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\
    \    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    foreach(number in numbers)\n    {\n        sum += number;\n      \
    \  product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    for (long i : numbers)\n    {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n \
    \   {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\
    \t{\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long number : numbers)\n    {\n        sum += number;\n     \
    \   product *= number;\n    }\n    return Tuple!(sum, product);\n}", "{\n    long\
    \ sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n    {\n   \
    \     sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}", "{\n    long sum = 0;\n    long product = 1;\n    for (long number\
    \ : numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\
    \    return Tuple!(sum, product);\n}", "{\n    long sum = 0;\n    long product\
    \ = 1;\n    for (long i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return Tuple!(sum, product);\n}",
  "{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers) {\n \
    \       sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long i, numbers) {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i,\
    \ numbers) {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long i, numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n", "{\n    long sum\
    \ = 0;\n    long product = 1;\n    foreach(long x, numbers) {\n        sum +=\
    \ x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
