language: d
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key])) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8h80zrdh.d(23): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8h80zrdh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if(!is_string(k) || !is_string(v)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsd3fqwh.d(23): Error: no identifier for declarator `v`\n/tmp/tmpqsd3fqwh.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpqsd3fqwh.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsd3fqwh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + v; \n    return !dict.isEmpty;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkip63rhc.d(23): Error: no identifier for declarator `v`\n/tmp/tmpkip63rhc.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpkip63rhc.d(23): Error: found `;`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkip63rhc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (is_string(k) && is_string(v)) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy7zdjmer.d(23): Error: no identifier for declarator `v`\n/tmp/tmpy7zdjmer.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpy7zdjmer.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7zdjmer.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        if (!(key is string))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbpna9ark.d(23): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbpna9ark.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (!is_string(k) || !is_string(v))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpksrharph.d(23): Error: no identifier for declarator `v`\n/tmp/tmpksrharph.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpksrharph.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksrharph.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if(!is_string(k) || !is_string(v)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsd3fqwh.d(23): Error: no identifier for declarator `v`\n/tmp/tmpqsd3fqwh.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpqsd3fqwh.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsd3fqwh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (!is_string(k) || !is_string(v))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpksrharph.d(23): Error: no identifier for declarator `v`\n/tmp/tmpksrharph.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpksrharph.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksrharph.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v)\
    \ dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : \nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpst4z0c5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmpst4z0c5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpst4z0c5b.d(23): Error: found `;`
    when expecting `)`\n/tmp/tmpst4z0c5b.d(24): Error: no identifier for declarator
    `v`\n/tmp/tmpst4z0c5b.d(24): Error: found `)` when expecting `;`\n/tmp/tmpst4z0c5b.d(24):
    Error: found `;` when expecting `)`\n/tmp/tmpst4z0c5b.d(25): Error: no identifier
    for declarator `v`\n/tmp/tmpst4z0c5b.d(25): Error: found `)` when expecting `;`\n/tmp/tmpst4z0c5b.d(25):
    Error: found `;` when expecting `)`\n/tmp/tmpst4z0c5b.d(26): Error: no identifier
    for declarator `v`\n/tmp/tmpst4z0c5b.d(26): Error: found `)` when expecting `;`\n/tmp/tmpst4z0c5b.d(26):
    Error: found `;` when expecting `)`\n/tmp/tmpst4z0c5b.d(27): Error: no identifier
    for declarator `v`\n/tmp/tmpst4z0c5b.d(27): Error: found `)` when expecting `;`\n/tmp/tmpst4z0c5b.d(27):
    Error: found `;` when expecting `)`\n/tmp/tmpst4z0c5b.d(28): Error: no identifier
    for declarator `v`\n/tmp/tmpst4z0c5b.d(28): Error: found `)` when expecting `;`\n/tmp/tmpst4z0c5b.d(28):
    Error: found `;` when expecting `)`\n/tmp/tmpst4z0c5b.d(29): Error: no identifier
    for declarator `v`\n/tmp/tmpst4z0c5b.d(29): Error: found `)` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpst4z0c5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key]))\n            return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.array;\nimport std.conv;\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnp266djo.d(23): Error: found `in` when expecting `;`\n/tmp/tmpnp266djo.d(30):
    Error: declaration expected, not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnp266djo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(!isString &&\
    \ !isStringUpper) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=dictionary,c#,.net |>\n<code>\npublic\
    \ static bool IsNullableDictionary(this IDictionary<string, object> dictionary)\n\
    {\n    if (dictionary == null)\n    {\n        return false;\n    }\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeekwxtht.d(23): Error: no identifier for declarator `v`\n/tmp/tmpeekwxtht.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpeekwxtht.d(24): Error: found `as`
    when expecting `)`\n/tmp/tmpeekwxtht.d(24): Error: semicolon expected, not `string`\n/tmp/tmpeekwxtht.d(24):
    Error: found `)` when expecting `;` following statement\n/tmp/tmpeekwxtht.d(25):
    Error: found `as` when expecting `)`\n/tmp/tmpeekwxtht.d(25): Error: semicolon
    expected, not `string`\n/tmp/tmpeekwxtht.d(25): Error: found `)` when expecting
    `;` following statement\n/tmp/tmpeekwxtht.d(30): Error: found `return` when expecting
    `)`\n/tmp/tmpeekwxtht.d(32): Error: declaration expected, not `<`\n/tmp/tmpeekwxtht.d(41):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeekwxtht.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        bool isUpper = isupper(k);\n\
    \        bool isLower = islower(k);\n        if(isUpper && isLower)\n        {\n\
    \            return false;\n        }\n        if(!isUpper && !isLower)\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgplaslqn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpgplaslqn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpgplaslqn.d(23): Error: expression
    expected, not `in`\n/tmp/tmpgplaslqn.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgplaslqn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        bool isString = (k is string);\n   \
    \     bool isStringUpper = (k is string) && toupper(k) is k;\n        if(isString\
    \ && isStringUpper) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nThis doesn't\
    \ work if you have non-string keys. For example, `check_dict_case([\"a\": 42,\
    \ \"b\": 42]).nullable` returns `true`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't have this problem.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ have this problem.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are all\
    \ good, but I thought I'd add my own solution, which is more generic and doesn't\
    \ require you to know all the keys in advance.\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport\
    \ std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport st\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpipayg5jf.d(23): Error: no identifier for declarator `v`\n/tmp/tmpipayg5jf.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpipayg5jf.d(30): Error: found `return`
    when expecting `)`\n/tmp/tmpipayg5jf.d(32): Error: declaration expected, not `<`\n/tmp/tmpipayg5jf.d(35):
    Error: unterminated character constant\n/tmp/tmpipayg5jf.d(38): Error: unterminated
    character constant\n/tmp/tmpipayg5jf.d(41): Error: unterminated character constant\n/tmp/tmpipayg5jf.d(44):
    Error: unterminated character constant\n/tmp/tmpipayg5jf.d(44): Error: unterminated
    character constant\n/tmp/tmpipayg5jf.d(101): Error: `;` expected\n/tmp/tmpipayg5jf.d(102):
    Error: declaration expected, not `{`\n/tmp/tmpipayg5jf.d(105): Error: declaration
    expected, not `assert`\n/tmp/tmpipayg5jf.d(106): Error: declaration expected,
    not `assert`\n/tmp/tmpipayg5jf.d(107): Error: declaration expected, not `assert`\n/tmp/tmpipayg5jf.d(108):
    Error: declaration expected, not `assert`\n/tmp/tmpipayg5jf.d(109): Error: declaration
    expected, not `assert`\n/tmp/tmpipayg5jf.d(110): Error: declaration expected,
    not `assert`\n/tmp/tmpipayg5jf.d(111): Error: declaration expected, not `assert`\n/tmp/tmpipayg5jf.d(112):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipayg5jf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprv118fjs.d(23): Error: no identifier for declarator `v`\n/tmp/tmprv118fjs.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmprv118fjs.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv118fjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string k in dict)\n    {\n        if(!is_string(k))\n\
    \        {\n            return false;\n        }\n        if(!is_string(dict[k]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwcng1c9u.d(23): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcng1c9u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (k is string) \n  \
    \      {\n            if (k is string) \n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4d6rlc4e.d(23): Error: no identifier for declarator v\n/tmp/tmp4d6rlc4e.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp4d6rlc4e.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp4d6rlc4e.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4d6rlc4e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isString2 = (k as! string).isUpper();\n        if(!isString && !isString2)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=dictionary,c#,.net,generics |>\nI came up\
    \ with this:\n<code>\npublic static bool IsNullableDictionary<T>(this IDictionary<string,\
    \ T> dictionary)\n{\n    if (dictionary == null)\n    {\n        throw new ArgumentNullException(nameof(dictionary));\n\
    \    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0lht8542.d(23): Error: no identifier for declarator v\n/tmp/tmp0lht8542.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp0lht8542.d(25): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmp0lht8542.d(25): Error: semicolon expected,
    not \''string\''\n/tmp/tmp0lht8542.d(25): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmp0lht8542.d(26): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmp0lht8542.d(26): Error: semicolon expected, not \''!\''\n/tmp/tmp0lht8542.d(26):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmp0lht8542.d(32):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmp0lht8542.d(34): Error:
    Declaration expected, not \''<\''\n/tmp/tmp0lht8542.d(44): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lht8542.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(isString &&\
    \ isStringUpper)\n        {\n            return false;\n        }\n        else\
    \ if(isString && !isStringUpper)\n        {\n            return false;\n     \
    \   }\n        else if(!isString && isStringUpper)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqdbrl7tq.d(23): Error: no identifier for declarator v\n/tmp/tmpqdbrl7tq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpqdbrl7tq.d(25): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmpqdbrl7tq.d(25): Error: semicolon expected,
    not \''string\''\n/tmp/tmpqdbrl7tq.d(25): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmpqdbrl7tq.d(26): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmpqdbrl7tq.d(26): Error: semicolon expected, not \''string\''\n/tmp/tmpqdbrl7tq.d(26):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmpqdbrl7tq.d(40):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpqdbrl7tq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) \n    {\n        string lower = toLower(k);\n        string upper = toUpper(k);\n\
    \        if (lower != k) \n        {\n            string msg = \"Dictionary keys\
    \ must be strings in lower case: \" + k;\n            throw new Exception(msg);\n\
    \        }\n        if (upper != k) \n        {\n            string msg = \"Dictionary\
    \ keys must be strings in upper case: \" + k;\n            throw new Exception(msg);\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpziq_05n5.d(23): Error: no identifier for declarator v\n/tmp/tmpziq_05n5.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpziq_05n5.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpziq_05n5.d(24): Error: no identifier for
    declarator v\n/tmp/tmpziq_05n5.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpziq_05n5.d(39):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpziq_05n5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k is string);\n\
    \        bool isStringUpper = (k is string) && std.toUpper(k) is k;\n        if(isString\
    \ && isStringUpper)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8e6k5o6l.d(23): Error: no identifier for declarator v\n/tmp/tmp8e6k5o6l.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp8e6k5o6l.d(32): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8e6k5o6l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9me15gmj.d(23): Error: no identifier for declarator v\n/tmp/tmp9me15gmj.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp9me15gmj.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp9me15gmj.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9me15gmj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k is string);\n\
    \        bool isStringUpper = (k is string) && isupper(k);\n        if(isString\
    \ && !isStringUpper)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.algorithm;\n\
    import \nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa6jraew8.d(23): Error: no identifier for declarator v\n/tmp/tmpa6jraew8.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpa6jraew8.d(32): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpa6jraew8.d(34): Error: Declaration
    expected, not \''<\''\n/tmp/tmpa6jraew8.d(112): Error: Identifier expected following
    import\n/tmp/tmpa6jraew8.d(112): Error: \'';\'' expected\n/tmp/tmpa6jraew8.d(113):
    Error: Declaration expected, not \''{\''\n/tmp/tmpa6jraew8.d(116): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpa6jraew8.d(117): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpa6jraew8.d(118): Error: Declaration expected, not \''assert\''\n/tmp/tmpa6jraew8.d(119):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpa6jraew8.d(120): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpa6jraew8.d(121): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpa6jraew8.d(122): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpa6jraew8.d(123): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6jraew8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict)\n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key]))\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkdjzle1.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkdjzle1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool is_upper = char.isUpper(k);\n\
    \        bool is_lower = char.isLower(k);\n        if(is_upper != is_lower)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nI like your solution, but\
    \ I wonder if it would be possible to do it without having to import std.string\
    \ and std.typecons.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require\
    \ std.string and std.typecons.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require std.string and std.typecons.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require std.string and std.typecons.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that doesn't require std.string and std.typecons.\n<|/ c |>\n<| a\
    \ tags=d,string,dictionary |>\nI like Jim's solution, but I wonder if it would\
    \ be possible to do it without having to import std.string and std.typecons.\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp45jeelca.d(23): Error: no identifier for declarator v\n/tmp/tmp45jeelca.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp45jeelca.d(32): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmp45jeelca.d(34): Error: Declaration
    expected, not \''<\''\n/tmp/tmp45jeelca.d(40): Error: unterminated character constant\n/tmp/tmp45jeelca.d(43):
    Error: unterminated character constant\n/tmp/tmp45jeelca.d(46): Error: unterminated
    character constant\n/tmp/tmp45jeelca.d(49): Error: unterminated character constant\n/tmp/tmp45jeelca.d(52):
    Error: unterminated character constant\n/tmp/tmp45jeelca.d(57): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp45jeelca.d(58): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp45jeelca.d(59): Error: Declaration expected, not \''assert\''\n/tmp/tmp45jeelca.d(60):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp45jeelca.d(61): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp45jeelca.d(62): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp45jeelca.d(63): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp45jeelca.d(64): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp45jeelca.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k is string);\n\
    \        bool isStringUpper = (k is string);\n        if(isString && isStringUpper)\n\
    \        {\n            return false;\n        }\n        else if(isString &&\
    \ !isStringUpper)\n        {\n            return false;\n        }\n        else\
    \ if(!isString && isStringUpper)\n        {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    I came up with this:\n<code>\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7o4j8e07.d(23): Error: no identifier for declarator v\n/tmp/tmp7o4j8e07.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp7o4j8e07.d(40): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmp7o4j8e07.d(42): Error: Declaration
    expected, not \''<\''\n/tmp/tmp7o4j8e07.d(51): Error: Declaration expected, not
    \''assert\''\n/tmp/tmp7o4j8e07.d(52): Error: Declaration expected, not \''assert\''\n/tmp/tmp7o4j8e07.d(53):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp7o4j8e07.d(54): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp7o4j8e07.d(55): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp7o4j8e07.d(56): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp7o4j8e07.d(57): Error: Declaration expected, not \''assert\''\n/tmp/tmp7o4j8e07.d(58):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7o4j8e07.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        bool isUpper = k.toUpper()\
    \ == k;\n        bool isLower = k.toLower() == k;\n        if(isUpper && isLower)\n\
    \        {\n            return false;\n        }\n        if(!isUpper && !isLower)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=d |>\n<| a tags=d |>\nI came up with a solution that is pretty\
    \ similar to what was suggested in the comments. I thought I'd post it here in\
    \ case anyone else comes across this question and wants to know how I solved it.\n\
    <code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqtce8thl.d(23): Error: no identifier for declarator v\n/tmp/tmpqtce8thl.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpqtce8thl.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpqtce8thl.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmpqtce8thl.d(38): Error: Declaration expected, not \''<\''\n/tmp/tmpqtce8thl.d(41):
    Error: unterminated character constant\n/tmp/tmpqtce8thl.d(107): Error: identifier
    expected following package\n/tmp/tmpqtce8thl.d(107): Error: \'';\'' expected\n/tmp/tmpqtce8thl.d(108):
    Error: Declaration expected, not \''{\''\n/tmp/tmpqtce8thl.d(111): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpqtce8thl.d(112): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpqtce8thl.d(113): Error: Declaration expected, not \''assert\''\n/tmp/tmpqtce8thl.d(114):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpqtce8thl.d(115): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpqtce8thl.d(116): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpqtce8thl.d(117): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpqtce8thl.d(118): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtce8thl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + v;\n    foreach(k, v) \n    {\n   \
    \     string lower = toLower(k);\n        string upper = toUpper(k);\n       \
    \ if(lower == upper)\n        {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a tags=dictionary,c++,stl,c++11 |>\n<| c |>\n\
    This doesn't work. `dict` isn't a nullable type, so `dict+=k+v` will fail.\n<|/\
    \ c |>\n<| c |>\n: Thanks for pointing that out. I've corrected the answer.\n\
    <|/ c |>\n<| a tags=dictionary,c++,stl,c++11 |>\n<code>\n#include <iostream>\n\
    #include <map>\n#include <string>\n#include <algorithm>\n#include <cctype>\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2geivhqm.d(23): Error: no identifier for declarator v\n/tmp/tmp2geivhqm.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp2geivhqm.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmp2geivhqm.d(24): Error: no identifier for
    declarator v\n/tmp/tmp2geivhqm.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmp2geivhqm.d(33):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmp2geivhqm.d(35): Error:
    Declaration expected, not \''<\''\n/tmp/tmp2geivhqm.d(38): Error: unterminated
    character constant\n/tmp/tmp2geivhqm.d(38): Error: unterminated character constant\n/tmp/tmp2geivhqm.d(41):
    Error: unterminated character constant\n/tmp/tmp2geivhqm.d(54): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp2geivhqm.d(55): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp2geivhqm.d(56): Error: Declaration expected, not \''assert\''\n/tmp/tmp2geivhqm.d(57):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp2geivhqm.d(58): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp2geivhqm.d(59): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp2geivhqm.d(60): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp2geivhqm.d(61): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2geivhqm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + v; \n    foreach(k, v) \n    {\n  \
    \      string lower = toLower(k);\n        string upper = toUpper(k);\n      \
    \  if(lower != k) \n        {\n            if(!dict.contains(lower)) \n      \
    \      {\n                return false;\n            }\n        }\n        if(upper\
    \ != k) \n        {\n            if(!dict.contains(upper)) \n            {\n \
    \               return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nI like your solution,\
    \ but I wonder how it compares to other solutions posted so far. Also, how would\
    \ you go about doing this in D? I haven't used D yet, but I imagine it would be\
    \ similar.\n<|/ c |>\n<| c |>\nI haven't used D yet, but I imagine it would be\
    \ similar. I'll post an answer with my solution in D shortly.\n<|/ c |>\n<| c\
    \ |>\nI added my solution in D. I think it would be pretty similar.\n<|/ c |>\n\
    <| c |>\nI added my solution in D. I think it would be pretty similar.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nI came up with this solution:\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport \nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcqiq1ld8.d(23): Error: no identifier for declarator v\n/tmp/tmpcqiq1ld8.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcqiq1ld8.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpcqiq1ld8.d(24): Error: no identifier for
    declarator v\n/tmp/tmpcqiq1ld8.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcqiq1ld8.d(43):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmpcqiq1ld8.d(45): Error:
    Declaration expected, not \''<\''\n/tmp/tmpcqiq1ld8.d(48): Error: unterminated
    character constant\n/tmp/tmpcqiq1ld8.d(51): Error: unterminated character constant\n/tmp/tmpcqiq1ld8.d(51):
    Error: unterminated character constant\n/tmp/tmpcqiq1ld8.d(105): Error: Identifier
    expected following import\n/tmp/tmpcqiq1ld8.d(105): Error: \'';\'' expected\n/tmp/tmpcqiq1ld8.d(106):
    Error: Declaration expected, not \''{\''\n/tmp/tmpcqiq1ld8.d(109): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpcqiq1ld8.d(110): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpcqiq1ld8.d(111): Error: Declaration expected, not \''assert\''\n/tmp/tmpcqiq1ld8.d(112):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpcqiq1ld8.d(113): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpcqiq1ld8.d(114): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpcqiq1ld8.d(115): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpcqiq1ld8.d(116): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqiq1ld8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool is_string = (k as string).isLower();\n\
    \        bool is_string_upper = (k as string).isUpper();\n        if(!is_string\
    \ && !is_string_upper)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nThis\
    \ doesn't work if you have a key that is a string but is also a number or other\
    \ type. For example, `check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\"\
    : \"apple\"].nullable)` returns true.\n<|/ c |>\n<| c |>\nI added a version that\
    \ doesn't have that problem.\n<|/ c |>\n<| a |>\nThe simplest way is probably\
    \ to just iterate over the keys and check each one individually. Something like:\n\
    <code>\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpudhyg3_6.d(23): Error: no identifier for declarator v\n/tmp/tmpudhyg3_6.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpudhyg3_6.d(25): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmpudhyg3_6.d(25): Error: semicolon expected,
    not \''string\''\n/tmp/tmpudhyg3_6.d(25): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmpudhyg3_6.d(26): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmpudhyg3_6.d(26): Error: semicolon expected, not \''string\''\n/tmp/tmpudhyg3_6.d(26):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmpudhyg3_6.d(32):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmpudhyg3_6.d(34): Error:
    Declaration expected, not \''<\''\n/tmp/tmpudhyg3_6.d(37): Error: unterminated
    character constant\n/tmp/tmpudhyg3_6.d(40): Error: unterminated character constant\n/tmp/tmpudhyg3_6.d(49):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpudhyg3_6.d(50): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpudhyg3_6.d(51): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpudhyg3_6.d(52): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpudhyg3_6.d(53): Error: Declaration expected, not \''assert\''\n/tmp/tmpudhyg3_6.d(54):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpudhyg3_6.d(55): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpudhyg3_6.d(56): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudhyg3_6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + \": \" + v + \", \";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\n    foreach(k,\
    \ v) dict += k + \": \" + v + \"\\n\";\n    foreach(k, v) dict += k + \": \" +\
    \ v + \"\\n\";\n    foreach(k, v) dict += k + \": \" + v + \"\\n\";\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv470lhxo.d(23): Error: no identifier for declarator v\n/tmp/tmpv470lhxo.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv470lhxo.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpv470lhxo.d(24): Error: no identifier for
    declarator v\n/tmp/tmpv470lhxo.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv470lhxo.d(24):
    Error: found \'';\'' when expecting \'')\''\n/tmp/tmpv470lhxo.d(25): Error: no
    identifier for declarator v\n/tmp/tmpv470lhxo.d(25): Error: found \'')\'' when
    expecting \'';\''\n/tmp/tmpv470lhxo.d(25): Error: found \'';\'' when expecting
    \'')\''\n/tmp/tmpv470lhxo.d(26): Error: no identifier for declarator v\n/tmp/tmpv470lhxo.d(26):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv470lhxo.d(26): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpv470lhxo.d(27): Error: no identifier for
    declarator v\n/tmp/tmpv470lhxo.d(27): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv470lhxo.d(27):
    Error: found \'';\'' when expecting \'')\''\n/tmp/tmpv470lhxo.d(28): Error: no
    identifier for declarator v\n/tmp/tmpv470lhxo.d(28): Error: found \'')\'' when
    expecting \'';\''\n/tmp/tmpv470lhxo.d(28): Error: found \'';\'' when expecting
    \'')\''\n/tmp/tmpv470lhxo.d(29): Error: no identifier for declarator v\n/tmp/tmpv470lhxo.d(29):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv470lhxo.d(29): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv470lhxo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_gcak8qr.d(23): Error: no identifier for declarator v\n/tmp/tmp_gcak8qr.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_gcak8qr.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp_gcak8qr.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gcak8qr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (!is_string(k) || !is_string(v))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpksrharph.d(23): Error: no identifier for declarator `v`\n/tmp/tmpksrharph.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpksrharph.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksrharph.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9me15gmj.d(23): Error: no identifier for declarator v\n/tmp/tmp9me15gmj.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp9me15gmj.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp9me15gmj.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9me15gmj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !is_string(k) || !is_string(k) ? \"null\"\
    \ : k;\n    return !dict.isEmpty();\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkc6zbjl_.d(23): Error: no identifier for declarator v\n/tmp/tmpkc6zbjl_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpkc6zbjl_.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkc6zbjl_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isUpper = k.toUpperCase ==\
    \ k;\n        bool isLower = k.toLowerCase == k;\n        if(isUpper && isLower)\n\
    \        {\n            return false;\n        }\n        if(!isUpper && !isLower)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpww_dn132.d(23): Error: no identifier for declarator v\n/tmp/tmpww_dn132.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpww_dn132.d(36): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpww_dn132.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9me15gmj.d(23): Error: no identifier for declarator v\n/tmp/tmp9me15gmj.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp9me15gmj.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp9me15gmj.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9me15gmj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        bool isString = (typeof(k)\
    \ == \"string\");\n        bool isStringUpper = (typeof(k) == \"string\" && k.length()\
    \ > 0 && k[0] >= 'A' && k[0] <= 'Z');\n        bool isStringLower = (typeof(k)\
    \ == \"string\" && k.length() > 0 && k[0] >= 'a' && k[0] <= 'z');\n        bool\
    \ isStringNull = (typeof(k) == \"string\" && k == null);\n        bool isStringNullUpper\
    \ = (typeof(k) == \"string\" && k == null && k.length() > 0 && k[0] >= 'A' &&\
    \ k[0] <= 'Z');\n        bool isStringNullLower = (typeof(k) == \"string\" &&\
    \ k == null && k.length() > 0 && k[0] >= 'a' && k[0] <= 'z');\n        bool isStringNullNull\
    \ = (typeof(k) == \"string\" && k == null && k == null);\n        bool isStringNullNullUpper\
    \ = (typeof(k) == \"string\" && k == null && k == null && k.length() > 0 && k[0]\
    \ >= 'A' && k[0] <= 'Z');\n        bool isStringNullNullLower = (typeof(k) ==\
    \ \"string\" && k == null && k == null && k.length() > 0 && k[0] >= 'a' && k[0]\
    \ <= 'z');\n        bool isStringNullNullNull = (typeof(k) == \"string\" && k\
    \ == null && k == null && k == null);\n        bool isStringNullNullNullUpper\
    \ = (typeof(k) == \"string\" && k == null && k == null && k == null && k.length()\
    \ > 0 && k[0] >= 'A' && k[0] <= 'Z');\n        bool isStringNullNullNullLower\
    \ = (typeof(k) == \"string\" && k == null && k == null && k == null && k.length()\
    \ > 0 && k[0] >= 'a' && k[0] <= 'z');\n        bool isStringNullNullNullNull =\
    \ (typeof(k) == \"string\" && k == null && k == null && k == null && k == null);\n\
    \        bool isStringNullNullNullNullUpper = (typeof(k) == \"string\" && k ==\
    \ null && k == null && k == null && k == null && k.length() > 0 && k[0] >= 'A'\
    \ && k[0] <= 'Z');\n        bool isStringNullNullNullNullLower = (typeof(k) ==\
    \ \"string\" && k == null && k == null && k == null && k == null && k.length()\
    \ > 0 && k[0] >= 'a' && k[0] <= 'z');\n        bool isStringNullNullNullNullNull\
    \ = (typeof(k) == \"string\" && k == null && k == null && k == null && k\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmsvcncv_.d(23): Error: no identifier for declarator v\n/tmp/tmpmsvcncv_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpmsvcncv_.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpmsvcncv_.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmpmsvcncv_.d(40): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpmsvcncv_.d(42):
    Error: semicolon expected, not \''{\''\n/tmp/tmpmsvcncv_.d(53): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpmsvcncv_.d(53): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmsvcncv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(k))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx6ofurb1.d(23): Error: no identifier for declarator v\n/tmp/tmpx6ofurb1.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpx6ofurb1.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpx6ofurb1.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6ofurb1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcynwuotq.d(23): Error: no identifier for declarator v\n/tmp/tmpcynwuotq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcynwuotq.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcynwuotq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprv118fjs.d(23): Error: no identifier for declarator `v`\n/tmp/tmprv118fjs.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmprv118fjs.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv118fjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (!is_string(k) || !is_string(v))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpksrharph.d(23): Error: no identifier for declarator `v`\n/tmp/tmpksrharph.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpksrharph.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksrharph.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcynwuotq.d(23): Error: no identifier for declarator v\n/tmp/tmpcynwuotq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcynwuotq.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcynwuotq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_gcak8qr.d(23): Error: no identifier for declarator v\n/tmp/tmp_gcak8qr.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_gcak8qr.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp_gcak8qr.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gcak8qr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        string lowerKey\
    \ = key.to_lowercase();\n        string upperKey = key.to_uppercase();\n     \
    \   if(!dict.contains(lowerKey) || !dict.contains(upperKey))\n        {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=d,string,dictionary |>\nI wrote a function that checks\
    \ if a dictionary is nullable or not (it returns true if the dictionary is nullable\
    \ and false otherwise):\n<code>\nimport std.stdio;\nimport std.string;\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpty2pqg0u.d(23): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpty2pqg0u.d(34):
    Error: Declaration expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpty2pqg0u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isUpper = isupper(k);\n \
    \       bool isLower = islower(k);\n        bool isString = isstring(v);\n   \
    \     bool isNull = isnull(v);\n        bool isNumber = isnumber(v);\n       \
    \ bool isBool = isbool(v);\n        bool isDict = isdict(v);\n        bool isList\
    \ = islist(v);\n        bool isTuple = istuple(v);\n        bool isSet = isset(v);\n\
    \        bool isMap = ismap(v);\n        bool isEnum = isenum(v);\n        bool\
    \ isStruct = isstruct(v);\n        bool isClass = isclass(v);\n        bool isEnumDict\
    \ = isenumdict(v);\n        bool isEnumList = isenumlist(v);\n        bool isEnumTuple\
    \ = isenumtuple(v);\n        bool isEnumSet = isenumset(v);\n        bool isEnumMap\
    \ = isenummap(v);\n        bool isEnumEnum = isenumenum(v);\n        bool isEnumStruct\
    \ = isenumstruct(v);\n        bool isEnumClass = isenumclass(v);\n        bool\
    \ isEnumEnumDict = isenumenumdict(v);\n        bool isEnumEnumList = isenumenumlist(v);\n\
    \        bool isEnumEnumTuple = isenumenumtuple(v);\n        bool isEnumEnumSet\
    \ = isenumenumset(v);\n        bool isEnumEnumMap = isenumenummap(v);\n      \
    \  bool isEnumEnumEnum = isenumenumenum(v);\n        bool isEnumStruct = isenumstruct(v);\n\
    \        bool isEnumClass = isenumclass(v);\n        bool isEnumEnumDict = isenumenumdict(v);\n\
    \        bool isEnumEnumList = isenumenumlist(v);\n        bool isEnumEnumTuple\
    \ = isenumenumtuple(v);\n        bool isEnumEnumSet = isenumenumset(v);\n    \
    \    bool isEnumEnumMap = isenumenummap(v);\n        bool isEnumEnumEnum = isenumenumenum(v);\n\
    \        bool isEnumStruct = isenumstruct(v);\n        bool isEnumClass = isenumclass(v);\n\
    \        bool isEnumEnumDict = isenumenumdict(v);\n        bool isEnumEnumList\
    \ = isenumenumlist(v);\n        bool isEnumEnumTuple = isenumenumtuple(v);\n \
    \       bool isEnumEnumSet = isenumenumset(v);\n        bool isEnumEnumMap = isenumenummap(v);\n\
    \        bool isEnumEnumEnum = isenumenumenum(v);\n        bool isEnumStruct\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz1m8ylj6.d(23): Error: no identifier for declarator v\n/tmp/tmpz1m8ylj6.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpz1m8ylj6.d(70): Error: semicolon
    expected, not \''unittest\''\n/tmp/tmpz1m8ylj6.d(70): Error: found \''unittest\''
    instead of statement\n/tmp/tmpz1m8ylj6.d(82): Error: found \''void\'' when expecting
    \'')\''\n/tmp/tmpz1m8ylj6.d(82): Error: found \''{\'' when expecting \'';\'' following
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1m8ylj6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (k is string) \n  \
    \      {\n            if (k is string) \n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a\
    \ tags=d,types,dictionary |>\n<| c |>\nThanks, this was very helpful!\n<|/ c |>\n\
    <| a dscore=2 |>\nI came up with a solution that doesn't require any additional\
    \ libraries:\n<code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwhd49yt.d(23): Error: no identifier for declarator v\n/tmp/tmpqwhd49yt.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpqwhd49yt.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpqwhd49yt.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmpqwhd49yt.d(35): Error: Declaration expected, not \''<\''\n/tmp/tmpqwhd49yt.d(41):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqwhd49yt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) && isStr(v) ? v : \"\";\n  \
    \  return !dict.isEmpty();\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuve8jmu3.d(23): Error: no identifier for declarator v\n/tmp/tmpuve8jmu3.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpuve8jmu3.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuve8jmu3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (k is string) {\n            if (k\
    \ is string) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnphvycud.d(23): Error: no identifier for declarator v\n/tmp/tmpnphvycud.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpnphvycud.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnphvycud.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to avoid the foreach loop. Something like `foreach(k,\
    \ v) in dict where is_string(k) && is_string(v)`\n<|/ c |>\n<| c |>\n: I doubt\
    \ that there is an easy way to avoid the foreach loop. `foreach` loops are a fundamental\
    \ part of D's foreach looping construct, and are a fundamental part of D programming.\
    \ It's not like `foreach` loops are a fundamental part of any programming language.\
    \ `foreach` loops are a fundamental part of D's foreach looping construct.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that avoids the foreach loop. Let me know\
    \ if that works for you.\n<|/ c |>\n<| c |>\n: I added a solution that avoids\
    \ the foreach loop. Let me know if that works for you.\n<|/ c |>\n<| c |>\n: I\
    \ added a solution that avoids the foreach loop. Let me know if that works for\
    \ you.\n<|/ c |>\n<| a dscore=2 |>\nI like Josh's answer, but here's another option:\n\
    <code>\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp89l620l8.d(23): Error: no identifier for declarator v\n/tmp/tmp89l620l8.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp89l620l8.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp89l620l8.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmp89l620l8.d(32): Error: Declaration expected, not \''<\''\n/tmp/tmp89l620l8.d(38):
    Error: unterminated character constant\n/tmp/tmp89l620l8.d(38): Error: unterminated
    character constant\n/tmp/tmp89l620l8.d(38): Error: unterminated character constant\n/tmp/tmp89l620l8.d(50):
    Error: unterminated character constant\n/tmp/tmp89l620l8.d(50): Error: unterminated
    character constant\n/tmp/tmp89l620l8.d(56): Error: Declaration expected, not \''assert\''\n/tmp/tmp89l620l8.d(57):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp89l620l8.d(58): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp89l620l8.d(59): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp89l620l8.d(60): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp89l620l8.d(61): Error: Declaration expected, not \''assert\''\n/tmp/tmp89l620l8.d(62):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp89l620l8.d(63): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89l620l8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,string,dictionary\
    \ |>\n<| a dscore=1 |>\nI came up with a solution that uses std.algorithm.filter\
    \ and std.algorithm.find:\n<code>\nimport std.algorithm;\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo7oopd_x.d(23): Error: no identifier for declarator v\n/tmp/tmpo7oopd_x.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpo7oopd_x.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpo7oopd_x.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmpo7oopd_x.d(30): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo7oopd_x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + v;\n    foreach(k, v) \n    {\n   \
    \     string lower = toLower(k);\n        string upper = toUpper(k);\n       \
    \ if (lower != upper) return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgtzdm5ll.d(23): Error: no identifier for declarator v\n/tmp/tmpgtzdm5ll.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgtzdm5ll.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpgtzdm5ll.d(24): Error: no identifier for
    declarator v\n/tmp/tmpgtzdm5ll.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgtzdm5ll.d(30):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgtzdm5ll.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) && isStr(v) ? v : Null(v.string);\n\
    \    return !dict.isEmpty();\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprvp87lrr.d(23): Error: no identifier for declarator v\n/tmp/tmprvp87lrr.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmprvp87lrr.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvp87lrr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) ? v : null;\n    foreach(k,\
    \ v) \n    {\n        if(!isNull(v))\n        {\n            if(!isLower(k) ||\
    \ !isUpper(k))\n                return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nThis doesn't work if you\
    \ have a key that is a number or other non-string type.\n<|/ c |>\n<| c |>\nI\
    \ added a version that works with numbers and other non-string types. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a key that\
    \ is a number or other non-string type.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with numbers and other non-string types. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a key that is a number or other\
    \ non-string type.\n<|/ c |>\n<| a tags=d,string,dictionary |>\n<code>\nimport\
    \ std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\nimport\
    \ std.array;\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsay6alp1.d(23): Error: no identifier for declarator v\n/tmp/tmpsay6alp1.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpsay6alp1.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpsay6alp1.d(24): Error: no identifier for
    declarator v\n/tmp/tmpsay6alp1.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpsay6alp1.d(32):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmpsay6alp1.d(34): Error:
    Declaration expected, not \''<\''\n/tmp/tmpsay6alp1.d(37): Error: unterminated
    character constant\n/tmp/tmpsay6alp1.d(43): Error: unterminated character constant\n/tmp/tmpsay6alp1.d(49):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsay6alp1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6_z6dm9.d(23): Error: no identifier for declarator v\n/tmp/tmpw6_z6dm9.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpw6_z6dm9.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpw6_z6dm9.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6_z6dm9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (typeof(k) != \"string\"\
    ) return false;\n        if (typeof(v) != \"string\") return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n \
    \   assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxplnf5mt.d(23): Error: no identifier for declarator v\n/tmp/tmpxplnf5mt.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpxplnf5mt.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpxplnf5mt.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxplnf5mt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqkqhpv_.d(23): Error: no identifier for declarator v\n/tmp/tmpgqkqhpv_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgqkqhpv_.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgqkqhpv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6_z6dm9.d(23): Error: no identifier for declarator v\n/tmp/tmpw6_z6dm9.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpw6_z6dm9.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpw6_z6dm9.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6_z6dm9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0i2n2puk.d(23): Error: no identifier for declarator v\n/tmp/tmp0i2n2puk.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp0i2n2puk.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0i2n2puk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        bool is_upper = char.isUpper(k);\n \
    \       bool is_lower = char.isLower(k);\n        if (is_upper != is_lower) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwh9xp36t.d(23): Error: no identifier for declarator v\n/tmp/tmpwh9xp36t.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpwh9xp36t.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwh9xp36t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k is string);\n\
    \        bool isStringUpper = (k is string) && toupper(k) is k;\n        if(isString\
    \ && isStringUpper)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2y9co0n.d(23): Error: no identifier for declarator v\n/tmp/tmpv2y9co0n.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv2y9co0n.d(32): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv2y9co0n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        bool is_upper = char.isUpper(k);\n\
    \        bool is_lower = char.isLower(k);\n        if(is_upper && is_lower)\n\
    \        {\n            return false;\n        }\n        if(!is_upper && !is_lower)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8_8_s3d4.d(23): Error: no identifier for declarator v\n/tmp/tmp8_8_s3d4.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp8_8_s3d4.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp8_8_s3d4.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_8_s3d4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (k == k.toLowerCase()) {\n      \
    \      return true;\n        }\n        if (k == k.toUpperCase()) {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_fii6uh8.d(23): Error: no identifier for declarator v\n/tmp/tmp_fii6uh8.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_fii6uh8.d(31): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_fii6uh8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        string lowerCase\
    \ = key.to_lowercase();\n        string upperCase = key.to_uppercase();\n    \
    \    if (lowerCase == upperCase) \n        {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf7rxkv4y.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7rxkv4y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt3d0noxz.d(23): Error: no identifier for declarator v\n/tmp/tmpt3d0noxz.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpt3d0noxz.d(28): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt3d0noxz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_gcak8qr.d(23): Error: no identifier for declarator v\n/tmp/tmp_gcak8qr.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_gcak8qr.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp_gcak8qr.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gcak8qr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6_z6dm9.d(23): Error: no identifier for declarator v\n/tmp/tmpw6_z6dm9.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpw6_z6dm9.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpw6_z6dm9.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6_z6dm9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict)\n    {\n        if(!key.IsLower())\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4rnj4io_.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rnj4io_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (k == k.toLowerCase())\
    \ return true;\n        if (k == k.toUpperCase()) return true;\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `check_dict_case([\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)` returns true.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code. Now it works.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works but is too complicated\
    \ for my taste. I think I'll go with `check_dict_case(dict: dict[string] -> bool)\
    \ =\n    dict == dict || all(map(check_dict_case, dict));`\n<|/ c |>\n<| c |>\n\
    I agree that your solution is more elegant. My solution was just to show how it\
    \ can be done in Haskell without using any external libraries.\n<|/ c |>\n<| c\
    \ |>\nI agree that your solution is more elegant. My solution was just to show\
    \ how it can be done in Haskell without using any external libraries.\n<|/ c |>\n\
    <| a tags=dictionary,haskell |>\nThis can be done with Data.Map and Data.Set (which\
    \ also has Data.Map as an instance):\n<code>\nimport qualified Data.Map as M\n\
    import qualified Data.Set as S\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5pbcesn8.d(23): Error: no identifier for declarator v\n/tmp/tmp5pbcesn8.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp5pbcesn8.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp5pbcesn8.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmp5pbcesn8.d(30): Error: Declaration expected, not \''<\''\n/tmp/tmp5pbcesn8.d(33):
    Error: unterminated character constant\n/tmp/tmp5pbcesn8.d(39): Error: unterminated
    character constant\n/tmp/tmp5pbcesn8.d(57): Error: Declaration expected, not \''assert\''\n/tmp/tmp5pbcesn8.d(58):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp5pbcesn8.d(59): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp5pbcesn8.d(60): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp5pbcesn8.d(61): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp5pbcesn8.d(62): Error: Declaration expected, not \''assert\''\n/tmp/tmp5pbcesn8.d(63):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp5pbcesn8.d(64): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pbcesn8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + \": \" + v + \";\";\n    foreach(k,\
    \ v) \n    {\n        string lower = toLower(k);\n        string upper = toUpper(k);\n\
    \        if(lower != upper) return false;\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=d,dictionary |>\n<| c |>\nThis doesn't work if you have keys with numbers\
    \ in them. `toUpper` will convert `1` to `a`.\n<|/ c |>\n<| c |>\nGood catch.\
    \ Fixed it.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that checks if a dictionary\
    \ is nullable or not (nullable or not-nullable). It also checks if all keys are\
    \ strings or not. \n<code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfkl_4vwi.d(23): Error: no identifier for declarator v\n/tmp/tmpfkl_4vwi.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpfkl_4vwi.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpfkl_4vwi.d(24): Error: no identifier for
    declarator v\n/tmp/tmpfkl_4vwi.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpfkl_4vwi.d(30):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmpfkl_4vwi.d(32): Error:
    Declaration expected, not \''<\''\n/tmp/tmpfkl_4vwi.d(35): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkl_4vwi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6_z6dm9.d(23): Error: no identifier for declarator v\n/tmp/tmpw6_z6dm9.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpw6_z6dm9.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpw6_z6dm9.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6_z6dm9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0i2n2puk.d(23): Error: no identifier for declarator v\n/tmp/tmp0i2n2puk.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp0i2n2puk.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0i2n2puk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool is_upper = is_upper(v);\n\
    \        bool is_lower = is_lower(v);\n        if(is_upper && is_lower)\n    \
    \    {\n            return false;\n        }\n        if(!is_upper && !is_lower)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_dot_xks.d(23): Error: no identifier for declarator v\n/tmp/tmp_dot_xks.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_dot_xks.d(36): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_dot_xks.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if(!is_string(k) || !is_string(v)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsd3fqwh.d(23): Error: no identifier for declarator `v`\n/tmp/tmpqsd3fqwh.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpqsd3fqwh.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsd3fqwh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict)\n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key]))\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkdjzle1.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkdjzle1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nThe `!` operator is redundant\
    \ in the `foreach` statement. `foreach` already returns a boolean value.\n<|/\
    \ c |>\n<| c |>\nYes, but it's more readable this way and I find it easier to\
    \ read and understand what's going on. Also, `!` has lower precedence than `+=`,\
    \ so it's easier to read and understand what's going on.\n<|/ c |>\n<| c |>\n\
    I agree that `!` is redundant, but `foreach` already returns a boolean value.\
    \ I think it's more readable this way because it's more obvious what you're doing.\n\
    <|/ c |>\n<| c |>\nI agree that `foreach` already returns a boolean value. I think\
    \ it's more readable this way because it's more obvious what you're doing.\n<|/\
    \ c |>\n<| c |>\nI agree that `foreach` already returns a boolean value. I think\
    \ it's more readable this way because it's more obvious what you're doing.\n<|/\
    \ c |>\n<| a tags=d,string,dictionary |>\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.algorithm;\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpip1er44i.d(23): Error: no identifier for declarator v\n/tmp/tmpip1er44i.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpip1er44i.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpip1er44i.d(26): Error: Declaration expected,
    not \''<\''\n/tmp/tmpip1er44i.d(32): Error: unterminated character constant\n/tmp/tmpip1er44i.d(32):
    Error: unterminated character constant\n/tmp/tmpip1er44i.d(32): Error: unterminated
    character constant\n/tmp/tmpip1er44i.d(32): Error: unterminated character constant\n/tmp/tmpip1er44i.d(35):
    Error: unterminated character constant\n/tmp/tmpip1er44i.d(35): Error: unterminated
    character constant\n/tmp/tmpip1er44i.d(35): Error: unterminated character constant\n/tmp/tmpip1er44i.d(38):
    Error: unterminated character constant\n/tmp/tmpip1er44i.d(38): Error: unterminated
    character constant\n/tmp/tmpip1er44i.d(38): Error: unterminated character constant\n/tmp/tmpip1er44i.d(41):
    Error: unterminated character constant\n/tmp/tmpip1er44i.d(41): Error: unterminated
    character constant\n/tmp/tmpip1er44i.d(41): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpip1er44i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string k in dict)\n    {\n        if(!k.isLower()) return\
    \ false;\n        if(!k.isUpper()) return false;\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=d,string,dictionary |>\nI wrote a function\
    \ that checks if a dictionary is nullable or not:\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm;\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv64ta2bp.d(23): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpv64ta2bp.d(30):
    Error: Declaration expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv64ta2bp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if (k is string) \n        {\n\
    \            if (k is string) \n            {\n                if (k is string)\
    \ \n                {\n                    return true;\n                }\n \
    \           }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a tags=d dscore=2\
    \ |>\n<| c |>\nI like this solution. I'd like to see a version that doesn't require\
    \ a separate function though.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ require a separate function.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ require a separate function.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ require a separate function.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport \nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz03p2dm7.d(23): Error: no identifier for declarator v\n/tmp/tmpz03p2dm7.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpz03p2dm7.d(36): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpz03p2dm7.d(38): Error: Declaration
    expected, not \''<\''\n/tmp/tmpz03p2dm7.d(41): Error: unterminated character constant\n/tmp/tmpz03p2dm7.d(41):
    Error: unterminated character constant\n/tmp/tmpz03p2dm7.d(44): Error: unterminated
    character constant\n/tmp/tmpz03p2dm7.d(47): Error: unterminated character constant\n/tmp/tmpz03p2dm7.d(50):
    Error: unterminated character constant\n/tmp/tmpz03p2dm7.d(113): Error: Identifier
    expected following import\n/tmp/tmpz03p2dm7.d(113): Error: \'';\'' expected\n/tmp/tmpz03p2dm7.d(114):
    Error: Declaration expected, not \''{\''\n/tmp/tmpz03p2dm7.d(117): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpz03p2dm7.d(118): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpz03p2dm7.d(119): Error: Declaration expected, not \''assert\''\n/tmp/tmpz03p2dm7.d(120):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpz03p2dm7.d(121): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpz03p2dm7.d(122): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpz03p2dm7.d(123): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpz03p2dm7.d(124): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz03p2dm7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqkqhpv_.d(23): Error: no identifier for declarator v\n/tmp/tmpgqkqhpv_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgqkqhpv_.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgqkqhpv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcynwuotq.d(23): Error: no identifier for declarator v\n/tmp/tmpcynwuotq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcynwuotq.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcynwuotq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k, v;\n    foreach(k, v) \n    {\n    \
    \    string lower = toLower(k);\n        string upper = toUpper(k);\n        if\
    \ (lower != k) \n        {\n            return false;\n        }\n        if (upper\
    \ != k) \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptrbg6rf0.d(23): Error: no identifier for declarator v\n/tmp/tmptrbg6rf0.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmptrbg6rf0.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmptrbg6rf0.d(24): Error: no identifier for
    declarator v\n/tmp/tmptrbg6rf0.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmptrbg6rf0.d(37):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptrbg6rf0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        string lowerCase = std.toLower(k);\n\
    \        string upperCase = std.toUpper(k);\n        if (lowerCase != k) \n  \
    \      {\n            return false;\n        }\n        if (upperCase != k) \n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprhiwfq2h.d(23): Error: no identifier for declarator v\n/tmp/tmprhiwfq2h.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmprhiwfq2h.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmprhiwfq2h.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprhiwfq2h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqkqhpv_.d(23): Error: no identifier for declarator v\n/tmp/tmpgqkqhpv_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgqkqhpv_.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgqkqhpv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string k in dict)\n    {\n        if(!k.isLower())\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote a function that checks if a dictionary\
    \ is nullable or not:\n<code>\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30er9pi3.d(23): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp30er9pi3.d(32):
    Error: Declaration expected, not \''<\''\n/tmp/tmp30er9pi3.d(41): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp30er9pi3.d(42): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp30er9pi3.d(43): Error: Declaration expected, not \''assert\''\n/tmp/tmp30er9pi3.d(44):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp30er9pi3.d(45): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp30er9pi3.d(46): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp30er9pi3.d(47): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp30er9pi3.d(48): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30er9pi3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !is_string(k) || !is_string(k);\n    return\
    \ !dict.isNull;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2jz7x0qx.d(23): Error: no identifier for declarator v\n/tmp/tmp2jz7x0qx.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp2jz7x0qx.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jz7x0qx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=d,string,dictionary |>\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm;\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv5a8umgd.d(23): Error: no identifier for declarator v\n/tmp/tmpv5a8umgd.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv5a8umgd.d(30): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpv5a8umgd.d(32): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5a8umgd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmu_07xxq.d(23): Error: no identifier for declarator v\n/tmp/tmpmu_07xxq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpmu_07xxq.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpmu_07xxq.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmu_07xxq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key]))\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c\
    \ |>\nThis doesn't work. `foreach` doesn't return anything, and `!is_string(key)`\
    \ will always return false. Also, `dict[key]` will throw an exception when `key`\
    \ is not a string.\n<|/ c |>\n<| c |>\n`foreach` returns `void`. `!is_string(key)`\
    \ returns `bool`. `dict[key]` throws an exception when `key` is not a string.\
    \ `foreach` returns `void` because `dict[key]` throws an exception when `key`\
    \ is not a string. `!is_string(key)` returns `bool` because `foreach` returns\
    \ `void`. `!is_string(key)` returns `bool` because `foreach` returns `void`. `!is_string(key)`\
    \ returns `bool` because `foreach` returns `void`. `!is_string(key)` returns `bool`\
    \ because `foreach` returns `void`. `!is_string(key)` returns `bool` because `foreach`\
    \ returns `void`. `!is_string(key)` returns `bool` because `foreach` returns `void`.\
    \ `!is_string(key)` returns `bool` because `foreach` returns `void`. `!is_string(key)`\
    \ returns `bool` because `foreach` returns `void`. `!is_string(key)` returns `bool`\
    \ because `foreach` returns `void`. `!is_string(key)` returns `bool` because `foreach`\
    \ returns `void`. `!is_string(key)` returns `bool` because `foreach` returns `void`.\
    \ `!is_string(key)` returns `bool` because `foreach` returns `void`. `!is_string(key)`\
    \ returns `bool` because `foreach` returns `void`. `!is_string(key)` returns `bool`\
    \ because `foreach` returns `void`. `!is_string(key)` returns `bool` because `foreach`\
    \ returns `void`. `!is_string(key)` returns `bool` because `foreach` returns `void`.\
    \ `!is_string(key)` returns `bool` because `foreach` returns `void`. `!is_string(key)`\
    \ returns `bool` because `foreach` returns `void`. `!is_string(key)` returns `bool`\
    \ because `foreach` returns `void`. `!is_string(key)` returns `bool` because `foreach`\
    \ returns \nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp84abloww.d(23): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp84abloww.d(32):
    Error: Declaration expected, not \''<\''\n/tmp/tmp84abloww.d(35): Error: unterminated
    character constant\n/tmp/tmp84abloww.d(35): Error: unterminated character constant\n/tmp/tmp84abloww.d(43):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp84abloww.d(44): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp84abloww.d(45): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp84abloww.d(46): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp84abloww.d(47): Error: Declaration expected, not \''assert\''\n/tmp/tmp84abloww.d(48):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp84abloww.d(49): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp84abloww.d(50): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84abloww.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqkqhpv_.d(23): Error: no identifier for declarator v\n/tmp/tmpgqkqhpv_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgqkqhpv_.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgqkqhpv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9me15gmj.d(23): Error: no identifier for declarator v\n/tmp/tmp9me15gmj.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp9me15gmj.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp9me15gmj.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9me15gmj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) {\n        if (dict[key] == null)\
    \ {\n            return false;\n        }\n        if (dict[key].length != 0)\
    \ {\n            char c = dict[key][0]; // TODO: this assumes no case conversion\n\
    \            if (c >= 'A' && c <= 'Z') {\n                return true;\n     \
    \       }\n            if (c >= 'a' && c <= 'z') {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkb0cbwu4.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkb0cbwu4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(isString !=\
    \ isStringUpper)\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptid0vals.d(23): Error: no identifier for declarator v\n/tmp/tmptid0vals.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmptid0vals.d(25): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmptid0vals.d(25): Error: semicolon expected,
    not \''string\''\n/tmp/tmptid0vals.d(25): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmptid0vals.d(26): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmptid0vals.d(26): Error: semicolon expected, not \''string\''\n/tmp/tmptid0vals.d(26):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmptid0vals.d(32):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptid0vals.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqkqhpv_.d(23): Error: no identifier for declarator v\n/tmp/tmpgqkqhpv_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgqkqhpv_.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgqkqhpv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key]))\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_9n7p_8.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_9n7p_8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        bool isString = is(typeof(v)\
    \ == string);\n        bool isLowerCase = isString(toLower(v));\n        bool\
    \ isUpperCase = isString(toUpper(v));\n        bool isNull = isString(k);\n  \
    \      bool isNullOrEmpty = isNull || isEmpty(v);\n        bool isNullOrEmptyOrLower\
    \ = isNullOrEmpty || isLowerCase;\n        bool isNullOrEmptyOrUpper = isNullOrEmpty\
    \ || isUpperCase;\n        bool isNullOrEmptyOrLowerOrUpper = isNullOrEmptyOrLower\
    \ || isUpperCase;\n        bool isNullOrEmptyOrLowerOrUpperOrNull = isNullOrEmptyOrLowerOrUpper\
    \ || isNull;\n        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmpty = isNullOrEmptyOrLowerOrUpperOrNull\
    \ || isEmpty(v);\n        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrLower\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmpty || isLowerCase;\n        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpper\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmpty || isUpperCase;\n        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNull\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpper || isNull;\n        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmpty\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNull || isEmpty(v);\n   \
    \     bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmptyOrLower\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmpty || isLowerCase;\n\
    \        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmptyOrUpper\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmpty || isUpperCase;\n\
    \        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmptyOrUpperOrNull\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmptyOrUpper || isNull;\n\
    \        bool isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNullOrEmptyOrUpperOrNullOrEmpty\
    \ = isNullOrEmptyOrLowerOrUpperOrNullOrEmptyOrUpperOrNull\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3kpy9vds.d(23): Error: no identifier for declarator v\n/tmp/tmp3kpy9vds.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp3kpy9vds.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp3kpy9vds.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmp3kpy9vds.d(43): Error: semicolon expected, not \''unittest\''\n/tmp/tmp3kpy9vds.d(43):
    Error: found \''unittest\'' instead of statement\n/tmp/tmp3kpy9vds.d(55): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3kpy9vds.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(isString !=\
    \ isStringUpper) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaq23r_80.d(23): Error: no identifier for declarator v\n/tmp/tmpaq23r_80.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpaq23r_80.d(24): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmpaq23r_80.d(24): Error: semicolon expected,
    not \''string\''\n/tmp/tmpaq23r_80.d(24): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmpaq23r_80.d(25): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmpaq23r_80.d(25): Error: semicolon expected, not \''string\''\n/tmp/tmpaq23r_80.d(25):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmpaq23r_80.d(30):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpaq23r_80.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) && isLower(k) || isUpper(k);\n\
    \    return !dict.isEmpty;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcm0lcnqn.d(23): Error: no identifier for declarator v\n/tmp/tmpcm0lcnqn.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcm0lcnqn.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm0lcnqn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) && isLower(k) || isUpper(k);\n\
    \    return !dict.isEmpty();\n}\n</code>\n<|/ a tags=d,string,dictionary |>\n\
    <| c |>\nI like your solution, however it fails on `null` values. `null` values\
    \ should be treated as empty strings. `null` values should be treated as empty\
    \ strings. `null` values should be treated as empty strings. `null` values should\
    \ be treated as empty strings. `null` values should be treated as empty strings.\
    \ `null` values should be treated as empty strings. `null` values should be treated\
    \ as empty strings. `null` values should be treated as empty strings. `null` values\
    \ should be treated as empty strings. `null` values should be treated as empty\
    \ strings. `null` values should be treated as empty strings. `null` values should\
    \ be treated as empty strings. `null` values should be treated as empty strings.\
    \ `null` values should be treated as empty strings. `null` values should be treated\
    \ as empty strings. `null` values should be treated as empty strings. `null` values\
    \ should be treated as empty strings. `null` values should be treated as empty\
    \ strings. `null` values should be treated as empty strings. `null` values should\
    \ be treated as empty strings. `null` values should be treated as empty strings.\
    \ `null` values should be treated as empty strings. `null` values should be treated\
    \ as empty strings. `null` values should be treated as empty strings. `null` values\
    \ should be treated as empty strings. `null` values should be treated as empty\
    \ strings. `null` values should be treated as empty strings. `null` values should\
    \ be treated as empty strings. `null` values should be treated as empty strings.\
    \ `null` values should be treated as empty strings. `null` values should be treated\
    \ as empty strings. `null` values should be treated as empty strings. `null` values\
    \ should be treated as empty strings. `null` values should be treated as empty\
    \ strings. `null` values should be treated as empty strings. `null` values should\
    \ be treated as empty strings. `null` values should be treated as empty strings.\
    \ `null` values should be treated as empty strings. `null` values should be treated\
    \ as empty strings. `null` values should be treated as empty strings. `null` values\
    \ should be treated as empty strings. `null` values should be treated as empty\
    \ strings. `null` values should be treated as empty strings. `null` values should\
    \ be treated as empty strings. `null` values should be treated as empty strings.\
    \ \nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm1pdayvn.d(23): Error: no identifier for declarator v\n/tmp/tmpm1pdayvn.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpm1pdayvn.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpm1pdayvn.d(26): Error: Declaration expected,
    not \''<\''\n/tmp/tmpm1pdayvn.d(34): Error: Declaration expected, not \''assert\''\n/tmp/tmpm1pdayvn.d(35):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpm1pdayvn.d(36): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpm1pdayvn.d(37): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpm1pdayvn.d(38): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpm1pdayvn.d(39): Error: Declaration expected, not \''assert\''\n/tmp/tmpm1pdayvn.d(40):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpm1pdayvn.d(41): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1pdayvn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        string lower = toLower(k);\n \
    \       string upper = toUpper(k);\n        bool isStringInLower = lower.contains(k);\n\
    \        bool isStringInUpper = upper.contains(k);\n        bool isStringInBoth\
    \ = isStringInLower && isStringInUpper;\n        bool isStringInBothOrEmpty =\
    \ isStringInBoth || k.isNull();\n        if(isStringInBothOrEmpty)\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport st\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8m55drak.d(23): Error: no identifier for declarator v\n/tmp/tmp8m55drak.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp8m55drak.d(36): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmp8m55drak.d(38): Error: Declaration
    expected, not \''<\''\n/tmp/tmp8m55drak.d(106): Error: \'';\'' expected\n/tmp/tmp8m55drak.d(107):
    Error: Declaration expected, not \''{\''\n/tmp/tmp8m55drak.d(110): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp8m55drak.d(111): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp8m55drak.d(112): Error: Declaration expected, not \''assert\''\n/tmp/tmp8m55drak.d(113):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp8m55drak.d(114): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp8m55drak.d(115): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp8m55drak.d(116): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp8m55drak.d(117): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8m55drak.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcynwuotq.d(23): Error: no identifier for declarator v\n/tmp/tmpcynwuotq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcynwuotq.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcynwuotq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcynwuotq.d(23): Error: no identifier for declarator v\n/tmp/tmpcynwuotq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcynwuotq.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcynwuotq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if (k is string) \n        {\n\
    \            if (k is string) \n            {\n                return true;\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport\
    \ std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\nimport\
    \ std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport\
    \ std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport st\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg2jw2vg3.d(23): Error: no identifier for declarator v\n/tmp/tmpg2jw2vg3.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpg2jw2vg3.d(41): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpg2jw2vg3.d(43): Error: Declaration
    expected, not \''<\''\n/tmp/tmpg2jw2vg3.d(120): Error: \'';\'' expected\n/tmp/tmpg2jw2vg3.d(121):
    Error: Declaration expected, not \''{\''\n/tmp/tmpg2jw2vg3.d(124): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpg2jw2vg3.d(125): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpg2jw2vg3.d(126): Error: Declaration expected, not \''assert\''\n/tmp/tmpg2jw2vg3.d(127):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpg2jw2vg3.d(128): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpg2jw2vg3.d(129): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpg2jw2vg3.d(130): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpg2jw2vg3.d(131): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2jw2vg3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) {\n        if(!is_string(key)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpav8_tav_.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpav8_tav_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqkqhpv_.d(23): Error: no identifier for declarator v\n/tmp/tmpgqkqhpv_.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgqkqhpv_.d(30): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpgqkqhpv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_gcak8qr.d(23): Error: no identifier for declarator v\n/tmp/tmp_gcak8qr.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_gcak8qr.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmp_gcak8qr.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gcak8qr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !is_string(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4yplhen9.d(23): Error: no identifier for declarator v\n/tmp/tmp4yplhen9.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp4yplhen9.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4yplhen9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string k in dict)\n    {\n        if(!is_string(k))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6q7wvl32.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q7wvl32.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if(!is_string(k) || !is_string(v)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqsd3fqwh.d(23): Error: no identifier for declarator `v`\n/tmp/tmpqsd3fqwh.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpqsd3fqwh.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsd3fqwh.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcynwuotq.d(23): Error: no identifier for declarator v\n/tmp/tmpcynwuotq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcynwuotq.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcynwuotq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k is string);\n\
    \        bool isStringUpper = (k is string) && toupper(k) is k;\n        if(isString\
    \ && isStringUpper)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2y9co0n.d(23): Error: no identifier for declarator v\n/tmp/tmpv2y9co0n.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpv2y9co0n.d(32): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv2y9co0n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        bool is_upper = std.algorithm.toUpper(v)\
    \ == v;\n        bool is_lower = std.algorithm.toLower(v) == v;\n        if(is_upper\
    \ || is_lower)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbjlqs0hf.d(23): Error: no identifier for declarator v\n/tmp/tmpbjlqs0hf.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpbjlqs0hf.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpbjlqs0hf.d(23): Error: found \''dict\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjlqs0hf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprv118fjs.d(23): Error: no identifier for declarator `v`\n/tmp/tmprv118fjs.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmprv118fjs.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv118fjs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (is_string(k) || is_string(k))\
    \ \n        {\n            return true;\n        }\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=d,string,dictionary |>\n<| a dscore=2 |>\nThe accepted\
    \ answer doesn't work for me. Here's a version that does:\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorith\nunittest\n{\n    alias candidate = check_dict_case;\n\n \
    \   assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0d21y20.d(23): Error: no identifier for declarator v\n/tmp/tmpg0d21y20.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpg0d21y20.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpg0d21y20.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmpg0d21y20.d(32): Error: Declaration expected, not \''<\''\n/tmp/tmpg0d21y20.d(35):
    Error: unterminated character constant\n/tmp/tmpg0d21y20.d(35): Error: unterminated
    character constant\n/tmp/tmpg0d21y20.d(111): Error: \'';\'' expected\n/tmp/tmpg0d21y20.d(112):
    Error: Declaration expected, not \''{\''\n/tmp/tmpg0d21y20.d(115): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpg0d21y20.d(116): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpg0d21y20.d(117): Error: Declaration expected, not \''assert\''\n/tmp/tmpg0d21y20.d(118):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpg0d21y20.d(119): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpg0d21y20.d(120): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpg0d21y20.d(121): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpg0d21y20.d(122): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0d21y20.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if (k is string) \n        {\n\
    \            if (k is string) \n            {\n                return true;\n\
    \            }\n            else \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, however it fails on `check_dict_case([\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)` which should\
    \ return false but returns true.\n<|/ c |>\n<| c |>\nI added a version that works\
    \ with your test cases. I tested it on `dartpad online` which uses Dart 2.12.\n\
    <|/ c |>\n<| c |>\nI added a version that works with your test cases. I tested\
    \ it on `dartpad online` which uses Dart 2.12.\n<|/ c |>\n<| a dscore=1 |>\nI\
    \ came up with a solution which uses only dart:\n<code>\nimport 'dart:collection';\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwehi2b32.d(23): Error: no identifier for declarator v\n/tmp/tmpwehi2b32.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpwehi2b32.d(37): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpwehi2b32.d(39): Error: Declaration
    expected, not \''<\''\n/tmp/tmpwehi2b32.d(53): Error: unterminated character constant\n/tmp/tmpwehi2b32.d(53):
    Error: unterminated character constant\n/tmp/tmpwehi2b32.d(58): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpwehi2b32.d(59): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpwehi2b32.d(60): Error: Declaration expected, not \''assert\''\n/tmp/tmpwehi2b32.d(61):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpwehi2b32.d(62): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpwehi2b32.d(63): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpwehi2b32.d(64): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpwehi2b32.d(65): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwehi2b32.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) && isStr(k) && isStr(v) ? v\
    \ : Null;\n    return !dict.isNull;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkkdmrtkv.d(23): Error: no identifier for declarator v\n/tmp/tmpkkdmrtkv.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpkkdmrtkv.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkdmrtkv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + v;\n    foreach(k, v) \n    {\n   \
    \     if(!isLower(k) || !isUpper(k)) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpry35hp2m.d(23): Error: no identifier for declarator v\n/tmp/tmpry35hp2m.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpry35hp2m.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpry35hp2m.d(24): Error: no identifier for
    declarator v\n/tmp/tmpry35hp2m.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpry35hp2m.d(28):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpry35hp2m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool is_upper = k.toUpper() ==\
    \ k;\n        bool is_lower = k.toLower() == k;\n        if(is_upper && is_lower)\n\
    \        {\n            return true;\n        }\n        if(!is_upper && !is_lower)\n\
    \        {\n            return false;\n        }\n    }\n    return false;\n}\n\
    </code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nThis doesn't work for `null`\
    \ keys. `null` keys are converted to `\"\"` keys. So `null` keys are still considered\
    \ as `\"\"` keys. And `\"\"` keys are still considered as `\"\"` keys.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer to include a check for null keys. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test\
    \ case to my answer. Can you try it again and let me know if it works for you?\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\
    \ Can you try it again and let me know if it works for you?\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer. Can you try it again\
    \ and let me know if it works for you?\n<|/ c |>\n<| a dscore=2 |>\nI wrote a\
    \ function that does what you want:\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.conv;\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxwaw4s3v.d(23): Error: no identifier for declarator v\n/tmp/tmpxwaw4s3v.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpxwaw4s3v.d(36): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpxwaw4s3v.d(38): Error: Declaration
    expected, not \''<\''\n/tmp/tmpxwaw4s3v.d(41): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwaw4s3v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (k is string) {\n            if (k\
    \ is string) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\"\"\"\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyvd9yp78.d(23): Error: no identifier for declarator v\n/tmp/tmpyvd9yp78.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpyvd9yp78.d(30): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpyvd9yp78.d(32): Error: Declaration
    expected, not \''""\''\n/tmp/tmpyvd9yp78.d(42): Error: unterminated string constant
    starting at /tmp/tmpyvd9yp78.d(42)\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyvd9yp78.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !is_string(k) || !is_string(v) ? false\
    \ : true;\n    return !dict;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpka37fcw9.d(23): Error: no identifier for declarator v\n/tmp/tmpka37fcw9.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpka37fcw9.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpka37fcw9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt3d0noxz.d(23): Error: no identifier for declarator v\n/tmp/tmpt3d0noxz.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpt3d0noxz.d(28): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt3d0noxz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=d,type-conversion |>\n<| c |>\nI like your solution, although\
    \ it requires you to write `Nullable!(string[string])` instead of `Nullable!(string)`.\
    \ I think it would be better to have `Nullable!(string)` be the default, and have\
    \ `Nullable!(string[string])` be an alias for `Nullable!(string)`.\n<|/ c |>\n\
    <| c |>\nI agree with you. `Nullable!(string)` should be the default. `Nullable!(string[string])`\
    \ should be an alias for `Nullable!(string)`.\n<|/ c |>\n<| a dscore=2 |>\nI like\
    \ Alexander's solution, but I wanted to add an alternative that doesn't require\
    \ the Nullable module and doesn't require you to write Nullable!(string[string])\
    \ instead of Nullable!(string). \n<code>\nimport std.stdio;\nimport std.string;\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpihuleygp.d(23): Error: no identifier for declarator v\n/tmp/tmpihuleygp.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpihuleygp.d(30): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpihuleygp.d(32): Error: Declaration
    expected, not \''<\''\n/tmp/tmpihuleygp.d(41): Error: unterminated character constant\n/tmp/tmpihuleygp.d(41):
    Error: unterminated character constant\n/tmp/tmpihuleygp.d(41): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpihuleygp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        bool isUpper = k.toUpper()\
    \ != k;\n        bool isLower = k.toLower() != k;\n        if(isUpper && isLower)\n\
    \        {\n            return false;\n        }\n        if(!isUpper && !isLower)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=d dscore=2 |>\n<| c |>\nThanks for the answer. I'm going to\
    \ try this out and see if it works.\n<|/ c |>\n<| c |>\nThis doesn't work. `toUpper`\
    \ and `toLower` don't exist in D2. `toUpper` and `toLower` only exist in D1. `toUpper`\
    \ and `toLower` also don't exist in D3. `toUpper` and `toLower` only exist in\
    \ D4. `toUpper` and `toLower` only exist in D5. `toUpper` and `toLower` only exist\
    \ in D6. `toUpper` and `toLower` only exist in D7.\n<|/ c |>\n<| c |>\nYes, you're\
    \ right. I was thinking about D2, but didn't realize that D3 had it. I'll update\
    \ my answer.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are all good,\
    \ but I thought I'd add my own answer that uses std.algorithm.filter and std.algorithm.find:\n\
    <code>\nimport std.algorithm;\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc8_mo0m8.d(23): Error: no identifier for declarator v\n/tmp/tmpc8_mo0m8.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpc8_mo0m8.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpc8_mo0m8.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmpc8_mo0m8.d(38): Error: Declaration expected, not \''<\''\n/tmp/tmpc8_mo0m8.d(41):
    Error: unterminated character constant\n/tmp/tmpc8_mo0m8.d(44): Error: unterminated
    character constant\n/tmp/tmpc8_mo0m8.d(44): Error: unterminated character constant\n/tmp/tmpc8_mo0m8.d(44):
    Error: unterminated character constant\n/tmp/tmpc8_mo0m8.d(47): Error: unterminated
    character constant\n/tmp/tmpc8_mo0m8.d(47): Error: unterminated character constant\n/tmp/tmpc8_mo0m8.d(47):
    Error: unterminated character constant\n/tmp/tmpc8_mo0m8.d(50): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8_mo0m8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\n</code>\n<|/ a tags=d,dictionary |>\n<| c |>\nI like the idea of using std.typecons.isString,\
    \ but I wonder if that would work with the OP's example data since it looks like\
    \ the keys are all strings. I wonder if std.typecons.isString would return true\
    \ for \"a\" and \"A\" since those are both strings. I wonder if std.typecons.isString\
    \ would return true for \"a\" and \"8L\" since those are both strings. I wonder\
    \ if std.typecons.isString would return true for \"a\" and \"a\" since those are\
    \ both strings. I wonder if std.typecons.isString would return true for \"Name\"\
    \ and \"Age\" since those are both strings. I wonder if std.typecons.isString\
    \ would return true for \"STATE\" and \"ZIP\" since those are both strings. I\
    \ wonder if std.typecons.isString would return true for \"Name\" and \"City\"\
    \ since those are both strings. I wonder if std.typecons.isString would return\
    \ true for \"STATE\" and \"City\" since those are both strings. I wonder if std.typecons.isString\
    \ would return true for \"Name\" and \"ZIP\" since those are both strings. I wonder\
    \ if std.typecons.isString would return true for \"Name\" and \"STATE\" since\
    \ those are both strings. I wonder if std.typecons.isString would return true\
    \ for \"Name\" and \"Name\" since those are both strings. I wonder if std.typecons.isString\
    \ would return true for \"Name\" and \"Age\" since those are both strings. I wonder\
    \ if std.typecons.isString would return true for \"Name\" and \"Age\" since those\
    \ are both strings. I wonder if std.typecons.isString would return true for \"\
    Name\" and \"Age\" since those are both strings. I wonder if std.typecons.isString\
    \ would return true for \"Name\" and \"Age\" since those are both strings. I wonder\
    \ if std.typecons.isString would return true for \"Name\" and \"Age\" since those\
    \ are both strings. I wonder if std.typecons.isString would return true for \"\
    Name\" and \"Age\" since those are both strings. I wonder if std.typecons.isString\
    \ would return true for \"Name\" and \"Age\" since those \nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeaac47fe.d(23): Error: no identifier for declarator v\n/tmp/tmpeaac47fe.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpeaac47fe.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpeaac47fe.d(26): Error: Declaration expected,
    not \''<\''\n/tmp/tmpeaac47fe.d(29): Error: unterminated character constant\n/tmp/tmpeaac47fe.d(34):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpeaac47fe.d(35): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpeaac47fe.d(36): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpeaac47fe.d(37): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpeaac47fe.d(38): Error: Declaration expected, not \''assert\''\n/tmp/tmpeaac47fe.d(39):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpeaac47fe.d(40): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpeaac47fe.d(41): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeaac47fe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty();\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcynwuotq.d(23): Error: no identifier for declarator v\n/tmp/tmpcynwuotq.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcynwuotq.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcynwuotq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string k in dict)\n    {\n        if(!k.isLower())\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk3itcmb8.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3itcmb8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (k is string) {\n            if (k\
    \ is string) {\n                return true;\n            } else {\n         \
    \       return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport\
    \ std.array;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\nimport\
    \ std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\nimport\
    \ std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport\
    \ std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    import std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.array;\nimport std.algorithm;\nimport std.conv;\n\
    import std.array;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsgvfao8d.d(23): Error: no identifier for declarator v\n/tmp/tmpsgvfao8d.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpsgvfao8d.d(34): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpsgvfao8d.d(36): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsgvfao8d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = is(typeof(v) ==\
    \ \"string\");\n        bool isStringUpper = isString(toUpper(v));\n        bool\
    \ isStringLower = isString(toLower(v));\n        if(isStringUpper != isStringLower)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nThis doesn't work for me.\
    \ `isStringUpper` returns false even for strings that are all upper case. `isStringLower`\
    \ returns false even for strings that are all lower case. `isString` returns false\
    \ for strings that are all upper or all lower.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works for me. Maybe you have a typo or something? I tested it on DMD.\n\
    <|/ c |>\n<| c |>\nI tested it on DMD and it works for me. Maybe you have a typo\
    \ or something? I tested it on DMD.\n<|/ c |>\n<| c |>\nI tested it on DMD and\
    \ it works for me. Maybe you have a typo or something? I tested it on DMD.\n<|/\
    \ c |>\n<| c |>\nI tested it on DMD and it works for me. Maybe you have a typo\
    \ or something? I tested it on DMD.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport\
    \ std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.array;\nimport\
    \ std.conv;\nimport std.range;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwp5es8s4.d(23): Error: no identifier for declarator v\n/tmp/tmpwp5es8s4.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpwp5es8s4.d(25): Error: basic
    type expected, not "string"\n/tmp/tmpwp5es8s4.d(25): Error: found \''"string"\''
    when expecting \'')\''\n/tmp/tmpwp5es8s4.d(25): Error: semicolon expected, not
    \'')\''\n/tmp/tmpwp5es8s4.d(25): Error: found \'')\'' instead of statement\n/tmp/tmpwp5es8s4.d(33):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmpwp5es8s4.d(35): Error:
    Declaration expected, not \''<\''\n/tmp/tmpwp5es8s4.d(38): Error: unterminated
    character constant\n/tmp/tmpwp5es8s4.d(90): Error: identifier expected following
    package\n/tmp/tmpwp5es8s4.d(90): Error: \'';\'' expected\n/tmp/tmpwp5es8s4.d(91):
    Error: Declaration expected, not \''{\''\n/tmp/tmpwp5es8s4.d(94): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpwp5es8s4.d(95): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpwp5es8s4.d(96): Error: Declaration expected, not \''assert\''\n/tmp/tmpwp5es8s4.d(97):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpwp5es8s4.d(98): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpwp5es8s4.d(99): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpwp5es8s4.d(100): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpwp5es8s4.d(101): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwp5es8s4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(!isString &&\
    \ !isStringUpper)\n        {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n  \
    \  assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8n7ze96x.d(23): Error: no identifier for declarator v\n/tmp/tmp8n7ze96x.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp8n7ze96x.d(25): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmp8n7ze96x.d(25): Error: semicolon expected,
    not \''string\''\n/tmp/tmp8n7ze96x.d(25): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmp8n7ze96x.d(26): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmp8n7ze96x.d(26): Error: semicolon expected, not \''string\''\n/tmp/tmp8n7ze96x.d(26):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmp8n7ze96x.d(32):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8n7ze96x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k as string, v as string;\n    foreach(k,\
    \ v) \n    {\n        string lowerCase = lower(k);\n        string upperCase =\
    \ upper(k);\n        if(lowerCase != upperCase)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgnonj49x.d(23): Error: no identifier for declarator v\n/tmp/tmpgnonj49x.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgnonj49x.d(23): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmpgnonj49x.d(23): Error: found \''as\''
    when expecting \'';\'' following statement\n/tmp/tmpgnonj49x.d(24): Error: no
    identifier for declarator v\n/tmp/tmpgnonj49x.d(24): Error: found \'')\'' when
    expecting \'';\''\n/tmp/tmpgnonj49x.d(33): Error: found \''return\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnonj49x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v) && isNull(v.stringValue) ? v\
    \ : Null(v.stringValue);\n    return !dict.isEmpty();\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps6t5dfow.d(23): Error: no identifier for declarator v\n/tmp/tmps6t5dfow.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmps6t5dfow.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6t5dfow.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for your answer! I like your solution, however\
    \ it only works with strings. I updated my question to reflect that my dictionary\
    \ can contain other types as well. Sorry for the confusion.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a solution that will work with any type that has\
    \ a `toString` method.\n<|/ c |>\n<| c |>\nThanks for your update! I like your\
    \ solution, however it only works with strings. I updated my question to reflect\
    \ that my dictionary can contain other types as well. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a solution that will work with\
    \ any type that has a `toString` method.\n<|/ c |>\n<| c |>\nThanks for your update!\
    \ I like your solution, however it only works with strings. I updated my question\
    \ to reflect that my dictionary can contain other types as well. Sorry for the\
    \ confusion.\n<|/ c |>\n<| a dscore=0 |>\nI ended up doing this with reflection:\n\
    <code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.conv;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwgxnly1l.d(23): Error: no identifier for declarator v\n/tmp/tmpwgxnly1l.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpwgxnly1l.d(30): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpwgxnly1l.d(32): Error: Declaration
    expected, not \''<\''\n/tmp/tmpwgxnly1l.d(93): Error: identifier expected following
    package\n/tmp/tmpwgxnly1l.d(93): Error: \'';\'' expected\n/tmp/tmpwgxnly1l.d(94):
    Error: Declaration expected, not \''{\''\n/tmp/tmpwgxnly1l.d(97): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpwgxnly1l.d(98): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpwgxnly1l.d(99): Error: Declaration expected, not \''assert\''\n/tmp/tmpwgxnly1l.d(100):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpwgxnly1l.d(101): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpwgxnly1l.d(102): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpwgxnly1l.d(103): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpwgxnly1l.d(104): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgxnly1l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k + \": \" + v + \";\";\n    foreach(k,\
    \ v) \n    {\n        string lower = toLower(k);\n        string upper = toUpper(k);\n\
    \        if (lower != upper) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt8bo8lj2.d(23): Error: no identifier for declarator v\n/tmp/tmpt8bo8lj2.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpt8bo8lj2.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpt8bo8lj2.d(24): Error: no identifier for
    declarator v\n/tmp/tmpt8bo8lj2.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpt8bo8lj2.d(30):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpt8bo8lj2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmcqf_3c2.d(23): Error: no identifier for declarator v\n/tmp/tmpmcqf_3c2.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpmcqf_3c2.d(30): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpmcqf_3c2.d(32): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmcqf_3c2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nimport std.stdio;\nimport std.string;\nimport\
    \ std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\n\
    import std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport\
    \ std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\n\
    import std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport\
    \ std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\n\
    import std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport\
    \ std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\n\
    import std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport\
    \ std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\n\
    import std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport\
    \ std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\n\
    import std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport\
    \ std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\n\
    import std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport\
    \ std.conv;\nimport std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\n\
    import std.array;\nimport std.conv;\nimport std.array;\nimport std.conv;\nimport\
    \ std.array;\nimport std.conv;\nimport std.array;\n\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr93qf1er.d(23): Error: no identifier for declarator v\n/tmp/tmpr93qf1er.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpr93qf1er.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmpr93qf1er.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmpr93qf1er.d(30): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr93qf1er.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    return !dict.isEmpty;\n\
    }\n</code>\n<|/ a tags=d,string,dictionary |>\n<| a tags=d,string,dictionary |>\n\
    <code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\
    import std.conv;\nimport std.range;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorith\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcamkdb2v.d(23): Error: no identifier for declarator v\n/tmp/tmpcamkdb2v.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpcamkdb2v.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpcamkdb2v.d(26): Error: Declaration expected,
    not \''<\''\n/tmp/tmpcamkdb2v.d(108): Error: \'';\'' expected\n/tmp/tmpcamkdb2v.d(109):
    Error: Declaration expected, not \''{\''\n/tmp/tmpcamkdb2v.d(112): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpcamkdb2v.d(113): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpcamkdb2v.d(114): Error: Declaration expected, not \''assert\''\n/tmp/tmpcamkdb2v.d(115):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpcamkdb2v.d(116): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpcamkdb2v.d(117): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpcamkdb2v.d(118): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpcamkdb2v.d(119): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcamkdb2v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k, v;\n    foreach(k, v) \n    {\n    \
    \    string lower = toLower(k);\n        string upper = toUpper(k);\n        if(lower\
    \ != k) \n        {\n            if(!dict.contains(lower))\n            {\n  \
    \              return false;\n            }\n        }\n        if(upper != k)\n\
    \        {\n            if(!dict.contains(upper))\n            {\n           \
    \     return false;\n            }\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=d,string,dictionary |>\n<| c |>\nThis doesn't work if you have keys\
    \ that are numbers or other types that aren't strings. For example, `check_dict_case([\"\
    a\": 42, \"b\": true].nullable)` returns true.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting. It's a very simple function that checks whether\
    \ the keys are strings or not. I'll add an example to the answer.\n<|/ c |>\n\
    <| c |>\nAh, I see. Sorry I missed that part. I'll give it a try and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI added an example to the answer. Let me know\
    \ if it works.\n<|/ c |>\n<| c |>\nI added an example to the answer. Let me know\
    \ if it works.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are great,\
    \ but they don't take into account that a string can be null. Here's a version\
    \ that does:\n<code>\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4jru3o53.d(23): Error: no identifier for declarator v\n/tmp/tmp4jru3o53.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp4jru3o53.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmp4jru3o53.d(24): Error: no identifier for
    declarator v\n/tmp/tmp4jru3o53.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmp4jru3o53.d(43):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmp4jru3o53.d(45): Error:
    Declaration expected, not \''<\''\n/tmp/tmp4jru3o53.d(48): Error: unterminated
    character constant\n/tmp/tmp4jru3o53.d(48): Error: unterminated character constant\n/tmp/tmp4jru3o53.d(51):
    Error: unterminated character constant\n/tmp/tmp4jru3o53.d(51): Error: unterminated
    character constant\n/tmp/tmp4jru3o53.d(54): Error: unterminated character constant\n/tmp/tmp4jru3o53.d(63):
    Error: unterminated character constant\n/tmp/tmp4jru3o53.d(63): Error: unterminated
    character constant\n/tmp/tmp4jru3o53.d(69): Error: Declaration expected, not \''assert\''\n/tmp/tmp4jru3o53.d(70):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp4jru3o53.d(71): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp4jru3o53.d(72): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp4jru3o53.d(73): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp4jru3o53.d(74): Error: Declaration expected, not \''assert\''\n/tmp/tmp4jru3o53.d(75):
    Error: Declaration expected, not \''assert\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4jru3o53.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) {\n        if(!key.IsLower()) return\
    \ false;\n        if(!key.IsUpper()) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96xb8qg4.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96xb8qg4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !is_string(v);\n    return !dict.isEmpty;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5gbadg1.d(23): Error: no identifier for declarator v\n/tmp/tmpe5gbadg1.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpe5gbadg1.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5gbadg1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (!is_string(k) || !is_string(v))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpksrharph.d(23): Error: no identifier for declarator `v`\n/tmp/tmpksrharph.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpksrharph.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksrharph.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (k is string) {\n            if (k\
    \ is string) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nThis\
    \ doesn't work. `is` doesn't work like that. `is` checks if the object is a reference\
    \ to a specific type. `is` doesn't check whether a specific type is in the list\
    \ of types. `is` checks if an object is of a specific type. `is` checks if an\
    \ object is of a specific type. `is` checks if an object is of a specific type.\
    \ `is` checks if an object is of a specific type. `is` checks if an object is\
    \ of a specific type. `is` checks if an object is of a specific type. `is` checks\
    \ if an object is of a specific type. `is` checks if an object is of a specific\
    \ type. `is` checks if an object is of a specific type. `is` checks if an object\
    \ is of a specific type. `is` checks if an object is of a specific type. `is`\
    \ checks if an object is of a specific type. `is` checks if an object is of a\
    \ specific type. `is` checks if an object is of a specific type. `is` checks if\
    \ an object is of a specific type. `is` checks if an object is of a specific type.\
    \ `is` checks if an object is of a specific type. `is` checks if an object is\
    \ of a specific type. `is` checks if an object is of a specific type. `is` checks\
    \ if an object is of a specific type. `is` checks if an object is of a specific\
    \ type. `is` checks if an object is of a specific type. `is` checks if an object\
    \ is of a specific type. `is` checks if an object is of a specific type. `is`\
    \ checks if an object is of a specific type. `is` checks if an object is of a\
    \ specific type. `is` checks if an object is of a specific type. `is` checks if\
    \ an object is of a specific type. `is` checks if an object is of a specific type.\
    \ `is` checks if an object is of a specific type. `is` checks if an object is\
    \ of a specific type. `is` checks if an object is of a specific type. `is` checks\
    \ if an object is of a specific type. `is` checks if an object is of a specific\
    \ type. `is` checks if an object is of a specific type. `is` checks if an object\
    \ is of a specific type. `is` checks if an object is of a specific type. `is`\
    \ checks if an object is of a specific type. `is` checks if an object is of a\
    \ \nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6t50wiq0.d(23): Error: no identifier for declarator v\n/tmp/tmp6t50wiq0.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp6t50wiq0.d(30): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmp6t50wiq0.d(32): Error: Declaration
    expected, not \''<\''\n/tmp/tmp6t50wiq0.d(35): Error: unterminated character constant\n/tmp/tmp6t50wiq0.d(35):
    Error: unterminated character constant\n/tmp/tmp6t50wiq0.d(35): Error: unterminated
    character constant\n/tmp/tmp6t50wiq0.d(40): Error: Declaration expected, not \''assert\''\n/tmp/tmp6t50wiq0.d(41):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp6t50wiq0.d(42): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp6t50wiq0.d(43): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp6t50wiq0.d(44): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp6t50wiq0.d(45): Error: Declaration expected, not \''assert\''\n/tmp/tmp6t50wiq0.d(46):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp6t50wiq0.d(47): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6t50wiq0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(isString !=\
    \ isStringUpper)\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n   \
    \ assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptid0vals.d(23): Error: no identifier for declarator v\n/tmp/tmptid0vals.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmptid0vals.d(25): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmptid0vals.d(25): Error: semicolon expected,
    not \''string\''\n/tmp/tmptid0vals.d(25): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmptid0vals.d(26): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmptid0vals.d(26): Error: semicolon expected, not \''string\''\n/tmp/tmptid0vals.d(26):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmptid0vals.d(32):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptid0vals.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k as string + v;\n    foreach(k, v) \n\
    \    {\n        bool isUpper = char.isUpper(k);\n        bool isLower = char.isLower(k);\n\
    \        if(isUpper != isLower)\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5lvgfqfd.d(23): Error: no identifier for declarator v\n/tmp/tmp5lvgfqfd.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp5lvgfqfd.d(23): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmp5lvgfqfd.d(24): Error: no identifier
    for declarator v\n/tmp/tmp5lvgfqfd.d(24): Error: found \'')\'' when expecting
    \'';\''\n/tmp/tmp5lvgfqfd.d(31): Error: found \''return\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lvgfqfd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k as string).isLower();\n\
    \        bool isStringUpper = (k as string).isUpper();\n        if(!isString &&\
    \ !isStringUpper)\n        {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n</code>\n<|/ a tags=d,string,dictionary |>\n<| c |>\nI like\
    \ your solution. However it only works for strings. I need a solution that works\
    \ for any type. I'll update my question to reflect this.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a solution that works for any type.\n<|/ c |>\n\
    <| a dscore=1 |>\nI like Jonathan's answer, but I think it can be simplified a\
    \ bit:\n<code>\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgp4zg21t.d(23): Error: no identifier for declarator v\n/tmp/tmpgp4zg21t.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpgp4zg21t.d(25): Error: found
    \''as\'' when expecting \'')\''\n/tmp/tmpgp4zg21t.d(25): Error: semicolon expected,
    not \''string\''\n/tmp/tmpgp4zg21t.d(25): Error: found \'')\'' when expecting
    \'';\'' following statement\n/tmp/tmpgp4zg21t.d(26): Error: found \''as\'' when
    expecting \'')\''\n/tmp/tmpgp4zg21t.d(26): Error: semicolon expected, not \''string\''\n/tmp/tmpgp4zg21t.d(26):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmpgp4zg21t.d(32):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmpgp4zg21t.d(34): Error:
    Declaration expected, not \''<\''\n/tmp/tmpgp4zg21t.d(37): Error: unterminated
    character constant\n/tmp/tmpgp4zg21t.d(43): Error: unterminated character constant\n/tmp/tmpgp4zg21t.d(49):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpgp4zg21t.d(50): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpgp4zg21t.d(51): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpgp4zg21t.d(52): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpgp4zg21t.d(53): Error: Declaration expected, not \''assert\''\n/tmp/tmpgp4zg21t.d(54):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpgp4zg21t.d(55): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpgp4zg21t.d(56): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgp4zg21t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (!is_string(k) || !is_string(v))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpksrharph.d(23): Error: no identifier for declarator `v`\n/tmp/tmpksrharph.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpksrharph.d(28): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksrharph.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) {\n        if (!is_string(key)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbep7f0uh.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbep7f0uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key, dict | {\n        if(!is_string(key) || !is_string(dict[key]))\n\
    \            return false;\n    });\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6d7dr6yr.d(23): Error: no identifier for declarator dict\n/tmp/tmp6d7dr6yr.d(23):
    Error: found \''|\'' when expecting \'';\''\n/tmp/tmp6d7dr6yr.d(26): Error: use
    \''{ }\'' for an empty statement, not a \'';\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6d7dr6yr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += k, v;\n    foreach(k, v) \n    {\n    \
    \    auto lower = toLower(k);\n        auto upper = toUpper(k);\n        if(lower\
    \ != k) \n        {\n            auto lower = toLower(v);\n            auto upper\
    \ = toUpper(v);\n            if(lower != v) \n            {\n                return\
    \ false;\n            }\n        }\n        if(upper != k) \n        {\n     \
    \       auto lower = toLower(v);\n            auto upper = toUpper(v);\n     \
    \       if(upper != v) \n            {\n                return false;\n      \
    \      }\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\nI wrote a small function to check whether a dictionary is nullable or\
    \ not.\n<code>\nimport std.algorithm;\nimport std.conv;\nimport std.string;\n\
    import std.conv;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpshbrzhvl.d(23): Error: no identifier for declarator v\n/tmp/tmpshbrzhvl.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpshbrzhvl.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpshbrzhvl.d(24): Error: no identifier for
    declarator v\n/tmp/tmpshbrzhvl.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpshbrzhvl.d(47):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmpshbrzhvl.d(49): Error:
    Declaration expected, not \''<\''\n/tmp/tmpshbrzhvl.d(114): Error: identifier
    expected following package\n/tmp/tmpshbrzhvl.d(114): Error: \'';\'' expected\n/tmp/tmpshbrzhvl.d(115):
    Error: Declaration expected, not \''{\''\n/tmp/tmpshbrzhvl.d(118): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpshbrzhvl.d(119): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpshbrzhvl.d(120): Error: Declaration expected, not \''assert\''\n/tmp/tmpshbrzhvl.d(121):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpshbrzhvl.d(122): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpshbrzhvl.d(123): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpshbrzhvl.d(124): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpshbrzhvl.d(125): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshbrzhvl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(string key in dict) \n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key]))\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj_9n7p_8.d(23): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_9n7p_8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !isNull(v);\n    foreach(k, v) \n    {\n\
    \        if (!isNull(v)) \n        {\n            string s = toLower(k);\n   \
    \         string t = toUpper(k);\n            if (s != t) return false;\n    \
    \    }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplijyxcjp.d(23): Error: no identifier for declarator v\n/tmp/tmplijyxcjp.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmplijyxcjp.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmplijyxcjp.d(24): Error: no identifier for
    declarator v\n/tmp/tmplijyxcjp.d(24): Error: found \'')\'' when expecting \'';\''\n/tmp/tmplijyxcjp.d(33):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplijyxcjp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if (k is string) \n        {\n\
    \            if (k is string) \n            {\n                return true;\n\
    \            }\n            else \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a tags=d,string,dictionary\
    \ |>\n<| c |>\nThis doesn't work if you have a key that is a `char` or a `char[]`\n\
    <|/ c |>\n<| c |>\nI didn't test it, but I believe it works. I tested it on `null`\
    \ dictionary and `null` string, and it returned `false`. What do you mean by \"\
    doesn't work\"? It returns `true` on `null` dictionary and `null` string.\n<|/\
    \ c |>\n<| c |>\nI mean it returns true for an empty dictionary and an empty string\n\
    <|/ c |>\n<| c |>\nYes, it returns `true` for an empty dictionary and an empty\
    \ string. That's what it does. I tested it on `null` dictionary and `null` string,\
    \ and it returned `false`. What do you mean by \"doesn't work\"? It returns `true`\
    \ on `null` dictionary and `null` string.\n<|/ c |>\n<| c |>\nI tested it on `null`\
    \ dictionary and `null` string, and it returned `false`. What do you mean by \"\
    doesn't work\"? It returns `true` on `null` dictionary and `null` string.\n<|/\
    \ c |>\n<| a tags=d,string,dictionary |>\nI wrote a function that checks if a\
    \ dictionary is nullable or not:\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.array;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport st\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq1xa9qcr.d(23): Error: no identifier for declarator v\n/tmp/tmpq1xa9qcr.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpq1xa9qcr.d(37): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpq1xa9qcr.d(39): Error: Declaration
    expected, not \''<\''\n/tmp/tmpq1xa9qcr.d(42): Error: unterminated character constant\n/tmp/tmpq1xa9qcr.d(45):
    Error: unterminated character constant\n/tmp/tmpq1xa9qcr.d(51): Error: unterminated
    character constant\n/tmp/tmpq1xa9qcr.d(92): Error: \'';\'' expected\n/tmp/tmpq1xa9qcr.d(93):
    Error: Declaration expected, not \''{\''\n/tmp/tmpq1xa9qcr.d(96): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpq1xa9qcr.d(97): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpq1xa9qcr.d(98): Error: Declaration expected, not \''assert\''\n/tmp/tmpq1xa9qcr.d(99):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpq1xa9qcr.d(100): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpq1xa9qcr.d(101): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpq1xa9qcr.d(102): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpq1xa9qcr.d(103): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1xa9qcr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppv18se5b.d(23): Error: no identifier for declarator `v`\n/tmp/tmppv18se5b.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmppv18se5b.d(23): Error: expression
    expected, not `in`\n/tmp/tmppv18se5b.d(23): Error: found `dict` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppv18se5b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !k.isNullable() && !v.isNullable();\n \
    \   return !dict.isEmpty();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=d,string,dictionary\
    \ |>\nI came up with this:\n<code>\nimport std.stdio;\nimport std.string;\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphnodpw5u.d(23): Error: no identifier for declarator v\n/tmp/tmphnodpw5u.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmphnodpw5u.d(23): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmphnodpw5u.d(26): Error: Declaration expected,
    not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphnodpw5u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        bool isString = (k is string);\n\
    \        bool isLowerCase = (k is string) && k.isLower();\n        bool isUpperCase\
    \ = (k is string) && k.isUpper();\n        bool isNull = k is null;\n        bool\
    \ isNullOrEmpty = k is null;\n        bool isNullOrEmptyOrFalse = k is null;\n\
    \        bool isNullOrFalse = k is null;\n        bool isNullOrFalseOrFalse =\
    \ k is null;\n        bool isNullOrFalseOrFalseOrFalse = k is null;\n        bool\
    \ isNullOrFalseOrFalseOrFalseOrFalse = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalse\
    \ = k is null;\n        bool isNullOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOrFalseOr\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc9aspq17.d(23): Error: no identifier for declarator v\n/tmp/tmpc9aspq17.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpc9aspq17.d(44): Error: semicolon
    expected, not \''unittest\''\n/tmp/tmpc9aspq17.d(44): Error: found \''unittest\''
    instead of statement\n/tmp/tmpc9aspq17.d(56): Error: found \''void\'' when expecting
    \'')\''\n/tmp/tmpc9aspq17.d(56): Error: found \''{\'' when expecting \'';\'' following
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc9aspq17.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) in dict \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a little function to check\
    \ whether a dictionary is nullable or not:\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.conv;\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplz_fkmde.d(23): Error: no identifier for declarator v\n/tmp/tmplz_fkmde.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmplz_fkmde.d(23): Error: expression
    expected, not \''in\''\n/tmp/tmplz_fkmde.d(23): Error: found \''dict\'' when expecting
    \'')\''\n/tmp/tmplz_fkmde.d(32): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplz_fkmde.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt3d0noxz.d(23): Error: no identifier for declarator v\n/tmp/tmpt3d0noxz.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpt3d0noxz.d(28): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt3d0noxz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) {\n        if (k == k.toLowerCase()) {\n      \
    \      return true;\n        }\n        if (k == k.toUpperCase()) {\n        \
    \    return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_fii6uh8.d(23): Error: no identifier for declarator v\n/tmp/tmp_fii6uh8.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_fii6uh8.d(31): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_fii6uh8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) dict += !k.isNullable() && !v.isNullable();\n \
    \   return !dict.isEmpty();\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5cxe9khd.d(23): Error: no identifier for declarator v\n/tmp/tmp5cxe9khd.d(23):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp5cxe9khd.d(23): Error: found
    \'';\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cxe9khd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659799862
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"\
    apple\", \"b\": \"banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>>\
    \ check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n\
    \    false\n    >>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\"\
    : \"Houston\"].nullable)\n    false\n    >>> check_dict_case([\"STATE\": \"NC\"\
    , \"ZIP\": \"12345\"].nullable)\n    true\n    \n*/\nbool check_dict_case(Nullable!(string[string])\
    \ dict) \n{\n    foreach(k, v) \n    {\n        if(!is_string(k) || !is_string(v))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe77mf3jn.d(23): Error: no identifier for declarator `v`\n/tmp/tmpe77mf3jn.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpe77mf3jn.d(30): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe77mf3jn.d",
    "-I/tmp"]\n'''
  stdout: b''
