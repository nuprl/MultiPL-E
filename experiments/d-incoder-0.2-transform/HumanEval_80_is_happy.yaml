name: HumanEval_80_is_happy
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\n \
  \   Your task is to check if the string is happy or not.\n    A string is happy\
  \ if its length is at least 3 and every 3 consecutive letters are distinct\n   \
  \ For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
  \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n\
  \    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n"
tests: "unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
  ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\"\
  ) == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
  adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
  iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
completions: ["{\n    int len = s.length();\n    for(int i = 0; i < len; i+=3)\n \
    \   {\n        if(std.algorithm.distinct(s.subarray(i,i+3)) != 0)\n          \
    \  return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"aba\" where there\
    \ are two a's.\n<|/ c |>\n<| c |>\nI believe this fails for \"aba\" because \"\
    aba\" has length 3 and there are two a's.\n<|/ c |>\n<| c |>\nI believe this fails\
    \ for \"aba\" because \"aba\" has length 3 and there are two a's.\n<|/ c |>\n\
    <| c |>\nI believe this fails for \"aba\" because \"aba\" has length 3 and there\
    \ are two a's.\n<|/ c |>\n<| c |>\nI believe this fails for \"aba\" because \"\
    aba\" has length 3 and there are two a's.\n<|/ c |>\n<| a tags=string,c++,arrays\
    \ |>\n<code>", "{\n    int len = s.length();\n    if (len < 3)\n        return\
    \ false;\n    \n    for (int i = 0; i < len-3; i++)\n    {\n        if (std.string.eof(s.sub(i,\
    \ i+3)))\n            return false;\n    }\n    \n    return true;\n}", "{\n \
    \   int len = s.length();\n    if (len < 3)\n        return false;\n    for (int\
    \ i = 0; i < len-3; i++)\n        if (std.algorithm.distinct(a.substr(i, 3)) <\
    \ 3)\n            return false;\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>", "{\n    int len = s.length();\n    if (len < 3)\n    \
    \    return false;\n    for (int i = 0; i < len-3; i++)\n    {\n        if (std.algorithm.distinct(a.sub(i,\
    \ i+3)) < 3)\n            return false;\n    }\n    return true;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    int len = s.length();\n\
    \    if(len < 3)\n        return false;\n    for(int i = 0; i < len-3; i++)\n\
    \    {\n        if(std.algorithm.distinct(s.subvec(i, i+3)) != 0)\n          \
    \  return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| a tags=string,c++,algorithm |>\n<code>", "{\n    int len = s.length();\n\
    \    if (len < 3)\n        return false;\n    \n    for(int i = 0; i < len-3;\
    \ i++)\n    {\n        if (s[i] == s[i+1] && s[i] == s[i+2])\n            return\
    \ false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    int[] count = new int[26];\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        count[s[i] - 'a']++;\n    }\n    for(int i = 0; i < 26;\
    \ i++)\n    {\n        if(count[i] != 3)\n            return false;\n    }\n \
    \   return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try\
    \ `is_happy(\"aba\")`\n<|/ c |>\n<| c |>\nI didn't test it, but I believe it works.\
    \ I tested it on `is_happy(\"aba\")` and it returned `false`. Did you test it?\n\
    <|/ c |>\n<| c |>\nI tested it on `is_happy(\"aba\")` and it returned `false`.\
    \ Did you test it?\n<|/ c |>\n<| c |>\nYes, I tested it on `is_happy(\"aba\")`\
    \ and it returned `false`. Did you test it?\n<|/ c |>\n<| c |>\nI tested it on\
    \ `is_happy(\"aba\")` and it returned `false`. Did you test it?\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "{\n    int len = s.length();\n    if (len < 3)\n  \
    \      return false;\n    \n    for (int i = 0; i < len-3; i++) {\n        if\
    \ (s[i] == s[i+1] && s[i] == s[i+2])\n            return false;\n    }\n    \n\
    \    return true;\n}", "{\n    int len = s.length();\n    if (len < 3)\n     \
    \   return false;\n    \n    for (int i = 0; i < len-3; i++) {\n        if (s.charAt(i)\
    \ != s.charAt(i+1) && s.charAt(i) != s.charAt(i+2))\n            return false;\n\
    \    }\n    \n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "{\n    int n = s.length();\n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < n; j++)\n        {\n            if(i != j)\n     \
    \       {\n                if(s[i] != s[j])\n                {\n             \
    \       return false;\n                }\n            }\n        }\n    }\n  \
    \  return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try\
    \ it with `is_happy(\"aba\")`\n<|/ c |>\n<| c |>\nI did try it and it works fine.\
    \ Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `is_happy(\"aba\")`\n<|/ c |>\n<| c |>\nIt works for me. Can you please\
    \ elaborate on what is not working?\n<|/ c |>\n<| c |>\nIt doesn't work for `is_happy(\"\
    aba\")`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    int n = s.length();\n  \
    \  if (n < 3)\n        return false;\n    for (int i = 0; i < n-3; i++)\n    \
    \    if (std.algorithm.distinct(a.sub(i, i+3)) < 3)\n            return false;\n\
    \    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    int len = s.length();\n    if(len < 3)\n        return false;\n    for(int\
    \ i = 0; i < len-3; i++)\n    {\n        if(s[i] == s[i+1] && s[i] == s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are repeated letters in the string.\
    \ For example, `is_happy(\"abcabc\") returns true`\n<|/ c |>\n<| c |>\nYes, I\
    \ forgot to mention that. Thanks for pointing it out. I've edited my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    int len = s.length();\n    for(int\
    \ i=0;i<len;i++)\n    {\n        if(s[i]!=s[i+1])\n            return false;\n\
    \    }\n    return len>=3;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. Try `is_happy(\"abcabc\")`\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you please explain why it doesnt work?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work because you return false immediately after the first character is checked.\
    \ Try `is_happy(\"abcabc\")`\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for\
    \ pointing that out. I edited my answer to fix it.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. Thanks for pointing that out. I edited my answer to fix it.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>", "{\n    int len = s.length();\n    if(len < 3)\n\
    \        return false;\n    for(int i = 0; i < len-3; i++)\n    {\n        if(s[i]\
    \ != s[i+1] && s[i] != s[i+2])\n            return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    int n = s.length();\n    if (n < 3)\n        return\
    \ false;\n    \n    for (int i = 0; i < n; i++)\n    {\n        if (s[i] == s[i+1])\n\
    \        {\n            if (s[i] != s[i+2])\n                return false;\n \
    \       }\n    }\n    return true;\n}", "{\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    \n    for(int i = 0; i < n-3; i++)\n    {\n        if\
    \ (s[i] == s[i+1] && s[i] == s[i+2])\n        {\n            return false;\n \
    \       }\n    }\n    return true;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n\
    <| c |>\n`std::set` would be a better choice than `std::map`\n<|/ c |>\n<| c |>\n\
    I agree, `std::set` would be a better choice. But the OP asked for a solution\
    \ without using any additional libraries.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ `std::set` would be a better choice. But OP asked for a solution without using\
    \ any additional libraries.\n<|/ c |>\n<| c |>\nI agree with you, `std::set` would\
    \ be a better choice. But OP asked for a solution without using any additional\
    \ libraries.\n<|/ c |>\n<| c |>\nI agree with you, `std::set` would be a better\
    \ choice. But OP asked for a solution without using any additional libraries.\n\
    <|/ c |>\n<| a tags=string,c++,arrays |>\n<code>", "{\n    int len = s.length();\n\
    \    if(len < 3)\n        return false;\n    for(int i = 0; i < len-3; i++)\n\
    \    {\n        if(s[i] == s[i+1] && s[i] == s[i+2])\n            return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>", "{\n    int n = s.length();\n    for(int i = 0; i < n; i++)\n \
    \   {\n        if(s[i] != s[i + 1])\n            return false;\n    }\n    return\
    \ s.length() >= 3;\n}", "{\n    int n = s.length();\n    for(int i = 0; i < n;\
    \ i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n            if(i\
    \ != j && s[i] != s[j])\n            {\n                return false;\n      \
    \      }\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| c |>\nI like your solution, but I believe it can be done in O(n) time\
    \ complexity by using a hash table. I'll post my answer in a minute.\n<|/ c |>\n\
    <| c |>\nYes, I believe it can be done in O(n) time complexity by using a hash\
    \ table. I'll post my answer in a minute.\n<|/ c |>\n<| c |>\nI believe it can\
    \ be done in O(n) time complexity by using a hash table. I'll post my answer in\
    \ a minute.\n<|/ c |>\n<| c |>\nI believe it can be done in O(n) time complexity\
    \ by using a hash table. I'll post my answer in a minute.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    int len = s.length();\n    if (len < 3)\n        return\
    \ false;\n    \n    for (int i = 0; i < len-3; i++) {\n        if (s[i] == s[i+1]\
    \ && s[i] == s[i+2])\n            return false;\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain why you used `std.string` instead of `std::string`?\n\
    <|/ c |>\n<| c |>\n`std.string` is part of the standard library. `std::string`\
    \ is part of the C++ standard library.\n<|/ c |>\n<| c |>\nThanks. I didn't know\
    \ that. :)\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
