{
  "language": "d",
  "name": "HumanEval_49_modp",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res - n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyzlb9011.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpyzlb9011.__unittest_L26_C1() [0x427a59]\n??:? void tmpyzlb9011.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres = (res * 2L) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres = (res * 2L) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres = (res * 2L) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres = (res * 2L) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvsk5golu.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsk5golu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = n;\n\tlong t = n;\n\tlong q = n;\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t % p;\n\t\tq = q * p;\n\t}\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t * p;\n\t\tq = q * p;\n\t}\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t % p;\n\t\tq = q * p;\n\t}\n\treturn t;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q) \n{\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = n;\n\tlong t = n;\n\tlong q = n;\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t % p;\n\t\tq = q * p;\n\t}\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t * p;\n\t\tq = q * p;\n\t}\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t % p;\n\t\tq = q * p;\n\t}\n\treturn t;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = n;\n\tlong t = n;\n\tlong q = n;\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t % p;\n\t\tq = q * p;\n\t}\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t * p;\n\t\tq = q * p;\n\t}\n\twhile (r != 0) {\n\t\tr = r / p;\n\t\tt = t % p;\n\t\tq = q * p;\n\t}\n\treturn t;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpftpehfxm.d(118): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftpehfxm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > p) {\n\t\tres *= 2;\n\t\tn -= p;\n\t}\n\treturn res - n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphmwd30oh.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmphmwd30oh.__unittest_L26_C1() [0x427a59]\n??:? void tmphmwd30oh.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres = (res * 2L) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpplu33zg_.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpplu33zg_.__unittest_L27_C1() [0x427a69]\n??:? void tmpplu33zg_.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj2dsr9z4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpj2dsr9z4.__unittest_L28_C1() [0x427a55]\n??:? void tmpj2dsr9z4.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxtry_qgi.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpxtry_qgi.__unittest_L27_C1() [0x427a69]\n??:? void tmpxtry_qgi.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tr = r * p % n;\n\t\tn = n / 2;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0uzznxdw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp0uzznxdw.__unittest_L26_C1() [0x427a6d]\n??:? void tmp0uzznxdw.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong i;\n\t\n\tfor (i = 1; i < p; i++) \n\t{\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc0mfnj6j.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpc0mfnj6j.__unittest_L30_C1() [0x427a7d]\n??:? void tmpc0mfnj6j.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n % p;\n\t\tres = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvr5onxzz.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpvr5onxzz.__unittest_L31_C1() [0x427a97]\n??:? void tmpvr5onxzz.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnkt4vf2f.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkt4vf2f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n) {\n\t\tres = (res*p) % n;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbukc03xi.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpbukc03xi.__unittest_L28_C1() [0x427a5d]\n??:? void tmpbukc03xi.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % p;\n\t\tn = (n-1L)/2L;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt_xfeb9o.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpt_xfeb9o.__unittest_L29_C1() [0x427a7d]\n??:? void tmpt_xfeb9o.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\t\tp--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\t\tp--;\n\t}\n\treturn res & mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long base) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\t\tp--;\n\t}\n\treturn res & mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long base, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\t\tp--;\n\t}\n\treturn res & mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ss5on9_.d(111): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ss5on9_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tif (t % p == 0L) {\n\t\t\tres = (res * 2L) % p;\n\t\t}\n\t\tt /= 2L;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8t4a479.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp_8t4a479.__unittest_L29_C1() [0x427a79]\n??:? void tmp_8t4a479.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn -= (n & -p);\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl18c3wnt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpl18c3wnt.__unittest_L26_C1() [0x427a61]\n??:? void tmpl18c3wnt.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1L;\n    \n    while (n > p) {\n        res = (1L << n) % (1L << p);\n        n -= p;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q) \n{\n    long res = 1L;\n    \n    while (n > p) {\n        res = (1L << n) % (1L << p);\n        n -= p;\n    }\n    while (n > q) {\n        res = (1L << n) % (1L << q);\n        n -= q;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r) \n{\n    long res = 1L;\n    \n    while (n > p) {\n        res = (1L << n) % (1L << p);\n        n -= p;\n    }\n    while (n > q) {\n        res = (1L << n) % (1L << q);\n        n -= q;\n    }\n    while (n > r) {\n        res = (1L << n) % (1L << r);\n        n -= r;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r, long s) \n{\n    long res = 1L;\n    \n    while (n > p) {\n        res = (1L << n) % (1L << p);\n        n -= p;\n    }\n    while (n > q) {\n        res = (1L << \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptc48jk5k.d(111): Error: expression expected, not `unittest`\n/tmp/tmptc48jk5k.d(110): Error: found `{` when expecting `)`\n/tmp/tmptc48jk5k.d(113): Error: found `alias` when expecting `;` following statement\n/tmp/tmptc48jk5k.d(123): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptc48jk5k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n != 0L) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) res = (res*2L) % p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphfain9c6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmphfain9c6.__unittest_L26_C1() [0x427a75]\n??:? void tmphfain9c6.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\treturn (r < 0) ? q + p : q;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q) \n{\n\tlong r;\n\tr = n % p;\n\treturn (r < 0) ? q + p : q;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong r;\n\tr = n % p;\n\treturn (r < 0) ? q + p : q;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r, long s) \n{\n\tlong r;\n\tr = n % p;\n\treturn (r < 0) ? q + p : q;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\tlong r;\n\tr = n % p;\n\treturn (r < 0) ? q + p : q;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm6k39fv0.d(104): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6k39fv0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * mod % p) % p;\n\t\tn = n >> 1;\n\t\tmod = mod << 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * mod % p) % p;\n\t\tn = n >> 1;\n\t\tmod = mod << 1;\n\t\tmod2 = mod2 << 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * mod % p) % p;\n\t\tn = n >> 1;\n\t\tmod = mod << 1;\n\t\tmod2 = mod2 << 1;\n\t\tmod3 = mod3 << 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphh5royn2.d(106): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphh5royn2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*p) % p;\n\t\tn >>= 1L;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnofbnml1.d(113): Error: found `unittest` when expecting `)`\n/tmp/tmpnofbnml1.d(125): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnofbnml1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_0bcxn23.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp_0bcxn23.__unittest_L26_C1() [0x427a55]\n??:? void tmp_0bcxn23.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong result = 1L;\n\t\n\twhile (n > p) {\n\t\tresult *= 2L;\n\t\tn -= p;\n\t}\n\t\n\treturn result % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm0iocne_.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpm0iocne_.__unittest_L28_C1() [0x427a5d]\n??:? void tmpm0iocne_.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > 0) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > 0) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > 0) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tres *= mod2;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > 0) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tres *= mod2;\n\t\tres %= n;\n\t\tres *= mod3;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoagjlnxq.d(105): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoagjlnxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tif (t % p == 0L) {\n\t\t\tres = (res * t) % p;\n\t\t}\n\t\tt = t / p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxfoxthua.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpxfoxthua.__unittest_L29_C1() [0x427a75]\n??:? void tmpxfoxthua.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\t\n\twhile (t != 0L) {\n\t\tif (t & 1L) \n\t\t\tres = (res * p) % p;\n\t\tt = t >> 1L;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppjz1ho8e.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmppjz1ho8e.__unittest_L30_C1() [0x427a6d]\n??:? void tmppjz1ho8e.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong q, r;\n\tq = n / mod;\n\tr = n % mod;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong q, r;\n\tq = n / mod2;\n\tr = n % mod2;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * mod2;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong q, r;\n\tq = n / mod3;\n\tr = n % mod3;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * mod3;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ajgm2rk.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ajgm2rk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpekb9lu5w.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpekb9lu5w.__unittest_L26_C1() [0x427a55]\n??:? void tmpekb9lu5w.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > p) {\n\t\tres *= 2;\n\t\tn -= p;\n\t}\n\t\n\treturn n % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa75qn_ch.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpa75qn_ch.__unittest_L28_C1() [0x427a83]\n??:? void tmpa75qn_ch.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tr = r * p % n;\n\t\tn = n / 2;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0uzznxdw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp0uzznxdw.__unittest_L26_C1() [0x427a6d]\n??:? void tmp0uzznxdw.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1;\n    \n    while(n) {\n        if(n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp2p(long n, long p) \n{\n    long res = 1;\n    \n    while(n) {\n        if(n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp2p(3L, 5L)\n    3L\n    >>> modp2p(1101L, 101L)\n    2L\n    >>> modp2p(0L, 101L)\n    1L\n    >>> modp2p(3L, 11L)\n    8L\n    >>> modp2p(100L, 101L)\n    1L\n    \n*/\nlong modp2p(long n, long p) \n{\n    long res = 1;\n    \n    while(n) {\n        if(n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp2p(3L, 5L)\n    3L\n    >>> modp2p(1101L, 101L)\n    2L\n    >>> modp2p(0L, 101L)\n    1L\n    >>> modp2p(3L, 11L)\n    8L\n    >>> modp2p(100L, 101L)\n    1L\n    \n*/\nlong modp2p(long n, long p) \n{\n    long res = 1;\n    \n    while(n) {\n        if(n&1) res = (res*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp2p(3L, 5L)\n    3L\n    >>> modp2p(1101L, 101L)\n    2L\n    >>> modp2p(0L, 101L)\n    1L\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgzxq_t4c.d(103): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzxq_t4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1;\n    \n    while (n > 0) {\n        if (n & 1) res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*p) % p;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*p) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*p) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*p) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb6hqb8kq.d(95): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6hqb8kq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_0bcxn23.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp_0bcxn23.__unittest_L26_C1() [0x427a55]\n??:? void tmp_0bcxn23.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong mask = p-1L;\n\twhile (n>0) {\n\t\tlong tmp = n&mask;\n\t\tres = (res*tmp) % p;\n\t\tn = (n>>1) & mask;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\tlong mask = p-1L;\n\twhile (n>0) {\n\t\tlong tmp = n&mask;\n\t\tres = (res*tmp) % mod;\n\t\tn = (n>>1) & mask;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\tlong mask = p-1L;\n\twhile (n>0) {\n\t\tlong tmp = n&mask;\n\t\tres = (res*tmp) % mod;\n\t\tres = (res*tmp) % mod2;\n\t\tn = (n>>1) & mask;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\tlong mask = p-1L;\n\twhile (n>0) {\n\t\tlong tmp = n&mask;\n\t\tres = (res*tmp) % mod;\n\t\tres = (res*tmp) % mod2;\n\t\tres = (res*tmp) % \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyi1arip.d(102): Error: expression expected, not `unittest`\n/tmp/tmpyyi1arip.d(103): Error: found `{` when expecting `;` following statement\n/tmp/tmpyyi1arip.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyi1arip.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1L;\n\twhile (n) {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuglbdz8h.d(113): Error: found `unittest` instead of statement\n/tmp/tmpuglbdz8h.d(125): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuglbdz8h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong mask = 1L;\n\t\n\twhile (n > 1L) {\n\t\tlong tmp = n & mask;\n\t\tres = (res * tmp) % p;\n\t\tmask = (mask * 2L) % p;\n\t\tn = tmp;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg53pg4rl.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpg53pg4rl.__unittest_L31_C1() [0x427a79]\n??:? void tmpg53pg4rl.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > p) {\n\t\tres *= 2;\n\t\tn -= p;\n\t}\n\treturn res + n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpef90g2_c.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpef90g2_c.__unittest_L26_C1() [0x427a59]\n??:? void tmpef90g2_c.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tr = r * p;\n\t\t}\n\t\tn = n / 2;\n\t\tp = p * p;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4s3l0r3f.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp4s3l0r3f.__unittest_L31_C1() [0x427a91]\n??:? void tmp4s3l0r3f.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n) {\n\t\tif (n & 1L) {\n\t\t\tres = (res * p) % p;\n\t\t}\n\t\tn = n >> 1L;\n\t\tp = p * pL;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprad_voh2.d(26): Error: undefined identifier `pL`, did you mean variable `p`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprad_voh2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) \n\t{\n\t\tres *= p;\n\t\tn -= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnjfx25p0.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpnjfx25p0.__unittest_L29_C1() [0x427a5d]\n??:? void tmpnjfx25p0.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1L;\n\twhile (n) {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuglbdz8h.d(113): Error: found `unittest` instead of statement\n/tmp/tmpuglbdz8h.d(125): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuglbdz8h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\tlong mask = 1;\n\t\n\twhile (n > p) {\n\t\tres *= 2;\n\t\tmask <<= 1;\n\t\tn >>= 1;\n\t}\n\t\n\twhile (mask) {\n\t\tif (n & mask) res += p;\n\t\tmask >>= 1;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphtu220ft.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmphtu220ft.__unittest_L35_C1() [0x427a81]\n??:? void tmphtu220ft.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\t\n\twhile (t != 0L) {\n\t\tlong r = t % p;\n\t\tt /= p;\n\t\tres = (res * r) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkh51tp7i.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpkh51tp7i.__unittest_L29_C1() [0x427a9b]\n??:? void tmpkh51tp7i.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl046z9mi.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpl046z9mi.__unittest_L27_C1() [0x427a71]\n??:? void tmpl046z9mi.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1L;\n    long t = n;\n    while(t != 0L) {\n        if(t & 1L) {\n            res = (res * p) % p;\n        }\n        t = t >> 1L;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n    long res = 1L;\n    long t = n;\n    while(t != 0L) {\n        if(t & 1L) {\n            res = (res * p) % mod;\n        }\n        t = t >> 1L;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n    long res = 1L;\n    long t = n;\n    while(t != 0L) {\n        if(t & 1L) {\n            res = (res * p) % mod;\n        }\n        t = t >> 1L;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n    long res = 1L;\n    long t = n;\n    while(t != 0L) {\n        if(t & 1L) {\n            res = (res * p) % mod;\n        }\n        t = t >> 1L;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdxkvw2wj.d(107): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxkvw2wj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj2dsr9z4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpj2dsr9z4.__unittest_L28_C1() [0x427a55]\n??:? void tmpj2dsr9z4.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tres = (res * tmp) % p;\n\t\tn = (n * tmp) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tres = (res * tmp) % p;\n\t\tn = (n * tmp) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tres = (res * tmp) % p;\n\t\tn = (n * tmp) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tres = (res * tmp) % p;\n\t\tn = (n * tmp) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpefg8g4n2.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefg8g4n2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp44jl8zjz.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp44jl8zjz.__unittest_L31_C1() [0x427a91]\n??:? void tmp44jl8zjz.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tlong r = t % p;\n\t\tt /= p;\n\t\tres = (res * r) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpup_3ohrj.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpup_3ohrj.__unittest_L28_C1() [0x427a9b]\n??:? void tmpup_3ohrj.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164414
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfi4c3kcd.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpfi4c3kcd.__unittest_L27_C1() [0x427a69]\n??:? void tmpfi4c3kcd.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % p;\n\t\tn = (n*2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn = (n*2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn = (n*2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn = (n*2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1owkt82p.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1owkt82p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1L;\n\twhile (n) {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuglbdz8h.d(113): Error: found `unittest` instead of statement\n/tmp/tmpuglbdz8h.d(125): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuglbdz8h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_0bcxn23.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp_0bcxn23.__unittest_L26_C1() [0x427a55]\n??:? void tmp_0bcxn23.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % p;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqd1a5syn.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpqd1a5syn.__unittest_L27_C1() [0x427a7d]\n??:? void tmpqd1a5syn.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp84bohatw.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84bohatw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= n;\n\t\tn--;\n\t}\n\twhile (res < p) {\n\t\tres *= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpze6_ybnk.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpze6_ybnk.__unittest_L29_C1() [0x427a71]\n??:? void tmpze6_ybnk.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1L;\n    long tmp;\n    \n    tmp = n - p;\n    if (tmp > 0) {\n        res = res * tmp;\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprrwiwyep.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmprrwiwyep.__unittest_L29_C1() [0x427a59]\n??:? void tmprrwiwyep.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsi1p6q5h.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpsi1p6q5h.__unittest_L27_C1() [0x427a71]\n??:? void tmpsi1p6q5h.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong tmp;\n\t\n\ttmp = (n - p) % p;\n\tif (tmp > 0)\n\t\tres = p;\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpssr2ivfk.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpssr2ivfk.__unittest_L28_C1() [0x427a55]\n??:? void tmpssr2ivfk.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n != 0L) {\n\t\tif (n % p == 0L) {\n\t\t\tres *= p;\n\t\t\tn /= p;\n\t\t} else {\n\t\t\tres *= p;\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164414
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_0bcxn23.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp_0bcxn23.__unittest_L26_C1() [0x427a55]\n??:? void tmp_0bcxn23.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\t\n\twhile (t != 0L) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1L;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp578p0y7j.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp578p0y7j.__unittest_L29_C1() [0x427a8b]\n??:? void tmp578p0y7j.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnkt4vf2f.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkt4vf2f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\t\n\twhile (n) {\n\t\tlong m = n & -p;\n\t\tn ^= m;\n\t\tr += m;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv7j50cga.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpv7j50cga.__unittest_L29_C1() [0x427a59]\n??:? void tmpv7j50cga.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2)%p;\n\t\tn = (n*2)%p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164414
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong result = 1L;\n\t\n\twhile (n > p) \n\t{\n\t\tresult *= p;\n\t\tn -= p;\n\t}\n\t\n\twhile (n >= p) \n\t{\n\t\tresult %= p;\n\t\tn -= p;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkwd4xuyg.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpkwd4xuyg.__unittest_L35_C1() [0x427a85]\n??:? void tmpkwd4xuyg.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*p) % p;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*mod) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*mod) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*mod) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpva4uggjp.d(95): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva4uggjp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tif (t % p == 0) {\n\t\t\tres = res * 2L;\n\t\t}\n\t\tt = t / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tif (t % p == 0) {\n\t\t\tres = res * 2L;\n\t\t}\n\t\tt = t / p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tif (t % p == 0) {\n\t\t\tres = res * 2L;\n\t\t}\n\t\tt = t / p;\n\t}\n\treturn res * mod * mod2;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tif (t % p == 0) {\n\t\t\tres = res * 2L;\n\t\t}\n\t\tt = t / p;\n\t}\n\treturn res * mod * mod2 * mod3;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnlo5syut.d(107): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlo5syut.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % p;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res*2L) % mod;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw_wh1zd1.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_wh1zd1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t;\n\t\n\tfor (t = n; t > 0; t >>= 1)\n\t\tif (t & p)\n\t\t\tres *= 2L;\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptet86b8g.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmptet86b8g.__unittest_L28_C1() [0x427a61]\n??:? void tmptet86b8g.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp + r / p;\n\t\tn = n / p;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0zh723to.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp0zh723to.__unittest_L27_C1() [0x427aa3]\n??:? void tmp0zh723to.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong result = 1L;\n\twhile (n > p) \n\t{\n\t\tresult *= 2L;\n\t\tn -= p;\n\t}\n\treturn result % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ws_tqu1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp5ws_tqu1.__unittest_L27_C1() [0x427a5d]\n??:? void tmp5ws_tqu1.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res*2L) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res*2L) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res*2L) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res*2L) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res*2L) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqmp3uul2.d(112): Error: expression expected, not `unittest`\n/tmp/tmpqmp3uul2.d(113): Error: semicolon expected, not `{`\n/tmp/tmpqmp3uul2.d(124): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmp3uul2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) \n\t{\n\t\tres = (res*2L) % p;\n\t\tn = (n*2L) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx72n7lrw.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpx72n7lrw.__unittest_L29_C1() [0x427a69]\n??:? void tmpx72n7lrw.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\t\n\twhile (n >= p) {\n\t\tres %= p;\n\t\tn -= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpghf2x0bj.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpghf2x0bj.__unittest_L33_C1() [0x427a75]\n??:? void tmpghf2x0bj.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1ob5y5sd.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp1ob5y5sd.__unittest_L27_C1() [0x427a59]\n??:? void tmp1ob5y5sd.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj2dsr9z4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpj2dsr9z4.__unittest_L28_C1() [0x427a55]\n??:? void tmpj2dsr9z4.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnkt4vf2f.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkt4vf2f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > p) {\n\t\ttmp = n % p;\n\t\tres = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmply63attt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmply63attt.__unittest_L30_C1() [0x427a71]\n??:? void tmply63attt.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1L;\n    long t = n;\n    \n    while (t != 0L) {\n        if (t & 1L) \n            res = (res * p) % p;\n        t = t >> 1L;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n    long res = 1L;\n    long t = n;\n    \n    while (t != 0L) {\n        if (t & 1L) \n            res = (res * p) % mod;\n        t = t >> 1L;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n    long res = 1L;\n    long t = n;\n    \n    while (t != 0L) {\n        if (t & 1L) \n            res = (res * p) % mod;\n        if (t & 2L) \n            res = (res * mod2) % mod;\n        t = t >> 1L;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n    long res = 1L;\n    long t = n;\n    \n    while (t != 0L) {\n        if (t & 1L) \n            res = (res * p) % mod;\n        if (t & 2L) \n            res = (res * mod2) % mod;\n        if (t & 4L) \n            res = (res * mod3) % mod;\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzcf59e3h.d(110): Error: found `unittest` instead of statement\n/tmp/tmpzcf59e3h.d(122): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzcf59e3h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\twhile (t != 0L) {\n\t\tlong tmp = t % p;\n\t\tif (tmp != 0L) {\n\t\t\tres = (res * tmp) % p;\n\t\t}\n\t\tt = t / p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnhscb01u.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpnhscb01u.__unittest_L30_C1() [0x427a9f]\n??:? void tmpnhscb01u.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > 1L) {\n\t\tlong r = n % p;\n\t\tres = (res * r) % p;\n\t\tn = (n * r) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > 1L) {\n\t\tlong r = n % p;\n\t\tres = (res * r) % mod;\n\t\tn = (n * r) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > 1L) {\n\t\tlong r = n % p;\n\t\tres = (res * r) % mod;\n\t\tn = (n * r) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > 1L) {\n\t\tlong r = n % p;\n\t\tres = (res * r) % mod;\n\t\tn = (n * r) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ujqvlkk.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ujqvlkk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9eefrdym.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eefrdym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpekb9lu5w.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpekb9lu5w.__unittest_L26_C1() [0x427a55]\n??:? void tmpekb9lu5w.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tr = r * p % n;\n\t\tn = n / 2;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp32ety_pc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp32ety_pc.__unittest_L28_C1() [0x427a6d]\n??:? void tmp32ety_pc.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res*2L) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % p == 0) {\n\t\t\tres *= p;\n\t\t\tres %= p;\n\t\t}\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp22jp3xl.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpp22jp3xl.__unittest_L29_C1() [0x427a85]\n??:? void tmpp22jp3xl.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\t\n\twhile (i<n) {\n\t\tr = r*t % p;\n\t\tt = t*t % p;\n\t\ti = i*i % p;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164415
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1;\n    \n    while (n > 0)\n    {\n        if (n & 1)\n            res = (res * p) % p;\n        \n        n = n >> 1;\n        p = (p * p) % p;\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnkt4vf2f.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkt4vf2f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res * mod % p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res * mod % p * mod2 % p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res * mod % p * mod2 % p * mod3 % p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_0sxzdxf.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0sxzdxf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_i2zkkq8.d(117): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_i2zkkq8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p == 0) {\n\t\t\tres *= p;\n\t\t\tn /= p;\n\t\t} else {\n\t\t\tres = (res*p) % p;\n\t\t\tn--;\n\t\t}\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long m) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p == 0) {\n\t\t\tres *= p;\n\t\t\tn /= p;\n\t\t} else {\n\t\t\tres = (res*p) % p;\n\t\t\tn--;\n\t\t}\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long m, long q) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p == 0) {\n\t\t\tres *= p;\n\t\t\tn /= p;\n\t\t} else {\n\t\t\tres = (res*p) % p;\n\t\t\tn--;\n\t\t}\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long m, long q, long r) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p == 0) {\n\t\t\tres *= p;\n\t\t\tn /= p;\n\t\t} else {\n\t\t\tres = (res*p) % p;\n\t\t\tn--;\n\t\t}\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqpd5zwk5.d(115): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpd5zwk5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tr = r * t % p;\n\t\tt = t >> 31;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q) \n{\n\tlong r = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tr = r * t % p;\n\t\tt = t >> 31;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong r = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tr = r * t % p;\n\t\tt = t >> 31;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r, long s) \n{\n\tlong r = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tr = r * t % p;\n\t\tt = t >> 31;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp189bpd4a.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp189bpd4a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4p1h3i_7.d(112): Error: expression expected, not `unittest`\n/tmp/tmp4p1h3i_7.d(113): Error: semicolon expected, not `{`\n/tmp/tmp4p1h3i_7.d(124): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4p1h3i_7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong i = 1L;\n\twhile (i < p) {\n\t\tres = (res * n) % p;\n\t\ti++;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbv5t1gyg.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpbv5t1gyg.__unittest_L27_C1() [0x427a65]\n??:? void tmpbv5t1gyg.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= mod;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnkt4vf2f.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkt4vf2f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9eefrdym.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eefrdym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res<<1) + 1L;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res<<1) + 1L;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res<<1) + 1L;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres = (res<<1) + 1L;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuqn4mirc.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqn4mirc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfgn_1_0j.d(112): Error: expression expected, not `unittest`\n/tmp/tmpfgn_1_0j.d(113): Error: semicolon expected, not `{`\n/tmp/tmpfgn_1_0j.d(124): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgn_1_0j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1L;\n\twhile (n) {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuglbdz8h.d(113): Error: found `unittest` instead of statement\n/tmp/tmpuglbdz8h.d(125): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuglbdz8h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9eefrdym.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eefrdym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong q, r;\n\t\n\tq = n / p;\n\tr = n % p;\n\t\n\tif (r > 0) {\n\t\tq++;\n\t}\n\t\n\treturn q * p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdybnsx54.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpdybnsx54.__unittest_L30_C1() [0x427a59]\n??:? void tmpdybnsx54.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1) res = (res*p) % mod;\n\t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1) res = (res*p) % mod;\n\t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1) res = (res*p) % mod;\n\t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8tk0t8nb.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tk0t8nb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong result = 1L;\n\t\n\twhile (n != 0L) {\n\t\tif (n % p == 0L) {\n\t\t\tresult = result * p;\n\t\t}\n\t\tn = n / p;\n\t\tp = p * p;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp570w1wmo.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp570w1wmo.__unittest_L31_C1() [0x427a7d]\n??:? void tmp570w1wmo.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) \n\t{\n\t\tres = (res<<1) + n % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxhy0rd_d.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpxhy0rd_d.__unittest_L29_C1() [0x427a6d]\n??:? void tmpxhy0rd_d.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong result = 1L;\n\t\n\twhile (n > p) \n\t{\n\t\tresult *= 2L;\n\t\tn -= p;\n\t}\n\t\n\treturn result % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzszctpjr.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpzszctpjr.__unittest_L29_C1() [0x427a5d]\n??:? void tmpzszctpjr.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164414
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpekb9lu5w.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpekb9lu5w.__unittest_L26_C1() [0x427a55]\n??:? void tmpekb9lu5w.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > p) {\n\t\tres *= 2;\n\t\tn -= p;\n\t}\n\t\n\treturn res - n;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw4ygc7c4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpw4ygc7c4.__unittest_L28_C1() [0x427a59]\n??:? void tmpw4ygc7c4.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpce1pi32q.d(110): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpce1pi32q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplajankq4.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplajankq4.__unittest_L29_C1() [0x427a55]\n??:? void tmplajankq4.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164413
    },
    {
      "exit_code": 0,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res*2L) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= mod;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= mod;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= mod;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp40tcq6i2.d(118): Error: expression expected, not `unittest`\n/tmp/tmp40tcq6i2.d(119): Error: found `{` when expecting `;` following statement\n/tmp/tmp40tcq6i2.d(130): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40tcq6i2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1;\n    \n    while (n > 0)\n    {\n        if (n & 1)\n            res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n    }\n    \n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n    long res = 1;\n    \n    while (n > 0)\n    {\n        if (n & 1)\n            res = (res * p) % mod;\n        n >>= 1;\n        p = (p * p) % mod;\n    }\n    \n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n    long res = 1;\n    \n    while (n > 0)\n    {\n        if (n & 1)\n            res = (res * p) % mod;\n        n >>= 1;\n        p = (p * p) % mod;\n    }\n    \n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n    long res = 1;\n    \n    while (n > 0)\n    {\n        if (n & 1)\n            res = (res * p) % mod;\n        n >>= 1;\n        p = (p * p) % mod;\n    }\n    \n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw4kjveqf.d(115): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4kjveqf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4p1h3i_7.d(112): Error: expression expected, not `unittest`\n/tmp/tmp4p1h3i_7.d(113): Error: semicolon expected, not `{`\n/tmp/tmp4p1h3i_7.d(124): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4p1h3i_7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164415
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\tlong t = n;\n\tlong m;\n\t\n\twhile ((t & 1) == 0) {\n\t\tt >>= 1;\n\t\tr += 1;\n\t}\n\tm = p / t;\n\t\n\tif (m == 0) \n\t\treturn n;\n\t\n\tm %= p;\n\t\n\tif (m > 0)\n\t\tr = modp(r * t, p);\n\telse\n\t\tr = modp(r * t, p + m);\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164415
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr5vqd1dr.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpr5vqd1dr.__unittest_L26_C1() [0x427a5d]\n??:? void tmpr5vqd1dr.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n != 0L) {\n\t\tif (n % p == 0L) {\n\t\t\tres *= p;\n\t\t\tn /= p;\n\t\t}\n\t\telse {\n\t\t\tres += p;\n\t\t\tn %= p;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164415
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_0bcxn23.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp_0bcxn23.__unittest_L26_C1() [0x427a55]\n??:? void tmp_0bcxn23.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9eefrdym.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eefrdym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tif (n % p) r *= p;\n\t\tn /= p;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tif (n % p) r *= mod;\n\t\tn /= p;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tif (n % p) r *= mod;\n\t\tn /= p;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tif (n % p) r *= mod;\n\t\tn /= p;\n\t}\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tif (n % \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp8v4ym17.d(114): Error: expression expected, not `unittest`\n/tmp/tmpp8v4ym17.d(115): Error: found `{` when expecting `)`\n/tmp/tmpp8v4ym17.d(126): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8v4ym17.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile (n > p) {\n\t\tr = r * 2;\n\t\tn = n / p;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp60pgt_uo.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp60pgt_uo.__unittest_L26_C1() [0x427a61]\n??:? void tmp60pgt_uo.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n != 0L) {\n\t\tif (n % p == 0) {\n\t\t\tres = (res * 2L) % p;\n\t\t}\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwzmbkjkc.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpwzmbkjkc.__unittest_L29_C1() [0x427a75]\n??:? void tmpwzmbkjkc.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n != 0L) {\n\t\tif (n % p == 0L) {\n\t\t\tres = (res*2L) % p;\n\t\t}\n\t\tn = n / p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnh4qtz2m.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpnh4qtz2m.__unittest_L28_C1() [0x427a75]\n??:? void tmpnh4qtz2m.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbfgj98vd.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpbfgj98vd.__unittest_L30_C1() [0x427a89]\n??:? void tmpbfgj98vd.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % mod;\n\t\tn = (n * 2L) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpce1pi32q.d(110): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpce1pi32q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl417hik3.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpl417hik3.__unittest_L27_C1() [0x427a75]\n??:? void tmpl417hik3.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= n;\n\t\tn /= mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9eefrdym.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eefrdym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong result = 1L;\n\twhile (n > p) \n\t{\n\t\tresult *= 2L;\n\t\tn -= p;\n\t}\n\treturn result % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ws_tqu1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp5ws_tqu1.__unittest_L27_C1() [0x427a5d]\n??:? void tmp5ws_tqu1.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\tlong m = p;\n\t\n\twhile (n) {\n\t\tif (n&1) \n\t\t\tr = r*m % p;\n\t\tm = m*m % p;\n\t\tn = n>>1;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgg3zo6qa.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpgg3zo6qa.__unittest_L31_C1() [0x427a85]\n??:? void tmpgg3zo6qa.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile (n) {\n\t\tlong t = r * n % p;\n\t\tr = t;\n\t\tn = n / p;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptwjd80oy.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmptwjd80oy.__unittest_L27_C1() [0x427a8b]\n??:? void tmptwjd80oy.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong result = 1L;\n\t\n\twhile (n != 0L) {\n\t\tlong r = n % p;\n\t\t\n\t\tif (r != 0L) {\n\t\t\tresult = result * p;\n\t\t}\n\t\t\n\t\tn = n / p;\n\t\tp = p;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl241963q.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpl241963q.__unittest_L34_C1() [0x427a79]\n??:? void tmpl241963q.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres = (res * 2L) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprowut3jl.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmprowut3jl.__unittest_L26_C1() [0x427a69]\n??:? void tmprowut3jl.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) {\n\t\tres = (res * 2L) % p;\n\t\tn = (n * 3L) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsbf5ai7s.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpsbf5ai7s.__unittest_L28_C1() [0x427a6d]\n??:? void tmpsbf5ai7s.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr5vqd1dr.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpr5vqd1dr.__unittest_L26_C1() [0x427a5d]\n??:? void tmpr5vqd1dr.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) {\n\t\tres = (res * 2L) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc7223u8b.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpc7223u8b.__unittest_L28_C1() [0x427a69]\n??:? void tmpc7223u8b.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoxilou1p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpoxilou1p.__unittest_L28_C1() [0x427a85]\n??:? void tmpoxilou1p.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= p;\n\t\tn--;\n\t}\n\twhile (n < p) \n\t{\n\t\tres /= p;\n\t\tn++;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= mod;\n\t\tn--;\n\t}\n\twhile (n < p) \n\t{\n\t\tres /= mod;\n\t\tn++;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= mod;\n\t\tn--;\n\t}\n\twhile (n < p) \n\t{\n\t\tres /= mod;\n\t\tn++;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= mod;\n\t\tn--;\n\t}\n\twhile (n < p) \n\t{\n\t\tres /= mod;\n\t\tn++;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe_gwxtej.d(119): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_gwxtej.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\tlong m = n;\n\twhile (m > p) \n\t{\n\t\tm -= p;\n\t\tr *= 2;\n\t}\n\treturn r%p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfcbu6kcd.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpfcbu6kcd.__unittest_L28_C1() [0x427a5d]\n??:? void tmpfcbu6kcd.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n & 1L) res = (res*p) % p;\n\t\tn = (n-1L)/2L;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9mg2e1s1.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp9mg2e1s1.__unittest_L26_C1() [0x427a79]\n??:? void tmp9mg2e1s1.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif(r > 0) {\n\t\tq++;\n\t}\n\treturn q * p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpme_ru2z4.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpme_ru2z4.__unittest_L27_C1() [0x427a59]\n??:? void tmpme_ru2z4.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n != 0L) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164416
    },
    {
      "exit_code": -1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong r = 1;\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp + n;\n\t\tn = tmp;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164416
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1L;\n    long i;\n    for(i = 1; i < p; i++) \n        res = (res * n) % p;\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplfwknou1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmplfwknou1.__unittest_L25_C1() [0x427a6d]\n??:? void tmplfwknou1.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n != 0L) {\n\t\tif (n % p == 0L) {\n\t\t\tres = (res * 2L) % p;\n\t\t}\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkx17kdau.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpkx17kdau.__unittest_L29_C1() [0x427a75]\n??:? void tmpkx17kdau.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > p) {\n\t\tres *= 2;\n\t\tn -= p;\n\t}\n\t\n\treturn n % p;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa75qn_ch.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpa75qn_ch.__unittest_L28_C1() [0x427a83]\n??:? void tmpa75qn_ch.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n > p) {\n\t\tres = (res * 2L) % p;\n\t\tn = (n * 2L) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc7223u8b.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpc7223u8b.__unittest_L28_C1() [0x427a69]\n??:? void tmpc7223u8b.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong tmp;\n\t\n\ttmp = n;\n\twhile (tmp > p) {\n\t\ttmp >>= 1;\n\t\tres++;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcoara7bm.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpcoara7bm.__unittest_L30_C1() [0x427a59]\n??:? void tmpcoara7bm.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong q, r;\n\tq = n / mod;\n\tr = n % mod;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong q, r;\n\tq = n / mod2;\n\tr = n % mod2;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * mod2;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong q, r;\n\tq = n / mod3;\n\tr = n % mod3;\n\tif (r > 0) {\n\t\tq++;\n\t}\n\treturn q * mod3;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ajgm2rk.d(114): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ajgm2rk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164398
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p == 0) {\n\t\t\tres *= p;\n\t\t\tn /= p;\n\t\t} else {\n\t\t\tres = (res*p) % p;\n\t\t\tn--;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqq23lwmv.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpqq23lwmv.__unittest_L31_C1() [0x427a8d]\n??:? void tmpqq23lwmv.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7lo23slb.d(103): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lo23slb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif (r == 0)\n\t\treturn q;\n\telse\n\t\treturn q * modp(q, p) + r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp2n(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif (r == 0)\n\t\treturn q;\n\telse\n\t\treturn q * modp2n(q, p) + r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp2n(3L, 5L)\n    3L\n    >>> modp2n(1101L, 101L)\n    2L\n    >>> modp2n(0L, 101L)\n    1L\n    >>> modp2n(3L, 11L)\n    8L\n    >>> modp2n(100L, 101L)\n    1L\n    \n*/\nlong modp2n_mod(long n, long p) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif (r == 0)\n\t\treturn q;\n\telse\n\t\treturn q * modp2n_mod(q, p) + r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp2n_mod(3L, 5L)\n    3L\n    >>> modp2n_mod(1101L, 101L)\n    2L\n    >>> modp2n_mod(0L, 101L)\n    1L\n    >>> modp2n_mod(3L, 11L)\n    8L\n    >>> modp2n_mod(100L, 101L)\n    1L\n    \n*/\nlong modp2n_mod(long n, long p, long mod) \n{\n\tlong q, r;\n\tq = n / p;\n\tr = n % p;\n\tif (r == 0)\n\t\treturn q;\n\telse\n\t\treturn q * modp2n_mod(q, p, mod) + r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp2n_mod(3L, 5L, 5L)\n    3L\n    >>> modp2n_mod(1101L, 101L, 5L)\n    2L\n    >>> modp2n_mod(0L, 101L, 5L)\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8fg9o1lf.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fg9o1lf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1L) res = (res*p) % p;\n\t\tn>>=1L;\n\t\tp>>=1L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1L) res = (res*p) % mod;\n\t\tn>>=1L;\n\t\tmod>>=1L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1L) res = (res*p) % mod;\n\t\tn>>=1L;\n\t\tmod>>=1L;\n\t\tmod2>>=1L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n&1L) res = (res*p) % mod;\n\t\tn>>=1L;\n\t\tmod>>=1L;\n\t\tmod2>>=1L;\n\t\tmod3>>=1L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkglf8izu.d(102): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkglf8izu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxtry_qgi.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpxtry_qgi.__unittest_L27_C1() [0x427a69]\n??:? void tmpxtry_qgi.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr5vqd1dr.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpr5vqd1dr.__unittest_L26_C1() [0x427a5d]\n??:? void tmpr5vqd1dr.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy8eve3uu.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpy8eve3uu.__unittest_L27_C1() [0x427a75]\n??:? void tmpy8eve3uu.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\tlong t;\n\t\n\tfor (; n > 0; n--)\n\t{\n\t\tt = res * p;\n\t\tres = (res % p + t) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1;\n\tlong t;\n\t\n\tfor (; n > 0; n--)\n\t{\n\t\tt = res * p;\n\t\tres = (res % p + t) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\tlong t;\n\t\n\tfor (; n > 0; n--)\n\t{\n\t\tt = res * p;\n\t\tres = (res % p + t) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\tlong t;\n\t\n\tfor (; n > 0; n--)\n\t{\n\t\tt = res * p;\n\t\tres = (res % p + t) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphd4rbvaq.d(111): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd4rbvaq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= mod;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= mod;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= mod;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp40tcq6i2.d(118): Error: expression expected, not `unittest`\n/tmp/tmp40tcq6i2.d(119): Error: found `{` when expecting `;` following statement\n/tmp/tmp40tcq6i2.d(130): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40tcq6i2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= n;\n\t\tn--;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfi4c3kcd.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpfi4c3kcd.__unittest_L27_C1() [0x427a69]\n??:? void tmpfi4c3kcd.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tif (n % p) \n\t\t\tres *= p;\n\t\tn /= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl046z9mi.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpl046z9mi.__unittest_L27_C1() [0x427a71]\n??:? void tmpl046z9mi.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42823c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164399
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res * mod % p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res * mod % p * mod2 % p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res * mod % p * mod2 % p * mod3 % p;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_0sxzdxf.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0sxzdxf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164400
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\tlong t = n;\n\t\n\twhile (t != 0L) {\n\t\tif (t & 1L) res = (res * p) % p;\n\t\tt = t >> 1L;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyo7q4vzb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpyo7q4vzb.__unittest_L29_C1() [0x427a6d]\n??:? void tmpyo7q4vzb.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n    long res = 1L;\n    \n    while (n != 0) {\n        if (n & 1L) {\n            res = (res * p) % p;\n        }\n        n >>= 1L;\n        p = (p * p) % p;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n    long res = 1L;\n    \n    while (n != 0) {\n        if (n & 1L) {\n            res = (res * p) % mod;\n        }\n        n >>= 1L;\n        p = (p * p) % mod;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n    long res = 1L;\n    \n    while (n != 0) {\n        if (n & 1L) {\n            res = (res * p) % mod;\n        }\n        n >>= 1L;\n        p = (p * p) % mod;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n    long res = 1L;\n    \n    while (n != 0) {\n        if (n & 1L) {\n            res = (res * p) % mod;\n        }\n        n >>= 1L;\n        p = (p * p) % mod;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1bo06uib.d(111): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bo06uib.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= mod2;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres *= mod;\n\t\tres %= mod2;\n\t\tres %= mod3;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpihw9a3ok.d(115): Error: no identifier for declarator `long`\n/tmp/tmpihw9a3ok.d(115): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihw9a3ok.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) \n\t{\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpte54zvbx.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpte54zvbx.__unittest_L27_C1() [0x427a55]\n??:? void tmpte54zvbx.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": -8,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1;\n\tlong mask = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n & mask;\n\t\tres = (res * tmp) % p;\n\t\tmask = mask << 1;\n\t\tn = (n - tmp) / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ia62d3h.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmp6ia62d3h.__unittest_L33_C1() [0x427a81]\n??:? void tmp6ia62d3h.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r, long s) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\tlong res = 1L;\n\twhile (n) {\n\t\tres = (re\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu7_up1ss.d(113): Error: found `unittest` when expecting `)`\n/tmp/tmpu7_up1ss.d(115): Error: found `{` when expecting `;` following statement\n/tmp/tmpu7_up1ss.d(126): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7_up1ss.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > 1L) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp78tdf_uu.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmp78tdf_uu.__unittest_L26_C1() [0x427a69]\n??:? void tmp78tdf_uu.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n % mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n % mod % mod2;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1L;\n\twhile (n > p) {\n\t\tres *= 2L;\n\t\tn -= p;\n\t}\n\treturn res + n % mod % mod2 % mod3;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p, long mod, long mod\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpku4msbak.d(110): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku4msbak.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164401
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n    >>> modp(3L, 5L)\n    3L\n    >>> modp(1101L, 101L)\n    2L\n    >>> modp(0L, 101L)\n    1L\n    >>> modp(3L, 11L)\n    8L\n    >>> modp(100L, 101L)\n    1L\n    \n*/\nlong modp(long n, long p) \n{\n\tlong res = 1L;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres = (res * n) % p;\n\t\tn = n / 2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpllww142r.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpllww142r.__unittest_L29_C1() [0x427aab]\n??:? void tmpllww142r.__modtest() [0x427b80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb49]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fad5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]\n??:? runModuleUnitTests [0x42b8f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42824c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164402
    }
  ]
}