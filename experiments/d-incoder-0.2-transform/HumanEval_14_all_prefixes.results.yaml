language: d
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8tmyi_d0.d(100): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tmyi_d0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i + 1, string.Length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\n\
    string[] all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgd1jicun.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgd1jicun.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6oepaycd.d(11): Error: `string` is used as a type\n/tmp/tmp6oepaycd.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6oepaycd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpogz6xa3f.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpogz6xa3f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i,string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprbeaslwk.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprbeaslwk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string pattern) \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9q5e_w66.d(100): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q5e_w66.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6t22emn2.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6t22emn2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[length];\n    for(int\
    \ i = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start)\
    \ \n{\n    string[] result = new string[length];\n    for(int i = start; i < string.length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[length];\n    for(int i = start; i < end; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[length];\n    for(int i = start; i < end; i+=step)\n        result[i]\
    \ = string.Substring(i);\n    return result;\n}\n/*\n Return list of \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_dfwn243.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_dfwn243.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq5vry5e2.d(105): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5vry5e2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(start, i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(start, i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end,\
    \ int step) \n{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(start,\
    \ i);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string prefix) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdhk5a4ep.d(96): Error: found `unittest` when expecting `]`\n/tmp/tmpdhk5a4ep.d(97):
    Error: semicolon expected, not `{`\n/tmp/tmpdhk5a4ep.d(104): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdhk5a4ep.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7uoho9c.d(11): Error: `string` is used as a type\n/tmp/tmpi7uoho9c.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7uoho9c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, i);\n \
    \       i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkerckb39.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkerckb39.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += length;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += length;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3, 1)\n    [\"ab\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += length;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3, 0, 1)\n    [\"\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6o1oc2_c.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6o1oc2_c.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3zqchi_g.d(102): Error: found `unittest` when expecting `]`\n/tmp/tmp3zqchi_g.d(103):
    Error: semicolon expected, not `{`\n/tmp/tmp3zqchi_g.d(110): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp3zqchi_g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5mp9hdzb.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5mp9hdzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string[] result = new string[string.length];\n  \
    \  for(int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxke6c5u3.d(91): Error: no identifier for declarator `int`\n/tmp/tmpxke6c5u3.d(91):
    Error: expression expected, not `unittest`\n/tmp/tmpxke6c5u3.d(92): Error: found
    `{` when expecting `;` following `for` condition\n/tmp/tmpxke6c5u3.d(93): Error:
    expression expected, not `alias`\n/tmp/tmpxke6c5u3.d(93): Error: found `candidate`
    when expecting `)`\n/tmp/tmpxke6c5u3.d(93): Error: found `=` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxke6c5u3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i+1, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i+1, string.length-i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i-start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i-start, step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgjjsomwh.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjjsomwh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6_crye94.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_crye94.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb39fatt6.d(100): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb39fatt6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnhyrbfv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa_dr7n3n.d(101): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_dr7n3n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnbew6zn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptog5do7g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcghdrpvi.d(105): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpcghdrpvi.d(106): Error: found \''{\'' when expecting
    \'';\'' following statement\n/tmp/tmpcghdrpvi.d(113): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpcghdrpvi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(0, i);\n \
    \       i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i] = string.Substring(i);\n       \
    \ i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\
    \ \n    {\n        result[i] = string.Substring(0, length);\n        i++;\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3)\n    [\"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(start, length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3, 1)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5nmobro7.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5nmobro7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuikriql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm7yjqtx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnhyrbfv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(i, string.length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(0, i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(0, i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(start, i);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start, int end) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(start, i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end, int step) \n{\n    string[] result = new \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_kc1stb.d(96): Error: basic type expected, not unittest\n/tmp/tmps_kc1stb.d(96):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmps_kc1stb.d(96): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmps_kc1stb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; ++i)\n        result[i] = string.Substring(i, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n        result[i] = string.Substring(i,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9iplwrth.d(90): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9iplwrth.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgn60cu79.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv48r9q_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 3)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[length];\n    for(int i = start; i < string.length; ++i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 3)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[length];\n    for(int i = start; i < end; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[length];\n    for(int i = start; i < end; i += step)\n        result[i]\
    \ = string.Sub\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb5bm6cma.d(92): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpb5bm6cma.d(100): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpb5bm6cma.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpms1bbkkc.d(102): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmpms1bbkkc.d(103): Error: semicolon expected, not \''{\''\n/tmp/tmpms1bbkkc.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpms1bbkkc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = startIndex; i < endIndex;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = startIndex;\
    \ i < endIndex; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int startIndex,\
    \ int endIndex\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4in42pxv.d(100): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4in42pxv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i + length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3)\n    [\"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 3,\
    \ 2)\n    [\"ab\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 3,\
    \ 2)\n    [\"ab\", \"c\"]\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4qjxtzha.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4qjxtzha.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiedq6tuq.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpiedq6tuq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i += step)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step, string\
    \ separator) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i += step, separator\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ku7j0d8.d(91): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmp7ku7j0d8.d(99):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ku7j0d8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n  \
    \  string[] result = new string[string.Length];\n    int i = 0;\n    while(i <\
    \ string.Length)\n    {\n        result[i++] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk25ucbuz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3zqchi_g.d(102): Error: found `unittest` when expecting `]`\n/tmp/tmp3zqchi_g.d(103):
    Error: semicolon expected, not `{`\n/tmp/tmp3zqchi_g.d(110): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp3zqchi_g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzub8k9z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ii0olsi.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmp7ii0olsi.d(103):
    Error: semicolon expected, not \''{\''\n/tmp/tmp7ii0olsi.d(110): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7ii0olsi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length) \n{\n    string[] result = new string[\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2y_uhdd3.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmp2y_uhdd3.d(103):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmp2y_uhdd3.d(104): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y_uhdd3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, end - start, step);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxsxt6jv.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnxsxt6jv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new \n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmposgzz3b8.d(102): Error: basic type expected, not unittest\n/tmp/tmposgzz3b8.d(102):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmposgzz3b8.d(102): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmposgzz3b8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i++] = string.substr(0, i);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0t9t93m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5r118mj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_uhsqs8t.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_uhsqs8t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(start, end - start);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ end - start, step);\n    }\n    return result;\n}\n/*\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp17ap3bts.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp17ap3bts.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i + 1, string.length - i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    for(; i <\
    \ string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, length, end);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp79a3xo31.d(106): Error: basic type expected, not unittest\n/tmp/tmp79a3xo31.d(106):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp79a3xo31.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.length - i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(i, (length < string.length - i) ? length : string.length -\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i,\
    \ (length < string.length - i) ? length : string.length - i, start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i,\
    \ (length < string.length - i) ? length : string.length - i, start, end);\n  \
    \  }\n    return result;\n}\n/*\n Return list of \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgw5fp1h0.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgw5fp1h0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbiw6bphi.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbiw6bphi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxii57h51.d(91): Error: found \''unittest\'' when expecting \'';\''
    following for condition\n/tmp/tmpxii57h51.d(99): Error: found \''void\'' when
    expecting \'')\''\n/tmp/tmpxii57h51.d(99): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxii57h51.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgn60cu79.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end, int step, int length) \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7y6k8thf.d(100): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7y6k8thf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvujvxs5j.d(102): Error: semicolon expected, not \''unittest\''\n/tmp/tmpvujvxs5j.d(102):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpvujvxs5j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(start,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i++] = string.substr(start,end);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,end,step);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamf2jlx8.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpamf2jlx8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnbew6zn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdm65jg8k.d(102): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpdm65jg8k.d(110): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdm65jg8k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int size) \n{\n    string[] result = \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl_4r70v.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmphl_4r70v.d(103):
    Error: semicolon expected, not \''{\''\n/tmp/tmphl_4r70v.d(110): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphl_4r70v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu_1xj0d1.d(100): Error: basic type expected, not unittest\n/tmp/tmpu_1xj0d1.d(100):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpu_1xj0d1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\"\
    , \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n \
    \   \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substring\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeky3cb0s.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpeky3cb0s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(0, length);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n Return \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp795s0udx.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp795s0udx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsf19qrod.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_o_u_fuk.d(102): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp_o_u_fuk.d(110): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_o_u_fuk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5r118mj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeum_njtt.d(101): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeum_njtt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(i+1,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ i);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length, end);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmple2ancln.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i,string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9k3_5kb2.d(110): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9k3_5kb2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwzlcyslt.d(100): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwzlcyslt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzub8k9z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptog5do7g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f8yo53e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = new string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0dcv_fz.d(102): Error: semicolon expected, not \''unittest\''\n/tmp/tmpn0dcv_fz.d(102):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpn0dcv_fz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpexf11_24.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexf11_24.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(start,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i++] = string.substr(start,end);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,end,step);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamf2jlx8.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpamf2jlx8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i, length);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.substr(i,\
    \ length, start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.substr(i,\
    \ length, start, end);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpveop85qm.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpveop85qm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i += step)\n        result\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2bysoflc.d(92): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmp2bysoflc.d(100): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2bysoflc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuxbmotty.d(100): Error: basic type expected, not unittest\n/tmp/tmpuxbmotty.d(100):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpuxbmotty.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgb3ugcwi.d(101): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgb3ugcwi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, length);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3, 1)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3, 0, 1)\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr61l9yim.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr61l9yim.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(start, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj6nhz4hj.d(106): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6nhz4hj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpleqmgbw0.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpleqmgbw0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end, \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6v5uaev1.d(100): Error: basic type expected, not unittest\n/tmp/tmp6v5uaev1.d(100):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6v5uaev1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpisp9mifr.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpisp9mifr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68rrtkym.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string prefix) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwn4sc2yi.d(102): Error: semicolon expected, not \''unittest\''\n/tmp/tmpwn4sc2yi.d(102):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpwn4sc2yi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpab_mg0w6.d(102): Error: semicolon expected, not \''unittest\''\n/tmp/tmpab_mg0w6.d(102):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpab_mg0w6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9l5zocql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(0, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shor\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzdyvbuwe.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzdyvbuwe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpadlmi6op.d(100): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadlmi6op.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7q5fl5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5mp9hdzb.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5mp9hdzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i + 1, string.Length\
    \ - i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpna725elj.d(101): Error: expression expected, not \''unittest\''\n/tmp/tmpna725elj.d(102):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpna725elj.d(103): Error: expression
    expected, not \''alias\''\n/tmp/tmpna725elj.d(103): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpna725elj.d(103): Error: expression expected, not
    \''=\''\n/tmp/tmpna725elj.d(103): Error: found \''all_prefixes\'' when expecting
    \'',\''\n/tmp/tmpna725elj.d(103): Error: expression expected, not \'';\''\n/tmp/tmpna725elj.d(105):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpna725elj.d(105): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpna725elj.d(106): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpna725elj.d(107): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpna725elj.d(108): Error: expression expected, not \''}\''\n/tmp/tmpna725elj.d(109):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpna725elj.d(109): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpna725elj.d(109): Error: expression
    expected, not \''}\''\n/tmp/tmpna725elj.d(109): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpna725elj.d(109): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpna725elj.d(109):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmpna725elj.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpna725elj.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpna725elj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8i4jtkbi.d(100): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8i4jtkbi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(0, i);\n \
    \       i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp119gygis.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp119gygis.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i++] = string.substr(start, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,\
    \ i, step);\n    }\n    return result;\n}\n/*\n \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn3h3tuql.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpn3h3tuql.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\", \"ab\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp59yuhzf7.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp59yuhzf7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(start, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.Length];\n    int i =\
    \ 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpspa8s1za.d(107): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspa8s1za.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ehtvipx.d(114): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp5ehtvipx.d(122): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5ehtvipx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\"\
    , \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\", \"b\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpljtg753h.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpljtg753h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr3vtwmqc.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3vtwmqc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm7yjqtx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; ++i)\n    {\n  \
    \      result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw87fgyfu.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw87fgyfu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, i);\n \
    \       i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Sub\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0dqwnhvy.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp0dqwnhvy.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmp0dqwnhvy.d(109): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0dqwnhvy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr3vtwmqc.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3vtwmqc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptog5do7g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr3vtwmqc.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3vtwmqc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvnyd5mft.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmpvnyd5mft.d(103):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpvnyd5mft.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnyd5mft.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n        result[i] = string.Substring(0, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end, int end2) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfnx5j7d1.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfnx5j7d1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6oepaycd.d(11): Error: `string` is used as a type\n/tmp/tmp6oepaycd.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6oepaycd.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgzwwfuzk.d(91): Error: semicolon expected, not \''unittest\''\n/tmp/tmpgzwwfuzk.d(91):
    Error: expression expected, not \''unittest\''\n/tmp/tmpgzwwfuzk.d(92): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpgzwwfuzk.d(93):
    Error: expression expected, not \''alias\''\n/tmp/tmpgzwwfuzk.d(93): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpgzwwfuzk.d(93): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzwwfuzk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string separator) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54dn0_bq.d(101): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp54dn0_bq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7uoho9c.d(11): Error: `string` is used as a type\n/tmp/tmpi7uoho9c.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7uoho9c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68rrtkym.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36uiqi0_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36uiqi0_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\", \"b\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeouya4nl.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpeouya4nl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv48r9q_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while (i <\
    \ string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8kpo7z4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp268fi10l.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp268fi10l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(start, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuyzkgqrr.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpuyzkgqrr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(start, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(start, end - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end, int step) \n{\n    string[] result = new string[string.length];\n    int\
    \ i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7z8d680r.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7z8d680r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpog_qn9kp.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpog_qn9kp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9l5zocql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptog5do7g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f61xjsz.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f61xjsz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeum_njtt.d(101): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeum_njtt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = new string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwze1xcf5.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmpwze1xcf5.d(103):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpwze1xcf5.d(104): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwze1xcf5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5r118mj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzub8k9z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(start, end\
    \ - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(start, end\
    \ - start, step);\n    }\n    return result;\n}\n/*\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8cwmsg6z.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8cwmsg6z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68rrtkym.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcc277hhb.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcc277hhb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9l5zocql.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8i4jtkbi.d(100): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8i4jtkbi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphgcxvu5c.d(102): Error: semicolon expected, not \''unittest\''\n/tmp/tmphgcxvu5c.d(102):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphgcxvu5c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while(i <\
    \ string.Length)\n    {\n        result[i] = string.Substring(0, i);\n       \
    \ i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbc1n96qg.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbc1n96qg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(start, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl22d64r.d(106): Error: basic type expected, not unittest\n/tmp/tmphl22d64r.d(106):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphl22d64r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgn60cu79.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8xq7ipe3.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8xq7ipe3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\", \"cba\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i++] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\",\
    \ \"cba\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i, length);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\", \"cba\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.substr(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\", \"cba\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(start, length);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7__psbau.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; i++)\n        result[i] = string.Substring(i, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int step) \n{\n    string[] result = new string[string.length];\n  \
    \  for(int i = start; i < start + length; i += step)\n        result[i] = string.Substring(i,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_3mxz5yc.d(91): Error: expression expected, not \''unittest\''\n/tmp/tmp_3mxz5yc.d(92):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmp_3mxz5yc.d(93):
    Error: expression expected, not \''alias\''\n/tmp/tmp_3mxz5yc.d(93): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmp_3mxz5yc.d(93): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_3mxz5yc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string prefix) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_y4kiies.d(101): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_y4kiies.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36uiqi0_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzub8k9z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhnmayes.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string prefix) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += \nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeiwum5ma.d(91): Error: expression expected, not \''unittest\''\n/tmp/tmpeiwum5ma.d(92):
    Error: found \''{\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpeiwum5ma.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdqk2yng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, i);\n \
    \       i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpibzvv0dr.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibzvv0dr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ start + length; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9xm7j93y.d(100): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xm7j93y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc6i7e56f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < end; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end,\
    \ int step, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvx0t7xfh.d(100): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvx0t7xfh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string pattern) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpule2vc88.d(101): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpule2vc88.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpib5v5vgj.d(100): Error: no identifier for declarator string[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpib5v5vgj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2ibxel72.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ibxel72.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzub8k9z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoyifcl8g.d(112): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoyifcl8g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3_unm1xj.d(106): Error: no identifier for declarator string[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_unm1xj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\"\
    , \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start, int end) \n{\n \
    \   string[] result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa_11xqru.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpa_11xqru.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string prefix) \n{\n    string[] \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu3m0sv96.d(102): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpu3m0sv96.d(110): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpu3m0sv96.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(0, i);\n \
    \       i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0wggyaf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, i);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, length, end);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, \nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpngo5nk1n.d(106): Error: basic type expected, not unittest\n/tmp/tmpngo5nk1n.d(106):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpngo5nk1n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ start + length; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpltm8t154.d(100): Error: basic type expected, not unittest\n/tmp/tmpltm8t154.d(100):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpltm8t154.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nenmdnv.d(11): Error: `string` is used as a type\n/tmp/tmp3nenmdnv.d(11):
    Error: `string` is used as a type\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nenmdnv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2ibxel72.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ibxel72.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805186
