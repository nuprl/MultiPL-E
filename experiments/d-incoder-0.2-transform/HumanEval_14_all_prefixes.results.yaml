language: d
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4urywscs.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4urywscs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i + 1, string.Length\
    \ - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\n\
    string[] all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7mywmi0h.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7mywmi0h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5f6zhi00.d(11): Error: `string` is used as a type

    /tmp/tmp5f6zhi00.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f6zhi00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkjs3rcv.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkjs3rcv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i,string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"b\"]\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwluzqvk3.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwluzqvk3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string pattern) \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi8t2x5im.d(100): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi8t2x5im.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6m2eyhf6.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6m2eyhf6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[length];\n    for(int\
    \ i = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start)\
    \ \n{\n    string[] result = new string[length];\n    for(int i = start; i < string.length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[length];\n    for(int i = start; i < end; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[length];\n    for(int i = start; i < end; i+=step)\n        result[i]\
    \ = string.Substring(i);\n    return result;\n}\n/*\n Return list of \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoooaqh7b.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoooaqh7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kutzyp1.d(105): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kutzyp1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(start, i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(start, i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end,\
    \ int step) \n{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    for(; i < string.length; ++i)\n        result[i] = string.substr(start,\
    \ i);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string prefix) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2c6sdlp.d(96): Error: found `unittest` when expecting `]`

    /tmp/tmpw2c6sdlp.d(97): Error: semicolon expected, not `{`

    /tmp/tmpw2c6sdlp.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2c6sdlp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfr0_ip33.d(11): Error: `string` is used as a type

    /tmp/tmpfr0_ip33.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr0_ip33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, i);\n \
    \       i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsryf33dh.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsryf33dh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += length;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += length;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3, 1)\n    [\"ab\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += length;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3, 0, 1)\n    [\"\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprmw5e7ki.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmw5e7ki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyorxjkct.d(102): Error: found `unittest` when expecting `]`

    /tmp/tmpyorxjkct.d(103): Error: semicolon expected, not `{`

    /tmp/tmpyorxjkct.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyorxjkct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjvip82g.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjvip82g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; ++i)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string[] result = new string[string.length];\n  \
    \  for(int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_aqiqqta.d(91): Error: no identifier for declarator `int`

    /tmp/tmp_aqiqqta.d(91): Error: expression expected, not `unittest`

    /tmp/tmp_aqiqqta.d(92): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp_aqiqqta.d(93): Error: expression expected, not `alias`

    /tmp/tmp_aqiqqta.d(93): Error: found `candidate` when expecting `)`

    /tmp/tmp_aqiqqta.d(93): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_aqiqqta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i+1, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i+1, string.length-i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i-start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i-start, step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwbe7374.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwbe7374.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9we2rsdw.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9we2rsdw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwatz2m_a.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwatz2m_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84ywvza_.d(11): Error: `string` is used as a type

    /tmp/tmp84ywvza_.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84ywvza_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsn010h55.d(101): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn010h55.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprmrni37s.d(11): Error: `string` is used as a type

    /tmp/tmprmrni37s.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmrni37s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(12): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeqertxb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7tr4gmmo.d(105): Error: identifier expected following `.`, not
    `unittest`

    /tmp/tmp7tr4gmmo.d(106): Error: found `{` when expecting `;` following statement

    /tmp/tmp7tr4gmmo.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7tr4gmmo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(0, i);\n \
    \       i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length) \n    {\n        result[i] = string.Substring(i);\n       \
    \ i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while (i < string.length) \n   \
    \ {\n        result[i] = string.Substring(i);\n        i++;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\
    \ \n    {\n        result[i] = string.Substring(0, length);\n        i++;\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3)\n    [\"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(start, length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 3, 1)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    int i =\
    \ 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy8cq9fh3.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8cq9fh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy8e_mnev.d(11): Error: `string` is used as a type

    /tmp/tmpy8e_mnev.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8e_mnev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfihqhhv3.d(11): Error: `string` is used as a type

    /tmp/tmpfihqhhv3.d(11): Error: `string` is used as a type

    /tmp/tmpfihqhhv3.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfihqhhv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84ywvza_.d(11): Error: `string` is used as a type

    /tmp/tmp84ywvza_.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84ywvza_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(i, string.length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(0, i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \        result[i] = string.substr(0, i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(start, i);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start, int end) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(start, i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end, int step) \n{\n    string[] result = new \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmrgsukue.d(96): Error: basic type expected, not `unittest`

    /tmp/tmpmrgsukue.d(96): Error: semicolon expected, not `unittest`

    /tmp/tmpmrgsukue.d(96): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrgsukue.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; ++i)\n        result[i] = string.Substring(i, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n        result[i] = string.Substring(i,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa83khir.d(90): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa83khir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7cz5ckf.d(11): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(11): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(26): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(26): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(27): Error: cannot implicitly convert expression `string.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpc7cz5ckf.d(41): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(41): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(56): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(56): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(71): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(71): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(86): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(86): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(101): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(101): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7cz5ckf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_bqz7auf.d(11): Error: `string` is used as a type

    /tmp/tmp_bqz7auf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bqz7auf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 3)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[length];\n    for(int i = start; i < string.length; ++i)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 3)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[length];\n    for(int i = start; i < end; ++i)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 3)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[length];\n    for(int i = start; i < end; i += step)\n        result[i]\
    \ = string.Sub\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplriob9dc.d(92): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmplriob9dc.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplriob9dc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpabadefnv.d(102): Error: found `unittest` when expecting `]`

    /tmp/tmpabadefnv.d(103): Error: semicolon expected, not `{`

    /tmp/tmpabadefnv.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabadefnv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = startIndex; i < endIndex;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = startIndex;\
    \ i < endIndex; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int startIndex,\
    \ int endIndex\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp786klm1j.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp786klm1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i + length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3)\n    [\"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 3,\
    \ 2)\n    [\"ab\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 3,\
    \ 2)\n    [\"ab\", \"c\"]\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvxqfd2hv.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxqfd2hv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"bc\", \"cb\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7yinl5v.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7yinl5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i += step)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step, string\
    \ separator) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i += step, separator\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprq9m9o_6.d(91): Error: found `unittest` when expecting `)`

    /tmp/tmprq9m9o_6.d(99): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprq9m9o_6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i++] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n  \
    \  string[] result = new string[string.Length];\n    int i = 0;\n    while(i <\
    \ string.Length)\n    {\n        result[i++] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmx8fh71.d(11): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(11): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(13): Error: no property `Length` for type `string`

    /tmp/tmphmx8fh71.d(27): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(27): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(29): Error: no property `Length` for type `string`

    /tmp/tmphmx8fh71.d(43): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(43): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(45): Error: no property `Length` for type `string`

    /tmp/tmphmx8fh71.d(59): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(59): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(61): Error: no property `Length` for type `string`

    /tmp/tmphmx8fh71.d(75): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(75): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(77): Error: no property `Length` for type `string`

    /tmp/tmphmx8fh71.d(91): Error: `string` is used as a type

    /tmp/tmphmx8fh71.d(91): Error: `stri'
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start, int end, int step) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyorxjkct.d(102): Error: found `unittest` when expecting `]`

    /tmp/tmpyorxjkct.d(103): Error: semicolon expected, not `{`

    /tmp/tmpyorxjkct.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyorxjkct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    /tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhrkjjkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk769t2ii.d(102): Error: expression expected, not `unittest`

    /tmp/tmpk769t2ii.d(103): Error: semicolon expected, not `{`

    /tmp/tmpk769t2ii.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk769t2ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length) \n{\n    string[] result = new string[\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe09uvey3.d(102): Error: expression expected, not `unittest`

    /tmp/tmpe09uvey3.d(103): Error: found `{` when expecting `]`

    /tmp/tmpe09uvey3.d(104): Error: semicolon expected, not `alias`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe09uvey3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ end - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, end - start, step);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68_jh3id.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68_jh3id.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = 0; i < string.length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string[] result = new \n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc6ifbaa2.d(102): Error: basic type expected, not `unittest`

    /tmp/tmpc6ifbaa2.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmpc6ifbaa2.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc6ifbaa2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i++] = string.substr(0, i);\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdk53zhz.d(11): Error: `string` is used as a type

    /tmp/tmppdk53zhz.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdk53zhz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplh00exla.d(11): Error: `string` is used as a type

    /tmp/tmplh00exla.d(11): Error: `string` is used as a type

    /tmp/tmplh00exla.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplh00exla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2_dpi6x.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2_dpi6x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(start, end - start);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ end - start, step);\n    }\n    return result;\n}\n/*\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzc0aay0s.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc0aay0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i + 1, string.length - i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    for(; i <\
    \ string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, length, end);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyo63sdsn.d(106): Error: basic type expected, not `unittest`

    /tmp/tmpyo63sdsn.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyo63sdsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.length - i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(i, (length < string.length - i) ? length : string.length -\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i,\
    \ (length < string.length - i) ? length : string.length - i, start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i,\
    \ (length < string.length - i) ? length : string.length - i, start, end);\n  \
    \  }\n    return result;\n}\n/*\n Return list of \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvq9t4xxa.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvq9t4xxa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpohnrmbuq.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohnrmbuq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n        result[i] = string.Substring(0,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < string.length; i++)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2, 3)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptjkuw_bp.d(91): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmptjkuw_bp.d(99): Error: found `void` when expecting `)`

    /tmp/tmptjkuw_bp.d(99): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptjkuw_bp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7cz5ckf.d(11): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(11): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(26): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(26): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(27): Error: cannot implicitly convert expression `string.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpc7cz5ckf.d(41): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(41): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(56): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(56): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(71): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(71): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(86): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(86): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(101): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(101): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7cz5ckf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i += step)\n    {\n        result[i] = string.Substring(i);\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end, int step, int length) \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxaz93acn.d(100): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaz93acn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx142mv2p.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmpx142mv2p.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx142mv2p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(start,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i++] = string.substr(start,end);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,end,step);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzs5ilclh.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzs5ilclh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprmrni37s.d(11): Error: `string` is used as a type

    /tmp/tmprmrni37s.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmrni37s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp885qz04h.d(102): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp885qz04h.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp885qz04h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int size) \n{\n    string[] result = \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zkh3f5d.d(102): Error: expression expected, not `unittest`

    /tmp/tmp9zkh3f5d.d(103): Error: semicolon expected, not `{`

    /tmp/tmp9zkh3f5d.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zkh3f5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfpvvm1aj.d(100): Error: basic type expected, not `unittest`

    /tmp/tmpfpvvm1aj.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpvvm1aj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\"\
    , \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n \
    \   \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substring\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbig8tsd.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbig8tsd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(0, length);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n Return \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9k8v63va.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9k8v63va.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7z92b3ze.d(11): Error: `string` is used as a type

    /tmp/tmp7z92b3ze.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z92b3ze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9suzo4oj.d(102): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp9suzo4oj.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9suzo4oj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplh00exla.d(11): Error: `string` is used as a type

    /tmp/tmplh00exla.d(11): Error: `string` is used as a type

    /tmp/tmplh00exla.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplh00exla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvucferu7.d(101): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvucferu7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(i+1,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ i);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length, end);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"c\"]\n    \n*/\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4we36rgq.d(11): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(11): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(25): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(25): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(39): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(39): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(53): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(53): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(67): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(67): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(81): Error: `string` is used as a type

    /tmp/tmp4we36rgq.d(81): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4we36rgq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i,string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaydusbnt.d(110): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaydusbnt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp09gzy3lz.d(100): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp09gzy3lz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    /tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhrkjjkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(12): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeqertxb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz5f2aj7.d(11): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(11): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(26): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(26): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(27): Error: cannot implicitly convert expression `string.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpoz5f2aj7.d(41): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(41): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(56): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(56): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(71): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(71): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(86): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(86): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(101): Error: `string` is used as a type

    /tmp/tmpoz5f2aj7.d(101): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz5f2aj7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = new string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkbt0o04.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmpbkbt0o04.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkbt0o04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpafohe6pr.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafohe6pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(start,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i++] = string.substr(start,end);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,end,step);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzs5ilclh.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzs5ilclh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i, length);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.substr(i,\
    \ length, start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.substr(i,\
    \ length, start, end);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpspsba8no.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspsba8no.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(0, length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i += step)\n        result\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmejzhg_.d(92): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpxmejzhg_.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmejzhg_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp060arcf3.d(100): Error: basic type expected, not `unittest`

    /tmp/tmp060arcf3.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp060arcf3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxd77bw42.d(101): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxd77bw42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\", \"c\", \"b\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.Substring(0, length);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 3)\n    [\"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3, 1)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 3, 0, 1)\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87r9ckrn.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87r9ckrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(start, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_\nunittest\n{\n  \
    \  alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n   \
    \ assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0m21mvi.d(106): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0m21mvi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp80h1j6q8.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80h1j6q8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\"\
    , \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length, int start,\
    \ int end, \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpms_s5cus.d(100): Error: basic type expected, not `unittest`

    /tmp/tmpms_s5cus.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpms_s5cus.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp761184ka.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp761184ka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijozbnf8.d(11): Error: `string` is used as a type

    /tmp/tmpijozbnf8.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijozbnf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string prefix) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51bu3rzg.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmp51bu3rzg.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51bu3rzg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int count) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74rer1hy.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmp74rer1hy.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74rer1hy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppvkh2gb6.d(11): Error: `string` is used as a type

    /tmp/tmppvkh2gb6.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppvkh2gb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        result[i] = string.Substring(0, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shor\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr1d5spd6.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1d5spd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjie2bko6.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjie2bko6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8vzbppn9.d(11): Error: `string` is used as a type

    /tmp/tmp8vzbppn9.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vzbppn9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjvip82g.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjvip82g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i + 1, string.Length\
    \ - i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfilu932i.d(101): Error: expression expected, not `unittest`

    /tmp/tmpfilu932i.d(102): Error: found `{` when expecting `,`

    /tmp/tmpfilu932i.d(103): Error: expression expected, not `alias`

    /tmp/tmpfilu932i.d(103): Error: found `candidate` when expecting `,`

    /tmp/tmpfilu932i.d(103): Error: expression expected, not `=`

    /tmp/tmpfilu932i.d(103): Error: found `all_prefixes` when expecting `,`

    /tmp/tmpfilu932i.d(103): Error: expression expected, not `;`

    /tmp/tmpfilu932i.d(105): Error: found `assert` when expecting `,`

    /tmp/tmpfilu932i.d(105): Error: found `;` when expecting `,`

    /tmp/tmpfilu932i.d(106): Error: found `;` when expecting `,`

    /tmp/tmpfilu932i.d(107): Error: found `;` when expecting `,`

    /tmp/tmpfilu932i.d(108): Error: expression expected, not `}`

    /tmp/tmpfilu932i.d(109): Error: found `void` when expecting `,`

    /tmp/tmpfilu932i.d(109): Error: found `{` when expecting `,`

    /tmp/tmpfilu932i.d(109): Error: expression expected, not `}`

    /tmp/tmpfilu932i.d(109): Error: found `End of File` when expecting `,`

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96izpw_f.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96izpw_f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(0, i);\n \
    \       i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp369iufk0.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp369iufk0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0, i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"\
    ]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i++] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i++] = string.substr(start, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(start,\
    \ i, step);\n    }\n    return result;\n}\n/*\n \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxleyaqve.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxleyaqve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"bc\", \"c\", \"ab\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj48y9bbq.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj48y9bbq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(start, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.Length];\n    int i =\
    \ 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr30k1_t5.d(107): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr30k1_t5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjph8_f_r.d(114): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpjph8_f_r.d(122): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjph8_f_r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length, int start) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\"\
    , \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"a\", \"ab\", \"abc\", \"b\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16d1fomx.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16d1fomx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp469mnxfh.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp469mnxfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfihqhhv3.d(11): Error: `string` is used as a type

    /tmp/tmpfihqhhv3.d(11): Error: `string` is used as a type

    /tmp/tmpfihqhhv3.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfihqhhv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; ++i)\n    {\n  \
    \      result[i] = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeex86dki.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeex86dki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, i);\n \
    \       i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Sub\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9hei820h.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp9hei820h.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp9hei820h.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9hei820h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp469mnxfh.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp469mnxfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(12): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeqertxb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp469mnxfh.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp469mnxfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n    {\n\
    \        result[i] = string.Substring(0, i);\n        i += 1;\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n        result[i] = string.Substring(0, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    ]\n    \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(start, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2, 3)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end, int end2) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n        result[i] = string.Substring(start, length);\n    return result;\n\
    }\n/*\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8z87p78s.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8z87p78s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5f6zhi00.d(11): Error: `string` is used as a type

    /tmp/tmp5f6zhi00.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f6zhi00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"c\"]\n \
    \   \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \      result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(i);\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; i++)\n        result[i] = string.Substring(i);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i++)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i+=step)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqfarj4mp.d(91): Error: semicolon expected, not `unittest`

    /tmp/tmpqfarj4mp.d(91): Error: expression expected, not `unittest`

    /tmp/tmpqfarj4mp.d(92): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpqfarj4mp.d(93): Error: expression expected, not `alias`

    /tmp/tmpqfarj4mp.d(93): Error: found `candidate` when expecting `)`

    /tmp/tmpqfarj4mp.d(93): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfarj4mp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string separator) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1a_wxplt.d(101): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1a_wxplt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.substr(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfr0_ip33.d(11): Error: `string` is used as a type

    /tmp/tmpfr0_ip33.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr0_ip33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijozbnf8.d(11): Error: `string` is used as a type

    /tmp/tmpijozbnf8.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijozbnf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxcinjnf.d(11): Error: `string` is used as a type

    /tmp/tmpfxcinjnf.d(11): Error: `string` is used as a type

    /tmp/tmpfxcinjnf.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxcinjnf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxcinjnf.d(11): Error: `string` is used as a type

    /tmp/tmpfxcinjnf.d(11): Error: `string` is used as a type

    /tmp/tmpfxcinjnf.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxcinjnf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.Length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2,\
    \ 3)\n    [\"abc\", \"b\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp413p1y4h.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp413p1y4h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_bqz7auf.d(11): Error: `string` is used as a type

    /tmp/tmp_bqz7auf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bqz7auf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while (i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while (i <\
    \ string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduyryc9l.d(11): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(11): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(13): Error: no property `Length` for type `string`

    /tmp/tmpduyryc9l.d(28): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(28): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(30): Error: no property `Length` for type `string`

    /tmp/tmpduyryc9l.d(45): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(45): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(47): Error: no property `Length` for type `string`

    /tmp/tmpduyryc9l.d(62): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(62): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(64): Error: no property `Length` for type `string`

    /tmp/tmpduyryc9l.d(79): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(79): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(81): Error: no property `Length` for type `string`

    /tmp/tmpduyryc9l.d(96): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(96): Error: `string` is used as a type

    /tmp/tmpduyryc9l.d(98): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduyryc9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\
    ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkdh6m_v.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkdh6m_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"\
    b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.Substring(start, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.Substring(start,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xl9nyq8.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xl9nyq8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(start, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(start, end - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ end, int step) \n{\n    string[] result = new string[string.length];\n    int\
    \ i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7eycagf9.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7eycagf9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\",\
    \ \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptj1gcbt9.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptj1gcbt9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppvkh2gb6.d(11): Error: `string` is used as a type

    /tmp/tmppvkh2gb6.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppvkh2gb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(11): Error: `string` is used as a type

    /tmp/tmpmeqertxb.d(12): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmeqertxb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0u1__qm.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0u1__qm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int length) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvucferu7.d(101): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvucferu7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string separator) \n{\n    string[] result = new string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp14ovzqo6.d(102): Error: expression expected, not `unittest`

    /tmp/tmp14ovzqo6.d(103): Error: found `{` when expecting `]`

    /tmp/tmp14ovzqo6.d(104): Error: semicolon expected, not `alias`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14ovzqo6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplh00exla.d(11): Error: `string` is used as a type

    /tmp/tmplh00exla.d(11): Error: `string` is used as a type

    /tmp/tmplh00exla.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplh00exla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    /tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhrkjjkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"\
    c\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(start, end\
    \ - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(start, end\
    \ - start, step);\n    }\n    return result;\n}\n/*\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmmkzbx1w.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmmkzbx1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijozbnf8.d(11): Error: `string` is used as a type

    /tmp/tmpijozbnf8.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijozbnf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxkioa8y6.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkioa8y6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppvkh2gb6.d(11): Error: `string` is used as a type

    /tmp/tmppvkh2gb6.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppvkh2gb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \   {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\", \"b\", \"c\"]\n   \
    \ \n*/\nstring[] all_substrings(string string, int length, int start) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start, length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int length, int \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96izpw_f.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96izpw_f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoa2a87gp.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmpoa2a87gp.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoa2a87gp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.Length];\n    int i = 0;\n    while(i <\
    \ string.Length)\n    {\n        result[i] = string.Substring(0, i);\n       \
    \ i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] result = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgyi0tiix.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgyi0tiix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(i + 1, string.length - i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while (i <\
    \ string.length)\n    {\n        result[i++] = string.Substring(i);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(start, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.Substring(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_by4uib.d(106): Error: basic type expected, not `unittest`

    /tmp/tmpk_by4uib.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_by4uib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7cz5ckf.d(11): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(11): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(26): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(26): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(27): Error: cannot implicitly convert expression `string.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpc7cz5ckf.d(41): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(41): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(56): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(56): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(71): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(71): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(86): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(86): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(101): Error: `string` is used as a type

    /tmp/tmpc7cz5ckf.d(101): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7cz5ckf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"b\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7s45tdh.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7s45tdh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(0, i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\"\
    , \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i++] = string.substr(i, string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\", \"cba\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i++] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\",\
    \ \"cba\"]\n    \n*/\nstring[] all_substrings(string string, int length) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i, length);\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\", \"cba\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    while (i\
    \ < string.length)\n    {\n        result[i++] = string.substr(start, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ac\", \"ca\", \"cb\", \"cba\"]\n  \
    \  \n*/\nstring[] all_substrings(string string, int start, int length, int end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i++] = string.substr(start, length);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjjf4y1f5.d(11): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(11): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(27): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(27): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(43): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(43): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(59): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(59): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(75): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(75): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(91): Error: `string` is used as a type

    /tmp/tmpjjf4y1f5.d(91): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjjf4y1f5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < start + length; i++)\n        result[i] = string.Substring(i, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int\
    \ length, int step) \n{\n    string[] result = new string[string.length];\n  \
    \  for(int i = start; i < start + length; i += step)\n        result[i] = string.Substring(i,\
    \ length);\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\"]\n    \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6d2_hel.d(91): Error: expression expected, not `unittest`

    /tmp/tmpd6d2_hel.d(92): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpd6d2_hel.d(93): Error: expression expected, not `alias`

    /tmp/tmpd6d2_hel.d(93): Error: found `candidate` when expecting `)`

    /tmp/tmpd6d2_hel.d(93): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6d2_hel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string prefix) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz6q0srti.d(101): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz6q0srti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n  \
    \      i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxcinjnf.d(11): Error: `string` is used as a type

    /tmp/tmpfxcinjnf.d(11): Error: `string` is used as a type

    /tmp/tmpfxcinjnf.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxcinjnf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    /tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhrkjjkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(0, i);\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4pwnxqc.d(11): Error: `string` is used as a type

    /tmp/tmpe4pwnxqc.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4pwnxqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.Substring(start,\
    \ i - start);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string prefix) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += \nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdb6wos8r.d(91): Error: expression expected, not `unittest`

    /tmp/tmpdb6wos8r.d(92): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdb6wos8r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    /tmp/tmpw_sfmxio.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_sfmxio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.Substring(i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, i);\n \
    \       i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_1xhg3a.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_1xhg3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ start + length; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08nmbujj.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08nmbujj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i++] = string.Substring(0, i);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmmg36m69.d(11): Error: `string` is used as a type

    /tmp/tmpmmg36m69.d(11): Error: `string` is used as a type

    /tmp/tmpmmg36m69.d(13): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmmg36m69.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n \
    \   {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < end; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\"]\n    \n\
    */\nstring[] all_substrings(string string, int start, int end, int step) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i+=step)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\"]\n    \n*/\nstring[] all_substrings(string string, int start, int end,\
    \ int step, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpna9hjyah.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpna9hjyah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i\
    \ - start, i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string pattern) \n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkjjj5ahk.d(101): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkjjj5ahk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp081xxz43.d(100): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp081xxz43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlmz5rjg.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlmz5rjg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n        result[i] = string.Substring(0, i);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    /tmp/tmpwhrkjjkf.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhrkjjkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(0, i);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n   \
    \ [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i);\n        i\
    \ += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n \
    \   [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeimwc4v1.d(112): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeimwc4v1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(0,i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\", \"b\", \"\
    c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_eoctg9k.d(106): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_eoctg9k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = string.Length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = 0; i < string.Length; i++)\n   \
    \ {\n        result[i] = string.Substring(0, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\"\
    , \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"ab\", \"bc\", \"c\"]\n    \n*/\n\
    string[] all_substrings(string string, int length, int start, int end) \n{\n \
    \   string[] result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj2icuwh_.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2icuwh_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; ++i)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, string prefix) \n{\n    string[] \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjn4__ide.d(102): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpjn4__ide.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjn4__ide.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(0, i);\n \
    \       i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n\
    \    [\"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n\
    {\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length) \n    {\n        result[i] = string.Substring(i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n    >>> all_substrings(\"abc\"\
    , 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(0,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length) \n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj8rr1ym8.d(11): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(11): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(28): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(28): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(45): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(45): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(62): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(62): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(79): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(79): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(96): Error: `string` is used as a type

    /tmp/tmpj8rr1ym8.d(96): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj8rr1ym8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"bc\",\
    \ \"c\", \"b\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, i);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.Substring(start, length, end);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n    >>>\
    \ all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string\
    \ string, int start, \nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiuvfn7zp.d(106): Error: basic type expected, not `unittest`

    /tmp/tmpiuvfn7zp.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiuvfn7zp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"abc\"\
    , \"b\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\",\
    \ \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"c\"]\n\
    \    \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ start + length; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"\
    abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\"\
    , \"ab\", \"abc\", \"b\", \"c\"]\n    \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1u3qxppf.d(100): Error: basic type expected, not `unittest`

    /tmp/tmp1u3qxppf.d(100): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u3qxppf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    /tmp/tmp52xm3z8l.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52xm3z8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164622
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n\
    \    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"\
    bc\", \"c\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n\
    \    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \    >>> all_substrings(\"abc\", 2)\n    [\"ab\", \"abc\"]\n    \n*/\nstring[]\
    \ all_substrings(string string, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n    >>> all_substrings(\"abc\", 2)\n\
    \    [\"ab\", \"abc\"]\n    \n*/\nstring[] all_substrings(string string, int length,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlmz5rjg.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlmz5rjg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164623
