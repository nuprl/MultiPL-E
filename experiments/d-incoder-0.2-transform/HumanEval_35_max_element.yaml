name: HumanEval_35_max_element
language: d
prompt: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
  \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
  \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] < min){\n  \
    \          min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long i;\n \
    \   for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l, long start) \n{\n    long sum = 0;\n    long i;\n    for(i = start; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L",
  "{\n    long max;\n    max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n\
    /*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n \
    \   1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    min =\
    \ l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < min)\n\
    \            min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product\
    \ = 1;\n    for(int i = 0; i < l.length; i++)\n        product *= l[i];\n    return\
    \ product;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n \
    \   >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++)\n        if(l[i] != 0)\n   \
    \         sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_excl(long\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)", "{\n\
    \    long max = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}", "{\n    long max_el = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] > max_el)\n        {\n            max_el = l[i];\n         \
    \   max_idx = i;\n        }\n    }\n    \n    return max_el;\n}", "{\n    long\
    \ max = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n      \
    \  if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n \
    \   long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n  \
    \      if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    for (int i = 1; i < l.length; ++i) {\n\
    \        if (l[i] > max) max = l[i];\n    }\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    \n    for(; i < l.length; i++)\
    \ \n    {\n        if(l[i] > max) \n        {\n            max = l[i];\n     \
    \   }\n    }\n    \n    for(; j < l.length; j++) \n    {\n        if(l[j] > max)\
    \ \n        {\n            max = l[j];\n        }\n    }\n    \n    return max;\n\
    }", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n \
    \       if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] < min){\n  \
    \          min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long i;\n \
    \   for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++){\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max;\n    max = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    min = l[0];\n  \
    \  for (int i = 1; i < l.length; i++)\n        if (l[i] < min)\n            min\
    \ = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \   >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[] l) \n{\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1L,\
    \ 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n\
    \    for (int i = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>>\
    \ product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n\
    */\ndouble product(double[] l) \n{\n    double prod = 1;\n    for (int i = 0;\
    \ i < l.length; i++)\n        prod *= l[i];\n    return prod;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n", "{\n    long max_value = l[0];\n    long max_pos\
    \ = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_value)\n\
    \        {\n            max_value = l[i];\n            max_pos = i;\n        }\n\
    \    }\n    return max_pos;\n}", "{\n    long max_val = l[0];\n    long max_idx\
    \ = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_val)\n\
    \        {\n            max_val = l[i];\n            max_idx = i;\n        }\n\
    \    }\n    return max_idx;\n}", "{\n    long max = l[0];\n    long i;\n    for\
    \ (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long tmp =\
    \ 0;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n        if(tmp\
    \ > max){\n            max = tmp;\n        }\n    }\n    return max;\n}\n/*\n\
    Return minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n    \
    \    if(tmp < min){\n            min = tmp;\n        }\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l)\
    \ \n{\n    float sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/", "{\n    long max = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n  \
    \  {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong product_elements(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n  \
    \  }\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \  >>> sum_of_lists([1L, 2L, 3L])\n    6L\n    >>> sum_of_lists([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_of_lists(long[]\
    \ l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product_of_lists([1L, 2L, 3L])\n    6L\n\
    \    >>> product_of_lists([5L, 3L, -5L, 2L, ", "{\n    long max = l[0];\n    long\
    \ i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}", "{\n    long max = l[0];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n            max\
    \ = l[i];\n    }\n    return max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
