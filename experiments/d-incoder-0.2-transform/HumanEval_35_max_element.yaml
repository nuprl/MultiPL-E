name: HumanEval_35_max_element
language: d
prompt: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
  \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
  \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] < min){\n  \
    \          min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long i;\n \
    \   for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l, long start) \n{\n    long sum = 0;\n    long i;\n    for(i = start; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L",
  "{\n    long max;\n    max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n\
    /*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n \
    \   1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    min =\
    \ l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i] < min)\n\
    \            min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product\
    \ = 1;\n    for(int i = 0; i < l.length; i++)\n        product *= l[i];\n    return\
    \ product;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n \
    \   >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++)\n        if(l[i] != 0)\n   \
    \         sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_excl(long\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)", "{\n\
    \    long max = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i] > max)\n   \
    \         max = l[i];\n    }\n    return max;\n}", "{\n    long max_el = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n    {\n\
    \        if (l[i] > max_el)\n        {\n            max_el = l[i];\n         \
    \   max_idx = i;\n        }\n    }\n    \n    return max_el;\n}", "{\n    long\
    \ max = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n      \
    \  if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n \
    \   long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n  \
    \      if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    for (int i = 1; i < l.length; ++i) {\n\
    \        if (l[i] > max) max = l[i];\n    }\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    \n    for(; i < l.length; i++)\
    \ \n    {\n        if(l[i] > max) \n        {\n            max = l[i];\n     \
    \   }\n    }\n    \n    for(; j < l.length; j++) \n    {\n        if(l[j] > max)\
    \ \n        {\n            max = l[j];\n        }\n    }\n    \n    return max;\n\
    }", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n \
    \       if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] < min){\n  \
    \          min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long i;\n \
    \   for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++){\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max;\n    max = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    min = l[0];\n  \
    \  for (int i = 1; i < l.length; i++)\n        if (l[i] < min)\n            min\
    \ = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \   >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[] l) \n{\n    long\
    \ sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1L,\
    \ 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n\
    \    for (int i = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>>\
    \ product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n\
    */\ndouble product(double[] l) \n{\n    double prod = 1;\n    for (int i = 0;\
    \ i < l.length; i++)\n        prod *= l[i];\n    return prod;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n", "{\n    long max_value = l[0];\n    long max_pos\
    \ = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_value)\n\
    \        {\n            max_value = l[i];\n            max_pos = i;\n        }\n\
    \    }\n    return max_pos;\n}", "{\n    long max_val = l[0];\n    long max_idx\
    \ = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_val)\n\
    \        {\n            max_val = l[i];\n            max_idx = i;\n        }\n\
    \    }\n    return max_idx;\n}", "{\n    long max = l[0];\n    long i;\n    for\
    \ (i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long tmp =\
    \ 0;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n        if(tmp\
    \ > max){\n            max = tmp;\n        }\n    }\n    return max;\n}\n/*\n\
    Return minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n    \
    \    if(tmp < min){\n            min = tmp;\n        }\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l)\
    \ \n{\n    float sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/", "{\n    long max = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n  \
    \  {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>>\
    \ product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong product_elements(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n  \
    \  }\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \  >>> sum_of_lists([1L, 2L, 3L])\n    6L\n    >>> sum_of_lists([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_of_lists(long[]\
    \ l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product_of_lists([1L, 2L, 3L])\n    6L\n\
    \    >>> product_of_lists([5L, 3L, -5L, 2L, ", "{\n    long max = l[0];\n    long\
    \ i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}", "{\n    long max = l[0];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] > max) \n            max\
    \ = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum =\
    \ 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] ", "{\n    long max;\n    max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) max\
    \ = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min) min = l[i];\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i) prod *= l[i];\n\
    \    return prod;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    while (l != 0) {\n        sum += l;\n        l /= 10;\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list, excluding\
    \ zero.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_excl(long\
    \ l) \n{\n    long prod = 1;\n    while (l != 0) {\n        prod *= l;\n     \
    \   ", "{\n\tlong max = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t{\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}", "{\n\tlong max;\n\tmax = l[0];\n\
    \tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}", "{\n    long max;\n    max = l[0];\n    for(int i = 1; i <\
    \ l.length; i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n   \
    \ }\n    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n\
    \    min = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ < min)\n            min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    for(int i\
    \ = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n\
    \        if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i = 0;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n            max\
    \ = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        if(l[i] < min) \n        {\n            min = l[i];\n     \
    \   }\n    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n\
    {\n    long product = 1;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double",
  "{\n    long max;\n    max = l[0];\n    for (int i = 1; i < l.length; i++)\n   \
    \     if (l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    min = l[0];\n  \
    \  for (int i = 1; i < l.length; i++)\n        if (l[i] < min)\n            min\
    \ = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \   >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list with given precision.\n\
    \    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n    \n*/\ndouble sum(double[] l, int\
    \ precision) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i] * pow(10.0, precision);\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list with given precision.\n    >>> sum([1L, 2L, 3L],\
    \ 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ 2)\n    -10.2\n    \n*/\nfloat sum(float[] l, int precision) \n{\n    float\
    \ sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i] * pow(10.0,\
    \ precision);\n    return sum;\n}\n/*\nReturn sum of all elements in the list\
    \ with given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n    \n*/\nlong\
    \ sum(long[] l, int precision) \n{\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.", "{\n    long max = l[0];\n    for (int i = 1; i < l.length; i++) \n   \
    \     if (l[i] > max) \n            max = l[i];\n    return max;\n}", "{\n   \
    \ long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n     \
    \   if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++)\n    {\n        if(l[i] < min)\n            min\
    \ = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) ", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for (int i =\
    \ 1; i < l.length; i++)\n    {\n        if (l[i] > max_val)\n        {\n     \
    \       max_val = l[i];\n            max_idx = i;\n        }\n    }\n    return\
    \ max_val;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min_val\
    \ = l[0];\n    long min_idx = 1;\n    for (int i = 1; i < l.length; i++)\n   \
    \ {\n        if (l[i] < min_val)\n        {\n            min_val = l[i];\n   \
    \         min_idx = i;\n        }\n    }\n    return min_val;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n \
    \       sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l)\
    \ \n{\n    long product = 1;\n    for (int i = 0; i < l.length; i++)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n    }\n    return max;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n \
    \       if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\n\
    Return minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] < min)\n     \
    \       min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n\
    {\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n      \
    \  prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    double i;\n    for(i = 0; i < l.length; ++i)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l) \n{\n    double prod\
    \ = 1;\n    double i;\n    for(i = 0; i < l.length", "{\n    long max = 0;\n \
    \   long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i = 0;\n    \n    while (i < l.length)\
    \ \n    {\n        if (l[i] > max) \n        {\n            max = l[i];\n    \
    \    }\n        i++;\n    }\n    return max;\n}", "{\n    long max = l[0];\n \
    \   for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}", "{\n    long max = 0;\n    long i = 0;\n    \n\
    \    while(i < l.length) \n    {\n        if(l[i] > max) \n        {\n       \
    \     max = l[i];\n        }\n        i++;\n    }\n    return max;\n}", "{\n \
    \   long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n  \
    \      if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ < min) \n        {\n            min = l[i];\n        }\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ number of elements in the list.\n    >>> count_elements([1L, 2L, 3L])\n    3L\n\
    \    >>> count_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    10L\n    \n*/\nlong count_elements(long[] l) \n{\n    long count = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2", "{\n    long max = l[0];\n   \
    \ for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n            max\
    \ = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max;\n    max = l[0];\n    for(int i = 1; i < l.length; i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n\
    \        if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ < min) \n        {\n            min = l[i];\n        }\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i = 0;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l, long defaultValue) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, ", "{\n    long max_value = l[0];\n    for (int i = 1; i <\
    \ l.length; ++i) {\n        if (l[i] > max_value)\n            max_value = l[i];\n\
    \    }\n    return max_value;\n}", "{\n    long max = 0;\n    long i = 0;\n  \
    \  for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max =\
    \ l[i];\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i = 0;\n    \n    while (i < l.length) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n        }\n        i++;\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\n\
    Return minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] < min)\n     \
    \       min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l)\
    \ \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the list with specified type.\n    >>> sum([1L, 2L, 3L],\
    \ int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ int)\n    -10L\n    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list with\
    \ specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong product(long[]\
    \ l, int ", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length;\
    \ i++)\n        if(l[i] > max)\n            max = l[i];\n    return max;\n}\n\
    /*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n \
    \   1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n  \
    \  long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] < min)\n      \
    \      min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n \
    \   long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list with\
    \ given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n    \n*/\ndouble\
    \ sum(long[] l, int precision) \n{\n    double sum = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++)\n        sum += l[i] * pow(10.0, precision);\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list with given precision.\n\
    \    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n    \n*/\nfloat sum(long[] l, int precision)\
    \ \n{\n    float sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n  \
    \      sum += l[i] * pow(10.0, precision);\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list with given precision.\n    >>> sum([1L, 2L, 3L],\
    \ 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ 2)\n    -10.00\n    \n*/\nlong double ", "{\n    long max = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n{\n    long\
    \ product = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double",
  "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n  \
    \      if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        if\
    \ (l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for (i = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n \
    \   >>> prod([1L, 2L, 3L])\n    6L\n    \n*/\ndouble prod(double[] l) \n{\n  \
    \  double prod = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, ", "{\n    long\
    \ max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++){\n        if(l[i] < min){\n            min =\
    \ l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong sum_excl(long l) \n{\n    long sum = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++){\n        if(l[i] != 0){\n            sum += l[i];\n\
    \        }\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list, excluding zero.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n", "{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n \
    \   long max = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n     \
    \   if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i\
    \ < l.length; i++)\n    {\n        if(l[i] > max_val)\n        {\n           \
    \ max_val = l[i];\n            max_idx = i;\n        }\n    }\n    return max_val;\n\
    }", "{\n    long max = 0;\n    long i = 0;\n    \n    while (i < l.length) \n\
    \    {\n        if (l[i] > max) \n        {\n            max = l[i];\n       \
    \ }\n        i++;\n    }\n    return max;\n}", "{\n    long max = l[0];\n    long\
    \ i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;\n}", "{\n    long max_val = l[0];\n \
    \   long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max_val)\n        {\n            max_val = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l)\
    \ \n{\n    float sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/", "{\n    long max = l[0];\n\
    \    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for(i = 0; i < l.length; i++)\n    {\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[] l, long type)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n   \
    \ {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list with specified type.\n    >>> prod([1L, 2L, 3L], int)\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n\
    \    -10L\n    \n*/\nlong ", "{\n    long max = 0;\n    long i;\n    for(i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n    long product = 1;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n\
    \    }\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3", "{\n    long max = l[0];\n\
    \    long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] > max){\n  \
    \          max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for(i = 0; i < l.length; i++){\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -123\n    \n*/\nlong sum(long[] l, int type)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n  \
    \      sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list with specified type.\n    >>> prod([1L, 2L, 3L], int)\n    6\n \
    \   >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10\n\
    \    \n", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length;\
    \ i++) \n    {\n        if(l[i] > max) \n            max = l[i];\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n\
    \    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i] < min)\
    \ \n            min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n \
    \   \n*/\nlong sum_excl(long l) \n{\n    long sum = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] != 0) \n            sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong prod(long[] l) \n{\n\
    \    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n\
    \        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn product of all\
    \ elements in the list, excluding zero.\n    >>> prod([1L, 2L, 3L])\n    6L\n\
    \    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123", "{\n    long max;\n   \
    \ long i;\n    max = l[0];\n    for (i = 1; i < l.length; i++) \n    {\n     \
    \   if (l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n \
    \   return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n\
    \    long i;\n    min = l[0];\n    for (i = 1; i < l.length; i++) \n    {\n  \
    \      if (l[i] < min) \n        {\n            min = l[i];\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n   \
    \ return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n   \
    \ return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n    long max =\
    \ l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 1; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for (i = 1; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for (i = 1; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        if(l[i] > max) \n        {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i = 0;\n\
    \    long j = 0;\n    \n    while (i < l.length && l[i] < 0)\n    {\n        i++;\n\
    \    }\n    \n    while (j < l.length && l[j] > 0)\n    {\n        j++;\n    }\n\
    \    \n    if (i < l.length)\n    {\n        max = l[i];\n    }\n    else if (j\
    \ < l.length)\n    {\n        max = l[j];\n    }\n    \n    return max;\n}", "{\n\
    \    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n   \
    \     if (l[i] > max) max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = l[0];\n    long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}", "{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double\
    \ i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n\
    \    double i;", "{\n    long max = 0;\n    long temp = 0;\n    for(int i = 0;\
    \ i < l.length; i++)\n    {\n        temp = l[i];\n        if(temp > max)\n  \
    \      {\n            max = temp;\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > max)\n        {\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long max = 0;\n    long i;\n    for (i =\
    \ 0; i < l.length; i++)\n    {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}", "{\n    long max;\n    max = l[0];\n    for (int\
    \ i = 1; i < l.length; i++) \n    {\n        if (l[i] > max) \n            max\
    \ = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < min) \n            min = l[i];\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for (int i =\
    \ 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for (int i = 0;\
    \ i < l.length; i++) \n        product *= l[i];\n    return product;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++) \n \
    \       product *= l[i];\n    return product;\n}\n/*", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n        {\n            max = l[i];\n        }\n    }\n    return max;\n}",
  "{\n    long max = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n\
    \        if (l[i] > max) \n        {\n            max = l[i];\n        }\n   \
    \     i++;\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i = 0;\n\
    \    \n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n  \
    \      {\n            max = l[i];\n        }\n    }\n    \n    return max;\n}",
  "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_idx;\n}", "{\n   \
    \ long max_val = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length;\
    \ ++i) {\n        if (l[i] > max_val) {\n            max_val = l[i];\n       \
    \     max_idx = i;\n        }\n    }\n    \n    return max_val;\n}", "{\n    long\
    \ max = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n            max_pos = i;\n\
    \        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long min_pos = 0;\n    for(int i = 1; i <\
    \ l.length; i++){\n        if(l[i] < min){\n            min = l[i];\n        \
    \    min_pos = i;\n        }\n    }\n    return min_pos;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n\
    {\n    long prod = 1;\n    for(int i = 0; i < l.length; i++){\n        prod *=\
    \ l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum += l[i];\n   \
    \ }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l) \n{", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n \
    \       if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        if(l[i] > max) \n        {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong prod(long[] l) \n{\n    long\
    \ prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        prod\
    \ *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[] l) \n\
    {\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    long j = 0;\n    \n    while(i < l.length && l[i] > max)\n\
    \    {\n        max = l[i];\n        i++;\n    }\n    \n    while(j < l.length\
    \ && l[j] > max)\n    {\n        max = l[j];\n        j++;\n    }\n    \n    return\
    \ max;\n}", "{\n    long max;\n    max = l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\n\
    /*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n \
    \   1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    min =\
    \ l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] < min)\n   \
    \         min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_exclzero(long[] l) \n{\n\
    \    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        if (l[i] !=\
    \ 0)\n            sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_exclzero_long(long[]\
    \ l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        if\
    \ (l[i] != 0)\n            sum += l[i];\n    return sum;\n}\n/*\nReturn sum of\
    \ all elements in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum_exclzero(double[] l) \n{\n    double sum = 0;\n    for (int\
    \ i = 0; i < l.length; i++)", "{\n    long max = l[0];\n    for(int i = 1; i <\
    \ l.length; i++)\n        if(l[i] > max)\n            max = l[i];\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n\
    \    for(int i = 1; i < l.length; i++)\n        if(l[i] < min)\n            min\
    \ = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \   >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified precision.\n    >>> sum_elements([1L, 2L, 3L], 2)\n    3.0\n    >>>\
    \ sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.0\n\
    \    \n*/\nlong sum_elements(long[] l, int prec) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n        sum += l[i] * pow(10, prec);\n    return\
    \ sum;\n}\n/*\nReturn mean of list.\n    >>> mean_elements([1L, 2L, 3L])\n   \
    \ 2.0\n    >>> mean_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10.0\n    \n*/\ndouble mean_elements(long[] l) \n{\n    double sum = 0;\n\
    \    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum /\
    \ l.length;\n}\n/*\nReturn mean of list with specified precision.\n    >>> mean_elements([1L,\
    \ 2L, 3L], 2)\n    2.0\n    >>> mean_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L], 2)\n    -10.0\n    \n*/\ndouble mean_elements(long[] l, int\
    \ prec) \n{\n    double sum = 0;", "{\n    long max = l[0];\n    long i;\n   \
    \ for (i = 1; i < l.length; i++)\n        if (l[i] > max)\n            max = l[i];\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] <\
    \ min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list\
    \ with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10\n    \n*/\nlong\
    \ sum(long[] l, int type) \n{\n    long sum = 0;\n    long i;\n    for (i = 0;\
    \ i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list with specified type.\n    >>> sum([1L, 2L, 3L],\
    \ float)\n    6.5\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ float)\n    -10.5\n    \n*/\ndouble sum(double[] l, int type) \n{\n    double\
    \ sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ type.\n    >>> sum([1L, 2L, 3L], float)\n    6.5\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], float)\n    -10.5\n    \n*/\ndouble sum(double[]\
    \ l, float type) \n{\n    double sum = 0;\n    long i;\n    for ", "{\n    long\
    \ max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max_value){\n            max_value = l[i];\n            max_pos\
    \ = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++){\n        if(l[i] < min_value){\n            min_value =\
    \ l[i];\n            min_pos = i;\n        }\n    }\n    return min_pos;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l",
  "{\n    long max = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++)\n\
    \    {\n        tmp = l[i];\n        if(tmp > max)\n            max = tmp;\n \
    \   }\n    return max;\n}", "{\n    long max = 0;\n    long temp = 0;\n    for(int\
    \ i = 0; i < l.length; i++){\n        temp = l[i];\n        if(temp > max){\n\
    \            max = temp;\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max)\
    \ \n            max = l[i];\n    return max;\n}", "{\n    long max_value = l[0];\n\
    \    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n       \
    \ if(l[i] > max_value)\n        {\n            max_value = l[i];\n           \
    \ max_pos = i;\n        }\n    }\n    return max_pos;\n}", "{\n    long max;\n\
    \    long i;\n    \n    max = l[0];\n    for (i = 1; i < l.length; i++)\n    \
    \    if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n    long\
    \ max_value = l[0];\n    long max_pos = 0;\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] > max_value)\n        {\n            max_value\
    \ = l[i];\n            max_pos = i;\n        }\n    }\n    return max_pos;\n}",
  "{\n\tlong max;\n\tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\t\
    if (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[] l, long type)\
    \ \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\ndouble sum(double[] l, long\
    \ type) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l, long type) \n{\n\tfloat sum = 0;\n\tfor (int ", "{\n    long max = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for (int i = 1; i < l.length; ++i)\n    {\n      \
    \  if (l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for (int i = 1;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < min_val)\n        {\n        \
    \    min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, ", "{\n    long max = l[0];\n    long i;\n    for (i = 1;\
    \ i < l.length; ++i) {\n        if (l[i] > max) max = l[i];\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n\
    \    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i] < min) min\
    \ = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i) sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    long\
    \ i;\n    for (i = 0; i < l.length; ++i) prod *= l[i];\n    return prod;\n}\n\
    /*\nReturn sum of all elements in the list that are less than n.\n    >>> sum([1L,\
    \ 2L, 3L], 3)\n    3L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L], 3)\n    3L\n    \n*/\nlong sum_less(long[] l, long n) \n{\n    long sum\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i) if (l[i] < n) sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list that are greater\
    \ than n.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n    \n*/\nlong sum_greater(long[]\
    \ l, long n) \n{\n    long sum = 0;", "{\n    long max;\n    max = l[0];\n   \
    \ for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l)\
    \ \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong\
    \ sum(long[] l, int type) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length;\
    \ ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], float)\n    6.5\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], float)\n    -10.5\n\
    \    \n*/\ndouble sum(double[] l, int type) \n{\n    double sum = 0;\n    for\
    \ (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list with specified type.\n    >>> sum([1L,\
    \ 2L, 3L], float)\n    6.5\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L], float)\n    -10.5\n    \n*/\nfloat sum(float[] l, int type) \n{\n\
    \    float sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n \
    \       if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long tmp;\n    for(int i = 0; i < l.length; i++){\n  \
    \      tmp = l[i];\n        if(tmp > max){\n            max = tmp;\n        }\n\
    \    }\n    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long tmp;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n\
    \        if(tmp < min){\n            min = tmp;\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; i++){\n       \
    \ prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    \n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long max;\n    long i;\n    max = l[0];\n    for (i = 1; i < l.length;\
    \ i++) \n        if (l[i] > max) \n            max = l[i];\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    long i;\n\
    \    min = l[0];\n    for (i = 1; i < l.length; i++) \n        if (l[i] < min)\
    \ \n            min = l[i];\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n     \
    \   sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n\
    {\n    long product = 1;\n    long i;\n    for (i = 0; i < l.length; i++) \n \
    \       product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double product = 1;\n    long i;\n    for (i = 0; i < l.length",
  "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n\
    \        if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i = 0;\n    \n    while\
    \ (i < l.length) \n    {\n        if (l[i] > max) \n        {\n            max\
    \ = l[i];\n        }\n        i++;\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n  \
    \      if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n    {\n \
    \       if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}",
  "{\n    long max;\n    max = l[0];\n    for (int i = 1; i < l.length; i++)\n   \
    \     if (l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min;\n    min = l[0];\n  \
    \  for (int i = 1; i < l.length; i++)\n        if (l[i] < min)\n            min\
    \ = l[i];\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \   >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++)\n  \
    \      product *= l[i];", "{\n    long max = 0;\n    long i = 0;\n    for(i =\
    \ 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}", "{\n    long max = l[0];\n    long max_idx\
    \ = 1;\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n            max_idx = i;\n        }\n    }\n    return\
    \ max_idx;\n}", "{\n    long max = 0;\n    long temp = 0;\n    for(int i = 0;\
    \ i < l.length; i++){\n        temp = l[i];\n        if(temp > max){\n       \
    \     max = temp;\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n  \
    \          max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list that are less\
    \ than the given value.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n    \n*/\nlong sum(long[]\
    \ l, long x) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] < x){\n            sum += l[i];\n        }\n    }\n \
    \   return sum;\n}\n/*\nReturn product of all elements in the list that are less\
    \ than the given value.\n    >>> product([1L, 2L, 3L], 3)\n    6L\n    >>> product([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L", "{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}", "{\n    long max;\n    max =\
    \ l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; ++i)\n        product *= l[i];\n    return product;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double i;\n   \
    \ for(i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    double\
    \ i;\n    for(i = 0; i < l.length; ++i)", "{\n    long max = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max = l[0];\n    for (long i = 1; i < l.length; i++) \n        if (l[i] > max)\
    \ \n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (long i = 1; i < l.length; i++) \n   \
    \     if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (long i : l) \n        sum\
    \ += i;\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for (double i : l) \n        sum += i;\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    for (float i : l) \n\
    \        sum += i;\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/", "{\n    long max = 0;\n \
    \   long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long\
    \ max_value = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n\
    \        if(l[i] > max_value){\n            max_value = l[i];\n            max_pos\
    \ = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++){\n        if(l[i] < min_value){\n            min_value =\
    \ l[i];\n            min_pos = i;\n        }\n    }\n    return min_pos;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l",
  "{\n    long max = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n       \
    \ if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double", "{\n    long max = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}", "{\n    long max =\
    \ l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n     \
    \   if(l[i] > max){\n            max = l[i];\n            max_pos = i;\n     \
    \   }\n    }\n    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n      \
    \      max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n{\n    long\
    \ product = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n\
    \    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; i++) \n    {\n        if(type == int.class) \n \
    \       {\n            sum += (int)l[i];\n        }\n        else if(type == long.class)\
    \ \n        {\n            sum += l[i];\n        }\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list with specified type.\n    >>> sum([1L,\
    \ 2L, 3L], int)\n    6", "{\n    long max_val = l[0];\n    long max_idx = 1;\n\
    \    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_val)\n  \
    \      {\n            max_val = l[i];\n            max_idx = i;\n        }\n \
    \   }\n    return max_idx;\n}", "{\n    long max_val = l[0];\n    long max_idx\
    \ = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max_val)\n\
    \        {\n            max_val = l[i];\n            max_idx = i;\n        }\n\
    \    }\n    return max_idx;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i <\
    \ l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\
    \    long max;\n    max = l[0];\n    for(int i = 1; i < l.length; ++i)\n     \
    \   if(l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for(int i = 1; i < l.length; ++i)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; ++i)\n     \
    \   product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;\n    for(int i = 0; i < l.length; ++i)\n      \
    \  product *= l[i];\n    return product;\n}\n/*", "{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}", "{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n       \
    \ if(l[i] > max_val)\n        {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_idx;\n}", "{\n    long max = 0;\n   \
    \ long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long tmp;\n    for(int i = 0; i < l.length; i++)\n    {\n        tmp = l[i];\n\
    \        if(tmp > max)\n            max = tmp;\n    }\n    return max;\n}", "{\n\
    \    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max_val)\n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    return max_val;\n}", "{\n   \
    \ long max = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}", "{\n    long max_val =\
    \ l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    return max_val;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    \n    return\
    \ max;\n}", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] > max)\n        {\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long max = 0;\n    long i = 0;\n    \n  \
    \  foreach(i, l) \n    {\n        if (max < l[i]) \n        {\n            max\
    \ = l[i];\n        }\n    }\n    \n    return max;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] >\
    \ max)\n            max = l[i];\n    }\n    return max;\n}", "{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp > max){\n            max = tmp;\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp < min){\n            min = tmp;\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i\
    \ = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for(int i =\
    \ 0; i < l.length; i++){\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for(int i = 0;\
    \ i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    for(int i\
    \ = 0; i < l.length", "{\n    long max = 0;\n    long i = 0;\n    long n = l.length;\n\
    \    \n    while (i < n) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n        i++;\n    }\n    return max;\n}", "{\n    long max = l[0];\n\
    \    long i;\n    for(i = 1; i < l.length; ++i)\n    {\n        if(l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n        i++;\n    }\n    return max;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n\
    \        if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}", "{\n    long max = l[0];\n    long i;\n    for(i = 1; i < l.length;\
    \ i++)\n    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n\
    \    long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i] < min)\n\
    \            min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n\
    {\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n   \
    \     product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double product = 1;\n    double i;\n    for(i = 0; i < l.length;\
    \ i++)", "{\n    long max_value = l[0];\n    long max_index = -1;\n    for(int\
    \ i = 1; i < l.length; i++)\n    {\n        if(l[i] > max_value)\n        {\n\
    \            max_value = l[i];\n            max_index = i;\n        }\n    }\n\
    \    return max_index;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min_value\
    \ = l[0];\n    long min_index = -1;\n    for(int i = 1; i < l.length; i++)\n \
    \   {\n        if(l[i] < min_value)\n        {\n            min_value = l[i];\n\
    \            min_index = i;\n        }\n    }\n    return min_index;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list with specified precision.\n    >>> sum([1L, 2L,\
    \ 3L], 2)\n    6.00\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L], 2)\n    -10.00\n    \n*/\nlong sum(long[] l, int precision) \n{\n   \
    \ long sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum +=\
    \ l[i] * pow(10, precision);\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list with specified precision and specified type.\n    >>> sum([1L,\
    \ 2L, 3L], 2, int)\n    6\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L], 2, int)\n    -10\n    \n*/", "{\n    long max = l[0];\n    for (int\
    \ i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] < min)\n\
    \            min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum\
    \ += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i)\n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; ++i)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n{\n    double prod = 1;\n    for (int i = 0; i < l.length; ++i)\n     \
    \   prod *= ", "{\n    long max_val = l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n        if (l[i] > max_val)\n            max_val = l[i];\n    return max_val;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n \
    \   long max = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i]\
    \ > max)\n            max = l[i];\n    return max;\n}", "{\n    long max = 0;\n\
    \    long i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i] < 0)\n\
    \        i++;\n    \n    while (j < l.length && l[j] > 0)\n        j++;\n    \n\
    \    if (i < l.length)\n        max = l[i];\n    \n    if (j < l.length)\n   \
    \     max = l[j];\n    \n    return max;\n}", "{\n    long max_val = l[0];\n \
    \   long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max_val)\n        {\n            max_val = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_idx;\n}", "{\n\tlong max = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}", "{\n    long max = l[0];\n    for (int i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n  \
    \  {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n  \
    \  {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }", "{\n    long max_val = l[0];\n    long max_idx = 1;\n    for(int i = 1; i\
    \ < l.length; i++)\n    {\n        if(l[i] > max_val)\n        {\n           \
    \ max_val = l[i];\n            max_idx = i;\n        }\n    }\n    return max_val;\n\
    }", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n \
    \   long max;\n    max = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n\
    \        if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}", "{\n    long max = l[0];\n    long i;\n    for (i = 1; i\
    \ < l.length; ++i) {\n        if (l[i] > max)\n            max = l[i];\n    }\n\
    \    return max;\n}", "{\n    long max = l[0];\n    for (long i = 1; i < l.length;\
    \ ++i)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n\
    \        if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ < min) \n        {\n            min = l[i];\n        }\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum +=\
    \ l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ number of elements in the list.\n    >>> count_elements([1L, 2L, 3L])\n    3L\n\
    \    >>> count_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    10L\n    \n*/\nlong count_elements(long[] l) \n{\n    long count = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\nReturn sum of all elements in list.\n    >>> sum_of_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_of_elements([5L, 3L, -5L, ", "{\n    long max = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i] > max)\n     \
    \       max = l[i];\n    }\n    return max;\n}", "{\n    long max_val = l[0];\n\
    \    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++) \n    {\n\
    \        if (l[i] > max_val) \n        {\n            max_val = l[i];\n      \
    \      max_idx = i;\n        }\n    }\n    \n    return max_val;\n}", "{\n   \
    \ long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n     \
    \   if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i] < min)\n     \
    \       min = l[i];\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble\
    \ sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble\
    \ product(double[] l) \n{\n", "{\n    long max = 0;\n    long i = 0;\n    \n \
    \   while (i < l.length) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n        i++;\n    }\n    return max;\n}", "{\n    long max;\n    max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long\
    \ l) \n{\n    long sum = 0;\n    while (l != 0)\n        sum += l;\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list, excluding zero.\n \
    \   >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_excl(long l)\
    \ \n{\n    long product = 1;\n    while (l != 0)\n        product *= l;\n    return\
    \ product;\n}\n/*\nReturn ", "{\n    long max = 0;\n    long i;\n    for(i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] > max) \n        {\n           \
    \ max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        if(l[i] < min) \n        {\n            min = l[i];\n        }\n\
    \    }\n    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n{\n    long\
    \ product = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double",
  "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n    \
    \    if (l[i] > max)\n            max = l[i];\n    return max;\n}", "{\n    long\
    \ max = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if\
    \ (l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}", "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        if(l[i] > max) \n        {\n            max = l[i];\n     \
    \   }\n    }\n    return max;\n}", "{\n    long max = l[0];\n    long i;\n   \
    \ for (i = 1; i < l.length; i++) {\n        if (l[i] > max)\n            max =\
    \ l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n  \
    \  for (i = 0; i < l.length; i++) {\n        product *= l[i];\n    }\n    return\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n\
    \    long i;\n    for (i = 0; i < l.length; i++) {\n        product *= l[i];",
  "{\n    long max = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n \
    \       if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long max_value = l[0];\n    long max_index = 0;\n    for (int i = 0; i <\
    \ l.length; ++i) {\n        if (l[i] > max_value) {\n            max_value = l[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_value;\n}", "{\n\
    \tlong max = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n    long max = l[0];\n\
    \    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}", "{\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.length; i++) \n        if (l[i] > max) \n            max = l[i];\n\
    \    return max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
