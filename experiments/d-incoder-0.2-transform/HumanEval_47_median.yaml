name: HumanEval_47_median
language: d
prompt: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
  \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n  \
  \  15.0\n    \n*/\nfloat median(long[] l) \n"
tests: "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
  \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) ==\
  \ 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
  \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
completions: ["{\n    int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m) m = l[i];\n   \
    \ }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float f = l[mid];\n\
    \    float s = l[mid-1];\n    float e = (l[mid-1] + l[mid]) / 2;\n    \n    if\
    \ (e < s) return e;\n    else return s;\n}", "{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 0)\n        return std.math.mid(l, 0, mid);\n    else\n\
    \        return std.math.mid(l, mid, l.length);\n}", "{\n    long l = length(l);\n\
    \    if (l % 2 == 0) return std.math::median(l);\n    else return (l+1)/2;\n}",
  "{\n    long l = length(l);\n    if (l == 0)\n        throw new Exception(\"empty\
    \ list\");\n    long mid = l / 2;\n    long l1 = 0, l2 = l;\n    float m1 = 0,\
    \ m2 = 0, m = 0;\n    float mv = 0.0;\n    float mvl = 0.0;\n    float mvl1 =\
    \ 0.0;\n    float mvl2 = 0.0;\n    float mvl3 = 0.0;\n    float mvl4 = 0.0;\n\
    \    float mvl5 = 0.0;\n    float mvl6 = 0.0;\n    float mvl7 = 0.0;\n    float\
    \ mvl8 = 0.0;\n    float mvl9 = 0.0;\n    float mvl10 = 0.0;\n    float mvl11\
    \ = 0.0;\n    float mvl12 = 0.0;\n    float mvl13 = 0.0;\n    float mvl14 = 0.0;\n\
    \    float mvl15 = 0.0;\n    float mvl16 = 0.0;\n    float mvl17 = 0.0;\n    float\
    \ mvl18 = 0.0;\n    float mvl19 = 0.0;\n    float mvl20 = 0.0;\n    float mvl21\
    \ = 0.0;\n    float mvl22 = 0.0;\n    float mvl23 = 0.0;\n    float mvl24 = 0.0;\n\
    \    float mvl25 = 0.0;\n    float mvl26 = 0.0;\n    float mvl27 = 0.0;\n    float\
    \ mvl28 = 0.0;\n    float mvl29 = 0.0;\n    float mvl30 = 0.0;\n    float mvl31\
    \ = 0.0;\n    float mvl32 = 0.0;\n    float mvl33 = 0.0;\n    float mvl34 = 0.0;\n\
    \    float mvl35 = 0.0;\n    float mvl36 = 0.0;\n    float mvl37 = 0.0;\n    float\
    \ mvl38 = 0.0;\n    float mvl39 = 0.0;\n    float mvl40 = 0.0;\n    float mvl41\
    \ = 0.0;\n    float mvl42 = 0.0;\n    float mvl43 = 0.0;\n    float mvl44 = 0.0;\n\
    \    float mvl45 = 0.0;\n    float mvl46 = 0.0;\n    float mvl47 = 0.0;\n    float\
    \ mvl48 = 0.0;\n    float mvl49 = 0.0;\n    float mvl50 = 0.0;\n    float mvl51\
    \ = 0.0;\n    float mvl52 = 0.0;\n    float mvl53 = 0.0;\n    float mvl54 = 0.0;\n\
    \    float mvl55 = 0.0;\n    ", "{\n\tlong mid = l.length / 2;\n\tif (l.length\
    \ % 2 == 0) \n\t\treturn std.math.mid(l, mid);\n\telse \n\t\treturn std.math.mid(l,\
    \ mid, l.length);\n}", "{\n    long i, mid;\n    float midVal;\n    \n    mid\
    \ = l.length / 2;\n    midVal = l[mid];\n    \n    for (i = 0; i < l.length; i++)\
    \ \n    {\n        if (l[i] < midVal) \n        {\n            midVal = l[i];\n\
    \        }\n    }\n    \n    return midVal;\n}", "{\n    long i, mid;\n    float\
    \ sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i = 0; i <\
    \ mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}", "{\n    long\
    \ len = l.length;\n    if (len < 2)\n        return 0;\n    long mid = len / 2;\n\
    \    float median = (float) l[mid];\n    float leftMedian = median(l);\n    float\
    \ rightMedian = median(l);\n    float leftMedian2 = median(l);\n    float rightMedian2\
    \ = median(l);\n    float leftMedian3 = median(l);\n    float rightMedian3 = median(l);\n\
    \    float leftMedian4 = median(l);\n    float rightMedian4 = median(l);\n   \
    \ float leftMedian5 = median(l);\n    float rightMedian5 = median(l);\n    float\
    \ leftMedian6 = median(l);\n    float rightMedian6 = median(l);\n    float leftMedian7\
    \ = median(l);\n    float rightMedian7 = median(l);\n    float leftMedian8 = median(l);\n\
    \    float rightMedian8 = median(l);\n    float leftMedian9 = median(l);\n   \
    \ float rightMedian9 = median(l);\n    float leftMedian10 = median(l);\n    float\
    \ rightMedian10 = median(l);\n    float leftMedian11 = median(l);\n    float rightMedian11\
    \ = median(l);\n    float leftMedian12 = median(l);\n    float rightMedian12 =\
    \ median(l);\n    float leftMedian13 = median(l);\n    float rightMedian13 = median(l);\n\
    \    float leftMedian14 = median(l);\n    float rightMedian14 = median(l);\n \
    \   float leftMedian15 = median(l);\n    float rightMedian15 = median(l);\n  \
    \  float leftMedian16 = median(l);\n    float rightMedian16 = median(l);\n   \
    \ float leftMedian17 = median(l);\n    float rightMedian17 = median(l);\n    float\
    \ leftMedian18 = median(l);\n    float rightMedian18 = median(l);\n    float leftMedian19\
    \ = median(l);\n    float rightMedian19 = median(l);\n    float leftMedian20 =\
    \ median(l);\n    float rightMedian20 = median(l);\n    float leftMedian21 = median(l);\n\
    \    float rightMedian21 = median(l);\n    float leftMedian22 = median(l);\n \
    \   float rightMedian22 = median(l);\n    float leftMedian23 = median(l);\n  \
    \  float rightMedian23", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n\
    \    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n\
    \    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n\
    \    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n\
    \    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n\
    \    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n\
    \    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n\
    \    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n\
    \    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n\
    \    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n\
    \    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n\
    \    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n\
    \    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n\
    \    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n\
    \    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n\
    \    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n", "{\n\tfloat med =\
    \ std.math.median(l);\n\treturn med;\n}", "{\n\tlong mid = l.length / 2;\n\tfloat\
    \ a = l[mid];\n\tfloat b = l[mid-1];\n\tfloat c = l[mid+1];\n\tfloat d = (a +\
    \ b + c + d) / 4;\n\treturn d;\n}", "{\n\tlong i, mid;\n\tfloat median;\n\t\n\t\
    mid = l.length/2;\n\t\n\tif (l.length % 2 == 0)\n\t{\n\t\tmedian = std.math.mid(l,\
    \ mid);\n\t}\n\telse\n\t{\n\t\tmedian = (std.math.mid(l, mid) + std.math.mid(l,\
    \ mid-1))/2;\n\t}\n\t\n\treturn median;\n}", "{\n    long mid = l.length / 2;\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fdiv(leftMedian, rightMedian);\n}", "{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}", "{\n    long l\
    \ = length(l);\n    if (l == 0)\n        return 0;\n    float mid = l / 2;\n \
    \   float left = 0;\n    float right = mid;\n    float median;\n    \n    while\
    \ (left < right) {\n        median = std.math.min(std.math.max(l[left], l[right]),\
    \ l[mid]);\n        if (median == l[mid])\n            left++;\n        else if\
    \ (median == l[right])\n            right--;\n        else\n            mid++;\n\
    \    }\n    return l[mid];\n}", "{\n    long mid = l.length / 2;\n    float m\
    \ = (float)l[mid];\n    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n\
    \    float h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float\
    \ h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n    float h = (float)l.length\
    \ - 1;\n    float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n \
    \   float m2 = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float\
    \ m = (float)l[mid];\n    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n\
    \    float h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float\
    \ h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n    float h = (float)l.length\
    \ - 1;\n    float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n \
    \   float m2 = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float\
    \ m = (float)l[mid];\n    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n\
    \    float h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float\
    \ h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n    float h = (float)l.length\
    \ - 1;\n    float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n \
    \   float m2 = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float\
    \ m = (float)l[mid];\n    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n\
    \    float h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float\
    \ h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n    float h = (float)l.length\
    \ - 1;\n    float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n \
    \   float m2 = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float\
    \ m = (float)l[mid];\n    float h", "{\n    long n = l.length;\n    if (n < 2)\
    \ return 0;\n    float m = l[0];\n    float m2 = l[n/2];\n    for (int i = 1;\
    \ i < n; i++) {\n        if (l[i] < m) m = l[i];\n        else if (l[i] > m2)\
    \ m2 = l[i];\n    }\n    return m;\n}", "{\n    long mid = l.length / 2;\n   \
    \ if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n    else\n   \
    \     return std.math.mid(l, mid, l.length);\n}", "{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, 0, mid);\n\
    \    float rightMedian = median(l, mid+1, l.length);\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n\
    \    if (start > end)\n        return l[start];\n    int mid = start + (end -\
    \ start) / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, start,\
    \ mid);\n    float rightMedian = median(l, mid+1, end);\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int step)\
    \ \n{\n    if (start > end)\n        return l[start];\n    int mid = start + (end\
    \ - start) / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l,\
    \ start, mid, step);\n    float rightMedian = median(l, mid+1, end, step);\n \
    \   return midVal + ((leftMedian + rightMedian) / 2);\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step, int stride) \n{\n    if (start > end)\n   \
    \     return l[start];\n    int mid = start + (end - start) / 2;\n    float midVal\
    \ = l[mid];\n    float leftMedian = median(l, start, mid, step, stride);\n   \
    \ float rightMedian = median(l, mid+1, end, step, stride);\n    return midVal\
    \ + ((leftMedian + rightMedian) / 2);\n}\n/*\nReturn median of elements in the ",
  "{\n    long mid = l.length / 2;\n    float median;\n    \n    if (l.length % 2\
    \ == 0)\n    {\n        median = std.math.toFloat(l[mid]);\n    }\n    else\n\
    \    {\n        median = std.math.toFloat(l[mid-1]) + std.math.toFloat(l[mid]);\n\
    \    }\n    return median;\n}", "{\n    long l = length(l);\n    if (l == 0)\n\
    \        throw new Exception(\"median of empty list\");\n    long mid = l / 2;\n\
    \    float midVal = std.math.mid(l, mid);\n    float leftMedian = median(l, 0,\
    \ mid);\n    float rightMedian = median(l, mid+1, l);\n    return std.math.max(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    if (start\
    \ == end)\n        return l[start];\n    float mid = start + (end - start) / 2;\n\
    \    float midVal = std.math.mid(l, start, mid);\n    float leftMedian = median(l,\
    \ start, mid);\n    float rightMedian = median(l, mid+1, end);\n    return std.math.max(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int step) \n{\n\
    \    if (start == end)\n        return l[start];\n    float mid = start + (end\
    \ - start) / 2;\n    float midVal = std.math.mid(l, start, mid, step);\n    float\
    \ leftMedian = median(l, start, mid, step);\n    float rightMedian = median(l,\
    \ mid+1, end, step);\n    return std.math.max(leftMedian, rightMedian);\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long[] l, int start, int end, int step, int stride) \n{\n    if (start\
    \ == end)\n        return l[start];\n    float mid = start + (end - start) / 2;\n\
    \    float midVal = std.math.mid(l, start, mid, step, stride);\n    float leftMedian\
    \ = median(l, start, mid, step, stride", "{\n    int n = l.length;\n    if (n\
    \ < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n   \
    \     if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if (n < 2)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n        if\
    \ (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    int n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long long l[]) \n{\n    int n = l.length;\n    if (n <\
    \ 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) {\n     \
    \   if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15", "{\n    long mid = l.length / 2;\n    float\
    \ midVal = std.math.mid(l, mid);\n    float leftMedian = median(l, 0, mid);\n\
    \    float rightMedian = median(l, mid+1, l.length);\n    return midVal + (leftMedian\
    \ + rightMedian)/2;\n}", "{\n    long mid = l.length / 2;\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l.slice(mid));\n    return std.math.min(leftMedian,\
    \ rightMedian);\n}", "{\n    float med = std.math.median(l);\n    return med;\n\
    }", "{\n    int n = l.length;\n    if (n < 1) \n        throw new IllegalArgumentException(\"\
    List must have at least one element\");\n    float m = l[0];\n    for (int i =\
    \ 1; i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if (n < 1) \n\
    \        throw new IllegalArgumentException(\"List must have at least one element\"\
    );\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n        if (l[i] <\
    \ m) \n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) \n        throw new IllegalArgumentException(\"\
    List must have at least one element\");\n    float m = l[0];\n    for (int i =\
    \ 1; i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(short l[]) \n{\n    int n = l.length;\n    if (n < 1) \n\
    \        throw new IllegalArgumentException(\"List must have at least one element\"\
    );\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n        if (l[i] <\
    \ m) \n            m = l[i];\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int l[]) \n{\n \
    \   int n = l.length;\n    if (n < 1) \n        throw new IllegalArgumentException(\"\
    List must have at least one element\");\n    float m = l[0];\n    for (int i =\
    \ 1; i < n; i++) \n        if (l[i] < m) \n            m = l[i];\n    return m;\n\
    }\n", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 0) \n    {\n \
    \       return std.math.mid(l, mid);\n    }\n    else \n    {\n        return\
    \ std.math.mid(l, mid + 1, l.length);\n    }\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    if (l.length % 2 == 0) \n    {\n        return\
    \ std.math.mid(l, mid);\n    }\n    else \n    {\n        return std.math.mid(l,\
    \ mid + 1, l.length);\n    }\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid =\
    \ l.length / 2;\n    if (l.length % 2 == 0) \n    {\n        return std.math.mid(l,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid + 1, l.length);\n\
    \    }\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n    if\
    \ (l.length % 2 == 0) \n    {\n        return std.math.mid(l, mid);\n    }\n \
    \   else \n    {\n        return std.math.mid(l, mid + 1, l.length);\n    }\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(char l[]) \n{\n    long mid = l.length / 2;\n    if (l.length\
    \ % 2 == 0) \n    {\n        return std.math.mid(l, mid);\n    }\n    else \n\
    \    {\n        return std.math.mid(l, mid + 1, l.", "{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.math.toFloat(leftMedian + rightMedian);\n}", "{\n    long mid\
    \ = l.length / 2;\n    float leftMedian = median(l);\n    float rightMedian =\
    \ median(l.slice(mid));\n    return std.math.max(leftMedian, rightMedian);\n}",
  "{\n    long mid = l.length / 2;\n    float median;\n    if (l.length == 0) return\
    \ 0;\n    if (l.length == 1) return l[0];\n    if (l.length == 2) return std.min(l[0],\
    \ l[1]);\n    \n    median = (l[mid] + l[mid-1]) / 2;\n    \n    for (int i =\
    \ mid; i < l.length; ++i)\n    {\n        if (l[i] < median)\n        {\n    \
    \        median = l[i];\n        }\n    }\n    return median;\n}", "{\n    long\
    \ n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}",
  "{\n    long l = length(l);\n    float m = 0.0;\n    \n    if (l == 0) return 0.0;\n\
    \    \n    float mid = l / 2;\n    \n    if (l % 2 == 0) {\n        m = l * (l\
    \ + 1) / 2;\n    } else {\n        m = l * (l - 1) / 2;\n    }\n    \n    float\
    \ sum = 0;\n    \n    for (int i = 0; i < l; i++) {\n        sum += l[i];\n  \
    \  }\n    \n    return sum / m;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ m = l[mid];\n    for(int i = 0; i < mid; i++) \n    {\n        if(l[i] < m)\
    \ \n        {\n            m = l[i];\n        }\n    }\n    return m;\n}", "{\n\
    \tlong mid = l.length / 2;\n\tfloat median;\n\tif (l.length%2 == 0)\n\t{\n\t\t\
    median = std.math.mid(l, mid);\n\t}\n\telse\n\t{\n\t\tmedian = std.math.mid(l,\
    \ mid, l.length);\n\t}\n\treturn median;\n}", "{\n    long mid = l.length / 2;\n\
    \    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n  \
    \  }\n    else \n    {\n        return std.math.mid(l, mid + 1, l.length - mid);\n\
    \    }\n}", "{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float\
    \ b = l[mid+1];\n    float c = l[mid-1];\n    float d = (a + b + c + d) / 4;\n\
    \    return d;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid+1];\n    float c = l[mid-1];\n   \
    \ float d = (a + b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    double mid = l.length / 2;\n    double a = l[mid];\n    double b = l[mid+1];\n\
    \    double c = l[mid-1];\n    double d = (a + b + c + d) / 4;\n    return d;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n    long a\
    \ = l[mid];\n    long b = l[mid+1];\n    long c = l[mid-1];\n    long d = (a +\
    \ b + c + d) / 4;\n    return d;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n   \
    \ float mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid+1];\n\
    \    float c = l[mid-1];\n    float d = (a + b + c + d) / 4;", "{\n    long mid\
    \ = l.length / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float\
    \ m3 = l[mid-2];\n    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float\
    \ m6 = l[mid-5];\n    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float\
    \ m9 = l[mid-8];\n    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float\
    \ m12 = l[mid-11];\n    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n \
    \   float m15 = l[mid-14];\n    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n\
    \    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n\
    \    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n\
    \    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n\
    \    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n\
    \    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n\
    \    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n\
    \    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n\
    \    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n\
    \    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n\
    \    float m45 = l[mid-44];\n", "{\n    long mid = l.length / 2;\n    float median;\n\
    \    if (l.length % 2 == 0)\n    {\n        median = std.math.mid(l, 0, mid);\n\
    \    }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n  \
    \  }\n    return median;\n}", "{\n\tlong mid = l.length / 2;\n\tif (l.length %\
    \ 2 == 1) \n\t{\n\t\tmid++;\n\t}\n\treturn std.math.mid(l, 0, mid);\n}", "{\n\t\
    long mid = l.length / 2;\n\tfloat m = (float) l[mid];\n\tfor (int i = 0; i < mid;\
    \ i++)\n\t\tm = (float) l[i] + (float) m;\n\treturn m;\n}", "{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}", "{\n    long mid\
    \ = l.length / 2;\n    float median = std.math.mid(l, 0, mid);\n    float leftMedian\
    \ = std.math.mid(l, mid, l.length);\n    float rightMedian = std.math.mid(l, 0,\
    \ mid);\n    if (leftMedian > rightMedian)\n        return leftMedian;\n    return\
    \ rightMedian;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n\
    \    float median = std.math.mid(l, 0, mid);\n    float leftMedian = std.math.mid(l,\
    \ mid, l.length);\n    float rightMedian = std.math.mid(l, 0, mid);\n    if (leftMedian\
    \ > rightMedian)\n        return leftMedian;\n    return rightMedian;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(float l[]) \n{\n    long mid = l.length / 2;\n    float median =\
    \ std.math.mid(l, 0, mid);\n    float leftMedian = std.math.mid(l, mid, l.length);\n\
    \    float rightMedian = std.math.mid(l, 0, mid);\n    if (leftMedian > rightMedian)\n\
    \        return leftMedian;\n    return rightMedian;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    long mid = l.length / 2;\n    float median = std.math.mid(l, 0,\
    \ mid);\n    float leftMedian = std.math.mid(l, mid, l.length);\n    float rightMedian\
    \ = std.math.mid(l, 0, mid);\n    if (leftMedian > rightMedian)\n        return\
    \ leftMedian;\n    return rightMedian;\n", "{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = l[mid];\n    float e = (a + b + c + d) / 4;\n    return e;\n}", "{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return m;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long[] l, int n) \n{\n    if (n < 1) return 0;\n    float\
    \ m = l[0];\n    for (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n\
    \    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int n, int m) \n{\n    if (n < 1)\
    \ return 0;\n    if (m < 0) m = 0;\n    if (m > n) m = n;\n    float m = l[0];\n\
    \    for (int i = 1; i < m; ++i)\n        if (l[i] < m) m = l[i];\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long[] l, int n, int m, int n2) \n{\n    if (n < 1) return\
    \ 0;\n    if (m < 0) m = 0;\n    if (m > n) m = n;\n    if (n2 < 0) n2 = 0;\n\
    \    if (n2 > n) n2 = n;\n    float m = l[0];\n    for (int i = 1; i < m; ++i)\n\
    \        if (l[i] < m) m = l[i];\n    for (int i = m+1; i < n2; ++i)\n       \
    \ if (l[i] < m) m = l[i];\n    return m;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int n,\
    \ int m, int n2, int n3) \n{\n    if (n < 1) return 0;\n    if (m < 0) m = 0;\n\
    \    if (m > n) m = n;\n    if (n2 < 0) n2 = 0;\n    if (", "{\n    float m =\
    \ l[0];\n    float n = l[0];\n    float sum = 0;\n    for(int i = 1; i < l.length;\
    \ i++){\n        sum += l[i];\n        if(sum > m){\n            m = sum;\n  \
    \      }\n        if(sum < n){\n            n = sum;\n        }\n    }\n    return\
    \ (n + m) / 2;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not an answer to the question.\
    \ He asked for median of medians, not median.\n<|/ c |>\n<| c |>\nI agree, this\
    \ is an answer to the question. He asked for median of medians, not median.\n\
    <|/ c |>\n<| c |>\nThis is not an answer to the question. He asked for median\
    \ of medians, not median.\n<|/ c |>\n<| a tags=algorithm,c++,median |>\nThe median\
    \ of medians algorithm is O(n) time and O(1) space (assuming you have a sorted\
    \ list). \nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median of the list\n\
    2. Find the median of the medians of the list\n3. Return the median of the medians\n\
    </code>\nThe algorithm is as follows:\n<code>\n1. Find the median ", "{\n    int\
    \ n = l.length;\n    if (n < 1) \n        return 0;\n    float m = l[0];\n   \
    \ for (int i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n            m =\
    \ l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    int n = l.length;\n\
    \    if (n < 1) \n        return 0;\n    float m = l[0];\n    for (int i = 1;\
    \ i < n; i++) \n    {\n        if (l[i] < m) \n            m = l[i];\n    }\n\
    \    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if\
    \ (n < 1) \n        return 0;\n    float m = l[0];\n    for (int i = 1; i < n;\
    \ i++) \n    {\n        if (l[i] < m) \n            m = l[i];\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    int n = l.length;\n    if (n < 1)\
    \ \n        return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n\
    \    {\n        if (l[i] < m) \n            m = l[i];\n    }\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long long l[]) \n{\n    int n = l.length;\n    if (n < 1)\
    \ \n        return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n\
    \    {\n        if (l[i] < m) \n            m = l[i];\n    }\n    return m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L", "{\n\tlong mid = l.length / 2;\n\tif (l.length % 2 == 1) \n\t{\n\t\tif\
    \ (l[mid] < l[mid+1]) \n\t\t\treturn l[mid];\n\t\telse \n\t\t\treturn l[mid+1];\n\
    \t}\n\telse \n\t{\n\t\tif (l[mid] < l[mid-1]) \n\t\t\treturn l[mid];\n\t\telse\
    \ \n\t\t\treturn l[mid-1];\n\t}\n}", "{\n    long mid = l.length / 2;\n    float\
    \ leftMedian = median(l);\n    float rightMedian = median(l.subList(0, mid));\n\
    \    return std.math.max(leftMedian, rightMedian);\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l) \n{\n \
    \   float mid = l.length / 2;\n    float leftMedian = median(l);\n    float rightMedian\
    \ = median(l.subList(0, mid));\n    return std.math.max(leftMedian, rightMedian);\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(double l) \n{\n    double mid = l.length / 2;\n    double\
    \ leftMedian = median(l);\n    double rightMedian = median(l.subList(0, mid));\n\
    \    return std.math.max(leftMedian, rightMedian);\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(char l) \n{\n  \
    \  char mid = l.length / 2;\n    char leftMedian = median(l);\n    char rightMedian\
    \ = median(l.subList(0, mid));\n    return std.math.max(leftMedian, rightMedian);\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(short l) \n{\n    short mid = l.length / 2;\n    short leftMedian\
    \ = median(l);\n    short rightMedian = median(l.subList(0, mid));\n    return\
    \ std.math.max(leftMedian, rightMedian);\n}\n/*\nReturn median of elements in\
    \ the list ", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 0) \n\
    \    {\n        return std.math.mid(l, 0, mid);\n    }\n    else \n    {\n   \
    \     return std.math.mid(l, mid, l.length);\n    }\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l) \n{\n \
    \   long mid = l.length / 2;\n    if (l.length % 2 == 0) \n    {\n        return\
    \ std.math.mid(l, 0, mid);\n    }\n    else \n    {\n        return std.math.mid(l,\
    \ mid, l.length);\n    }\n}\n/*\nReturn median of elements in the list l.\n  \
    \  >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0) \n    {\n        return std.math.mid(l, 0,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n\
    \    }\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l) \n{\n    long mid = l.length / 2;\n    if (l.length\
    \ % 2 == 0) \n    {\n        return std.math.mid(l, 0, mid);\n    }\n    else\
    \ \n    {\n        return std.math.mid(l, mid, l.length);\n    }\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(ulong l) \n{\n    long mid = l.length / 2;\n    if (l.length % 2 == 0)\
    \ \n    {\n        return std.math.mid(l, 0, mid);\n    }\n    else \n    {\n\
    \        return std.math.mid(l, mid, l.length);\n    }", "{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ \n        if (l[i] < m) \n            m = l[i];\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(long[] l, int start, int end) \n{\n    long n = end - start;\n    if\
    \ (n < 1) return 0;\n    float m = l[start];\n    for (int i = start; i < end;\
    \ i++) \n        if (l[i] < m) \n            m = l[i];\n    return m;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long[] l, int start, int end, int step) \n{\n    long n = end - start;\n\
    \    if (n < 1) return 0;\n    float m = l[start];\n    for (int i = start; i\
    \ < end; i += step) \n        if (l[i] < m) \n            m = l[i];\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long[] l, int start, int end, int step, long stepSize)\
    \ \n{\n    long n = end - start;\n    if (n < 1) return 0;\n    float m = l[start];\n\
    \    for (int i = start; i < end; i += step) \n        if (l[i] < m) \n      \
    \      m = l[i];\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step, long stepSize, long stepSize2) \n{\n    long n = end - start;\n\
    \    if (n < 1) return 0;\n    float m = l[start];\n    for (int i = start; i\
    \ < end; i += step) \n        if (l[i] < m) \n            m = l[i];\n    return\
    \ m;\n}\n/*\nReturn ", "{\n    long n = l.length;\n    if (n < 1) return 0;\n\
    \    long mid = n / 2;\n    long lower = l[mid];\n    long upper = l[n - 1];\n\
    \    if (lower > upper) return lower;\n    if (n == 1) return lower;\n    if (n\
    \ == 2) return (lower + upper) / 2;\n    if (n % 2 == 0) return median(l[mid]);\n\
    \    else return median(l[mid]) + median(l[n - 1]);\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long n = l.length;\n    if (n < 1) return 0;\n    long mid = n / 2;\n   \
    \ long lower = l[mid];\n    long upper = l[n - 1];\n    if (lower > upper) return\
    \ lower;\n    if (n == 1) return lower;\n    if (n == 2) return (lower + upper)\
    \ / 2;\n    if (n % 2 == 0) return median(l[mid]);\n    else return median(l[mid])\
    \ + median(l[n - 1]);\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    long mid = n / 2;\n    long lower = l[mid];\n \
    \   long upper = l[n - 1];\n    if (lower > upper) return lower;\n    if (n ==\
    \ 1) return lower;\n    if (n == 2) return (lower + upper) / 2;\n    if (n % 2\
    \ == 0) return median(l[mid]);\n    else return median(l[mid]) + median(l[n -\
    \ 1]);\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n    if (n < 1)\
    \ return 0;\n    long mid = n / 2;\n    long lower = l[mid];\n    long upper =\
    \ l[n - 1];\n    if (", "{\n    long mid = l.length / 2;\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l, mid);\n    float median = leftMedian\
    \ + ((rightMedian - leftMedian) / 2);\n    return median;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n   \
    \ int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    System.out.println(median(arr));\n\
    }", "{\n    long len = l.length;\n    if (len == 0) \n        return 0;\n    float\
    \ mid = len / 2;\n    float sum = 0;\n    float count = 0;\n    float median;\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        sum += l[i];\n       \
    \ count++;\n    }\n    \n    if (count % 2 == 0)\n    {\n        median = sum\
    \ / 2;\n    }\n    else\n    {\n        median = (sum / 2) / 2;\n    }\n    \n\
    \    return median;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long len = l.length;\n\
    \    if (len == 0) \n        return 0;\n    float mid = len / 2;\n    float sum\
    \ = 0;\n    float count = 0;\n    float median;\n    \n    for(int i = 0; i <\
    \ len; i++)\n    {\n        sum += l[i];\n        count++;\n    }\n    \n    if\
    \ (count % 2 == 0)\n    {\n        median = sum / 2;\n    }\n    else\n    {\n\
    \        median = (sum / 2) / 2;\n    }\n    \n    return median;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(float l[]) \n{\n    long len = l.length;\n    if (len == 0) \n      \
    \  return 0;\n    float mid = len / 2;\n    float sum = 0;\n    float count =\
    \ 0;\n    float median;\n    \n    for(int i = 0; i < len; i++)\n    {\n     \
    \   sum += l[i];\n        count++;\n    }\n    \n    if (count % 2 == 0)\n   \
    \ {\n        median = sum / 2;\n    }\n    else\n    {\n        median = (sum\
    \ / 2) / 2;\n    }\n    \n    return median;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long len = l.length;\n    if (len == 0) \n        return 0;\n    float mid\
    \ = len / 2;\n    float ", "{\n    long mid = l.length / 2;\n    float median;\n\
    \    if (l.length % 2 == 0) \n    {\n        median = std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        median = std.math.mid(l, mid + 1, l.length -\
    \ mid);\n    }\n    return median;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l) \n{\n    long\
    \ mid = l.length / 2;\n    float median;\n    if (l.length % 2 == 0) \n    {\n\
    \        median = std.math.mid(l, mid);\n    }\n    else \n    {\n        median\
    \ = std.math.mid(l, mid + 1, l.length - mid);\n    }\n    return median;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(double l) \n{\n    long mid = l.length / 2;\n    float median;\n\
    \    if (l.length % 2 == 0) \n    {\n        median = std.math.mid(l, mid);\n\
    \    }\n    else \n    {\n        median = std.math.mid(l, mid + 1, l.length -\
    \ mid);\n    }\n    return median;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(char l) \n{\n    long\
    \ mid = l.length / 2;\n    float median;\n    if (l.length % 2 == 0) \n    {\n\
    \        median = std.math.mid(l, mid);\n    }\n    else \n    {\n        median\
    \ = std.math.mid(l, mid + 1, l.length - mid);\n    }\n    return median;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/", "{\n    long mid = l.length / 2;\n    float median;\n    \n    if (l.length\
    \ % 2 == 0)\n    {\n        median = std.math.mid(l, 0, mid);\n    }\n    else\n\
    \    {\n        median = std.math.mid(l, mid, l.length);\n    }\n    \n    return\
    \ median;\n}", "{\n    long mid = l.length / 2;\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l, mid);\n    return std.math.toFloat(leftMedian\
    \ + rightMedian);\n}", "{\n    long i, mid;\n    float sum = 0;\n    \n    mid\
    \ = l.length / 2;\n    \n    for (i = 0; i < mid; i++)\n        sum += l[i];\n\
    \    \n    return sum / mid;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ leftMedian = median(l);\n    float rightMedian = median(l, mid);\n    return\
    \ std.fabs(leftMedian - rightMedian);\n}", "{\n    long mid = l.length / 2;\n\
    \    float m = (float) l.length / 2;\n    float sum = 0;\n    float count = 0;\n\
    \    float median;\n    \n    for(int i = 0; i < l.length; i++)\n    {\n     \
    \   sum += l[i];\n        count++;\n    }\n    \n    if(count == 0)\n    {\n \
    \       median = -1;\n    }\n    else\n    {\n        median = sum / count;\n\
    \    }\n    \n    return median;\n}", "{\n    float med = 0.0;\n    int n = l.length;\n\
    \    for(int i = 0; i < n; i++) {\n        med = (med + l[i]) / 2.0;\n    }\n\
    \    return med;\n}", "{\n    long mid = l.length / 2;\n    if (l.length % 2 ==\
    \ 1) \n        return std.math.mid(l, mid);\n    else \n        return std.math.mid(l,\
    \ mid, l.length - mid);\n}", "{\n    long mid = l.length / 2;\n    float median\
    \ = std.math.median(l);\n    float leftMedian = median;\n    float rightMedian\
    \ = median;\n    \n    for(int i = 0; i < mid; i++)\n    {\n        if(l[i] <\
    \ leftMedian)\n            leftMedian = l[i];\n        if(l[i] > rightMedian)\n\
    \            rightMedian = l[i];\n    }\n    \n    if(leftMedian == rightMedian)\n\
    \        return leftMedian;\n    \n    return leftMedian + ((rightMedian - leftMedian)\
    \ / 2);\n}", "{\n    long mid = l.length / 2;\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l.subList(0, mid));\n    return std.math.min(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n    if (start\
    \ == end)\n        return l[start];\n    \n    long mid = start + (end - start)\
    \ / 2;\n    float leftMedian = median(l, start, mid);\n    float rightMedian =\
    \ median(l, mid, end);\n    return std.math.min(leftMedian, rightMedian);\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long[] l, int start, int end, int step) \n{\n    if (start\
    \ == end)\n        return l[start];\n    \n    long mid = start + (end - start)\
    \ / 2;\n    float leftMedian = median(l, start, mid, step);\n    float rightMedian\
    \ = median(l, mid, end, step);\n    return std.math.min(leftMedian, rightMedian);\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long[] l, int start, int end, int step, float stepSize)\
    \ \n{\n    if (start == end)\n        return l[start];\n    \n    long mid = start\
    \ + (end - start) / 2;\n    float leftMedian = median(l, start, mid, step, stepSize);\n\
    \    float rightMedian = median(l, mid, end, step, stepSize);\n    return std.math.min(leftMedian,\
    \ rightMedian);\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L", "{\n\
    \    long n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}", "{\n    long n = l.length;\n    if (n < 2) return 0;\n    float m =\
    \ l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n\
    \    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n \
    \   >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n  \
    \  if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n \
    \   >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(char\
    \ l[]) \n{\n    long n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n \
    \   return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L", "{\n\
    \    long mid = l.length / 2;\n    float m = l[mid];\n    for(int i = mid; i <\
    \ l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ mid = l.length / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < m)\n        {\n            m = l[i];\n      \
    \  }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid =\
    \ l.length / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n  \
    \  return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(long long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float m = l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n  \
    \  return m;\n}\n/*\nReturn ", "{\n    float n = l.length;\n    if (n < 2) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if\
    \ (l[i] < m) m = l[i];\n    }\n    return m;\n}", "{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    long mid = n / 2;\n    long left = 0;\n    long\
    \ right = mid;\n    float median;\n    while (left < right) {\n        median\
    \ = std.math.min(l[left], l[right]);\n        left++;\n        right--;\n    }\n\
    \    return median;\n}", "{\n    long mid = l.length / 2;\n    float midVal =\
    \ l[mid];\n    float leftMedian = median(l.subList(0, mid));\n    float rightMedian\
    \ = median(l.subList(mid+1, l.length));\n    return midVal + ((leftMedian + rightMedian)\
    \ / 2);\n}\n</code>\n<|/ a tags=java,median,arrays |>\n<| a tags=java,median,arrays\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long l = length(l);\n    if (l == 0) return 0;\n \
    \   long mid = l / 2;\n    float m = (float)mid;\n    float c = (float)mid;\n\
    \    float h = 0;\n    float h2 = -1;\n    float h3 = -1;\n    float h4 = 0;\n\
    \    float h5 = 0;\n    float h6 = 0;\n    float h7 = 0;\n    float h8 = 0;\n\
    \    float h9 = 0;\n    float h10 = 0;\n    float h11 = 0;\n    float h12 = 0;\n\
    \    float h13 = 0;\n    float h14 = 0;\n    float h15 = 0;\n    float h16 = 0;\n\
    \    float h17 = 0;\n    float h18 = 0;\n    float h19 = 0;\n    float h20 = 0;\n\
    \    float h21 = -1;\n    float h22 = -1;\n    float h23 = -1;\n    float h24\
    \ = -1;\n    float h25 = -1;\n    float h26 = -1;\n    float h27 = -1;\n    float\
    \ h28 = -1;\n    float h29 = -1;\n    float h30 = -1;\n    float h31 = -1;\n \
    \   float h32 = -1;\n    float h33 = -1;\n    float h34 = -1;\n    float h35 =\
    \ -1;\n    float h36 = -1;\n    float h37 = -1;\n    float h38 = -1;\n    float\
    \ h39 = -1;\n    float h40 = -1;\n    float h41 = -1;\n    float h42 = -1;\n \
    \   float h43 = -1;\n    float h44 = -1;\n    float h45 = -1;\n    float h46 =\
    \ -1;\n    float h47 = -1;\n    float h48 = -1;\n    float h49 = -1;\n    float\
    \ h50 = -1;\n    float h51 = -1;\n    float h52 = -1;\n    float h53 = -1;\n \
    \   float h54 = -1;\n    float h55 = -1;\n    float h56 = -1;\n    float h57 =\
    \ -1;\n    float h58 = -1;\n    float h59 = -1;\n    float h60 = -1;\n    float\
    \ h61 = -1;\n    float h62 = -1;\n    float h63 = -1;\n    float h64 = -1;\n \
    \   float h65 = -1;\n    float h66 = -1;\n    float h67 = -1;\n    float h68 =\
    \ -1;\n    float h69 = -1;\n    float h70 = -1;\n    float h71 = -1;\n    float\
    \ h7", "{\n    long med = std.math.median(l);\n    return med;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float median;\n    if (l.length%2 == 0)\n    {\n  \
    \      median = (l[mid] + l[mid-1])/2;\n    }\n    else\n    {\n        median\
    \ = std.math.max(l[mid], l[mid-1]);\n    }\n    return median;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float\
    \ c = l[mid+1];\n    float d = (a + b + c) / 3;\n    return d;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l.subList(0, mid));\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}\n</code>\n<|/ a tags=median,java,algorithm |>\n<| c |>\n\
    This code doesn't work if you pass it an empty list. `median([])` returns `0`\
    \ instead of throwing an exception.\n<|/ c |>\n<| c |>\nI fixed the bug and added\
    \ a test case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI fixed the bug\
    \ and added a test case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis\
    \ code doesn't work if you pass it an empty list. median([]) returns 0 instead\
    \ of throwing an exception.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test\
    \ case. Thanks for pointing it out.\n<|/ c |>\n<| a tags=median,java,algorithm\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;", "{\n    long\
    \ mid = l.length / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n\
    \        median = std.math.mid(l, 0, mid);\n    }\n    else\n    {\n        median\
    \ = std.math.mid(l, mid, l.length);\n    }\n    return median;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(float l) \n{\n    long mid = l.length / 2;\n    float median;\n    if\
    \ (l.length % 2 == 0)\n    {\n        median = std.math.mid(l, 0, mid);\n    }\n\
    \    else\n    {\n        median = std.math.mid(l, mid, l.length);\n    }\n  \
    \  return median;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l) \n{\n    long mid = l.length / 2;\n\
    \    float median;\n    if (l.length % 2 == 0)\n    {\n        median = std.math.mid(l,\
    \ 0, mid);\n    }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n\
    \    }\n    return median;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l) \n{\n    long mid = l.length\
    \ / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n        median =\
    \ std.math.mid(l, 0, mid);\n    }\n    else\n    {\n        median = std.math.mid(l,\
    \ mid, l.length);\n    }\n    return median;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(ulong l) \n{\n \
    \   ", "{\n    long l = length(l);\n    if (l % 2 == 0)\n        return std.math.toFloat(std.math.mid(l,\
    \ l / 2));\n    else\n        return std.math.toFloat(std.math.mid(l / 2, l));\n\
    }", "{\n    long mid = l.length / 2;\n    float median;\n    if (l.length % 2\
    \ == 0)\n    {\n        median = std.math.mid(l, mid);\n    }\n    else\n    {\n\
    \        median = std.math.mid(l, mid, l.length);\n    }\n    return median;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float l) \n{\n    float mid = l.length / 2;\n    float median;\n\
    \    if (l.length % 2 == 0)\n    {\n        median = std.math.mid(l, mid);\n \
    \   }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n   \
    \ }\n    return median;\n}\n/*\nReturn median of elements in the list l.\n   \
    \ >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l) \n{\n    double mid =\
    \ l.length / 2;\n    double median;\n    if (l.length % 2 == 0)\n    {\n     \
    \   median = std.math.mid(l, mid);\n    }\n    else\n    {\n        median = std.math.mid(l,\
    \ mid, l.length);\n    }\n    return median;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l) \n{\n  \
    \  long mid = l.length / 2;\n    long median;\n    if (l.length % 2 == 0)\n  \
    \  {\n        median = std.math.mid(l, mid);\n    }\n    else\n    {\n       \
    \ median = std.math.mid(l, mid, l.length);\n    }\n    return median;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(float l) \n{\n    float mid = l.length", "{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = l[mid];\n    float e = l[mid-1];\n    float f = l[mid+1];\n   \
    \ float g = l[mid];\n    float h = l[mid-1];\n    float i = l[mid+1];\n    float\
    \ j = l[mid];\n    float k = l[mid-1];\n    float l = l[mid+1];\n    float m =\
    \ l[mid];\n    float n = l[mid-1];\n    float o = l[mid+1];\n    float p = l[mid];\n\
    \    float q = l[mid-1];\n    float r = l[mid+1];\n    float s = l[mid];\n   \
    \ float t = l[mid-1];\n    float u = l[mid+1];\n    float v = l[mid];\n    float\
    \ w = l[mid-1];\n    float x = l[mid+1];\n    float y = l[mid];\n    float z =\
    \ l[mid-1];\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = l[mid];\n    float e = l[mid-1];\n    float f = l[mid+1];\n   \
    \ float g = l[mid];\n    float h = l[mid-1];\n    float i = l[mid+1];\n    float\
    \ j = l[mid];\n    float k = l[mid-1];\n    float l = l[mid+1];\n    float m =\
    \ l[mid];\n    float n = l[mid-1];\n    float o = l[mid+1];\n    float p = l[mid];\n\
    \    float q = l[mid-1];\n    float r = l[mid+1];\n    float s = l[mid];\n   \
    \ float t = l[mid-1];\n    float u = l[mid+1];\n    float v = l[mid];\n    float\
    \ w = l[mid-1];\n    float x = l[mid+1];\n    float y = l[mid];\n    float z =\
    \ l[mid-1];\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = l[mid];\n    float e = l[mid-1];\n    float f = l[mid+1];", "{\n\
    \    long n = l.length;\n    if (n < 2) return 0;\n    long mid = n / 2;\n   \
    \ long sum = 0;\n    long count = 0;\n    long max = l[0];\n    long min = l[0];\n\
    \    long midMax = l[mid];\n    long midMin = l[mid];\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n        if (max < l[i]) {\n            max\
    \ = l[i];\n        }\n        if (min > l[i]) {\n            min = l[i];\n   \
    \     }\n        if (midMax < l[i]) {\n            midMax = l[i];\n        }\n\
    \        if (midMin > l[i]) {\n            midMin = l[i];\n        }\n    }\n\
    \    float median = (float) (sum / n);\n    if (min == max) {\n        return\
    \ min;\n    }\n    if (min == midMax) {\n        return midMin;\n    }\n    if\
    \ (max == midMin) {\n        return midMax;\n    }\n    return median;\n}\n</code>\n\
    <|/ a tags=c++,median,algorithm |>\n<| c |>\nThis algorithm is O(n^2). O(nlogn)\
    \ is possible by sorting the array and then finding the median in O(n).\n<|/ c\
    \ |>\n<| c |>\n: Yes, but it's O(n) in the worst case (when all elements are equal).\
    \ It's O(n) in the best case (when all elements are equal), but O(n^2) in the\
    \ average case (when all elements are equal).\n<|/ c |>\n<| c |>\n: Yes, but it's\
    \ O(n) in the worst case (when all elements are equal). It's O(n) in the best\
    \ case (when all elements are equal), but O(n^2) in the average case (when all\
    \ elements are equal).\n<|/ c |>\n<| c |>\n: Yes, but it's O(n) in the worst case\
    \ (when all elements are equal). It's O(n) in the best case (when all elements\
    \ are equal), but O(n^2) in the average case (when all elements are equal).\n\
    <|/ c |>\n<| c |>\n: Yes, but it's O(n) in the worst case (when all elements are\
    \ equal). It's O(n) in the best case (when all elements are equal), but O(n^2)\
    \ in the average case (when all elements are equal).\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>", "{\n\
    \    long low = 0;\n    long high = l.length - 1;\n    float mid = 0;\n    \n\
    \    while (low <= high) {\n        mid = (low + high) / 2;\n        if (l[mid]\
    \ < mid) {\n            low = mid + 1;\n        } else if (l[mid] > mid) {\n \
    \           high = mid - 1;\n        } else {\n            return mid;\n     \
    \   }\n    }\n    return mid;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l[], int n) \n{\n    long mid = l.length / 2;\n \
    \   float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n", "{\n    long med = std.math.median(l);\n\
    \    return med;\n}", "{\n    int n = l.length;\n    if (n < 2) return 0;\n  \
    \  float m = l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i] < m) m\
    \ = l[i];\n    }\n    return m;\n}", "{\n    long l = length(l);\n    if (l ==\
    \ 0)\n        return 0;\n    float m = l[0];\n    for (int i = 1; i < l; i++)\n\
    \        m = std.math.fma(m, l[i], m);\n    return m;\n}", "{\n    long mid =\
    \ l.length / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3\
    \ = l[mid-2];\n    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6\
    \ = l[mid-5];\n    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9\
    \ = l[mid-8];\n    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float\
    \ m12 = l[mid-11];\n    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n \
    \   float m15 = l[mid-14];\n    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n\
    \    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n\
    \    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n\
    \    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n\
    \    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n\
    \    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n\
    \    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n\
    \    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n\
    \    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n\
    \    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n\
    \    float m45 = l[mid-44];\n", "{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if\
    \ (l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l[]) \n{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if\
    \ (l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if (n < 1)\
    \ return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n   \
    \     if (l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n   \
    \ return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    int n = l.length;\n   \
    \ if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(char l[]) \n{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}\n/*\nReturn median of elements in the list l.", "{\n\
    \    long len = l.length;\n    if (len < 2)\n        return 0;\n    float mid\
    \ = len / 2;\n    float sum = 0;\n    float count = 0;\n    float median = 0;\n\
    \    float temp = 0;\n    for (int i = 0; i < len; i++) {\n        sum += l[i];\n\
    \        if (sum >= mid) {\n            count++;\n            if (count == 1)\
    \ {\n                median = l[i];\n            }\n        }\n    }\n    return\
    \ median;\n}", "{\n\tlong n = l.length;\n\tif (n < 2) return 0;\n\tfloat m = l[0];\n\
    \tfor (int i = 1; i < n; ++i)\n\t{\n\t\tfloat x = l[i];\n\t\tif (x < m) m = x;\n\
    \t}\n\treturn m;\n}", "{\n    float sum = 0;\n    int n = l.length;\n    for(int\
    \ i = 0; i < n; i++)\n        sum += l[i];\n    return sum / n;\n}", "{\n    long\
    \ n = l.length;\n    if (n < 2)\n        return 0;\n    long mid = n / 2;\n  \
    \  long left = l[mid];\n    long right = l[n - 1];\n    if (left > right)\n  \
    \      return left;\n    return right;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long n = l.length;\n    if (n < 2)\n        return 0;\n    long mid = n /\
    \ 2;\n    long left = l[mid];\n    long right = l[n - 1];\n    if (left > right)\n\
    \        return left;\n    return right;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long n = l.length;\n    if (n < 2)\n        return 0;\n    long mid = n /\
    \ 2;\n    long left = l[mid];\n    long right = l[n - 1];\n    if (left > right)\n\
    \        return left;\n    return right;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long n = l.length;\n    if (n < 2)\n        return 0;\n    long mid = n /\
    \ 2;\n    long left = l[mid];\n    long right = l[n - 1];\n    if (left > right)\n\
    \        return left;\n    return right;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[], int n)\
    \ \n{\n    if (n < 2)\n        return 0;\n    long mid = n / 2;\n    long left\
    \ = l[mid];\n    long right = l[n - 1];\n    if (left > right)\n        return\
    \ left;\n    return right;\n}\n/*\nReturn median of elements in the list ", "{\n\
    \    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = mid;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    float mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i =\
    \ mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n          \
    \  m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    double mid = l.length / 2;\n    double m = (double)l[mid];\n    for(int i\
    \ = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n        \
    \    m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    long m = (long)l[mid];\n    for(int i = mid;\
    \ i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    float mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i =\
    \ mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n        {\n          \
    \  m = l[i];\n        }\n", "{\n\tlong mid = l.length/2;\n\tfloat m = (float)l[mid];\n\
    \tfor (int i = mid; i < l.length; i++) \n\t{\n\t\tm = (m+(float)l[i])/2;\n\t}\n\
    \treturn m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\ndouble median(double[] l) \n{\n\tlong mid = l.length/2;\n\
    \tdouble m = (double)l[mid];\n\tfor (int i = mid; i < l.length; i++) \n\t{\n\t\
    \tm = (m+l[i])/2;\n\t}\n\treturn m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l) \n{\n\tlong\
    \ mid = l.length/2;\n\tfloat m = (float)l[mid];\n\tfor (int i = mid; i < l.length;\
    \ i++) \n\t{\n\t\tm = (m+l[i])/2;\n\t}\n\treturn m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\ndouble median(double l) \n{\n\
    \tlong mid = l.length/2;\n\tdouble m = (double)l[mid];\n\tfor (int i = mid; i\
    \ < l.length; i++) \n\t{\n\t\tm = (m+l[i])/2;\n\t}\n\treturn m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(long l) \n{\n\tlong mid = l.length/2;\n\tfloat m = (float)l[mid];\n\t\
    for (int i = mid; i < l.length; i++) \n\t{\n\t\tm = (m+l[i])/2;\n\t}\n\treturn\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3", "{\n\
    \    long l = length(l);\n    if (l % 2 == 1) return std.math::median(l);\n  \
    \  \n    long mid = l / 2;\n    long left = l-1;\n    long right = l;\n    \n\
    \    float m1 = median(std.array::slice(l, left, mid));\n    float m2 = median(std.array::slice(l,\
    \ mid, right));\n    \n    return std.math::max(m1, m2);\n}", "{\n    long n =\
    \ l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1;\
    \ i < n; i++) \n    {\n        if (l[i] < m) \n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i\
    \ = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n            m =\
    \ l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n       \
    \     m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    long n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n       \
    \     m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(char l[]) \n{\n\
    \    long n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n       \
    \     m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median ", "{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n    return d;\n}",
  "{\n    long n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i) {\n        float v = l[i];\n        if (v < m) m = v;\n\
    \    }\n    return m;\n}", "{\n    long n = l.length;\n    if (n < 1) return 0;\n\
    \    long mid = n / 2;\n    long left = l[mid];\n    long right = l[n - 1];\n\
    \    if (left > right) return left;\n    return right;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long n = l.length;\n    if (n < 1) return 0;\n    long mid = n\
    \ / 2;\n    long left = l[mid];\n    long right = l[n - 1];\n    if (left > right)\
    \ return left;\n    return right;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n   \
    \ long n = l.length;\n    if (n < 1) return 0;\n    long mid = n / 2;\n    long\
    \ left = l[mid];\n    long right = l[n - 1];\n    if (left > right) return left;\n\
    \    return right;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n  \
    \  if (n < 1) return 0;\n    long mid = n / 2;\n    long left = l[mid];\n    long\
    \ right = l[n - 1];\n    if (left > right) return left;\n    return right;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(char l[]) \n{\n    long n = l.length;\n    if (n < 1) return\
    \ 0;\n    long mid = n / 2;\n    long left = l[mid];\n    long right = l[n - 1];\n\
    \    if (left > right) return left;\n    return right;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3", "{\n\tlong i, mid;\n\tfloat sum;\n\
    \t\n\tmid = l.length / 2;\n\tsum = 0;\n\tfor (i = 0; i < mid; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum / mid;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n       \
    \ if(l[i] < m)\n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l[], int n) \n{\n    long mid = l.length / 2;\n \
    \   float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n    {\n\
    \        if(l[i] < m)\n        {\n            m = l[i];\n        }", "{\n\tlong\
    \ med = std.math.median(l);\n\treturn med;\n}", "{\n    long mid = l.length /\
    \ 2;\n    float m = (float)l[mid];\n    float hi = mid;\n    float lo = mid -\
    \ 1;\n    float mid2 = mid + 1;\n    float mid3 = mid + 2;\n    float mid4 = mid\
    \ + 3;\n    float mid5 = mid + 4;\n    float mid6 = mid + 5;\n    float mid7 =\
    \ mid + 6;\n    float mid8 = mid + 7;\n    float mid9 = mid + 8;\n    float mid10\
    \ = mid + 9;\n    float mid11 = mid + 10;\n    float mid12 = mid + 11;\n    float\
    \ mid13 = mid + 12;\n    float mid14 = mid + 13;\n    float mid15 = mid + 14;\n\
    \    float mid16 = mid + 15;\n    float mid17 = mid + 16;\n    float mid18 = mid\
    \ + 17;\n    float mid19 = mid + 18;\n    float mid20 = mid + 19;\n    float mid21\
    \ = mid + 20;\n    float mid22 = mid + 21;\n    float mid23 = mid + 22;\n    float\
    \ mid24 = mid + 23;\n    float mid25 = mid + 24;\n    float mid26 = mid + 25;\n\
    \    float mid27 = mid + 26;\n    float mid28 = mid + 27;\n    float mid29 = mid\
    \ + 28;\n    float mid30 = mid + 29;\n    float mid31 = mid + 30;\n    float mid32\
    \ = mid + 31;\n    float mid33 = mid + 32;\n    float mid34 = mid + 33;\n    float\
    \ mid35 = mid + 34;\n    float mid36 = mid + 35;\n    float mid37 = mid + 36;\n\
    \    float mid38 = mid + 37;\n    float mid39 = mid + 38;\n    float mid40 = mid\
    \ + 39;\n    float mid41 = mid + 40;\n    float mid42 = mid + 41;\n    float mid43\
    \ = mid + 42;\n    float mid44 = mid + 43;\n    float mid45 = mid + 44;\n    float\
    \ mid46 = mid + 45;\n    float mid47 = mid + 46;\n    float mid48 = mid + 47;\n\
    \    float mid49 = mid + 48;\n    float mid50 = mid + 49;\n    float mid51 = mid\
    \ + 50;\n    float mid52 = mid + 51;\n    float mid53 = mid + 52;\n    float mid54\
    \ = mid + 53;\n    float mid55 = mid + 54;\n", "{\n    long l = length(l);\n \
    \   if (l % 2 == 0) return std.math.mid(l, l / 2);\n    else return std.math.mid(l\
    \ / 2, l);\n}", "{\n    long mid = l.length / 2;\n    float f = l[mid];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] < f) \n        {\n      \
    \      f = l[i];\n        }\n    }\n    return f;\n}", "{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c + d) / 4;\n    return d;\n}", "{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++)\
    \ \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n\
    \    }\n    return m;\n}", "{\n    long l = length(l);\n    if (l % 2 == 0) \n\
    \    {\n        return std.math::mid(l, l / 2);\n    }\n    else \n    {\n   \
    \     return std.math::mid(l / 2, l);\n    }\n}", "{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0) \n        return std.math.mid(l, mid);\n  \
    \  else \n        return std.math.mid(l, mid + 1, l.length - mid);\n}", "{\n \
    \   long mid = l.length / 2;\n    float midVal = l[mid];\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l.slice(mid));\n    float median\
    \ = midVal + (leftMedian + rightMedian) / 2;\n    return median;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef median(arr):\n    length = len(arr)\n\
    \    if length % 2 == 0:\n        median = arr[(length-1)//2]\n    else:\n   \
    \     median = (arr[(length-1)//2] + arr[(length-1)//2-1])/2\n    return median\n\
    </code>\n<|/ a tags=median,python,algorithm |>\n<| a tags=median,python,algorithm\
    \ |>\n<code>\ndef median(arr):\n    length = len(arr)\n    if length % 2 == 0:\n\
    \        median = arr[(length-1)//2]\n    else:\n        median = (arr[(length-1)//2]\
    \ + arr[(length-1)//2-1])/2\n    return median\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=median,python,algorithm |>\n<code>\ndef median(arr):\n    length = len(arr)\n\
    \    if length % 2 == 0:\n        median = arr[(length-1)//2]\n    else:\n   \
    \     median = (arr[(length-1)//2] + arr[(length-1)//2-1])/2\n    return median\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef median(arr):\n    length\
    \ = len(arr)\n    if length % 2 == 0:\n        median = arr[(length-1)//2]\n \
    \   else:\n        median = (arr[(length-1)//2] + arr[(length-1)//2-1])/2\n  \
    \  return median\n</code>\n<|/ a tags=median,python,algorithm |>\n<| a tags=median,python,algorithm\
    \ |>\n<code>\ndef median(arr):\n    length = len(arr)\n    if length % 2 == 0:\n\
    \        median = arr[(length-1)//2]\n    else:\n        median = (arr[(length-1)//2]\
    \ + arr[(length-1)//2-1])/2\n    return median\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=median,python,algorithm |>\n<code>\ndef median(arr):\n    length = len(arr)\n\
    \    if length % 2 == 0:\n        median = arr[(length-1)//2]\n    else:\n   \
    \     median = (arr[(length-1)//2] + arr[(length-1)//2-1])/2\n    return median\n\
    </code>", "{\n    long l = length(l);\n    float median;\n    \n    if (l % 2\
    \ == 0)\n    {\n        median = std.math.mid(l, l / 2);\n    }\n    else\n  \
    \  {\n        median = std.math.mid(l / 2, l);\n    }\n    return median;\n}",
  "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return\
    \ std.math.mid(l, mid);\n    }\n    else \n    {\n        float m1 = median(l);\n\
    \        float m2 = median(std.array.removeAt(l, mid));\n        return std.math.mid(m1,\
    \ m2);\n    }\n}", "{\n    long mid = l.length / 2;\n    float leftMedian = median(l);\n\
    \    float rightMedian = median(l, mid);\n    return std.fabs(leftMedian - rightMedian);\n\
    }", "{\n    long l = length(l);\n    if (l % 2 == 1) return (l+1)/2;\n    else\
    \ return std.math.mid(l);\n}", "{\n    long mid = l.length / 2;\n    float a =\
    \ l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n    float d = (a\
    \ + b + c + l[mid]) / 4;\n    return d;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end) \n{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float\
    \ b = l[mid-1];\n    float c = l[mid+1];\n    float d = (a + b + c + l[mid]) /\
    \ 4;\n    return d;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int step)\
    \ \n{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + l[mid]) / 4;\n    return\
    \ d;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long[] l, int start, int end, int step, float stepSize)\
    \ \n{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c + l[mid]) / 4;\n    return\
    \ d;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long[] l, int start, int end, int step, float stepSize,\
    \ float stepSize2) \n{\n    long mid = l.length / ", "{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid+1];\n    float c = l[mid-1];\n\
    \    float d = l[mid];\n    float e = l[mid-1];\n    float f = (a + b + c + d\
    \ + e) / 4;\n    return f;\n}", "{\n    int n = l.length;\n    if (n < 1) return\
    \ 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n        if (l[i] <\
    \ m) m = l[i];\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n      \
    \  if(l[i] < m) \n        {\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(long l[], int n) \n{\n    long mid = l.length / 2;\n \
    \   float m = (float)l[mid];\n    for(int i = mid; i < l.length; i++) \n    {\n\
    \        if(l[i] < m) \n        {\n", "{\n    long mid = l.length / 2;\n    float\
    \ f = l[mid];\n    for(int i = mid; i > 0; i--)\n    {\n        if(l[i] < f)\n\
    \        {\n            f = l[i];\n        }\n    }\n    return f;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThe median of a list of length n is n/2\n<|/ c |>\n\
    <| c |>\nI know, but I wanted to show that you can do it in O(n) time.\n<|/ c\
    \ |>\n<| c |>\nThe median of a list of length n is n/2\n<|/ c |>\n<| c |>\nI know,\
    \ but I wanted to show that you can do it in O(n) time.\n<|/ c |>\n<| c |>\nI\
    \ know, but I wanted to show that you can do it in O(n) time.\n<|/ c |>\n<| a\
    \ tags=algorithm,c#,sorting |>\n<code>\npublic static double median(List<double>\
    \ list)\n{\n    double median;\n    double sum = 0;\n    double average;\n   \
    \ double sum2 = 0;\n    double average2;\n    double temp;\n    double temp2;\n\
    \    double temp3;\n    double temp4;\n    double temp5;\n    double temp6;\n\
    \    double temp7;\n    double temp8;\n    double temp9;\n    double temp10;\n\
    \    double temp11;\n    double temp12;\n    double temp13;\n    double temp14;\n\
    \    double temp15;\n    double temp16;\n    double temp17;\n    double temp18;\n\
    \    double temp19;\n    double temp20;\n    double temp21;\n    double temp22;\n\
    \    double temp23;\n    double temp24;\n    double temp25;\n    double temp26;\n\
    \    double temp27;\n    double temp28;\n    double temp29;\n    double temp30;\n\
    \    double temp31;\n    double temp32;\n    double temp33;\n    double temp34;\n\
    \    double temp35;\n    double temp36;\n    double temp37;\n    double temp38;\n\
    \    double temp39;\n    double temp40;\n    double temp41;\n    double temp42;\n\
    \    double temp43;\n    double temp44;\n    double temp45;\n    double temp46;\n\
    \    double temp47;\n    double temp48;\n    double temp49;\n    double temp50;\n\
    \    double temp", "{\n\tfloat sum = 0;\n\tfloat count = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t{\n\t\tsum += l[i];\n\t\tcount++;\n\t}\n\tif (count %\
    \ 2 == 0)\n\t\treturn sum / 2;\n\telse\n\t\treturn sum / 2;\n}", "{\n    long\
    \ mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l,\
    \ mid);\n    }\n    else \n    {\n        float m1 = median(l, 0, mid);\n    \
    \    float m2 = median(l, mid, l.length - 1);\n        return std.math.mid(m1,\
    \ m2);\n    }\n}", "{\n\tlong n = l.length;\n\tif (n < 1) return 0;\n\tlong mid\
    \ = n / 2;\n\tfloat m = l[mid];\n\tfor (int i = mid; i < n; i++)\n\t{\n\t\tm =\
    \ max(m, l[i]);\n\t}\n\treturn m;\n}", "{\n    long mid = l.length / 2;\n    float\
    \ median = l[mid];\n    \n    for (int i = 0; i < mid; ++i)\n    {\n        median\
    \ += l[i];\n    }\n    \n    return median / mid;\n}", "{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = 1; i < l.length; i++) \n\
    \    {\n        if(l[i] < m) \n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n\
    \    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = start;\
    \ i < end; i++) \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step) \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = start; i < end; i+=step) \n    {\n        if(l[i] < m) \n   \
    \     {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(long[] l, int start, int end, int step, float stepsize) \n{\n    long\
    \ mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i = start; i\
    \ < end; i+=step) \n    {\n        if(l[i] < m) \n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start,\
    \ int end, int step, float stepsize, float stepsize2) \n{\n    long mid = l.length\
    \ / 2;\n    float m", "{\n    int n = l.length;\n    if (n < 1) return 0;\n  \
    \  float m = l[0];\n    for (int i = 1; i < n; i++) \n        if (l[i] < m) \n\
    \            m = l[i];\n    return m;\n}", "{\n    long n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++) \n \
    \       if (l[i] < m) \n            m = l[i];\n    return m;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float f = l[mid];\n    for(int i = 0; i < mid; i++)\
    \ \n    {\n        if(l[i] < f) \n        {\n            f = l[i];\n        }\n\
    \    }\n    return f;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    for(int i = 0; i < mid; i++) \n    {\n    \
    \    if(l[i] < f) \n        {\n            f = l[i];\n        }\n    }\n    return\
    \ f;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(float l[]) \n{\n    long mid = l.length / 2;\n    float\
    \ f = l[mid];\n    for(int i = 0; i < mid; i++) \n    {\n        if(l[i] < f)\
    \ \n        {\n            f = l[i];\n        }\n    }\n    return f;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(double l[]) \n{\n    long mid = l.length / 2;\n    float f = l[mid];\n\
    \    for(int i = 0; i < mid; i++) \n    {\n        if(l[i] < f) \n        {\n\
    \            f = l[i];\n        }\n    }\n    return f;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n \
    \   >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[], int n) \n{\n    long mid = l.length / 2;\n    float f = l[mid];\n    for(int\
    \ i = 0; i < mid; i++) \n    {\n        if(l[i] < f) \n        {\n           \
    \ f = l[i];\n        }\n    }\n    return f;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median", "{\n    long mid = l.length / 2;\n    float\
    \ median = l[mid];\n    \n    for (int i = 0; i < mid; i++)\n    {\n        if\
    \ (l[i] < median)\n            median = l[i];\n    }\n    \n    return median;\n\
    }", "{\n    float m = 0.0;\n    int n = l.length;\n    float x = 0;\n    float\
    \ y = 0;\n    float z = 0;\n    int i;\n    \n    for(i = 0; i < n; i++){\n  \
    \      x = l[i];\n        y = x;\n        z = x;\n        \n        for(j = i+1;\
    \ j < n; j++){\n            z = z + l[j];\n            if(z > y){\n          \
    \      y = z;\n            }\n        }\n        m = y / x;\n    }\n    return\
    \ m;\n}", "{\n\tlong mid = l.length / 2;\n\tif (l.length % 2 == 1)\n\t\treturn\
    \ std.math.toFloat(l[mid]);\n\telse\n\t\treturn std.math.toFloat(l[mid]) + std.math.toFloat(l[mid+1]);\n\
    }", "{\n    long mid = l.length / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n\
    \    float m3 = l[mid-2];\n    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n\
    \    float m6 = l[mid-5];\n    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n\
    \    float m9 = l[mid-8];\n    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n\
    \    float m12 = l[mid-11];\n    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n\
    \    float m15 = l[mid-14];\n    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n\
    \    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n\
    \    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n\
    \    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n\
    \    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n\
    \    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n\
    \    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n\
    \    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n\
    \    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n\
    \    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n\
    \    float m45 = l[mid-44];\n", "{\n    long mid = l.length / 2;\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l, mid);\n    float median;\n \
    \   if (leftMedian > rightMedian) {\n        median = leftMedian;\n    } else\
    \ {\n        median = rightMedian;\n    }\n    return median;\n}", "{\n    long\
    \ mid = l.length / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l,\
    \ mid);\n    else \n        return std.math.mid(l, mid, l.length);\n}", "{\n \
    \   long mid = l.length / 2;\n    if (l.length == 0) return 0L;\n    float midVal\
    \ = std.math.mid(l, 0, mid);\n    float leftMedian = median(l, 0, mid);\n    float\
    \ rightMedian = median(l, mid, l.length - 1);\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}", "{\n    float med = std.math.median(l);\n    return\
    \ med;\n}", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n  \
    \  {\n        return std.math.mid(l, mid);\n    }\n    else \n    {\n        return\
    \ std.math.mid(l, mid, l.length);\n    }\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return\
    \ std.math.mid(l, mid);\n    }\n    else \n    {\n        return std.math.mid(l,\
    \ mid, l.length);\n    }\n}\n/*\nReturn median of elements in the list l.\n  \
    \  >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long mid =\
    \ l.length / 2;\n    if (l.length % 2 == 1) \n    {\n        return std.math.mid(l,\
    \ mid);\n    }\n    else \n    {\n        return std.math.mid(l, mid, l.length);\n\
    \    }\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\nfloat median(double l[]) \n{\n    long mid = l.length / 2;\n    if\
    \ (l.length % 2 == 1) \n    {\n        return std.math.mid(l, mid);\n    }\n \
    \   else \n    {\n        return std.math.mid(l, mid, l.length);\n    }\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(char l[]) \n{\n    long mid = l.length / 2;\n    if (l.length % 2\
    \ == 1) \n    {\n        return std.math.mid(l, mid);\n    }\n    else \n    {\n\
    \        return std.math.mid(l, mid, l.length);\n    }\n}", "{\n    long l = length(l);\n\
    \    if (l % 2 == 0)\n        return std.math.toFloat(l) / 2.0f;\n    else \n\
    \        return std.math.toFloat(l / 2.0f) + std.math.toFloat(l / 2.0f);\n}",
  "{\n    long med = std.math.median(l);\n    return med;\n}", "{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}", "{\n    long len\
    \ = l.length;\n    if (len == 0) \n        return 0;\n    float mid = len / 2;\n\
    \    float sum = 0;\n    float count = 0;\n    float median = 0;\n    float temp\
    \ = 0;\n    float temp2 = 0;\n    float temp3 = 0;\n    float temp4 = 0;\n   \
    \ float temp5 = 0;\n    float temp6 = 0;\n    float temp7 = 0;\n    float temp8\
    \ = 0;\n    float temp9 = 0;\n    float temp10 = 0;\n    float temp11 = 0;\n \
    \   float temp12 = 0;\n    float temp13 = 0;\n    float temp14 = 0;\n    float\
    \ temp15 = 0;\n    float temp16 = 0;\n    float temp17 = 0;\n    float temp18\
    \ = 0;\n    float temp19 = 0;\n    float temp20 = 0;\n    float temp21 = 0;\n\
    \    float temp22 = 0;\n    float temp23 = 0;\n    float temp24 = 0;\n    float\
    \ temp25 = 0;\n    float temp26 = 0;\n    float temp27 = 0;\n    float temp28\
    \ = 0;\n    float temp29 = 0;\n    float temp30 = 0;\n    float temp31 = 0;\n\
    \    float temp32 = 0;\n    float temp33 = 0;\n    float temp34 = 0;\n    float\
    \ temp35 = 0;\n    float temp36 = 0;\n    float temp37 = 0;\n    float temp38\
    \ = 0;\n    float temp39 = 0;\n    float temp40 = 0;\n    float temp41 = 0;\n\
    \    float temp42 = 0;\n    float temp43 = 0;\n    float temp44 = 0;\n    float\
    \ temp45 = 0;\n    float temp46 = 0;\n    float temp47 = 0;\n    float temp48\
    \ = 0;\n    float temp49 = 0;\n    float temp50 = 0;\n    float temp51 = 0;\n\
    \    float temp52 = 0;\n    float temp53 = 0;\n    float temp54 = 0;\n    float\
    \ temp55 = 0;\n    float temp56 = 0;\n    float temp57 = 0;\n    float temp58\
    \ = 0;\n    float temp59 = 0;\n    float temp60 = 0;\n    float temp61 = 0;\n\
    \    float temp62 = 0;\n    float temp63 = 0;\n    float temp64 = 0;\n    float\
    \ temp65 = 0;\n    float temp66 = 0;\n    float temp67 = 0;\n    float temp68\
    \ = 0;\n    float temp69 = 0;\n    float temp70 = 0;\n    float temp71 = 0;\n\
    \    float temp72 = 0;\n    float temp73 = 0;\n    float temp74 = 0;\n    float\
    \ temp75 = 0;\n    float temp76 = 0;\n    float temp77 = 0;\n    float temp78\
    \ = 0;\n    float temp79 = 0;\n    float temp80 = 0;", "{\n    float m = std.math.median(l);\n\
    \    return m;\n}", "{\n    long mid = l.length / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l.subList(0, mid));\n    float rightMedian = median(l.subList(mid+1,\
    \ l.length));\n    return midVal + (leftMedian + rightMedian)/2;\n}\n</code>\n\
    <|/ a tags=median,java,algorithm |>\n<| c |>\nThis doesn't work if there are two\
    \ equal numbers in the list. E.g. median([1,1]) returns 1 instead of 0\n<|/ c\
    \ |>\n<| c |>\nI believe this algorithm is O(n^2) in worst case and O(n) in average\
    \ case. Can you please explain why it is O(n^2)?\n<|/ c |>\n<| c |>\nThe algorithm\
    \ is O(n) in worst case and O(n) in average case. In the worst case it has to\
    \ go through all the elements in the list to find the median. In the average case\
    \ it can find the median in O(n) time.\n<|/ c |>\n<| c |>\nThe algorithm is O(n)\
    \ in worst case and O(n) in average case. In the worst case it has to go through\
    \ all the elements in the list to find the median. In the average case it can\
    \ find the median in O(n) time.\n<|/ c |>\n<| c |>\nThe algorithm is O(n) in worst\
    \ case and O(n) in average case. In the worst case it has to go through all the\
    \ elements in the list to find the median. In the average case it can find the\
    \ median in O(n) time.\n<|/ c |>\n<| a dscore=5 tags=median,java,algorithm |>\n\
    <code>\npublic static int median(int[] arr) {\n    int mid = arr.length / 2;\n\
    \    if (arr.length % 2 == 1) {\n        return arr[mid];\n    } else {\n    \
    \    return (arr[mid-1] + arr[mid]) / 2;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This algorithm is O(n) in worst case and O(n) in average case. In the worst case\
    \ it has to go through all the elements in the list to find the median. In the\
    \ average case it can find the median in O(n) time.\n<|/ c |>\n<| c |>\nThe algorithm\
    \ is O(n) in worst case and O(n) in average case. In the worst case it has to\
    \ go through all the elements in the list to find the median. In the average case\
    \ it can find the median in O(n) time.\n<|/ c |>\n<| c |>\nThe algorithm is O(n)\
    \ in ", "{\n    long l = length(l);\n    if (l % 2 == 0)\n        return std.math.toFloat(l/2);\n\
    \    else\n        return std.math.toFloat((l+1)/2);\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    long l = length(l);\n    if (l % 2 == 0)\n        return std.math.toFloat(l/2);\n\
    \    else\n        return std.math.toFloat((l+1)/2);\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n    long l = length(l);\n    if (l % 2 == 0)\n        return std.math.toFloat(l/2);\n\
    \    else\n        return std.math.toFloat((l+1)/2);\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double\
    \ l[]) \n{\n    long l = length(l);\n    if (l % 2 == 0)\n        return std.math.toFloat(l/2);\n\
    \    else\n        return std.math.toFloat((l+1)/2);\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(char\
    \ l[]) \n{\n    long l = length(l);\n    if (l % 2 == 0)\n        return std.math.toFloat(l/2);\n\
    \    else\n        return std.math.toFloat((l+1)/2);\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(string\
    \ l", "{\n    long len = l.length;\n    if (len == 0) \n    {\n        throw new\
    \ RuntimeException(\"empty list\");\n    }\n    float mid = len / 2;\n    float\
    \ sum = 0;\n    float sum2 = 0;\n    float sum3 = 0;\n    float sum4 = 0;\n  \
    \  float sum5 = 0;\n    float sum6 = 0;\n    float sum7 = 0;\n    float sum8 =\
    \ 0;\n    float sum9 = 0;\n    float sum10 = 0;\n    float sum11 = 0;\n    float\
    \ sum12 = 0;\n    float sum13 = 0;\n    float sum14 = 0;\n    float sum15 = 0;\n\
    \    float sum16 = 0;\n    float sum17 = 0;\n    float sum18 = 0;\n    float sum19\
    \ = 0;\n    float sum20 = 0;\n    float sum21 = 0;\n    float sum22 = 0;\n   \
    \ float sum23 = 0;\n    float sum24 = 0;\n    float sum25 = 0;\n    float sum26\
    \ = 0;\n    float sum27 = 0;\n    float sum28 = 0;\n    float sum29 = 0;\n   \
    \ float sum30 = 0;\n    float sum31 = 0;\n    float sum32 = 0;\n    float sum33\
    \ = 0;\n    float sum34 = 0;\n    float sum35 = 0;\n    float sum36 = 0;\n   \
    \ float sum37 = 0;\n    float sum38 = 0;\n    float sum39 = 0;\n    float sum40\
    \ = 0;\n    float sum41 = 0;\n    float sum42 = 0;\n    float sum43 = 0;\n   \
    \ float sum44 = 0;\n    float sum45 = 0;\n    float sum46 = 0;\n    float sum47\
    \ = 0;\n    float sum48 = 0;\n    float sum49 = 0;\n    float sum50 = 0;\n   \
    \ float sum51 = 0;\n    float sum52 = 0;\n    float sum53 = 0;\n    float sum54\
    \ = 0;\n    float sum55 = 0;\n    float sum56 = 0;\n    float sum57 = 0;\n   \
    \ float sum58 = 0;\n    float sum59 = 0;\n    float sum60 = 0;\n    float sum61\
    \ = 0;\n    float sum62 = 0;\n    float sum63 = 0;\n    float sum64 = 0;\n   \
    \ float sum65 = 0;\n    float sum66 = 0;\n    float sum67 = 0;\n    float sum68\
    \ = 0;\n    float sum69 = 0;\n    float sum70 = 0;\n    float sum71 = 0;\n   \
    \ float sum72 = 0;\n    float sum73 = 0;\n    float sum74 = 0;\n    float sum75\
    \ = 0;\n    float sum76 = 0;\n    float sum77 = 0;\n    float sum78 = 0;\n   \
    \ float sum79 = 0;\n    float sum80 = 0;\n    float sum81", "{\n    long mid =\
    \ l.length / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3\
    \ = l[mid-2];\n    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6\
    \ = l[mid-5];\n    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9\
    \ = l[mid-8];\n    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float\
    \ m12 = l[mid-11];\n    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n \
    \   float m15 = l[mid-14];\n    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n\
    \    float m18 = l[mid-17];\n    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n\
    \    float m21 = l[mid-20];\n    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n\
    \    float m24 = l[mid-23];\n    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n\
    \    float m27 = l[mid-26];\n    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n\
    \    float m30 = l[mid-29];\n    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n\
    \    float m33 = l[mid-32];\n    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n\
    \    float m36 = l[mid-35];\n    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n\
    \    float m39 = l[mid-38];\n    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n\
    \    float m42 = l[mid-41];\n    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n\
    \    float m45 = l[mid-44];\n", "{\n    float m = std.math.median(l);\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    if (l.length % 2 == 1) \n    \
    \    return std.math.mid(l, mid);\n    else \n        return std.math.mid(l, mid,\
    \ l.length);\n}", "{\n    long mid = l.length / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l);\n    float rightMedian = median(l.subList(0,\
    \ mid));\n    return midVal + (leftMedian + rightMedian) / 2;\n}\n</code>\n<|/\
    \ a tags=java,median,arrays,algorithm |>\n<| c |>\nThis code doesn't work when\
    \ there are two equal numbers in the list. For example, median([1,1]) returns\
    \ 1 instead of 0.5\n<|/ c |>\n<| c |>\nThis code doesn't work when there are two\
    \ equal numbers in the list. For example, median([1,1]) returns 1 instead of 0.5\n\
    <|/ c |>\n<| c |>\nThis code doesn't work when there are two equal numbers in\
    \ the list. For example, median([1,1]) returns 1 instead of 0.5\n<|/ c |>\n<|\
    \ c |>\nThis code doesn't work when there are two equal numbers in the list. For\
    \ example, median([1,1]) returns 1 instead of 0.5\n<|/ c |>\n<| c |>\nThis code\
    \ doesn't work when there are two equal numbers in the list. For example, median([1,1])\
    \ returns 1 instead of 0.5\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic double\
    \ median(ArrayList<Double> list) {\n    double median = 0;\n    double temp =\
    \ 0;\n    double sum = 0;\n    int count = 0;\n    double sumOfSquares = 0;\n\
    \    double average = 0;", "{\n    long mid = l.length / 2;\n    if (l.length\
    \ % 2 == 1)\n        return std.math.mid(l, mid);\n    else\n        return std.math.mid(l,\
    \ mid, l.length - mid);\n}", "{\n    long mid = l.length / 2;\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l.subList(0, mid));\n    return\
    \ std.math.max(leftMedian, rightMedian);\n}", "{\n    int n = l.length;\n    if\
    \ (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n   \
    \ }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(long l[]) \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(float l[]) \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(double l[]) \n{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(long l[], int len) \n{\n    long mid = len / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < len; i++) \n    {\n        if(l[i] < m) \n        {\n\
    \            m = l", "{\n    long n = l.length;\n    if (n < 2) return 0;\n  \
    \  float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if (l[i] <\
    \ m) m = l[i];\n    }\n    return m;\n}", "{\n\tlong mid = l.length / 2;\n\tfloat\
    \ m = l[mid];\n\tfor (int i = 0; i < mid; i++)\n\t\tm = std.max(m, l[i]);\n\t\
    return m;\n}", "{\n    int n = l.length;\n    if (n < 2) return 0;\n    float\
    \ m = (float)n;\n    float m2 = m;\n    float m3 = m;\n    float m4 = m;\n   \
    \ float m5 = m;\n    float m6 = m;\n    float m7 = m;\n    float m8 = m;\n   \
    \ float m9 = m;\n    float m10 = m;\n    float m11 = m;\n    float m12 = m;\n\
    \    float m13 = m;\n    float m14 = m;\n    float m15 = m;\n    float m16 = m;\n\
    \    float m17 = m;\n    float m18 = m;\n    float m19 = m;\n    float m20 = m;\n\
    \    float m21 = m;\n    float m22 = m;\n    float m23 = m;\n    float m24 = m;\n\
    \    float m25 = m;\n    float m26 = m;\n    float m27 = m;\n    float m28 = m;\n\
    \    float m29 = m;\n    float m30 = m;\n    float m31 = m;\n    float m32 = m;\n\
    \    float m33 = m;\n    float m34 = m;\n    float m35 = m;\n    float m36 = m;\n\
    \    float m37 = m;\n    float m38 = m;\n    float m39 = m;\n    float m40 = m;\n\
    \    float m41 = m;\n    float m42 = m;\n    float m43 = m;\n    float m44 = m;\n\
    \    float m45 = m;\n    float m46 = m;\n    float m47 = m;\n    float m48 = m;\n\
    \    float m49 = m;\n    float m50 = m;\n    float m51 = m;\n    float m52 = m;\n\
    \    float m53 = m;\n    float m54 = m;\n    float m55 = m;\n    float m56 = m;\n\
    \    float m57 = m;\n    float m58 = m;\n    float m59 = m;\n    float m60 = m;\n\
    \    float m61 = m;\n    float m62 = m;\n    float m63 = m;\n    float m64 = m;\n\
    \    float m65 = m;\n    float m66 = m;\n    float m67 = m;\n    float m68 = m;\n\
    \    float m69 = m;\n    float m70 = m;\n    float m71 = m;\n    float m72 = m;\n\
    \    float m73 = m;\n    ", "{\n    long l = std.math.toInt(l);\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m)\n        {\n            m = l[i];\n        }\n \
    \   }\n    return m;\n}", "{\n    float m = l[0];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        if (l[i] < m) \n        {\n            m = l[i];\n   \
    \     }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    float m = l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < m) \n    \
    \    {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(float l[]) \n{\n    float m = l[0];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        if (l[i] < m) \n        {\n            m = l[i];\n   \
    \     }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    float m =\
    \ l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i] < m)\
    \ \n        {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(long long l[]) \n{\n    float m = l[0];\n    for (int i = 1; i <\
    \ l.length; i++) \n    {\n        if (l[i] < m) \n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(ul", "{\n    int n =\
    \ l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1;\
    \ i < n; i++) \n    {\n        if (l[i] < m) \n        {\n            m = l[i];\n\
    \        }\n    }\n    return m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n   \
    \ int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for (int\
    \ i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n            m\
    \ = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements in\
    \ the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n       \
    \     m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n       \
    \     m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) \n    {\n        if (l[i] < m) \n        {\n       \
    \     m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.", "{\n\tlong mid = l.length / 2;\n\tfloat midVal = std.math.median(l);\n\
    \tfloat leftMedian = median(l.subarray(0, mid));\n\tfloat rightMedian = median(l.subarray(mid,\
    \ l.length));\n\treturn (midVal < leftMedian) ? leftMedian : rightMedian;\n}\n\
    /*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(float l) \n{\n\tfloat mid = l.length / 2;\n\tfloat midVal\
    \ = std.math.median(l);\n\tfloat leftMedian = median(l.subarray(0, mid));\n\t\
    float rightMedian = median(l.subarray(mid, l.length));\n\treturn (midVal < leftMedian)\
    \ ? leftMedian : rightMedian;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l) \n{\n\tdouble mid = l.length\
    \ / 2;\n\tdouble midVal = std.math.median(l);\n\tdouble leftMedian = median(l.subarray(0,\
    \ mid));\n\tdouble rightMedian = median(l.subarray(mid, l.length));\n\treturn\
    \ (midVal < leftMedian) ? leftMedian : rightMedian;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l) \n{\n\t\
    long mid = l.length / 2;\n\tlong midVal = std.math.median(l);\n\tlong leftMedian\
    \ = median(l.subarray(0, mid));\n\tlong rightMedian = median(l.subarray(mid, l.length));\n\
    \treturn (midVal < leftMedian) ? leftMedian : rightMedian;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n",
  "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n    for(int i =\
    \ mid; i < l.length; i++) \n    {\n        if(l[i] < m) \n        {\n        \
    \    m = l[i];\n        }\n    }\n    return m;\n}", "{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    for(int i = mid; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m = (float)l[l.length\
    \ / 2];\n    for(int i = 0; i < l.length / 2; ++i)\n    {\n        if(l[i] < m)\n\
    \        {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(double l[]) \n{\n    double m = (double)l[l.length / 2];\n    for(int\
    \ i = 0; i < l.length / 2; ++i)\n    {\n        if(l[i] < m)\n        {\n    \
    \        m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    long m = (long)l[l.length / 2];\n    for(int i = 0; i < l.length / 2; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float m = (float)l[l.length\
    \ / 2];\n    for(int i = 0; i < l.length / 2; ++i)\n    {\n        if(l[i] < m)\n\
    \        {\n            m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, ", "{\n \
    \   long mid = l.length / 2;\n    float midVal = l[mid];\n    float leftMedian\
    \ = median(l, 0, mid);\n    float rightMedian = median(l, mid+1, l.length);\n\
    \    return midVal + ((leftMedian + rightMedian) / 2);\n}", "{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0)\n\t\treturn std.math.mid(l, mid);\n\telse\n\t\
    \treturn std.math.mid(l, mid, l.length);\n}", "{\n    long l = length(l);\n  \
    \  if (l == 0) \n        return 0;\n    float m = l[0];\n    for (int i = 1; i\
    \ < l; i++) {\n        if (l[i] < m) \n            m = l[i];\n    }\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    float midVal = l[mid];\n    float\
    \ leftMedian = median(l.subList(0, mid));\n    float rightMedian = median(l.subList(mid+1,\
    \ l.length));\n    return midVal + ((leftMedian + rightMedian) / 2);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef median(lst):\n    lst = sorted(lst)\n\
    \    length = len(lst)\n    if length % 2 == 0:\n        return lst[length//2]\n\
    \    else:\n        return (lst[(length-1)//2] + lst[length//2]) / 2\n</code>\n\
    <|/ a tags=java,algorithm,median,sorting |>\n<| a dscore=0 |>\n<code>\npublic\
    \ double median(List<Integer> list) {\n    Collections.sort(list);\n    int size\
    \ = list.size();\n    if (size % 2 == 0) {\n        return list.get(size / 2);\n\
    \    } else {\n        return (list.get(size / 2 - 1) + list.get(size / 2)) /\
    \ 2;\n    }\n}\n</code>\n<|/ a tags=java,algorithm,median,sorting |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27839568)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ find the median of a list. He also asked how to find the median of a sorted\
    \ list. He also asked how to find the median of a list without sorting the list.\
    \ He also asked how to find the median of a list without sorting the list. He\
    \ also asked how to find the median of a list without sorting the list. He also\
    \ asked how to find the median of a list without sorting the list. He also asked\
    \ how to find the median of a list without sorting the list. He also asked how\
    \ to find the median of a list without sorting the list. He also asked how to\
    \ find the median of a list without sorting the list. He also asked how to find\
    \ the median of a list without sorting the list. He also asked how to find the\
    \ median of a list without sorting the list. He also asked how to find the median\
    \ of a list without sorting the list. He also asked how to find the median of\
    \ a list without sorting the list. He also asked how to find the median of a list\
    \ without sorting the list. He also asked how to find the median ", "{\n    float\
    \ m = 0.0;\n    int n = l.length;\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     m += l[i];\n    }\n    m /= n;\n    return m;\n}", "{\n    long l = std.math.min(l);\n\
    \    long r = std.math.max(l);\n    float m = (float)(r + l) / 2;\n    return\
    \ m;\n}", "{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i)\n        if (l[i] < m) m = l[i];\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float b\
    \ = l[mid-1];\n    float c = l[mid+1];\n    float d = (a + b + c + d) / 4;\n \
    \   return d;\n}", "{\n    long mid = l.length / 2;\n    float m = (float) l.length\
    \ / 2;\n    float sum = 0;\n    float sum2 = 0;\n    float temp;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n        sum2 += l[i]\
    \ * l[i];\n    }\n    temp = sum / mid;\n    temp = (temp - sum2 / mid) / mid;\n\
    \    return temp;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double[] l) \n{\n    double mid = l.length /\
    \ 2;\n    float m = (float) l.length / 2;\n    float sum = 0;\n    float sum2\
    \ = 0;\n    float temp;\n    for(int i = 0; i < l.length; i++)\n    {\n      \
    \  sum += l[i];\n        sum2 += l[i] * l[i];\n    }\n    temp = sum / mid;\n\
    \    temp = (temp - sum2 / mid) / mid;\n    return temp;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n \
    \   >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float[]\
    \ l) \n{\n    float mid = l.length / 2;\n    float m = (float) l.length / 2;\n\
    \    float sum = 0;\n    float sum2 = 0;\n    float temp;\n    for(int i = 0;\
    \ i < l.length; i++)\n    {\n        sum += l[i];\n        sum2 += l[i] * l[i];\n\
    \    }\n    temp = sum / mid;\n    temp = (temp - sum2 / mid) / mid;\n    return\
    \ temp;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(short[] l) \n{\n    short mid = l.length / 2;\n\
    \    float m = (float) l.length / 2;\n    float sum = 0;\n    float sum2 = 0;\n\
    \    float temp;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum +=\
    \ l[i];\n        sum2 += l[i] * l[i];\n    }\n    ", "{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0) \n\t\treturn std.math.mid(l, mid);\n\telse \n\
    \t\treturn std.math.mid(l, mid, l.length);\n}", "{\n    long mid = l.length /\
    \ 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, 0, mid);\n  \
    \  else\n        return std.math.mid(l, mid, l.length);\n}", "{\n    int n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float leftMedian = median(l);\n    float rightMedian\
    \ = median(l.subList(0, mid));\n    return std.math.max(leftMedian, rightMedian);\n\
    }\n</code>\n<|/ a tags=median,algorithm,java |>\n<| c |>\nThis does not answer\
    \ the question. OP asked for median of medians, not median.\n<|/ c |>\n<| c |>\n\
    I believe this answer is correct. OP asked for median of medians, not median.\n\
    <|/ c |>\n<| c |>\nThis is not the median of medians. It is just the median of\
    \ the medians.\n<|/ c |>\n<| c |>\nThe median of medians is the median of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the medians of the\
    \ medians of the medians of the medians of the medians of the medians of the medians\
    \ of the medians of the medians of the medians of the medians of the medians of\
    \ the medians of the medians of the medians of the medians of the median", "{\n\
    \    long n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}", "{\n    long low = 0;\n    long high = l.length - 1;\n    float mid;\n\
    \    \n    while (low < high) {\n        mid = (low + high) / 2;\n        if (l[mid]\
    \ < l[low])\n            low = mid + 1;\n        else if (l[mid] > l[high])\n\
    \            high = mid - 1;\n        else\n            return l[mid];\n    }\n\
    \    return l[low];\n}", "{\n    int n = l.length;\n    if (n < 1) return 0;\n\
    \    float m = l[0];\n    for (int i = 1; i < n; ++i)\n    {\n        if (l[i]\
    \ < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median of elements in the\
    \ list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m) m = l[i];\n    }\n   \
    \ return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    int n = l.length;\n   \
    \ if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n \
    \   >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long\
    \ l[]) \n{\n    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n\
    \    for (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m) m = l[i];\n   \
    \ }\n    return m;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    int n = l.length;\n    if\
    \ (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n  \
    \  {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\n/*\nReturn median\
    \ of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n \
    \   >>> median([-10L, ", "{\n    long mid = l.length / 2;\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l.subList(0, mid));\n    return\
    \ std.math.toFloat(leftMedian + rightMedian);\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l) \n{\n \
    \   float mid = l.length / 2;\n    float leftMedian = median(l);\n    float rightMedian\
    \ = median(l.subList(0, mid));\n    return leftMedian + rightMedian;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(double l) \n{\n    double mid = l.length / 2;\n    double leftMedian\
    \ = median(l);\n    double rightMedian = median(l.subList(0, mid));\n    return\
    \ leftMedian + rightMedian;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l) \n{\n    long mid = l.length\
    \ / 2;\n    long leftMedian = median(l);\n    long rightMedian = median(l.subList(0,\
    \ mid));\n    return leftMedian + rightMedian;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l) \n{\n \
    \   float mid = l.length / 2;\n    float leftMedian = median(l);\n    float rightMedian\
    \ = median(l.subList(0, mid));\n    return leftMedian + rightMedian;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5",
  "{\n    long n = l.length;\n    if (n < 2) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}", "{\n    long mid = l.length / 2;\n    float a = l[mid];\n    float b\
    \ = l[mid-1];\n    float c = l[mid+1];\n    float d = (a + b + c) / 3;\n    return\
    \ d;\n}", "{\n    long n = l.length;\n    if (n < 2) return 0;\n    long mid =\
    \ n / 2;\n    long left = 0;\n    long right = mid;\n    float midVal = 0;\n \
    \   float leftVal = 0;\n    float rightVal = 0;\n    float median = 0;\n    while\
    \ (left < right) {\n        midVal = std.math.mid(l, left, right);\n        leftVal\
    \ = std.math.min(l, left, right);\n        rightVal = std.math.max(l, left, right);\n\
    \        if (midVal < leftVal) {\n            left = left + 1;\n        } else\
    \ if (midVal > rightVal) {\n            right = right - 1;\n        } else {\n\
    \            median = midVal;\n            left = left + 1;\n            right\
    \ = right - 1;\n        }\n    }\n    return median;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end) \n{\n    long n = end - start;\n    if (n < 2) return\
    \ 0;\n    long mid = n / 2;\n    long left = start;\n    long right = mid;\n \
    \   float midVal = 0;\n    float leftVal = 0;\n    float rightVal = 0;\n    float\
    \ median = 0;\n    while (left < right) {\n        midVal = std.math.mid(l, left,\
    \ right);\n        leftVal = std.math.min(l, left, right);\n        rightVal =\
    \ std.math.max(l, left, right);\n        if (midVal < leftVal) {\n           \
    \ left = left + 1;\n        } else if (midVal > rightVal) {\n            right\
    \ = right - 1;\n        } else {\n            median = midVal;\n            left\
    \ = left + 1;\n            right = right - 1;\n        }\n    }\n    return median;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(long[] l, int start, int end, int step) \n{\n    long n\
    \ = end - start;\n    if (n < 2) return 0;\n    long mid = n / 2;\n    long left\
    \ = start;\n    long right = mid;\n    float midVal = 0;\n    float leftVal =\
    \ 0;\n    float rightVal = 0;\n    float median = 0;\n    while (left < right)\
    \ {\n", "{\n    long len = l.length;\n    if (len == 0) \n        return 0;\n\
    \    float mid = len / 2;\n    float left = 0;\n    float right = len - 1;\n \
    \   float midVal = l[mid];\n    while (left < right) {\n        float midVal1\
    \ = l[left];\n        float midVal2 = l[right];\n        if (midVal1 < midVal2)\
    \ \n            left++;\n        else if (midVal1 > midVal2) \n            right--;\n\
    \        else \n            return midVal1;\n    }\n    return midVal;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post.\n\
    <|/ c |>\n<| c |>\nIt does provide an answer to the question. He asked for a median\
    \ function in C#. He also asked for help with his implementation. He also asked\
    \ for help with his implementation. He also asked for help with his implementation.\
    \ He also asked for help with his implementation. He also asked for help with\
    \ his implementation. He also asked for help with his implementation. He also\
    \ asked for help with his implementation. He also asked for help with his implementation.\
    \ He also asked for help with his implementation. He also asked for help with\
    \ his implementation. He also asked for help with his implementation. He also\
    \ asked for help with his implementation. He also asked for help with his implementation.\
    \ He also asked for help with his implementation. He also asked for help with\
    \ his implementation. He also asked for help with his implementation. He also\
    \ asked for help with his implementation. He also asked for help with his implementation.\
    \ He also asked for help with his implementation. He also asked for help with\
    \ his implementation. He also asked for help with his implementation. He also\
    \ asked for help with his implementation. He also asked for help with his implementation.\
    \ He also asked for help with his implementation. He also asked for help with\
    \ his implementation. He also asked for help with his implementation. He also\
    \ asked for help with his implementation. He also asked for help with his implementation.\
    \ He also asked for help with his implementation. He also asked for help with\
    \ his implementation. He also as", "{\n\tlong mid = l.length / 2;\n\tif (l.length\
    \ % 2 == 0)\n\t\treturn std.math.toFloat(l[mid]);\n\telse\n\t\treturn std.math.toFloat(l[mid])\
    \ + std.math.toFloat(l[mid+1]);\n}", "{\n    long mid = l.length / 2;\n    float\
    \ leftMedian = median(l);\n    float rightMedian = median(l, mid);\n    return\
    \ std.math.toFloat(leftMedian + rightMedian);\n}", "{\n\tlong mid = l.length /\
    \ 2;\n\tfloat a = l[mid];\n\tfloat b = l[mid-1];\n\tfloat c = l[mid+1];\n\tfloat\
    \ d = l[mid];\n\tfloat e = l[mid-1];\n\tfloat f = l[mid+1];\n\tfloat g = l[mid];\n\
    \tfloat h = l[mid-1];\n\tfloat i = l[mid+1];\n\tfloat j = (a + b + c + d + e +\
    \ f + g + h + i + j) / 6;\n\treturn j;\n}", "{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = l[mid];\n    float e = l[mid-1];\n    float f = l[mid+1];\n    float\
    \ g = l[mid];\n    float h = l[mid-1];\n    float i = l[mid+1];\n    float j =\
    \ l[mid];\n    float k = l[mid-1];\n    float l = l[mid+1];\n    float m = l[mid];\n\
    \    float n = l[mid-1];\n    float o = l[mid+1];\n    float p = l[mid];\n   \
    \ float q = l[mid-1];\n    float r = l[mid+1];\n    float s = l[mid];\n    float\
    \ t = l[mid-1];\n    float u = l[mid+1];\n    float v = l[mid];\n    float w =\
    \ l[mid-1];\n    float x = l[mid+1];\n    float y = l[mid];\n    float z = l[mid-1];\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = l[mid];\n    float e = l[mid-1];\n    float f = l[mid+1];\n    float\
    \ g = l[mid];\n    float h = l[mid-1];\n    float i = l[mid+1];\n    float j =\
    \ l[mid];\n    float k = l[mid-1];\n    float l = l[mid+1];\n    float m = l[mid];\n\
    \    float n = l[mid-1];\n    float o = l[mid+1];\n    float p = l[mid];\n   \
    \ float q = l[mid-1];\n    float r = l[mid+1];\n    float s = l[mid];\n    float\
    \ t = l[mid-1];\n    float u = l[mid+1];\n    float v = l[mid];\n    float w =\
    \ l[mid-1];\n    float x = l[mid+1];\n    float y = l[mid];\n    float z = l[mid-1];\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = l[mid];\n    float e = l[mid-1];\n    float f = l[mid+1];", "{\n \
    \   long n = l.length;\n    if (n < 1) return 0L;\n    long mid = n / 2L;\n  \
    \  long lower = l[mid];\n    long upper = l[n - mid];\n    if (lower > upper)\
    \ return lower;\n    return upper;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long\
    \ n = l.length;\n    if (n < 1) return 0L;\n    long mid = n / 2L;\n    long lower\
    \ = l[mid];\n    long upper = l[n - mid];\n    if (lower > upper) return lower;\n\
    \    return upper;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    long n = l.length;\n   \
    \ if (n < 1) return 0L;\n    long mid = n / 2L;\n    long lower = l[mid];\n  \
    \  long upper = l[n - mid];\n    if (lower > upper) return lower;\n    return\
    \ upper;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(double l[]) \n{\n    long n = l.length;\n  \
    \  if (n < 1) return 0L;\n    long mid = n / 2L;\n    long lower = l[mid];\n \
    \   long upper = l[n - mid];\n    if (lower > upper) return lower;\n    return\
    \ upper;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(char l[]) \n{\n    long n = l.length;\n    if\
    \ (n < 1) return 0L;\n    long mid = n / 2L;\n    long ", "{\n    long mid = l.length\
    \ / 2;\n    float m = (float)(l[mid]);\n    for(int i = 1; i < l.length; ++i)\n\
    \    {\n        if(l[i] < m)\n        {\n            m = l[i];\n        }\n  \
    \  }\n    return m;\n}", "{\n    long mid = l.length / 2;\n    if (l.length %\
    \ 2 == 1)\n        return std.math.mid(l, mid);\n    \n    float m = std.math.mid(l,\
    \ mid);\n    float m2 = std.math.mid(l, mid + 1);\n    \n    if (m < m2)\n   \
    \     return m;\n    \n    return m2;\n}", "{\n    long mid = l.length / 2;\n\
    \    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n   \
    \ float d = (a + b + c) / 3;\n    return d;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c) / 3;\n    return d;\n}\n/*\n\
    Return median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n\
    \    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\n\
    float median(double l[]) \n{\n    long mid = l.length / 2;\n    float a = l[mid];\n\
    \    float b = l[mid-1];\n    float c = l[mid+1];\n    float d = (a + b + c) /\
    \ 3;\n    return d;\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n    long mid = l.length\
    \ / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n    float c = l[mid+1];\n\
    \    float d = (a + b + c) / 3;\n    return d;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    long mid = l.length / 2;\n    float a = l[mid];\n    float b = l[mid-1];\n\
    \    float c = l[mid+1];\n    float d = (a + b + c) / 3;\n    return d;\n}", "{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m)\n        {\n         \
    \   m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m)\n        {\n         \
    \   m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m)\n        {\n         \
    \   m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m)\n        {\n         \
    \   m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float l[]) \n{\n\
    \    int n = l.length;\n    if (n < 1) return 0;\n    float m = l[0];\n    for\
    \ (int i = 1; i < n; ++i)\n    {\n        if (l[i] < m)\n        {\n         \
    \   m = l[i];\n        }\n    }\n    return m;\n}\n/*\nReturn median of elements\
    \ in the list l.\n    >>> median([3", "{\n    long med = std.math.median(l);\n\
    \    return med;\n}", "{\n    long med = std.math.median(l);\n    return med;\n\
    }", "{\n    long mid = l.length / 2;\n    float leftMedian = median(l);\n    float\
    \ rightMedian = median(l.subarray(0, mid));\n    return std.math.max(leftMedian,\
    \ rightMedian);\n}", "{\n    long mid = l.length / 2;\n    float m = (float)l[mid];\n\
    \    for(int i = mid; i < l.length; ++i)\n    {\n        if(l[i] < m)\n      \
    \  {\n            m = l[i];\n        }\n    }\n    return m;\n}", "{\n\tlong mid\
    \ = l.length / 2;\n\tfloat m = (float)l[mid];\n\tfor (int i = 0; i < mid; i++)\n\
    \t{\n\t\tm = (float)l[i] + (float)m;\n\t}\n\treturn m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n\tfloat mid = l.length / 2;\n\tfloat m = (float)l[mid];\n\tfor (int\
    \ i = 0; i < mid; i++)\n\t{\n\t\tm = (float)l[i] + (float)m;\n\t}\n\treturn m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n  \
    \  \n*/\nfloat median(double l[]) \n{\n\tdouble mid = l.length / 2;\n\tdouble\
    \ m = (double)l[mid];\n\tfor (int i = 0; i < mid; i++)\n\t{\n\t\tm = (double)l[i]\
    \ + (double)m;\n\t}\n\treturn m;\n}\n/*\nReturn median of elements in the list\
    \ l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L,\
    \ 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long l[]) \n{\n\tlong\
    \ mid = l.length / 2;\n\tlong m = (long)l[mid];\n\tfor (int i = 0; i < mid; i++)\n\
    \t{\n\t\tm = (long)l[i] + (long)m;\n\t}\n\treturn m;\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(float\
    \ l[]) \n{\n\tfloat mid = l.length / 2;\n\tfloat m = (float)l[mid];\n\tfor (int\
    \ i = 0; i < mid; i++)\n\t{\n\t\tm = (float)l[i] + (float)m;\n\t}\n\treturn m;\n\
    }\n/*\nReturn median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> median", "{\n    long mid = l.length / 2;\n    float midVal\
    \ = l[mid];\n    float leftMedian = median(l, 0, mid);\n    float rightMedian\
    \ = median(l, mid+1, l.length);\n    return midVal + (leftMedian + rightMedian)/2;\n\
    }\n</code>\n<|/ a tags=median,algorithm,c++ |>\n<| c |>\nThis doesn't work if\
    \ the list is empty. Try it out with an empty list.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work because `median` returns `float` but `midVal` is `long`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the problem you mentioned, but I still think this algorithm is\
    \ too slow for large lists.\n<|/ c |>\n<| c |>\nI tested it on a list of size\
    \ 10^6 and it took about a minute to complete. Not bad.\n<|/ c |>\n<| c |>\nI\
    \ tested it on a list of size 10^7 and it took about a minute to complete. Not\
    \ bad.\n<|/ c |>\n<| a tags=median,algorithm,c++ |>\nI wrote a solution in Java\
    \ that uses recursion to find the median of a list of numbers. I used the median\
    \ of medians algorithm to find the median of the list. \n<code>\npublic double\
    \ findMedian(List<Double> list) {\n    double median;\n    if (list.size() % 2\
    \ == 0) {\n        median = findMedianOfMedians(list);\n    } else {\n       \
    \ median = findMedianOfMedians(list, list.size() / 2);\n    }\n    return median;\n\
    }", "{\n\tlong l = std.math.toInt(l);\n\t\n\tif (l % 2 == 0)\n\t\treturn std.math.mid(l,\
    \ l / 2);\n\telse\n\t\treturn std.math.mid(l / 2, l);\n}", "{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    long mid = n / 2;\n    float left = 0;\n    float\
    \ right = 0;\n    float median = 0;\n    float leftMedian = 0;\n    float rightMedian\
    \ = 0;\n    float medianLeft = 0;\n    float medianRight = 0;\n    float medianLeftMedian\
    \ = 0;\n    float medianRightMedian = 0;\n    float leftMedianLeft = 0;\n    float\
    \ leftMedianRight = 0;\n    float rightMedianLeft = 0;\n    float rightMedianRight\
    \ = 0;\n    float medianLeftLeft = 0;\n    float medianLeftRight = 0;\n    float\
    \ medianRightLeft = 0;\n    float medianRightRight = 0;\n    float medianLeftLeftMedian\
    \ = 0;\n    float medianLeftRightMedian = 0;\n    float medianRightLeftMedian\
    \ = 0;\n    float medianRightRightMedian = 0;\n    float medianLeftLeftLeft =\
    \ 0;\n    float medianLeftLeftRight = 0;\n    float medianLeftRightLeft = 0;\n\
    \    float medianRightLeftLeft = 0;\n    float medianRightRightLeft = 0;\n   \
    \ float medianLeftLeftLeftMedian = 0;\n    float medianLeftLeftRightMedian = 0;\n\
    \    float medianLeftRightLeftMedian = 0;\n    float medianRightLeftLeftMedian\
    \ = 0;\n    float medianRightRightLeftMedian = 0;\n    float medianLeftLeftLeftLeft\
    \ = 0;\n    float medianLeftLeftRightLeft = 0;\n    float medianLeftRightRightLeft\
    \ = 0;\n    float medianRightLeftLeftLeft = 0;\n    float medianRightRightLeftLeft\
    \ = 0;\n    float medianRightRightRightLeft = 0;\n    float medianLeftLeftLeftLeftMedian\
    \ = 0;\n    float medianLeftLeftRightLeftMedian = 0;\n    float medianLeftRightRightLeftMedian\
    \ = 0;\n    float medianRightLeftRightLeftMedian = 0;\n    float medianRightRightRightLeftMedian\
    \ = 0;\n    float medianLeftLeftLeftLeftLeft = 0;\n    float medianLeftLeftRightLeft\
    \ = 0;\n    float medianLeftRightRightLeft = 0;\n    float medianRightLeftRightLeft\
    \ = 0;\n    float medianRightRightRightLeft = 0;\n    float medianLeftLeftLeftLeftLeftMedian\
    \ = 0;\n    float medianLeftLeftRightLeftMedian = 0;\n    float medianLeftRightRightLeftMedian\
    \ = 0;\n    float medianRightLeftRightLeftMedian = 0;\n    float medianRightRightRightLeftMedian\
    \ = 0;\n    float medianLeftLeftLeftLeftLeft = 0;\n    float medianLeftLeftRightLeft\
    \ = 0;\n    float medianLeftRightRightLeft = 0;\n    float medianRightLeftRightLeft\
    \ = 0;", "{\n\tlong med = std.math.median(l);\n\treturn med;\n}", "{\n    long\
    \ mid = l.length / 2;\n    float median;\n    if (l.length % 2 == 0)\n    {\n\
    \        median = std.math.mid(l, 0, mid);\n    }\n    else\n    {\n        median\
    \ = std.math.mid(l, mid, l.length);\n    }\n    return median;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(long l[]) \n{\n    long mid = l.length / 2;\n    float median;\n    if\
    \ (l.length % 2 == 0)\n    {\n        median = std.math.mid(l, 0, mid);\n    }\n\
    \    else\n    {\n        median = std.math.mid(l, mid, l.length);\n    }\n  \
    \  return median;\n}\n/*\nReturn median of elements in the list l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float l[]) \n{\n    float mid = l.length / 2;\n\
    \    float median;\n    if (l.length % 2 == 0)\n    {\n        median = std.math.mid(l,\
    \ 0, mid);\n    }\n    else\n    {\n        median = std.math.mid(l, mid, l.length);\n\
    \    }\n    return median;\n}\n/*\nReturn median of elements in the list l.\n\
    \    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    15.0\n    \n*/\nfloat median(double l[]) \n{\n    double mid\
    \ = l.length / 2;\n    double median;\n    if (l.length % 2 == 0)\n    {\n   \
    \     median = std.math.mid(l, 0, mid);\n    }\n    else\n    {\n        median\
    \ = std.math.mid(l, mid, l.length);\n    }\n    return median;\n}\n/*\nReturn\
    \ median of elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n  \
    \  3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat\
    \ median(long l[], int len"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
