name: HumanEval_145_order_by_points
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function which\
  \ sorts the given list of integers\n    in ascending order according to the sum\
  \ of their digits.\n    Note: if there are several items with similar sum of their\
  \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
  \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
  \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
  \ nums) \n"
tests: "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
  \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
  \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
  \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L,\
  \ -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
  \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[nums.length];\n    int index = 0;\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result,\
    \ 0, index);\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe question\
    \ was about sorting an array of integers based on their sum, not their digits.\
    \ Your solution doesn't do that.\n<|/ c |>\n<| c |>\nI thought the question was\
    \ about sorting an array of integers based on their sum, not their digits. I edited\
    \ my answer to reflect that.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ an array of integers based on their sum, not their digits. Your solution doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nI edited my answer to reflect that. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nThe question was about sorting an array\
    \ of integers based on their sum, not their digits. Your solution doesn't do that.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result,\
    \ (a, b) -> {\n        int cmp = a.compareTo(b);\n        if(cmp != 0)\n     \
    \       return cmp;\n        return a.compareTo(b);\n    });\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26859068)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He wants to sort a list\
    \ of numbers in ascending order according to the sum of their digits. He also\
    \ stated that he was having trouble with the sorting algorithm. He also stated\
    \ that he was having trouble with the sorting algorithm. He also stated that he\
    \ was having trouble with the sorting algorithm. He also stated that he was having\
    \ trouble with the sorting algorithm. He also stated that he was having trouble\
    \ with the sorting algorithm. He also stated that he was having trouble with the\
    \ sorting algorithm. He also stated that he was having trouble with the sorting\
    \ algorithm. He also stated that he was having trouble with the sorting algorithm.\
    \ He also stated that he was having trouble with the sorting algorithm. He also\
    \ stated that he was having trouble with the sorting algorithm. He also stated\
    \ that he was having trouble with the sorting algorithm. He also stated that he\
    \ was having trouble with the sorting algorithm. He also stated that he was having\
    \ trouble with the sorting algorithm. He also stated that he was having trouble\
    \ with the sorting algorithm. He also stated that he was having trouble with the\
    \ sorting algorithm. He also stated that he was having trouble with the sorting\
    \ algorithm. He also stated that he was having trouble with the sorting algorithm.\
    \ He also stated that he was having trouble with the sorting algorithm. He also\
    \ stated that he was having trouble with the sorting algorithm. He also stated\
    \ that he was having trouble with the sorting algorithm. He also stated that he\
    \ was having trouble with the sorting algorithm. He also stated that he was having\
    \ trouble with the sorting algorithm. H", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this would\
    \ not work if you had negative numbers. For example, `order_by_points([1L, 11L,\
    \ -1L, -11L, -12L])` would return `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -11L, 1L, -12L]`.\n<|/ c |>\n<| c |>\nI believe this would not work if\
    \ you had negative numbers. For example, `order_by_points([1L, 11L, -1L, -11L,\
    \ -12L])` would return `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -11L,\
    \ 1L, -12L]`.\n<|/ c |>\n<| c |>\nI believe this would not work if you had negative\
    \ numbers. For example, `order_by_points([1L, 11L, -1L, -11L, -12L])` would return\
    \ `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -11L, 1L, -12L]`.\n<|/\
    \ c |>\n<| c |>\nI believe this would not work if you had negative numbers. For\
    \ example, `order_by_points([1L, 11L, -1L, -11L, -12L])` would return `[-1L, -11L,\
    \ 1L, -12L, 11L]` instead of `[-1L, -11L, -11L, 1L, -12L]`.\n<|/ c |>\n<| c |>\n\
    I believe this would not work if you had negative numbers. For example, `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` would return `[-1L, -11L, 1L, -12L, 11L]` instead of\
    \ `[-1L, -11L, -11L, 1L, -12L]`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum = sum + nums[i];\n\
    \        if(sum < 0)\n        {\n            sum = -sum;\n            j = i;\n\
    \        }\n        else if(sum > 0)\n        {\n            sum = sum - nums[i];\n\
    \            i = j;\n        }\n        else if(sum == 0)\n        {\n       \
    \     result[j] = nums[i];\n            i++;\n            j++;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case to the answer.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L,\
    \ -12L])`\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test case\
    \ to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ long[] sums = new long[nums.length];\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sums[i] = nums[i]%10;\n    }\n    \n    Arrays.sort(sums);\n\
    \    \n    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i]/10;\n\
    \        result[i] += sums[i];\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test case to the answer. Maybe I misunderstood the question.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\
    \ Maybe I misunderstood the question.\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        if(sum > 0)\n        {\n            result[j]\
    \ = sum;\n            j++;\n            sum = 0;\n        }\n        i++;\n  \
    \  }\n    while(j < result.length)\n    {\n        result[j] = sum;\n        j++;\n\
    \        sum = 0;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. Your solution is very similar to mine but you\
    \ used a while loop instead of a for loop. My solution was using a for loop. Your\
    \ solution also uses two while loops instead of one. Your solution also uses two\
    \ for loops instead of one. My solution uses one for loop and one while loop.\
    \ Your solution uses one for loop and one while loop. My solution uses one for\
    \ loop and one while loop. My solution uses one for loop and one while loop. My\
    \ solution uses one for loop and one while loop. My solution uses one for loop\
    \ and one while loop. My solution uses one for loop and one while loop. My solution\
    \ uses one for loop and one while loop. My solution uses one for loop and one\
    \ while loop. My solution uses one for loop and one while loop. My solution uses\
    \ one for loop and one while loop. My solution uses one for loop and one while\
    \ loop. My solution uses one for loop and one while loop. My solution uses one\
    \ for loop and one while loop. My solution uses one for loop and one while loop.\
    \ My solution uses one for loop and one while loop. My solution uses one for loop\
    \ and one while loop. My solution uses one for loop and one while loop. My solution\
    \ uses one for loop and one while loop. My solution uses one for loop and one\
    \ while loop. My solution uses one for loop and one while loop. My solution uses\
    \ one for loop and one while loop. My solution uses one for loop and one while\
    \ loop. My solution uses one for loop and one while loop. My solution uses one\
    \ for loop and one while loop. My solution uses one for loop and one while loop.\
    \ My solution uses one for loop and one while loop. My solution uses one for loop\
    \ and one while loop. My solution uses one for loop and one while loop. My solution\
    \ uses one for loop and one while loop. My solution uses one for loop and one\
    \ while loop. My solution uses one for loop and one while loop. My solution uses ",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(long num : nums)\n    {\n        sum += num;\n        result[i] = sum;\n\
    \        i++;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n\
    <|/ a tags=algorithm,sorting,arrays,java |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers in the list. For example, `order_by_points([-1L, -11L,\
    \ 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L,\
    \ -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I was\
    \ thinking about it too much and forgot about it. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the list.\
    \ For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns `[-1L, -11L,\
    \ 1L, -12L, 11L]` instead of `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\n\
    I fixed it by adding `if (num < 0) num *= -1;` before `sum += num;`\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have negative numbers in the list. For example,\
    \ `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L,\
    \ 11L]` instead of `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| a dscore=5 |>\n\
    I believe this to be the most efficient solution:\n<code>\npublic static int[]\
    \ sortByDigits(int[] arr) {\n    int[] result = new int[arr.length];\n    int\
    \ sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,arrays,java |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers in the list. For example, `sortByDigits([-1L,\
    \ -11L, 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nThis ", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    int sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int\
    \ j = i + 1; j < nums.length; j++)\n        {\n            if(nums[i] + nums[j]\
    \ == sum)\n            {\n                long temp = nums[i];\n             \
    \   nums[i] = nums[j];\n                nums[j] = temp;\n            }\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java\
    \ |>\n<| c |>\nThis solution is O(n^2) in the worst case. Sorting can be done\
    \ in O(nlogn) by using a radix sort or counting sort.\n<|/ c |>\n<| c |>\nYes,\
    \ but this solution doesn't use any sorting algorithm, it just sorts the numbers\
    \ by their sum.\n<|/ c |>\n<| c |>\nYes, but this solution doesn't use any sorting\
    \ algorithm, it just sorts the numbers by their sum.\n<|/ c |>\n<| c |>\nYes,\
    \ but this solution doesn't use any sorting algorithm, it just sorts the numbers\
    \ by their sum.\n<|/ c |>\n<| c |>\nYes, but this solution doesn't use any sorting\
    \ algorithm, it just sorts the numbers by their sum.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n        return std.math.abs(b)\
    \ - std.math.abs(a);\n    });\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was\
    \ about sorting a list of integers according to their sum, not their digits. Your\
    \ solution does not take that into account.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting a list of integers according to their sum, not their digits. Your\
    \ solution does not take that into account.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting a list of integers according to their sum, not their digits. Your\
    \ solution does not take that into account.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting a list of integers according to their sum, not their digits. Your\
    \ solution does not take that into account.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting a list of integers according to their sum, not their digits. Your\
    \ solution does not take that into account.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n \
    \   return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java |>\n\
    <| a tags=arrays,sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum = sum + nums[i];\n\
    \        while(j < nums.length && sum > 0)\n        {\n            sum = sum -\
    \ nums[j];\n            j++;\n        }\n        if(sum < 0)\n        {\n    \
    \        sum = 0;\n        }\n        result[i] = sum;\n        i++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int[] digits = new int[nums.length];\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ digits[i] = nums[i] % 10;\n        result += digits[i];\n        nums[i] /=\
    \ 10;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(digits[i]\
    \ != 0)\n        {\n            int pos = 0;\n            for(int j = i; j < nums.length;\
    \ j++)\n            {\n                if(digits[j] == 0)\n                {\n\
    \                    digits[j] = digits[i];\n                    result += digits[j];\n\
    \                    nums[j] /= 10;\n                    pos = j;\n          \
    \          break;\n                }\n            }\n            if(pos != i)\n\
    \            {\n                swap(nums, i, pos);\n                swap(digits,\
    \ i, pos);\n                swap(result, i, pos);\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code does not\
    \ work if there are two or more numbers with the same sum. For example, `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -11L, 1L, -12L]`.\n<|/ c |>\n<| c |>\nI tested it and it works fine for\
    \ me. Can you give me an example where it fails?\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works fine for me. Can you give me an example where it fails?\n\
    <|/ c |>\n<| c |>\nI tested it again and it works fine for me. Can you give me\
    \ an example where it fails?\n<|/ c |>\n<| c |>\nI tested it again and it works\
    \ fine for me. Can you give me an example where it fails?\n<|/ c |>\n<| a tags=algorithm,sorting,c#\
    \ |>\nI wrote a solution in Java that uses Arrays.sort and Arrays.binarySearch\
    \ to sort the array in ascending order and to find the index of the element in\
    \ the array that has the highest sum.\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    int[] sums = new int[nums.length];\n\
    \    int sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        sums[i] = sum;\n    }\n    Arrays.sort(sums);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        result[i] = sums[i];\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. What do you mean by \"doesn't work\"\
    ? It returns `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    int index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sums[i] = nums[i]%10;\n        for(int\
    \ j = 0; j < sums.length; j++)\n        {\n            if(sums[j] == sums[i])\n\
    \            {\n                index = j;\n                break;\n         \
    \   }\n        }\n        result[i] = nums[index];\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nI didn't get you. Can you\
    \ please elaborate?\n<|/ c |>\n<| c |>\nIf you have two numbers with the same\
    \ sum, your code will output the wrong order. For example, `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` will output `[-1L, -11L, 1L, -12L, 11L]` instead of\
    \ `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nI see. Thanks for pointing\
    \ that out. I'll fix it.\n<|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(long num : nums)\n    {\n        sum += num;\n\
    \        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\n\
    This doesn't work if there are multiple items with the same sum.\n<|/ c |>\n<|\
    \ c |>\nYes, I noticed that and fixed it. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are multiple items with the same sum.\n<|/\
    \ c |>\n<| c |>\nYes, I noticed that and fixed it. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    int j = 0;\n    long sum = 0;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[j]\
    \ = sum;\n        j++;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,sorting,algorithm |>\n<| c |>\nThis doesn't work if\
    \ there are multiple items with the same sum.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. The OP said that he wants them to be ordered\
    \ based on their index in original list. He didn't say that he wants them to be\
    \ ordered based on their sum.\n<|/ c |>\n<| c |>\nYes, I missed that part. Sorry.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are multiple items with the same\
    \ sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. The OP\
    \ said that he wants them to be ordered based on their index in original list.\
    \ He didn't say that he wants them to be ordered based on their sum.\n<|/ c |>\n\
    <| a tags=java,sorting,algorithm |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI believe this solution is O(n^2) because of the nested\
    \ loop. Sorting can be done in O(nlogn) using radix sort or bucket sort. Also\
    \ the question states that he wants to sort by sum of digits, not by their absolute\
    \ value.\n<|/ c |>\n<| c |>\nYes, you are right. I missed that part. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ ++i)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,java,arrays |>\n<| c |>\n\
    This doesn't answer the question. OP wants to sort by sum of digits, not by their\
    \ absolute value.\n<|/ c |>\n<| c |>\nI agree with you, my answer was more to\
    \ show that it is possible to sort by sum of digits. I edited my answer to make\
    \ it more clear.\n<|/ c |>\n<| a tags=sorting,java,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int[] digits = new int[nums.length];\n\
    \    int sum = 0;\n    for (int i = 0; i < nums.length; ++i) {\n        digits[i]\
    \ = nums[i] % 10;\n        sum += digits[i];\n    }\n    for (int i = 0; i < nums.length;\
    \ ++i) {\n        result[i] = digits[i];\n        result[i] += sum;\n    }\n \
    \   Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,java\
    \ |>\n<| c |>\nThis is not the correct solution. `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` which is not the correct\
    \ order. `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L,\
    \ -12L, 11L]` which is not the correct order. `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` which is not the correct\
    \ order. `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L,\
    \ -12L, 11L]` which is not the correct order. `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` which is not the correct\
    \ order. `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L,\
    \ -12L, 11L]` which is not the correct order. `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` which is not the correct\
    \ order. `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L,\
    \ -12L, 11L]` which is not the correct order. `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])` returns `[-1L, -11L, 1L, -12L, 11L]` which is not the correct\
    \ order. `order_by_points([1L, 11L, -1L, -11L, -12L])` returns `[-1L, -11L, 1L,\
    \ -12L, 11L]` which is not the correct order. `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])` returns `[-1L, -11L, 1L, -12L, ", "{\n    long[] result = new\
    \ long[nums.length];\n    int[] sums = new int[nums.length];\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i]%10;\n        result[i]\
    \ = nums[i]/10;\n    }\n    Arrays.sort(sums);\n    for(int i = 0; i < sums.length;\
    \ i++)\n    {\n        for(int j = 0; j < sums.length; j++)\n        {\n     \
    \       if(sums[i] == sums[j])\n            {\n                Arrays.sort(result,\
    \ i, j);\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,java |>\n<| c |>\n\
    This doesn't work if there are two numbers with the same sum.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. I tested it before posting it. It works. I tested it on [1L,\
    \ 11L, -1L, -11L, -12L] and got [-1L, -11L, 1L, -12L, 11L]\n<|/ c |>\n<| c |>\n\
    I tested it on [1L, 11L, -1L, -11L, -12L] and got [-1L, -11L, 1L, -12L, 11L]\n\
    <|/ c |>\n<| c |>\nI tested it on [1L, 11L, -1L, -11L, -12L] and got [-1L, -11L,\
    \ 1L, -12L, 11L]\n<|/ c |>\n<| c |>\nI tested it on [1L, 11L, -1L, -11L, -12L]\
    \ and got [-1L, -11L, 1L, -12L, 11L]\n<|/ c |>\n<| a tags=sorting,algorithm,arrays,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] nums = {1, 11,\
    \ -1, -11, -12};\n    int[] nums2 = {1, 11, -1, -11, -12};\n    int[] nums3 =\
    \ {1, 11, -1, -11, -12};\n    int[] nums4 = {1, 11, -1, -11, -12};\n    int[]\
    \ nums5 = {1, 11, -1, -11, -12};\n    int[] nums6 = {1, 11, -1, -11, -12};\n \
    \   int[] nums7 = {1, 11, -1, -11, -12};\n    int[] nums8 = {1, 11, -1, -11, -12};\n\
    \    int[] nums9 = {1, 11, -1, -11, -12};\n    int[] nums10 = {1, 11, -1, -11,\
    \ -12};\n    int[] nums11 = {1, 11, -1, -11, -12};\n    int[] nums12 = {1, 11,\
    \ -1, ", "{\n    long[] result = new long[nums.length];\n    int index = 0;\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] result = new long[nums.length];\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    long sum = 0;\n    \n    while (i < nums.length)\n\
    \    {\n        sum = sum + nums[i];\n        if (sum < 0)\n        {\n      \
    \      sum = -sum;\n        }\n        \n        while (j < nums.length && sum\
    \ == nums[j])\n        {\n            j++;\n        }\n        \n        if (j\
    \ == nums.length)\n        {\n            result[i] = sum;\n            i++;\n\
    \        }\n        else\n        {\n            result[i] = j;\n            i++;\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,sorting,algorithm |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;", "{\n    long[] result = new long[nums.length];\n    int index\
    \ = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n \
    \       sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        if(sum > 0)\n        {\n            int pos = i;\n            for(int\
    \ j = i; j < nums.length; j++)\n            {\n                if(sum > nums[j])\n\
    \                {\n                    pos = j;\n                    break;\n\
    \                }\n            }\n            swap(nums, i, pos);\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] result = new long[nums.length];\n    int index\
    \ = 0;\n    int sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n  \
    \      sum += nums[i];\n        result[index++] = sum;\n    }\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        long temp = sum;\n        sum = 0;\n\
    \        for(int j = 0; j < nums.length; j++)\n        {\n            if(j !=\
    \ i)\n            {\n                sum += nums[j];\n                if(sum >\
    \ temp)\n                {\n                    temp = sum;\n                }\n\
    \            }\n        }\n        result[index++] = temp;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it on `[1L, 11L, -1L, -11L, -12L]` and it returns\
    \ `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it on `[1L, 11L, -1L, -11L, -12L]` and it returns `[-1L, -11L, 1L, -12L, 11L]`\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two or more numbers with the same\
    \ sum.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i\
    \ < nums.length)\n    {\n        sum += nums[i];\n        result[j++] = sum;\n\
    \        i++;\n    }\n    while(j < result.length)\n    {\n        sum -= result[j];\n\
    \        result[j++] = sum;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| a tags=sorting,arrays,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    long[] result = new long[nums.length];\n\
    \    int[] digits = new int[nums.length];\n    long sum = 0;\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        digits[i] = nums[i] % 10;\n       \
    \ sum += digits[i];\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = digits[i];\n        result[i] += sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just added the\
    \ test case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nI tested it again and it doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nI tested it again and it doesn't\
    \ work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 11, -1, -11, -12};\n    Arrays.sort(arr);\n   \
    \ System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a dscore=4 |>\n<|\
    \ c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis code doesn't work if there are two or more numbers with\
    \ the same sum. For example, `order_by_points([1L, 11L, -1L, -11L, -12L])` returns\
    \ `[-11L, 1L, -12L, 11L, -1L]`.\n<|/ c |>\n<| c |>\nIt works, because `Arrays.sort()`\
    \ sorts array in ascending order. `-1L` is greater than `-11L`, so `-11L` is placed\
    \ before `1L`.\n<|/ c |>\n<| c |>\nI see. But it would be better to sort them\
    \ in descending order. `-1L` is greater than `-11L`, so `-11L` is placed before\
    \ `1L`.\n<|/ c |>\n<| c |>\nI agree, thanks for pointing that out. I updated my\
    \ answer.\n<|/ c |>\n<| a tags=algorithm,sorting,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n \
    \   return result;\n}\n</code>\n<|/ a tags=java,sorting,arrays |>\n<| a |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,algorithm,java |>\n<| c |>\nThis doesn't work if there are two\
    \ or more numbers with the same sum.\n<|/ c |>\n<| c |>\nIt does work if there\
    \ are two or more numbers with the same sum. Just sort them by their index in\
    \ original list.\n<|/ c |>\n<| c |>\nIt does work if there are two or more numbers\
    \ with the same sum. Just sort them by their index in original list.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two or more numbers with the same sum. Just\
    \ sort them by their index in original list.\n<|/ c |>\n<| c |>\nIt does work\
    \ if there are two or more numbers with the same sum. Just sort them by their\
    \ index in original list.\n<|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI believe this would fail if\
    \ you had a negative number in the list with two or more digits. For example,\
    \ `order_by_points([1L, 11L, -1L, -11L, -12L])` would return `[-1L, -11L, 1L,\
    \ -12L, 11L]` instead of `[-1L, -11L, 1L, -12L, 11L, -12L]`.\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I've updated the code so that it works with negative numbers\
    \ too.\n<|/ c |>\n<| a tags=sorting,java,arrays |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n\
    \        return std.math.compare(sum, std.math.abs(b - sum));\n    });\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L,\
    \ 11L]` instead of `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nI added a\
    \ version that works with negative numbers. I tested it on `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` and it returns `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n\
    <| c |>\nI added a version that works with negative numbers. I tested it on `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` and it returns `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n\
    <| c |>\nI added a version that works with negative numbers. I tested it on `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` and it returns `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n\
    <| c |>\nI added a version that works with negative numbers. I tested it on `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` and it returns `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c |>\n\
    <| a dscore=2 |>\nI wrote a solution that uses only std.algorithm.sort:\n<code>\n\
    import std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.stdio;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,algorithm,java |>\n<| c |>\nThis is not an optimal solution.\
    \ Sorting requires O(n log n) time. Your solution requires O(n^2) time. Sorting\
    \ requires O(n^2) time. Your solution requires O(n^2) time. Sorting requires O(n^2)\
    \ time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires\
    \ O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting\
    \ requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2)\
    \ time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires\
    \ O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting\
    \ requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2)\
    \ time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires\
    \ O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting\
    \ requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2)\
    \ time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires\
    \ O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting\
    \ requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2)\
    \ time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires\
    \ O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting\
    \ requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires O(n^2)\
    \ time. Sorting requires O(n^2) time. Sorting requires O(n^2) time. Sorting requires\
    \ O(n^2) time", "{\n    long[] result = new long[nums.length];\n    long[] sums\
    \ = new long[nums.length];\n    for(int i = 0; i < nums.length; ++i)\n    {\n\
    \        sums[i] = nums[i]%10;\n    }\n    Arrays.sort(sums);\n    for(int i =\
    \ 0; i < nums.length; ++i)\n    {\n        result[i] = sums[i] + nums[i];\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while\
    \ (i < nums.length)\n    {\n        sum += nums[i];\n        result[j] = sum;\n\
    \        i++;\n        j++;\n    }\n    \n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26815373)\n<|/ c\
    \ |>\n<| c |>\nThis does provide an answer to the question. He asked how to sort\
    \ a list of numbers in ascending order according to the sum of their digits. He\
    \ also provided a solution that does exactly that. He also provided a link to\
    \ the documentation for Arrays.sort. He also provided a link to the documentation\
    \ for Arrays.sort. He also provided a link to the documentation for Arrays.sort.\
    \ He also provided a link to the documentation for Arrays.sort. He also provided\
    \ a link to the documentation for Arrays.sort. He also provided a link to the\
    \ documentation for Arrays.sort. He also provided a link to the documentation\
    \ for Arrays.sort. He also provided a link to the documentation for Arrays.sort.\
    \ He also provided a link to the documentation for Arrays.sort. He also provided\
    \ a link to the documentation for Arrays.sort. He also provided a link to the\
    \ documentation for Arrays.sort. He also provided a link to the documentation\
    \ for Arrays.sort. He also provided a link to the documentation for Arrays.sort.\
    \ He also provided a link to the documentation for Arrays.sort. He also provided\
    \ a link to the documentation for Arrays.sort. He also provided a link to the\
    \ documentation for Arrays.sort. He also provided a link to the documentation\
    \ for Arrays.sort. He also provided a link to the documentation for Arrays.sort.\
    \ He also provided a link to the documentation for Arrays.sort. He also provided\
    \ a link to the documentation for Arrays.sort. He also provided a link to the\
    \ documentation for Arrays.sort. He also provided a link to the documentation\
    \ for Arrays.sort. He also provided a link to the documentation for Arrays.sort.\
    \ He also provided a link to the documentation for Arrays.sort. He also provided\
    \ a link to the documentation for Arrays.sort. He also provided a link to the\
    \ documentation for Arrays.sort. He also provided a link to the documentation ",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI believe this solution will\
    \ fail for negative numbers. Try `order_by_points([-1L, -11L, 1L, -12L, 11L])`\n\
    <|/ c |>\n<| c |>\nYes, I believe it will. I've added a note to my answer.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, 0, index);\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do it without using an extra array. Maybe using\
    \ some kind of \"sort by key\" function?\n<|/ c |>\n<| c |>\nI added a solution\
    \ without an extra array\n<|/ c |>\n<| c |>\nI added a solution without an extra\
    \ array\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(long n : nums)\n    {\n        sum += n;\n        result[i] = sum;\n\
    \        i++;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,java |>\n<| c |>\nThis is not an answer to the question.\
    \ He wants to sort by sum of digits, not by their absolute value.\n<|/ c |>\n\
    <| c |>\nYes, I missed that part. Thanks for pointing it out. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nThis is not an answer to the question. He wants to sort by\
    \ sum of digits, not by their absolute value.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that part. Thanks for pointing it out. I'll edit my answer.\n<|/ c |>\n<| c\
    \ |>\nThis is not an answer to the question. He wants to sort by sum of digits,\
    \ not by their absolute value.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(int j=0; j<nums.length; j++)\n    {\n        sum += nums[j];\n      \
    \  result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,sorting,java |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(int j=0; j<nums.length; j++)\n   \
    \ {\n        sum += nums[j];\n        result[i] = sum;\n        i++;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;", "{\n \
    \   long[] result = new long[nums.length];\n    int index = 0;\n    long sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n \
    \   return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n \
    \   {\n        sum += nums[i];\n        result[j] = sum;\n        i++;\n     \
    \   j++;\n    }\n    while(j < result.length)\n    {\n        result[j] = result[j-1];\n\
    \        j++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int sum = 0;\n    while (i < nums.length)\n    {\n\
    \        sum += nums[i];\n        while (j < nums.length && sum > 0)\n       \
    \ {\n            sum += nums[j];\n            j++;\n        }\n        result[i]\
    \ = sum;\n        i++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ updated the answer to take care of negative numbers.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `order_by_points([-1L, -11L, 1L, -12L,\
    \ 11L])`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer\
    \ to take care of negative numbers.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        if(sum > 0)\n        {\n            result[j++]\
    \ = sum;\n            sum = 0;\n        }\n        i++;\n    }\n    while(j <\
    \ result.length)\n    {\n        result[j--] = nums[i];\n        i++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] result = new long[nums.length];\n    long sum\
    \ = 0;\n    int i = 0;\n    for(; i < nums.length; ++i)\n    {\n        sum +=\
    \ nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have\
    \ a negative number in the list. For example, `order_by_points([-1L, -11L, 1L,\
    \ -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]`, which is not the correct\
    \ order.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a negative number in the list.\
    \ For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns `[-1L, -11L,\
    \ 1L, -12L, 11L]`, which is not the correct order.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out. :)\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nI believe this solution will\
    \ fail for negative numbers, since it will sort them in the wrong order. E.g.\
    \ `order_by_points([-1L, -11L, 1L, -12L, 11L])` will give `[-1L, -11L, 1L, -12L,\
    \ 11L]`\n<|/ c |>\n<| c |>\nYes, you are right. I've fixed my answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    long max = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n        }\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n        {\n   \
    \         result[i] = max;\n            max = sum;\n        }\n        else\n\
    \        {\n            result[i] = sum;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,sorting |>\n<code>\ndef sort(nums):\n\
    \    sum = 0\n    max = nums[0]\n    for num in nums:\n        sum += num\n  \
    \      if sum > max:\n            max = sum\n    sum = 0\n    for num in nums:\n\
    \        sum += num\n        if sum > max:\n            max = sum\n    sum = 0\n\
    \    for num in nums:\n        sum += num\n        if sum > max:\n           \
    \ max = sum\n    sum = 0\n    for num in nums:\n        sum += num\n        if\
    \ sum > max:\n            max = sum\n    sum = 0\n    for num in nums:\n     \
    \   sum += num\n        if sum > max:\n            max = sum\n    sum = 0\n  \
    \  for num in nums:\n        sum += num\n        if sum > max:\n            max\
    \ = sum\n    sum = 0\n    for num in nums:\n        sum += num\n        if sum\
    \ > max:\n            max = sum\n    sum = 0\n    for num in nums:\n        sum\
    \ += num\n        if sum > max:\n            max = sum\n    sum = 0\n    for num\
    \ in nums:\n        sum += num\n        if sum > max:\n            max = sum\n\
    \    sum = 0\n    for num in nums:\n        sum += num\n        if sum > max:\n\
    \            max = sum\n    sum = 0\n    for num in nums:\n        sum += num\n\
    \        if sum > max:\n            max = sum\n    sum = 0\n    for num in nums:\n\
    \        sum += num\n        if sum > max:\n            max = sum\n    sum = 0\n\
    \    for num in nums:\n        sum += num\n        if sum > max:\n           \
    \ max = sum\n    sum = 0\n    for num in nums:\n        sum += num\n        if\
    \ sum > max:\n            max = sum\n    sum = 0\n    for num in nums:\n     \
    \   sum += num\n        if sum > max:\n            max = sum\n    sum = 0\n  \
    \  for num in nums:\n        sum += num\n        if sum > max:\n            max\
    \ = sum\n    sum = 0\n    for num in nums:\n", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum -= nums[i];\n        result[i]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        index\
    \ = i;\n        for(int j = i + 1; j < nums.length; j++)\n        {\n        \
    \    if(result[j] < result[index])\n            {\n                index = j;\n\
    \            }\n        }\n        swap(nums, i, index);\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;", "{\n\
    \    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a list of negative\
    \ numbers. For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns\
    \ `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -12L, 1L, 11L]`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the problem with negative numbers. Thanks.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. `order_by_points([-1L, -11L,\
    \ 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L,\
    \ -12L, 1L, 11L]`.\n<|/ c |>\n<| c |>\nI fixed the problem with negative numbers.\
    \ Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L,\
    \ -11L, -12L, 1L, 11L]`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis is not the correct\
    \ answer. Your code will sort `[-1L, -11L, 1L, -12L, 11L]` into `[-1L, -11L, 1L,\
    \ -12L, 11L]` instead of `[-1L, -11L, -11L, 1L, -12L]`.\n<|/ c |>\n<| c |>\nThe\
    \ question was to sort by sum of digits, not by their absolute value. The code\
    \ I posted sorts by sum of digits. If you want it sorted by absolute value, just\
    \ swap the sign of the sum.\n<|/ c |>\n<| c |>\nThe question was to sort by sum\
    \ of digits, not by their absolute value. The code I posted sorts by sum of digits.\
    \ If you want it sorted by absolute value, just swap the sign of the sum.\n<|/\
    \ c |>\n<| c |>\nThe question was to sort by sum of digits, not by their absolute\
    \ value. The code I posted sorts by sum of digits. If you want it sorted by absolute\
    \ value, just swap the sign of the sum.\n<|/ c |>\n<| c |>\nThe question was to\
    \ sort by sum of digits, not by their absolute value. The code I posted sorts\
    \ by sum of digits. If you want it sorted by absolute value, just swap the sign\
    \ of the sum.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {1, 11, -1, -12, 11};\n    Arrays.sort(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis is not the correct answer. Your code will sort `[-1L, -11L, 1L,\
    \ -12L, 11L]` into `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -11L,\
    \ 1L, -12L]`.\n<|/ c |>\n<| c |>\nThe question was to sort by sum of digits, not\
    \ by their absolute value. The code I posted sorts by sum of digits. If you want\
    \ it sorted by absolute value, just swap the sign of the sum.\n<|/ c |>\n<| c\
    \ |>\nThe question was to sort by ", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    long sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum = sum + nums[i];\n        if(sum > 0)\n        {\n       \
    \     result[j] = sum;\n            j++;\n            sum = 0;\n        }\n  \
    \      i++;\n    }\n    if(sum > 0)\n    {\n        result[j] = sum;\n       \
    \ j++;\n    }\n    for(int k = 0; k < j; k++)\n    {\n        long tmp = result[k];\n\
    \        result[k] = result[j];\n        result[j] = tmp;\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nI tested it on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` and it works fine.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Can you please post the code you tried?\n<|/ c |>\n<| c |>\nI added\
    \ the code I tried.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(int j=0; j<nums.length; j++)\n    {\n    \
    \    sum += nums[j];\n        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,java |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\n: I didn't say it wouldn't, I said it wouldn't. :-) I didn't say it wouldn't\
    \ work, either. :-)\n<|/ c |>\n<| c |>\n: I didn't say it wouldn't, I said it\
    \ wouldn't. :-) I didn't say it wouldn't, either. :-)\n<|/ c |>\n<| c |>\n: I\
    \ didn't say it wouldn't, I said it wouldn't. :-) I didn't say it wouldn't, either.\
    \ :-)\n<|/ c |>\n<| c |>\n: I didn't say it wouldn't, I said it wouldn't. :-)\
    \ I didn't say it wouldn't, either. :-)\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,sorting |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nIt works, because\
    \ Arrays.sort() sorts the array in ascending order. Just change the return statement\
    \ to return result; and it will work.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nIt works, because\
    \ Arrays.sort() sorts the array in ascending order. Just change the return statement\
    \ to return result; and it will work.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    int j = 0;\n    long sum = 0;\n    while(i\
    \ < nums.length)\n    {\n        sum = 0;\n        while(j < nums.length && nums[j]\
    \ >= 0)\n        {\n            sum += nums[j];\n            j++;\n        }\n\
    \        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int i = 0;\n    int j = 0;\n    long sum = 0;\n\
    \    while(i < nums.length)\n    {\n        sum += nums[i];\n        result[j]\
    \ = sum;\n        i++;\n        j++;\n    }\n    while(j < result.length)\n  \
    \  {\n        result[j] = 0;\n        j++;\n    }\n    for(int k = 0; k < result.length;\
    \ k++)\n    {\n        for(int l = 0; l < nums.length; l++)\n        {\n     \
    \       if(result[k] == nums[l])\n            {\n                nums[l] = -1;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/18376274)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to sort a list of integers\
    \ based on their sum of the digits. I provided a solution that does exactly that.\
    \ He also asked how to do it in O(n) time. He provided a solution that does exactly\
    \ that. He also asked how to do it in O(n) space. He provided a solution that\
    \ does exactly that. He also asked how to do it in O(n) time. He provided a solution\
    \ that does exactly that. He also asked how to do it in O(n) space. He provided\
    \ a solution that does exactly that. He also asked how to do it in O(n) space.\
    \ He provided a solution that does exactly that. He also asked how to do it in\
    \ O(n) space. He provided a solution that does exactly that. He also asked how\
    \ to do it in O(n) space. He provided a solution that does exactly that. He also\
    \ asked how to do it in O(n) space. He provided a solution that does exactly that.\
    \ He also asked how to do it in O(n) space. He provided a solution that does exactly\
    \ that. He also asked how to do it in O(n) space. He provided a solution that\
    \ does exactly that. He also asked how to do it in O(n) space. He provided a solution\
    \ that does exactly that. He also asked how to do it in O(n) space. He provided\
    \ a solution that does exactly that. He also asked how to do it in O(n) space.\
    \ He provided a solution that does exactly that. He also asked how to do it in\
    \ O(n) space. He provided a solution that does exactly that. He also asked how\
    \ to do it in O(n) space. He provided a solution that does exactly that. He also\
    \ asked how to do it in O(n) space. He provided ", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n        return a - b;\n\
    \    });\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,java,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(int j=0; j<nums.length; j++)\n   \
    \ {\n        sum += nums[j];\n        result[i] = sum;\n        i++;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nThis doesn't answer the question at all. He wants to sort by sum\
    \ of digits, not by their absolute value.\n<|/ c |>\n<| c |>\nI believe this answer\
    \ does answer the question, since it sorts by the sum of their digits. I believe\
    \ this answer is the most efficient solution, since it only requires one pass\
    \ over the array.\n<|/ c |>\n<| c |>\nThis answer does not answer the question.\
    \ He wants to sort by sum of digits, not by their absolute value.\n<|/ c |>\n\
    <| c |>\nThe question asks for an efficient solution, which is why I posted this\
    \ answer. He also said that he was looking for a solution that uses less memory\
    \ than my solution, which requires two passes over the array. He also said that\
    \ he was looking for a solution that uses less code than my solution, which requires\
    \ one pass over the array. He also said that he was looking for a solution that\
    \ uses less memory than my solution, which requires one pass over the array. He\
    \ also said that he was looking for a solution that uses less code than my solution,\
    \ which requires one pass over the array. He also said that he was looking for\
    \ a solution that uses less memory than my solution, which requires one pass over\
    \ the array. He also said that he was looking for a solution that uses less memory\
    \ than my solution, which requires one pass over the array. He also said that\
    \ he was looking for a solution that uses less memory than my solution, which\
    \ requires one pass over the array. He also said that he was looking for a solution\
    \ that uses less memory than my solution, which requires one pass over the array.\
    \ He also said that he was looking for a solution that uses less memory than my\
    \ solution, which requires one pass over the array. He also said that he was looking\
    \ for a solution that uses less memory than my solution, which requires one pass\
    \ over the array. He also said that he was looking for a solution that uses less\
    \ memory than my solution, which requires one pass over the array. He also said\
    \ that he was looking for a solution that uses less memory than my solution, which\
    \ requires one pass over the array. He also said that he was looking for a solution\
    \ that uses less memory than my solution, which ", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n        return a.compareTo(b);\n\
    \    });\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n\
    <| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n     \
    \   result[i] = sum;\n    }\n    Arrays.sort(result);\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        index++;\n        if(nums[i] != result[i])\n\
    \        {\n            int temp = result[i];\n            result[i] = nums[index];\n\
    \            nums[index] = temp;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n \
    \   long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n \
    \   int sum = 0;\n    while(i < nums.length)\n    {\n        sum = nums[i++] -\
    \ '0';\n        while(i < nums.length && sum == nums[i++] - '0')\n           \
    \ sum = 0;\n        result[j++] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\nThis is\
    \ not an answer to the question. He wants to know how to sort a list by summing\
    \ its digits. Your answer doesn't do that.\n<|/ c |>\n<| c |>\nI see your point.\
    \ I've updated the answer to include a solution that does that.\n<|/ c |>\n<|\
    \ c |>\nI believe this answer is the best so far. Although it does require a little\
    \ more code than my answer, it does give the correct result and doesn't require\
    \ any extra libraries.\n<|/ c |>\n<| c |>\nI believe this answer is the best so\
    \ far. Although it does require a little more code than my answer, it does give\
    \ the correct result and doesn't require any extra libraries.\n<|/ c |>\n<| c\
    \ |>\nThis answer does not give the correct result for negative numbers. Try it\
    \ with `order_by_points([-1L, -11L, 1L, -12L, 11L])`.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ long sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n    \
    \    sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\n\
    This solution does not work for negative numbers. Try with [-1L, -11L, 1L, -12L,\
    \ 11L]\n<|/ c |>\n<| c |>\nThis solution does not work for negative numbers. Try\
    \ with [-1L, -11L, 1L, -12L, 11L]\n<|/ c |>\n<| c |>\nThis solution does not work\
    \ for negative numbers. Try with [-1L, -11L, 1L, -12L, 11L]\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum = sum + nums[i];\n        if(sum > 0)\n        {\n       \
    \     result[j] = sum;\n            j++;\n            sum = 0;\n        }\n  \
    \      i++;\n    }\n    if(sum > 0)\n    {\n        result[j] = sum;\n       \
    \ j++;\n    }\n    for(int k = 0; k < j; k++)\n    {\n        long tmp = result[k];\n\
    \        result[k] = result[j];\n        result[j] = tmp;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a dscore=1 |>\n<code>\npublic\
    \ static void Sort(int[] array)\n{\n    int[] temp = new int[array.Length];\n\
    \    int tempSum = 0;\n    int tempIndex = 0;\n    for (int i = 0; i < array.Length;\
    \ i++)\n    {\n        tempSum = tempSum + array[i];\n        if (tempSum > 0)\n\
    \        {\n            temp[tempIndex] = tempSum;\n            tempIndex++;\n\
    \            tempSum = 0;\n        }\n    }\n    for (int i = 0; i < tempIndex;\
    \ i++)\n    {\n        array[i] = temp[i];\n    }\n}\n</code>\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| a tags=sorting,arrays,c# |>\n<code>\npublic static void Sort(int[] array)\n\
    {\n    int[] temp = new int[array.Length];\n    int tempSum = 0;\n    int tempIndex\
    \ = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n        tempSum = tempSum\
    \ + array[i];\n        if (tempSum > 0)\n        {\n            temp[tempIndex]\
    \ = tempSum;\n            tempIndex++;\n            tempSum = 0;\n        }\n\
    \    }\n    for (int i = 0; i < tempIndex; i++)\n    {\n        array[i] = temp[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic static void Sort(int[]\
    \ array)\n{\n    int[] temp = new int[array.Length];\n    int tempSum = 0;\n \
    \   int tempIndex = 0;\n    for (int i = 0; i < array.Length; i++)\n    {\n  \
    \      tempSum = tempSum + array[i];\n        if (tempSum > 0)\n        {\n  \
    \          temp[tempIndex] = tempSum;\n            tempIndex++;\n            tempSum\
    \ = 0;\n        }\n    }\n    for (int i = 0; i < tempIndex; i++)\n    {\n   \
    \     array[i] = temp[i];\n    }\n}\n</code>\n<|/ a dscore=1 tags=sorting,arrays,c#\
    \ |>\n<| a tags=sorting,arrays,c# |>\n<code>\npublic static void ", "{\n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n     \
    \   result[i] = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        for(int j = i + 1; j < nums.length; j++)\n        {\n            if(result[j]\
    \ < result[i])\n            {\n                long temp = result[i];\n      \
    \          result[i] = result[j];\n                result[j] = temp;\n       \
    \         temp = index;\n                index = i;\n                i = j;\n\
    \                j = temp;\n            }\n        }\n    }\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[index];\n        index++;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i\
    \ < nums.length)\n    {\n        sum += nums[i];\n        result[j] = sum;\n \
    \       i++;\n        j++;\n    }\n    while(j < result.length)\n    {\n     \
    \   result[j] = 0;\n        j++;\n    }\n    for(int k = 0; k < result.length;\
    \ k++)\n    {\n        for(int l = 0; l < result.length; l++)\n        {\n   \
    \         if(result[k] > result[l])\n            {\n                long temp\
    \ = result[k];\n                result[k] = result[l];\n                result[l]\
    \ = temp;\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long[]\
    \ result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n    for(long\
    \ num : nums)\n    {\n        sum += num;\n        result[i++] = sum;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis code doesn't work if there are two or more numbers with the\
    \ same sum. For example, [1L, 11L, -1L, -11L, -12L] returns [-11L, 1L, -12L, 11L,\
    \ -1L]\n<|/ c |>\n<| c |>\nThis code doesn't work if there are two or more numbers\
    \ with the same sum. For example, [1L, 11L, -1L, -11L, -12L] returns [-11L, 1L,\
    \ -12L, 11L, -1L]\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(long num : nums)\n    {\n        sum\
    \ += num;\n        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27827824)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to sort a\
    \ list of integers based on their sum of their digits. I believe this does exactly\
    \ that.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27827824)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He wants to sort a list of integers based\
    \ on their sum of their digits. I believe this does exactly that.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27827824)\n\
    <|/ c |>\n<| a tags=java,sorting,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n        return std.math.abs(b)\
    \ - std.math.abs(a);\n    });\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    int sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, 0, index);\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n   \
    \ long[] result = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \      result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/11709774)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ a list of integers based on the sum of their digits. I provided a solution that\
    \ does exactly that. He also asked how to do it without using any libraries. I\
    \ provided a solution that does exactly that. He also asked how to do it without\
    \ using any libraries. I provided a solution that does exactly that. He also asked\
    \ how to do it without using any libraries. I provided a solution that does exactly\
    \ that. He also asked how to do it without using any libraries. I provided a solution\
    \ that does exactly that. He also asked how to do it without using any libraries.\
    \ I provided a solution that does exactly that. He also asked how to do it without\
    \ using any libraries. I provided a solution that does exactly that. He also asked\
    \ how to do it without using any libraries. I provided a solution that does exactly\
    \ that. He also asked how to do it without using any libraries. I provided a solution\
    \ that does exactly that. He also asked how to do it without using any libraries.\
    \ I provided a solution that does exactly that. He also asked how to do it without\
    \ using any libraries. I provided a solution that does exactly that. He also asked\
    \ how to do it without using any libraries. I provided a solution that does exactly\
    \ that. He also asked how to do it without using any libraries. I provided a solution\
    \ that does exactly that. He also asked how to do it without using any libraries.\
    \ I provided a solution that does exactly that. He also asked how to do it without\
    \ using any libraries. I provided a solution that does exactly that. He also asked\
    \ how to do it without using any libraries. I provided a solution that does exactly\
    \ that. He also asked how to do it without using any libraries. I provided a solution\
    \ that does exactly that. He also asked how to do it without using any libraries.\
    \ I provided a solution", "{\n    long[] result = new long[nums.length];\n   \
    \ long[] sums = new long[nums.length];\n    int i = 0;\n    for(long n : nums)\n\
    \    {\n        sums[i++] = n % 10;\n    }\n    Arrays.sort(sums);\n    for(long\
    \ sum : sums)\n    {\n        int j = 0;\n        for(long n : nums)\n       \
    \ {\n            if(sum == n % 10)\n            {\n                result[j++]\
    \ = n;\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=sorting,arrays,algorithm,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\n\
    It does work, try it yourself. It sorts the list from smallest to largest, which\
    \ is exactly what OP asked for.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. It sorts the list from smallest to largest, which is exactly\
    \ what OP asked for.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| a tags=algorithm,sorting,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,sorting,arrays |>\n<| c |>\nThis doesn't work if there\
    \ are multiple items with the same sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. I added a note to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it does work. Thanks for pointing that out. I edited my answer\
    \ to include a test case.\n<|/ c |>\n<| c |>\nI tested it again and it does work.\
    \ Thanks for pointing that out. I edited my answer to include a test case.\n<|/\
    \ c |>\n<| c |>\nI tested it again and it does work. Thanks for pointing that\
    \ out. I edited my answer to include a test case.\n<|/ c |>\n<| a tags=java,sorting,arrays\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    int sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index]\
    \ = sum;\n        index++;\n    }\n    for(int i = 0; i < index; i++)\n    {\n\
    \        for(int j = i + 1; j < index; j++)\n        {\n            if(result[j]\
    \ < result[i])\n            {\n                long temp = result[i];\n      \
    \          result[i] = result[j];\n                result[j] = temp;\n       \
    \     }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i]%10;\n       \
    \ result[i] = nums[i]/10;\n    }\n    Arrays.sort(sums);\n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        result[i] = sums[i] + result[i];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    I didn't know about `Arrays.sort` - that's really cool!\n<|/ c |>\n<| c |>\nI\
    \ didn't know about `Arrays.sort` either. Thanks for sharing!\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if the numbers are negative.\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I tested it before posting it. What do you mean it doesn't work?\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you try it with the negative numbers in\
    \ the example in the question. Try it with the example in the question. You'll\
    \ see that it doesn't work.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;", "{\n    long[] result\
    \ = new long[nums.length];\n    int sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe question is tagged\
    \ [tag:c++], not [tag:c#].\n<|/ c |>\n<| c |>\nThe question is tagged [tag:c++],\
    \ not [tag:c#]. He is asking for a solution in c++.\n<|/ c |>\n<| c |>\nThe question\
    \ was tagged [tag:c#], not [tag:c++]. He is asking for a solution in c#.\n<|/\
    \ c |>\n<| c |>\nThe question was tagged [tag:c++], not [tag:c#]. He is asking\
    \ for a solution in c++.\n<|/ c |>\n<| c |>\nThe question was tagged [tag:c++],\
    \ not [tag:c#]. He is asking for a solution in c++.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    \n    while(i < nums.length)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n        i++;\n    }\n    \n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| a tags=java,arrays,sorting |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    for(long n : nums)\n    {\n        sum += n;\n        result[i++] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,algorithm,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(long num\
    \ : nums)\n    {\n        sum += num;\n        result[i] = sum;\n        i++;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test\
    \ case in the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the\
    \ test case in the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test case in the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ added the test case in the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\n\
    The question was about sorting in ascending order, not descending. Your solution\
    \ sorts in descending order.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ in ascending order, not descending. Your solution sorts in descending order.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting in ascending order, not descending.\
    \ Your solution sorts in descending order.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting in ascending order, not descending. Your solution sorts in descending\
    \ order.\n<|/ c |>\n<| c |>\nThe question was about sorting in ascending order,\
    \ not descending. Your solution sorts in descending order.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] nums = {1, 11,\
    \ -1, -12, 11};\n    Arrays.sort(nums);\n    System.out.println(Arrays.toString(nums));\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\nThe question was about\
    \ sorting in ascending order, not descending. Your solution sorts in descending\
    \ order.\n<|/ c |>\n<| c |>\nThe question was about sorting in ascending order,\
    \ not descending. Your solution sorts in descending order.\n<|/ c |>\n<| c |>\n\
    The question was about sorting in ascending order, not descending. Your solution\
    \ sorts in descending order.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while (i < nums.length && j < nums.length) {\n        sum\
    \ += nums[i++];\n        if (sum > 0) {\n            result[j] = sum;\n      \
    \      j++;\n        }\n        sum -= nums[j++];\n    }\n    while (i < nums.length)\
    \ {\n        sum += nums[i++];\n        if (sum > 0) {\n            result[j]\
    \ = sum;\n            j++;\n        }\n    }\n    while (j < nums.length) {\n\
    \        sum -= nums[j++];\n        if (sum > 0) {\n            result[j] = sum;\n\
    \            j++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| c |>\nThis solution does not work if there are two or more items with\
    \ the same sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ I just added a comment to the code explaining why it works.\n<|/ c |>\n<| c\
    \ |>\nI tested it again and it doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`. It returns `[-1L, -11L, 1L, -12L, 11L]` instead of\
    \ `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I edited my answer to show you the code I used.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works. I edited my answer to show you the code I used.\n<|/\
    \ c |>\n<| a dscore=2 |>\nThe algorithm is simple:", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while\
    \ (i < nums.length)\n    {\n        sum = nums[i++] + nums[j++];\n        while\
    \ (i < nums.length && sum == nums[i])\n        {\n            i++;\n        }\n\
    \        while (j < nums.length && sum == nums[j])\n        {\n            j++;\n\
    \        }\n        if (i < nums.length)\n        {\n            result[i] = sum;\n\
    \            i++;\n        }\n        if (j < nums.length)\n        {\n      \
    \      result[j] = sum;\n            j++;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\nThis doesn't work if\
    \ there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. I tested it on [this example](http://ideone.com/hQYjKZ).\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nIt works if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two or more numbers with the same\
    \ sum.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    long sum = 0;\n    for(long num : nums)\n\
    \    {\n        sum += num;\n        result[i++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer,\
    \ but a comment on the question itself.\n<|/ c |>\n<| c |>\nI didn't have enough\
    \ reputation to comment on the question, so I wrote an answer. Sorry about that.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works fine for me. Try it yourself.\
    \ I tested it on `order_by_points([1L, 11L, -1L, -11L, -12L])` and it returned\
    \ `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nIt doesn't work for `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` because `sum` is `0` at that point. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nI tested it on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` and it returned `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c\
    \ |>\n<| c |>\nI tested it on `order_by_points([1L, 11L, -1L, -11L, -12L])` and\
    \ it returned `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while (i < nums.length)\n\
    \    {\n        sum += nums[i];\n        while (i < nums.length && sum > 0)\n\
    \        {\n            if (nums[i] > 0)\n            {\n                sum -=\
    \ nums[i];\n                i++;\n            }\n            else\n          \
    \  {\n                sum -= nums[i];\n                j++;\n            }\n \
    \       }\n        result[j] = sum;\n        j++;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,algorithm |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ solution does not work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nI believe that this is what the OP wants. He stated that he\
    \ wants to sort them by their sum.\n<|/ c |>\n<| c |>\nYes, but he also stated\
    \ that he wants to sort them by their index in the original list. He also stated\
    \ that he wants to sort them by their sum.\n<|/ c |>\n<| c |>\nI believe that\
    \ this is what the OP wants. He stated that he wants to sort them by their sum.\n\
    <|/ c |>\n<| c |>\nI believe that this is what the OP wants. He stated that he\
    \ wants to sort them by their sum.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sums[i] = nums[i];\n    }\n    Arrays.sort(sums);\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        result[i] = sums[i];\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if\
    \ there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I\
    \ know. That's why I wrote \"Note\". And I wrote \"Note\" in the first line of\
    \ my answer. :)\n<|/ c |>\n<| c |>\nI didn't see that note in your answer. Sorry.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if there are multiple items with the same sum.\n<|/ c |>\n<| c |>\nYes, I know.\
    \ That's why I wrote \"Note\"\n<|/ c |>\n<| c |>\nI added a note to my answer\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\n\
    This doesn't answer the question. He wants to sort by sum of the digits, not by\
    \ their absolute value.\n<|/ c |>\n<| c |>\nI agree with you, my answer was based\
    \ on his example and I didn't want to change his code too much. I'll edit my answer\
    \ to reflect your comment.\n<|/ c |>\n<| c |>\nI edited my answer to reflect your\
    \ comment. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int[] digits = new int[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        digits[i] = nums[i] % 10;\n        nums[i] /= 10;\n   \
    \ }\n    for(int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n\
    \        for(int j = 0; j < digits.length; j++)\n        {\n            sum +=\
    \ digits[j] * pow(10, j);\n        }\n        if(nums[i] > sum)\n        {\n \
    \           result[i] = nums[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI believe this answer is not correct. Try it on `[-1L, -11L,\
    \ 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nI believe this answer is correct. Try it\
    \ on `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nI believe this answer is\
    \ correct. Try it on `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is correct. Try it on `[-1L, -11L, 1L, -12L, 11L]`\n<|/ c |>\n<|\
    \ c |>\nI believe this answer is correct. Try it on `[-1L, -11L, 1L, -12L, 11L]`\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = {1, 11, -1, -12, 11};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a tags=java,sorting,arrays |>\n<| c |>\nThis is not what the OP\
    \ asked for\n<|/ c |>\n<| c |>\nThis is not what the OP asked for\n<|/ c |>\n\
    <| c |>\nThis is not what the OP asked for\n<|/ c |>\n<| c |>\nThis is not what\
    \ the OP asked for\n<|/ c |>\n<| c |>\nThis is not what the OP asked for\n<|/\
    \ c |>\n<| a tags=java,sorting,arrays |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j] = sum;\n        i++;\n        j++;\n    }\n    while(j < result.length)\n\
    \    {\n        sum -= result[j];\n        result[j] = sum;\n        j++;\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=sorting,c#,algorithm |>\n<| c\
    \ |>\nThis algorithm is O(n^2) in the worst case. Your algorithm is O(nlogn).\n\
    <|/ c |>\n<| c |>\n: I agree, my algorithm is O(n^2), but it is O(nlogn) in the\
    \ worst case because of the sorting algorithm. My algorithm is O(n) in the best\
    \ case because of the sorting algorithm.\n<|/ c |>\n<| c |>\n: I agree, my algorithm\
    \ is O(n^2), but it is O(nlogn) in the worst case because of the sorting algorithm.\
    \ My algorithm is O(n) in the best case because of the sorting algorithm.\n<|/\
    \ c |>\n<| c |>\n: I agree, my algorithm is O(n^2), but it is O(nlogn) in the\
    \ worst case because of the sorting algorithm. My algorithm is O(n) in the best\
    \ case because of the sorting algorithm.\n<|/ c |>\n<| c |>\n: I agree, my algorithm\
    \ is O(n^2), but it is O(nlogn) in the worst case because of the sorting algorithm.\
    \ My algorithm is O(n) in the best case because of the sorting algorithm.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    \n    for(long num : nums)\n    {\n        sum += num;\n        result[i]\
    \ = sum;\n        i++;\n    }\n    \n    Arrays.sort(result);\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    long sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j++] = sum;\n        i++;\n    }\n    for(int k = 0; k < j; k++)\n\
    \    {\n        for(int l = 0; l < j; l++)\n        {\n            if(result[k]\
    \ > result[l])\n            {\n                long temp = result[k];\n      \
    \          result[k] = result[l];\n                result[l] = temp;\n       \
    \     }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i\
    \ < nums.length)\n    {\n        sum = sum + nums[i];\n        if(sum > 0)\n \
    \       {\n            result[j] = sum;\n            i++;\n            j++;\n\
    \            sum = 0;\n        }\n        else\n        {\n            sum = 0;\n\
    \        }\n    }\n    while(j < result.length)\n    {\n        result[j] = sum;\n\
    \        j++;\n        sum = 0;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,sorting,algorithm |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n     \
    \   result[index++] = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n     \
    \   return a.compareTo(b);\n    });\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the list contains negative numbers. For example,\
    \ the list `[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]` returns `[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]`.\n<|/ c |>\n<| c |>\nThe question says \"sort them in ascending\
    \ order\", not \"sort them in descending order\".\n<|/ c |>\n<| c |>\nThe question\
    \ says \"sort them in ascending order\", not \"sort them in descending order\"\
    .\n<|/ c |>\n<| c |>\nThe question says \"sort them in ascending order\", not\
    \ \"sort them in descending order\".\n<|/ c |>\n<| c |>\nThe question says \"\
    sort them in ascending order\", not \"sort them in descending order\".\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++){\n        sum += nums[i];\n \
    \       result[index++] = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n \
    \       return a - b;\n    });\n    return result;\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I've edited my answer to fix this problem.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    int i = 0;\n    int j = 0;\n    int sum = 0;\n \
    \   while(i < nums.length)\n    {\n        sum += nums[i];\n        result[j++]\
    \ = sum;\n        i++;\n    }\n    while(j < result.length)\n    {\n        result[j--]\
    \ = nums[i];\n        i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI believe this would work, but I believe it would be much more\
    \ efficient to sort the list and then iterate through the list to find the sum\
    \ of the digits. That would avoid the need to recreate the array and would also\
    \ avoid the need to sort the list each time you add a new element.\n<|/ c |>\n\
    <| c |>\nI agree with you. I just wanted to show how to do it in O(n) time complexity.\
    \ Of course sorting is much more efficient than iterating through each element\
    \ and summing up its digits. But I wanted to show how to do it in O(n) time complexity\
    \ :)\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show how to do it\
    \ in O(n) time complexity. Of course sorting is much more efficient than iterating\
    \ through each element and summing up its digits. But I wanted to show how to\
    \ do it in O(n) time complexity :)\n<|/ c |>\n<| c |>\nI agree with you. I just\
    \ wanted to show how to do it in O(n) time complexity. Of course sorting is much\
    \ more efficient than iterating through each element and summing up its digits.\
    \ But I wanted to show how to do it in O(n) time complexity :)\n<|/ c |>\n<| c\
    \ |>\nI agree with you. I just wanted to show how to do it in O(n) time complexity.\
    \ Of course sorting is much more efficient than iterating through each element\
    \ and summing up its digits. But I wanted to show how to do it in O(n) time complexity\
    \ :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result, 0, index);\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,java |>\n<| a tags=sorting,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n\
    \        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,java |>\n<| c |>\n\
    This is not correct. `Arrays.sort()` sorts *in place*, so the result of `order_by_points`\
    \ will be the original `nums`.\n<|/ c |>\n<| c |>\n: Yes, I know. That's why I\
    \ wrote \"Note\". And I wrote \"Note\" because I thought it would be a good idea\
    \ to give a hint to the OP about how to solve the problem himself. But you are\
    \ right, I should have added a hint about how to solve the problem himself.\n\
    <|/ c |>\n<| c |>\n: I added a hint about how to solve the problem himself.\n\
    <|/ c |>\n<| c |>\n: I added a hint about how to solve the problem himself.\n\
    <|/ c |>\n<| c |>\n: I added a hint about how to solve the problem himself.\n\
    <|/ c |>\n<| a tags=algorithm,sorting,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] nums = {1, 11, -1, -11 ,-12};\n    int[] result = new int[nums.length];\n\
    \    int index = 0;\n    int sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        System.out.println(result[i]);\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the list contains\
    \ negative numbers. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. Try it yourself. It sorts negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nIt doesn't work for me on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`. Try it yourself. It sorts negative numbers as well.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. Try it yourself. It sorts negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nIt doesn't work for me on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`. Try it yourself. It sorts negative numbers as well.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long[]\
    \ sums = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sums[i] = nums[i];\n    }\n    Arrays.sort(sums);\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        result[i] = sums[i];\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if\
    \ there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. My mistake. I've corrected my answer.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ int i = 0;\n    long sum = 0;\n    for(long num : nums)\n    {\n        sum\
    \ += num;\n        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    The question was about sorting in ascending order. Your solution sorts in descending\
    \ order.\n<|/ c |>\n<| c |>\nI fixed the code so it sorts in ascending order.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    for(long num : nums)\n    {\n        sum += num;\n        result[i++] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work if there are two or more items with the same sum.\n\
    <|/ c |>\n<| c |>\nIt does work if there are two or more items with the same sum.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\nI tested it and it does work. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI tested it and it does work. Try it yourself.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a dscore=0\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n    long[] result = new long[nums.length];\n    int index\
    \ = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n \
    \       sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 11,\
    \ -1, -12, 12};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers. For example, `order_by_points([-1L, -11L, 1L, -12L, 11L])` returns\
    \ `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -11L, 1L, -12L, 11L]`.\n\
    <|/ c |>\n<| c |>\nI didn't see that requirement. I've updated my answer to include\
    \ a version that works with negative numbers as well.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,sorting,arrays |>\n<| a tags=java,sorting,arrays\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the numbers\
    \ are negative.\n<|/ c |>\n<| c |>\nIt works, just tested it.  It sorts negative\
    \ numbers too.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two numbers with\
    \ the same sum.\n<|/ c |>\n<| c |>\nIt works, just tested it.  It sorts negative\
    \ numbers too.  It sorts duplicate numbers too.  It sorts duplicate numbers too.\
    \  It sorts duplicate numbers too.  It sorts duplicate numbers too.  It sorts\
    \ duplicate numbers too.  It sorts duplicate numbers too.  It sorts duplicate\
    \ numbers too.  It sorts duplicate numbers too.  It sorts duplicate numbers too.\
    \  It sorts duplicate numbers too.  It sorts duplicate numbers too.  It sorts\
    \ duplicate numbers too.  It sorts duplicate numbers too.  It sorts duplicate\
    \ numbers too.  It sorts duplicate numbers too.  It sorts duplicate numbers too.\
    \  It sorts duplicate numbers too.  It sorts duplicate numbers too.  It sorts\
    \ duplicate numbers too.  It sorts duplicate numbers too.  It sorts duplicate\
    \ numbers too.  It sorts duplicate numbers too.  It sorts duplicate numbers too.\
    \  It sorts duplicate numbers too.  It sorts duplicate numbers too.  It sorts\
    \ duplicate numbers too.  It sorts duplicate numbers too.  It sorts duplicate\
    \ numbers too.  It sorts duplicate numbers too.  It sorts duplicate numbers too.\
    \  It sorts duplicate numbers too.  It sorts duplicate numbers too.  It sorts\
    \ duplicate numbers too.  It sorts duplicate numbers too.  It sorts duplicate\
    \ numbers too.  It sorts duplicate numbers too.  It sorts duplicate numbers too.\
    \  It sorts duplicate numbers too.  It sorts duplicate numbers too.  It sorts\
    \ duplicate numbers too.  It sorts duplicate numbers too.  It sorts duplicate\
    \ numbers too.  It sorts duplicate numbers too.  It sorts duplicate numbers too.\
    \  It sorts duplicate numbers too.  It sorts duplicate numbers too.", "{\n   \
    \ long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    \n    while(i < nums.length)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n        i++;\n    }\n    \n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=1 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(long num : nums)\n    {\n        sum += num;\n\
    \        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;", "{\n \
    \   long[] result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n\
    \    for(long num : nums)\n    {\n        sum += num;\n        result[i++] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,java\
    \ |>\n<| c |>\nThis doesn't work if there are two or more numbers with the same\
    \ sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I will\
    \ edit the answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it before\
    \ posting it. I will edit the answer to include a test case.\n<|/ c |>\n<| c |>\n\
    I tested it before posting it. I will edit the answer to include a test case.\n\
    <|/ c |>\n<| c |>\nI tested it before posting it. I will edit the answer to include\
    \ a test case.\n<|/ c |>\n<| a tags=algorithm,sorting,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;", "{\n\
    \    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while (i < nums.length)\n    {\n        sum += nums[i];\n\
    \        while (j < nums.length && sum > 0)\n        {\n            sum += nums[j];\n\
    \            j++;\n        }\n        result[i] = sum;\n        i++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe code you posted\
    \ is incorrect. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine. Can you please give me the test\
    \ case where it fails?\n<|/ c |>\n<| c |>\nThe code you posted is incorrect. Try\
    \ it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Can you please give me the test case where it fails?\n\
    <|/ c |>\n<| c |>\nThe code you posted is incorrect. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,sorting |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum = nums[i] - '0';\n        if(sum < 0)\n        {\n       \
    \     sum = (sum * -1) + 10;\n        }\n        if(sum > 0)\n        {\n    \
    \        while(j < i)\n            {\n                if(sum == nums[j] - '0')\n\
    \                {\n                    result[j] = nums[j];\n               \
    \     j++;\n                }\n                else\n                {\n     \
    \               break;\n                }\n            }\n            while(j\
    \ < i)\n            {\n                if(sum < nums[j] - '0')\n             \
    \   {\n                    result[j] = nums[j];\n                    j++;\n  \
    \              }\n                else\n                {\n                  \
    \  break;\n                }\n            }\n        }\n        else\n       \
    \ {\n            while(j < i)\n            {\n                if(sum == nums[j]\
    \ - '0')\n                {\n                    result[j] = nums[j];\n      \
    \              j++;\n                }\n                else\n               \
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        i++;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ code does not work. Try it on `order_by_points([1L, 11L, -1L, -11L, -12L])`\n\
    <|/ c |>\n<| c |>\nI tested it on `order_by_points([1L, 11L, -1L, -11L, -12L])`\
    \ and it works fine.\n<|/ c |>\n<| c |>\nI tested it on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])` and it works fine.\n<|/ c |>\n<| c |>\nI tested it on\
    \ `order_by_points([1L, 11L, -1L, -11L, -12L])` and it works fine.\n<|/ c |>\n\
    <| c |>\nI tested it on `order_by_points([1L, 11L, -1L, -11L, -12L])` and it works\
    \ fine.\n<|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        if(sum > 0)\n        {\n            result[j] = sum;\n            j++;\n\
    \            sum = 0;\n        }\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j] = sum;\n        j++;\n        sum = 0;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java |>\n<| c |>\n\
    The question was about sorting an array of integers, not longs.\n<|/ c |>\n<|\
    \ c |>\nThe question was about sorting an array of integers, not longs.\n<|/ c\
    \ |>\n<| c |>\nThe question was about sorting an array of integers, not longs.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not longs.\n\
    <|/ c |>\n<| a tags=arrays,sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ ++i)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This doesn't work if there are two numbers with the same sum.\n<|/ c |>\n<| c\
    \ |>\nYes, I know. That's why I wrote \"Note\". But I guess OP can easily fix\
    \ it by adding another `if` statement.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ your comment. You're saying \"If there are two numbers with the same sum, order\
    \ them based on their index in original list\". That doesn't make sense to me.\
    \ How would you order two numbers with the same sum if you didn't know their index?\n\
    <|/ c |>\n<| c |>\nYes, I understood that OP wants to order them based on their\
    \ index in original list. That's why I wrote \"Note\". But I guess OP can easily\
    \ fix it by adding another `if` statement.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ your comment. You're saying \"If there are two numbers with the same sum, order\
    \ them based on their index in original list\". That doesn't make sense to me.\
    \ How would you order two numbers with the same sum if you didn't know their index?\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    int sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum -= nums[i];\n        result[index++] = sum;\n    }\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum = 0;\n        for(int j = 0;\
    \ j < nums.length; j++)\n        {\n            sum += nums[j];\n            if(sum\
    \ == 0)\n            {\n                sum = 1;\n                break;\n   \
    \         }\n        }\n        result[index++] = sum;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,c# |>\n<| c |>\nThis is not an answer\
    \ to the question. He wants to sort by sum of digits, not by their absolute value.\n\
    <|/ c |>\n<| c |>\nI believe this answer is correct, since it sorts by the sum\
    \ of digits. I believe this was the original question. He just edited the question\
    \ to make it clearer.\n<|/ c |>\n<| c |>\nI believe this answer is correct, since\
    \ it sorts by the sum of digits. I believe this was the original question. He\
    \ just edited the question to make it clearer.\n<|/ c |>\n<| c |>\nThis answer\
    \ is not correct. Try it with a list of negative numbers. You will see that it\
    \ will not sort the list correctly.\n<|/ c |>\n<| c |>\nI believe this answer\
    \ is correct, since it sorts by the sum of digits. I believe this was the original\
    \ question. He just edited the question to make it clearer.\n<|/ c |>\n<| a tags=sorting,algorithm,c#\
    \ |>\n<code>\npublic static void Main(string[] args)\n{\n    List<int> list =\
    \ new List<int>();\n    list.Add(1);\n    list.Add(2);\n    list.Add(3);\n   \
    \ list.Add(4);\n    list.Add(5);\n    list.Add(6);\n    list.Add(7);\n    list.Add(8);\n\
    \    list.Add(9);\n    list.Add(10);\n    list.Add(11);\n    list.Add(12);\n \
    \   list.Add(13);\n    list.Add(14);\n    list.Add(15);\n    list.Add(16);\n \
    \   list.Add(17);\n    list.Add(18);\n    list.Add(19);\n    list.Add(20);\n \
    \   list.Add(21);\n    list.Add(22);\n    list.Add(23);\n    list.Add(24);\n \
    \   list.Add(25);\n    list.Add(26);\n    ", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;", "{\n  \
    \  long[] result = new long[nums.length];\n    int index = 0;\n    long sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index] = sum;\n        index++;\n    }\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        if(result[i] != 0)\n        {\n          \
    \  int j = i;\n            while(j > 0 && result[j-1] != 0)\n            {\n \
    \               result[j] = result[j-1];\n                j--;\n            }\n\
    \            result[j] = nums[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,arrays,java |>\n<| a tags=sorting,algorithm,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        if(sum > 0)\n        {\n            result[j]\
    \ = sum;\n            j++;\n            sum = 0;\n        }\n        i++;\n  \
    \  }\n    while(j < result.length)\n    {\n        result[j] = sum;\n        j++;\n\
    \        sum = 0;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L,\
    \ -12L])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test case\
    \ in the answer. Can you please tell me what is not working?\n<|/ c |>\n<| c |>\n\
    It doesn't work if you try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\
    \ Can you please tell me what is not working?\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n\
    <| a tags=sorting,c#,algorithm |>\n<code>\npublic static void Main()\n{\n    int[]\
    \ nums = new int[] { 1L, 11L, -1L, -11L, -12L };\n    Console.WriteLine(nums);\n\
    \    Console.WriteLine(order_by_points(nums));\n}", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your\
    \ code works perfectly for me. However I still don't understand why my code doesn't\
    \ work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer.\n<|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThis doesn't answer the\
    \ question. He wants to sort the array in ascending order based on the sum of\
    \ their digits. Your solution sorts the array in descending order based on the\
    \ sum of their digits.\n<|/ c |>\n<| c |>\nThe question was \"Write a function\
    \ which sorts the given list of integers in ascending order according to the sum\
    \ of their digits.\"\n<|/ c |>\n<| c |>\nThe question was \"Write a function which\
    \ sorts the given list of integers in ascending order according to the sum of\
    \ their digits.\"\n<|/ c |>\n<| c |>\nThe question was \"Write a function which\
    \ sorts the given list of integers in ascending order according to the sum of\
    \ their digits.\"\n<|/ c |>\n<| c |>\nThe question was \"Write a function which\
    \ sorts the given list of integers in ascending order according to the sum of\
    \ their digits.\"\n<|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThis solution doesn't work for negative numbers. I added a solution that\
    \ does.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result,\
    \ (a, b) -> {\n        return a.compareTo(b);\n    });\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    long sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        result[j++] = sum;\n        i++;\n  \
    \  }\n    while(j < result.length)\n    {\n        sum -= result[j];\n       \
    \ result[j++] = sum;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis is not an answer to the question. Also, your code is wrong. Try\
    \ it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\n\
    I agree with you. My code is not an answer to this question. My code is not the\
    \ best solution for this problem. My code is not the best solution for this problem.\
    \ My code is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code is not the best solution for this problem. My code\
    \ is not the best solution for this problem. My code is not the best solution\
    \ for this problem. My code ", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[index++] = nums[i];\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, (a, b) -> {\n\
    \        return Long.compare(sum, sumOfDigits(a));\n    });\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,java,sorting |>\n<| c |>\nI believe this solution\
    \ will fail if there are two or more numbers with the same sum.\n<|/ c |>\n<|\
    \ c |>\nYes, I believe so. That's why I wrote \"Note: if there are several items\
    \ with similar sum of their digits, order them based on their index in original\
    \ list.\"\n<|/ c |>\n<| c |>\nI believe that your solution will fail if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I believe\
    \ so. That's why I wrote \"Note: if there are several items with similar sum of\
    \ their digits, order them based on their index in original list.\"\n<|/ c |>\n\
    <| c |>\nI believe that your solution will fail if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| a dscore=3 |>\nI believe that your solution\
    \ will fail if there are two or more numbers with the same sum.\nI suggest the\
    \ following solution:\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    \n    for(;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    \n    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the output to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two\
    \ or more items with the same sum.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the output to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are two or more items with the same sum.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;\nimport java.util.stream.IntStream;", "{\n\
    \    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        if(sum > 0)\n        {\n            result[j] = sum;\n            j++;\n\
    \            sum = 0;\n        }\n        i++;\n    }\n    if(sum > 0)\n    {\n\
    \        result[j] = sum;\n        j++;\n    }\n    for(int k = 0; k < j; k++)\n\
    \    {\n        long temp = result[k];\n        result[k] = result[j];\n     \
    \   result[j] = temp;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n \
    \       sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10278998)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ a list of integers based on their sum. He also said that he was new to programming\
    \ and wanted to learn how to sort lists. I believe this answer does exactly what\
    \ he asked for. He also said that he was new to programming and wanted to learn\
    \ how to sort lists. I believe this answer does exactly what he asked for. He\
    \ also said that he was new to programming and wanted to learn how to sort lists.\
    \ I believe this answer does exactly what he asked for. He also said that he was\
    \ new to programming and wanted to learn how to sort lists. I believe this answer\
    \ does exactly what he asked for. He also said that he was new to programming\
    \ and wanted to learn how to sort lists. I believe this answer does exactly what\
    \ he asked for. He also said that he was new to programming and wanted to learn\
    \ how to sort lists. I believe this answer does exactly what he asked for. He\
    \ also said that he was new to programming and wanted to learn how to sort lists.\
    \ I believe this answer does exactly what he asked for. He also said that he was\
    \ new to programming and wanted to learn how to sort lists. I believe this answer\
    \ does exactly what he asked for. He also said that he was new to programming\
    \ and wanted to learn how to sort lists. I believe this answer does exactly what\
    \ he asked for. He also said that he was new to programming and wanted to learn\
    \ how to sort lists. I believe this answer does exactly what he asked for. He\
    \ also said that he was new to programming and wanted to learn how to sort lists.\
    \ I believe this answer does exactly what he asked for. He also said that he was\
    \ new to programming and wanted to learn how to sort lists. I believe this answer\
    \ does exactly what he asked for. He also said that he was new to programming\
    \ and wanted to learn how to sort lists. I believe this answer does exactly what\
    \ he asked for. He also ", "{\n    long[] result = new long[nums.length];\n  \
    \  int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This is not an answer to the question. OP wants to sort an array of integers based\
    \ on their sum.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that OP will\
    \ find it useful.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. OP\
    \ wants to sort an array of integers based on their sum.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought that OP will find it useful.\n<|/ c |>\n<| c |>\n\
    This is not an answer to the question. OP wants to sort an array of integers based\
    \ on their sum.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works fine for me. Try it yourself. It\
    \ returns `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting my comment. Try it yourself.\n<|/ c |>\n<| c |>\nI tested\
    \ it myself. It works fine. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself.\
    \ It works fine. Try it yourself.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    long sum = 0;\n    for(long num : nums)\n    {\n        sum\
    \ += num;\n        result[i++] = sum;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers in the list\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers in the list\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers in the list\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers in the list\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int[] sums = new int[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = nums[i]%10;\n        result[i] = nums[i]/10;\n    }\n\
    \    Arrays.sort(sums);\n    for(int i = 0; i < sums.length; i++)\n    {\n   \
    \     for(int j = 0; j < sums.length; j++)\n        {\n            if(sums[i]\
    \ == sums[j])\n            {\n                Arrays.sort(result, i, j);\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThanks for your answer. Your\
    \ code works but i think it can be done in a more efficient way. Can you please\
    \ tell me how can i do that?\n<|/ c |>\n<| c |>\nI added a more efficient solution.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks again. Your code is working but i\
    \ think it can be done in a more efficient way. Can you please tell me how can\
    \ i do that?\n<|/ c |>\n<| c |>\nI added a more efficient solution. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks again. Your code is working but i think it can be done\
    \ in a more efficient way. Can you please tell me how can i do that?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j++] = sum;\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        result[j--] = sum;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,algorithm,java |>\n<| c |>\nI like this solution, although it\
    \ does require a lot of extra memory and extra time for sorting.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, but I thought this was a good exercise for learning\
    \ about sorting algorithms. I guess I should have mentioned that in my answer.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought this was a good exercise for\
    \ learning about sorting algorithms. I guess I should have mentioned that in my\
    \ answer.\n<|/ c |>\n<| c |>\nI agree with you, but I thought this was a good\
    \ exercise for learning about sorting algorithms. I guess I should have mentioned\
    \ that in my answer.\n<|/ c |>\n<| c |>\nI agree with you, but I thought this\
    \ was a good exercise for learning about sorting algorithms. I guess I should\
    \ have mentioned that in my answer.\n<|/ c |>\n<| a dscore=5 |>\nThe best way\
    \ is to use Collections.sort() method. \n<code>\nList<Integer> list = new ArrayList<Integer>();\n\
    list.add(1);\nlist.add(2);\nlist.add(3);\nlist.add(4);\nlist.add(5);\nCollections.sort(list);\n\
    </code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\nThis doesn't answer the\
    \ question. He wants to sort by sum, not by value.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"how to sort by sum\", not \"how to sort by value\". He wants to sort by\
    \ sum, not by value.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to sort by sum, not by value.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to sort by sum, not by value.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to sort by sum, not by value.\n<|/ c |>\n\
    <| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    int i = 0;\n    for(long num : nums)\n    {\n        sum += num;\n\
    \        result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution,\
    \ but I believe it can be improved by using an `ArrayList` instead of an array.\
    \ Also, you could use `Arrays.sort(nums, (a, b) -> a + b);` instead of `Arrays.sort(result);`.\n\
    <|/ c |>\n<| c |>\nYes, you are right. ArrayList is better. Arrays.sort() is also\
    \ a good solution. Thanks.\n<|/ c |>\n<| a tags=sorting,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;", "{\n\
    \    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j++] = sum;\n        i++;\n    }\n    for(int k = 0; k < nums.length;\
    \ k++)\n    {\n        for(int l = 0; l < j; l++)\n        {\n            if(nums[k]\
    \ > result[l])\n            {\n                long temp = nums[k];\n        \
    \        nums[k] = result[l];\n                result[l] = temp;\n           \
    \ }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI appreciate your effort, but this isn't a good solution. Your solution\
    \ has O(n^2) complexity, which is very inefficient for large lists. I suggest\
    \ you read my answer for a better solution.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my solution is O(n^2) but it is also O(n) because I used a HashMap to store\
    \ the sum of the digits of each number in the list. My solution also uses O(n)\
    \ space and O(n) time complexity. Your solution uses O(n^2) space and O(n^2) time\
    \ complexity. My solution is O(n) space and O(n) time complexity. Your solution\
    \ is O(n^2) space and O(n^2) time complexity. My solution is O(n) space and O(n)\
    \ time complexity. Your solution is O(n^2) space and O(n^2) time complexity.\n\
    <|/ c |>\n<| c |>\nI agree with you, my solution is O(n^2) but it is also O(n)\
    \ because I used a HashMap to store the sum of the digits of each number in the\
    \ list. My solution also uses O(n) space and O(n) time complexity. Your solution\
    \ uses O(n^2) space and O(n^2) time complexity. My solution is O(n) space and\
    \ O(n) time complexity. Your solution is O(n^2) space and O(n^2) time complexity.\
    \ My solution is O(n) space and O(n) time complexity. Your solution is O(n^2)\
    \ space and O(n^2) time complexity.\n<|/ c |>\n<| c |>\nI agree with you, my solution\
    \ is O(n^2) but it is also O(n) because I used a HashMap to store the sum of the\
    \ digits of each number in the list. My solution also uses O(n) space and ", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=sorting,algorithm,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = { 1, 11, -1, -11, -12, -13 };\n    System.out.println(Arrays.toString(sort(arr)));\n\
    }", "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an answer to the question.\
    \ OP wants to sort by sum of digits, not by their absolute value.\n<|/ c |>\n\
    <| c |>\nThe question was \"Write a function which sorts the given list of integers\
    \ in ascending order according to the sum of their digits.\"\n<|/ c |>\n<| c |>\n\
    Yes, but your answer does not do that. Your code sorts by absolute value, not\
    \ by sum of digits.\n<|/ c |>\n<| c |>\nI agree with you, my answer does not do\
    \ that. My code sorts by sum of digits, not by absolute value.\n<|/ c |>\n<| c\
    \ |>\nThe question was \"Write a function which sorts the given list of integers\
    \ in ascending order according to the sum of their digits.\"\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(long num : nums)\n\
    \    {\n        sum += num;\n        result[i] = sum;\n        i++;\n    }\n \
    \   Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nI guess you meant `Arrays.sort(result);` instead of `Arrays.sort(nums);`\n\
    <|/ c |>\n<| c |>\nYes, I meant `Arrays.sort(result);` instead of `Arrays.sort(nums);`\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n \
    \   return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\nThis\
    \ is not an answer, but a comment.\n<|/ c |>\n<| c |>\nI didn't want to post a\
    \ comment because I didn't have enough reputation to do so. Sorry about that.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but this does not answer the question.\
    \ OP asked for Java, not C#.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but\
    \ this does not answer the question. OP asked for Java, not C#.\n<|/ c |>\n<|\
    \ c |>\nI appreciate your efforts, but this does not answer the question. OP asked\
    \ for Java, not C#.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(long num : nums)\n    {\n        sum += num;\n        result[i] = sum;\n\
    \        i++;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,java |>\n<| c |>\nI believe this answer is the best\
    \ one so far. Just one question: why do you sort result array instead of nums\
    \ array?\n<|/ c |>\n<| c |>\nBecause the question was to sort an array of integers\
    \ according to their sum of their digits. So I thought it would be more efficient\
    \ to sort an array of integers than an array of longs.\n<|/ c |>\n<| c |>\nI see.\
    \ Thank you for your answer!\n<|/ c |>\n<| c |>\nI believe this answer is the\
    \ best one so far. Just one question: why do you sort result array instead of\
    \ nums array?\n<|/ c |>\n<| c |>\nBecause the question was to sort an array of\
    \ integers according to their sum of their digits. So I thought it would be more\
    \ efficient to sort an array of integers than an array of longs.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int\
    \ j = i+1; j < nums.length; j++)\n        {\n            if(result[j] < result[i])\n\
    \            {\n                long temp = result[i];\n                result[i]\
    \ = result[j];\n                result[j] = temp;\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not\
    \ the right answer. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account\
    \ for that.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to\
    \ account for that.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to account for that.\n<|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  long sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    long sum = 0;\n    while (i < nums.length)\n    {\n        sum += nums[i];\n\
    \        while (j < nums.length && sum > 0)\n        {\n            sum += nums[j];\n\
    \            j++;\n        }\n        result[i] = sum;\n        i++;\n       \
    \ j = 0;\n        sum = 0;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,c#\
    \ |>\n<| c |>\nThis is not the right solution. Consider `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`. It should return `[-1L, -11L, 1L, -12L, 11L]`, but\
    \ your code returns `[-1L, -11L, 1L, -12L, 11L]`.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution is correct. `-1L` comes before `-11L` because `-1L` comes before\
    \ `-11L` because `-1L` comes before `-11L` because `-1L` comes before `-11L` because\
    \ `-1L` comes before `-11L` because `-1L` comes before `-11L` because `-1L` comes\
    \ before `-11L` because `-1L` comes before `-11L` because `-1L` comes before `-11L`\
    \ because `-1L` comes before `-11L` because `-1L` comes before `-11L` because\
    \ `-1L` comes before `-11L` because `-1L` comes before `-11L` because `-1L` comes\
    \ before `-11L` because `-1L` comes before `-11L` because `-1L` comes before `-11L`\
    \ because `-1L` comes before `-11L` because `-1L` comes before `-11L` because\
    \ `-1L` comes before `-11L` because `-1L` comes before `-11L` because `-1L` comes\
    \ before `-11L` because `-1L` comes before `-11L` because `-1L` comes before `-11L`\
    \ because `-1L` comes before `-11L` because `-1L` comes before `-11L` because\
    \ `-1L` comes before `-11L` because `-1L` comes before `-11L` because `-1L` comes\
    \ before `-11L` because `-1L` comes before `-11L` because `-1L` comes before `-11L`\
    \ because `-1L` ", "{\n    long[] result = new long[nums.length];\n    int index\
    \ = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n       \
    \ sum += nums[i];\n        result[index++] = sum;\n    }\n    for(int i = 0; i\
    \ < nums.length; i++){\n        sum -= nums[i];\n        result[index++] = sum;\n\
    \    }\n    for(int i = 0; i < nums.length; i++){\n        sum = 0;\n        for(int\
    \ j = 0; j < nums.length; j++){\n            sum += nums[j];\n            if(sum\
    \ == i){\n                result[index++] = j;\n            }\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting |>\n\
    <| c |>\nThe first for loop should be `for(int i = 0; i < nums.length; i++)`\n\
    <|/ c |>\n<| c |>\nThe second for loop should be `for(int i = 0; i < nums.length;\
    \ i++)`\n<|/ c |>\n<| c |>\nThe third loop should be `for(int i = 0; i < nums.length;\
    \ i++)`\n<|/ c |>\n<| c |>\nThe fourth loop should be `for(int i = 0; i < nums.length;\
    \ i++)`\n<|/ c |>\n<| c |>\nThe fifth loop should be `for(int i = 0; i < nums.length;\
    \ i++)`\n<|/ c |>\n<| a dscore=5 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {1, 11, -1, -12, 12};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,sorting |>\n<| c |>\nThis is not an answer,\
    \ but a comment.\n<|/ c |>\n<| c |>\nThis is not an answer, but a comment.\n<|/\
    \ c |>\n<| c |>\nThis is not an answer, but a comment.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer, but a comment.\n<|/ c |>\n<| c |>\nThis is not an answer,\
    \ but a comment.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    int sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j++] = sum;\n        i++;\n    }\n    while(j < result.length)\n\
    \    {\n        sum -= result[j];\n        result[j++] = sum;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis code doesn't work. Try it with\
    \ `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting. The problem was that I was using Arrays.sort() instead\
    \ of Arrays.sort(nums). Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis code\
    \ doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`\n<|/\
    \ c |>\n<| c |>\nIt works. I tested it before posting. The problem was that I\
    \ was using Arrays.sort() instead of Arrays.sort(nums). Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n  \
    \  long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(int j=0; j<nums.length; j++)\n    {\n        sum += nums[j];\n      \
    \  result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,java |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    \n    while(i < nums.length)\n    {\n\
    \        sum += nums[i];\n        result[i] = sum;\n        i++;\n    }\n    \n\
    \    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, I agree with you. But the question was about sorting in\
    \ ascending order. So, I thought this would be the best solution. Thanks for pointing\
    \ out.\n<|/ c |>\n<| c |>\nI agree with you. But the question was about sorting\
    \ in ascending order. So, I thought this would be the best solution. Thanks for\
    \ pointing out.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| a tags=java,arrays,sorting |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    int\
    \ i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n    {\n\
    \        sum += nums[i];\n        result[j] = sum;\n        i++;\n        j++;\n\
    \    }\n    while(j < result.length)\n    {\n        result[j] = result[j-1];\n\
    \        j++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThe question was about sorting an array of integers according to\
    \ their sum, not their digits. Your solution sorts them by their digits, not their\
    \ sum.\n<|/ c |>\n<| c |>\nI agree with you, but I thought the OP was asking about\
    \ sorting an array of integers according to their sum, not their digits. I thought\
    \ the OP was asking about sorting an array of integers according to their sum,\
    \ not their digits. I thought the OP was asking about sorting an array of integers\
    \ according to their sum, not their digits. I thought the OP was asking about\
    \ sorting an array of integers according to their sum, not their digits. I thought\
    \ the OP was asking about sorting an array of integers according to their sum,\
    \ not their digits. I thought the OP was asking about sorting an array of integers\
    \ according to their sum, not their digits. I thought the OP was asking about\
    \ sorting an array of integers according to their sum, not their digits. I thought\
    \ the OP was asking about sorting an array of integers according to their sum,\
    \ not their digits. I thought the OP was asking about sorting an array of integers\
    \ according to their sum, not their digits. I thought the OP was asking about\
    \ sorting an array of integers according to their sum, not their digits.\n<|/\
    \ c |>\n<| c |>\nI thought the OP was asking about sorting an array of integers\
    \ according to their sum, not their digits. I thought the OP was asking about\
    \ sorting an array of integers according to their sum, not their digits. I thought\
    \ the OP was asking about sorting an array of integers according to their sum,\
    \ not their digits. I thought the OP was asking about sorting an array of integers\
    \ according to their sum, not their digits. I thought the OP was asking about\
    \ sorting an array of integers according to their sum, not their digits. I thought\
    \ the OP was asking about sorting an array of integers according to their sum,\
    \ not their digits. I thought the OP was asking about sorting an array of integers\
    \ according to their sum, not their digits. I thought the OP was asking about\
    \ sorting an array of integers according to their sum, not their digits. ", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n   \
    \ long[] result = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \      result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two or more numbers with the same sum. See\
    \ the example in the question.\n<|/ c |>\n<| c |>\nIt does work if there are two\
    \ or more numbers with the same sum. See the example in the question.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two or more numbers with the same sum. See\
    \ the example in the question.\n<|/ c |>\n<| c |>\nIt does work if there are two\
    \ or more numbers with the same sum. See the example in the question.\n<|/ c |>\n\
    <| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    int j = 0;\n\
    \    long sum = 0;\n    while(i < nums.length)\n    {\n        sum += nums[i];\n\
    \        result[j++] = sum;\n        i++;\n    }\n    for(int k = j-1; k >= 0;\
    \ k--)\n    {\n        long tmp = result[k];\n        result[k] = result[k+1];\n\
    \        result[k+1] = tmp;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points([1L, 11L, -1L,\
    \ -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works. I tested it on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt works. I tested it on `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points([1L,\
    \ 11L, -1L, -11L, -12L])`\n<|/ c |>\n<| a tags=sorting,c#,algorithm |>\nI wrote\
    \ a C# solution that is O(nlogn) time complexity and O(n) space complexity. It\
    \ uses radix sort and counting sort and uses O(n) extra space for the counting\
    \ array.\n<code>\nusing System;\nusing System.Collections.Generic;", "{\n    long[]\
    \ result = new long[nums.length];\n    int i = 0;\n    long sum = 0;\n    for(long\
    \ num : nums)\n    {\n        sum += num;\n        result[i++] = sum;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work if there are two or more numbers with the same\
    \ sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are two or more numbers with the same sum.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, 11,\
    \ -1, -12, 12};\n    Arrays.sort(arr);\n    System.out.println(Arrays.toString(arr));\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThis doesn't\
    \ work if there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(long num\
    \ : nums)\n    {\n        sum += num;\n        result[i] = sum;\n        i++;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    \n    for(;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    \n    Arrays.sort(result);\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result, 0, index);\n \
    \   return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n\
    \        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,java |>\n<| c |>\n\
    This doesn't work. Try it with `order_by_points([1L, 11L, -1L, -11L, -12L])`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work because your algorithm\
    \ doesn't take into account the fact that `-1L` should be sorted before `-11L`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work because your algorithm\
    \ doesn't take into account the fact that `-1L` should be sorted before `-11L`.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
