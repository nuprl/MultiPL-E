name: HumanEval_116_sort_array
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    In this Kata, you have\
  \ to sort an array of non-negative integers according to\n    number of ones in\
  \ their binary representation in ascending order.\n    For similar number of ones,\
  \ sort based on decimal value.\n\n    It must be implemented like this:\n    >>>\
  \ sort_array([1L, 5L, 2L, 3L, 4L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> sort_array([-2L,\
  \ -3L, -4L, -5L, -6L])\n    [-6L, -5L, -4L, -3L, -2L]\n    >>> sort_array([1L, 0L,\
  \ 2L, 3L, 4L])\n    [0L, 1L, 2L, 3L, 4L]\n    \n*/\nlong[] sort_array(long[] arr)\
  \ \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L,\
  \ 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L,\
  \ -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L,\
  \ 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L,\
  \ 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L,\
  \ 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L,\
  \ 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L,\
  \ 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L,\
  \ 16L, 32L]);\n}\nvoid main(){}"
completions: ["{\n    long[] res = new long[arr.length];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        long ones = arr[i];\n        long tens = ones * 10;\n \
    \       long hundreds = tens * 100;\n        long thousands = hundreds * 1000;\n\
    \        long tenThousands = thousands * 10000;\n        long oneThousands = tenThousands\
    \ * 100000;\n        long hundredThousands = oneThousands * 1000000;\n       \
    \ long millions = hundredThousands * 10000000;\n        long billions = millions\
    \ * 1000000000;\n        long trillions = billions * 10000000000;\n        long\
    \ quadrillions = trillions * 100000000000;\n        long quintillions = quadrillions\
    \ * 1000000000000;\n        long sextillions = quintillions * 100000000000000;\n\
    \        long septillions = sextillions * 1000000000000000;\n        long octillions\
    \ = septillions * 10000000000000000;\n        long nonillions = octillions * 100000000000000000;\n\
    \        long decillions = nonillions * 1000000000000000000;\n        long undecillions\
    \ = decillions * 10000000000000000000;\n        long duodecillions = undecillions\
    \ * 100000000000000000000;\n        long tredecillions = duodecillions * 10000000000000000000000;\n\
    \        long quattuordecillions = tredecillions * 100000000000000000000000;\n\
    \        long sexdecillions = quattuordecillions * 1000000000000000000000000;\n\
    \        long septendecillions = sexdecillions * 100000000000000000000000000;\n\
    \        long octodecillions = septendecillions * 1000000000000000000000000000;\n\
    \        long novemdecillions = octodecillions * 10000000000000000000000000000;\n\
    \        long vigintillions = novemdecillions * 1000000000000000000000000000000;\n\
    \        long unvigintillions = vigintillions * 10000000000000000000000000000000;\n\
    \        long duovigintillions = unvigintillions * 100000000000000000000000000000000;\n\
    \        long trevigintillions = duovigintillions * 100000000000000000000000000000000;\n\
    \        long quattuorvigintillions = trevigintillions * 1000000000000000000000000000000",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \            ones++;\n        else\n            zeros++;\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n            result[i]\
    \ = ones;\n        else\n            result[i] = zeros;\n    }\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        if(result[i] > result[i+1])\n    \
    \    {\n            long temp = result[i];\n            result[i] = result[i+1];\n\
    \            result[i+1] = temp;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,java |>\n<| c |>\nThis is not the correct solution.\
    \ Your solution sorts the array in descending order. But the question asks to\
    \ sort the array in ascending order.\n<|/ c |>\n<| c |>\nI edited my answer. Now\
    \ it sorts the array in ascending order.\n<|/ c |>\n<| c |>\nThis is not the correct\
    \ solution. Your solution sorts the array in descending order. But the question\
    \ asks to sort the array in ascending order.\n<|/ c |>\n<| c |>\nI edited my answer.\
    \ Now it sorts the array in ascending order.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = arr[i];\n  \
    \  }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,algorithm,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    long sum = 0;\n    long temp = 0;\n    long ones = 0;\n \
    \   long tens = 0;\n    long hundreds = 0;\n    long thousands = 0;\n    long\
    \ count = 0;\n    long max = 0;\n    long min = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long ", "{\n    long[]\
    \ result = new long[arr.length];\n    long[] ones = new long[arr.length];\n  \
    \  long[] zeros = new long[arr.length];\n    long[] ones_counter = new long[arr.length];\n\
    \    long[] zeros_counter = new long[arr.length];\n    long[] ones_counter2 =\
    \ new long[arr.length];\n    long[] zeros_counter2 = new long[arr.length];\n \
    \   \n    for(int i = 0; i < arr.length; i++)\n    {\n        ones[i] = 0;\n \
    \       zeros[i] = 0;\n        ones_counter[i] = 0;\n        zeros_counter[i]\
    \ = 0;\n        ones_counter2[i] = 0;\n        zeros_counter2[i] = 0;\n    }\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] == 1)\n\
    \        {\n            ones_counter[i]++;\n        }\n        else\n        {\n\
    \            zeros_counter[i]++;\n        }\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(ones_counter[i] > zeros_counter[i])\n\
    \        {\n            ones_counter2[i] = ones_counter[i];\n            zeros_counter2[i]\
    \ = zeros_counter[i];\n        }\n        else\n        {\n            ones_counter2[i]\
    \ = zeros_counter[i];\n            zeros_counter2[i] = ones_counter[i];\n    \
    \    }\n    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        if(ones_counter2[i]\
    \ > zeros_counter2[i])\n        {\n            ones[i] = 1;\n            zeros[i]\
    \ = 0;\n        }\n        else\n        {\n            ones[i] = 0;\n       \
    \     zeros[i] = 1;\n        }\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = arr[ones_counter2[i]];\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_array(arr):\n    \n    ones = [0]\n    zeros = [0]\n    \n  \
    \  ones_counter = [0]\n    zeros_counter = [0]\n    \n    ones_counter2 = [0]\n\
    \    zeros_counter2 = [0]\n    \n    \n    for i in range(len(arr)):\n       \
    \ if arr[i] == 1:\n            ones_counter[0] += 1\n        else:\n         \
    \   zeros_counter[0] += 1\n    \n    for i in range(len(arr)):\n        if ones_counter[0]\
    \ > zeros_counter[0]:\n            ones_counter2[0] = ones_counter[0]\n      \
    \      zeros_counter2[0] = zeros_counter[0]\n        else:\n            ones_counter2[0]\
    \ = zeros_counter[0]\n            zeros_counter2[0] = ones_counter[0]", "{\n \
    \   long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            result[zeros + i] = arr[i];\n            zeros++;\n  \
    \      }\n        else\n        {\n            result[ones + i] = arr[i];\n  \
    \          ones++;\n        }\n    }\n    for(int i = 0; i < zeros; i++)\n   \
    \ {\n        result[i] = 0;\n    }\n    for(int i = ones; i < arr.length; i++)\n\
    \    {\n        result[i] = arr[i - ones];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| a tags=sorting,arrays,c# |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long[] result = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; ++i)\n    {\n        int count = 0;\n\
    \        \n        for(int j = 0; j < arr.length; ++j)\n        {\n          \
    \  if(arr[j] == 1)\n            {\n                ++count;\n            }\n \
    \       }\n        \n        if(count == 0)\n        {\n            result[i]\
    \ = arr[i];\n        }\n        else\n        {\n            int pos = 0;\n  \
    \          int neg = 0;\n            \n            for(int j = 0; j < arr.length;\
    \ ++j)\n            {\n                if(arr[j] == 1)\n                {\n  \
    \                  if(j > 0)\n                    {\n                        result[i]\
    \ = arr[pos];\n                        break;\n                    }\n       \
    \             else\n                    {\n                        result[i] =\
    \ arr[neg];\n                        break;\n                    }\n         \
    \       }\n                else if(arr[j] == 0)\n                {\n         \
    \           if(j > 0)\n                    {\n                        result[i]\
    \ = arr[pos];\n                        break;\n                    }\n       \
    \             else\n                    {\n                        result[i] =\
    \ arr[neg];\n                        break;\n                    }\n         \
    \       }\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThanks for your answer.\
    \ Your code works but it is too slow for my purposes. I need a faster solution.\
    \ Thanks anyway\n<|/ c |>\n<| c |>\nI tested it and it works fast enough for me.\
    \ Can you give me some more info about your data set? How many elements are there?\
    \ How many zeros and ones are there? What is the average number of ones and zeros?\n\
    <|/ c |>\n<| c |>\nI tested it on [this array](http://pastebin.com/raw.php?i=QVKXyKYU)\
    \ and it took about 2 seconds to sort it. What is the average number of ones and\
    \ zeros?\n<|/ c |>\n<| c |>\nThe average number of ones and zeros is about 20.\
    \ There are about 5000 elements in the array\n<|/ c |>\n<| c |>\nI tested it on\
    \ [this array](http://pastebin.com/raw.php?i=QVKXyKYU) and it took about 2 seconds\
    \ to sort it. What is the average number of ones and zeros?\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[arr.length];\n    int[] count = new int[arr.length];\n    int i, j, k;\n\
    \    \n    for (i = 0; i < arr.length; i++)\n        count[arr[i]]++;\n    \n\
    \    for (i = 0; i < arr.length; i++)\n        result[i] = 0;\n    \n    for (i\
    \ = 0; i < arr.length; i++)\n    {\n        for (j = 0; j < count[arr[i]]; j++)\n\
    \        {\n            k = arr[i];\n            result[k] += j;\n           \
    \ arr[i] = k;\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis solution is O(n^2) but it is very elegant and easy to understand.\n\
    <|/ c |>\n<| c |>\nYes, it is O(n^2) but it is very elegant and easy to understand.\n\
    <|/ c |>\n<| c |>\nI believe this solution is O(n^2) but it is very elegant and\
    \ easy to understand.\n<|/ c |>\n<| c |>\nI believe this solution is O(n^2) but\
    \ it is very elegant and easy to understand.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is O(n^2) but it is very elegant and easy to understand.\n<|/ c |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            ones++;\n        }\n        else\n        {\n        \
    \    zeros++;\n        }\n    }\n    long onesMax = ones;\n    long zerosMax =\
    \ zeros;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] >\
    \ 0)\n        {\n            ones--;\n        }\n        else\n        {\n   \
    \         zeros--;\n        }\n        if(ones > onesMax)\n        {\n       \
    \     onesMax = ones;\n        }\n        if(zeros > zerosMax)\n        {\n  \
    \          zerosMax = zeros;\n        }\n    }\n    long onesMaxIndex = -1;\n\
    \    long zerosMaxIndex = -1;\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] > 0)\n        {\n            ones--;\n        }\n        else\n\
    \        {\n            zeros--;\n        }\n        if(ones > onesMax)\n    \
    \    {\n            onesMax = ones;\n            onesMaxIndex = i;\n        }\n\
    \        if(zeros > zerosMax)\n        {\n            zerosMax = zeros;\n    \
    \        zerosMaxIndex = i;\n        }\n    }\n    if(onesMaxIndex == -1)\n  \
    \  {\n        onesMaxIndex = arr.length - 1;\n    }\n    if(zerosMaxIndex == -1)\n\
    \    {\n        zerosMaxIndex = arr.length - 1;\n    }\n    long onesMaxValue\
    \ = arr[onesMaxIndex];\n    long zerosMaxValue = arr[zerosMaxIndex];\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n    \
    \        ones--;\n        }\n        else\n        {\n            zeros--;\n \
    \       }\n        if(ones > onesMax)\n        {\n            onesMax = ones;\n\
    \            onesMaxIndex = i;\n            onesMaxValue = arr[i];\n        }\n\
    \        if(zeros > zerosMax)\n        {\n            zerosMax = zeros;\n    \
    \        zerosMaxIndex = i;\n            zerosMaxValue = arr[i];\n        }\n\
    \    }\n    long onesMaxIndexValue = arr[onesMaxIndex];\n    long zerosMaxIndexValue\
    \ = arr[zerosMaxIndex];\n    for(int i = 0; i < arr.length; i++)\n    {\n    \
    \    if(arr[i] > 0)\n        {\n            ones--;\n        }\n        else\n\
    \        {\n            zeros--;\n        }\n        if(ones > onesMax)\n    \
    \    {\n            onesMax = ones;\n            onesMaxIndex = i;\n         \
    \   onesMaxValue = arr[i];\n            ", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n    \
    \    for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                count++;\n            }\n        }\n    \
    \    result[i] = count;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `sort_array(new long[]{1L,\
    \ 5L, 2L, 3L, 4L})` returns `[1L, 2L, 3L, 4L, 5L]`, not `[1L, 2L, 3L, 4L, 5L]`.\n\
    <|/ c |>\n<| c |>\nYes, I missed that part. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ for(int i = 0; i < arr.length; i++)\n    {\n        int count = 0;\n       \
    \ for(int j = 0; j < arr.length; j++)\n        {\n            if(arr[j] == i)\n\
    \            {\n                count++;\n            }\n        }\n        result[i]\
    \ = count;\n    }\n    Arrays.sort(result);\n    return result;\n}", "{\n    long[]\
    \ result = new long[arr.length];\n    int[] count = new int[arr.length];\n   \
    \ for(int i = 0; i < arr.length; ++i)\n    {\n        count[arr[i]]++;\n    }\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        result[i] = 0;\n    \
    \    for(int j = 0; j < count[arr[i]]; ++j)\n        {\n            result[i]\
    \ += (1 << j);\n        }\n    }\n    for(int i = 0; i < arr.length; ++i)\n  \
    \  {\n        result[i] /= count[arr[i]];\n    }\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        result[i] = std.math.min(result[i], std.math.max(arr[i],\
    \ 0));\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| a |>\n<code>\nfunction sortArray(arr) {\n    var result = [];\n    var\
    \ count = {};\n    for(var i in arr) {\n        if(!count[arr[i]]) {\n       \
    \     count[arr[i]] = 1;\n        } else {\n            count[arr[i]]++;\n   \
    \     }\n    }\n    for(var i in arr) {\n        result.push(arr[i]);\n    }\n\
    \    for(var i in arr) {\n        for(var j in count) {\n            if(arr[i]\
    \ == j) {\n                result.push(j);\n            }\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction sortArray(arr) {\n    var result = [];\n\
    \    var count = {};\n    for(var i in arr) {\n        if(!count[arr[i]]) {\n\
    \            count[arr[i]] = 1;\n        } else {\n            count[arr[i]]++;\n\
    \        }\n    }\n    for(var i in arr) {\n        result.push(arr[i]);\n   \
    \ }\n    for(var i in arr) {\n        for(var j in count) {\n            if(arr[i]\
    \ == j) {\n                result.push(j);\n            }\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| a\
    \ |>\n<code>\nfunction sortArray(arr) {\n    var result = [];\n    var count =\
    \ {};\n    for(var i in arr) {\n        if(!count[arr[i]]) {\n            count[arr[i]]\
    \ = 1;\n        } else {\n            count[arr[i]]++;\n        }\n    }\n   \
    \ for(var i in arr) {\n        result.push(arr[i]);\n    }\n    for(var i in arr)\
    \ {\n        for(var j in count) {\n            if(arr[i] == j) {\n          \
    \      result.push(j);\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 tags=sorting,algorithm,arrays |>\n<| a tag", "{\n \
    \   long[] result = new long[arr.length];\n    long ones = 0;\n    long zeros\
    \ = 0;\n    long max = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n \
    \       if(arr[i] == 1) ones++;\n        else zeros++;\n        if(arr[i] == 0)\
    \ max++;\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ == 1) ones--;\n        else zeros--;\n        if(arr[i] == 0) max--;\n    }\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones++;\n\
    \        else zeros++;\n        if(arr[i] == 0) max++;\n    }\n    for(int i =\
    \ 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones--;\n        else\
    \ zeros--;\n        if(arr[i] == 0) max--;\n    }\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] == 1) ones++;\n        else zeros++;\n     \
    \   if(arr[i] == 0) max++;\n    }\n    for(int i = 0; i < arr.length; i++) \n\
    \    {\n        if(arr[i] == 1) ones--;\n        else zeros--;\n        if(arr[i]\
    \ == 0) max--;\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n     \
    \   if(arr[i] == 1) ones++;\n        else zeros++;\n        if(arr[i] == 0) max++;\n\
    \    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] ==\
    \ 1) ones--;\n        else zeros--;\n        if(arr[i] == 0) max--;\n    }\n \
    \   for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones++;\n\
    \        else zeros++;\n        if(arr[i] == 0) max++;\n    }\n    for(int i =\
    \ 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones--;\n        else\
    \ zeros--;\n        if(arr[i] == 0) max--;\n    }\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] == 1) ones++;\n        else zeros++;\n     \
    \   if(arr[i] == 0) max++;\n    }\n    for(int i = 0; i < arr.length; i++) \n\
    \    {\n        if(arr[i] == 1) ones--;\n        else zeros--;\n        if(arr[i]\
    \ == 0) max--;\n    }\n    for(int i = 0; i < arr.length; i++) \n    {\n     \
    \   if(arr[i] == 1) ones++;\n        else zeros++;\n        if(arr[i] == 0) max++;\n\
    \    }\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] ==\
    \ 1) ones--;\n        else zeros--;\n        if(arr[i] == 0) max--;\n    }\n \
    \   for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones++;\n\
    \        else zeros++;\n        if(arr[i] == 0) max++;\n    }\n    for(int i =\
    \ 0; i < arr.length; i++) \n    {\n        if(arr[i] == 1) ones--;\n        else ",
  "{\n    long[] res = new long[arr.length];\n    long ones = 0;\n    long zeros =\
    \ 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] == 1)\n        {\n            ones++;\n     \
    \   }\n        else\n        {\n            zeros++;\n        }\n        if(arr[i]\
    \ > max)\n        {\n            max = arr[i];\n        }\n        if(arr[i] <\
    \ min)\n        {\n            min = arr[i];\n        }\n    }\n    long onesMax\
    \ = ones * max;\n    long onesMin = ones * min;\n    long zerosMax = zeros * max;\n\
    \    long zerosMin = zeros * min;\n    long onesDiff = onesMax - onesMin;\n  \
    \  long zerosDiff = zerosMax - zerosMin;\n    long maxDiff = onesDiff + zerosDiff;\n\
    \    long minDiff = onesMax - zerosMin;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] == 1)\n        {\n            res[i] = onesMin;\n  \
    \      }\n        else\n        {\n            res[i] = zerosMin;\n        }\n\
    \        if(arr[i] > max)\n        {\n            res[i] = maxDiff;\n        }\n\
    \        if(arr[i] < min)\n        {\n            res[i] = minDiff;\n        }\n\
    \    }\n    return res;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting |>\n\
    <| c |>\nI guess this solution will work only with positive integers. I guess\
    \ it would be better to have some kind of overflow check. Also this solution doesn't\
    \ take into account that there might be negative numbers in the array.\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. My solution doesn't take into account negative\
    \ numbers. I added a solution for negative numbers in the answer.\n<|/ c |>\n\
    <| c |>\nI added a solution for negative numbers in the answer.\n<|/ c |>\n<|\
    \ c |>\nI added a solution for negative numbers in the answer.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\ndef sort(arr):\n    arr.sort()\n    arr.sort(key=lambda\
    \ x:(-x, x))\n    return arr\n</code>\n<|/ a tags=arrays,algorithm,sorting |>\n\
    <| c |>\nThis solution doesn't take into account that there might be negative\
    \ numbers in the array.\n<|/ c |>\n<| a tags=arrays,algorithm,sorting |>\n<code>\n\
    def sort(arr):\n    arr.sort()\n    arr.sort(key=lambda x:(-x, x))\n    return\
    \ arr\n</code>\n", "{\n    long[] result = new long[arr.length];\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int temp = 0;\n\
    \    \n    while(i < arr.length)\n    {\n        temp = arr[i];\n        while(temp\
    \ != 0)\n        {\n            int temp = temp/2;\n            count++;\n   \
    \     }\n        \n        while(count > 0)\n        {\n            result[k]\
    \ = arr[j];\n            j++;\n            count--;\n            k++;\n      \
    \  }\n        \n        while(j < arr.length)\n        {\n            temp = arr[j];\n\
    \            while(temp != 0)\n            {\n                temp = temp/2;\n\
    \                count++;\n            }\n            \n            while(count\
    \ > 0)\n            {\n                result[k] = arr[j];\n                j++;\n\
    \                count--;\n                k++;\n            }\n        }\n  \
    \      i++;\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[arr.length];\n    long[] count = new long[arr.length];\n\
    \    long[] ones = new long[arr.length];\n    long[] decs = new long[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; i++)\n    {\n        count[i] = 0;\n\
    \        ones[i] = 0;\n        decs[i] = 0;\n    }\n    \n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        if(arr[i] == 1)\n        {\n            count[i]++;\n\
    \            ones[i]++;\n        }\n        else\n        {\n            decs[i]\
    \ = decs[i] - ones[i] + arr[i];\n            count[i]--;\n        }\n    }\n \
    \   \n    for(int i = 0; i < arr.length; i++)\n    {\n        result[i] = decs[i];\n\
    \    }\n    \n    for(int i = 0; i < arr.length; i++)\n    {\n        decs[i]\
    \ = decs[i] - ones[i] + count[i];\n    }\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        result[i] = decs[i];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| c |>\nI like this solution,\
    \ it's simple and easy to understand.\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work for negative numbers. I made a solution that works for negative numbers,\
    \ see my answer below.\n<|/ c |>\n<| a dscore=2 |>\nI made a solution that works\
    \ for negative numbers. I used the fact that in binary representation of negative\
    \ numbers, all 1s are to the left of the highest 1 in the binary representation.\
    \ \n<code>\ndef sort_array(arr):\n    sorted_arr = []\n    sorted_arr.extend(arr)\n\
    \    sorted_arr.sort()\n    sorted_arr.extend([0] * (len(arr) - len(sorted_arr)))\n\
    \    sorted_arr.sort()\n    return sorted_arr\n</code>\n<|/ a tags=sorting,algorithm,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\ndef sort_array(arr):\n    sorted_arr = []\n  \
    \  sorted_arr.extend(arr)\n    sorted_arr.sort()\n    sorted_arr.extend([0] *\
    \ (len(arr) - len(sorted_arr)))\n    sorted_arr.sort()\n    return sorted_arr\n\
    </code>\n<|/ a tags=sorting,algorithm,arrays |>\n<| a tags=sorting,algorithm,arrays\
    \ |>\n<code>\ndef sort_array(arr):\n    sorted_arr = []\n    sorted_arr.extend(arr)\n\
    \    sorted_arr.sort()\n    sorted_arr.extend([0] * (len(arr) - len(sorted_arr)))\n\
    \    sorted_arr.sort()\n    return sorted_arr\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nPlease add some explanation to your ", "{\n    long[] result = new long[arr.length];\n\
    \    int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(count[arr[i]] > 1)\n        {\n            int j;\n\
    \            for(j = 0; j < arr.length; j++)\n            {\n                if(arr[j]\
    \ == arr[i])\n                {\n                    break;\n                }\n\
    \            }\n            int temp = arr[i];\n            arr[i] = arr[j];\n\
    \            arr[j] = temp;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1L, 5L,\
    \ 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `sort_array([1L,\
    \ 5L, 2L, 3L, 4L])`.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n   \
    \ int[] count = new int[arr.length];\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        count[arr[i]]++;\n    }\n    for(int i = 0; i < arr.length; ++i)\n\
    \    {\n        result[i] = arr[i];\n    }\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        for(int j = 0; j < count[arr[i]]; ++j)\n        {\n   \
    \         int temp = result[i];\n            result[i] = result[j];\n        \
    \    result[j] = temp;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis solution has O(n^2) complexity. Sorting can be done in O(nlogn)\
    \ complexity using radix sort or counting sort or bucket sort. But the solution\
    \ provided by is much simpler and more efficient.\n<|/ c |>\n<| c |>\n: I agree.\
    \ But the question was about sorting an array of non-negative integers according\
    \ to number of ones in their binary representation in ascending order. Radix sort\
    \ is O(n^2) complexity and counting sort is O(nlogn) complexity. But the solution\
    \ provided by is much simpler and more efficient.\n<|/ c |>\n<| c |>\nYes, I agree\
    \ with you. But the question was about sorting an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Radix sort is O(n^2) complexity and counting sort is O(nlogn) complexity. But\
    \ the solution provided by is much simpler and more efficient.\n<|/ c |>\n<| c\
    \ |>\n: I agree. But the question was about sorting an array of non-negative integers\
    \ according to number of ones in their binary representation in ascending order.\
    \ Radix sort is O(n^2) complexity and counting sort is O(nlogn) complexity. But\
    \ the solution provided by is much simpler and more efficient.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[arr.length];\n    long[] ones = new long[arr.length];\n\
    \    long[] zeros = new long[arr.length];\n    int i = 0;\n    int j = 0;\n  \
    \  int k = 0;\n    \n    for(int n = 0; n < arr.length; n++)\n    {\n        if(arr[n]\
    \ == 1)\n        {\n            ones[k] = arr[n];\n            k++;\n        }\n\
    \        else\n        {\n            zeros[k] = arr[n];\n            k++;\n \
    \       }\n    }\n    \n    for(int n = 0; n < arr.length; n++)\n    {\n     \
    \   if(ones[k] == arr[n])\n        {\n            result[j] = ones[k];\n     \
    \       j++;\n            k++;\n        }\n        else if(zeros[k] == arr[n])\n\
    \        {\n            result[j] = zeros[k];\n            j++;\n            k++;\n\
    \        }\n        else\n        {\n            result[j] = arr[n];\n       \
    \     j++;\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nI believe this solution has a bug. For example, sort_array([1L,\
    \ 5L, 2L, 3L, 4L]) returns [1L, 2L, 3L, 4L, 5L], but sort_array([-2L, -3L, -4L,\
    \ -5L, -6L]) returns [-6L, -5L, -4L, -3L, -2L]\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution is O(n^2) in worst case. Can you please suggest a better solution?\n\
    <|/ c |>\n<| c |>\nI believe this solution is O(n) in worst case. Can you please\
    \ suggest a better solution?\n<|/ c |>\n<| c |>\nI believe this solution is O(n)\
    \ in worst case. Can you please suggest a better solution?\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        int count = 0;\n    \
    \    for(int j = 0; j < arr.length; ++j)\n        {\n            if(arr[j] ==\
    \ 1)\n            {\n                ++count;\n            }\n        }\n    \
    \    if(count == 0)\n        {\n            result[i] = arr[i];\n        }\n \
    \       else\n        {\n            int decimal = count * 10 + arr[i] % 10;\n\
    \            result[i] = decimal;\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThis doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1L, 5L, 2L, 3L, 4L])`.\n\
    <|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = {1L, 5L, 2L, 3L, 4L};\n    int[] result\
    \ = new int[arr.length];\n    int count = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        for (int j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ == 1) {\n                count++;\n            }\n        }\n        if (count\
    \ == 0) {\n            result[i] = arr[i];\n        }\n        else {\n      \
    \      int decimal = count * 10 + arr[i] % 10;\n            result[i] = decimal;\n\
    \        }\n    }\n    Arrays.sort(result);\n    for (int i = 0; i < result.length;\
    \ i++) {\n        System.out.println(result[i]);\n    }\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static void main(String[] args) {\n   \
    \ int[] arr = {1L, 5L, 2L, 3L, 4L};\n    int[] result = new int[arr.length];\n\
    \    int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        for (int\
    \ j = 0; j < arr.length; j++) {\n            if (arr[j] == 1) {\n            \
    \    count++;\n            }\n        }\n        if (count == 0) {\n         \
    \   result[i] = arr[i];\n        }\n        else {\n            int decimal =\
    \ count * 10"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
