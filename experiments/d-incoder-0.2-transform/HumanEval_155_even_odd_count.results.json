{
  "language": "d",
  "name": "HumanEval_155_even_odd_count",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyv15lg2r.d(29): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv15lg2r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even, odd;\n    even = num / 10;\n    odd = num % 10;\n    return Tuple!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501): Error: template instance `parseSpecs!(even, odd)` cannot use local `even` as parameter to non-global template `parseSpecs(Specs...)`\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501): Error: template instance `parseSpecs!(even, odd)` cannot use local `odd` as parameter to non-global template `parseSpecs(Specs...)`\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614): Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp6xjqerug.d(18): Error: template instance `tmp6xjqerug.even_odd_count.Tuple!(even, odd)` error instantiating\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6xjqerug.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjt9w7y_u.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpjt9w7y_u.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt9w7y_u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpshaldiq7.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpshaldiq7.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshaldiq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpue2u5n_s.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpue2u5n_s.d(25): Error: found `,` instead of statement\n/tmp/tmpue2u5n_s.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpue2u5n_s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ccg51aj.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3ccg51aj.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ccg51aj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphbadmy3r.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmphbadmy3r.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbadmy3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2jq_84v.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw2jq_84v.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2jq_84v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5j_hny7_.d(26): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j_hny7_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven a positive integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkenyhqqp.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpkenyhqqp.d(30): Error: found `,` instead of statement\n/tmp/tmpkenyhqqp.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkenyhqqp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2pnxuyc0.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp2pnxuyc0.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pnxuyc0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplr2yf3fg.d(25): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr2yf3fg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwrf3f8vt.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpwrf3f8vt.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrf3f8vt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa812qws3.d(26): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpa812qws3.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa812qws3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt_4dmip6.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpt_4dmip6.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_4dmip6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2itww89.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\n/tmp/tmpp2itww89.d(31): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2itww89.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsyxxbi05.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpsyxxbi05.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyxxbi05.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\n/*\nGiven a string. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9sjqt63n.d(30): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp9sjqt63n.d(30): Error: found `,` instead of statement\n/tmp/tmp9sjqt63n.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9sjqt63n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmve34wyw.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmve34wyw.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmve34wyw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3m_mpvbp.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3m_mpvbp.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m_mpvbp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmbuh6r95.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmbuh6r95.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbuh6r95.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw9ntmmii.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw9ntmmii.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9ntmmii.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong digit = 0;\n\tlong i = 0;\n\twhile(num > 0)\n\t{\n\t\tdigit = num % 10;\n\t\tnum = num / 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3v9s6f07.d(32): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3v9s6f07.d(32): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v9s6f07.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkp2btjcu.d(25): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp2btjcu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqkq_t8bk.d(29): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqkq_t8bk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsan5ayjz.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpsan5ayjz.d(29): Error: found `,` instead of statement\n/tmp/tmpsan5ayjz.d(31): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsan5ayjz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6cda0vx3.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp6cda0vx3.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cda0vx3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu76pasyu.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpu76pasyu.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu76pasyu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp827b5_py.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp827b5_py.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp827b5_py.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_4ibdp6l.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp_4ibdp6l.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4ibdp6l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmve34wyw.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmve34wyw.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmve34wyw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\n/*\nGiven a floating point number. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe54yob_5.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpe54yob_5.d(25): Error: found `,` instead of statement\n/tmp/tmpe54yob_5.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe54yob_5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppo0fq8ma.d(30): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo0fq8ma.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo674xs24.d(26): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo674xs24.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsyxxbi05.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpsyxxbi05.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyxxbi05.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppo0fq8ma.d(30): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo0fq8ma.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsyxxbi05.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpsyxxbi05.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyxxbi05.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp827b5_py.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp827b5_py.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp827b5_py.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even_odd_count(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4mbw0y8c.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mbw0y8c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9a8u3n4f.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp9a8u3n4f.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9a8u3n4f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt_4dmip6.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpt_4dmip6.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_4dmip6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong temp = num % 10;\n\t\teven = even * 10 + temp;\n\t\todd = odd + temp;\n\t\tnum = num / 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5bnws5_f.d(24): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp5bnws5_f.d(24): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bnws5_f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\n/*\nGiven a tuple of integers. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd4gy9ovp.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpd4gy9ovp.d(26): Error: found `,` instead of statement\n/tmp/tmpd4gy9ovp.d(28): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4gy9ovp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprnyr414l.d(30): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmprnyr414l.d(30): Error: found `,` instead of statement\n/tmp/tmprnyr414l.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnyr414l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpioc537w0.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpioc537w0.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpioc537w0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp74gn8xri.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp74gn8xri.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74gn8xri.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1ycukjwe.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp1ycukjwe.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ycukjwe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_4ibdp6l.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp_4ibdp6l.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4ibdp6l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkuk4s2_y.d(25): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkuk4s2_y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc17cvvvj.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc17cvvvj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    long digit;\n    for(digit = num; digit > 0; digit /= 10)\n    {\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_eff42db.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp_eff42db.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_eff42db.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpksr5lh58.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpksr5lh58.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpksr5lh58.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp972kym1z.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp972kym1z.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp972kym1z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyv15lg2r.d(29): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv15lg2r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3m_mpvbp.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3m_mpvbp.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m_mpvbp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n            even++;\n        else\n            odd++;\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr6n14tps.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpr6n14tps.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6n14tps.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3qlwrp_a.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3qlwrp_a.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qlwrp_a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw9ntmmii.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw9ntmmii.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9ntmmii.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp827b5_py.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp827b5_py.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp827b5_py.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzdzq7d07.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpzdzq7d07.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdzq7d07.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwrf3f8vt.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpwrf3f8vt.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrf3f8vt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp972kym1z.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp972kym1z.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp972kym1z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9a8u3n4f.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp9a8u3n4f.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9a8u3n4f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3l_rvx8q.d(25): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l_rvx8q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven a floating point number. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnaczmoor.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpnaczmoor.d(30): Error: found `,` instead of statement\n/tmp/tmpnaczmoor.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnaczmoor.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp06txta6h.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp06txta6h.d(25): Error: found `,` instead of statement\n/tmp/tmp06txta6h.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06txta6h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv1aaum_c.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpv1aaum_c.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1aaum_c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1iy_r2kn.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp1iy_r2kn.d(29): Error: found `,` instead of statement\n/tmp/tmp1iy_r2kn.d(31): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1iy_r2kn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw737c1yn.d(30): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpw737c1yn.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw737c1yn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvn4903_c.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpvn4903_c.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn4903_c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n            even++;\n        else\n            odd++;\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpel4scw65.d(26): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpel4scw65.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpel4scw65.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\n/*\nGiven a positive integer. return a tuple that has the number of digits in it.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps97htige.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmps97htige.d(25): Error: found `,` instead of statement\n/tmp/tmps97htige.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps97htige.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjt9w7y_u.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpjt9w7y_u.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt9w7y_u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmve34wyw.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmve34wyw.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmve34wyw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi3_5x_yd.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpi3_5x_yd.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3_5x_yd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw9ntmmii.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw9ntmmii.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9ntmmii.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwrf3f8vt.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpwrf3f8vt.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrf3f8vt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_hngmrj4.d(30): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hngmrj4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4c4bwlws.d(25): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4c4bwlws.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgqe0yeac.d(29): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqe0yeac.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjt9w7y_u.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpjt9w7y_u.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt9w7y_u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3vwshc2v.d(26): Error: multiple ! arguments are not allowed\n/tmp/tmp3vwshc2v.d(28): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vwshc2v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2jq_84v.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw2jq_84v.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2jq_84v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsyxxbi05.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpsyxxbi05.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyxxbi05.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyckilsj5.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpyckilsj5.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyckilsj5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpog19qxi1.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpog19qxi1.d(25): Error: found `,` instead of statement\n/tmp/tmpog19qxi1.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpog19qxi1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1ycukjwe.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp1ycukjwe.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ycukjwe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0v84jtzp.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp0v84jtzp.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v84jtzp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while (num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6g5a6dzu.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp6g5a6dzu.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g5a6dzu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqlzrpmq6.d(26): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpqlzrpmq6.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqlzrpmq6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven a floating point number. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnaczmoor.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpnaczmoor.d(30): Error: found `,` instead of statement\n/tmp/tmpnaczmoor.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnaczmoor.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt_4dmip6.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpt_4dmip6.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_4dmip6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2jq_84v.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw2jq_84v.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2jq_84v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv1aaum_c.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpv1aaum_c.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1aaum_c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2_ov5uxh.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp2_ov5uxh.d(29): Error: found `,` instead of statement\n/tmp/tmp2_ov5uxh.d(31): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_ov5uxh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ccg51aj.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3ccg51aj.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ccg51aj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        if(digit % 2 == 0) {\n            even++;\n        }\n        else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) even, odd;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoj2ka241.d(26): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpoj2ka241.d(26): Error: found `,` instead of statement\n/tmp/tmpoj2ka241.d(28): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoj2ka241.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbykf7n5e.d(25): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbykf7n5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong temp = num;\n\twhile(temp != 0)\n\t{\n\t\tlong digit = temp % 10;\n\t\ttemp = (temp - digit) / 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27s600_0.d(31): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp27s600_0.d(31): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27s600_0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphbadmy3r.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmphbadmy3r.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbadmy3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong temp = num % 10;\n\t\teven = even + temp;\n\t\todd = odd + temp * 2;\n\t\tnum = num / 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3bvrkg8r.d(24): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3bvrkg8r.d(24): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3bvrkg8r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprnyr414l.d(30): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmprnyr414l.d(30): Error: found `,` instead of statement\n/tmp/tmprnyr414l.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnyr414l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkuk4s2_y.d(25): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkuk4s2_y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\tlong digit;\n\twhile(num > 0)\n\t{\n\t\tdigit = num % 10;\n\t\tnum = num / 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcpumgpw4.d(31): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpcpumgpw4.d(31): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpumgpw4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong temp = num % 10;\n\t\teven = even * 10 + temp;\n\t\todd = odd + temp;\n\t\tnum = num / 10;\n\t}\n\treturn Tuple!(long, long)(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpedbcuow3.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428b7d]\n??:? void tmpedbcuow3.__unittest_L26_C1() [0x42802c]\n??:? void tmpedbcuow3.__modtest() [0x4285e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d4ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c3ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430ce1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431190]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430c6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c391]\n??:? runModuleUnitTests [0x42d281]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428fcc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164198
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw9ntmmii.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw9ntmmii.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9ntmmii.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0jked118.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp0jked118.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jked118.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\n/*\nGiven a floating point number. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4vd8rh0.d(30): Error: found `even_odd_count` when expecting `;` following `return` statement\n/tmp/tmpf4vd8rh0.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4vd8rh0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplidq86m4.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmplidq86m4.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplidq86m4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3m_mpvbp.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3m_mpvbp.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m_mpvbp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += digit;\n\t\t} else {\n\t\t\todd += digit;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2hd678u0.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp2hd678u0.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hd678u0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp972kym1z.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp972kym1z.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp972kym1z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while (num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0t4egf1f.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp0t4egf1f.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0t4egf1f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyv15lg2r.d(29): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv15lg2r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzdzq7d07.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpzdzq7d07.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdzq7d07.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyv15lg2r.d(29): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv15lg2r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu76pasyu.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpu76pasyu.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu76pasyu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ccg51aj.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3ccg51aj.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ccg51aj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpshaldiq7.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpshaldiq7.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshaldiq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplcx1garm.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmplcx1garm.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcx1garm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplcx1garm.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmplcx1garm.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcx1garm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpapslvbzi.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpapslvbzi.d(25): Error: found `,` instead of statement\n/tmp/tmpapslvbzi.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapslvbzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvn4903_c.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpvn4903_c.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn4903_c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmve34wyw.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmve34wyw.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmve34wyw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplidq86m4.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmplidq86m4.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplidq86m4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_9ontblk.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp_9ontblk.d(30): Error: found `,` instead of statement\n/tmp/tmp_9ontblk.d(32): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_9ontblk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even, odd;\n    even = num / 10;\n    odd = num % 10;\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5l3lungv.d(18): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp5l3lungv.d(18): Error: found `,` instead of statement\n/tmp/tmp5l3lungv.d(20): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5l3lungv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwrf3f8vt.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpwrf3f8vt.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrf3f8vt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2ucb4wt.d(29): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ucb4wt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmve34wyw.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmve34wyw.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmve34wyw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp72ujxj93.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp72ujxj93.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ujxj93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_6m_2w7v.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp_6m_2w7v.d(26): Error: found `,` instead of statement\n/tmp/tmp_6m_2w7v.d(28): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6m_2w7v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw737c1yn.d(30): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpw737c1yn.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw737c1yn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9j18_67v.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp9j18_67v.d(25): Error: found `,` instead of statement\n/tmp/tmp9j18_67v.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j18_67v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6cda0vx3.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp6cda0vx3.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cda0vx3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu76pasyu.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpu76pasyu.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu76pasyu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgfow6w7x.d(29): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpgfow6w7x.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfow6w7x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6cda0vx3.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp6cda0vx3.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cda0vx3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpapslvbzi.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpapslvbzi.d(25): Error: found `,` instead of statement\n/tmp/tmpapslvbzi.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapslvbzi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9a8u3n4f.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp9a8u3n4f.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9a8u3n4f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpza723lqg.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpza723lqg.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpza723lqg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3l_rvx8q.d(25): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l_rvx8q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqh4avjcu.d(26): Error: multiple ! arguments are not allowed\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh4avjcu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) even_odd_count(even), even_odd_count(odd);\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c01nouz.d(25): Error: found `even_odd_count` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c01nouz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw9ntmmii.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpw9ntmmii.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9ntmmii.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi3_5x_yd.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpi3_5x_yd.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3_5x_yd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum = num / 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3qlwrp_a.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp3qlwrp_a.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qlwrp_a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even, odd);\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9q576y7x.d(29): Error: multiple ! arguments are not allowed\n/tmp/tmp9q576y7x.d(31): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q576y7x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0, odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmg9qc_ps.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmg9qc_ps.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmg9qc_ps.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2agkyv9y.d(30): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmp2agkyv9y.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2agkyv9y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\n/*\nGiven a tuple of integers. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpibxut29f.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpibxut29f.d(29): Error: found `,` instead of statement\n/tmp/tmpibxut29f.d(31): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpibxut29f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp972kym1z.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp972kym1z.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp972kym1z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplidq86m4.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmplidq86m4.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplidq86m4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp146l19_i.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp146l19_i.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146l19_i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjt9w7y_u.d(30): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpjt9w7y_u.d(30): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt9w7y_u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplidq86m4.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmplidq86m4.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplidq86m4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxvssbhsh.d(25): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpxvssbhsh.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvssbhsh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7e_p9r3s.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp7e_p9r3s.d(29): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e_p9r3s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\n/*\nGiven a floating point number. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaz7y3np_.d(29): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpaz7y3np_.d(29): Error: found `,` instead of statement\n/tmp/tmpaz7y3np_.d(31): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaz7y3np_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long, long) even, odd;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv1aaum_c.d(25): Error: found `even` when expecting `;` following `return` statement\n/tmp/tmpv1aaum_c.d(25): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1aaum_c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long, long) odd, even;\n}\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmve34wyw.d(26): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmpmve34wyw.d(26): Error: found `,` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmve34wyw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n{\n    long even = 0;\n    long odd = 0;\n    long digit = 0;\n    while(num > 0)\n    {\n        digit = num % 10;\n        num = num / 10;\n        if(digit % 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n}\n/*\nGiven a long integer. return a tuple that has the number of even and odd digits respectively.\nunittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0xp78i2q.d(31): Error: found `odd` when expecting `;` following `return` statement\n/tmp/tmp0xp78i2q.d(31): Error: found `,` instead of statement\n/tmp/tmp0xp78i2q.d(33): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xp78i2q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164197
    }
  ]
}