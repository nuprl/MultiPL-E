language: d
name: HumanEval_47_median
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\n\
    \    {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvztn966h.d(12): Error: cannot implicitly convert expression
    `l.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpvztn966h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float f = l[mid];\n    float s = l[mid-1];\n    float e = (l[mid-1]\
    \ + l[mid]) / 2;\n    \n    if (e < s) return e;\n    else return s;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmprrdjvonn.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x42828d]\n??:? void tmprrdjvonn.__unittest_L20_C1() [0x427e67]\n??:?
    void tmprrdjvonn.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428750]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286d7]\n??:? _d_run_main [0x428642]\n??:? main [0x428023]\n??:?
    __libc_start_main [0x19bc6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, 0, mid);\n\
    \    else\n        return std.math.mid(l, mid, l.length);\n}\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps38o345b.d(14): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmps38o345b.d(16): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps38o345b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l % 2 == 0) return std.math::median(l);\n    else return (l+1)/2;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnmahu25e.d(13): Error: found `:` when expecting `;` following
    `return` statement\n/tmp/tmpnmahu25e.d(13): Error: found `:` instead of statement\n/tmp/tmpnmahu25e.d(14):
    Error: found `else` without a corresponding `if`, `version` or `debug` statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmahu25e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l == 0)\n        throw new Exception(\"empty list\");\n    long mid =\
    \ l / 2;\n    long l1 = 0, l2 = l;\n    float m1 = 0, m2 = 0, m = 0;\n    float\
    \ mv = 0.0;\n    float mvl = 0.0;\n    float mvl1 = 0.0;\n    float mvl2 = 0.0;\n\
    \    float mvl3 = 0.0;\n    float mvl4 = 0.0;\n    float mvl5 = 0.0;\n    float\
    \ mvl6 = 0.0;\n    float mvl7 = 0.0;\n    float mvl8 = 0.0;\n    float mvl9 =\
    \ 0.0;\n    float mvl10 = 0.0;\n    float mvl11 = 0.0;\n    float mvl12 = 0.0;\n\
    \    float mvl13 = 0.0;\n    float mvl14 = 0.0;\n    float mvl15 = 0.0;\n    float\
    \ mvl16 = 0.0;\n    float mvl17 = 0.0;\n    float mvl18 = 0.0;\n    float mvl19\
    \ = 0.0;\n    float mvl20 = 0.0;\n    float mvl21 = 0.0;\n    float mvl22 = 0.0;\n\
    \    float mvl23 = 0.0;\n    float mvl24 = 0.0;\n    float mvl25 = 0.0;\n    float\
    \ mvl26 = 0.0;\n    float mvl27 = 0.0;\n    float mvl28 = 0.0;\n    float mvl29\
    \ = 0.0;\n    float mvl30 = 0.0;\n    float mvl31 = 0.0;\n    float mvl32 = 0.0;\n\
    \    float mvl33 = 0.0;\n    float mvl34 = 0.0;\n    float mvl35 = 0.0;\n    float\
    \ mvl36 = 0.0;\n    float mvl37 = 0.0;\n    float mvl38 = 0.0;\n    float mvl39\
    \ = 0.0;\n    float mvl40 = 0.0;\n    float mvl41 = 0.0;\n    float mvl42 = 0.0;\n\
    \    float mvl43 = 0.0;\n    float mvl44 = 0.0;\n    float mvl45 = 0.0;\n    float\
    \ mvl46 = 0.0;\n    float mvl47 = 0.0;\n    float mvl48 = 0.0;\n    float mvl49\
    \ = 0.0;\n    float mvl50 = 0.0;\n    float mvl51 = 0.0;\n    float mvl52 = 0.0;\n\
    \    float mvl53 = 0.0;\n    float mvl54 = 0.0;\n    float mvl55 = 0.0;\n    \n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfstxhqwk.d(76): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfstxhqwk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tif (l.length % 2 == 0) \n\t\treturn std.math.mid(l, mid);\n\telse \n\
    \t\treturn std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgpf2_li8.d(14): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpgpf2_li8.d(16): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpf2_li8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float midVal;\n    \n    mid = l.length / 2;\n    midVal = l[mid];\n    \n\
    \    for (i = 0; i < l.length; i++) \n    {\n        if (l[i] < midVal) \n   \
    \     {\n            midVal = l[i];\n        }\n    }\n    \n    return midVal;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpgrk8zm_1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428285]\n??:? void tmpgrk8zm_1.__unittest_L28_C1() [0x427e5f]\n??:?
    void tmpgrk8zm_1.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c307]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b19a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43032d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b171]\n??:? runModuleUnitTests [0x42c0dd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428748]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286cf]\n??:? _d_run_main [0x42863a]\n??:? main [0x42801b]\n??:?
    __libc_start_main [0xc1c90554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long i, mid;\n  \
    \  float sum;\n    \n    sum = 0;\n    mid = l.length / 2;\n    \n    for (i =\
    \ 0; i < mid; i++)\n        sum += l[i];\n    \n    return sum / mid;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxn7dm26n.d(27): unittest failure\n----------------\n??:?
    _d_unittestp [0x42823d]\n??:? void tmpxn7dm26n.__unittest_L23_C1() [0x427e13]\n??:?
    void tmpxn7dm26n.__modtest() [0x427fbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b152]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430794]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430271]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b129]\n??:? runModuleUnitTests [0x42c095]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428700]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428687]\n??:? _d_run_main [0x4285f2]\n??:? main [0x427fcf]\n??:?
    __libc_start_main [0x12223554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n\
    \    if (len < 2)\n        return 0;\n    long mid = len / 2;\n    float median\
    \ = (float) l[mid];\n    float leftMedian = median(l);\n    float rightMedian\
    \ = median(l);\n    float leftMedian2 = median(l);\n    float rightMedian2 = median(l);\n\
    \    float leftMedian3 = median(l);\n    float rightMedian3 = median(l);\n   \
    \ float leftMedian4 = median(l);\n    float rightMedian4 = median(l);\n    float\
    \ leftMedian5 = median(l);\n    float rightMedian5 = median(l);\n    float leftMedian6\
    \ = median(l);\n    float rightMedian6 = median(l);\n    float leftMedian7 = median(l);\n\
    \    float rightMedian7 = median(l);\n    float leftMedian8 = median(l);\n   \
    \ float rightMedian8 = median(l);\n    float leftMedian9 = median(l);\n    float\
    \ rightMedian9 = median(l);\n    float leftMedian10 = median(l);\n    float rightMedian10\
    \ = median(l);\n    float leftMedian11 = median(l);\n    float rightMedian11 =\
    \ median(l);\n    float leftMedian12 = median(l);\n    float rightMedian12 = median(l);\n\
    \    float leftMedian13 = median(l);\n    float rightMedian13 = median(l);\n \
    \   float leftMedian14 = median(l);\n    float rightMedian14 = median(l);\n  \
    \  float leftMedian15 = median(l);\n    float rightMedian15 = median(l);\n   \
    \ float leftMedian16 = median(l);\n    float rightMedian16 = median(l);\n    float\
    \ leftMedian17 = median(l);\n    float rightMedian17 = median(l);\n    float leftMedian18\
    \ = median(l);\n    float rightMedian18 = median(l);\n    float leftMedian19 =\
    \ median(l);\n    float rightMedian19 = median(l);\n    float leftMedian20 = median(l);\n\
    \    float rightMedian20 = median(l);\n    float leftMedian21 = median(l);\n \
    \   float rightMedian21 = median(l);\n    float leftMedian22 = median(l);\n  \
    \  float rightMedian22 = median(l);\n    float leftMedian23 = median(l);\n   \
    \ float rightMedian23\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpibrus3og.d(16): Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpibrus3og.d(63):
    Error: semicolon expected, not `unittest`\n/tmp/tmpibrus3og.d(63): Error: found
    `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibrus3og.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m1 = l[mid];\n    float m2 = l[mid-1];\n    float m3 = l[mid-2];\n\
    \    float m4 = l[mid-3];\n    float m5 = l[mid-4];\n    float m6 = l[mid-5];\n\
    \    float m7 = l[mid-6];\n    float m8 = l[mid-7];\n    float m9 = l[mid-8];\n\
    \    float m10 = l[mid-9];\n    float m11 = l[mid-10];\n    float m12 = l[mid-11];\n\
    \    float m13 = l[mid-12];\n    float m14 = l[mid-13];\n    float m15 = l[mid-14];\n\
    \    float m16 = l[mid-15];\n    float m17 = l[mid-16];\n    float m18 = l[mid-17];\n\
    \    float m19 = l[mid-18];\n    float m20 = l[mid-19];\n    float m21 = l[mid-20];\n\
    \    float m22 = l[mid-21];\n    float m23 = l[mid-22];\n    float m24 = l[mid-23];\n\
    \    float m25 = l[mid-24];\n    float m26 = l[mid-25];\n    float m27 = l[mid-26];\n\
    \    float m28 = l[mid-27];\n    float m29 = l[mid-28];\n    float m30 = l[mid-29];\n\
    \    float m31 = l[mid-30];\n    float m32 = l[mid-31];\n    float m33 = l[mid-32];\n\
    \    float m34 = l[mid-33];\n    float m35 = l[mid-34];\n    float m36 = l[mid-35];\n\
    \    float m37 = l[mid-36];\n    float m38 = l[mid-37];\n    float m39 = l[mid-38];\n\
    \    float m40 = l[mid-39];\n    float m41 = l[mid-40];\n    float m42 = l[mid-41];\n\
    \    float m43 = l[mid-42];\n    float m44 = l[mid-43];\n    float m45 = l[mid-44];\n\
    \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptiwzbhp0.d(59): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptiwzbhp0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat med = std.math.median(l);\n\
    \treturn med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwu8q9vud.d(12): Error: undefined identifier `median` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu8q9vud.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong mid = l.length\
    \ / 2;\n\tfloat a = l[mid];\n\tfloat b = l[mid-1];\n\tfloat c = l[mid+1];\n\t\
    float d = (a + b + c + d) / 4;\n\treturn d;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpapsvlsm6.d(16): Error: undefined identifier `d`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpapsvlsm6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong i, mid;\n\tfloat\
    \ median;\n\t\n\tmid = l.length/2;\n\t\n\tif (l.length % 2 == 0)\n\t{\n\t\tmedian\
    \ = std.math.mid(l, mid);\n\t}\n\telse\n\t{\n\t\tmedian = (std.math.mid(l, mid)\
    \ + std.math.mid(l, mid-1))/2;\n\t}\n\t\n\treturn median;\n}\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdcq4yop6.d(19): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpdcq4yop6.d(23): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmpdcq4yop6.d(23): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcq4yop6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float leftMedian = median(l);\n    float rightMedian = median(l, mid);\n\
    \    return std.fdiv(leftMedian, rightMedian);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmqcz17wb.d(14): Error: function `tmpmqcz17wb.median(long[] l)`
    is not callable using argument types `(long[], long)`\n/tmp/tmpmqcz17wb.d(15):
    Error: undefined identifier `fdiv` in package `std`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmqcz17wb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 1) return 0;\n    float m = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < m) m = l[i];\n    }\n    return m;\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp1ji75n8d.d(24): unittest failure\n----------------\n??:?
    _d_unittestp [0x42828d]\n??:? void tmp1ji75n8d.__unittest_L20_C1() [0x427e67]\n??:?
    void tmp1ji75n8d.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428750]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4286d7]\n??:? _d_run_main [0x428642]\n??:? main [0x428023]\n??:?
    __libc_start_main [0xed1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long l = length(l);\n\
    \    if (l == 0)\n        return 0;\n    float mid = l / 2;\n    float left =\
    \ 0;\n    float right = mid;\n    float median;\n    \n    while (left < right)\
    \ {\n        median = std.math.min(std.math.max(l[left], l[right]), l[mid]);\n\
    \        if (median == l[mid])\n            left++;\n        else if (median ==\
    \ l[right])\n            right--;\n        else\n            mid++;\n    }\n \
    \   return l[mid];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_sakccak.d(12): Error: undefined identifier `length`\n/tmp/tmp_sakccak.d(12):
    Error: variable `l` is shadowing variable `tmp_sakccak.median.l`\n/tmp/tmp_sakccak.d(21):
    Error: undefined identifier `min` in module `std.math`, did you mean function
    `sin`?\n/tmp/tmp_sakccak.d(22): Error: only one index allowed to index `long`\n/tmp/tmp_sakccak.d(24):
    Error: only one index allowed to index `long`\n/tmp/tmp_sakccak.d(29): Error:
    only one index allowed to index `long`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_sakccak.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float m = (float)l[mid];\n    float h = (float)l.length - 1;\n   \
    \ float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n    float m2\
    \ = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n\
    \    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n    float\
    \ h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float h2 = (float)l.length\
    \ - 1;\n    float m = (float)l[mid];\n    float h = (float)l.length - 1;\n   \
    \ float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n    float m2\
    \ = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n\
    \    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n    float\
    \ h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float h2 = (float)l.length\
    \ - 1;\n    float m = (float)l[mid];\n    float h = (float)l.length - 1;\n   \
    \ float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n    float m2\
    \ = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n\
    \    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n    float\
    \ h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float h2 = (float)l.length\
    \ - 1;\n    float m = (float)l[mid];\n    float h = (float)l.length - 1;\n   \
    \ float m1 = (float)l[mid];\n    float h1 = (float)l.length - 1;\n    float m2\
    \ = (float)l[mid];\n    float h2 = (float)l.length - 1;\n    float m = (float)l[mid];\n\
    \    float h = (float)l.length - 1;\n    float m1 = (float)l[mid];\n    float\
    \ h1 = (float)l.length - 1;\n    float m2 = (float)l[mid];\n    float h2 = (float)l.length\
    \ - 1;\n    float m = (float)l[mid];\n    float h\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvg39jbzu.d(13): Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(14):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(15):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(16):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(17):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(18):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(19):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(20):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(21):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(22):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(23):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(24):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(25):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(26):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(27):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(28):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(29):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(30):
    Error: C style cast illegal, use `cast(float)l.length`\n/tmp/tmpvg39jbzu.d(31):
    Error: C style cast illegal, use `cast(float)l[mid]`\n/tmp/tmpvg39jbzu.d(32):
    Error: C style cast illegal, use `cast(float)l.length`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpvg39jbzu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long n = l.length;\n\
    \    if (n < 2) return 0;\n    float m = l[0];\n    float m2 = l[n/2];\n    for\
    \ (int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n        else if\
    \ (l[i] > m2) m2 = l[i];\n    }\n    return m;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpm1jua2ur.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x428325]\n??:? void tmpm1jua2ur.__unittest_L22_C1() [0x427eff]\n??:?
    void tmpm1jua2ur.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b211]\n??:? runModuleUnitTests [0x42c17d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42876f]\n??:? _d_run_main [0x4286da]\n??:? main [0x4280bb]\n??:?
    __libc_start_main [0x6cb6e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n        return std.math.mid(l, mid);\n   \
    \ else\n        return std.math.mid(l, mid, l.length);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_81rn7zb.d(14): Error: undefined identifier `mid` in module
    `std.math`\n/tmp/tmp_81rn7zb.d(16): Error: undefined identifier `mid` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_81rn7zb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long mid = l.length\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, 0, mid);\n\
    \    float rightMedian = median(l, mid+1, l.length);\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end) \n{\n\
    \    if (start > end)\n        return l[start];\n    int mid = start + (end -\
    \ start) / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l, start,\
    \ mid);\n    float rightMedian = median(l, mid+1, end);\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\n/*\nReturn median of elements in the list l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l, int start, int end, int step)\
    \ \n{\n    if (start > end)\n        return l[start];\n    int mid = start + (end\
    \ - start) / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l,\
    \ start, mid, step);\n    float rightMedian = median(l, mid+1, end, step);\n \
    \   return midVal + ((leftMedian + rightMedian) / 2);\n}\n/*\nReturn median of\
    \ elements in the list l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>>\
    \ median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(long[]\
    \ l, int start, int end, int step, int stride) \n{\n    if (start > end)\n   \
    \     return l[start];\n    int mid = start + (end - start) / 2;\n    float midVal\
    \ = l[mid];\n    float leftMedian = median(l, start, mid, step, stride);\n   \
    \ float rightMedian = median(l, mid+1, end, step, stride);\n    return midVal\
    \ + ((leftMedian + rightMedian) / 2);\n}\n/*\nReturn median of elements in the\
    \ \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1i5tdqj1.d(72): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1i5tdqj1.d", "-I/tmp"]\n'''
  stdout: b''
