name: HumanEval_29_filter_by_prefix
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
  \ only for ones that start with a given prefix.\n    >>> filter_by_prefix([], \"\
  a\")\n    []\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
  a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_prefix(string[] strings,\
  \ string prefix) \n"
tests: "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string,list |>\n<| a |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ dscore=3 |>\n<| c |>\nThis doesn't compile. `StartsWith` doesn't take a `string`\
    \ parameter.\n<|/ c |>\n<| c |>\n: It compiles fine for me in VS2010. Are you\
    \ sure you didn't just mis-type the code in your question?\n<|/ c |>\n<| c |>\n\
    : It compiles fine for me in VS2010. Are you sure you didn't just mis-type the\
    \ code in your question?\n<|/ c |>\n<| c |>\n: It compiles fine for me in VS2010.\
    \ Are you sure you didn't just mis-type the code in your question?\n<|/ c |>\n\
    <| c |>\n: It compiles fine for me in VS2010. Are you sure you didn't just mis-type\
    \ the code in your question?\n<|/ c |>\n<| a tags=c#,linq,.net,string,list |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=3 tags=c#,linq,.net,string,list |>\n<|\
    \ a tags=c#,linq,.net,string,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=3 |>\n<| a ", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,linq,string,arrays\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,linq,string,arrays\
    \ |>\n<| a tags=c#,linq,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,linq,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,list |>\n<| c |>\nThanks Jonathan. Your solution works\
    \ great. I'm still learning LINQ and I appreciate your help.\n<|/ c |>\n<| c |>\n\
    : No problem. LINQ is very powerful and worth learning about. LINQ is also very\
    \ easy to get wrong, so I recommend you read up on it before you start using it.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't use LINQ. LINQ is great for\
    \ doing things like this, but I find it to be a bit of a pain to learn and get\
    \ right.\n<|/ c |>\n<| c |>\n: I added a version that doesn't use LINQ, but uses\
    \ `Where` instead of `Select`.\n<|/ c |>\n<| c |>\n: I added a version that doesn't\
    \ use LINQ, but uses `Where` instead of `Select`.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,list |>\n<| c |>\nThanks Jonathan. Your solution works\
    \ great. I'm still learning LINQ and I appreciate your help.\n<|/ c |>\n<| a tags=c#,linq,.net,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks Jonathan. Your solution works great.\
    \ I'm still learning LINQ and I appreciate your help.\n<|/ c |>\n<| a tags=c#,linq,.net,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks Jonathan. Your solution works great.\
    \ I'm still learning LINQ and I appreciate your help.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).", "{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThanks for your answer. I'm new to C# and I didn't know about LINQ.\
    \ I'll look into it right now.\n<|/ c |>\n<| c |>\nI added a solution that uses\
    \ LINQ. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm new to\
    \ C# and I didn't know about LINQ. I'll look into it right now.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"\
    cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,arrays,string,list\
    \ |>\n<| c |>\nThanks for your answer. I'm new to C# and I didn't know about LINQ.\
    \ I'll look into it right now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays,string,list |>\n<| c |>\nThanks for your answer.\
    \ I'm new to C# and I didn't know about LINQ. I'll look into it right now.\n<|/\
    \ c |>\n<| a tags=c#,arrays,string,list |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks for your answer. I'm new to C# and I didn't know\
    \ about LINQ. I'll look into it right now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring\
    \ prefix = \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,c#-4.0\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=1 tags=c#,linq,.net,c#-4.0 |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a tags=c#,linq,", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, string regex, RegexOptions options) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex, options))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to filter out strings that don't start with a given prefix.\n<|/ c |>\n\
    <| c |>\n: I thought he was asking how to filter out strings that don't start\
    \ with a given prefix. He also said he was using C#, so I assumed he was using\
    \ LINQ. He also said he was new to C#, so I assumed he was new to LINQ. He also\
    \ said he was new to C#, so I assumed he was new to LINQ. He also said he was\
    \ new to C#, so I assumed he was new to LINQ. He also said he was new to C#, so\
    \ I assumed he was new to LINQ. He also said he was new to C#, so I assumed he\
    \ was new to LINQ. He also said he was new to C#, so I assumed he was new to LINQ.\
    \ He also said he was new to C#, so I assumed he was new to LINQ. He also said\
    \ he was new to C#, so I assumed he was new to LINQ. He also said he was new to\
    \ C#, so I assumed he was new to LINQ. He also said he was new to C#, so I assumed\
    \ he was new to LINQ. He also said he was new to C#, so I assumed he was new to\
    \ LINQ. He also said he was new to C#, so I assumed he was new to LINQ. He also\
    \ said he was new to C#, so I assumed he was new to LINQ. He also said he was\
    \ new to C#, so I assumed he was new to LINQ. He also said he was new to C#, so\
    \ I assumed he was new to LINQ. He also said he was new to C#, so I assumed he\
    \ was new to LINQ. He also said he was new to C#, so I assumed he was new to LINQ.\
    \ He also said he was new to C#, so I assumed he was new to LINQ. He also said\
    \ he was new to C#, so I assumed he was new to LINQ. He also said he was new to\
    \ C#, so I assumed he was new to LINQ. He also said ", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<|\
    \ a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 tags=c#,linq,.net,string |>\n<| a |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ tags=c#,linq,.", "{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq dscore=1 |>\n\
    <| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 tags=c#,linq |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,lin", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n\
    \    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Matches(regex))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings,\
    \ string regex, RegexOptions options) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ options))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\",\
    \ \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\",\
    \ \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"\
    array\" };\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\",\
    \ \"cde\", \"array\" };\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring[] result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")\n    ", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string,list |>\n\
    <code>\nList<string> result = new List<string>();\nforeach (string s in strings)\n\
    {\n    if (s.StartsWith(\"a\"))\n    {\n        result.Add(s);\n    }\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nList<string> result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nList<string> result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nList<string> result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nList<string>\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nList<string> result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nList<string> result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nList<string>\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nList<string> result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do this without having to create a temporary array. Perhaps\
    \ some kind of LINQ expression?\n<|/ c |>\n<| c |>\nI guess you could use LINQ\
    \ to create a `List` from the `string[]` but that would probably be less efficient\
    \ than just using a `for` loop. LINQ is designed for querying collections, not\
    \ for mutating them.\n<|/ c |>\n<| c |>\nI agree with you that LINQ is designed\
    \ for querying collections, but I wonder if there is a way to do this without\
    \ having to create a temporary array. Perhaps some kind of LINQ expression?\n\
    <|/ c |>\n<| c |>\nI guess you could use LINQ to create a `List` from the `string[]`\
    \ but that would probably be less efficient than just using a `for` loop. LINQ\
    \ is designed for querying collections, not for mutating them.\n<|/ c |>\n<| c\
    \ |>\nI agree with you that LINQ is designed for querying collections, but I wonder\
    \ if there is a way to do this without having to create a temporary array. Perhaps\
    \ some kind of LINQ expression?\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to do this without having to create a temporary array. Perhaps some kind of\
    \ LINQ expression?\n<|/ c |>\n<| c |>\nI guess you could use LINQ to create a\
    \ `List` from the `string[]` but that would probably be less efficient than just\
    \ using a `for` loop. LINQ is designed for querying collections, not for mutating\
    \ them.\n<|/ c |>\n<| c |>\nI agree with you that LINQ is designed for querying\
    \ collections, but I wonder if there is a way to do this without having to create\
    \ a temporary array. Perhaps some kind of LINQ expression?\n<|/ c |>\n<| c |>\n\
    : No, there is", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regular expression.\n    >>> filter_by_regex([], \"a\")\n\
    \    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, string\
    \ regex) \n{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(Regex.IsMatch(strings[i], regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(Regex.IsMatch(strings[i], regex, options))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings,\
    \ string regex) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \  >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Matches(regex, options))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that match a ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,linq,string,list |>\n<| c |>\nThanks Jonathan. Your solution\
    \ works perfectly for me. Thanks again!\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work if you have a string array that has duplicate prefixes. For example, if\
    \ `strings` contains \"abc\", \"abc\", \"bcd\", \"cde\", \"array\", the result\
    \ will be \"abc\", \"array\", but \"bcd\", \"cde\" will be filtered out.\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,.net,linq,string,list |>\n<| c |>\nThis\
    \ solution doesn't work if you have a string array that has duplicate prefixes.\
    \ For example, if `strings` contains \"abc\", \"abc\", \"bcd\", \"cde\", \"array\"\
    , the result will be \"abc\", \"array\", but \"bcd\", \"cde\" will be filtered\
    \ out.\n<|/ c |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,.net,linq,string,list dscore=3 |>\n<|\
    \ c |>\nThis solution doesn't work if you have a string array that has duplicate\
    \ prefixes. For example, if `strings` contains \"abc\", \"abc\", \"bcd\", \"cde\"\
    , \"array\", the result will be \"abc\", \"array\", but \"bcd\", \"cde\" will\
    \ be filtered out.\n<|/ c |>\n<| a tags=c#,.net,linq,string,list |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a\
    \ dscore=3 |>\n<| c |>\nThis solution doesn't work if you have a string array\
    \ that has duplicate prefixes. For example, if `strings` contains \"abc\", \"\
    abc\", \"bcd\", \"cde\", \"array\", the result will be \"abc\", \"array\", but\
    \ \"bcd\", \"cde\" will be filtered out.\n<|/ c |>\n<| a tags=c#,.net,linq,string,list\
    \ |>\n<code>\nvar result = strings.Where(", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=0 |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a\
    \ dscore=0 tags=c#,linq,.net,string,list |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string RemoveFirst(this string str, string prefix)\n\
    {\n    if (string.IsNullOrEmpty(str))\n        return str;\n    if (string.IsNullOrEmpty(prefix))\n\
    \        return str;\n    if (str.StartsWith(prefix))\n        return str.Substring(prefix.Length);\n\
    \    return str;\n}\n</code>\n<|/ a tags=c#,string,.net |>\n<| a tags=c#,string,.net\
    \ |>\n<code>\npublic static string RemoveFirst(this string str, string prefix)\n\
    {\n    if (string.IsNullOrEmpty(str))\n        return str;\n    if (string.IsNullOrEmpty(prefix))\n\
    \        return str;\n    if (str.StartsWith(prefix))\n        return str.Substring(prefix.Length);\n\
    \    return str;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net |>\n\
    <code>\npublic static string RemoveFirst(this string str, string prefix)\n{\n\
    \    if (string.IsNullOrEmpty(str))\n        return str;\n    if (string.IsNullOrEmpty(prefix))\n\
    \        return str;\n    if (str.StartsWith(prefix))\n        return str.Substring(prefix.Length);\n\
    \    return str;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net |>\n\
    <code>\npublic static string RemoveFirst(this string str, string prefix)\n{\n\
    \    if (string.IsNullOrEmpty(str))\n        return str;\n    if (string.IsNullOrEmpty(prefix))\n\
    \        return str;\n    if (str.StartsWith(prefix))\n        return str.Substring(prefix.Length);\n\
    \    return str;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net |>\n\
    <code>\npublic static string RemoveFirst(this string str, string prefix)\n{\n\
    \    if (string.IsNullOrEmpty(str))\n        return str;\n    if (string.IsNullOrEmpty(prefix))\n\
    \        return str;\n    if (str.StartsWith(prefix))\n        return str.Substring(prefix.Length);\n\
    \    return str;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net |>\n\
    <code>\npublic static string RemoveFirst(this string str, string prefix)\n{\n\
    \    if (string.IsNullOrEmpty(str))\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_contains([], \"a\")\n    []\n    >>> filter_by_contains([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_contains(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring anywhere.\n   \
    \ >>> filter_by_contains_any([], \"a\")\n    []\n    >>> filter_by_contains_any([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_contains_any(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring) || strings[i].Contains(substring,\
    \ StringComparison.OrdinalIgnoreCase)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring somewhere.\n    >>> filter_by_contains_some([],\
    \ \"a\")\n    []\n    >>> filter_by_contains_some([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_contains_some(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring)\
    \ || strings[i].Contains(substring, StringComparison.OrdinalIgnoreCase)) {\n \
    \           result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net |>\n<| c |>\nThanks for the answer. I'm going to try this\
    \ out and see how it goes.\n<|/ c |>\n<| c |>\nI used this and it worked great.\
    \ Thanks so much!\n<|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for the answer. I'm going to try this out and see how it goes.\n<|/ c |>\n<|\
    \ a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ dscore=1 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.Starts", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,list\
    \ |>\n<| a tags=c#,linq,.net,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the\
    \ question, which is about filtering a list of strings by a prefix of another\
    \ string.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,list |>\n<| a dscore=5 |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,list |>\n<| a tags=c#,linq,.net,list |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=5 |>\n\
    <| a dscore=4 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,list |>\n<| a tags=c#,linq,.net,list |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=4\
    \ |>\n<| a |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=4 tags=c#,linq,.net,list |>\n<| a |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=4 tags=c#,linq,.net,list\
    \ |>\n<| a tags=c#,linq,.net,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=4 |>\n<| a tags=c#,linq,.", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abc def\"\n<|/ c\
    \ |>\n<| c |>\n: It does work if you have a string like \"abc def\".  It returns\
    \ \"abc\" and \"def\".  It also returns \"abc\" and \"def\" if you have a string\
    \ like \"abc def\".  It returns \"abc\" and \"def\" if you have a string like\
    \ \"abc def ghi\".  It returns \"abc\" and \"def\" if you have a string like \"\
    abc def ghi jkl\".  It returns \"abc\" and \"def\" if you have a string like \"\
    abc def ghi jkl mno\".  It returns \"abc\" and \"def\" if you have a string like\
    \ \"abc def ghi jkl mno pqr\".\n<|/ c |>\n<| c |>\n: It returns \"abc\" and \"\
    def\" if you have a string like \"abc def ghi jkl mno pqr\".\n<|/ c |>\n<| c |>\n\
    : It returns \"abc\" and \"def\" if you have a string like \"abc def ghi jkl mno\
    \ pqr\".\n<|/ c |>\n<| c |>\n: It returns \"abc\" and \"def\" if you have a string\
    \ like \"abc def ghi jkl mno pqr\".\n<|/ c |>\n<| a dscore=5 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| c |>\nThis doesn't work if you have a string like\
    \ \"abc def\"\n<|/ c |>\n<| c |>\n: It does work if you have a string like \"\
    abc def\". It returns \"abc\" and \"def\". It also returns \"abc\" and \"def\"\
    \ if you have a string like \"abc def\". It returns \"abc\" and \"def\" if you\
    \ have a string like \"abc def ghi\". It returns \"abc\" and \"def\" if you have\
    \ a string like \"abc def ghi jkl\". It returns \"abc\" and \"def\" if you have\
    \ a string like \"abc def ghi jkl mno\". It returns \"abc\" and \"def\" if you\
    \ have a string like \"abc def gh", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nI like this solution,\
    \ although it would be better to use a `StringBuilder` instead of `+`.\n<|/ c\
    \ |>\n<| c |>\n: I agree, `StringBuilder` would be better. I'll update the answer.\n\
    <|/ c |>\n<| c |>\n: I added a version using `StringBuilder`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about a list and not a sequence.\n<|/ c |>\n<| c |>\n\
    : I know, but I thought the OP was asking about a list because he was using LINQ.\
    \ He didn't specify that he was using LINQ, so I thought I'd post this anyway.\n\
    <|/ c |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list dscore=2 |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar\
    \ result = strings.", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an ", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    foreach (string s in strings) {\n        if (s.StartsWith(prefix)) {\n  \
    \          result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| c |>\nI like this solution, though it does require a\
    \ lot of extra memory (O(n) extra memory). But it does look like it might be the\
    \ best solution. Thanks!\n<|/ c |>\n<| c |>\n: I agree, it's O(n) extra memory.\
    \ I'm just trying to show that you can do it in O(n) time with O(n) extra memory.\n\
    <|/ c |>\n<| c |>\n: I added a solution which doesn't require extra memory. I'm\
    \ sure it can be optimized further, but I think it's pretty clear what's going\
    \ on.\n<|/ c |>\n<| c |>\n: I added a solution which doesn't require extra memory.\
    \ I'm sure it can be optimized further, but I think it's pretty clear what's going\
    \ on.\n<|/ c |>\n<| c |>\n: I added a solution which doesn't require extra memory.\
    \ I'm sure it can be optimized further, but I think it's pretty clear what's going\
    \ on.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to filter out all strings that don't start with\
    \ `a`, not only those that start with `a`.\n<|/ c |>\n<| c |>\n: I guess I misunderstood\
    \ the question. I'll delete my answer if he clarifies his question.\n<|/ c |>\n\
    <| c |>\n: I added a solution which doesn't require extra memory. I'm sure it\
    \ can be optimized further, but I think it's pretty clear what's going on.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing\
    \ System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 tags=c#,string,arrays,list |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about how to get an array of strings that start with\
    \ a given prefix.\n<|/ c |>\n<| c |>\nThis answer is correct and should be marked\
    \ as such. While the other answers do answer the question, they don't explain\
    \ what was wrong with OP's code. OP was trying to use LINQ to solve a problem\
    \ that wasn't even a problem to begin with.\n<|/ c |>\n<| c |>\nThis answer was\
    \ the only one that worked for me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,arrays,list |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to get an array of strings that start with a given prefix.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays,list |>\n<| a dscore=5\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays,list |>\n<| a tags=c#,string,arrays,list\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a dscore=5 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays,list |>\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=1 |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| c |>\nThis doesn't compile.\n\
    <|/ c |>\n<| c |>\n: It compiles fine for me. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\n: I tested it before posting it, and it compiles fine for me.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I tested it before\
    \ posting it, and it compiles fine for me. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\n: I tested it before posting it, and it compiles fine for me.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| c |>\nThis doesn't compile.\n<|/ c |>\n<| c |>\n\
    : It compiles fine for me. Are you sure you copied it correctly?\n<|/ c |>\n<|\
    \ c |>\n: I tested it before posting it, and it compiles fine for me. Are you\
    \ sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I tested it before posting\
    \ it, and it compiles fine for me. Are you sure you copied it correctly?\n<|/\
    \ c |>\n<| c |>\n: I tested it before posting it, and it compiles fine for me.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| a |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like this solution, but I prefer a solution that\
    \ doesn't require a third party library.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without using any third party libraries.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without using any third party libraries.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without using any third party libraries.\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ static IEnumerable<string> FilterByPrefix(this IEnumerable<string> strings,\
    \ string prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix));\n}\n\
    </code>\n<|/ a tags=c#,linq dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix));\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix));\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix));\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(prefix));\n</code>\n<|/ a\
    \ tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix));\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix));\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(prefix));\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix));\n\
    </code>\n<|/ a tags=c#,", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        if (strings[i].Contains(substring)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings,\
    \ string regex) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (Regex.IsMatch(strings[i],\
    \ regex)) {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, string regex, RegexOptions options) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (Regex.IsMatch(strings[i], regex, options)) {\n         \
    \   result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \  >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"\
    bcd\", \"c", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        if (strings[i].Contains(substring, startIndex, endIndex))\n     \
    \       result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that contain a given substring.\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring, int startIndex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring, startIndex))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring.\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bcd", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c#,linq,.net,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question, which is about how to filter a list based on a prefix of a string.\n\
    <|/ c |>\n<| a tags=c#,linq,.net,list |>\n<code>\nvar result = list.Where(x =>\
    \ x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to filter a list based on a prefix of\
    \ a string.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x =>\
    \ x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,list |>\n<|\
    \ c |>\nThis doesn't answer the question, which is about how to filter a list\
    \ based on a prefix of a string.\n<|/ c |>\n<| a tags=c#,linq,.net,list |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to filter\
    \ a list based on a prefix of a string.\n<|/ c |>\n<| a tags=c#,linq,.net,list\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question, which is about how\
    \ to filter a list based on a prefix of a string.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,list |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n        if (strings[i].StartsWith(prefix))\n     \
    \       result[i - 1] = strings[i];\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks Jason, this is very helpful. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI added a version that doesn't require the\
    \ use of Linq. Hope it helps.\n<|/ c |>\n<| c |>\nThanks Jason, this is very helpful.\
    \ I will try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nI added\
    \ a version that doesn't require the use of Linq. Hope it helps.\n<|/ c |>\n<|\
    \ c |>\nThanks Jason, this is very helpful. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    var result = new List<string>();\n\
    \    foreach (var s in strings)\n    {\n        if (s.StartsWith(prefix))\n  \
    \          result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| c |>\nThanks Jason, this is very helpful. I will\
    \ try this out and let you know how it goes.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\npublic static string RemovePrefix(string prefix, string\
    \ input)\n{\n    if (string.IsNullOrEmpty(input))\n        return input;", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n        if (strings[i].StartsWith(prefix))\n     \
    \       result[i - 1] = strings[i];\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=1 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nI like your answer but I don't think it works. I tested it and\
    \ it doesn't work. Try it with the input \"abc bcd cde array\" and the prefix\
    \ \"a\". You'll get \"abc bcd cde\" instead of \"array\".\n<|/ c |>\n<| c |>\n\
    : You're right. I've updated my answer with a fix for that case.\n<|/ c |>\n<|\
    \ a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=1 |>\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n\
    \    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given substring.\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (!strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring and are longer\
    \ than a given length.\n    >>> filter_by_substring([], \"a\", 2)\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\", 2)\n\
    \    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length) {\n            result[i] = strings[i];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given substring and are longer than a given length.\n",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    }\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ a tags=c#,linq,.net |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,", "{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks, this was really helpful.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI like using LINQ for these kinds of things. Here's a solution that uses\
    \ LINQ to filter the list for you:\n<code>\nvar filtered = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks,\
    \ this was really helpful.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis doesn't work if you have a string like \"abc def ghi\".  It will\
    \ match \"abc\" but not \"def\".\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed\
    \ it.  Thanks for pointing it out.\n<|/ c |>\n<| a tags=c#,string,linq |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\" };\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\" };\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,string,linq |>\n<| a tags=c#,string,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\" };\n\
    var result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    def\", \"ghi\" };\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n\
    <|/ a tags=c#,string,linq |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"def\", \"ghi\" };\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a tags=c#,string,linq |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"def\", \"ghi\" };\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,string,linq |>\n<| a tags=c#,string,linq\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\" };\n\
    var result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=0 tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net dscore=0 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n\
    <code>", "{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code does not compile. `string[]\
    \ result = new string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings.length will return the length of the string array (which is\
    \ always 1), so you are creating an array of size 1, which is not what you want.\n\
    You probably meant to write:\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is wrong. strings.length will\
    \ return the length of the string array (which is always 1), so you are creating\
    \ an array of size 1, which is not what you want.\nYou probably meant to write:\n\
    <code>\nstring[] result = new string[strings.length - 1];\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length will return the length of the string\
    \ array (which is always 1), so you are creating an array of size 1, which is\
    \ not what you want.\nYou probably meant to write:\n<code>\nstring[] result =\
    \ new string[strings.length - 1];\n</code>\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length will return the length of the string\
    \ array (which is always 1), so you are creating an array of size 1, which is\
    \ not what you want.\nYou probably meant to write:\n<code>\nstring[] result =\
    \ new string[strings.length - 1];\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line is wrong.\
    \ strings.length will return the length of the string array (which is always 1),\
    \ so you are creating an array of size 1, which is not what you want.\nYou probably\
    \ meant to write:\n<code>\nstring[] result = ", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i - 1]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants *all* strings that start with a given prefix,\
    \ not just the first one.\n<|/ c |>\n<| c |>\nThis answer doesn't answer the question.\
    \ OP wants *all* strings that start with a given prefix, not just the first one.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=4 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=4 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4\
    \ |>\n<code>\n", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an ", "{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,linq,string,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,string,list |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,linq,string,list |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,string,list |>\n<| a tags=c#,linq,string,list |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 tags=c#,linq,string,list |>\n<| a dscore=1 |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list\
    \ |>\n<| a tags=c#,linq,string,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,string,list |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar ", "{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net |>\n<| c |>\nI like your solution, however it only works\
    \ with strings. I need a solution that works with any type that implements IEnumerable<T>.\n\
    <|/ c |>\n<| c |>\n: I added a solution that works with any type that implements\
    \ IEnumerable<T>.\n<|/ c |>\n<| c |>\n: I added a solution that works with any\
    \ type that implements IEnumerable<T>.\n<|/ c |>\n<| a |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net\
    \ dscore=2 |>\n<| c |>\nThis doesn't work. `StartsWith` returns a `bool`, not\
    \ a `string`.\n<|/ c |>\n<| c |>\n: It does work. `StartsWith` returns a `bool`\
    \ which can be implicitly converted to a `string`.\n<|/ c |>\n<| c |>\n: It does\
    \ work. `StartsWith` returns a `bool` which can be implicitly converted to a `string`.\n\
    <|/ c |>\n<| c |>\n: It does work. `StartsWith` returns a `bool` which can be\
    \ implicitly converted to a `string`.\n<|/ c |>\n<| c |>\n: It does work. `StartsWith`\
    \ returns a `bool` which can be implicitly converted to a `string`.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=2 |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a\
    \ dscore=1 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=1 |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"abcde\" and the\
    \ prefix is \"ab\"\n<|/ c |>\n<| c |>\nI added a version that works with that\
    \ case too.\n<|/ c |>\n<| a tags=c#,string,linq,.net |>\n<code>\nvar result =\
    \ strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,linq,.net |>\n<| a tags=c#,string,linq,.net |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,linq,.net |>\n<| a dscore=3 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,linq,.net\
    \ |>\n<| a tags=c#,string,linq,.net |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,linq,.net |>\n<| a tags=c#,string,linq,.net |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=c#,string,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\nvar result = strings.Where(s ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(caseSensitive ? strings[i].Contains(substring) : strings[i].IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) >= 0)\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that contain a given substring.\n    >>> filter_by_substring([], \"a\")\n  \
    \  []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, bool caseSensitive) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(caseSensitive ? strings[i].Contains(substring, startIndex)\
    \ : strings[i].Index", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring and are\
    \ longer than a given length.\n    >>> filter_by_substring([], \"a\", 2)\n   \
    \ []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    , 2)\n    [\"abc\"]\n    \n*/\nstring[] filter_by_substring(string[] strings,\
    \ string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i - 1] = strings[i];\n  \
    \  }\n    return result;", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| c |>\nThanks for your answer. I am not very familiar\
    \ with LINQ and I find it a bit confusing. Could you please explain the code a\
    \ bit? Thanks.\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks. I understand it now. One more question: what\
    \ is the difference between `string[] result = new string[strings.length];` and\
    \ `string[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();`? Thanks.\n\
    <|/ c |>\n<| c |>\nThe first one creates an array of the same length as the original\
    \ array and copies the original array into it. The second one creates a new array\
    \ and copies the elements from the original array that match the condition into\
    \ the new array.\n<|/ c |>\n<| c |>\nThanks. I understand it now.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq dscore=1 |>\n\
    <| a |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = ", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n        if (strings[i].StartsWith(prefix))\n            result[i - 1]\
    \ = strings[i];\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if you have a string like \"abcde\" and prefix \"ab\"\n<|/ c\
    \ |>\n<| c |>\n: I thought the question was about filtering out strings that don't\
    \ start with a given prefix. I'll add an example for that case to the answer.\n\
    <|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work if you have a string like \"abcde\" and prefix \"ab\"\n<|/ c |>\n\
    <| c |>\n: I thought the question was about filtering out strings that don't start\
    \ with a given prefix. I'll add an example for that case to the answer.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 tags=c#,linq,.net,string\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq |>\n\
    <| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate your answer, but this doesn't\
    \ really answer the question. I'm looking for a way to do this without using LINQ\
    \ or other libraries.\n<|/ c |>\n<| c |>\nI added a version that doesn't use LINQ.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks, this works great. I'm still curious\
    \ if there's a way to do this without using LINQ, but this definitely answers\
    \ the question.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question.\
    \ I'm looking for a way to do this without using LINQ or other libraries.\n<|/\
    \ c |>\n<| c |>\nI added a version that doesn't use LINQ. Hope it helps.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterByPrefix(this string[]\
    \ strings, string prefix)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n\
    \        {\n            result.Add(s);\n        }\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    public static string[] FilterByPrefix(this string[] strings, string prefix)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.StartsWith(prefix))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Star", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nI like this solution. Much more concise than my own. Thanks!\n\
    <|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ solution will throw an exception if strings is null.\n<|/ c |>\n<| c |>\n: It\
    \ will throw an ArgumentNullException if strings is null.\n<|/ c |>\n<| c |>\n\
    : It will throw an ArgumentNullException if strings is null.\n<|/ c |>\n<| c |>\n\
    : It will throw an ArgumentNullException if strings is null.\n<|/ c |>\n<| c |>\n\
    : It will throw an ArgumentNullException if strings is null.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=5 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=4 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"", "{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see if it\
    \ works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| c |>\n\
    Thanks for your answer. I'm going to try this out and see if it works.\n<|/ c\
    \ |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ I'm going to try this out and see if it works.\n<|/ c |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=0 tags=c#,.net,linq |>\n<| c |>\nThanks for your answer. I'm going\
    \ to try this out and see if it works.\n<|/ c |>\n<| a tags=c#,.net,linq |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm going to try this out\
    \ and see if it works.\n<|/ c |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see if it\
    \ works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,string,list\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,string,list |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,linq,string,list |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 tags=c#,linq,string,list |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,string,list |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list |>\n\
    <| a tags=c#,linq,string,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n\
    </code>\n<|/ a tags=c#,.net,linq dscore=4 |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=4 tags=c#,.net,linq |>\n<| a\
    \ tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a dscore=3 |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=3 |>\n<| a\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n\
    <|/ a tags=c#,.net,linq dscore=3 |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=3 tags=c#,.net,linq |>\n<| a\
    \ tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a dscore=3\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n\
    <|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a ", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regex.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>>\
    \ filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"\
    ]\n    \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(Regex.IsMatch(strings[i], regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regex.\n    >>> filter_by_regex([], \"a\")\n\
    \    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, Regex regex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(regex.IsMatch(strings[i]))\n     \
    \       result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that match a given regex.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].StartsWith(prefix)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].StartsWith(prefix)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].StartsWith(prefix)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].StartsWith(prefix)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].StartsWith(prefix)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].StartsWith(prefix)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix)) {\n       \
    \ result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].StartsWith(prefix)) {\n       \
    \ result[i] = strings[i];\n    }\n}\n</code>\n<|/", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,.net,linq dscore=2 |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,.net,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|\
    \ a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a tag", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=4 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=3 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=3 tags=c#,linq,.net |>\n<| a |>\n<code>\n\
    var result = strings.", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI like the idea of using LINQ, but I believe that\
    \ would require me to change my entire program to LINQ, which I do not want to\
    \ do. I am looking for a solution that does not require me to change my entire\
    \ program to LINQ.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use LINQ.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use LINQ.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use LINQ.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nI believe that would require me to change my entire program to\
    \ LINQ, which I do not want to do. I am looking for a solution that does not require\
    \ me to change my entire program to LINQ.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring\
    \ prefix = \"a\";\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI believe that would require\
    \ me to change my entire program to LINQ, which I do not want to do. I am looking\
    \ for a solution that does not require me to change my entire program to LINQ.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nI believe that would require me to change my entire program to LINQ,\
    \ which I do not want to do. I am looking for a solution that does not require\
    \ me to change my ", "{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using LINQ. I'm sure it's possible, but I'm just not familiar enough with LINQ\
    \ to know how.\n<|/ c |>\n<| c |>\n: I added a non-LINQ solution to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a non-LINQ solution to my answer.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| c |>\nThis doesn't work. `string[]` doesn't\
    \ have a `StartsWith` method.\n<|/ c |>\n<| c |>\n: It does. http://msdn.microsoft.com/en-us/library/system.string.startswith.aspx\n\
    <|/ c |>\n<| c |>\n: It does. http://msdn.microsoft.com/en-us/library/system.string.startswith.aspx\n\
    <|/ c |>\n<| c |>\n: It does. http://msdn.microsoft.com/en-us/library/system.string.startswith.aspx\n\
    <|/ c |>\n<| c |>\n: It does. http://msdn.microsoft.com/en-us/library/system.string.startswith.aspx\n\
    <|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"bcd\", \"cde\", \"array\" };\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `string[]` doesn't have a `StartsWith` method.\n<|/ c |>\n<| c |>\n: It\
    \ does. http://msdn.microsoft.com/en-us/library/system.string.startswith.aspx\n\
    <|/ c |>\n<| c |>\n: It does. http://msdn.microsoft.com/en-us/library/system.string.startswith.aspx\n\
    <|/ c |>\n<| c |>\n: It does. http://msdn.microsoft.com/en-us/library/system.string.startswith.aspx\n\
    <|/ c |>\n", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,string,list |>\n<| a tags=c#,linq,string,list |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a list of strings and\
    \ want to filter out all strings that don't start with the specified prefix.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a list of strings and want to\
    \ filter out all strings that don't start with the specified prefix.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,string,list |>\n<| a dscore=5 |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list\
    \ |>\n<| a dscore=5 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,string,list |>\n<| a tags=c#,linq,string,list\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=5 |>\n<| a dscore=4 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list |>\n<| a dscore=4 |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,string,list |>\n<| a tags=c#,linq,string,list |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=c#,linq,string,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n    >>> filter_by_substring_order([], \"a\", \"b\")\n    []\n    >>>\
    \ filter_by_substring_order([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\", \"\
    b\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_order(string[]\
    \ strings, string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = ", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis doesn't work if you have a string like \"abc def ghi\". It will remove\
    \ \"abc\" but not \"def\".\n<|/ c |>\n<| c |>\nYes, I realized that after I posted\
    \ it.  I fixed it by changing the `StartsWith` call to `Contains`.\n<|/ c |>\n\
    <| a tags=c#,string,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string like\
    \ \"abc def ghi\". It will remove \"abc\" but not \"def\".\n<|/ c |>\n<| c |>\n\
    : I realized that after I posted it.  I fixed it by changing the `StartsWith`\
    \ call to `Contains`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,linq |>\n\
    <| a tags=c#,string,linq |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,linq |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,linq |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,linq |>\n\
    <| a |>\n<code>\nstring[] result = strings.Where(", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| c |>\nI like your answer, but I think it would be better to use a `for`\
    \ loop to iterate through the strings. `foreach` will create a new string array\
    \ every time it loops.\n<|/ c |>\n<| c |>\nI agree with you, that's why I added\
    \ the comment in the code :)\n<|/ c |>\n<| c |>\nI agree with you, that's why\
    \ I added the comment in the code :)\n<|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=3 |>\n", "{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach(string s in strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it can be simplified\
    \ a bit. `foreach` can be replaced with `for` loop and `result[i++] = s;` can\
    \ be replaced with `result.Add(s);`\n<|/ c |>\n<| c |>\nI agree with you. I was\
    \ just trying to be as close to the original code as possible. I'll edit my answer\
    \ to reflect your suggestion.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regex.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>>\
    \ filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"\
    ]\n    \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(Regex.IsMatch(strings[i], regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regex.\n    >>> filter_by_regex([], \"a\")\n\
    \    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, Regex regex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(regex.IsMatch(strings[i]))\n     \
    \       result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that match a given regex.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"c", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nI like your solution, but I believe it can be optimized a little more.\
    \ `string[] result = new string[strings.length];` can be replaced with `string[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();`\n<|/ c |>\n<|\
    \ c |>\nI agree that your solution is more concise, but I believe that `string[]\
    \ result = new string[strings.length];` will allocate a new array each time you\
    \ call `filter_by_prefix`, whereas `string[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();`\
    \ will allocate a new array only once.\n<|/ c |>\n<| c |>\nYes, I agree with you.\
    \ My comment was more to point out that your solution is more concise than mine.\
    \ :)\n<|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=1 |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].StartsWith(prefix))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n    >>> filter_by_substring([], \"a\")\n    []\n    >>>\
    \ filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring anywhere in the string.\n    >>> filter_by_substring_anywhere([],\
    \ \"a\")\n    []\n    >>> filter_by_substring_anywhere([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_anywhere(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring anywhere in the string and are longer than a given length.\n\
    \    >>> filter_by_substring_anywhere_longer([], \"a\")\n    []\n    >>> filter_by_substring_anywhere_longer([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring_anywhere_longer(string[] strings, string substring,\
    \ int length) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].", "{\n    string[] result = new string[strings.length];\n   \
    \ int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring and do\
    \ not end with a given suffix.\n    >>> filter_by_substring2([], \"a\")\n    []\n\
    \    >>> filter_by_substring2([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n\
    \    [\"abc\"]\n    \n*/\nstring[] filter_by_substring2(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n ",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, but I wonder why you chose to not use LINQ?\n<|/\
    \ c |>\n<| c |>\nI didn't know about LINQ. I'm still learning C# and I thought\
    \ LINQ was a way to make things easier. Thanks for pointing that out!\n<|/ c |>\n\
    <| c |>\nLINQ is great, but I still think it's overkill for this problem. LINQ\
    \ is great for querying collections, but not so great for manipulating collections.\
    \ It's a shame that C# doesn't have something that does this natively.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I was just trying to solve the problem with LINQ\
    \ and I thought it would be a good exercise to learn about LINQ. Thanks for your\
    \ answer, though.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to solve\
    \ the problem with LINQ and I thought it would be a good exercise to learn about\
    \ LINQ. Thanks for your answer, though.\n<|/ c |>\n<| a dscore=1 |>\nI believe\
    \ this should do it:\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. I am not familiar with C# and I do not know how to use your\
    \ code. Could you please tell me how to use it in my code? Thanks.\n<|/ c |>\n\
    <| c |>\nI added a C# translation of your code. Hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThanks for your help. I added the C# translation of your code. Could you\
    \ please tell me how to use it in my code? Thanks.\n<|/ c |>\n<| c |>\nI added\
    \ a C# translation of your code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your help. I added the C# translation of your code. Could you please tell me\
    \ how to use it in my code? Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static string[] FilterByPrefix(this string[] strings, string prefix)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.StartsWith(prefix))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for your answer. I am not familiar with C# and I do not\
    \ know how to use your code. Could you please tell me how to use it in my code?\
    \ Thanks.\n<|/ c |>\n<| c |>\nI added a C# translation of your code. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your help. I added the C# translation of your code.\
    \ Could you please tell me how to use it in my code? Thanks.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] filterByPrefix(string[] strings, string prefix)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.StartsWith(prefix))\n        {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for your answer. I am not familiar with C# and I do not\
    \ know how to use ", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (caseSensitive ? strings[i].Contains(substring) : strings[i].IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) >= 0)\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that contain a given substring.\n    >>> filter_by_substring([], \"a\")\n  \
    \  []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].IndexOf(substring, startIndex, StringComparison.OrdinalIgnoreCase)\
    \ >= 0 && strings[i].IndexOf(substring, endIndex, ", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<|\
    \ c |>\nThanks for your answer. Your solution works but it is too slow. My input\
    \ list contains about 5000 strings and it takes about 2 minutes to filter them.\
    \ Do you know any faster solution?\n<|/ c |>\n<| c |>\n: I added a faster solution.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks a lot! Your solution is much faster.\
    \ Now it takes about 1 minute to filter 5000 strings. I really appreciate your\
    \ help.\n<|/ c |>\n<| c |>\n: You're welcome. Glad it helped. :)\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nvar result = list.Where(s => s.StartsWith(\"a\"));\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nThanks for your answer. Your\
    \ solution works but it is too slow. My input list contains about 5000 strings\
    \ and it takes about 2 minutes to filter them. Do you know any faster solution?\n\
    <|/ c |>\n<| c |>\n: I added a faster solution. Hope it helps.\n<|/ c |>\n<| a\
    \ tags=c#,linq,.net,string |>\n<code>\nvar result = list.Where(s => s.StartsWith(\"\
    a\"));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution\
    \ works but it is too slow. My input list contains about 5000 strings and it takes\
    \ about 2 minutes to filter them. Do you know any faster solution?\n<|/ c |>\n\
    <| c |>\n: I added a faster solution. Hope it helps.\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = list.Where(s => s.StartsWith(\"a\"));\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = list.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n\
    \    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")\n    []\n    >>> ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static string RemovePrefix(string\
    \ prefix, string str)\n{\n    if (string.IsNullOrEmpty(str))\n        return str;",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string[] FilterByPrefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n\
    \        {\n            result[i] = s;\n            i++;\n        }\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string[] FilterByPrefix(string[] strings, string prefix)\n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n        {\n\
    \            result[i] = s;\n            i++;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,string,linq,.net |>\n\
    <| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,string,linq,.net |>\n<| a dscore=1 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,string,linq,.net\
    \ |>\n<| a tags=c#,string,linq,.net |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,linq,.net |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,string,linq,.net |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,string,linq,.net |>\n\
    <| a dscore=1 |>\n<code>", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_not_suffix([\"abc\", \"bcd\", \"cde", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nThanks for your answer. Your solution is very similar to mine,\
    \ but I wanted to avoid the foreach loop. Thanks anyway!\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for your answer. Your solution is\
    \ very similar to mine, but I wanted to avoid the foreach loop. Thanks anyway!\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very similar to mine, but I wanted to avoid\
    \ the foreach loop. Thanks anyway!\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.Star", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\", \"\
    array\"]\n    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \    >>> filter_by_", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<string>\
    \ GetStrings(string prefix, List<string> strings)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.StartsWith(prefix))\n        {\n            result.Add(s);\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\npublic static List<string> GetStrings(string prefix, List<string>\
    \ strings)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToList();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static List<string>\
    \ GetStrings(string prefix, List<string> strings)\n{\n    return strings.Where(s\
    \ => s.StartsWith(prefix)).ToList();\n}\n</code>\n<|/ a tags=c#,linq |>\n<| a\
    \ dscore=2 |>\n<code>\npublic static List<string> GetStrings(string prefix, List<string>\
    \ strings)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToList();\n\
    }\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\npublic static List<string>\
    \ GetStrings(string prefix, List<string> strings)\n{\n    return strings.Where(s\
    \ => s.StartsWith(prefix)).ToList();\n}\n</code>\n<|/ a tags=c#,linq |>\n<| a\
    \ tags=c#,linq |>\n<code>\npublic static List<string> GetStrings(string prefix,\
    \ List<string> strings)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToList();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static List<string>\
    \ GetStrings(string prefix, List<string> strings)\n{\n    return strings.Where(s\
    \ => s.StartsWith(prefix)).ToList();\n}\n</code>\n<|/ a tags=c#,linq |>\n<| a\
    \ dscore=1 |>\n<code>\npublic static List<string> GetString", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i\
    \ - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| c |>\nI like your solution, but I prefer to use LINQ to solve this problem.\
    \ Thanks anyway!\n<|/ c |>\n<| c |>\n: I agree with you. LINQ is great for many\
    \ things, but in this case it seems like overkill. LINQ is great for many things,\
    \ but in this case it seems like overkill. LINQ is great for many things, but\
    \ in this case it seems like overkill.\n<|/ c |>\n<| c |>\n: I agree with you.\
    \ LINQ is great for many things, but in this case it seems like overkill. LINQ\
    \ is great for many things, but in this case it seems like overkill.\n<|/ c |>\n\
    <| c |>\n: I agree with you. LINQ is great for many things, but in this case it\
    \ seems like overkill. LINQ is great for many things, but in this case it seems\
    \ like overkill.\n<|/ c |>\n<| c |>\n: I agree with you. LINQ is great for many\
    \ things, but in this case it seems like overkill. LINQ is great for many things,\
    \ but in this case it seems like overkill.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| c |>\nI like your solution, but I prefer to use LINQ\
    \ to solve this problem. Thanks anyway!\n<|/ c |>\n<| a tags=c#,linq,.net |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I prefer to use LINQ to\
    \ solve this problem. Thanks anyway!\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,.net |>\n<|", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using LINQ for these kinds of things.\
    \ Here's a solution that uses LINQ to filter the strings:\n<code>\nstring[] strings\
    \ = { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar filtered\
    \ = strings.Where(s => s.StartsWith(prefix));\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = { \"abc\", \"bcd\", \"cde\"\
    , \"array\" };\nstring prefix = \"a\";\nvar filtered = strings.Where(s => s.StartsWith(prefix));\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] strings\
    \ = { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar filtered\
    \ = strings.Where(s => s.StartsWith(prefix));\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] strings = { \"abc\", \"bcd\", \"cde\"\
    , \"array\" };\nstring prefix = \"a\";\nvar filtered = strings.Where(s => s.StartsWith(prefix));\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strings = { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix =\
    \ \"a\";\nvar filtered = strings.Where(s => s.StartsWith(prefix));\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = { \"abc\", \"\
    bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar filtered = strings.Where(s\
    \ => s.StartsWith(prefix));\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] strings = { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring\
    \ prefix = \"a\";\nvar filtered = strings.Where(s => s.StartsWith(prefix));\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<|", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given substring.\n    >>>\
    \ filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (!strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring in a given order.\n\
    \    >>> filter_by_substring_order([], \"a\", \"b\")\n    []\n    >>> filter_by_substring_order([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\", \"b\")\n    [\"abc\", \"array\"]\n\
    \    \n*/\nstring[] filter_by_substring_order(string[] strings, string substring,\
    \ string order) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(order)) {\n            result[i] = strings[i];\n    \
    \    }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given substring in a given order.", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution, but I believe that `string[] result = new string[strings.length];`\
    \ should be `string[] result = new string[strings.length - 1];`\n<|/ c |>\n<|\
    \ c |>\nYes, you are right. Thanks for pointing that out. I've edited my answer.\n\
    <|/ c |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,arrays\
    \ dscore=2 |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a dscore=1 |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a |>\n<code>\nstring[] result =\
    \ strings.Where(s ", "{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 tags=c#,linq,.net |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I've tried it and it works\
    \ fine. However I still don't understand why my code doesn't work. Could you please\
    \ explain it to me?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe problem is that the compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that\
    \ start with the prefix you are looking for. \nThe compiler doesn't know that\
    \ you are only interested in strings that start with the prefix you are looking\
    \ for. \nThe compiler doesn't know that you are only interested in strings that ",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.Contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that match a given regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, string regex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(Regex.IsMatch(s,regex))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that match a given regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(Regex.IsMatch(s,regex,options))\n        {\n            result[i++]\
    \ = s;\n        }", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,linq,string,list |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,string,list |>\n<| a dscore=1 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,string,list\
    \ |>\n<| a tags=c#,linq,string,list |>\n<code>\nList<string> strings = new List<string>();\n\
    strings.Add(\"abc\");\nstrings.Add(\"bcd\");\nstrings.Add(\"cde\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"a\");", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, however it seems that it only\
    \ works with strings. I tried to make it work with ints and doubles, but it didn't\
    \ work. Do you know why this is?\n<|/ c |>\n<| c |>\n: It works for me with ints\
    \ and doubles. What did you try?\n<|/ c |>\n<| c |>\nI used your method with ints\
    \ and doubles. I used the method I posted above with ints and doubles and it didn't\
    \ work. Do you know why this is?\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with ints and doubles.\n<|/ c |>\n<| c |>\nThanks for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=c#,linq,string |>\n<code>\nvar result =\
    \ strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, however it seems that it only works with\
    \ strings. I tried to make it work with ints and doubles, but it didn't work.\
    \ Do you know why this is?\n<|/ c |>\n<| c |>\n: It works for me with ints and\
    \ doubles. What did you try?\n<|/ c |>\n<| c |>\nI used your method with ints\
    \ and doubles. I used the method I posted above with ints and doubles and it didn't\
    \ work. Do you know why this is?\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with ints and doubles.\n<|/ c |>\n<| a tags=c#,linq,string |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI like your solution, however it seems that it only\
    \ works with strings. I tried to make it work with ints and doubles, but it didn't\
    \ work. Do you know why this is?\n<|/ c |>\n<| c |>\n: It works for me with ints\
    \ and doubles. What did you try?\n<|/ c |>\n<| ", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n      \
    \  result[i] = strings[i];\n}\n</code>", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n\
    \    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(Regex.IsMatch(strings[i], regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings,\
    \ string regex, RegexOptions options) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(Regex.IsMatch(strings[i],\
    \ regex, options))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring anywhere in the string.\n    >>>\
    \ filter_by_substring_any([], \"a\")\n    []\n    >>> filter_by_substring_any([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring_any(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring anywhere in the string and are\
    \ longer than a given length.\n    >>> filter_by_substring_any_longer([], \"a\"\
    , 2)\n    []\n    >>> filter_by_substring_any_longer([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\", 2)\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_any_longer(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring anywhere in the\
    \ string.\n    >>> filter_by_substring_any([], \"a\")\n    []\n    >>> filter_by_substring_any([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring_any(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring) || strings[i].Contains(substring\
    \ + \"s\")) {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring at any point in the string.\n    >>> filter_by_substring_all([],\
    \ \"a\")\n    []\n    >>> filter_by_substring_all([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring)\
    \ || strings[i].Contains(substring + \"s\") || strings[i].Contains(substring +\
    \ \"ed\") || strings[i].Contains(substring + \"ing\")) {", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,string |>\n<| a tags=c#,.net,string\
    \ |>\n<code>\nstring s = \"abc\";\nstring result = s.Substring(0, s.IndexOf(\"\
    a\"));\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string |>\n<code>\nstring\
    \ s = \"abc\";\nstring result = s.Substring(0, s.IndexOf(\"a\"));\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring s = \"abc\";\nstring result\
    \ = s.Substring(0, s.IndexOf(\"a\"));\n</code>\n<|/ a tags=c#,.net,string |>\n\
    <| a tags=c#,.net,string |>\n<code>\nstring s = \"abc\";\nstring result = s.Substring(0,\
    \ s.IndexOf(\"a\"));\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string |>\n\
    <code>\nstring s = \"abc\";\nstring result = s.Substring(0, s.IndexOf(\"a\"));\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string |>\n<code>\nstring s = \"\
    abc\";\nstring result = s.Substring(0, s.IndexOf(\"a\"));\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,.net,string |>\n<code>\nstring s = \"abc\";\nstring result\
    \ = s.Substring(0, s.IndexOf(\"a\"));\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string\
    \ |>\n<code>\nstring s = \"abc\";\nstring result = s.Substring(0, s.IndexOf(\"\
    a\"));\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,string |>\n<code>\nstring\
    \ s = \"abc\";\nstring result = s.Substring(0, s.IndexOf(\"a\"));\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=c#,.net,string |>\n<code>\nstring s = \"abc\";\nstring\
    \ result = s.Substring(0, s.IndexOf(\"a\"));\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=c#,.net,string |>\n<code>\nstring s = \"abc\";\nstring result = s.", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,.net,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net,linq |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,.net,linq |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,string,.net,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,.net,linq\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,.net,linq |>\n<| a tags=c#,string,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,.net,linq\
    \ |>\n<| a tags=c#,string,.net,linq |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a ", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    foreach (string s in strings)\
    \ {\n        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string |>\n\
    <| c |>\nI like your answer but I think it would be better to use a `StringBuilder`\
    \ instead of `String[]` for the result and `string.Join` instead of `string.Concat`\n\
    <|/ c |>\n<| c |>\nI agree with you. StringBuilder would be better. I'll edit\
    \ my answer.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result =\
    \ strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this answer because it's concise and doesn't require a temporary\
    \ array.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n\
    <| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for the help! I appreciate it!\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < string", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n    >>> filter_by_substring_order([], \"a\", true)\n    []\n    >>>\
    \ filter_by_substring_order([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\", true)\n\
    \    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_order(string[]\
    \ strings, string substring, bool order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && order)\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring in a given order.", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks so much for taking the time to\
    \ write this out. I'm going to try this out and see how it goes. Thanks again!\n\
    <|/ c |>\n<| c |>\nI added a more efficient version that doesn't require the creation\
    \ of an intermediate array.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `string[] result = new string[strings.length];` will throw an exception\
    \ because strings is null.\n<|/ c |>\n<| c |>\n: You're right, I missed that part.\
    \ I've updated my answer.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\
    string[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n\
    <| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\"))", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| c\
    \ |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post.\n<|/ c |>\n\
    <| c |>\nThis does provide an answer to the question.  It doesn't require a comment\
    \ to explain what it does.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/10770341)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer to the question.  It doesn't require\
    \ a comment to explain what it does.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10770341)\n\
    <|/ c |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net dscore=0 |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ provide an answer to the question. It doesn't require a comment to explain what\
    \ it does.\n<|/ c |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 tags=c#,linq,.net |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=c#,string,.net,arrays |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,.net,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,.net,arrays |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,.net,arrays |>\n\
    <| a tags=c#,string,.net,arrays |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,string,.net,arrays |>\n<| a tags=c#,string,.net,arrays\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,.net,arrays |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,.net,arrays dscore=1 |>\n<| a\
    \ tags=c#,string,.net,arrays |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about LINQ, not LINQ to Objects.\n<|/ c |>\n<|\
    \ c |>\nThis answer is correct for LINQ to Objects, not LINQ to XML.\n<|/ c |>\n\
    <| c |>\nThis answer is correct for LINQ to Objects, not LINQ to XML.\n<|/ c |>\n\
    <| c |>\nThis answer is correct for LINQ to Objects, not LINQ to XML.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nThis answer is correct for\
    \ LINQ to Objects, not LINQ to XML.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nThis answer is correct for LINQ to Objects, not LINQ to XML.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=5 tags=c#,linq,.net,string |>\n<| c |>\nThis answer is correct for\
    \ LINQ to Objects, not LINQ to XML.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).To", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n*/\nstring[]\
    \ filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not end with a given suffix.\n    >>> filter_by_not_", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring anywhere in the string.\n    >>>\
    \ filter_by_substring_any([], \"a\")\n    []\n    >>> filter_by_substring_any([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring_any(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring) || strings[i].Contains(substring\
    \ + \"a\"))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ at the end of a string.\n    >>> filter_by_substring_end([], \"a\")\n    []\n\
    \    >>> filter_by_substring_end([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"array\"]\n    \n*/\nstring[] filter_by_substring_end(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].EndsWith(substring))\n            result[i] = strings[i];\n  \
    \  }\n    return result;\n}\n/*\n Filter ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|\
    \ a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|\
    \ a ", "{\n    string[] result = new string[strings.length];\n    for (int i =\
    \ 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix)) {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to filter out all strings that don't start with a given prefix.\n<|/ c |>\n\
    <| c |>\nThe question was edited after I posted my answer. My answer was based\
    \ on the original question. I've added a second answer that does exactly what\
    \ the OP wants.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to filter out all strings that don't start with a given prefix.\n<|/\
    \ c |>\n<| a tags=c#,linq |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to filter out all strings that don't start with a given prefix.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,linq |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a d", "{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n    >>> filter_by_substring_order([], \"a\", \"b\")\n    []\n    >>>\
    \ filter_by_substring_order([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\", \"\
    b\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given substring in a given order.\n    >>> filter_by_not_substring_order([],\
    \ \"a\", \"b\")\n    ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    }\n</code>\n<|/ a tags=c#,linq dscore=2 |>\n<| a |>\n<code>\nstring[] result =\
    \ strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1\
    \ tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith", "{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a little C# program that\
    \ does this in one line:\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| c |>\nThis doesn't answer the question, which is about\
    \ how to do this with LINQ, not how to do it with C#.\n<|/ c |>\n<| c |>\nI disagree.\
    \ LINQ is just a set of extension methods that allow you to query collections\
    \ easily. It's not really a language feature. LINQ was designed for querying collections\
    \ easily, and it's very easy to do so with LINQ. LINQ also has many other useful\
    \ extension methods that make it easy to do many things with collections. It's\
    \ a very powerful tool.\n<|/ c |>\n<| c |>\nLINQ is just a set of extension methods\
    \ that allow you to query collections easily. It has nothing to do with language\
    \ features. LINQ was designed for querying collections easily, and it's very easy\
    \ to do so with LINQ. LINQ also has many other useful extension methods that make\
    \ it easy to do many things with collections. It's a very powerful tool.\n<|/\
    \ c |>\n<| c |>\nLINQ is just a set of extension methods that allow you to query\
    \ collections easily. It has nothing to do with language features. LINQ was designed\
    \ for querying collections easily, and it's very easy to do so with LINQ. LINQ\
    \ also has many other useful extension methods that make it easy to do many things\
    \ with collections. It's a very powerful tool.\n<|/ c |>\n<| c |>\nLINQ is just\
    \ a set of extension methods that allow you to query collections easily. It has\
    \ nothing to do with language features. LINQ was designed for querying collections\
    \ easily, and it's very easy to do so with LINQ. LINQ also has many other useful\
    \ extension methods that make it easy to do many things with collections. It's\
    \ a very powerful tool.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nvar filtered = list.Where(s\
    \ => s.StartsWith(\"a\"));\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to do this with LINQ, not how to do\
    \ it with C#.\n<|/ c |>\n<| c |>\nThis answer doesn't answer the question, which\
    \ is about how to do this with LINQ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nThanks for your answer. I've\
    \ tried your solution and it works fine. However I prefer to use LINQ as it looks\
    \ more elegant and readable. I've posted my solution below.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar\
    \ result = strings.Where(s => s.Star", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\npublic static string[] FilterByPrefix(this\
    \ string[] strings, string prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    string[] result = new string[strings.length];", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. I'm still learning C# and I didn't know about LINQ. I'll definitely\
    \ look into it.\n<|/ c |>\n<| c |>\nLINQ is very powerful and useful, but it's\
    \ also very easy to get wrong. LINQ isn't a silver bullet, it's just a tool that\
    \ helps you write more readable code. You'll find that LINQ can be very useful,\
    \ but it's also very easy to get wrong.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I'm still learning C# and I didn't know about LINQ. I'll definitely look into\
    \ it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c# |>\n<| a tags=c# |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c# |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c# dscore=1 |>\n<| a\
    \ tags=c# |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that match a given regular\
    \ expression.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_regex(string[] strings, string regex, RegexOptions options)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex,\
    \ options))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a given regular\
    \ expression.\n    >>> filter_by_regex([], \"a\")\n    ", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"abc_def\"\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with that case\n<|/ c |>\n<| a tags=c#,string,linq,.net |>\n<code>\n\
    string[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,linq,.net |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=2 tags=c#,string,linq,.net |>\n<| a tags=c#,string,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,linq,.net dscore=2 |>\n<| a tags=c#,string,linq,.net\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,string,linq,.net\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,string,linq,.net |>\n<| a dscore=1 |>\n\
    <code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,string,linq,.net |>\n<| a tags=c#,string,", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (Regex.Match(strings[i],\
    \ regex).Success) {\n            result[i] = strings[i];\n        }\n    }\n \
    \   return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match a regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n  \
    \  >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[] strings, string\
    \ regex, RegexOptions options) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (Regex.Match(strings[i],\
    \ regex, options).Success) {\n            result[i] = strings[i];\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n\
    \    >>> ", "{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regex.\n    >>> filter_by_regex([], \"a\")\n\
    \    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[] strings,\
    \ string regex) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; i++)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that match a given regex.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, Regex regex) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (regex.IsMatch(strings[i]))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regex.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>>\
    \ filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nThanks for your answer. Your solution is very elegant and I like\
    \ it very much. However I cannot use LINQ in my project and I cannot use any external\
    \ libraries. So I cannot use your solution. Thanks anyway!\n<|/ c |>\n<| c |>\n\
    : I added a solution without LINQ. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again!\
    \ I really appreciate your effort. I will try it out and let you know if it works.\n\
    <|/ c |>\n<| c |>\n: I added a solution without LINQ. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks again! I really appreciate your effort. I will try it out and\
    \ let you know if it works.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring prefix\
    \ = \"a\";\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nThanks for your answer. Your\
    \ solution is very elegant and I like it very much. However I cannot use LINQ\
    \ in my project and I cannot use any external libraries. So I cannot use your\
    \ solution. Thanks anyway!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nThanks for your answer. Your solution is very elegant and I like\
    \ it very much. However I cannot use LINQ in my project and I cannot use any external\
    \ libraries. So I cannot use your solution. Thanks anyway!\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nvar result = strings.Where(s ", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static\
    \ string RemoveFirst(string input, string remove)\n{\n    if (string.IsNullOrEmpty(input))\n\
    \        return input;\n    if (string.IsNullOrEmpty(remove))\n        return\
    \ input;\n    if (input.StartsWith(remove))\n        return input.Substring(remove.Length);\n\
    \    return input;\n}\n</code>\n<|/ a tags=c#,string |>\n<| a |>\n<code>\npublic\
    \ static string RemoveFirst(string input, string remove)\n{\n    if (string.IsNullOrEmpty(input))\n\
    \        return input;\n    if (string.IsNullOrEmpty(remove))\n        return\
    \ input;\n    if (input.StartsWith(remove))\n        return input.Substring(remove.Length);\n\
    \    return input;\n}\n</code>\n<|/ a tags=c#,string dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\npublic static string RemoveFirst(string input, string remove)\n\
    {\n    if (string.IsNullOrEmpty(input))\n        return input;\n    if (string.IsNullOrEmpty(remove))\n\
    \        return input;\n    if (input.StartsWith(remove))\n        return input.Substring(remove.Length);\n\
    \    return input;\n}\n</code>\n<|/ a tags=c#,string |>\n<| a dscore=1 |>\n<code>\n\
    public static string RemoveFirst(string input, string remove)\n{\n    if (string.IsNullOrEmpty(input))\n\
    \        return input;\n    if (string.IsNullOrEmpty(remove))\n        return\
    \ input;\n    if (input.StartsWith(remove))\n        return input.Substring(remove.Length);\n\
    \    return input;\n}\n</code>\n<|/ a tags=c#,string |>\n<| a tags=c#,string |>\n\
    <code>\npublic static string RemoveFirst(string input, string remove)\n{\n   \
    \ if (string.IsNullOrEmpty(input))\n        return input;\n    if (string.IsNullOrEmpty(remove))\n\
    \        return input;\n    if (input.StartsWith(remove))\n        return input.Substring(remove.Length);\n\
    \    return input;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string |>\n<code>\n\
    public static string RemoveFirst(string input, string remove)", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThanks, I appreciate it!\n<|/ c |>\n<| a tags=c#,linq,.net,list |>\n<code>\n\
    var result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a tags=c#,linq,.net,list |>\n<| a |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 tags=c#,linq,.net,list\
    \ |>\n<| a tags=c#,linq,.net,list |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,list |>\n\
    <code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,list dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,list |>\n<| a dscore=1 |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,list |>\n\
    <| a dscore=1 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,list |>\n<| a |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=4 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=3 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a\
    \ tags=c#,linq,.net |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net dscore=3 |>\n<| a dscore=3 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a\
    \ dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not end with a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,string dscore=0\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nThis doesn't\
    \ compile. `string[] result = new string[strings.length];` should be `string[]\
    \ result = new string[strings.Length];`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n\
    <|/ c |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=4 |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[] strings,\
    \ string regex) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (Regex.IsMatch(strings[i], regex, options))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n    >>> filter_by_", "{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring anywhere in the string.\n    >>>\
    \ filter_by_substring_any([], \"a\")\n    []\n    >>> filter_by_substring_any([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring_any(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Contains(substring) || strings[i].Contains(substring\
    \ + \"a\"))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ at any point in the string.\n    >>> filter_by_substring_all([], \"a\")\n  \
    \  []\n    >>> filter_by_substring_all([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring)\
    \ || strings[i].Contains(substring + \"a\") || strings[i].Contains(substring +\
    \ \"", "{\n    string[] result = new string[strings.length];\n    for (int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n    >>> filter_by_substring_order([], \"a\", \"b\")\n    []\n    >>>\
    \ filter_by_substring_order([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\", \"\
    b\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_order(string[]\
    \ strings, string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for one", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c#,linq,.net,arrays |>\n<| c |>\nI like your solution, but I wonder why\
    \ you didn't use LINQ's `Where` method instead of writing a custom `foreach` loop?\n\
    <|/ c |>\n<| c |>\n: I didn't know about `Where` until I read your answer. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\n\
    string[] strings = { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix =\
    \ \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\n<code>\nstring[] strings = { \"\
    abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,arrays\
    \ |>\n<| a dscore=4 |>\n<code>\nstring[] strings = { \"abc\", \"bcd\", \"cde\"\
    , \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,arrays |>\n<| a dscore=3 |>\n<code>\nstring[]\
    \ strings = { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\n\
    string[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,arrays |>\n<| a |>\n<code>\nstring[] strings = { \"abc\"\
    , \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=3 tags=c#,linq,.net,arrays\
    \ |>\n<| a tags=c#,linq,.net,arrays |>\n<code>\nstring[] strings = { \"abc\",\
    \ \"bcd\", \"cde\", \"array", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to avoid the for loop?\n<|/ c |>\n<| c |>\n: I added a LINQ\
    \ solution that doesn't use a for loop.\n<|/ c |>\n<| c |>\nI like your solution\
    \ too, but I wonder if there is a way to avoid the for loop?\n<|/ c |>\n<| c |>\n\
    : I added a LINQ solution that doesn't use a for loop.\n<|/ c |>\n<| c |>\nI like\
    \ your solution too, but I wonder if there is a way to avoid the for loop?\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nI\
    \ like this solution, but I wonder if there is a way to avoid the for loop?\n\
    <|/ c |>\n<| c |>\n: I added a LINQ solution that doesn't use a for loop.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nI\
    \ like this solution, but I wonder if there is a way to avoid the for loop?\n\
    <|/ c |>\n<| c |>\n: I added a LINQ solution that doesn't use a for loop.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].StartsWith(prefix)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| c |>\nI like your answer but I think it would be better to use a `HashSet<string>`\
    \ instead of a `List<string>` for the result and `Contains` instead of `StartsWith`\n\
    <|/ c |>\n<| c |>\n: I agree. `HashSet<string>` would be more efficient than `List<string>`\
    \ for this particular case. I'll update my answer to use `HashSet<string>` instead.\n\
    <|/ c |>\n<| c |>\nI agree with your answer but I think it would be better to\
    \ use a `HashSet<string>` instead of a `List<string>` for the result and `Contains`\
    \ instead of `StartsWith`\n<|/ c |>\n<| c |>\n: I agree. `HashSet<string>` would\
    \ be more efficient than `List<string>` for this particular case. I'll update\
    \ my answer to use `HashSet<string>` instead.\n<|/ c |>\n<| c |>\nI agree with\
    \ your answer but I think it would be better to use a `HashSet<string>` instead\
    \ of a `List<string>` for the result and `Contains` instead of `StartsWith`\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq\
    \ dscore=2 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq dscore=2 |>\n\
    <| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result\
    \ = strings.Where(s => s.", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nI like your solution,\
    \ it's very elegant. However I wonder if there's a way to do this without using\
    \ an intermediate array. I'm thinking about something like `strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray()`\n<|/ c |>\n<| c |>\n: I guess you could do\
    \ that but then you'd have to copy the array into a new one and that would be\
    \ inefficient. I'd stick with the array for simplicity and readability.\n<|/ c\
    \ |>\n<| c |>\n: I added a version that doesn't use an intermediate array.\n<|/\
    \ c |>\n<| c |>\n: I added a version that doesn't use an intermediate array.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't use an intermediate array.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nI like your solution, it's\
    \ very elegant. However I wonder if there's a way to do this without using an\
    \ intermediate array. I'm thinking about something like `strings.Where(s => s.StartsWith(prefix)).ToArray()`\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't use an intermediate array.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,c#-4.0\
    \ dscore=4 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=4 tags=c#,linq,.net,c#-4.0 |>\n<| a tags=c#,linq,.net,c#-4.0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a dscore=3 |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,c#-4.0 |>\n<| a tags=c#,linq,.net,c#-4.0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=c#,", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static List<string> FilterList(List<string>\
    \ list, string prefix)\n{\n    List<string> result = new List<string>();\n   \
    \ foreach (string s in list)\n    {\n        if (s.StartsWith(prefix))\n     \
    \   {\n            result.Add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = list.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = list.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(s\
    \ => s.StartsWith(prefix)).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(s\
    \ => s.StartsWith(prefix)).ToList();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ a dscore=0 |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(s\
    \ => s.StartsWith(prefix)).ToList();", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n\
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n\
    \    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      if (strings[i].StartsWith(prefix)) {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n    >>> filter_by_suffix([], \"\
    a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].EndsWith(suffix))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].Contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i) {\n        if (Regex.IsMatch(strings[i],\
    \ regex)) {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_regex(string[] strings, string regex, RegexOptions options)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        if (Regex.IsMatch(strings[i], regex, options))\
    \ {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")\n    []\n", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks so much! This was very helpful.\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\npublic static string[] FilterByPrefix(string[] strings, string\
    \ prefix)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.StartsWith(prefix))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] filterByPrefix(string[] strings,\
    \ string prefix)\n{\n    return strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    }\n</code>\n<|/ a tags=c#,.net,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filterByPrefix(string[] strings, string prefix)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.StartsWith(prefix))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,.net,string,arrays |>\n<| a |>\n<code>\nstring[] filterByPrefix(string[]\
    \ strings, string prefix)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,.net,string,arrays dscore=0 |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] filterByPrefix(string[] strings, string prefix)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.StartsWith(prefix))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,string,arrays\
    \ |>\n<code>\nstring[] filterByPrefix(string[] strings, string prefix)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.StartsWith(prefix))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a ", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n \
    \   {\n        if(strings[i].StartsWith(prefix))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n    >>> filter_by_substring([], \"a\")\n    []\n    >>>\
    \ filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"\
    abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].Contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(Regex.IsMatch(strings[i], regex))\n        {\n     \
    \       result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that match a regular expression.\n\
    \    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, Regex regex) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(regex.IsMatch(strings[i]))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for the help! I appreciate it!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\",\
    \ \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[] result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring\
    \ prefix = \"a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"bcd\", \"", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")\n    ", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, string caseSensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n \
    \   {\n        if(caseSensitive == null || caseSensitive == \"false\")\n     \
    \   {\n            if(strings[i].Contains(substring))\n                result[i]\
    \ = strings[i];\n        }\n        else\n        {\n            if(strings[i].Contains(substring,\
    \ StringComparison.OrdinalIgnoreCase))\n                result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any external libraries.\
    \ I guess I should use LINQ to achieve this.\n<|/ c |>\n<| c |>\n: I added a LINQ\
    \ solution to my answer.\n<|/ c |>\n<| c |>\nThanks again. I am not allowed to\
    \ use any external libraries. I guess I should use LINQ to achieve this.\n<|/\
    \ c |>\n<| c |>\n: I added a LINQ solution to my answer.\n<|/ c |>\n<| c |>\n\
    Thanks again. I am not allowed to use any external libraries. I guess I should\
    \ use LINQ to achieve this.\n<|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\nvar\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer. I am not allowed to use any external\
    \ libraries. I guess I should use LINQ to achieve this.\n<|/ c |>\n<| c |>\n:\
    \ I added a LINQ solution to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| c |>\nThanks for your answer. I am not allowed to\
    \ use any external libraries. I guess I should use LINQ to achieve this.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| c |>\nThanks for your\
    \ answer. I am not allowed to use any external libraries. I guess I should use\
    \ LINQ to achieve this.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ c |>\nThanks for your answer. I am not ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\npublic static string[] FilterByPrefix(string[] strings, string prefix)\n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n  \
    \          result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n", "{\n \
    \   string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, however I do not understand how it works. I understand that `string[]\
    \ result = new string[strings.length];` creates a new array and that `result[i]\
    \ = strings[i];` assigns the string to the new array. However I don't understand\
    \ how `strings[i].StartsWith(prefix)` works. Could you please explain how it works?\n\
    <|/ c |>\n<| c |>\n`StartsWith` checks if the string starts with the given prefix.\
    \ `strings[i].StartsWith(prefix)` checks if the string at index `i` starts with\
    \ the given prefix. `strings[i]` returns the string at index `i`.\n<|/ c |>\n\
    <| c |>\nOkay, I understand now. Thank you very much!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n\
    <| a tags=c#,arrays |>\n<code>\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix)\n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix)\n{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays |>\n<| a tags=c#,arrays\
    \ |>\n<code>\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n\
    \    string[] result = new string[strings.length];", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that contain a given substring.\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([]", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a tags=c#,linq,.net |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=3 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=3 tags=c#,linq,.net\
    \ |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=3 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net dscore=0\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = list.Where(x => x.StartsWith(\"a\")).To", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"abc\", \"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a case-insensitive\
    \ manner.\n    >>> filter_by_substring_insensitive([], \"a\")\n    []\n    >>>\
    \ filter_by_substring_insensitive([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_substring_insensitive(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase) >= 0)\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \    >>> filter_by_not_prefix([], \"a\")\n    []\n    >>> filter_by_not_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given suffix.\n    >>> filter_by_not_suffix([],\
    \ \"a\")\n    ", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i) {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\nvar result = new List<string>();\n\
    var strings = new List<string>();\nstrings.Add(\"abc\");\nstrings.Add(\"bcd\"\
    );\nstrings.Add(\"cde\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\n\
    strings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\"\
    );\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\n\
    strings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\"\
    );\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\n\
    strings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\"\
    );\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\n\
    strings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\"\
    );\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\n\
    strings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\"\
    );\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\n\
    strings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\"\
    );\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\n\
    strings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"\
    array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\");\nstrings.Add(\"array\"\
    );", "{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] result =\
    \ strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(\"a\")).ToArray();", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThanks for your answer. I'm still a beginner at C# and I didn't know about\
    \ LINQ. I'll look into it.\n<|/ c |>\n<| c |>\n: LINQ is very powerful and worth\
    \ learning. LINQ is also very easy to use. LINQ is also very easy to understand.\
    \ LINQ is also very easy to write and maintain. LINQ is also very easy to debug.\
    \ LINQ is also very easy to read. LINQ is very easy to maintain. LINQ is very\
    \ easy to read. LINQ is very easy to write. LINQ is very easy to debug. LINQ is\
    \ very easy to read. LINQ is very easy to maintain. LINQ is very easy to read.\
    \ LINQ is very easy to write. LINQ is very easy to debug. LINQ is very easy to\
    \ read. LINQ is very easy to write. LINQ is very easy to debug. LINQ is very easy\
    \ to read. LINQ is very easy to write. LINQ is very easy to debug. LINQ is very\
    \ easy to read. LINQ is very easy to write. LINQ is very easy to debug. LINQ is\
    \ very easy to read. LINQ is very easy to write. LINQ is very easy to debug. LINQ\
    \ is very easy to read. LINQ is very easy to write. LINQ is very easy to debug.\
    \ LINQ is very easy to read. LINQ is very easy to write. LINQ is very easy to\
    \ debug. LINQ is very easy to read. LINQ is very easy to write. LINQ is very easy\
    \ to debug. LINQ is very easy to read. LINQ is very easy to write. LINQ is very\
    \ easy to debug. LINQ is very easy to read. LINQ is very easy to write. LINQ is\
    \ very easy to debug. LINQ is very easy to read. LINQ is very easy to write. LINQ\
    \ is very easy to debug. LINQ is very easy to read. LINQ is very easy to write.\
    \ LINQ is very easy to debug. LINQ is very easy to read. LINQ is very easy to\
    \ write. LINQ is very easy to debug. LINQ is very easy to read. LINQ is very easy\
    \ to write. LINQ is very easy to debug. LINQ is very easy to read. LINQ is very\
    \ easy to write. LINQ is very easy to debug. LINQ is very easy to read. ", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings) {\n        if(s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to do this without\
    \ having to import the entire std namespace. I'm thinking about a solution where\
    \ you import the entire std namespace and use std.algorithm.filter, but I'm not\
    \ sure if that's possible.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require importing the entire std namespace. Hope that helps.\n<|/ c |>\n<| a\
    \ tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\"\
    )).ToList();\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about LINQ, not LINQ to Objects.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I'll delete my answer if OP clarifies what he wants.\n<|/ c |>\n\
    <| c |>\nI guess I misunderstood the question. I'll delete my answer if OP clarifies\
    \ what he wants.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll\
    \ delete my answer if OP clarifies what he wants.\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood the question. I'll delete my answer if OP clarifies what he\
    \ wants.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToList();\n\
    </code>\n", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; i++)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; i++)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (!strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].StartsWith(prefix))\n", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regular expression.\n    >>> filter_by_regex([], \"a\")\n\
    \    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"\
    )\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[] strings,\
    \ string regex) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that match a given regular\
    \ expression.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_regex(string[] strings, string regex, RegexOptions options)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex,\
    \ options))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a given regular\
    \ expression.\n    >>> filter_by_regex([], \"a\")\n    []\n    >>> filter", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,list\
    \ |>\n<| c |>\nI like this solution, but I wonder if there's a way to do it without\
    \ creating a new array. I'm thinking about something like `strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray()`, but that doesn't work. Maybe there's some\
    \ way to do it with LINQ?\n<|/ c |>\n<| c |>\n: Yes, you can do that with LINQ,\
    \ but you still need to create a new array. LINQ doesn't change the existing array,\
    \ it creates a new one with the results. So the only way to avoid creating a new\
    \ array is to write your own extension method that does that. I'll add an example\
    \ to my answer.\n<|/ c |>\n<| c |>\n: I added an example that does that to my\
    \ answer.\n<|/ c |>\n<| a tags=c#,linq,.net,list |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ creates a new list though.\n<|/ c |>\n<| c |>\nYes, but that's not what the\
    \ OP asked for. He asked for a way to modify the existing list.\n<|/ c |>\n<|\
    \ c |>\n: I added an example that does that to my answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a tags=c#,linq,.net,list |>\n<| c |>\nThis creates a new list though.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a tags=c#,linq,.net,list |>\n<| a tags=c#,linq,.net,list\
    \ |>\n<code>\nvar result = list.Where(x => x.StartsWith(\"a\")).ToList();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis creates a new list though.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nvar result = list.Where(", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=1 tags=c#,linq,.net,string |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n\
    <code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n\
    <|/ a dscore=1 |>", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm\
    \ sorry I didn't specify that I was looking for a solution that doesn't use LINQ.\
    \ I'll update my question to reflect this.\n<|/ c |>\n<| c |>\n: I updated my\
    \ answer to include a solution that doesn't use LINQ. Hope it helps.\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] array = new string[] { \"abc\"\
    , \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result = array.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] array = new string[] { \"abc\", \"bcd\", \"cde\", \"array\"\
    \ };\nstring prefix = \"a\";\nvar result = array.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] array = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring\
    \ prefix = \"a\";\nvar result = array.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] array\
    \ = new string[] { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"\
    a\";\nvar result = array.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] array = new string[] { \"\
    abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result = array.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=1 |>\n<code>\nstring[] array = new string[] { \"abc\", \"bcd\", \"\
    cde\", \"array\" };\nstring prefix = \"a\";\nvar result = array.Where(s => s.StartsWith(prefix)).ToArray();\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like this solution, but I wonder if there is a way to do this without\
    \ using LINQ. I'm still learning C# and I haven't learned LINQ yet. Thanks for\
    \ your help!\n<|/ c |>\n<| c |>\nI added a non-LINQ solution. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks so much for your help! I really appreciate it!\n<|/\
    \ c |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ so much for your help! I really appreciate it!\n<|/ c |>\n<| a |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,arrays,string dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,arrays,string |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,arrays,string |>\n<| a |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a dscore=1 tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n        {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/\
    \ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net |>\n<|\
    \ a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net |>\n<code>\n",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    for (; i\
    \ < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \  >>> filter_by_regex([], \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[]\
    \ filter_by_regex(string[] strings, string regex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    for (; i < strings.length; ++i)\n\
    \    {\n        if (Regex.IsMatch(strings[i], regex))\n            result[i -\
    \ 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that match a regular expression.\n    >>> filter_by_regex([],\
    \ \"a\")\n    []\n    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_regex(string[]\
    \ strings, Regex regex) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (; i < strings.length; ++i)\n    {\n        if (regex.IsMatch(strings[i]))\n\
    \            result[i - 1] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,list |>\n<| c |>\nI like this solution, but I prefer\
    \ to use LINQ. Thanks for the suggestion.\n<|/ c |>\n<| c |>\nI agree, LINQ is\
    \ much more elegant and easier to read than this solution.\n<|/ c |>\n<| a tags=c#,string,arrays,list\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"cde\", \"\
    array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a tags=c#,string,arrays,list |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a tags=c#,string,arrays,list |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"bcd\", \"cde\", \"array\" };\nstring prefix = \"a\";\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\n<code>\nstring[] strings = new string[] { \"abc\", \"bcd\", \"\
    cde\", \"array\" };\nstring prefix = \"a\";\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=3 tags=c", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \ >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain a given substring.\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"a\")\n    [\"bcd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n    >>> filter_by_contains_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_contains_substring([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n    \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n    >>> filter_by_not_contains_substring(", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to filter out strings that\
    \ don't start with a given prefix.\n<|/ c |>\n<| c |>\nI believe that this is\
    \ what the OP wants. He wants to filter out strings that don't start with a given\
    \ prefix. He also wants to filter out strings that don't start with a given prefix.\
    \ He also wants to filter out strings that don't start with a given prefix. He\
    \ also wants to filter out strings that don't start with a given prefix. He also\
    \ wants to filter out strings that don't start with a given prefix. He also wants\
    \ to filter out strings that don't start with a given prefix. He also wants to\
    \ filter out strings that don't start with a given prefix. He also wants to filter\
    \ out strings that don't start with a given prefix. He also wants to filter out\
    \ strings that don't start with a given prefix. He also wants to filter out strings\
    \ that don't start with a given prefix. He also wants to filter out strings that\
    \ don't start with a given prefix. He also wants to filter out strings that don't\
    \ start with a given prefix.\n<|/ c |>\n<| c |>\nHe also wants to filter out strings\
    \ that don't start with a given prefix. He also wants to filter out strings that\
    \ don't start with a given prefix. He also wants to filter out strings that don't\
    \ start with a given prefix. He also wants to filter out strings that don't start\
    \ with a given prefix. He also wants to filter out strings that don't start with\
    \ a given prefix. He also wants to filter out strings that don't start with a\
    \ given prefix. He also wants to filter out strings that don't start with a given\
    \ prefix. He also wants to filter out strings that don't start with a given prefix.\
    \ He also wants to filter out strings that don't start with a given prefix. He\
    \ also wants to filter out strings that don't start with a given prefix. He also\
    \ wants to filter out strings that don't start with a given prefix. He also wants\
    \ to filter out strings that don't start with a given prefix. He also wants to\
    \ filter out strings that don't start with a given prefix. He also wants to filter\
    \ out strings that don't start with a given prefix. He also wants to filter out\
    \ strings that don't start with a given prefix. H", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,linq,.net,string |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(\"a\")).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"a\")).ToArray();\n\
    </code>\n<|/ a dscore=0 |>", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    a\")).ToList();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you\
    \ have a string array and want to filter out all strings that don't start with\
    \ \"a\".\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string array and\
    \ want to filter out all strings that don't start with \"a\".\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if you have a string array and want to filter out all\
    \ strings that don't start with \"a\".\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a string array and want to filter out all strings that don't start\
    \ with \"a\".\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string array\
    \ and want to filter out all strings that don't start with \"a\".\n<|/ c |>\n\
    <| a tags=c#,linq,.net |>\n<code>\nstring[] strings = new string[] { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" };\nvar result = strings.Where(s\
    \ => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't work if you have a string array and want to filter out all strings that\
    \ don't start with \"a\".\n<|/ c |>\n<| c |>\nThis doesn't work if you have a\
    \ string array and want to filter out all strings that don't start with \"a\"\
    .\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string array and want to\
    \ filter out all strings that don't start with \"a\".\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a string array and want to filter out all strings that\
    \ don't start with \"a\".\n<|/ c |>\n<| a tags=c#,linq,.net |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(\"a\")).ToList();\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis doesn't work if you have a string array and want to filter\
    \ out all strings that don't start with \"a\".\n<|/ c |>\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
