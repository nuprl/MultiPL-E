name: HumanEval_139_special_factorial
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is defined\
  \ as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n\
  \ > 0\n\n    For example:\n    >>> special_factorial(4L)\n    288L\n\n    The function\
  \ will receive an integer as input and should return the special\n    factorial\
  \ of this integer.\n    \n*/\nlong special_factorial(long n) \n"
tests: "unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
  \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
  \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
completions: ["{\n    long factorial = 1;\n    long i;\n    \n    for(i = 1; i <=\
    \ n; i++)\n    {\n        factorial *= i;\n    }\n    \n    return factorial;\n\
    }", "{\n    long result = 1;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n\
    \        result = result * i;\n    }\n    return result;\n}", "{\n    long result\
    \ = 1;\n    \n    for(long i = 2; i <= n; i++)\n    {\n        result *= i;\n\
    \    }\n    \n    return result;\n}", "{\n    long result = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
  "{\n    long fact = 1;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n      \
    \  fact = fact * i;\n    }\n    return fact;\n}\n/*\nThe factorial of a number\
    \ is the product of its digits:\n    factorial(n) = n * factorial(n-1)\n    \n\
    \    For example:\n    >>> factorial(5)\n    120\n    \n    The function will\
    \ receive an integer as input and should return the factorial\n    of this integer.\n\
    \    \n*/\nlong factorial(long n) \n{\n    long fact = 1;\n    long i;\n    for(i\
    \ = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n\
    }\n/*\nThe factorial of a number is the product of its digits:\n    factorial(n)\
    \ = n * factorial(n-1)\n    \n    For example:\n    >>> factorial(5)\n    120\n\
    \    \n    The function will receive an integer as input and should return the\
    \ factorial\n    of this integer.\n    \n*/\nlong factorial(long n) \n{\n    long\
    \ fact = 1;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n        fact = fact\
    \ * i;\n    }\n    return fact;\n}\n/*\nThe factorial of a number is the product\
    \ of its digits:\n    factorial(n) = n * factorial(n-1)\n    \n    For example:\n\
    \    >>> factorial(5)\n    120\n    \n    The function will receive an integer\
    \ as input and should return the factorial\n    of this integer.\n    \n*/\nlong\
    \ factorial(long n) \n{\n    long fact = 1;\n    long i;\n    for(i = 1; i <=\
    \ n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n}\n/*\nThe\
    \ factorial of a number is the product of its digits:\n    factorial(n) = n *\
    \ factorial(n-1)\n    \n    For example:\n    >>> factorial(5)\n    120\n    \n\
    \    The function will receive an integer as input and should return the factorial\n\
    \    of this integer.\n    \n*/\nlong factorial(long n) \n{\n    long fact = 1;\n\
    \    long i;\n    for(i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n \
    \   }\n    return fact;\n}\n/*\nThe factorial of a number is the product of its\
    \ digits:\n    factorial(n) = n * factorial(n-1)\n    \n    For example:\n   \
    \ >>> factorial(5)\n    120\n    \n    The function will receive an integer as\
    \ input and should return the factorial\n    of this integer.\n    \n*/\nlong\
    \ factorial(long n) \n{\n", "{\n    long fact = 1;\n    long i;\n    \n    for\
    \ (i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    return fact;\n}",
  "{\n    long factorial = 1;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n \
    \       factorial *= i;\n    }\n    return factorial;\n}\n/*\nThe Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "{\n    long fact = 1;\n    for(long i = 2; i <= n; i++)\n\
    \        fact = fact * i;\n    return fact;\n}\n/*\nThe Brazilian fibonacci number\
    \ is defined as:\n    brazilian_fibonacci(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0", "{\n    long result = 1;\n    long i;\n    \n    for (i = 1;\
    \ i <= n; i++) {\n        result *= i;\n    }\n    \n    return result;\n}", "{\n\
    \    long fact = 1;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n       \
    \ fact = fact * i;\n    }\n    return fact;\n}", "{\n    long factorial = 1;\n\
    \    \n    for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n\
    \    \n    return factorial;\n}", "{\n    long factorial = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}", "{\n    long factorial = 1;\n    \n    for(long i = 1; i <=\
    \ n; i++)\n    {\n        factorial *= i;\n    }\n    \n    return factorial;\n\
    }", "{\n    long result = 1;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n\
    \        result *= i;\n    }\n    return result;\n}", "{\n    long factorial =\
    \ 1;\n    long i;\n    \n    for(i = 1; i <= n; i++)\n    {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}", "{\n    long factorial = 1;\n    \n\
    \    for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ \n    return factorial;\n}", "{\n    long fact = 1;\n    long i;\n    for(i\
    \ = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n\
    }", "{\n    long fact = 1;\n    long i;\n    for(i = 1; i <= n; i++)\n    {\n\
    \        fact = fact * i;\n    }\n    return fact;\n}", "{\n    long fact = 1;\n\
    \    \n    for(long i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n  \
    \  \n    return fact;\n}", "{\n    long fact = 1;\n    long i;\n    for(i = 1;\
    \ i <= n; i++)\n    {\n        fact *= i;\n    }\n    return fact;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
