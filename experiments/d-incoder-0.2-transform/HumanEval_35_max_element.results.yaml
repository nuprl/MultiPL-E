language: d
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l, long start) \n{\n    long sum = 0;\n    long i;\n    for(i = start; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ybknmka.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_ybknmka.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l)\
    \ \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)\n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in the list,\
    \ excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_excl(long\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        if(l[i]\
    \ != 0)\n            sum += l[i];\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong product_excl(long l) \n{\n    long product = 1;\n    for(int i =\
    \ 0; i < l.length; i++)\nunittest\n{\n    alias candidate = max_element;\n\n \
    \   assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpit4qrt6j.d(98): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpit4qrt6j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max)\
    \ max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_el\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n\
    \    {\n        if (l[i] > max_el)\n        {\n            max_el = l[i];\n  \
    \          max_idx = i;\n        }\n    }\n    \n    return max_el;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) max\
    \ = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    for(; i < l.length; i++) \n\
    \    {\n        if(l[i] > max) \n        {\n            max = l[i];\n        }\n\
    \    }\n    \n    for(; j < l.length; j++) \n    {\n        if(l[j] > max) \n\
    \        {\n            max = l[j];\n        }\n    }\n    \n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++){\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeeh5xorc.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpeeh5xorc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; i++)\n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1L,\
    \ 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\ndouble product(double[] l) \n{\n    double prod\
    \ = 1;\n    for (int i = 0; i < l.length; i++)\n        prod *= l[i];\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list.\n\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ptkp01f.d(96): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1ptkp01f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo53w2mwc.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x428125]\n??:? void tmpo53w2mwc.__unittest_L24_C1() [0x427e03]\n??:?
    void tmpo53w2mwc.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430135]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42856f]\n??:? _d_run_main [0x4284da]\n??:? main [0x427eb7]\n??:?
    __libc_start_main [0xfd0a4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe_jx1vf4.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x428125]\n??:? void tmpe_jx1vf4.__unittest_L24_C1() [0x427e03]\n??:?
    void tmpe_jx1vf4.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430135]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42856f]\n??:? _d_run_main [0x4284da]\n??:? main [0x427eb7]\n??:?
    __libc_start_main [0xaf7ba554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp > max){\n            max = tmp;\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp < min){\n            min = tmp;\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i\
    \ = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for(int i = 0;\
    \ i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    float sum(float[] l) \n{\n    float sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_of_lists([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_of_lists([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_of_lists(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_of_lists([1L, 2L, 3L])\n    6L\n    >>> product_of_lists([5L, 3L, -5L,\
    \ 2L, \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2idylbpb.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2idylbpb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l) \n{\n    float sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9czb_kzf.d(107): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9czb_kzf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] >\
    \ max) max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min) min = l[i];\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i) prod *= l[i];\n\
    \    return prod;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    while (l != 0) {\n        sum += l;\n        l /= 10;\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list, excluding\
    \ zero.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_excl(long\
    \ l) \n{\n    long prod = 1;\n    while (l != 0) {\n        prod *= l;\n     \
    \   \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj8dkp1vr.d(95): Error: found \''unittest\'' instead of statement\n/tmp/tmpj8dkp1vr.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj8dkp1vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\
    \t\tmax = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd234lolr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk9oqqu3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\
    \tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpza4jix_w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nfloat sum(float[] l) \n{\n    float\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpec4g6ko0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n\
    \        {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i = 0;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n\
    \    }\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphkg2k4xe.d(107): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkg2k4xe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list with given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n    \n*/\ndouble\
    \ sum(double[] l, int precision) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n        sum += l[i] * pow(10.0, precision);\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list with given precision.\n\
    \    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n    \n*/\nfloat sum(float[] l, int precision)\
    \ \n{\n    float sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum\
    \ += l[i] * pow(10.0, precision);\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n\
    \    \n*/\nlong sum(long[] l, int precision) \n{\n    long sum = 0;\n    for (int\
    \ i = 0; i < l.\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1av92uw7.d(93): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmp1av92uw7.d(94): Error: found \''{\'' when expecting
    \'';\'' following for condition\n/tmp/tmp1av92uw7.d(95): Error: expression expected,
    not \''alias\''\n/tmp/tmp1av92uw7.d(95): Error: found \''candidate\'' when expecting
    \'')\''\n/tmp/tmp1av92uw7.d(95): Error: found \''=\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1av92uw7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6waeweu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_0ewe1m.d(97): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_0ewe1m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for (int i = 1; i < l.length; i++)\n   \
    \ {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n   \
    \         max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < min_val)\n        {\n        \
    \    min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for (int i =\
    \ 0; i < l.length; i++)\n    {\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double[] l\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpeitp0s.d(106): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpeitp0s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxf1ll46.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2xjkf0h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; ++i)\n        prod *= l[i];\n    return prod;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0;\
    \ i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double prod = 1;\n    double i;\n    for(i = 0; i < l.length\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp57taunv5.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmp57taunv5.d(108): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmp57taunv5.d(108): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57taunv5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdd_es5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdd_es5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuswm9or.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51nbvp40.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ number of elements in the list.\n    >>> count_elements([1L, 2L, 3L])\n    3L\n\
    \    >>> count_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    10L\n    \n*/\nlong count_elements(long[] l) \n{\n    long count = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiu3x_an4.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu3x_an4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpda2pdyew.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4crn3y5a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n\
    \        {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n  \
    \  }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n  \
    \  >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i = 0;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l, long defaultValue) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfhqxepyp.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfhqxepyp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max_value)\n\
    \            max_value = l[i];\n    }\n    return max_value;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgd75nvu7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrmh9tie.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1khtpjf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        product *= l[i];\n   \
    \ }\n    return product;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[]\
    \ l, int type) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list with specified type.\n    >>> sum([1L, 2L, 3L],\
    \ int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ int)\n    -10L\n    \n*/\nlong product(long[] l, int \nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpodw2hd5w.d(103): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodw2hd5w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n\
    \    \n*/\ndouble sum(long[] l, int precision) \n{\n    double sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n        sum += l[i] * pow(10.0, precision);\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list with given precision.\n\
    \    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n    \n*/\nfloat sum(long[] l, int precision)\
    \ \n{\n    float sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n  \
    \      sum += l[i] * pow(10.0, precision);\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list with given precision.\n    >>> sum([1L, 2L, 3L],\
    \ 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ 2)\n    -10.00\n    \n*/\nlong double \nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_2zi_wk.d(92): Error: no identifier for declarator long\n/tmp/tmpk_2zi_wk.d(93):
    Error: no identifier for declarator double\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpk_2zi_wk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvh6xbr1s.d(107): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh6xbr1s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for (i = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n \
    \   >>> prod([1L, 2L, 3L])\n    6L\n    \n*/\ndouble prod(double[] l) \n{\n  \
    \  double prod = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, \nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqs5o5uz0.d(100): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs5o5uz0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] !=\
    \ 0){\n            sum += l[i];\n        }\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list, excluding zero.\n    >>> product([1L, 2L,\
    \ 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp6c9zsjn.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpp6c9zsjn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxp0dprf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64fqxp7i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrmh9tie.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpelssfcuc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdd_es5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l)\
    \ \n{\n    float sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jjlrgif.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6a3fpqr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for(i = 0; i < l.length; i++)\n    {\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[] l, long type)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n   \
    \ {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list with specified type.\n    >>> prod([1L, 2L, 3L], int)\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n\
    \    -10L\n    \n*/\nlong \nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8a2iy7l6.d(103): Error: no identifier for declarator long\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8a2iy7l6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3\nunittest\n{\n    alias candidate = max_element;\n\n   \
    \ assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzhqxoujm.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzhqxoujm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n    long i;\n\
    \    for(i = 1; i < l.length; i++){\n        if(l[i] < min){\n            min\
    \ = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -123\n\
    \    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list with specified type.\n    >>>\
    \ prod([1L, 2L, 3L], int)\n    6\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L], int)\n    -10\n    \n\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7k6kjg08.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7k6kjg08.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\
    \ \n    {\n        if(l[i] < min) \n            min = l[i];\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long l) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n            sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn product\
    \ of all elements in the list, excluding zero.\n    >>> prod([1L, 2L, 3L])\n \
    \   6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu4ey56k7.d(95): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu4ey56k7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    long i;\n    max = l[0];\n    for (i = 1; i < l.length; i++) \n    {\n  \
    \      if (l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n\
    \    long i;\n    min = l[0];\n    for (i = 1; i < l.length; i++) \n    {\n  \
    \      if (l[i] < min) \n        {\n            min = l[i];\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n   \
    \ return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n   \
    \ return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqfokcbms.d(100): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfokcbms.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9eqfqvg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 1; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for (i = 1; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for (i = 1; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmd4ccqd1.d(94): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmd4ccqd1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcadguaz3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i]\
    \ < 0)\n    {\n        i++;\n    }\n    \n    while (j < l.length && l[j] > 0)\n\
    \    {\n        j++;\n    }\n    \n    if (i < l.length)\n    {\n        max =\
    \ l[i];\n    }\n    else if (j < l.length)\n    {\n        max = l[j];\n    }\n\
    \    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkxnwytd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsakes4_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpax30gfmt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double\
    \ i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n\
    \    double i;\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvacgvxyj.d(103): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvacgvxyj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long temp = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n   \
    \     temp = l[i];\n        if(temp > max)\n        {\n            max = temp;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3wqb_ur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    if(l[i] > max)\n        {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z7cpqcf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < min) \n            min = l[i];\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for (int i =\
    \ 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for (int i = 0;\
    \ i < l.length; i++) \n        product *= l[i];\n    return product;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++) \n \
    \       product *= l[i];\n    return product;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkuulu644.d(100): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkuulu644.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdd_es5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a_di98a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe_jx1vf4.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x428125]\n??:? void tmpe_jx1vf4.__unittest_L24_C1() [0x427e03]\n??:?
    void tmpe_jx1vf4.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430135]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42856f]\n??:? _d_run_main [0x4284da]\n??:? main [0x427eb7]\n??:?
    __libc_start_main [0xaf7ba554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] > max_val) {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmq36nwiq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max){\n            max = l[i];\n            max_pos = i;\n   \
    \     }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long min_pos = 0;\n    for(int i = 1; i <\
    \ l.length; i++){\n        if(l[i] < min){\n            min = l[i];\n        \
    \    min_pos = i;\n        }\n    }\n    return min_pos;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n\
    {\n    long prod = 1;\n    for(int i = 0; i < l.length; i++){\n        prod *=\
    \ l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum += l[i];\n   \
    \ }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l) \n{\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj44y7_b.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj44y7_b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54xi1bqd.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp54xi1bqd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    while(i < l.length && l[i]\
    \ > max)\n    {\n        max = l[i];\n        i++;\n    }\n    \n    while(j <\
    \ l.length && l[j] > max)\n    {\n        max = l[j];\n        j++;\n    }\n \
    \   \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixwq1n80.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_exclzero(long[]\
    \ l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        if\
    \ (l[i] != 0)\n            sum += l[i];\n    return sum;\n}\n/*\nReturn sum of\
    \ all elements in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum_exclzero_long(long[] l) \n{\n    long sum = 0;\n    for (int\
    \ i = 0; i < l.length; i++)\n        if (l[i] != 0)\n            sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_exclzero(double[] l) \n\
    {\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz98v9xw1.d(95): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz98v9xw1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n   \
    \         max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for(int i = 1; i < l.length; i++)\n      \
    \  if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n \
    \   >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified precision.\n    >>> sum_elements([1L,\
    \ 2L, 3L], 2)\n    3.0\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L], 2)\n    -10.0\n    \n*/\nlong sum_elements(long[] l, int prec)\
    \ \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum +=\
    \ l[i] * pow(10, prec);\n    return sum;\n}\n/*\nReturn mean of list.\n    >>>\
    \ mean_elements([1L, 2L, 3L])\n    2.0\n    >>> mean_elements([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10.0\n    \n*/\ndouble mean_elements(long[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++)\n       \
    \ sum += l[i];\n    return sum / l.length;\n}\n/*\nReturn mean of list with specified\
    \ precision.\n    >>> mean_elements([1L, 2L, 3L], 2)\n    2.0\n    >>> mean_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.0\n    \n*/\ndouble\
    \ mean_elements(long[] l, int prec) \n{\n    double sum = 0;\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm0q1h9dn.d(90): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0q1h9dn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10\n\
    \    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn sum of all elements in the list with specified type.\n    >>> sum([1L,\
    \ 2L, 3L], float)\n    6.5\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L], float)\n    -10.5\n    \n*/\ndouble sum(double[] l, int type) \n\
    {\n    double sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    \
    \    sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list\
    \ with specified type.\n    >>> sum([1L, 2L, 3L], float)\n    6.5\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], float)\n    -10.5\n    \n*/\n\
    double sum(double[] l, float type) \n{\n    double sum = 0;\n    long i;\n   \
    \ for \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp60kjfsod.d(97): Error: found \''unittest\'' when expecting \''(\''\n/tmp/tmp60kjfsod.d(104):
    Error: found \''main\'' when expecting \''.\'' following void\n/tmp/tmp60kjfsod.d(104):
    Error: found \''(\'' when expecting identifier following \''void.\''\n/tmp/tmp60kjfsod.d(104):
    Error: found \'')\'' when expecting \'';\'' following for condition\n/tmp/tmp60kjfsod.d(104):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp60kjfsod.d(104): Error:
    found \''EOF\'' instead of statement\n/tmp/tmp60kjfsod.d(104): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp60kjfsod.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max_value){\n            max_value = l[i];\n            max_pos\
    \ = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++){\n        if(l[i] < min_value){\n            min_value =\
    \ l[i];\n            min_pos = i;\n        }\n    }\n    return min_pos;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5opjdvg.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5opjdvg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    tmp = l[i];\n        if(tmp > max)\n            max = tmp;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmply75zp0z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long temp = 0;\n    for(int i = 0; i < l.length; i++){\n        temp\
    \ = l[i];\n        if(temp > max){\n            max = temp;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq_pw_z5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6waeweu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9m0diyob.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    long i;\n    \n    max = l[0];\n    for (i = 1; i < l.length; i++)\n    \
    \    if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjicm4in.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for (int i = 1; i < l.length; i++)\n   \
    \ {\n        if (l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum8d5hc0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\
    \tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[] l, long type)\
    \ \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\ndouble sum(double[] l, long\
    \ type) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l, long type) \n{\n\tfloat sum = 0;\n\tfor (int \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp87r6i6_h.d(97): Error: no identifier for declarator int\n/tmp/tmp87r6i6_h.d(97):
    Error: expression expected, not \''unittest\''\n/tmp/tmp87r6i6_h.d(98): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmp87r6i6_h.d(99):
    Error: expression expected, not \''alias\''\n/tmp/tmp87r6i6_h.d(99): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmp87r6i6_h.d(99): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87r6i6_h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for (int i = 1; i < l.length; ++i)\n   \
    \ {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n   \
    \         max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for (int i = 1;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < min_val)\n        {\n        \
    \    min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp41ljsd4c.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp41ljsd4c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min) min = l[i];\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ ++i) sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l)\
    \ \n{\n    long prod = 1;\n    long i;\n    for (i = 0; i < l.length; ++i) prod\
    \ *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list that\
    \ are less than n.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n    \n*/\nlong sum_less(long[]\
    \ l, long n) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ ++i) if (l[i] < n) sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list that are greater than n.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n\
    \    \n*/\nlong sum_greater(long[] l, long n) \n{\n    long sum = 0;\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf0x36tnn.d(92): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0x36tnn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong\
    \ sum(long[] l, int type) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length;\
    \ ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], float)\n    6.5\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], float)\n    -10.5\n\
    \    \n*/\ndouble sum(double[] l, int type) \n{\n    double sum = 0;\n    for\
    \ (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list with specified type.\n    >>> sum([1L,\
    \ 2L, 3L], float)\n    6.5\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L], float)\n    -10.5\n    \n*/\nfloat sum(float[] l, int type) \n{\n\
    \    float sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc84fhwvp.d(94): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpc84fhwvp.d(101): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpc84fhwvp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n\
    \        if(tmp > max){\n            max = tmp;\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n\
    \    long tmp;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n\
    \        if(tmp < min){\n            min = tmp;\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; i++){\n       \
    \ prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_k9p9ixz.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_k9p9ixz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefy0nf27.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++)\n    {\n    \
    \    if(l[i] > max)\n        {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z1g4w3w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    long i;\n    max = l[0];\n    for (i = 1; i < l.length; i++) \n        if\
    \ (l[i] > max) \n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    long i;\n    min = l[0];\n    for (i = 1; i < l.length;\
    \ i++) \n        if (l[i] < min) \n            min = l[i];\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++) \n        product *= l[i];\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    long i;\n\
    \    for (i = 0; i < l.length\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpse6thzai.d(99): Error: found \''unittest\'' when expecting \'';\''
    following for condition\n/tmp/tmpse6thzai.d(106): Error: found \''void\'' when
    expecting \'')\''\n/tmp/tmpse6thzai.d(106): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpse6thzai.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpap8srkug.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdd_es5f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pm_hbvh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulj5r0e1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> product_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n    long\
    \ product = 1;\n    for (int i = 0; i < l.length; i++)\n        product *= l[i];\n\
    \    return product;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++)\n  \
    \      product *= l[i];\nunittest\n{\n    alias candidate = max_element;\n\n \
    \   assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphn8om54s.d(94): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphn8om54s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrmh9tie.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long max_idx = 1;\n    for (int i = 1; i < l.length; ++i) {\n \
    \       if (l[i] > max) {\n            max = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjwi5iyo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long temp = 0;\n    for(int i = 0; i < l.length; i++){\n        temp\
    \ = l[i];\n        if(temp > max){\n            max = temp;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq_pw_z5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list that are less\
    \ than the given value.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n    \n*/\nlong sum(long[]\
    \ l, long x) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] < x){\n            sum += l[i];\n        }\n    }\n \
    \   return sum;\n}\n/*\nReturn product of all elements in the list that are less\
    \ than the given value.\n    >>> product([1L, 2L, 3L], 3)\n    6L\n    >>> product([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmu418ze1.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmu418ze1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2h8q19qk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; ++i)\n        product *= l[i];\n    return product;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double i;\n   \
    \ for(i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    double\
    \ i;\n    for(i = 0; i < l.length; ++i)\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5l5f15o.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5l5f15o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (long i = 1; i < l.length; i++) \n   \
    \     if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (long i : l) \n        sum\
    \ += i;\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for (double i : l) \n        sum += i;\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    for (float i : l) \n\
    \        sum += i;\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqefdxq9m.d(45): Error: semicolon expected, not \'':\''\n/tmp/tmpqefdxq9m.d(45):
    Error: expression expected, not \'':\''\n/tmp/tmpqefdxq9m.d(45): Error: found
    \''l\'' when expecting \'';\'' following for condition\n/tmp/tmpqefdxq9m.d(60):
    Error: semicolon expected, not \'':\''\n/tmp/tmpqefdxq9m.d(60): Error: expression
    expected, not \'':\''\n/tmp/tmpqefdxq9m.d(60): Error: found \''l\'' when expecting
    \'';\'' following for condition\n/tmp/tmpqefdxq9m.d(75): Error: semicolon expected,
    not \'':\''\n/tmp/tmpqefdxq9m.d(75): Error: expression expected, not \'':\''\n/tmp/tmpqefdxq9m.d(75):
    Error: found \''l\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqefdxq9m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrmh9tie.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max_value){\n            max_value = l[i];\n            max_pos\
    \ = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++){\n        if(l[i] < min_value){\n            min_value =\
    \ l[i];\n            min_pos = i;\n        }\n    }\n    return min_pos;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5opjdvg.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5opjdvg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfzydwqn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvh6xbr1s.d(107): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh6xbr1s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max){\n            max = l[i];\n            max_pos = i;\n   \
    \     }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwdf6gtsm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified type.\n    >>> sum([1L, 2L, 3L],\
    \ int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ int)\n    -10L\n    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(type == int.class)\
    \ \n        {\n            sum += (int)l[i];\n        }\n        else if(type\
    \ == long.class) \n        {\n            sum += l[i];\n        }\n    }\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list with specified\
    \ type.\n    >>> sum([1L, 2L, 3L], int)\n    6\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqeztyjkd.d(94): Error: found \''class\'' when expecting identifier
    following \''int.\''\n/tmp/tmpqeztyjkd.d(96): Error: C style cast illegal, use
    cast(int)l[i]\n/tmp/tmpqeztyjkd.d(98): Error: found \''class\'' when expecting
    identifier following \''long.\''\n/tmp/tmpqeztyjkd.d(105): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqeztyjkd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe_jx1vf4.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x428125]\n??:? void tmpe_jx1vf4.__unittest_L24_C1() [0x427e03]\n??:?
    void tmpe_jx1vf4.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430135]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42856f]\n??:? _d_run_main [0x4284da]\n??:? main [0x427eb7]\n??:?
    __libc_start_main [0xaf7ba554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe_jx1vf4.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x428125]\n??:? void tmpe_jx1vf4.__unittest_L24_C1() [0x427e03]\n??:?
    void tmpe_jx1vf4.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430135]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42856f]\n??:? _d_run_main [0x4284da]\n??:? main [0x427eb7]\n??:?
    __libc_start_main [0xaf7ba554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxf1ll46.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; ++i)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for(int i = 1; i < l.length; ++i)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; ++i)\n     \
    \   product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;\n    for(int i = 0; i < l.length; ++i)\n      \
    \  product *= l[i];\n    return product;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknynzzkt.d(96): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpknynzzkt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpe_jx1vf4.d(28): unittest failure\n----------------\n??:?
    _d_unittestp [0x428125]\n??:? void tmpe_jx1vf4.__unittest_L24_C1() [0x427e03]\n??:?
    void tmpe_jx1vf4.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430135]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42856f]\n??:? _d_run_main [0x4284da]\n??:? main [0x427eb7]\n??:?
    __libc_start_main [0xaf7ba554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp;\n    for(int i = 0; i < l.length; i++)\n    {\n        tmp\
    \ = l[i];\n        if(tmp > max)\n            max = tmp;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrmr5ghf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4nvle1x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjrwxrbpm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0z6w2p4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a_di98a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydojafbh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp015ichk8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    foreach(i, l) \n    {\n        if (max < l[i])\
    \ \n        {\n            max = l[i];\n        }\n    }\n    \n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu5x3acbe.d(15): Error: no identifier for declarator l\n/tmp/tmpu5x3acbe.d(15):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpu5x3acbe.d(23): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu5x3acbe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0szphipj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp > max){\n            max = tmp;\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp < min){\n            min = tmp;\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i\
    \ = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for(int i =\
    \ 0; i < l.length; i++){\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for(int i = 0;\
    \ i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    for(int i\
    \ = 0; i < l.length\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb3dmb8lu.d(102): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmpb3dmb8lu.d(109): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmpb3dmb8lu.d(109): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3dmb8lu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long n = l.length;\n    \n    while (i < n) {\n \
    \       if (l[i] > max) {\n            max = l[i];\n        }\n        i++;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uedqn_9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqz226_85.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1khtpjf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++)\n        product *= l[i];\n    return product;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double i;\n   \
    \ for(i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    double\
    \ i;\n    for(i = 0; i < l.length; i++)\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2wcqzbt.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2wcqzbt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_index = -1;\n    for(int i = 1; i < l.length; i++)\n \
    \   {\n        if(l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\n/*\n\
    Return minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min_value = l[0];\n\
    \    long min_index = -1;\n    for(int i = 1; i < l.length; i++)\n    {\n    \
    \    if(l[i] < min_value)\n        {\n            min_value = l[i];\n        \
    \    min_index = i;\n        }\n    }\n    return min_index;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.00\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n\
    \    \n*/\nlong sum(long[] l, int precision) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        sum += l[i] * pow(10, precision);\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ precision and specified type.\n    >>> sum([1L, 2L, 3L], 2, int)\n    6\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2, int)\n    -10\n\
    \    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9gan44h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; ++i) {\n   \
    \     if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> product_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n    long\
    \ prod = 1;\n    for (int i = 0; i < l.length; ++i)\n        prod *= l[i];\n \
    \   return prod;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double\
    \ sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l[i];\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[] l) \n\
    {\n    double prod = 1;\n    for (int i = 0; i < l.length; ++i)\n        prod\
    \ *= \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6yn5i_7u.d(94): Error: expression expected, not \''unittest\''\n/tmp/tmp6yn5i_7u.d(95):
    Error: found \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6yn5i_7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp371_479y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64fqxp7i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk9oqqu3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i]\
    \ < 0)\n        i++;\n    \n    while (j < l.length && l[j] > 0)\n        j++;\n\
    \    \n    if (i < l.length)\n        max = l[i];\n    \n    if (j < l.length)\n\
    \        max = l[j];\n    \n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5z0h413.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunr8bzha.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhrpp75v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpda2pdyew.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpelssfcuc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64fqxp7i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdi7dm8do.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk9oqqu3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ number of elements in the list.\n    >>> count_elements([1L, 2L, 3L])\n    3L\n\
    \    >>> count_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    10L\n    \n*/\nlong count_elements(long[] l) \n{\n    long count = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\nReturn sum of all elements in list.\n    >>> sum_of_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_of_elements([5L, 3L, -5L, \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4abzmbbx.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4abzmbbx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] > max_val) \n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5gj6efc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r_1k967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\t\
    max = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78qcji6x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1khtpjf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        product *= l[i];\n   \
    \ }\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7kbu__31.d(105): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kbu__31.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1khtpjf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long\
    \ l) \n{\n    long sum = 0;\n    while (l != 0)\n        sum += l;\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list, excluding zero.\n \
    \   >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_excl(long l)\
    \ \n{\n    long product = 1;\n    while (l != 0)\n        product *= l;\n    return\
    \ product;\n}\n/*\nReturn \nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp86zez3eg.d(96): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp86zez3eg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvh6xbr1s.d(107): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh6xbr1s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64fqxp7i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84rav4oq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n  \
    \  for (i = 0; i < l.length; i++) {\n        product *= l[i];\n    }\n    return\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n\
    \    long i;\n    for (i = 0; i < l.length; i++) {\n        product *= l[i];\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxkiepr5x.d(103): Error: found \''unittest\'' instead of statement\n/tmp/tmpxkiepr5x.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkiepr5x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_index = 0;\n    for (int i = 0; i < l.length; ++i) {\n\
    \        if (l[i] > max_value) {\n            max_value = l[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_value;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnym0br0f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\
    \tmax = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kn5hoqg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuswm9or.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792491
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5hluw8cp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792492
