language: d
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[]\
    \ l, long start) \n{\n    long sum = 0;\n    long i;\n    for(i = start; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpze9p4jtv.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpze9p4jtv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l)\
    \ \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++)\n        product\
    \ *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in the list,\
    \ excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_excl(long\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        if(l[i]\
    \ != 0)\n            sum += l[i];\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong product_excl(long l) \n{\n    long product = 1;\n    for(int i =\
    \ 0; i < l.length; i++)\nunittest\n{\n    alias candidate = max_element;\n\n \
    \   assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkrodhh38.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrodhh38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max)\
    \ max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_el\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\n\
    \    {\n        if (l[i] > max_el)\n        {\n            max_el = l[i];\n  \
    \          max_idx = i;\n        }\n    }\n    \n    return max_el;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max) max\
    \ = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    for(; i < l.length; i++) \n\
    \    {\n        if(l[i] > max) \n        {\n            max = l[i];\n        }\n\
    \    }\n    \n    for(; j < l.length; j++) \n    {\n        if(l[j] > max) \n\
    \        {\n            max = l[j];\n        }\n    }\n    \n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0; i < l.length; i++){\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvma1mpmt.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvma1mpmt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; i++)\n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product([1L,\
    \ 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\ndouble product(double[] l) \n{\n    double prod\
    \ = 1;\n    for (int i = 0; i < l.length; i++)\n        prod *= l[i];\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list.\n\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlnbb_ed.d(96): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlnbb_ed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwry1h1o0.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpwry1h1o0.__unittest_L24_C1() [0x427e03]

    ??:? void tmpwry1h1o0.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo69yt7o9.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpo69yt7o9.__unittest_L24_C1() [0x427e03]

    ??:? void tmpo69yt7o9.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp > max){\n            max = tmp;\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp < min){\n            min = tmp;\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i\
    \ = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for(int i = 0;\
    \ i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    float sum(float[] l) \n{\n    float sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_of_lists([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_of_lists([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_of_lists(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_of_lists([1L, 2L, 3L])\n    6L\n    >>> product_of_lists([5L, 3L, -5L,\
    \ 2L, \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth497sb4.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth497sb4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i] > max)\
    \ \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l) \n{\n    float sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijiv8ep4.d(107): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijiv8ep4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] >\
    \ max) max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min) min = l[i];\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long prod = 1;\n    for (int i = 0; i < l.length; ++i) prod *= l[i];\n\
    \    return prod;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    while (l != 0) {\n        sum += l;\n        l /= 10;\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list, excluding\
    \ zero.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_excl(long\
    \ l) \n{\n    long prod = 1;\n    while (l != 0) {\n        prod *= l;\n     \
    \   \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdddua8l3.d(95): Error: found `unittest` instead of statement

    /tmp/tmpdddua8l3.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdddua8l3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\
    \t\tmax = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\
    \tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for(int i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nfloat sum(float[] l) \n{\n    float\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n\
    \        {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i = 0;\n    for(i\
    \ = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        product *= l[i];\n\
    \    }\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzafaycd9.d(107): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzafaycd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list with given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n    \n*/\ndouble\
    \ sum(double[] l, int precision) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n        sum += l[i] * pow(10.0, precision);\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list with given precision.\n\
    \    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n    \n*/\nfloat sum(float[] l, int precision)\
    \ \n{\n    float sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum\
    \ += l[i] * pow(10.0, precision);\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.2\n\
    \    \n*/\nlong sum(long[] l, int precision) \n{\n    long sum = 0;\n    for (int\
    \ i = 0; i < l.\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4sncqzz.d(93): Error: identifier expected following `.`, not `unittest`

    /tmp/tmpf4sncqzz.d(94): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpf4sncqzz.d(95): Error: expression expected, not `alias`

    /tmp/tmpf4sncqzz.d(95): Error: found `candidate` when expecting `)`

    /tmp/tmpf4sncqzz.d(95): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4sncqzz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n        sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkcr036nc.d(97): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkcr036nc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for (int i = 1; i < l.length; i++)\n   \
    \ {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n   \
    \         max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < min_val)\n        {\n        \
    \    min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i <\
    \ l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for (int i =\
    \ 0; i < l.length; i++)\n    {\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double[] l\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjh0n8eni.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjh0n8eni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long prod = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; ++i)\n        prod *= l[i];\n    return prod;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    double i;\n    for(i = 0;\
    \ i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double prod = 1;\n    double i;\n    for(i = 0; i < l.length\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_l6dg4o.d(101): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpp_l6dg4o.d(108): Error: found `void` when expecting `)`

    /tmp/tmpp_l6dg4o.d(108): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_l6dg4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while(i < l.length) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ number of elements in the list.\n    >>> count_elements([1L, 2L, 3L])\n    3L\n\
    \    >>> count_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    10L\n    \n*/\nlong count_elements(long[] l) \n{\n    long count = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwf08v801.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwf08v801.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n\
    \        {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n  \
    \  }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n  \
    \  >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i = 0;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l, long defaultValue) \n{\n    long\
    \ sum = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n     \
    \   sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yjh2946.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yjh2946.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max_value)\n\
    \            max_value = l[i];\n    }\n    return max_value;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n    {\n        product *= l[i];\n   \
    \ }\n    return product;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[]\
    \ l, int type) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list with specified type.\n    >>> sum([1L, 2L, 3L],\
    \ int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ int)\n    -10L\n    \n*/\nlong product(long[] l, int \nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgifoclqq.d(103): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgifoclqq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with given precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.0\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n\
    \    \n*/\ndouble sum(long[] l, int precision) \n{\n    double sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++)\n        sum += l[i] * pow(10.0, precision);\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list with given precision.\n\
    \    >>> sum([1L, 2L, 3L], 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n    \n*/\nfloat sum(long[] l, int precision)\
    \ \n{\n    float sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n  \
    \      sum += l[i] * pow(10.0, precision);\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list with given precision.\n    >>> sum([1L, 2L, 3L],\
    \ 2)\n    6.0\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ 2)\n    -10.00\n    \n*/\nlong double \nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyyde5k1.d(92): Error: use `real` instead of `long double`

    /tmp/tmpuyyde5k1.d(93): Error: no identifier for declarator `real`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyyde5k1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp18deq_m1.d(107): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18deq_m1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for (i = 0; i < l.length; i++)\n        prod *= l[i];\n    return prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n \
    \   >>> prod([1L, 2L, 3L])\n    6L\n    \n*/\ndouble prod(double[] l) \n{\n  \
    \  double prod = 1;\n    long i;\n    for (i = 0; i < l.length; i++)\n       \
    \ prod *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, \nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnj5dq4l1.d(100): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnj5dq4l1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_excl(long l) \n{\n    long\
    \ sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] !=\
    \ 0){\n            sum += l[i];\n        }\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list, excluding zero.\n    >>> product([1L, 2L,\
    \ 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpksiacmo2.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksiacmo2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for(int i = 1;\
    \ i < l.length; i++)\n    {\n        if(l[i] < min_val)\n        {\n         \
    \   min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat sum(float[] l)\
    \ \n{\n    float sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong prod(long[] l) \n{\n    long prod = 1;\n    long i;\n\
    \    for(i = 0; i < l.length; i++)\n    {\n        prod *= l[i];\n    }\n    return\
    \ prod;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[] l, long type)\
    \ \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n   \
    \ {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all\
    \ elements in the list with specified type.\n    >>> prod([1L, 2L, 3L], int)\n\
    \    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n\
    \    -10L\n    \n*/\nlong \nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt9vvubak.d(103): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt9vvubak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -123L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3\nunittest\n{\n    alias candidate = max_element;\n\n   \
    \ assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzi2ya1l.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzi2ya1l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n  \
    \  >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long min = l[0];\n    long i;\n\
    \    for(i = 1; i < l.length; i++){\n        if(l[i] < min){\n            min\
    \ = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum(long[] l) \n\
    {\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -123\n\
    \    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    long i;\n\
    \    for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list with specified type.\n    >>>\
    \ prod([1L, 2L, 3L], int)\n    6\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L], int)\n    -10\n    \n\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpew6r3l96.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpew6r3l96.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\
    \ \n    {\n        if(l[i] < min) \n            min = l[i];\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n  \
    \  for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long l) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n            sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn product\
    \ of all elements in the list, excluding zero.\n    >>> prod([1L, 2L, 3L])\n \
    \   6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwwoi1zp.d(95): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwwoi1zp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    long i;\n    max = l[0];\n    for (i = 1; i < l.length; i++) \n    {\n  \
    \      if (l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min;\n\
    \    long i;\n    min = l[0];\n    for (i = 1; i < l.length; i++) \n    {\n  \
    \      if (l[i] < min) \n        {\n            min = l[i];\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n   \
    \ return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n   \
    \ return sum;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsil0p0d.d(100): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsil0p0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for (i = 1; i < l.length; i++)\n        sum += l[i];\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n\
    \    long product = 1;\n    long i;\n    for (i = 1; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    double i;\n    for (i = 1; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbro4tas1.d(94): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbro4tas1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i]\
    \ < 0)\n    {\n        i++;\n    }\n    \n    while (j < l.length && l[j] > 0)\n\
    \    {\n        j++;\n    }\n    \n    if (i < l.length)\n    {\n        max =\
    \ l[i];\n    }\n    else if (j < l.length)\n    {\n        max = l[j];\n    }\n\
    \    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6fi4rp33.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428165]

    ??:? void tmp6fi4rp33.__unittest_L37_C1() [0x427e47]

    ??:? void tmp6fi4rp33.__modtest() [0x427ee8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b056]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430698]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430175]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b02d]

    ??:? runModuleUnitTests [0x42bf99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428628]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i=1; i<l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double\
    \ i;\n    for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n\
    \    double i;\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmatvbvhe.d(103): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmatvbvhe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long temp = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n   \
    \     temp = l[i];\n        if(temp > max)\n        {\n            max = temp;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    if(l[i] > max)\n        {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] < min) \n            min = l[i];\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for (int i =\
    \ 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for (int i = 0;\
    \ i < l.length; i++) \n        product *= l[i];\n    return product;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for (int i = 0;\
    \ i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[]\
    \ l) \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++) \n \
    \       product *= l[i];\n    return product;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzgljq9v.d(100): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzgljq9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo69yt7o9.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpo69yt7o9.__unittest_L24_C1() [0x427e03]

    ??:? void tmpo69yt7o9.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] > max_val) {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max){\n            max = l[i];\n            max_pos = i;\n   \
    \     }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long min_pos = 0;\n    for(int i = 1; i <\
    \ l.length; i++){\n        if(l[i] < min){\n            min = l[i];\n        \
    \    min_pos = i;\n        }\n    }\n    return min_pos;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l) \n\
    {\n    long prod = 1;\n    for(int i = 0; i < l.length; i++){\n        prod *=\
    \ l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum += l[i];\n   \
    \ }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l) \n{\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8k66x_5a.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8k66x_5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong prod(long[]\
    \ l) \n{\n    long prod = 1;\n    long i;\n    for(i = 0; i < l.length; i++) \n\
    \    {\n        prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34ffxvyo.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34ffxvyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    while(i < l.length && l[i]\
    \ > max)\n    {\n        max = l[i];\n        i++;\n    }\n    \n    while(j <\
    \ l.length && l[j] > max)\n    {\n        max = l[j];\n        j++;\n    }\n \
    \   \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphtc3yyph.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428155]

    ??:? void tmphtc3yyph.__unittest_L30_C1() [0x427ec0]

    ??:? void tmphtc3yyph.__modtest() [0x427ed4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b046]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430688]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430165]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b01d]

    ??:? runModuleUnitTests [0x42bf89]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum_exclzero(long[]\
    \ l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        if\
    \ (l[i] != 0)\n            sum += l[i];\n    return sum;\n}\n/*\nReturn sum of\
    \ all elements in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum_exclzero_long(long[] l) \n{\n    long sum = 0;\n    for (int\
    \ i = 0; i < l.length; i++)\n        if (l[i] != 0)\n            sum += l[i];\n\
    \    return sum;\n}\n/*\nReturn sum of all elements in the list, excluding zero.\n\
    \    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_exclzero(double[] l) \n\
    {\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01f71bms.d(95): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01f71bms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for(int i = 1; i < l.length; i++)\n        if(l[i] > max)\n   \
    \         max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for(int i = 1; i < l.length; i++)\n      \
    \  if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n \
    \   >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified precision.\n    >>> sum_elements([1L,\
    \ 2L, 3L], 2)\n    3.0\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L], 2)\n    -10.0\n    \n*/\nlong sum_elements(long[] l, int prec)\
    \ \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum +=\
    \ l[i] * pow(10, prec);\n    return sum;\n}\n/*\nReturn mean of list.\n    >>>\
    \ mean_elements([1L, 2L, 3L])\n    2.0\n    >>> mean_elements([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10.0\n    \n*/\ndouble mean_elements(long[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++)\n       \
    \ sum += l[i];\n    return sum / l.length;\n}\n/*\nReturn mean of list with specified\
    \ precision.\n    >>> mean_elements([1L, 2L, 3L], 2)\n    2.0\n    >>> mean_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.0\n    \n*/\ndouble\
    \ mean_elements(long[] l, int prec) \n{\n    double sum = 0;\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpam1qwbnk.d(90): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpam1qwbnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10\n\
    \    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n    long i;\n\
    \    for (i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n\
    /*\nReturn sum of all elements in the list with specified type.\n    >>> sum([1L,\
    \ 2L, 3L], float)\n    6.5\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L], float)\n    -10.5\n    \n*/\ndouble sum(double[] l, int type) \n\
    {\n    double sum = 0;\n    long i;\n    for (i = 0; i < l.length; i++)\n    \
    \    sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the list\
    \ with specified type.\n    >>> sum([1L, 2L, 3L], float)\n    6.5\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], float)\n    -10.5\n    \n*/\n\
    double sum(double[] l, float type) \n{\n    double sum = 0;\n    long i;\n   \
    \ for \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfktpqwc7.d(97): Error: found `unittest` when expecting `(`

    /tmp/tmpfktpqwc7.d(104): Error: found `main` when expecting `.` following void

    /tmp/tmpfktpqwc7.d(104): Error: found `(` when expecting identifier following
    `void`.

    /tmp/tmpfktpqwc7.d(104): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmpfktpqwc7.d(104): Error: found `End of File` when expecting `)`

    /tmp/tmpfktpqwc7.d(104): Error: found `End of File` instead of statement

    /tmp/tmpfktpqwc7.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfktpqwc7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max_value){\n            max_value = l[i];\n            max_pos\
    \ = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++){\n        if(l[i] < min_value){\n            min_value =\
    \ l[i];\n            min_pos = i;\n        }\n    }\n    return min_pos;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dq2c1ht.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dq2c1ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    tmp = l[i];\n        if(tmp > max)\n            max = tmp;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long temp = 0;\n    for(int i = 0; i < l.length; i++){\n        temp\
    \ = l[i];\n        if(temp > max){\n            max = temp;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_value)\n        {\n            max_value = l[i];\n    \
    \        max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5mwojwqr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42811d]

    ??:? void tmp5mwojwqr.__unittest_L24_C1() [0x427dfb]

    ??:? void tmp5mwojwqr.__modtest() [0x427e9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430650]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43012d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]

    ??:? runModuleUnitTests [0x42bf51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    long i;\n    \n    max = l[0];\n    for (i = 1; i < l.length; i++)\n    \
    \    if (l[i] > max)\n            max = l[i];\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for (int i = 1; i < l.length; i++)\n   \
    \ {\n        if (l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_pos = i;\n        }\n    }\n    return max_pos;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2ze25ymj.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42811d]

    ??:? void tmp2ze25ymj.__unittest_L24_C1() [0x427dfb]

    ??:? void tmp2ze25ymj.__modtest() [0x427e9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430650]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43012d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]

    ??:? runModuleUnitTests [0x42bf51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\
    \tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong sum(long[] l, long type)\
    \ \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\ndouble sum(double[] l, long\
    \ type) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nfloat sum(float[]\
    \ l, long type) \n{\n\tfloat sum = 0;\n\tfor (int \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptvgnw2ac.d(97): Error: no identifier for declarator `int`

    /tmp/tmptvgnw2ac.d(97): Error: expression expected, not `unittest`

    /tmp/tmptvgnw2ac.d(98): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmptvgnw2ac.d(99): Error: expression expected, not `alias`

    /tmp/tmptvgnw2ac.d(99): Error: found `candidate` when expecting `)`

    /tmp/tmptvgnw2ac.d(99): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptvgnw2ac.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for (int i = 1; i < l.length; ++i)\n   \
    \ {\n        if (l[i] > max_val)\n        {\n            max_val = l[i];\n   \
    \         max_idx = i;\n        }\n    }\n    return max_val;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_val = l[0];\n    long min_idx = 1;\n    for (int i = 1;\
    \ i < l.length; ++i)\n    {\n        if (l[i] < min_val)\n        {\n        \
    \    min_val = l[i];\n            min_idx = i;\n        }\n    }\n    return min_val;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        sum += l[i];\n\
    \    }\n    return sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnbaoj13t.d(97): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbaoj13t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i)\
    \ {\n        if (l[i] < min) min = l[i];\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ ++i) sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[] l)\
    \ \n{\n    long prod = 1;\n    long i;\n    for (i = 0; i < l.length; ++i) prod\
    \ *= l[i];\n    return prod;\n}\n/*\nReturn sum of all elements in the list that\
    \ are less than n.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n    >>> sum([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n    \n*/\nlong sum_less(long[]\
    \ l, long n) \n{\n    long sum = 0;\n    long i;\n    for (i = 0; i < l.length;\
    \ ++i) if (l[i] < n) sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list that are greater than n.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n\
    \    \n*/\nlong sum_greater(long[] l, long n) \n{\n    long sum = 0;\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79fin3ya.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79fin3ya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; ++i)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list with specified type.\n    >>> sum([1L, 2L, 3L], int)\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], int)\n    -10L\n    \n*/\nlong\
    \ sum(long[] l, int type) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length;\
    \ ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n    >>> sum([1L, 2L, 3L], float)\n    6.5\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], float)\n    -10.5\n\
    \    \n*/\ndouble sum(double[] l, int type) \n{\n    double sum = 0;\n    for\
    \ (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list with specified type.\n    >>> sum([1L,\
    \ 2L, 3L], float)\n    6.5\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L], float)\n    -10.5\n    \n*/\nfloat sum(float[] l, int type) \n{\n\
    \    float sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmuqq0cou.d(94): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpmuqq0cou.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmuqq0cou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n\
    \        if(tmp > max){\n            max = tmp;\n        }\n    }\n    return\
    \ max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n\
    \    long tmp;\n    for(int i = 0; i < l.length; i++){\n        tmp = l[i];\n\
    \        if(tmp < min){\n            min = tmp;\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum\
    \ = 0;\n    for(int i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long prod = 1;\n    for(int i = 0; i < l.length; i++){\n       \
    \ prod *= l[i];\n    }\n    return prod;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgxdq7k4j.d(90): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgxdq7k4j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++)\n    {\n    \
    \    if(l[i] > max)\n        {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    long i;\n    max = l[0];\n    for (i = 1; i < l.length; i++) \n        if\
    \ (l[i] > max) \n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    long i;\n    min = l[0];\n    for (i = 1; i < l.length;\
    \ i++) \n        if (l[i] < min) \n            min = l[i];\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++) \n        product *= l[i];\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for\
    \ (i = 0; i < l.length; i++) \n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    long i;\n\
    \    for (i = 0; i < l.length\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxihv8519.d(99): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpxihv8519.d(106): Error: found `void` when expecting `)`

    /tmp/tmpxihv8519.d(106): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxihv8519.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n        i++;\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> product_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n    long\
    \ product = 1;\n    for (int i = 0; i < l.length; i++)\n        product *= l[i];\n\
    \    return product;\n}\n/*\nReturn sum of all elements in the list.\n    >>>\
    \ sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n    double sum = 0;\n    for (int i = 0; i < l.length; i++)\n      \
    \  sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[]\
    \ l) \n{\n    double product = 1;\n    for (int i = 0; i < l.length; i++)\n  \
    \      product *= l[i];\nunittest\n{\n    alias candidate = max_element;\n\n \
    \   assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtevcngq.d(94): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtevcngq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long max_idx = 1;\n    for (int i = 1; i < l.length; ++i) {\n \
    \       if (l[i] > max) {\n            max = l[i];\n            max_idx = i;\n\
    \        }\n    }\n    return max_idx;\n}\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq018n2_w.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpq018n2_w.__unittest_L22_C1() [0x427e03]

    ??:? void tmpq018n2_w.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long temp = 0;\n    for(int i = 0; i < l.length; i++){\n        temp\
    \ = l[i];\n        if(temp > max){\n            max = temp;\n        }\n    }\n\
    \    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] < min){\n            min = l[i];\n        }\n    }\n    return\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n   \
    \ for(i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> product([1L, 2L, 3L])\n\
    \    6L\n    >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++){\n        product *= l[i];\n    }\n  \
    \  return product;\n}\n/*\nReturn sum of all elements in the list that are less\
    \ than the given value.\n    >>> sum([1L, 2L, 3L], 3)\n    3L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 3)\n    3L\n    \n*/\nlong sum(long[]\
    \ l, long x) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++){\n        if(l[i] < x){\n            sum += l[i];\n        }\n    }\n \
    \   return sum;\n}\n/*\nReturn product of all elements in the list that are less\
    \ than the given value.\n    >>> product([1L, 2L, 3L], 3)\n    6L\n    >>> product([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnioh9_9y.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnioh9_9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; ++i)\n        product *= l[i];\n    return product;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double i;\n   \
    \ for(i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    double\
    \ i;\n    for(i = 0; i < l.length; ++i)\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunvr3pvy.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunvr3pvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (long i = 1; i < l.length; i++) \n   \
    \     if (l[i] < min) \n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (long i : l) \n        sum\
    \ += i;\n    return sum;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    for (double i : l) \n        sum += i;\n    return sum;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n \
    \   >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n  \
    \  \n*/\nfloat sum(float[] l) \n{\n    float sum = 0;\n    for (float i : l) \n\
    \        sum += i;\n    return sum;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp314eyhwn.d(45): Error: semicolon expected, not `:`

    /tmp/tmp314eyhwn.d(45): Error: expression expected, not `:`

    /tmp/tmp314eyhwn.d(45): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmp314eyhwn.d(60): Error: semicolon expected, not `:`

    /tmp/tmp314eyhwn.d(60): Error: expression expected, not `:`

    /tmp/tmp314eyhwn.d(60): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmp314eyhwn.d(75): Error: semicolon expected, not `:`

    /tmp/tmp314eyhwn.d(75): Error: expression expected, not `:`

    /tmp/tmp314eyhwn.d(75): Error: found `l` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp314eyhwn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max_value){\n            max_value = l[i];\n            max_pos\
    \ = i;\n        }\n    }\n    return max_pos;\n}\n/*\nReturn minimum element in\
    \ the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_value = l[0];\n    long min_pos = 0;\n    for(int i = 1;\
    \ i < l.length; i++){\n        if(l[i] < min_value){\n            min_value =\
    \ l[i];\n            min_pos = i;\n        }\n    }\n    return min_pos;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; i++){\n    \
    \    product *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble sum(double[] l)\
    \ \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; i++){\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product(double[] l\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dq2c1ht.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dq2c1ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp18deq_m1.d(107): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18deq_m1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long max_pos = 0;\n    for(int i = 1; i < l.length; i++){\n   \
    \     if(l[i] > max){\n            max = l[i];\n            max_pos = i;\n   \
    \     }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified type.\n    >>> sum([1L, 2L, 3L],\
    \ int)\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L],\
    \ int)\n    -10L\n    \n*/\nlong sum(long[] l, int type) \n{\n    long sum = 0;\n\
    \    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(type == int.class)\
    \ \n        {\n            sum += (int)l[i];\n        }\n        else if(type\
    \ == long.class) \n        {\n            sum += l[i];\n        }\n    }\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list with specified\
    \ type.\n    >>> sum([1L, 2L, 3L], int)\n    6\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vcujot7.d(94): Error: found `class` when expecting identifier
    following `int`.

    /tmp/tmp2vcujot7.d(96): Error: C style cast illegal, use `cast(int)l[i]`

    /tmp/tmp2vcujot7.d(98): Error: found `class` when expecting identifier following
    `long`.

    /tmp/tmp2vcujot7.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vcujot7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo69yt7o9.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpo69yt7o9.__unittest_L24_C1() [0x427e03]

    ??:? void tmpo69yt7o9.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo69yt7o9.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpo69yt7o9.__unittest_L24_C1() [0x427e03]

    ??:? void tmpo69yt7o9.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; ++i)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for(int i = 1; i < l.length; ++i)\n\
    \        if(l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for(int i = 0; i < l.length; ++i)\n     \
    \   product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[]\
    \ l) \n{\n    double sum = 0;\n    for(int i = 0; i < l.length; ++i)\n       \
    \ sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n    double product = 1;\n    for(int i = 0; i < l.length; ++i)\n      \
    \  product *= l[i];\n    return product;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpky2_kzx1.d(96): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky2_kzx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo69yt7o9.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpo69yt7o9.__unittest_L24_C1() [0x427e03]

    ??:? void tmpo69yt7o9.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp;\n    for(int i = 0; i < l.length; i++)\n    {\n        tmp\
    \ = l[i];\n        if(tmp > max)\n            max = tmp;\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n        if(l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    for(i = 0; i < l.length; i++) \n    {\n   \
    \     if(l[i] > max) \n        {\n            max = l[i];\n        }\n    }\n\
    \    \n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++){\n        if(l[i] >\
    \ max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    foreach(i, l) \n    {\n        if (max < l[i])\
    \ \n        {\n            max = l[i];\n        }\n    }\n    \n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17kjsgdu.d(15): Error: no identifier for declarator `l`

    /tmp/tmp17kjsgdu.d(15): Error: found `)` when expecting `;`

    /tmp/tmp17kjsgdu.d(23): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17kjsgdu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp > max){\n            max = tmp;\n        }\n    }\n\
    \    return max;\n}\n/*\nReturn minimum element in the list.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; i++){\n        tmp\
    \ = l[i];\n        if(tmp < min){\n            min = tmp;\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    for(int i\
    \ = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    for(int i =\
    \ 0; i < l.length; i++){\n        product *= l[i];\n    }\n    return product;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    for(int i = 0;\
    \ i < l.length; i++){\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    for(int i\
    \ = 0; i < l.length\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppr494kch.d(102): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmppr494kch.d(109): Error: found `void` when expecting `)`

    /tmp/tmppr494kch.d(109): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr494kch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long n = l.length;\n    \n    while (i < n) {\n \
    \       if (l[i] > max) {\n            max = l[i];\n        }\n        i++;\n\
    \    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for(i = 1; i < l.length; i++)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n   \
    \ \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n    for(i\
    \ = 0; i < l.length; i++)\n        product *= l[i];\n    return product;\n}\n\
    /*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    double i;\n   \
    \ for(i = 0; i < l.length; i++)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n \
    \   \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n    double\
    \ i;\n    for(i = 0; i < l.length; i++)\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8d1n91l8.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d1n91l8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_index = -1;\n    for(int i = 1; i < l.length; i++)\n \
    \   {\n        if(l[i] > max_value)\n        {\n            max_value = l[i];\n\
    \            max_index = i;\n        }\n    }\n    return max_index;\n}\n/*\n\
    Return minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n\
    \    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min_value = l[0];\n\
    \    long min_index = -1;\n    for(int i = 1; i < l.length; i++)\n    {\n    \
    \    if(l[i] < min_value)\n        {\n            min_value = l[i];\n        \
    \    min_index = i;\n        }\n    }\n    return min_index;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong sum(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified precision.\n    >>> sum([1L, 2L, 3L], 2)\n    6.00\n\
    \    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2)\n    -10.00\n\
    \    \n*/\nlong sum(long[] l, int precision) \n{\n    long sum = 0;\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        sum += l[i] * pow(10, precision);\n\
    \    }\n    return sum;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ precision and specified type.\n    >>> sum([1L, 2L, 3L], 2, int)\n    6\n  \
    \  >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 2, int)\n    -10\n\
    \    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpahl4zcq9.d(92): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmpahl4zcq9.__unittest_L88_C1() [0x42809f]

    ??:? void tmpahl4zcq9.__modtest() [0x4281c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b336]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430978]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430455]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b30d]

    ??:? runModuleUnitTests [0x42c279]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428908]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (int i = 1; i < l.length; ++i) {\n   \
    \     if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n}\n/*\n\
    Return sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    for\
    \ (int i = 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\n\
    Return product of all elements in the list.\n    >>> product_elements([1L, 2L,\
    \ 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[] l) \n{\n    long\
    \ prod = 1;\n    for (int i = 0; i < l.length; ++i)\n        prod *= l[i];\n \
    \   return prod;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\ndouble sum_elements(double[] l) \n{\n    double\
    \ sum = 0;\n    for (int i = 0; i < l.length; ++i)\n        sum += l[i];\n   \
    \ return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> product_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble product_elements(double[] l) \n\
    {\n    double prod = 1;\n    for (int i = 0; i < l.length; ++i)\n        prod\
    \ *= \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptm82_9wj.d(94): Error: expression expected, not `unittest`

    /tmp/tmptm82_9wj.d(95): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptm82_9wj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    return max_val;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    \n    while (i < l.length && l[i]\
    \ < 0)\n        i++;\n    \n    while (j < l.length && l[j] > 0)\n        j++;\n\
    \    \n    if (i < l.length)\n        max = l[i];\n    \n    if (j < l.length)\n\
    \        max = l[j];\n    \n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2r1klb4m.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428165]

    ??:? void tmp2r1klb4m.__unittest_L30_C1() [0x427e47]

    ??:? void tmp2r1klb4m.__modtest() [0x427ee8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b056]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430698]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430175]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b02d]

    ??:? runModuleUnitTests [0x42bf99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428628]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_idx;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbw973xua.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42811d]

    ??:? void tmpbw973xua.__unittest_L24_C1() [0x427dfb]

    ??:? void tmpbw973xua.__modtest() [0x427e9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c17b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b00e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430650]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43012d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]

    ??:? runModuleUnitTests [0x42bf51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] > max_val)\n        {\n            max_val = l[i];\n        \
    \    max_idx = i;\n        }\n    }\n    return max_val;\n}\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for(int i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; ++i)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -10L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        sum += l[i];\n    }\n\
    \    return sum;\n}\n/*\nReturn product of all elements in the list.\n    >>>\
    \ product_elements([1L, 2L, 3L])\n    6L\n    >>> product_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product_elements(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ number of elements in the list.\n    >>> count_elements([1L, 2L, 3L])\n    3L\n\
    \    >>> count_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    10L\n    \n*/\nlong count_elements(long[] l) \n{\n    long count = 0;\n \
    \   long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] != 0)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\nReturn sum of all elements in list.\n    >>> sum_of_elements([1L, 2L, 3L])\n\
    \    6L\n    >>> sum_of_elements([5L, 3L, -5L, \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftfafo_1.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftfafo_1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_val\
    \ = l[0];\n    long max_idx = 1;\n    \n    for (int i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i] > max_val) \n        {\n            max_val = l[i];\n\
    \            max_idx = i;\n        }\n    }\n    \n    return max_val;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\t\
    max = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n\
    \    {\n        if(l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i =\
    \ 0; i < l.length; ++i)\n    {\n        sum += l[i];\n    }\n    return sum;\n\
    }\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n\
    \    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n   \
    \ -123L\n    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long\
    \ i;\n    for(i = 0; i < l.length; ++i)\n    {\n        product *= l[i];\n   \
    \ }\n    return product;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \ >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double\
    \ sum = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        sum\
    \ += l[i];\n    }\n    return sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\ndouble product(double[] l)\
    \ \n{\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd1h2p0fx.d(105): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd1h2p0fx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i = 0;\n    \n    while (i < l.length) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max;\n\
    \    max = l[0];\n    for (int i = 1; i < l.length; i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the\
    \ list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min;\n    min = l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n\
    \        sum += l[i];\n    return sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for (int i = 0; i < l.length; i++)\n    \
    \    product *= l[i];\n    return product;\n}\n/*\nReturn sum of all elements\
    \ in the list, excluding zero.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong sum_excl(long\
    \ l) \n{\n    long sum = 0;\n    while (l != 0)\n        sum += l;\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list, excluding zero.\n \
    \   >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n    \n*/\nlong product_excl(long l)\
    \ \n{\n    long product = 1;\n    while (l != 0)\n        product *= l;\n    return\
    \ product;\n}\n/*\nReturn \nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl4m1_1aw.d(96): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl4m1_1aw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160753
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the list.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = 0;\n    long\
    \ i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i] < min) \n   \
    \     {\n            min = l[i];\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    long sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for(i = 0; i < l.length;\
    \ i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    long i;\n    for(i = 0; i < l.length; i++)\
    \ \n    {\n        product *= l[i];\n    }\n    return product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>>\
    \ sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\n\
    double sum(double[] l) \n{\n    double sum = 0;\n    long i;\n    for(i = 0; i\
    \ < l.length; i++) \n    {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\ndouble product(double\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp18deq_m1.d(107): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18deq_m1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n        if (l[i] >\
    \ max)\n            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++) \n    {\n        if (l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max) \n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    long i;\n    for (i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n/*\nReturn minimum\
    \ element in the list.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < min)\n            min = l[i];\n    }\n    return min;\n\
    }\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n  \
    \  6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong sum(long[] l) \n{\n    long sum = 0;\n    long i;\n    for (i\
    \ = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum;\n}\n\
    /*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L, 3L])\n \
    \   6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -123L\n\
    \    \n*/\nlong product(long[] l) \n{\n    long product = 1;\n    long i;\n  \
    \  for (i = 0; i < l.length; i++) {\n        product *= l[i];\n    }\n    return\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\ndouble sum(double[] l) \n{\n    double sum = 0;\n    long\
    \ i;\n    for (i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\ndouble product(double[] l) \n{\n    double product = 1;\n\
    \    long i;\n    for (i = 0; i < l.length; i++) {\n        product *= l[i];\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf12lcojo.d(103): Error: found `unittest` instead of statement

    /tmp/tmpf12lcojo.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf12lcojo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = 0;\n    long i;\n    for(i = 0; i < l.length; ++i)\n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160751
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max_value\
    \ = l[0];\n    long max_index = 0;\n    for (int i = 0; i < l.length; ++i) {\n\
    \        if (l[i] > max_value) {\n            max_value = l[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_value;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n\tlong max =\
    \ 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\
    \tmax = l[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160752
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n{\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.length; i++) \n        if (l[i] > max) \n\
    \            max = l[i];\n    return max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160753
