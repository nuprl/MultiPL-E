language: d
name: HumanEval_53_add
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the square root of x\n    >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>>\
    \ sqrt(4L)\n    2.0\n    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of x\n    >>> sqrt(4L)\n    2.0\n    \n*/\nlong double\
    \ sqrt(long double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of x\n    >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>> sqrt(4L)\n\
    \    2.0\n    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n\
    /*\nGet the square root of x\n    >>> sqrt(4L)\n    2.0\n    \n*/\nlong double\
    \ sqrt(long double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of x\n    >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of x\n    >>> sqrt(4L)\n\
    \    2.0\n    \n*/\nfloat sqrt(float x) \n{\n    return std.math.sqrt(x);\n}\n\
    /*\nGet the square root of x\n    >>> sqrt(4L)\n    2.0\n    \n*/\nlong double\
    \ sqrt(long double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of x\n    >>> sqrt(4L)\n    2.0\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\nunittest\n{\n    alias candidate = add;\n\n   \
    \ assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n   \
    \ assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n  \
    \  assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1ginkcv.d(77): Error: use `real` instead of `long double`\n/tmp/tmpx1ginkcv.d(77):
    Error: use `real` instead of `long double`\n/tmp/tmpx1ginkcv.d(107): Error: use
    `real` instead of `long double`\n/tmp/tmpx1ginkcv.d(107): Error: use `real` instead
    of `long double`\n/tmp/tmpx1ginkcv.d(137): Error: use `real` instead of `long
    double`\n/tmp/tmpx1ginkcv.d(137): Error: use `real` instead of `long double`\n/tmp/tmpx1ginkcv.d(150):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpx1ginkcv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the modulus\
    \ of two numbers x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    2L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of number x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the square root of number x\n    >>> sqrt(2L)\n    1.41421356237\n    >>> sqrt(-5L)\n\
    \    -1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of number x\n    >>> sqrt(2L)\n    1.41421356237\n\
    \    >>> sqrt(-5L)\n    -1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of number x\n    >>>\
    \ sqrt(2L)\n    1.41421356237\n    >>> sqrt(-5L)\n    -1.41421356237\n    \n*/\n\
    double sqrt(double x) \n{\n    return std.math.sqrt(x);\n}\n/*\nGet the square\
    \ root of number x\n    >>> sqrt(2L)\n    1.41421356237\n    >>> sqrt(-5L)\n \
    \   -1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nGet the square root of number x\n    >>> sqrt(2L)\n    1.41421356237\n\
    \    >>> sqrt(-5L)\n    -1.41421356237\n    \n*/\ndouble sqrt(double x) \n{\n\
    \    return std.math.sqrt(x);\n}\n/*\nGet the square root of number x\n    >>>\
    \ sqrt(2L)\n    1.41421356237\n    >>> sqrt(-5L)\n    -1.41421356237\n    \n*/\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n\
    \    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
    \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    6L\n    \n*/\nlong\
    \ subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the remainder of x divided by y\n    >>> remainder(2L, 3L)\n    1L\n    >>>\
    \ remainder(5L, 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n  \
    \  return x % y;\n}\n/*\nGet the sign of x\n    >>> sign(1L)\n    1L\n    >>>\
    \ sign(-2L)\n    -1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1L\
    \ : 1L;\n}\n/*\nGet the absolute value of x\n    >>> abs(1L)\n    1L\n    >>>\
    \ abs(-2L)\n    2L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ? x : -x;\n\
    }\n/*\nGet the floor of x\n    >>> floor(1L)\n    1L\n    >>> floor(-2L)\n   \
    \ -1L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? x + 1L : x;\n}\n/*\n\
    Get the ceiling of x\n    >>> ceil(1L)\n    2L\n    >>> ceil(-2L)\n    -1L\n \
    \   \n*/\nlong ceil(long x) \n{\n    return x < 0 ? x - 1L : x;\n}\n/*\nGet the\
    \ absolute value of the square root of x\n    >>> sqrt(1L)\n    1L\n    >>> sqrt(-2L)\n\
    \    -1L\n    \n*/\nlong sqrt(long x) \n{\n    return x < 0 ? -sqrt(-x) : sqrt(x);\n\
    }\n/*\nGet the floor of the square root of x\n    >>> floor(sqrt(1L))\n    1L\n\
    \    >>> floor(sqrt(-2L))\n    -1L\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -floor(-x) : floor(x);\n}\n/*\nGet the ceiling of the square root of\
    \ x\n\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeomc9mzr.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeomc9mzr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Get the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-2L)\n    2L\n\
    \    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus\
    \ of x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L, 7L)\n    3L\n\
    \    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the\
    \ remainder of x and y\n    >>> remainder(2L, 3L)\n    2L\n    >>> remainder(5L,\
    \ 7L)\n    1L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the floor of x\n    >>> floor(2L)\n    2L\n    >>> floor(-2L)\n-2L\n\
    \    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the\
    \ ceiling of x\n    >>> ceil(2L)\n    2L\n    >>> ceil(-2L)\n-1L\n    \n*/\nlong\
    \ ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the round of x\n  \
    \  >>> round(2L)\n    2L\n    >>> round(-2L)\n-1L\n    \n*/\nlong round(long x)\
    \ \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the floor of x\n    >>> floor(2L)\n\
    \    2L\n    >>> floor(-2L)\n-2L\n    \n*/\nlong floor(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(2L)\n    2L\n   \
    \ >>> ceil(-2L)\n-1L\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4wgeyytw.d(135): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4wgeyytw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    3L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 5L)\n    15L\n    >>> mul(4L, 7L)\n    42L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    2L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nGet the absolute value of x\n    >>>\
    \ abs(-5)\n    5\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n\
    }\n/*\nGet the floor of x\n    >>> floor(3.5)\n    3\n    \n*/\nlong floor(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the ceiling of x\n    >>> ceil(3.5)\n\
    \    4\n    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the natural logarithm of x\n    >>> log(3.5)\n    1.6094379124341\n    \n*/\n\
    double log(double x) \n{\n    return std::log(x);\n}\n/*\nGet the square root\
    \ of x\n    >>> sqrt(3.5)\n    1.4142135623731\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    return std::sqrt(x);\n}\n/*\nGet the reciprocal of x\n    >>> recip(3.5)\n\
    \    0.5\n    \n*/\ndouble recip(double x) \n{\n    return 1.0 / x;\n}\n/*\nGet\
    \ the sine of x\n    >>> sin(3.5)\n    0.841470984807897\n    \n*/\ndouble sin(double\
    \ x) \n{\n    return std::sin(x);\n}\n/*\nGet the cosine of x\n    >>> cos(3.5)\n\
    \    -0.41614683654714\n    \n*/\ndouble cos(double x) \n{\n    return std::cos(x);\n\
    }\n/*\nGet the tangent of x\n    >>> tan(3.5)\n    -0.577215664901532\n    \n\
    */\ndouble tan(double x) \n{\n    return std::tan(x);\n}\n/*\nGet the arc sine\
    \ of x\n\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkqnmh1pr.d(89): Error: found `:` when expecting `;` following
    `return` statement\n/tmp/tmpkqnmh1pr.d(89): Error: found `:` instead of statement\n/tmp/tmpkqnmh1pr.d(99):
    Error: found `:` when expecting `;` following `return` statement\n/tmp/tmpkqnmh1pr.d(99):
    Error: found `:` instead of statement\n/tmp/tmpkqnmh1pr.d(119): Error: found `:`
    when expecting `;` following `return` statement\n/tmp/tmpkqnmh1pr.d(119): Error:
    found `:` instead of statement\n/tmp/tmpkqnmh1pr.d(129): Error: found `:` when
    expecting `;` following `return` statement\n/tmp/tmpkqnmh1pr.d(129): Error: found
    `:` instead of statement\n/tmp/tmpkqnmh1pr.d(139): Error: found `:` when expecting
    `;` following `return` statement\n/tmp/tmpkqnmh1pr.d(139): Error: found `:` instead
    of statement\n/tmp/tmpkqnmh1pr.d(141): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqnmh1pr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n   \
    \ >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    -1L\n    \n*/\n\
    long subtract(long x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n\
    \    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n\
    \    2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\n\
    Modulus of two numbers x and y\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L,\
    \ 7L)\n    2L\n    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nCompare two numbers x and y\n    >>> compare(2L, 3L)\n    1L\n    >>> compare(5L,\
    \ 7L)\n    1L\n    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L,\
    \ 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L,\
    \ 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L,\
    \ 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute\
    \ value of a number\n    >>> abs(1L)\n    1L\n    >>> abs(-1L)\n    1L\n    \n\
    */\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the modulus of\
    \ a number\n    >>> modulus(1L, 2L)\n    1L\n    >>> modulus(1L, 3L)\n    0L\n\
    \    \n*/\nlong modulus(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the\
    \ remainder of a number\n    >>> remainder(1L, 2L)\n    1L\n    >>> remainder(1L,\
    \ 3L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the floor of a number\n    >>> floor(1L)\n    1L\n    >>> floor(-1L)\n\
    -1L\n    \n*/\nlong floor(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the ceiling of a number\n    >>> ceil(1L)\n    1L\n    >>> ceil(-1L)\n-1L\n\
    \    \n*/\nlong ceil(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square\
    \ root of a number\n    >>> sqrt(1L)\n    1L\n    >>> sqrt(-1L)\n-1L\n    \n*/\n\
    long sqrt(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root\
    \ of a number\n    >>> sqrt(1L)\n    1L\n    >>> sqrt(-1L)\n-1L\n    \n*/\nlong\
    \ sqrt(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of\
    \ a number\n    >>> sqrt(1L)\n    1L\n    >>> sqrt(-1L)\n-1L\n    \n*/\nlong sqrt(long\
    \ x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the square root of a number\n\
    \    >>> sqrt(1L)\n    1L\n    >>> sqrt(-1L)\n-1L\n    \n*/\nlong sqrt(long x)\
    \ \n\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L)\
    \ == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L)\
    \ == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L)\
    \ == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0lxzsfbm.d(145): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lxzsfbm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    2L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the remainder\
    \ of dividing x by y\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(5L,\
    \ 7L)\n    2L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x % y;\n\
    }\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute\
    \ value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>>\
    \ sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n*/\nlong sign(long x) \n\
    {\n    return x < 0 ? -1 : 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(2L)\n\
    \    2L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong abs(long x) \n{\n    return\
    \ x < 0 ? -x : x;\n}\n/*\nGet the sign of x\n    >>> sign(-2L)\n    -1L\n    >>>\
    \ sign(-5L)\n    1L\n    \n*/\nlong sign(long x) \n{\n    return x < 0 ? -1 :\
    \ 1;\n}\n/*\nGet the absolute value of x\n    >>> abs(2L)\n    2L\n    >>> abs(-5L)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nGet\
    \ the sign of x\n    >>> sign(-2L)\n    -1L\n    >>> sign(-5L)\n    1L\n    \n\
    */\nlong sign(long x) \n{\n    return x < 0 ? \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L)\
    \ == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L)\
    \ == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5j1z59zf.d(146): Error: expression expected, not `unittest`\n/tmp/tmp5j1z59zf.d(147):
    Error: found `{` when expecting `:`\n/tmp/tmp5j1z59zf.d(148): Error: expression
    expected, not `alias`\n/tmp/tmp5j1z59zf.d(148): Error: found `candidate` when
    expecting `;` following `return` statement\n/tmp/tmp5j1z59zf.d(148): Error: found
    `=` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j1z59zf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong double\
    \ add(long double x, long double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    float add(float x, float y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble\
    \ add(double x, double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong\
    \ long int add(long long int x, long long int y) \n{\n    return x + y;\n}\n/*\n\
    Add two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n  \
    \  12L\n    \n*/\nlong long unsigned int add(long long unsigned int x, long long\
    \ unsigned int y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long long\
    \ add(long long long x, long long long y) \n{\n    return x + y;\n}\n/*\nAdd two\
    \ numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n\
    \    \n*/\nlong long long long add(long long long long x, long long long long\
    \ y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n\
    \    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunsigned long add(unsigned long\
    \ x, unsigned long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunsigned\
    \ long long add(unsigned long long x, \nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi_7t7n6q.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpi_7t7n6q.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpi_7t7n6q.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpi_7t7n6q.d(35): Error: use `real` instead
    of `long double`\n/tmp/tmpi_7t7n6q.d(35): Error: use `real` instead of `long double`\n/tmp/tmpi_7t7n6q.d(35):
    Error: use `real` instead of `long double`\n/tmp/tmpi_7t7n6q.d(71): Error: use
    `long` for a 64 bit integer instead of `long long`\n/tmp/tmpi_7t7n6q.d(71): Error:
    no identifier for declarator `long`\n/tmp/tmpi_7t7n6q.d(71): Error: use `long`
    for a 64 bit integer instead of `long long`\n/tmp/tmpi_7t7n6q.d(71): Error: found
    `int` when expecting `)`\n/tmp/tmpi_7t7n6q.d(71): Error: semicolon expected following
    function declaration\n/tmp/tmpi_7t7n6q.d(71): Error: no identifier for declarator
    `x`\n/tmp/tmpi_7t7n6q.d(71): Error: declaration expected, not `,`\n/tmp/tmpi_7t7n6q.d(74):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_7t7n6q.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n   \
    \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\ndouble add(double\
    \ x, double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>>\
    \ add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nfloat add(float\
    \ x, float y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>>\
    \ add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong double add(long\
    \ double x, long double y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpokva8tdn.d(23): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmpokva8tdn.d(23): Error: use `long` for a 64 bit integer
    instead of `long long`\n/tmp/tmpokva8tdn.d(23): Error: use `long` for a 64 bit
    integer instead of `long long`\n/tmp/tmpokva8tdn.d(59): Error: use `real` instead
    of `long double`\n/tmp/tmpokva8tdn.d(59): Error: use `real` instead of `long double`\n/tmp/tmpokva8tdn.d(59):
    Error: use `real` instead of `long double`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpokva8tdn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L,\
    \ 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L,\
    \ 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n    return x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
    \ x, long y) \n{\n\treturn x + y;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n\
    \    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n\
    \    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
