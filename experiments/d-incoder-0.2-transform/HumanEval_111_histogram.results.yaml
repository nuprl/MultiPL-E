language: d
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    var histogram\
    \ = Dictionary<long, int>()\n    test.split(\" \").foreach(x => histogram[x] =\
    \ histogram.getOrElse(x, 0) + 1)\n    return histogram.filter(_._2 > 1).map(_._1)\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0q30vp8b.d(24): Error: found `,` when expecting `.` following
    long\n/tmp/tmp0q30vp8b.d(24): Error: found `int` when expecting identifier following
    `long`.\n/tmp/tmp0q30vp8b.d(24): Error: semicolon expected, not `>`\n/tmp/tmp0q30vp8b.d(24):
    Error: found `>` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0q30vp8b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    var dict =\
    \ Nullable!(long[string]);\n    foreach(test, char => {\n        var count = dict[char];\n\
    \        if(!count.isNull)\n            dict[char] = count.value + 1;\n      \
    \  else\n            dict[char] = 1;\n    });\n    return dict;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ppyz9y_.d(25): Error: no identifier for declarator `char`\n/tmp/tmp_ppyz9y_.d(25):
    Error: found `=>` when expecting `;`\n/tmp/tmp_ppyz9y_.d(26): Error: found `]`
    when expecting `.` following char\n/tmp/tmp_ppyz9y_.d(26): Error: found `;` when
    expecting identifier following `char`.\n/tmp/tmp_ppyz9y_.d(27): Error: found `if`
    when expecting `,`\n/tmp/tmp_ppyz9y_.d(28): Error: found `dict` when expecting
    `,`\n/tmp/tmp_ppyz9y_.d(28): Error: found `]` when expecting `.` following char\n/tmp/tmp_ppyz9y_.d(28):
    Error: found `=` when expecting identifier following `char`.\n/tmp/tmp_ppyz9y_.d(28):
    Error: found `count` when expecting `,`\n/tmp/tmp_ppyz9y_.d(28): Error: found
    `;` when expecting `,`\n/tmp/tmp_ppyz9y_.d(29): Error: expression expected, not
    `else`\n/tmp/tmp_ppyz9y_.d(30): Error: found `dict` when expecting `,`\n/tmp/tmp_ppyz9y_.d(30):
    Error: found `]` when expecting `.` following char\n/tmp/tmp_ppyz9y_.d(30): Error:
    found `=` when expecting identifier following `char`.\n/tmp/tmp_ppyz9y_.d(30):
    Error: found `1` when expecting `,`\n/tmp/tmp_ppyz9y_.d(30): Error: expression
    expected, not `;`\n/tmp/tmp_ppyz9y_.d(31): Error: found `}` when expecting `,`\n/tmp/tmp_ppyz9y_.d(31):
    Error: expression expected, not `)`\n/tmp/tmp_ppyz9y_.d(31): Error: found `;`
    when expecting `,`\n/tmp/tmp_ppyz9y_.d(32): Error: expression expected, not `return`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ppyz9y_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => \n    {\n        long count\
    \ = test.count(char);\n        if(result == null)\n        {\n            result\
    \ = __new__(Nullable!(long[string]));\n            result.__init(__new__(long[char]));\n\
    \        }\n        result.__setAt(char, count);\n    });\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphygddqe6.d(26): Error: no identifier for declarator `char`\n/tmp/tmphygddqe6.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmphygddqe6.d(28): Error: found `)`
    when expecting `.` following char\n/tmp/tmphygddqe6.d(28): Error: found `;` when
    expecting identifier following `char`.\n/tmp/tmphygddqe6.d(29): Error: found `if`
    when expecting `,`\n/tmp/tmphygddqe6.d(29): Error: found `==` when expecting `)`\n/tmp/tmphygddqe6.d(29):
    Error: missing `{ ... }` for function literal\n/tmp/tmphygddqe6.d(29): Error:
    found `null` when expecting `,`\n/tmp/tmphygddqe6.d(30): Error: semicolon expected,
    not `{`\n/tmp/tmphygddqe6.d(32): Error: found `[` when expecting `.` following
    long\n/tmp/tmphygddqe6.d(32): Error: found `char` when expecting identifier following
    `long`.\n/tmp/tmphygddqe6.d(32): Error: found `]` when expecting `,`\n/tmp/tmphygddqe6.d(34):
    Error: found `,` when expecting `.` following char\n/tmp/tmphygddqe6.d(35): Error:
    use `{ }` for an empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphygddqe6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    foreach(test, char => \n    {\n        Nullable!(long[string])\
    \ subresult = histogram(test.substring(0,char+1));\n        \n        if(subresult\
    \ == null)\n        {\n            result = Nullable!(long[string])[char];\n \
    \       }\n        else\n        {\n            foreach(subresult, subchar =>\
    \ \n            {\n                if(subchar == char)\n                {\n  \
    \                  result = subresult;\n                }\n            });\n \
    \       }\n    });\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp842m8cop.d(25): Error: no identifier for declarator `char`\n/tmp/tmp842m8cop.d(25):
    Error: found `=>` when expecting `;`\n/tmp/tmp842m8cop.d(27): Error: found `+`
    when expecting `.` following char\n/tmp/tmp842m8cop.d(27): Error: found `1` when
    expecting identifier following `char`.\n/tmp/tmp842m8cop.d(31): Error: found `]`
    when expecting `.` following char\n/tmp/tmp842m8cop.d(31): Error: found `;` when
    expecting identifier following `char`.\n/tmp/tmp842m8cop.d(32): Error: found `}`
    when expecting `,`\n/tmp/tmp842m8cop.d(33): Error: expression expected, not `else`\n/tmp/tmp842m8cop.d(34):
    Error: found `{` when expecting `,`\n/tmp/tmp842m8cop.d(35): Error: expression
    expected, not `foreach`\n/tmp/tmp842m8cop.d(37): Error: found `)` when expecting
    `.` following char\n/tmp/tmp842m8cop.d(38): Error: found `{` when expecting identifier
    following `char`.\n/tmp/tmp842m8cop.d(39): Error: found `result` when expecting
    `)`\n/tmp/tmp842m8cop.d(39): Error: found `=` instead of statement\n/tmp/tmp842m8cop.d(41):
    Error: found `}` when expecting `,`\n/tmp/tmp842m8cop.d(41): Error: found `;`
    when expecting `,`\n/tmp/tmp842m8cop.d(42): Error: expression expected, not `}`\n/tmp/tmp842m8cop.d(43):
    Error: found `}` when expecting `,`\n/tmp/tmp842m8cop.d(43): Error: expression
    expected, not `)`\n/tmp/tmp842m8cop.d(43): Error: found `;` when expecting `,`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp842m8cop.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        Nullable!(long)\
    \ count = count(test);\n        \n        if(count == 0)\n        {\n        \
    \    result = null;\n        }\n        else if(count > 0)\n        {\n      \
    \      Nullable!(long) maxCount = 0;\n            foreach(test, char => {\n  \
    \              if(char == char)\n                {\n                    if(count(test)\
    \ > maxCount)\n                    {\n                        maxCount = count(test);\n\
    \                        result = char;\n                    }\n             \
    \   }\n            });\n        }\n    });\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw4lx1lkw.d(26): Error: no identifier for declarator `char`\n/tmp/tmpw4lx1lkw.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmpw4lx1lkw.d(37): Error: no identifier
    for declarator `char`\n/tmp/tmpw4lx1lkw.d(37): Error: found `=>` when expecting
    `;`\n/tmp/tmpw4lx1lkw.d(38): Error: found `==` when expecting `.` following char\n/tmp/tmpw4lx1lkw.d(38):
    Error: found `char` when expecting identifier following `char`.\n/tmp/tmpw4lx1lkw.d(43):
    Error: found `;` when expecting `.` following char\n/tmp/tmpw4lx1lkw.d(44): Error:
    found `}` when expecting identifier following `char`.\n/tmp/tmpw4lx1lkw.d(45):
    Error: found `}` when expecting `;` following statement\n/tmp/tmpw4lx1lkw.d(46):
    Error: found `)` instead of statement\n/tmp/tmpw4lx1lkw.d(48): Error: use `{ }`
    for an empty statement, not `;`\n/tmp/tmpw4lx1lkw.d(52): Error: found `unittest`
    instead of statement\n/tmp/tmpw4lx1lkw.d(97): Error: found `void` when expecting
    `)`\n/tmp/tmpw4lx1lkw.d(97): Error: found `{` when expecting `;` following statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4lx1lkw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        Nullable!(long)\
    \ count = get!(result, char);\n        \n        if(count == null) {\n       \
    \     count = 1L;\n        }\n        \n        set(result, char, count + 1L);\n\
    \    });\n    \n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_7nuuc10.d(26): Error: no identifier for declarator `char`\n/tmp/tmp_7nuuc10.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmp_7nuuc10.d(34): Error: found `,`
    when expecting `.` following char\n/tmp/tmp_7nuuc10.d(35): Error: use `{ }` for
    an empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7nuuc10.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = Nullable!(long[string]);\n    \n    foreach(test, char => \n    {\n\
    \        result += (char)\n            : \n            long[string]\n        \
    \    { \n                add(char);\n                add(1L);\n            };\n\
    \    });\n    \n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbxvaw8h0.d(26): Error: no identifier for declarator `char`\n/tmp/tmpbxvaw8h0.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmpbxvaw8h0.d(28): Error: found `)`
    when expecting `.` following char\n/tmp/tmpbxvaw8h0.d(29): Error: found `:` when
    expecting identifier following `char`.\n/tmp/tmpbxvaw8h0.d(28): Error: found `long`
    when expecting `)`\n/tmp/tmpbxvaw8h0.d(31): Error: found `{` when expecting `;`
    following statement\n/tmp/tmpbxvaw8h0.d(32): Error: found `)` when expecting `.`
    following char\n/tmp/tmpbxvaw8h0.d(32): Error: found `;` when expecting identifier
    following `char`.\n/tmp/tmpbxvaw8h0.d(33): Error: found `add` when expecting `,`\n/tmp/tmpbxvaw8h0.d(33):
    Error: found `;` when expecting `,`\n/tmp/tmpbxvaw8h0.d(34): Error: expression
    expected, not `}`\n/tmp/tmpbxvaw8h0.d(34): Error: found `;` when expecting `,`\n/tmp/tmpbxvaw8h0.d(35):
    Error: expression expected, not `}`\n/tmp/tmpbxvaw8h0.d(39): Error: found `unittest`
    when expecting `)`\n/tmp/tmpbxvaw8h0.d(84): Error: found `End of File` when expecting
    `}` following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxvaw8h0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ?? 0L;\n        histogram[char] +=\
    \ 1;\n    });\n    \n    return histogram;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt0m5eqbh.d(26): Error: no identifier for declarator `char`\n/tmp/tmpt0m5eqbh.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmpt0m5eqbh.d(27): Error: found `]`
    when expecting `.` following char\n/tmp/tmpt0m5eqbh.d(27): Error: found `=` when
    expecting identifier following `char`.\n/tmp/tmpt0m5eqbh.d(27): Error: found `histogram`
    when expecting `,`\n/tmp/tmpt0m5eqbh.d(27): Error: found `]` when expecting `.`
    following char\n/tmp/tmpt0m5eqbh.d(27): Error: found `?` when expecting identifier
    following `char`.\n/tmp/tmpt0m5eqbh.d(27): Error: found `;` when expecting `:`\n/tmp/tmpt0m5eqbh.d(28):
    Error: found `]` when expecting `.` following char\n/tmp/tmpt0m5eqbh.d(28): Error:
    found `+=` when expecting identifier following `char`.\n/tmp/tmpt0m5eqbh.d(28):
    Error: found `1` when expecting `,`\n/tmp/tmpt0m5eqbh.d(28): Error: expression
    expected, not `;`\n/tmp/tmpt0m5eqbh.d(29): Error: found `}` when expecting `,`\n/tmp/tmpt0m5eqbh.d(29):
    Error: expression expected, not `)`\n/tmp/tmpt0m5eqbh.d(29): Error: found `;`
    when expecting `,`\n/tmp/tmpt0m5eqbh.d(31): Error: expression expected, not `return`\n/tmp/tmpt0m5eqbh.d(31):
    Error: found `histogram` when expecting `,`\n/tmp/tmpt0m5eqbh.d(31): Error: expression
    expected, not `;`\n/tmp/tmpt0m5eqbh.d(32): Error: found `}` when expecting `,`\n/tmp/tmpt0m5eqbh.d(33):
    Error: expression expected, not `unittest`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt0m5eqbh.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdng_hpl5.d(280): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdng_hpl5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => \n    {\n        Nullable!(long)\
    \ count = count(test);\n        \n        if(count == 0)\n        {\n        \
    \    result = null;\n        }\n        else if(count > result)\n        {\n \
    \           result = count;\n        }\n    });\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphyrem1an.d(26): Error: no identifier for declarator `char`\n/tmp/tmphyrem1an.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmphyrem1an.d(38): Error: use `{ }`
    for an empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphyrem1an.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        Nullable!(long) count\
    \ = histogram(test + char);\n        if(!count.isNull)\n        {\n          \
    \  if(!result.isNull)\n            {\n                if(count.value > result.get!(0))\n\
    \                {\n                    result = count;\n                }\n \
    \           }\n            else\n            {\n                result = count;\n\
    \            }\n        }\n    });\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b\
    \ b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n\
    }\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmuouu376.d(26): Error: no identifier for declarator `char`\n/tmp/tmpmuouu376.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmpmuouu376.d(27): Error: found `)`
    when expecting `.` following char\n/tmp/tmpmuouu376.d(27): Error: found `;` when
    expecting identifier following `char`.\n/tmp/tmpmuouu376.d(28): Error: found `if`
    when expecting `,`\n/tmp/tmpmuouu376.d(28): Error: basic type expected, not `!`\n/tmp/tmpmuouu376.d(28):
    Error: found `!` when expecting `)`\n/tmp/tmpmuouu376.d(28): Error: missing `{
    ... }` for function literal\n/tmp/tmpmuouu376.d(28): Error: found `count` when
    expecting `,`\n/tmp/tmpmuouu376.d(29): Error: semicolon expected, not `{`\n/tmp/tmpmuouu376.d(42):
    Error: use `{ }` for an empty statement, not `;`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmuouu376.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string]) [];\n    \n    foreach(test, char => {\n\
    \        histogram[char] = histogram[char] ? histogram[char] + 1L : 1L;\n    });\n\
    \    \n    return histogram;\n}\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_gtqbul.d(26): Error: no identifier for declarator `char`\n/tmp/tmps_gtqbul.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmps_gtqbul.d(27): Error: found `]`
    when expecting `.` following char\n/tmp/tmps_gtqbul.d(27): Error: found `=` when
    expecting identifier following `char`.\n/tmp/tmps_gtqbul.d(27): Error: found `histogram`
    when expecting `,`\n/tmp/tmps_gtqbul.d(27): Error: found `]` when expecting `.`
    following char\n/tmp/tmps_gtqbul.d(27): Error: found `?` when expecting identifier
    following `char`.\n/tmp/tmps_gtqbul.d(27): Error: found `histogram` when expecting
    `,`\n/tmp/tmps_gtqbul.d(27): Error: found `]` when expecting `.` following char\n/tmp/tmps_gtqbul.d(27):
    Error: found `+` when expecting identifier following `char`.\n/tmp/tmps_gtqbul.d(27):
    Error: found `1L` when expecting `,`\n/tmp/tmps_gtqbul.d(27): Error: expression
    expected, not `:`\n/tmp/tmps_gtqbul.d(27): Error: found `1L` when expecting `,`\n/tmp/tmps_gtqbul.d(27):
    Error: expression expected, not `;`\n/tmp/tmps_gtqbul.d(28): Error: found `}`
    when expecting `,`\n/tmp/tmps_gtqbul.d(28): Error: expression expected, not `)`\n/tmp/tmps_gtqbul.d(28):
    Error: found `;` when expecting `,`\n/tmp/tmps_gtqbul.d(30): Error: expression
    expected, not `return`\n/tmp/tmps_gtqbul.d(30): Error: found `histogram` when
    expecting `,`\n/tmp/tmps_gtqbul.d(30): Error: expression expected, not `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_gtqbul.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    var dict:\
    \ Nullable!(long[string]) =\n        Nullable!(long[string])(\n            dict.empty,\n\
    \            fn __key__: string -> Nullable!(long[string]) -> (long[string], long[string])\
    \ => \n            {\n                let mutable count = 1L;\n              \
    \  let mutable max = 0L;\n                let mutable maxKey = \"\"L;\n      \
    \          let mutable maxCount = 0L;\n                let mutable maxKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKey = \"\"L;\n               \
    \ let mutable maxKeyCountKeyCount = 0L;\n                let mutable maxKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCount = 0L;\n  \
    \              let mutable maxKeyCountKeyCountKeyCountKey = \"\"L;\n         \
    \       let mutable maxKeyCountKeyCountKeyCountKeyCount = 0L;\n              \
    \  let mutable maxKeyCountKeyCountKeyCountKeyCountKey = \"\"L;\n             \
    \   let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCount = 0L;\n          \
    \      let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKey = \"\"L;\n \
    \               let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKey\
    \ = \"\"L;\n                let mutable maxKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCountKeyCount\
    \ = 0L;\n                \nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmm0l72zm.d(24): Error: found `dict` when expecting `;` following
    statement\n/tmp/tmpmm0l72zm.d(24): Error: found `:` instead of statement\n/tmp/tmpmm0l72zm.d(30):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(31):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(31):
    Error: found `L` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(31):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpmm0l72zm.d(32):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(33):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(34):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(34):
    Error: found `L` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(34):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpmm0l72zm.d(35):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(36):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(36):
    Error: found `L` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(36):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpmm0l72zm.d(37):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(38):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(38):
    Error: found `L` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(38):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpmm0l72zm.d(39):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(40):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(40):
    Error: found `L` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(40):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpmm0l72zm.d(41):
    Error: found `mutable` when expecting `;` following statement\n/tmp/tmpmm0l72zm.d(42):
    Error: found `mutable` whe'
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdng_hpl5.d(280): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdng_hpl5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        long count\
    \ = count(test, char);\n        \n        if(result == null) {\n            result\
    \ = Nullable!(long[string])(char, count);\n        } else {\n            \n  \
    \          Nullable!(long[string])(char, count) += result;\n        }\n    });\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = histogram;\n\n\
    {\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_dypo448.d(26): Error: no identifier for declarator `char`\n/tmp/tmp_dypo448.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmp_dypo448.d(28): Error: found `)`
    when expecting `.` following char\n/tmp/tmp_dypo448.d(28): Error: found `;` when
    expecting identifier following `char`.\n/tmp/tmp_dypo448.d(30): Error: found `if`
    when expecting `,`\n/tmp/tmp_dypo448.d(30): Error: found `==` when expecting `)`\n/tmp/tmp_dypo448.d(30):
    Error: missing `{ ... }` for function literal\n/tmp/tmp_dypo448.d(30): Error:
    found `null` when expecting `,`\n/tmp/tmp_dypo448.d(30): Error: semicolon expected,
    not `{`\n/tmp/tmp_dypo448.d(31): Error: found `,` when expecting `.` following
    char\n/tmp/tmp_dypo448.d(32): Error: found `else` without a corresponding `if`,
    `version` or `debug` statement\n/tmp/tmp_dypo448.d(36): Error: found `}` when
    expecting `)`\n/tmp/tmp_dypo448.d(36): Error: found `)` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dypo448.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char c : char[]) \n    {\n        Nullable!(long)\
    \ count = histogram(test + c);\n        \n        if(count == null) \n       \
    \ {\n            result = Nullable!(long[string])(Nullable!(char));\n        }\n\
    \        else \n        {\n            Nullable!(long) maxCount = count.max;\n\
    \            Nullable!(char) maxChar = count.maxKey;\n            \n         \
    \   if(maxCount > result.max) \n            {\n                result = Nullable!(long[string])(maxChar,\
    \ maxCount);\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a\
    \ b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb3_u8uhm.d(26): Error: found `:` when expecting `;`\n/tmp/tmpb3_u8uhm.d(26):
    Error: found `[` when expecting `.` following char\n/tmp/tmpb3_u8uhm.d(26): Error:
    found `]` when expecting identifier following `char`.\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpb3_u8uhm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach(test, char => {\n        \n        foreach(result,\
    \ char => {\n            \n            if(char == char) {\n                result[char]\
    \ += 1;\n            }\n            else {\n                result[char] = 1;\n\
    \            }\n            \n        });\n    });\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"\
    a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\"\
    : 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L,\
    \ \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n    \
    \    assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto\
    \ result = candidate(\"r t g\");\n        assert(!result.isNull && result.get\
    \ == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4j55l90y.d(26): Error: no identifier for declarator `char`\n/tmp/tmp4j55l90y.d(26):
    Error: found `=>` when expecting `;`\n/tmp/tmp4j55l90y.d(28): Error: no identifier
    for declarator `char`\n/tmp/tmp4j55l90y.d(28): Error: found `=>` when expecting
    `;`\n/tmp/tmp4j55l90y.d(30): Error: found `==` when expecting `.` following char\n/tmp/tmp4j55l90y.d(30):
    Error: found `char` when expecting identifier following `char`.\n/tmp/tmp4j55l90y.d(31):
    Error: found `]` when expecting `.` following char\n/tmp/tmp4j55l90y.d(31): Error:
    found `+=` when expecting identifier following `char`.\n/tmp/tmp4j55l90y.d(31):
    Error: found `1` when expecting `,`\n/tmp/tmp4j55l90y.d(31): Error: expression
    expected, not `;`\n/tmp/tmp4j55l90y.d(32): Error: found `}` when expecting `,`\n/tmp/tmp4j55l90y.d(33):
    Error: expression expected, not `else`\n/tmp/tmp4j55l90y.d(33): Error: found `{`
    when expecting `,`\n/tmp/tmp4j55l90y.d(34): Error: found `]` when expecting `.`
    following char\n/tmp/tmp4j55l90y.d(34): Error: found `=` when expecting identifier
    following `char`.\n/tmp/tmp4j55l90y.d(34): Error: found `1` when expecting `,`\n/tmp/tmp4j55l90y.d(34):
    Error: expression expected, not `;`\n/tmp/tmp4j55l90y.d(35): Error: found `}`
    when expecting `,`\n/tmp/tmp4j55l90y.d(37): Error: expression expected, not `}`\n/tmp/tmp4j55l90y.d(37):
    Error: found `)` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4j55l90y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ histogram = Nullable!(long[string])();\n    \n    foreach(test, function(x){\n\
    \        histogram[x] = histogram[x] ? histogram[x] + 1 : 1;\n    });\n    \n\
    \    return histogram;\n}\nunittest\n{\n    alias candidate = histogram;\n\n{\n\
    \        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8pimfw4p.d(26): Error: basic type expected, not `function`\n/tmp/tmp8pimfw4p.d(26):
    Error: no identifier for declarator `_error_ function(x)`\n/tmp/tmp8pimfw4p.d(26):
    Error: found `{` when expecting `;`\n/tmp/tmp8pimfw4p.d(27): Error: found `;`
    when expecting `)`\n/tmp/tmp8pimfw4p.d(28): Error: found `}` instead of statement\n/tmp/tmp8pimfw4p.d(28):
    Error: declaration expected, not `)`\n/tmp/tmp8pimfw4p.d(30): Error: declaration
    expected, not `return`\n/tmp/tmp8pimfw4p.d(31): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8pimfw4p.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    Nullable!(long[string])\
    \ result = null;\n    \n    foreach (char c in test)\n    {\n        Nullable!(long)\
    \ count = histogram(c);\n        if (count == null)\n        {\n            count\
    \ = long.zero;\n        }\n        if (result == null)\n        {\n          \
    \  result = count;\n        }\n        else\n        {\n            result = result.add(count);\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnsmm9rvn.d(26): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsmm9rvn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a string representing\
    \ a space separated lowercase letters, return a dictionary\n    of the letter\
    \ with the most repetition and containing the corresponding count.\n    If several\
    \ letters have the same occurrence, return all of them.\n    \n    Example:\n\
    \    >>> histogram(\"a b c\")\n    [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n\
    \    >>> histogram(\"a b b a\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>>\
    \ histogram(\"a b c a b\")\n    [\"a\": 2L, \"b\": 2L].nullable\n    >>> histogram(\"\
    b b b b a\")\n    [\"b\": 4L].nullable\n    >>> histogram(\"\")\n    ___null_dict___\n\
    \n    \n*/\nNullable!(long[string]) histogram(string test) \n{\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = histogram;\n\
    \n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"\
    a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\"\
    : 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull\
    \ && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result\
    \ = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get ==\
    \ [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n       \
    \ assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n\
    }\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull\
    \ && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdng_hpl5.d(280): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdng_hpl5.d", "-I/tmp"]\n'''
  stdout: b''
