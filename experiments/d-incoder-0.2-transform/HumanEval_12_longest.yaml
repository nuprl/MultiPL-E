name: HumanEval_12_longest
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
  \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
  a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
  \ strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    if (strings.length == 0) {\n        return null;\n    }\n  \
    \  var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    \n    return maxString;\n}", "{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}", "{\n    var maxLength = 0;\n    var maxString = \"\"\
    ;\n    foreach(string; strings) {\n        if (string.length > maxLength) {\n\
    \            maxLength = string.length;\n            maxString = string;\n   \
    \     }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n \
    \   foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    foreach (string\
    \ str in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].Length;\n\
    \    foreach (string s in strings) {\n        if (s.Length > maxLen) {\n     \
    \       maxLen = s.Length;\n        }\n    }\n    \n    return maxLen == strings[0].Length\
    \ ? strings[0] : null;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxLen = strings[0].length;\n    \n    for (int\
    \ i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= maxLen)\
    \ {\n            maxLen = strings[i].length;\n        }\n    }\n    \n    return\
    \ strings[strings.length - 1];\n}", "{\n    foreach(string; strings) {\n     \
    \   if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLength) {\n\
    \            maxLength = s.length();\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    \n    for (string string : strings) {\n        int length = string.length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n\
    \    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    var longest\
    \ = strings[0];\n    var longestLength = strings.length;\n    for(var i = 1; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].length >= longestLength)\n\
    \        {\n            longest = strings[i];\n            longestLength = strings[i].length;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    \n    return maxString;\n}", "{\n    int maxLen = 0;\n    string\
    \ maxString = null;\n    foreach(string,s,strings) {\n        int len = s.length();\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      int length = strings[i].length;\n        if (length > maxLength) {\n  \
    \          maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLen = strings[0].length;\n    string longestString = strings[0];\n \
    \   \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            longestString = strings[i];\n            maxLen =\
    \ longestString.length;\n        }\n    }\n    \n    return longestString;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    var maxLength = strings[0].length;\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLength)\n            return strings[i];\n    }\n    return null;\n}",
  "{\n    int? maxLength = null;\n    foreach(string,strings) {\n        if (maxLength\
    \ == null || string.length < maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the shortest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[]\
    \ strings) \n{\n    int? minLength = null;\n    foreach(string,strings) {\n  \
    \      if (minLength == null || string.length < minLength) {\n            minLength\
    \ = string.length;\n        }\n    }\n    return minLength;\n}\n/*\n Out of list\
    \ of strings, return the longest one in case of multiple strings of the same length.\n\
    \    \n*/\nNullable!(string) longest(string[] strings, int maxLength) \n{\n  \
    \  foreach(string,strings) {\n        if (string.length == maxLength) {\n    \
    \        return string;\n        }\n    }\n    return null;\n}\n/*\n Out of list\
    \ of strings, return the shortest one in case of multiple strings of the same\
    \ length.\n    \n*/\nNullable!(string) shortest(string[] strings, int minLength)\
    \ \n{\n    foreach(string,strings) {\n        if (string.length == minLength)\
    \ {\n            return string;\n        }\n    }\n    return null;\n}\n/*\n Out\
    \ of list of strings, return the longest one in case of multiple strings of the\
    \ same length. \n    \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int minLength) \n{\n    foreach(string,strings) {\n        if (string.length\
    \ == maxLength && string.length == minLength) {\n            return string;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ shortest one in case of multiple strings of the same length. \n    \n*/\nNullable!(string)\
    \ shortest(string[] strings, int maxLength, int minLength) \n{\n    foreach(string,strings)\
    \ {\n        if (string.length == maxLength && string.length == minLength) {\n\
    \            return string;\n        }\n    }\n    return null;\n}\n/*\n Out of\
    \ list of strings, return the longest one in case of multiple strings of the same\
    \ length. \n    \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int minLength, int maxLength) \n{\n    foreach(string,strings) {\n        if\
    \ (string.length == maxLength && ", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    foreach (string s in strings) {\n     \
    \   if (s.length() > maxLength) {\n            maxLength = s.length();\n     \
    \       maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n    foreach(string;\
    \ strings) {\n        if (string.length() > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    var maxLength\
    \ = strings[0];\n    \n    for (var i = 1; i < strings.length; i++) {\n      \
    \  if (strings[i].length >= maxLength) {\n            maxLength = strings[i].length;\n\
    \        }\n    }\n    \n    return maxLength;\n}", "{\n\tint? maxLength = null;\n\
    \tforeach (string s in strings) {\n\t\tif (maxLength == null || s.length() > maxLength.Value())\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n  \
    \  if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      int length = s.length();\n        if (length > maxLength) {\n         \
    \   maxLength = length;\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}", "{\n    foreach(string; strings) {\n      \
    \  if (string.length > longest.length) longest = string;\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string; strings) {\n\
    \        if (longest == null || string.length < longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}", "{\n\tint? maxLength = null;\n\t\
    foreach(string; strings) {\n\t\tint length = string.length;\n\t\tif (maxLength\
    \ == null || length > maxLength.value)\n\t\t\tmaxLength = length;\n\t}\n\treturn\
    \ maxLength;\n}", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n    var longest\
    \ = strings[0];\n    var longestLength = strings[0].Length;\n    foreach (var\
    \ s in strings)\n    {\n        if (s.Length > longestLength)\n        {\n   \
    \         longest = s;\n            longestLength = s.Length;\n        }\n   \
    \ }\n    return longest;\n}\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| c\
    \ |>\nI like this solution, but I wonder why you used `Nullable!(string)` instead\
    \ of `string?`\n<|/ c |>\n<| c |>\n: Because `string?` doesn't have a `Length`\
    \ property. `Nullable<T>` does.\n<|/ c |>\n<| c |>\n: I didn't know that. Thanks.\n\
    <|/ c |>\n<| c |>\n: I added a version that uses `Nullable<T>`.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that uses `Nullable<T>`.\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring longest = string.Empty;\nstring longestLength = string.Empty;\n\
    foreach (string s in strings)\n{\n    if (s.Length > longestLength)\n    {\n \
    \       longest = s;\n        longestLength = s.Length;\n    }\n}\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThis doesn't work if there are multiple strings with\
    \ the same length.\n<|/ c |>\n<| c |>\n: It does work. `longestLength` is initialized\
    \ to `string.Empty` before the loop, so it will never be set to anything other\
    \ than `string.Empty`.\n<|/ c |>\n<| c |>\n: I added a version that uses `Nullable<T>`.\n\
    <|/ c |>\n<| c |>\n: I added a version that uses `Nullable<T>`.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that uses `Nullable<T>`.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\nstring longest = strings.OrderByDescending(s => s.Length).First();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nThis doesn't work if there\
    \ are multiple strings with the same length.\n<|/ c |>\n<| c |>\n: It does work.\
    \ `longestLength` is initialized to `string.Empty` before the loop, so it will\
    \ never be set to anything other than `string.Empty`.\n<|/ c |>\n<|", "{\n   \
    \ if (strings.length == 0) {\n        return null;\n    }\n    var maxLength =\
    \ 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt; strings.length; ++i)\
    \ {\n        var s = strings[i];\n        if (s.length &gt; maxLength) {\n   \
    \         maxLength = s.length;\n            maxString = s;\n        }\n    }\n\
    \    return maxString;\n}\n</pre>\n</div>\n</div>\n<div class=\"literalblock\"\
    >\n<div class=\"content\">\n<pre>\nimport std.stdio;\nimport std.string;\nimport\
    \ std.array;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.type", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string; strings) {\n        if (longest == null || string.length\
    \ < longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n\
    \        int len = strings[i].length;\n        if (len > maxLen) {\n         \
    \   maxLen = len;\n            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n \
    \       if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}", "{\n   \
    \ if (strings.length == 0)\n        return null;\n    \n    int maxLen = strings[0].length;\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen)\n            continue;\n        \n        maxLen = strings[i].length;\n\
    \    }\n    \n    return strings[strings.length - 1];\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].length;\n\
    \    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLen) {\n            longest = strings[i];\n\
    \            maxLen = strings[i].length;\n        }\n    }\n    \n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = strings[0].length;\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLen) {\n            maxLen = s.length;\n        }\n    }\n    return maxLen\
    \ > 0 ? strings[strings.length - 1] : null;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > longest.length) {\n            longest = strings[i];\n \
    \       }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ Nullable!(string);\n    foreach(string; strings) {\n        if (longest == null\
    \ || string.length < longest.length)\n            longest = string;\n    }\n \
    \   return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    string maxString = null;\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}", "{\n    if (strings.length == 0)\n        return null;\n   \
    \ var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length)\n            longest = strings[i];\n\
    \    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    \n    for (var i = 0; i &lt; strings.length;\
    \ ++i) {\n        var str = strings[i];\n        var length = str.length;\n  \
    \      \n        if (length &gt; maxLength) {\n            maxLength = length;\n\
    \            maxString = str;\n        }\n    }\n    \n    return maxString;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    \n    return maxString;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    \n    for (var i = 0; i &lt; strings.length;\
    \ ++i) {\n        var s = strings[i];\n        if (s.length &gt; maxLength) {\n\
    \            maxLength = s.length;\n            maxString = s;\n        }\n  \
    \  }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    foreach (string s in strings) {\n        int length = s.length();\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n    foreach\
    \ (string s in strings)\n    {\n        if (s.length() > longest.length)\n   \
    \     {\n            longest = s;\n        }\n    }\n    return longest;\n}\n\
    /*\n In list of strings, return the longest one in case of multiple strings of\
    \ the same length.\n    Otherwise return the first one in case of multiple strings\
    \ of the same length. Return None in\n    case the input list is empty.\n    >>>\
    \ longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n \
    \   >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach (string s in strings)\n    {\n  \
    \      if (s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n In list of strings, return the\
    \ longest one in case of multiple strings of the same length.\n    Otherwise return\
    \ the first one in case of multiple strings of the same length. Return None in\n\
    \    case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings)\n    {\n        if (s.length() > longest.length)\n   \
    \     {\n            longest = s;\n        }\n    }\n    return longest;\n}\n\
    /*\n In list of strings, return the longest one in case of multiple strings of\
    \ the same length.\n    Otherwise return the first one in case of multiple strings\
    \ of the same length. Return None in\n    case the input list is empty.\n    >>>\
    \ longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n \
    \   >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach (string s in strings)\n    {\n  \
    \      if (s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n In list of strings, return the\
    \ longest one in case of multiple strings of the same length.\n    Otherwise return\
    \ the first one in case of multiple strings of the same length. Return None in\n\
    \    case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings)\n    {\n        if (s.length() > longest.length", "{\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string; strings)\
    \ {\n        var length = string.length;\n        if (length > maxLength) {\n\
    \            maxLength = length;\n            maxString = string;\n        }\n\
    \    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    var longest = strings[0];\n    for (var i = 1; i <\
    \ strings.length; ++i) {\n        if (strings[i].length >= longest.length) {\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}",
  "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n", "{\n\t\n\tif (strings.length == 0) {\n\t\treturn None;\n\t}\n\t\n\t\
    string longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length; ++i) {\n\
    \t\tif (strings[i].length() > longest.length()) {\n\t\t\tlongest = strings[i];\n\
    \t\t}\n\t}\n\t\n\treturn longest;\n}", "{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    \n    int maxLen = strings[0].length;\n    \n\
    \    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            maxLen = strings[i].length;\n        }\n    }\n  \
    \  \n    return strings[strings.length - 1];\n}", "{\n    var longest = strings[0];\n\
    \    foreach(string; strings)\n    {\n        if (string.length >= longest.length)\n\
    \        {\n            longest = string;\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = strings[0].length;\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLen) {\n            maxLen = s.length;\n        }\n    }\n    return maxLen\
    \ > 0 ? strings[strings.length - 1] : null;\n}", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; ++i) {\n        var s = strings[i];\n      \
    \  if (std.string.length(longest) > std.string.length(s)) {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}", "{\n    var longest = strings[0];\n\
    \    var longestLength = 0;\n    foreach(string; strings)\n    {\n        if (string.length\
    \ > longestLength)\n        {\n            longest = string;\n            longestLength\
    \ = string.length;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        var len = strings[i].length;\n\
    \        if (len > longest.length) {\n            longest = strings[i];\n    \
    \    }\n    }\n    return longest;\n}", "{\n    foreach(string; strings) {\n \
    \       if (string.length > longest.length)\n            longest = string;\n \
    \   }\n    return longest;\n}\n</code>\n<|/ a tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<| a |>\n<code>\npublic static string LongestSubstring(string[] strings)\n\
    {\n    string longest = \"\";\n    foreach (string s in strings)\n    {\n    \
    \    if (s.Length > longest.Length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\npublic string LongestSubstring(string[] strings)\n\
    {\n    string longest = \"\";\n    foreach (string s in strings)\n    {\n    \
    \    if (s.Length > longest.Length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<| a tags=string,list,c#,longest-substring,algorithm |>\n<code>\npublic\
    \ static string LongestSubstring(string[] strings)\n{\n    string longest = \"\
    \";\n    foreach (string s in strings)\n    {\n        if (s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<code>\npublic static string LongestSubstring(string[] strings)\n{\n   \
    \ string longest = \"\";\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Length > longest.Length)\n        {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\npublic static string LongestSubstring(string[] strings)\n{\n    string\
    \ longest = \"\";\n    foreach (string s in strings)\n    {\n        if (s.Length\
    \ > longest.Length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n</code>\n<|/ a tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<| a tags=string,list,c#,longest-substring,algorithm |>\n<code>\npublic\
    \ static string LongestSubstring(string[] strings)\n{\n    string longest = \"\
    \";\n    foreach (string s in strings)\n    {\n        if (s.Length > longest.Length)\n\
    \        {\n            longest = s;", "{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string string : strings) {\n        int length = string.length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n\
    \    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen\
    \ = strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i)\n \
    \   {\n        if (strings[i].length >= maxLen)\n        {\n            maxLen\
    \ = strings[i].length;\n        }\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}", "{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    string\
    \ longest = strings[0];\n    \n    for (int i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length() > longest.length()) {\n            longest =\
    \ strings[i];\n        }\n    }\n    \n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; ++i) {\n        var len = strings[i].length;\n      \
    \  if (len > longest.length)\n            longest = strings[i];\n    }\n    return\
    \ longest;\n}", "{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0)\n   \
    \     return null;\n    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n\
    \    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}",
  "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n  \
    \  if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n \
    \   if (strings.length == 0) {\n        return null;\n    }\n    \n    var longest\
    \ = strings[0];\n    \n    for (var i = 1; i < strings.length; i++) {\n      \
    \  if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    \n    return longest;\n}", "{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n   \
    \     return null;\n    }\n    \n    var longest = strings[0];\n    var longestLength\
    \ = longest.length;\n    \n    for (var i = 1; i < strings.length; i++) {\n  \
    \      var s = strings[i];\n        if (s.length != longestLength) {\n       \
    \     return longest;\n        }\n        \n        if (s.indexOf(longest) ==\
    \ 0) {\n            longest = s;\n            longestLength = longest.length;\n\
    \        }\n    }\n    \n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var maxLength = 0;\n    var maxString = null;\n\
    \    for (var i = 0; i <strings.length; ++i) {\n        var s = strings[i];\n\
    \        if (s.length == maxLength) {\n            maxString = s;\n        }\n\
    \        else if (s.length > maxLength) {\n            maxLength = s.length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = strings[0].length;\n    for (var i = 1; i < strings.length; ++i) {\n     \
    \   if (strings[i].length >= maxLength) {\n            return strings[i];\n  \
    \      }\n    }\n    return null;\n}", "{\n    foreach(string; strings) {\n  \
    \      if (string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}", "{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the shortest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n    >>> shortest([])\n    None\n    >>>\
    \ shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\"\
    , \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() < shortest.length)\n\
    \            shortest = s;\n    }\n    return shortest;\n}\n/*\n Out of list of\
    \ strings, return the longest string in case of multiple strings of the same length.\n\
    \    Otherwise return the first string in case of multiple strings of the same\
    \ length. Return None \n    in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\n/*\n\
    \ Out of list of strings, return the shortest string in case of multiple strings\
    \ of the same length.\n    Otherwise return the first string in case of multiple\
    \ strings of the same length. Return None \n    in case the input list is empty.\n\
    \    >>> shortest([])\n    None\n    >>> shortest([\"a\", \"b\", \"c\"])\n   \
    \ \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string)\
    \ shortest(string[] strings) \n{\n    foreach (string s in strings) {\n      \
    \  if (s.length() < shortest.length)\n            shortest = s;\n    }\n    return\
    \ shortest;\n}\n/*\n Out of list of strings, return the longest string in case\
    \ of multiple strings of the same length.\n    Otherwise return the first string\
    \ in case of multiple strings of the same length. Return None \n    in case the\
    \ input list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\"\
    , \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"\
    a\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ shortest string in case of multiple strings of the same length.", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}", "{\n    var longest:string = Null!(string);\n\
    \    var i:int = 0;\n    var len:int = 0;\n    \n    while(i < strings.length)\n\
    \    {\n        len = strings[i].length;\n        if(len > len)\n        {\n \
    \           longest = strings[i];\n        }\n        i++;\n    }\n    return\
    \ longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n   \
    \ }\n    \n    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length() > longest.length()) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}", "{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}", "{\n\tstring\
    \ longest = strings[0];\n\tfor (int i = 1; i < strings.size(); ++i)\n\t{\n\t\t\
    if (strings[i].length() > longest.length())\n\t\t\tlongest = strings[i];\n\t}\n\
    \treturn longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0;\
    \ i <strings.length; ++i) {\n        var length = strings[i].length;\n       \
    \ if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      int length = strings[i].length;\n        if (length > maxLength) {\n  \
    \          maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    int maxLen = strings[0].length;\n    for (int\
    \ i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= maxLen)\
    \ {\n            maxLen = strings[i].length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\n/*\n In list of strings, return the shortest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> shortest([\"\"])\n    None\n    >>> shortest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n \
    \   \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings) \n{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    int minLen = strings[0].length;\n\
    \    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ < minLen) {\n            minLen = strings[i].length;\n        }\n    }\n   \
    \ return strings[0];\n}\n/*\n In list of strings, return the longest one that\
    \ starts with the given prefix. Return None \n    in case the input list is empty.\n\
    \    >>> longestStartsWith([\"a\", \"b\", \"c\"], \"b\")\n    \"b\"\n    >>> longestStartsWith([\"\
    a\", \"bb\", \"ccc\"], \"b\")\n    \"bb\"\n    \n*/\nNullable!(string) longestStartsWith(string[]\
    \ strings, string prefix) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    int maxLen = strings[0].length;\n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen && strings[i].substring(0, maxLen).equals(prefix))\
    \ {\n            maxLen = strings[i].length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\n/*\n In list of strings, return the shortest one that starts with\
    \ the given prefix. Return None \n    in case the input list is empty.\n    >>>\
    \ shortestStartsWith([\"a\", \"b\", \"c\"], \"b\")\n    \"a\"\n    >>> shortestStartsWith([\"\
    a\", \"bb\", \"ccc\"], \"b\")\n    \"a\"\n    \n*/\nNullable!(string) shortestStartsWith(string[]\
    \ strings, string prefix) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    int minLen = strings[0].length;\n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length < minLen && strings[i].substring(0, minLen).equals(prefix))\
    \ {\n            minLen = strings[i].length;\n        }\n    }\n    return strings[0];\n\
    }\n/*\n In list of strings, return the longest one that ends with the given suffix.\
    \ Return None \n    in case the input list is empty.\n    >>> longestEndsWith([\"\
    a\", \"b\", \"c", "{\n    if (strings.length == 0) {\n        return null;\n \
    \   }\n    \n    int maxLen = strings[0].Length;\n    \n    for (int i = 1; i\
    \ < strings.length; i++) {\n        if (strings[i].Length > maxLen) {\n      \
    \      maxLen = strings[i].Length;\n        }\n    }\n    \n    return maxLen\
    \ > 0 ? strings[strings.length - 1] : null;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    foreach (string s in strings) {\n        int length =\
    \ s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    foreach (string s in strings)\n    {\n        if (s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    \n    return maxString;\n}", "{\n    var longest = strings[0];\n\
    \    foreach(string; strings) {\n        if (string.length > longest.length) longest\
    \ = string;\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    int maxIndex\
    \ = 0;\n    for (int i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}", "{\n\
    \    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ shortest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n    >>> shortest([])\n\
    \    None\n    >>> shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() <\
    \ shortest.length)\n            shortest = s;\n    }\n    return shortest;\n}\n\
    /*\n Out of list of strings, return the longest one that starts with the given\
    \ prefix. Return the\n    first one in case of multiple strings of the same length.\
    \ Return None in case the input list\n    is empty.\n    >>> longestStartsWith([])\n\
    \    None\n    >>> longestStartsWith([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>>\
    \ longestStartsWith([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string)\
    \ longestStartsWith(string[] strings, string prefix) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.startsWith(prefix))\n            return s;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the shortest\
    \ one that starts with the given prefix. Return the\n    first one in case of\
    \ multiple strings of the same length. Return None in case the input list\n  \
    \  is empty.\n    >>> shortestStartsWith([])\n    None\n    >>> shortestStartsWith([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortestStartsWith([\"a\", \"bb\", \"\
    ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortestStartsWith(string[] strings,\
    \ string prefix) \n{\n    foreach (string s in strings) {\n        if (s.startsWith(prefix))\n\
    \            return s;\n    }\n    return shortest;\n}\n/*\n Out of list of strings,\
    \ return the longest one that ends with the given suffix. Return the\n    first\
    \ one in case of multiple strings of the same length. Return None in case the\
    \ input list\n    is empty.\n    >>> longestEndsWith([])\n    None\n    >>> longestEndsWith([\"\
    a\", \"b\", \"c\"])\n    \"c\"\n    >>> longestEndsWith([\"a\", \"bb\", \"ccc\"\
    ])\n    \"ccc\"\n    \n*/\nNullable!(string) longestEndsWith(string[] strings,\
    \ string suffix) \n{\n    foreach (string s in strings) {\n        if (s.endsWith(",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = strings[0].length;\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLen) {\n            maxLen = s.length;\n        }\n    }\n    return maxLen\
    \ > 0 ? strings[strings.length - 1] : null;\n}", "{\n    if (strings.length ==\
    \ 0)\n        return null;\n    int maxLen = strings[0].length;\n    for (int\
    \ i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= maxLen)\n\
    \            maxLen = strings[i].length;\n    }\n    return strings[strings.length\
    \ - 1];\n}", "{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLen) {\n            maxLen = s.length;\n        }\n\
    \    }\n    return maxLen > 0 ? strings[strings.length - 1] : null;\n}", "{\n\
    \    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length() > longest.length()) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    var maxLength = strings[0];\n    for (var i\
    \ = 1; i < strings.length; ++i) {\n        if (strings[i].length >= maxLength.length)\n\
    \            maxLength = strings[i];\n    }\n    return maxLength;\n}", "{\n \
    \   foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].Length;\n\
    \    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].Length > maxLen) {\n            maxLen = strings[i].Length;\n\
    \            longest = strings[i];\n        }\n    }\n    \n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string; strings) {\n\
    \        if (longest == null || string.length() > longest.length()) {\n      \
    \      longest = string;\n        }\n    }\n    return longest;\n}", "{\n    foreach(string;\
    \ strings) {\n        if (string.length() > longest.length())\n            longest\
    \ = string;\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,algorithm\
    \ |>\n<code>\nstring longest(string [] strings)\n{\n    string longest = string.Empty;\n\
    \    foreach(string s in strings)\n    {\n        if(s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,algorithm |>\n<code>\nstring\
    \ longest(string [] strings)\n{\n    string longest = string.Empty;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.Length > longest.Length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=string,c#,algorithm |>\n<code>\nstring longest(string\
    \ [] strings)\n{\n    string longest = string.Empty;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Length > longest.Length)\n        {\n        \
    \    longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c#,algorithm |>\n<code>\nstring longest(string [] strings)\n\
    {\n    string longest = string.Empty;\n    foreach(string s in strings)\n    {\n\
    \        if(s.Length > longest.Length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring longest(string [] strings)\n{\n    string longest = string.Empty;\n\
    \    foreach(string s in strings)\n    {\n        if(s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a tags=string,c#,algorithm |>\n<| a |>\n<code>\nstring longest(string\
    \ [] strings)\n{\n    string longest = string.Empty;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Length > longest.Length)\n        {\n        \
    \    longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,algorithm\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n", "{\n    var maxLength = 0;\n    var\
    \ maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\n/*\n Out of list of strings,\
    \ return the shortest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[]\
    \ strings) \n{\n    var minLength = 0;\n    var minString = \"\";\n    foreach\
    \ (string s in strings) {\n        if (s.length() < minLength) {\n           \
    \ minLength = s.length();\n            minString = s;\n        }\n    }\n    return\
    \ minString;\n}\n/*\n Out of list of strings, return the longest one in case of\
    \ multiple strings of the same length.\n    Return None in case the input list\
    \ is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"\
    c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n   \
    \ \n*/\nNullable!(string) longest(string[] strings, int maxLength) \n{\n    var\
    \ maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\n/*\n Out of list of strings, return the shortest one in case of multiple strings\
    \ of the same length.\n    Return None in case the input list is empty.\n    >>>\
    \ longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n \
    \   >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string)\
    \ shortest(string[] strings, int minLength) \n{\n    var minString = \"\";\n \
    \   foreach (string s in strings) {\n        if (s.length() < minLength) {\n \
    \           minString = s;\n        }\n    }\n    return minString;\n}\n/*\n Out\
    \ of list of strings, return the longest one in case of multiple strings of the\
    \ same length.\n    Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength) \n{\n    var maxString = \"\";\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxString = s;\n        }\n        if (s.length() < minLength) {\n         \
    \   ", "{\n\tint? maxLength = null;\n\tforeach (string s in strings) {\n\t\tif\
    \ (maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}", "{\n    if (strings.length == 0) {\n    \
    \    return null;\n    }\n    var longest = strings[0];\n    for (var i = 1; i\
    \ < strings.length; i++) {\n        if (strings[i].length >= longest.length) {\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"\
    c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n   \
    \ \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\"\
    , \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n\
    \    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\"\
    , \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n\
    \    \n*/\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\"\
    , \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n\
    \    \n*/\nNullable!", "{\n    var maxLength = 0;\n    var maxString = \"\";\n\
    \    foreach(string; strings) {\n        if(string.length > maxLength) {\n   \
    \         maxLength = string.length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0)\n   \
    \     return null;\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i)\n        if (strings[i].length >= longest.length)\n            longest\
    \ = strings[i];\n    return longest;\n}", "{\n    foreach(string; strings) {\n\
    \        if (string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}", "{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n   \
    \ }\n    int maxLen = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int len = strings[i].length;\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxIndex = i;\n        }\n    }\n    return\
    \ strings[maxIndex];\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i\
    \ < strings.length; ++i) {\n        if (strings[i].length >= maxLen) {\n     \
    \       maxLen = strings[i].length;\n        }\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}", "{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n}",
  "{\n    var longest = strings[0];\n    foreach (string s in strings) {\n       \
    \ if (s.length() > longest.length()) {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}", "{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length) longest = s;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (string string\
    \ : strings) {\n        int length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString =\
    \ \"\";\n    for (var i = 0; i <strings.length; ++i) {\n        var s = strings[i];\n\
    \        if (s.length >= maxLength) {\n            maxString = s;\n          \
    \  maxLength = s.length;\n        }\n    }\n    return maxString;\n}", "{\n  \
    \  if (strings.length == 0)\n        return null;\n    var maxLength = strings[0].length;\n\
    \    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length >=\
    \ maxLength)\n            maxLength = strings[i].length;\n    return maxLength\
    \ > 0 ? strings[strings.length - 1] : null;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n   \
    \ foreach (string s in strings) {\n        if (s.length() > maxLen) {\n      \
    \      maxLen = s.length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}", "{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length) {\n            longest = strings[i];\n        }\n    }\n\
    \    return longest;\n}", "{\n\tint? maxLength = null;\n\tstring maxString = null;\n\
    \tforeach(string,s,strings) {\n\t\tif(maxLength == null || s.length() > maxLength)\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n\
    }", "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ For example, `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"` instead of\
    \ `\"a\"`.\n<|/ c |>\n<| c |>\n: Yes, I realized that after I posted it. I edited\
    \ my answer to fix it.\n<|/ c |>\n<| c |>\nI believe this algorithm is O(n^2)\
    \ in the worst case. Since it iterates over the entire string for each character\
    \ in the string, it would be better to iterate over the string once and find the\
    \ longest substring in O(n).\n<|/ c |>\n<| c |>\n: Yes, that's true. I was trying\
    \ to keep it simple, but I guess I should have made it more efficient.\n<|/ c\
    \ |>\n<| a dscore=4 |>\nHere's a solution that uses LINQ:\n<code>\nstring longest\
    \ = strings.OrderByDescending(s => s.Length).First();\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ For example, `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"` instead of\
    \ `\"a\"`.\n<|/ c |>\n<| c |>\n: I believe this algorithm is O(n^2) in the worst\
    \ case. Since it iterates over the entire string for each character in the string,\
    \ it would be better to iterate over the string once and find the longest substring\
    \ in O(n).\n<|/ c |>\n<| c |>\n: Yes, that's true. I was trying to keep it simple,\
    \ but I guess I should have made it more efficient.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nstring longest = strings.OrderByDescending(s => s.Length).First();\n</code>\n\
    <|/ a tags=string,c#,longest-substring,algorithm |>\n<| c |>\nThis doesn't work\
    \ if you have multiple strings of the same length. For example, `longest([\"a\"\
    , \"bb\", \"ccc\"])` returns `\"ccc\"` instead of `\"a\"`.\n<|/ c |>\n<| c |>\n\
    : I believe this algorithm is O(n^2) in the worst case. Since it iterates over\
    \ the entire string for each character in the string, it would be better to iterate ",
  "{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    int maxLen = strings[0].length;\n    foreach\
    \ (string s in strings)\n        if (s.length() > maxLen)\n            maxLen\
    \ = s.length;\n    return strings[strings.length - 1];\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    foreach(string; strings) {\n        if (string.length() > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt; strings.length;\
    \ i++) {\n        var s = strings[i];\n        if (s.length &gt; maxLength) {\n\
    \            maxLength = s.length;\n            maxString = s;\n        }\n  \
    \  }\n    return maxString;\n}\n</pre>\n</div>\n</div>\n<div class=\"cell border-box-sizing\
    \ text_cell rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"\
    inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\"\
    >\n<p>The <code>longest</code> function above is called from <code>longest</code>\
    \ below. <code>longest</code> is called from <code>longest</code> and <code>longest</code>\
    \ is called from <code>longest</code>.</p>", "{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int length\
    \ = strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    \n   \
    \ return maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLen) {\n   \
    \         maxLen = s.length;\n        }\n    }\n    return maxLen > 0 ? strings[strings.length\
    \ - 1] : null;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = strings[0].length;\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLength) {\n            maxLength\
    \ = strings[i].length;\n        }\n    }\n    return maxLength == strings[0].length\
    \ ? strings[0] : null;\n}", "{\n    foreach (string s in strings) {\n        if\
    \ (s.length() > longest.length)\n            longest = s;\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    \n    return strings[maxIndex];\n}", "{\n    var maxLength = 0;\n \
    \   var maxString = \"\";\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}", "{\n    var longest = strings[0];\n\
    \    var longestLength = 0;\n    foreach(string; strings) {\n        if (string.length\
    \ > longestLength) {\n            longest = string;\n            longestLength\
    \ = string.length;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    \n    for (string s in\
    \ strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var maxLength = 0;\n    var maxString = \"\"\
    ;\n    for (var i = 0; i &lt; strings.length; ++i) {\n        var s = strings[i];\n\
    \        var length = s.length();\n        if (length &gt; maxLength) {\n    \
    \        maxLength = length;\n            maxString = s;\n        }\n    }\n \
    \   return maxString;\n}\n</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n\
    <p>The <code>std.string</code> module also provides functions to manipulate strings:</p>\n\
    </div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"CodeRay\
    \ highlight\"><code data-lang=\"clojure\">(<span class=\"keyword\">ns</span> <span\
    \ class=\"namespace\">std</span>)", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string; strings) {\n        if (longest == null || string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i\
    \ < strings.length; ++i) {\n        if (strings[i].length >= maxLen) {\n     \
    \       maxLen = strings[i].length;\n        }\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}", "{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length; ++i) {\n\
    \        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length;\n\
    \            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt; strings.length;\
    \ ++i) {\n        var len = strings[i].length;\n        if (len > maxLength) {\n\
    \            maxLength = len;\n            maxString = strings[i];\n        }\n\
    \    }\n    return maxString;\n}", "{\n    foreach (string s in strings) {\n \
    \       if (s.length() > longest.length)\n            longest = s;\n    }\n  \
    \  return longest;\n}", "{\n    var maxLength = 0;\n    var maxString = \"\";\n\
    \    foreach(string; strings) {\n        var length = string.length;\n       \
    \ if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}", "{\n    foreach (string\
    \ s in strings)\n    {\n        if (s.length() > longest.length)\n           \
    \ longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].Length;\n\
    \    foreach (string s in strings) {\n        if (s.Length > maxLen) {\n     \
    \       maxLen = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length\
    \ ? strings[0] : null;\n}", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int length\
    \ = strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    \n   \
    \ return maxString;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        var length = strings[i].length;\n        if (length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n\tint? maxLength = null;\n\tforeach(string,strings) {\n\t\tint? length\
    \ = string.length;\n\t\tif(maxLength == null || length > maxLength) {\n\t\t\t\
    maxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string string : strings) {\n        if (string.length > maxLength)\
    \ {\n            maxLength = string.length;\n            maxString = string;\n\
    \        }\n    }\n    return maxString;\n}", "{\n    var longest = strings[0];\n\
    \    foreach(string; strings)\n    {\n        if (string.length > longest.length)\n\
    \        {\n            longest = string;\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}", "{\n   \
    \ int? maxLength = null;\n    foreach(string; strings) {\n        if (maxLength\
    \ == null || string.length >= maxLength) {\n            maxLength = string.length;\n\
    \        }\n    }\n    return maxLength;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThe question is tagged C#, so why are you using an `int?` instead\
    \ of an `int`?\n<|/ c |>\n<| c |>\n: Because the question was tagged C#, and C#\
    \ has `int?` type. C# also has `Nullable<T>` type, which can be used for `T` types.\
    \ So I used `int?` type instead of `int` type to make the code more readable.\n\
    <|/ c |>\n<| c |>\n: I didn't know that C# has `Nullable<T>` type. Thanks for\
    \ pointing out.\n<|/ c |>\n<| c |>\n: I added a C# version that uses `Nullable<T>`\
    \ type.\n<|/ c |>\n<| c |>\n: I added a C# version that uses `Nullable<T>` type.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring longest(string s) {\n    string longest\
    \ = string.Empty;\n    foreach(char c in s) {\n        longest = string.Concat(longest,\
    \ c, longest);\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple strings of the same length.\
    \ Try it with `longest(\"abcabc\")`.\n<|/ c |>\n<| c |>\n: It doesn't work if\
    \ there are multiple strings of the same length. Try it with `longest(\"abcabc\"\
    )`.\n<|/ c |>\n<| c |>\n: It doesn't work if there are multiple strings of the\
    \ same length. Try it with `longest(\"abcabc\")`.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if there are multiple strings of the same length. Try it with `longest(\"\
    abcabc\")`.\n<|/ c |>\n<| c |>\n: It doesn't work if there are multiple strings\
    \ of the same length. Try it with `longest(\"abcabc\")`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\npublic static string LongestSubstring(string s)\n{\n    string longest\
    \ = string.Empty;\n    foreach (char c in s)\n    {\n        longest = string.Concat(longest,\
    \ c, ", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n\
    \    int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    string\
    \ longest = strings[0];\n    int longestLength = 0;\n    \n    for (int i = 1;\
    \ i < strings.length; ++i) {\n        int thisLength = strings[i].length;\n  \
    \      if (thisLength > longestLength) {\n            longest = strings[i];\n\
    \            longestLength = thisLength;\n        }\n    }\n    \n    return longest;\n\
    }", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n", "{\n    Nullable!(string) longest = null;\n    foreach(string;\
    \ strings) {\n        if (longest == null || string.length() > longest.length())\
    \ {\n            longest = string;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0) {\n        return null;\n    }\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}", "{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    int maxLen = strings[0].length;\n\
    \    foreach (string s in strings)\n        if (s.length() > maxLen)\n       \
    \     maxLen = s.length;\n    return strings[strings.length - 1];\n}", "{\n  \
    \  foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = 0;\n    int maxLenIndex = -1;\n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int len = strings[i].length;\n        if (len > maxLen) {\n     \
    \       maxLen = len;\n            maxLenIndex = i;\n        }\n    }\n    return\
    \ strings[maxLenIndex];\n}", "{\n\tint? maxLength = null;\n\tstring maxString\
    \ = null;\n\tforeach(string,s,strings) {\n\t\tif(maxLength == null || s.length()\
    \ > maxLength) {\n\t\t\tmaxLength = s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t\
    }\n\treturn maxString;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i)\n\
    \        if (strings[i].length > longest.length)\n            longest = strings[i];\n\
    \    return longest;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var maxLength = strings[0].Length;\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].Length\
    \ > maxLength) {\n            maxLength = strings[i].Length;\n        }\n    }\n\
    \    return maxLength > 0 ? strings[strings.length - 1] : null;\n}", "{\n    if\
    \ (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen =\
    \ 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length; ++i)\
    \ {\n        int len = strings[i].length;\n        if (len > maxLen) {\n     \
    \       maxLen = len;\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ return strings[maxIndex];\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        var len = strings[i].length;\n        if (len > longest.length)\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\n/*\n In list\
    \ of strings, return the longest string in case of multiple strings of the same\
    \ length.\n    Otherwise return the string itself.\n    >>> longest([\"a\", \"\
    b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\
    \n    \n*/\nstring longest(string[] strings) \n{\n    return longest(strings,\
    \ s => s.length);\n}\n/*\n In list of strings, return the longest string in case\
    \ of multiple strings of the same length.\n    Otherwise return the string itself.\n\
    \    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"\
    bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings,\
    \ Func<string, int> length) \n{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[0];\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        var len = length(strings[i]);\n        if (len > longest.length)\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\n/*\n In list\
    \ of strings, return the longest string in case of multiple strings of the same\
    \ length.\n    Otherwise return the string itself.\n    >>> longest([\"a\", \"\
    b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\
    \n    \n*/\nstring longest(string[] strings, Func<string, int> length) \n{\n \
    \   return longest(strings, length, s => s.length);\n}\n/*\n In list of strings,\
    \ return the longest string in case of multiple strings of the same length.\n\
    \    Otherwise return the string itself.\n    >>> longest([\"a\", \"b\", \"c\"\
    ])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n\
    */\nNullable!(string) longest(string[] strings, Func<string, int, int> length)\
    \ \n{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        var len = length(strings[i],\
    \ i);\n        if (len > longest.length)\n            longest = strings[i];\n\
    \    }\n    return longest;\n}\n/*\n In list of strings, return the longest string\
    \ in case of multiple strings of the same length.\n    Otherwise return the string\
    \ itself.\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nstring longest(string", "{\n  \
    \  if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen\
    \ = strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= maxLen) {\n            return strings[i];\n\
    \        }\n    }\n    \n    return null;\n}", "{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}", "{\n    var longest = strings[0];\n    foreach(string;\
    \ strings)\n    {\n        if (string.length > longest.length)\n        {\n  \
    \          longest = string;\n        }\n    }\n    return longest;\n}", "{\n\
    \    if (strings.length == 0) {\n        return null;\n    }\n    \n    int maxLen\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      int len = s.length();\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLen\
    \ = strings[0].length;\n    \n    for (int i = 1; i < strings.length; ++i)\n \
    \   {\n        if (strings[i].length >= maxLen)\n        {\n            maxLen\
    \ = strings[i].length;\n        }\n    }\n    \n    return maxLen > 0 ? strings[strings.length\
    \ - 1] : null;\n}", "{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLength = 0;\n    string maxString = null;\n    \n   \
    \ for (string string : strings) {\n        int length = string.length;\n     \
    \   if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for\
    \ (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0) {\n        return null;\n    }\n    \n  \
    \  int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
