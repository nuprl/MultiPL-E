name: HumanEval_12_longest
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
  \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
  a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
  \ strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    if (strings.length == 0) {\n        return null;\n    }\n  \
    \  var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    \n    return maxString;\n}", "{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}", "{\n    var maxLength = 0;\n    var maxString = \"\"\
    ;\n    foreach(string; strings) {\n        if (string.length > maxLength) {\n\
    \            maxLength = string.length;\n            maxString = string;\n   \
    \     }\n    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    \n    int maxLength\
    \ = 0;\n    string maxString = null;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLength) {\n            maxLength = s.length();\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}", "{\n \
    \   foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    foreach (string\
    \ str in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}", "{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLen = strings[0].Length;\n\
    \    foreach (string s in strings) {\n        if (s.Length > maxLen) {\n     \
    \       maxLen = s.Length;\n        }\n    }\n    \n    return maxLen == strings[0].Length\
    \ ? strings[0] : null;\n}", "{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxLen = strings[0].length;\n    \n    for (int\
    \ i = 1; i < strings.length; ++i) {\n        if (strings[i].length >= maxLen)\
    \ {\n            maxLen = strings[i].length;\n        }\n    }\n    \n    return\
    \ strings[strings.length - 1];\n}", "{\n    foreach(string; strings) {\n     \
    \   if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLength) {\n\
    \            maxLength = s.length();\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}", "{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    \n    int maxLength = 0;\n    string maxString = null;\n\
    \    \n    for (string string : strings) {\n        int length = string.length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = string;\n        }\n    }\n    \n    return maxString;\n}", "{\n\
    \    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    var longest\
    \ = strings[0];\n    var longestLength = strings.length;\n    for(var i = 1; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].length >= longestLength)\n\
    \        {\n            longest = strings[i];\n            longestLength = strings[i].length;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    \n    int maxLength = 0;\n    string maxString\
    \ = null;\n    \n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    \n    return maxString;\n}", "{\n    int maxLen = 0;\n    string\
    \ maxString = null;\n    foreach(string,s,strings) {\n        int len = s.length();\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}", "{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (int i = 0; i < strings.length; ++i) {\n  \
    \      int length = strings[i].length;\n        if (length > maxLength) {\n  \
    \          maxLength = length;\n            maxString = strings[i];\n        }\n\
    \    }\n    \n    return maxString;\n}", "{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    var longest = strings[0];\n    for (var i =\
    \ 1; i < strings.length; ++i) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
