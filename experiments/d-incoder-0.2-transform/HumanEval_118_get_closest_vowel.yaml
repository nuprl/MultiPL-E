name: HumanEval_118_get_closest_vowel
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou are given a word. Your task\
  \ is to find the closest vowel that stands between \n    two consonants from the\
  \ right side of the word (case sensitive).\n    \n    Vowels in the beginning and\
  \ ending doesn't count. Return empty string if you didn't\n    find any vowel met\
  \ the above condition. \n\n    You may assume that the given string contains English\
  \ letter only.\n\n    Example:\n    >>> get_closest_vowel(\"yogurt\")\n    \"u\"\
  \n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"quick\"\
  )\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \n*/\nstring get_closest_vowel(string\
  \ word) \n"
tests: "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
  yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
  easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
  ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
  most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
  ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
  anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
  Above\") == \"o\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n\
    \    int end = word.length() - 1;\n    \n    while(start < end) {\n        string\
    \ sub = word.substr(start, end - start);\n        \n        if(vowels.find(sub)\
    \ != string::npos) {\n            return sub;\n        }\n        \n        start++;\n\
    \        end--;\n    }\n    \n    return \"\";\n}", "{\n    \n    map<string,\
    \ int> vowels;\n    vowels[\"a\"] = 0;\n    vowels[\"e\"] = 0;\n    vowels[\"\
    i\"] = 0;\n    vowels[\"o\"] = 0;\n    vowels[\"u\"] = 0;\n    \n    for(int i\
    \ = 0; i < word.length(); i++)\n    {\n        if(word[i] == 'a' || word[i] ==\
    \ 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n    \
    \        vowels[word[i]]++;\n        }\n    }\n    \n    map<string, int>::iterator\
    \ it;\n    string vowel = \"\";\n    for(it = vowels.begin(); it != vowels.end();\
    \ it++)\n    {\n        if(it->second > 0)\n        {\n            vowel += it->first;\n\
    \        }\n    }\n    \n    return vowel;\n}", "{\n    int left = 0;\n    int\
    \ right = word.length() - 1;\n    \n    while(left < right) {\n        int mid\
    \ = (left + right) / 2;\n        \n        if(word.charAt(mid) == 'a' || word.charAt(mid)\
    \ == 'e' || word.charAt(mid) == 'i' || word.charAt(mid) == 'o' || word.charAt(mid)\
    \ == 'u')\n            left = mid + 1;\n        else\n            right = mid\
    \ - 1;\n    }\n    \n    return word.charAt(left);\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n \
    \   {\n        if(word[i] == vowels[word.find_last_of(\"aeiouAEIOU\") - 1])\n\
    \        {\n            return word[i];\n        }\n    }\n    \n    return \"\
    \";\n}", "{\n    map<string, int> vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"\
    e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] =\
    \ 1;\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            int j = word.find_last_of(\"aeiou\");\n            int\
    \ k = word.find_last_of(\"aeiou\", j);\n            int l = word.find_last_of(\"\
    aeiou\", k);\n            int m = word.find_last_of(\"aeiou\", l);\n         \
    \   int n = word.find_last_of(\"aeiou\", m);\n            int o = word.find_last_of(\"\
    aeiou\", n);\n            int p = word.find_last_of(\"aeiou\", o);\n         \
    \   int q = word.find_last_of(\"aeiou\", p);\n            int r = word.find_last_of(\"\
    aeiou\", q);\n            int s = word.find_last_of(\"aeiou\", r);\n         \
    \   int t = word.find_last_of(\"aeiou\", s);\n            int u = word.find_last_of(\"\
    aeiou\", t);\n            int v = word.find_last_of(\"aeiou\", u);\n         \
    \   int w = word.find_last_of(\"aeiou\", v);\n            int x = word.find_last_of(\"\
    aeiou\", w);\n            int y = word.find_last_of(\"aeiou\", x);\n         \
    \   int z = word.find_last_of(\"aeiou\", y);\n            int A = word.find_last_of(\"\
    aeiou\", z);\n            int B = word.find_last_of(\"aeiou\", A);\n         \
    \   int C = word.find_last_of(\"aeiou\", B);\n            int D = word.find_last_of(\"\
    aeiou\", C);\n            int E = word.find_last_of(\"aeiou\", D);\n         \
    \   int F = word.find_last_of(\"aeiou\", E);\n            int G = word.find_last_of(\"\
    aeiou\", F);\n            int H = word.find_last_of(\"aeiou\", G);\n         \
    \   int I = word.find_last_of(\"aeiou\", H);\n            int J = word.find_last_of(\"\
    aeiou\", I);\n            int K = word.find_last_of(\"aeiou\", J);\n         \
    \   int L = word.find_last_of(\"aeiou\", K);\n            int M = word.find_last_of(\"\
    aeiou\", L);\n            int N = word.find_", "{\n    string vowels = \"AEIOUaeiou\"\
    ;\n    string vowels_right = vowels.substr(vowels.length()-1);\n    \n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    \n    while(i <\
    \ word.length())\n    {\n        if(word[i] == 'A' || word[i] == 'E' || word[i]\
    \ == 'I' || word[i] == 'O' || word[i] == 'U')\n        {\n            i = i +\
    \ 1;\n        }\n        else if(word[i] == 'a' || word[i] == 'e' || word[i] ==\
    \ 'i' || word[i] == 'o' || word[i] == 'u')\n        {\n            i = i + 1;\n\
    \        }\n        else\n        {\n            i = i + 1;\n        }\n    }\n\
    \    \n    while(j < word.length())\n    {\n        if(word[j] == 'a' || word[j]\
    \ == 'e' || word[j] == 'i' || word[j] == 'o' || word[j] == 'u')\n        {\n \
    \           j = j + 1;\n        }\n        else\n        {\n            j = j\
    \ + 1;\n        }\n    }\n    \n    while(k < word.length())\n    {\n        if(word[k]\
    \ == 'A' || word[k] == 'E' || word[k] == 'I' || word[k] == 'O' || word[k] == 'U')\n\
    \        {\n            k = k + 1;\n        }\n        else if(word[k] == 'a'\
    \ || word[k] == 'e' || word[k] == 'i' || word[k] == 'o' || word[k] == 'u')\n \
    \       {\n            k = k + 1;\n        }\n        else\n        {\n      \
    \      k = k + 1;\n        }\n    }\n    \n    while(l<word.length())\n    {\n\
    \        if(word[l]=='A' || word[l]=='E' || word[l]=='I' || word[l]=='O' || word[l]=='U')\n\
    \        {\n            l = l + 1;\n        }\n        else if(word[l]=='a' ||\
    \ word[l]=='e' || word[l]=='i' || word[l]=='o' || word[l]=='u')\n        {\n \
    \           l = l + 1;\n        }\n        else\n        {\n            l = l\
    \ + 1;\n        }\n    }\n    \n    if(word.length()>0)\n    {\n        if(word[i]==vowels_right)\n\
    \        {\n            return word[i];\n        }\n        else if(word[j]==vowels_right)\n\
    \        {\n            return word[j];\n        }\n        else if(word[k]==vowels_right)\n\
    \        {\n            return word[k];\n        }\n        else if(word[l]==vowels_right)\n\
    \        {\n            return word[l];\n        }\n    }\n    else\n    {\n \
    \       return \"\";\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a ", "{\n    map<string,\
    \ int> vowels;\n    vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"\
    i\"] = 1;\n    vowels[\"o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] =\
    \ 1;\n    vowels[\"A\"] = 1;\n    vowels[\"E\"] = 1;\n    vowels[\"I\"] = 1;\n\
    \    vowels[\"O\"] = 1;\n    vowels[\"U\"] = 1;\n    vowels[\"Y\"] = 1;\n    vowels[\"\
    a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"A\"] = 1;\n\
    \    vowels[\"E\"] = 1;\n    vowels[\"I\"] = 1;\n    vowels[\"O\"] = 1;\n    vowels[\"\
    U\"] = 1;\n    vowels[\"Y\"] = 1;\n    \n    map<string, int> consonants;\n  \
    \  consonants[\"a\"] = 1;\n    consonants[\"b\"] = 1;\n    consonants[\"c\"] =\
    \ 1;\n    consonants[\"d\"] = 1;\n    consonants[\"e\"] = 1;\n    consonants[\"\
    f\"] = 1;\n    consonants[\"g\"] = 1;\n    consonants[\"h\"] = 1;\n    consonants[\"\
    i\"] = 1;\n    consonants[\"j\"] = 1;\n    consonants[\"k\"] = 1;\n    consonants[\"\
    l\"] = 1;\n    consonants[\"m\"] = 1;\n    consonants[\"n\"] = 1;\n    consonants[\"\
    o\"] = 1;\n    consonants[\"p\"] = 1;\n    consonants[\"q\"] = 1;\n    consonants[\"\
    r\"] = 1;\n    consonants[\"s\"] = 1;\n    consonants[\"t\"] = 1;\n    consonants[\"\
    u\"] = 1;\n    consonants[\"v\"] = 1;\n    consonants[\"w\"] = 1;\n    consonants[\"\
    x\"] = 1;\n    consonants[\"y\"] = 1;\n    consonants[\"z\"] = 1;\n    consonants[\"\
    A\"] = 1;\n    consonants[\"B\"] = 1;\n    consonants[\"C\"] = 1;\n    consonants[\"\
    D\"] = 1;\n    consonants[\"E\"] = 1;\n    consonants[\"F\"] = 1;\n    consonants[\"\
    G\"] = 1;\n    consonants[\"H\"] = 1;\n    consonants[\"I\"] = 1;\n    consonants[\"\
    J\"] = 1;\n    consonants[\"K\"] = 1;\n    consonants[\"L\"] = 1;\n    consonants[\"\
    M\"] = 1;\n    consonants[\"N\"] = 1;\n    con", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    \n    int start = 0;\n\
    \    int end = word.length() - 1;\n    \n    while(start < end)\n    {\n     \
    \   string vowel = word.substr(start, 1);\n        \n        if(vowels.find(vowel)\
    \ != string::npos)\n        {\n            int index = vowels.find(vowel);\n \
    \           \n            if(index > 0)\n            {\n                string\
    \ consonant = word.substr(index + 1, 1);\n                \n                if(consonants.find(consonant)\
    \ != string::npos)\n                {\n                    int index_consonant\
    \ = consonants.find(consonant);\n                    \n                    if(index_consonant\
    \ > 0)\n                    {\n                        int index_vowel = vowels.find(vowel);\n\
    \                        \n                        if(index_vowel > 0)\n     \
    \                   {\n                            int index_vowel_2 = vowels.find(vowel.substr(0,\
    \ 1));\n                            \n                            if(index_vowel_2\
    \ > 0)\n                            {\n                                int index_vowel_3\
    \ = vowels.find(vowel.substr(1, 1));\n                                \n     \
    \                           if(index_vowel_3 > 0)\n                          \
    \      {\n                                    int index_vowel_4 = vowels.find(vowel.substr(2,\
    \ 1));\n                                    \n                               \
    \     if(index_vowel_4 > 0)\n                                    {\n         \
    \                               int index_vowel_5 = vowels.find(vowel.substr(3,\
    \ 1));\n                                        \n                           \
    \             if(index_vowel_5 > 0)\n                                        {\n\
    \                                            int index_vowel_6 = vowels.find(vowel.substr(4,\
    \ 1));\n                                            \n                       \
    \                     if(index_vowel_6 > 0)\n                                \
    \            {\n                                                int index_vowel_7\
    \ = vowels.find(vowel.substr(5, 1));\n                                       \
    \         \n                                                if(index_vowel_7 >\
    \ 0)\n                                                {\n                    \
    \                                int index_vowel_8 = vowels.find(vowel.substr(6,\
    \ 1));\n                                                    \n               \
    \                                     if(index_vowel_8 > 0)\n                \
    \                                    {\n                                     \
    \                   int index_vowel_9 = vowels.find(vowel.substr(7, 1));\n   \
    \                                                     \n                     \
    \                                   if(index_vowel_9 > 0)\n                  \
    \                                      {\n                                   \
    \                         int index_vowel_10 = vowels.find(vowel.substr(8, 1));\n\
    \                                                            \n              \
    \                                              if(index_vowel_10 > 0)\n      \
    \                                                      {\n                   \
    \                                             int index_vowel_11 = vowels.find(vowel.substr(9,\
    \ 1));\n                                                                \n   \
    \                                                             if(index_vowel_11\
    \ > 0)\n                                                                {\n  \
    \                                                                  int index_vowel_12\
    \ = vowels.find(vowel.substr(10, 1));\n                                      \
    \                              \n                                            \
    \                        if(index_vowel_12 > 0)\n                            \
    \                                        {\n                                 \
    \                                       int index_vowel_13 = vowel", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int end = word.length()\
    \ - 1;\n    \n    while(start <= end) {\n        int mid = start + (end - start)\
    \ / 2;\n        \n        if(word.substr(mid, 1).find(vowels) != string::npos)\
    \ {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n\
    \        }\n    }\n    \n    return word.substr(start, 1);\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nI appreciate your efforts, but this doesn't work. Try\
    \ it on \"yogurt\" for example. It returns \"u\" instead of \"U\".\n<|/ c |>\n\
    <| c |>\nI edited my answer, I missed the case sensitivity requirement. Now it\
    \ works.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't work.\
    \ Try it on \"yogurt\" for example. It returns \"u\" instead of \"U\".\n<|/ c\
    \ |>\n<| c |>\nI edited my answer, I missed the case sensitivity requirement.\
    \ Now it works.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ work. Try it on \"yogurt\" for example. It returns \"u\" instead of \"U\".\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    map<string,int>\
    \ vowels;\n    for(int i=0;i<word.length();i++)\n    {\n        if(word[i]=='a'\
    \ || word[i]=='e' || word[i]=='i' || word[i]=='o' || word[i]=='u')\n        {\n\
    \            vowels[word[i]]=vowels[word[i]]+1;\n        }\n    }\n    map<string,int>::iterator\
    \ it;\n    string vowel=\"\";\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second<vowels.length()/2)\n        {\n            vowel=it->first;\n\
    \            break;\n        }\n    }\n    return vowel;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis solution does not work if you have a word like \"abba\" because\
    \ it will return \"a\" instead of \"b\".\n<|/ c |>\n<| c |>\nI agree, my solution\
    \ was just an example to show how it can be done in C++. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nI agree with you, my solution was just an example to\
    \ show how it can be done in C++. Thanks for pointing it out.\n<|/ c |>\n<| a\
    \ tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(isVowel(word[i]))\n        {\n            vowels[word[i]]++;\n\
    \        }\n    }\n    map<string,int>::iterator it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n\
    \    {\n        if(it->second==0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}", "{\n    map<string, int> vowels;\n  \
    \  for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it = vowels.begin();\n    map<string, int>::iterator itEnd =\
    \ vowels.end();\n    \n    for(; it != itEnd; it++)\n    {\n        if(it->second\
    \ > 1)\n        {\n            string vowel = it->first;\n            int count\
    \ = it->second;\n            \n            int index = word.length() - 1;\n  \
    \          while(index >= 0 && isVowel(word[index]))\n            {\n        \
    \        index--;\n            }\n            \n            int leftIndex = index;\n\
    \            while(leftIndex >= 0 && isVowel(word[leftIndex]))\n            {\n\
    \                leftIndex--;\n            }\n            \n            int rightIndex\
    \ = index;\n            while(rightIndex < word.length() && isVowel(word[rightIndex]))\n\
    \            {\n                rightIndex++;\n            }\n            \n \
    \           string leftVowel = word.substr(leftIndex, 1);\n            string\
    \ rightVowel = word.substr(rightIndex, 1);\n            \n            if(leftVowel\
    \ == vowel && rightVowel == vowel)\n            {\n                return vowel;\n\
    \            }\n        }\n    }\n    \n    return \"\";\n}", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        auto\
    \ it = vowels.find(word[i]);\n        if(it != vowels.end())\n        {\n    \
    \        it->second++;\n        }\n        else\n        {\n            vowels[word[i]]\
    \ = 1;\n        }\n    }\n    \n    for(int i = word.length() - 1; i >= 0; i--)\n\
    \    {\n        auto it = vowels.find(word[i]);\n        if(it != vowels.end())\n\
    \        {\n            if(it->second > 0)\n            {\n                return\
    \ word[i];\n            }\n            else\n            {\n                vowels[word[i]]--;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    map<string, int> vowel_map;\n    for(int i = 0; i < vowels.length();\
    \ i++)\n    {\n        vowel_map[vowels.at(i)] = i;\n    }\n    for(int i = word.length()\
    \ - 1; i >= 0; i--)\n    {\n        if(word[i] == word[i + 1])\n        {\n  \
    \          string vowel = word.substr(vowel_map[word[i]], 1);\n            if(vowel_map.count(vowel)\
    \ > 1)\n            {\n                return vowel;\n            }\n        }\n\
    \    }\n    return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <map>\nusing namespace\
    \ std;", "{\n    map<string,int> vowels;\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(isVowel(word[i]))\n        {\n            string vowel = word[i];\n\
    \            int index = vowels.find(vowel);\n            if(index==-1)\n    \
    \        {\n                vowels[vowel]=i;\n            }\n            else\n\
    \            {\n                if(vowels[vowel]<i)\n                {\n     \
    \               vowels[vowel]=i;\n                }\n            }\n        }\n\
    \    }\n    string vowel = word;\n    int index = vowels.find(vowel);\n    if(index==-1)\n\
    \    {\n        return \"\";\n    }\n    string result = \"\";\n    int start\
    \ = vowels[index];\n    int end = word.length()-1;\n    while(start<end)\n   \
    \ {\n        if(isVowel(word[start]))\n        {\n            string vowel = word[start];\n\
    \            int index = vowels.find(vowel);\n            if(index==-1)\n    \
    \        {\n                vowels[vowel]=start;\n            }\n            else\n\
    \            {\n                if(vowels[vowel]<start)\n                {\n \
    \                   vowels[vowel]=start;\n                }\n            }\n \
    \       }\n        if(isVowel(word[end]))\n        {\n            string vowel\
    \ = word[end];\n            int index = vowels.find(vowel);\n            if(index==-1)\n\
    \            {\n                vowels[vowel]=end;\n            }\n          \
    \  else\n            {\n                if(vowels[vowel]<end)\n              \
    \  {\n                    vowels[vowel]=end;\n                }\n            }\n\
    \        }\n        start++;\n        end--;\n    }\n    for(int i=0;i<word.length();i++)\n\
    \    {\n        if(vowels[i]==index)\n        {\n            result = word[i];\n\
    \            break;\n        }\n    }\n    return result;\n}", "{\n    map<string,int>\
    \ vowels;\n    for(int i=0;i<word.length();i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,int>::iterator\
    \ it;\n    for(it=vowels.begin();it!=vowels.end();it++)\n    {\n        if(it->second==1)\n\
    \        {\n            return it->first;\n        }\n    }\n    return \"\";\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    \n    int start = 0;\n    int\
    \ end = word.length() - 1;\n    \n    while (start < end) {\n        int mid =\
    \ start + (end - start) / 2;\n        \n        if (word[mid] == vowels[mid])\
    \ {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n\
    \        }\n    }\n    \n    return word[start];\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis code doesn't work if the word is \"ab\". It returns \"a\" instead\
    \ of \"\".\n<|/ c |>\n<| c |>\nI didn't test the code but I think it works. I\
    \ tested it on \"ab\" and the result is \"\". Maybe I misunderstood your question.\
    \ Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested\
    \ it on \"ab\" and the result is \"\". Maybe I misunderstood your question. Can\
    \ you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it\
    \ on \"ab\" and the result is \"\". Maybe I misunderstood your question. Can you\
    \ give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it on\
    \ \"ab\" and the result is \"\". Maybe I misunderstood your question. Can you\
    \ give me an example where it doesn't work?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public string GetClosestVowel(string word)\n{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    int start = 0;\n    int end = word.Length - 1;\n    while (start < end)\n\
    \    {\n        int mid = start + (end - start) / 2;\n        if (word[mid] ==\
    \ vowels[mid])\n        {\n            end = mid - 1;\n        }\n        else\n\
    \        {\n            start = mid + 1;\n        }\n    }\n    return word[start];\n\
    }\n</code>\n<|/ a tags=c#,string |>\n<| a |>\n<code>\npublic string GetClosestVowel(string\
    \ word)\n{\n    string vowels = \"aeiouAEIOU\";\n    int start = 0;\n    int end\
    \ = word.Length - 1;\n    while (start < end)\n    {\n        int mid = start\
    \ + (end - start) / 2;\n        if (word[mid] == vowels[mid])\n        {\n   \
    \         end = mid - 1;\n        }\n        else\n        {\n            start\
    \ = mid + 1;\n        }\n    }\n    return word", "{\n    \n    int len = word.length();\n\
    \    \n    for(int i = len-1; i >= 0; i--)\n    {\n        if(isVowel(word.at(i)))\n\
    \        {\n            int j = word.find_last_of(\"aeiou\", i);\n           \
    \ \n            if(j != -1)\n            {\n                return word.at(j);\n\
    \            }\n        }\n    }\n    \n    return \"\";\n}", "{\n    map<string,\
    \ int> vowels;\n    for(int i = 0; i < word.length(); i++)\n    {\n        if(isVowel(word[i]))\n\
    \        {\n            vowels[word[i]]++;\n        }\n    }\n    \n    map<string,\
    \ int>::iterator it;\n    for(it = vowels.begin(); it != vowels.end(); it++)\n\
    \    {\n        if(it->second == 0)\n        {\n            return it->first;\n\
    \        }\n    }\n    return \"\";\n}", "{\n    map<string, int> vowels;\n  \
    \  vowels[\"a\"] = 1;\n    vowels[\"e\"] = 1;\n    vowels[\"i\"] = 1;\n    vowels[\"\
    o\"] = 1;\n    vowels[\"u\"] = 1;\n    vowels[\"y\"] = 1;\n    vowels[\"o\"] =\
    \ 1;\n    vowels[\"u\"] = 1;\n    vowels[\"r\"] = 1;\n    vowels[\"l\"] = 1;\n\
    \    vowels[\"d\"] = 1;\n    vowels[\"t\"] = 1;\n    vowels[\"h\"] = 1;\n    vowels[\"\
    k\"] = 1;\n    vowels[\"p\"] = 1;\n    vowels[\"f\"] = 1;\n    vowels[\"q\"] =\
    \ 1;\n    vowels[\"s\"] = 1;\n    vowels[\"c\"] = 1;\n    vowels[\"x\"] = 1;\n\
    \    vowels[\"z\"] = 1;\n    vowels[\"x\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"\
    z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] =\
    \ 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n\
    \    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"\
    z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] =\
    \ 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n\
    \    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"\
    z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] =\
    \ 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n\
    \    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"\
    z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] =\
    \ 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n\
    \    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"\
    z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] =\
    \ 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n    vowels[\"z\"] = 1;\n\
    \    vowels[\"z\"] = 1;\n    vowels[\"z\"] = "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
