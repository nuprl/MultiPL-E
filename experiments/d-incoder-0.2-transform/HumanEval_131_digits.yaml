name: HumanEval_131_digits
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return\
  \ the product of the odd digits.\n    Return 0 if all digits are even.\n    For\
  \ example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
  \    15L\n    \n*/\nlong digits(long n) \n"
tests: "unittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) ==\
  \ 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n\
  \    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n \
  \   assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n\
  }\nvoid main(){}"
completions: ["{\n    long ret = 1;\n    while (n != 0) {\n        if (n % 2 == 1)\
    \ {\n            ret *= (n / 2);\n        }\n        n /= 2;\n    }\n    return\
    \ ret;\n}", "{\n\tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit = n %\
    \ 10;\n\t\tproduct *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n \
    \   long ret = 1;\n    while (n != 0) {\n        if (n % 2 == 1) {\n         \
    \   ret *= (n / 10);\n        }\n        n /= 10;\n    }\n    return ret;\n}",
  "{\n    long product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n\
    \        product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with n = 235.\n\
    <|/ c |>\n<| c |>\nIt works. Try it yourself. It returns 15. Try it again with\
    \ n = 235.\n<|/ c |>\n<| c |>\nIt returns 15 for n = 235. Try it again with n\
    \ = 235.\n<|/ c |>\n<| c |>\nIt returns 15 for n = 235. Try it again with n =\
    \ 235.\n<|/ c |>\n<| c |>\nIt returns 15 for n = 235. Try it again with n = 235.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nlong long digits(long long n) {\n    long\
    \ long product = 1;\n    long long digit = n % 10;\n    long long remainder =\
    \ n / 10;\n    while(digit) {\n        product *= digit;\n        digit /= 10;\n\
    \    }\n    while(digit) {\n        product *= digit;\n        digit /= 10;\n\
    \    }\n    return product * remainder;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with n = 235.\n<|/ c |>\n<| c |>\nIt\
    \ returns 15 for n = 235. Try it again with n = 235.\n<|/ c |>\n<| c |>\nIt returns\
    \ 15 for n = 235. Try it again with n = 235.\n<|/ c |>\n<| c |>\nIt returns 15\
    \ for n = 235. Try it again with n = 235.\n<|/ c |>\n<| c |>\nIt returns 15 for\
    \ n = 235. Try it again with n = 235.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long result = 0;\n\
    \    while (n != 0) {\n        result *= 10;\n        result += n % 10;\n    \
    \    n /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product *= digit;\n  \
    \      n /= 10;\n    }\n    return product;\n}", "{\n    long result = 0;\n  \
    \  long remainder = 0;\n    long digit;\n    \n    while(n > 0)\n    {\n     \
    \   digit = n % 10;\n        remainder = remainder * 10 + digit;\n        n =\
    \ n / 10;\n    }\n    \n    if(remainder == 0)\n    {\n        result = 1;\n \
    \   }\n    else\n    {\n        result = remainder;\n    }\n    \n    return result;\n\
    }", "{\n    long result = 0;\n    while (n != 0) {\n        result *= 10;\n  \
    \      result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=math,c++ |>\n<| c |>\nThis doesn't work for negative numbers. `digits(-10)`\
    \ returns `0`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n\
    The `digits` function doesn't work for negative numbers. `digits(-10)` returns\
    \ `0`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n`digits(-10)`\
    \ returns `0` because `n % 10` is `-10` when `n` is `-10`.\n<|/ c |>\n<| a tags=math,c++\
    \ |>\n<code>", "{\n    long product = 1;\n    long digit = n % 10;\n    long remainder\
    \ = n % 10;\n    long sum = 0;\n    \n    while (digit > 0)\n    {\n        sum\
    \ += remainder * digit;\n        product = product * 10;\n        digit = digit\
    \ / 10;\n        remainder = remainder / 10;\n    }\n    \n    if (sum % 2 ==\
    \ 0)\n    {\n        return product;\n    }\n    else\n    {\n        return 0;\n\
    \    }\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe OP wants to know\
    \ if there is a faster way to do this than O(n) time.\n<|/ c |>\n<| c |>\nYes,\
    \ I know. My answer was to show that there is an O(n) solution. He can then optimize\
    \ it if he wants. I didn't want to give the OP an answer that he didn't understand.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I wanted to point out that your answer\
    \ doesn't actually answer the OP's question.  It just shows that there is an O(n)\
    \ solution.  It doesn't actually answer the question of whether there is a faster\
    \ way to do this than O(n) time.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted\
    \ to point out that your answer doesn't actually answer the OP's question. It\
    \ just shows that there is an O(n) solution. It doesn't actually answer the question\
    \ of whether there is a faster way to do this than O(n) time.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, but I wanted to point out that your answer doesn't actually\
    \ answer the OP's question. It just shows that there is an O(n) solution. It doesn't\
    \ actually answer the question of whether there is a faster way to do this than\
    \ O(n) time.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    long result = 0;\n    long digit;\n    \n    for(digit = n; digit > 0; digit\
    \ /= 2)\n    {\n        if(digit % 2 == 1)\n        {\n            result *= digit;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n\tlong product = 1;\n\twhile\
    \ (n > 0) {\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn =\
    \ n / 10;\n\t}\n\treturn product;\n}\n/*\nGiven a positive integer n, return the\
    \ sum of its digits.\n    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n\
    \    4L\n    >>> digits(235L)\n    10L\n    \n*/\nlong digits(long n) \n{\n\t\
    long sum = 0;\n\twhile (n > 0) {\n\t\tlong digit = n % 10;\n\t\tsum = sum + digit;\n\
    \t\tn = n / 10;\n\t}\n\treturn sum;\n}\n/*\nGiven a positive integer n, return\
    \ the product of the digits of the number in reverse order.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    15L\n    \n*/\nlong digits(long n) \n{\n\tlong product = 1;\n\twhile (n >\
    \ 0) {\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n /\
    \ 10;\n\t}\n\treturn product;\n}\n/*\nGiven a positive integer n, return the sum\
    \ of the digits of the number in reverse order.\n    For example:\n    >>> digits(1L)\n\
    \    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    10L\n    \n*/\n\
    long digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0) {\n\t\tlong digit =\
    \ n % 10;\n\t\tsum = sum + digit;\n\t\tn = n / 10;\n\t}\n\treturn sum;\n}\n/*\n\
    Given a positive integer n, return the sum of the digits of the number in reverse\
    \ order.\n    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n \
    \   4L\n    >>> digits(235L)\n    10L\n    \n*/\nlong digits(long n) \n{\n\tlong\
    \ sum = 0;\n\twhile (n > 0) {\n\t\tlong digit = n % 10;\n\t\tsum = sum + digit;\n\
    \t\tn = n / 10;\n\t}\n\treturn sum;\n}\n/*\nGiven a positive integer n, return\
    \ the sum of the digits of the number in reverse order.\n    For example:\n  \
    \  >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    10L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\
    \ {\n\t\tlong digit = n % 10;\n\t\t", "{\n    long result = 0;\n    long digit;\n\
    \    \n    for (digit = n; digit > 0; digit /= 2)\n    {\n        if (digit %\
    \ 2 == 1)\n        {\n            result *= digit;\n        }\n    }\n    \n \
    \   return result;\n}", "{\n    long result = 0;\n    while (n > 0) {\n      \
    \  result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    #include <cmath>\nusing namespace std;", "{\n    long product = 1;\n    long digit\
    \ = 0;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}",
  "{\n    long product = 1;\n    while (n != 0) {\n        long digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\
    \tproduct *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n\tlong product\
    \ = 1;\n\twhile (n > 0) {\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\
    \t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n\tlong product = 1;\n\twhile\
    \ (n > 0) {\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn =\
    \ n / 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product *= (digit\
    \ % 2 == 1) ? digit : 1;\n        n /= 10;\n    }\n    \n    return product;\n\
    }", "{\n\tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit = n % 10;\n\t\t\
    product = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n\t\
    long result = 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tif (digit\
    \ % 2 == 1)\n\t\t\tresult *= digit;\n\t\tn /= 10;\n\t}\n\treturn result;\n}",
  "{\n    long result = 0;\n    while (n > 0)\n    {\n        result *= 10;\n    \
    \    result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThe question was about C++, not C.\
    \ `std::pow` isn't available in C++.\n<|/ c |>\n<| c |>\n: I didn't realize that\
    \ `std::pow` was a C++ thing. I've edited my answer to include a solution in C++.\n\
    <|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>", "{\n    long result = 0;\n    long temp = 0;\n    while (n > 0) {\n\
    \        temp = n % 10;\n        if (temp % 2 == 1) {\n            result += temp;\n\
    \        }\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digits(235L)`.\n<|/ c |>\n<| c\
    \ |>\nYes, I see that now. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| c |>\nThis still doesn't work. Try it with `digits(235L)`.\n<|/ c\
    \ |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with `digits(235L)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long result = 0;\n    while (n > 0) {\n        result\
    \ *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if n is negative or if n is zero.\n\
    <|/ c |>\n<| c |>\n: It does work if n is negative. `digits(-10)` returns `-10`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is zero. `digits(0)` returns `0`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is negative. `digits(-10)` returns `-10`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work if n is zero. `digits(0)` returns `0`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n\tlong product = 1;\n\tlong digit;\n\twhile (n) {\n\
    \t\tdigit = n % 10;\n\t\tproduct *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n\
    }", "{\n    long result = 0;\n    while (n > 0)\n    {\n        result *= 10;\n\
    \        result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}",
  "{\n    long ret = 1;\n    long digit;\n    while (n) {\n        digit = n % 10;\n\
    \        ret *= (digit % 2 == 1);\n        n /= 10;\n    }\n    return ret;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like this solution, though\
    \ it might be worth mentioning that this algorithm is O(n) in the number of digits,\
    \ not O(log n).\n<|/ c |>\n<| c |>\n: I agree that it's O(n), but it's also O(log\
    \ n) in the number of digits. It's not O(log n) in the number of digits.\n<|/\
    \ c |>\n<| c |>\n: I agree that it's O(n), but it's also O(log n) in the number\
    \ of digits. It's not O(log n) in the number of digits.\n<|/ c |>\n<| c |>\n:\
    \ I agree that it's O(n), but it's also O(log n) in the number of digits. It's\
    \ not O(log n) in the number of digits.\n<|/ c |>\n<| c |>\n: I agree that it's\
    \ O(n), but it's also O(log n) in the number of digits. It's not O(log n) in the\
    \ number of digits.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long product = 1;\n    while (n > 0)\
    \ {\n        long digit = n % 10;\n        product = product * digit;\n      \
    \  n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 0;\n    while (n != 0) {\n      \
    \  if (n % 2 == 1) {\n            result *= 10;\n            result += n % 10;\n\
    \        }\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport\
    \ java.io.*;", "{\n    long result = 0;\n    while (n > 0)\n    {\n        result\
    \ *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long product =\
    \ 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        product\
    \ *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis code doesn't work if n is negative.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long result = 0;\n    long remainder;\n    \n    while (n) {\n        remainder\
    \ = n % 10;\n        n /= 10;\n        result += remainder * std.math.pow(2, std.math.mod(remainder,\
    \ 2));\n    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n            product *= n\
    \ % 10;\n        }\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis solution doesn't work for negative numbers. For\
    \ example: digits(-1L) returns 0L\n<|/ c |>\n<| c |>\nThis solution doesn't work\
    \ for negative numbers. For example: digits(-1L) returns 0L\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\nlong long digits(long long n)\n{\n    long long product = 1;\n \
    \   while(n > 0)\n    {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    return product;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    long long digits(long long n)\n{\n    long long product = 1;\n    while(n > 0)\n\
    \    {\n        product *= n % 10;\n        n /= 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| a tags=c++,algorithm |>\n<code>\n\
    long long digits(long long n)\n{\n    long long product = 1;\n    while(n > 0)\n\
    \    {\n        product *= n % 10;\n        n /= 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,algorithm |>\n<code>\nlong long digits(long\
    \ long n)\n{\n    long long product = 1;\n    while(n > 0)\n    {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=c++,algorithm |>\n<code>\nlong long digits(long long\
    \ n)\n{\n    long long product = 1;\n    while(n > 0)\n    {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=c++,algorithm |>\n<code>\nlong long digits(long long\
    \ n)\n{\n    long long product = 1;\n    while(n > 0)\n    {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nlong long digits(long long n)\n{\n  \
    \  ", "{\n    long result = 0;\n    long remainder;\n    long digit;\n    \n \
    \   while (n) {\n        remainder = n % 10;\n        digit = n % 10;\n      \
    \  result += remainder * std.math.pow(2, digit);\n        n = n / 10;\n    }\n\
    \    return result;\n}\n/*\nGiven a positive integer n, return the sum of the\
    \ even digits.\n    Return 0 if all digits are even.\n    For example:\n    >>>\
    \ digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n    15L\n\
    \    \n*/\nlong digits(long n) \n{\n    long result = 0;\n    long remainder;\n\
    \    long digit;\n    \n    while (n) {\n        remainder = n % 10;\n       \
    \ digit = n % 10;\n        result += remainder * std.math.pow(2, digit);\n   \
    \     n = n / 10;\n    }\n    return result;\n}\n/*\nGiven a positive integer\
    \ n, return the sum of the odd digits.\n    Return 0 if all digits are even.\n\
    \    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n  \
    \  >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n    long result\
    \ = 0;\n    long remainder;\n    long digit;\n    \n    while (n) {\n        remainder\
    \ = n % 10;\n        digit = n % 10;\n        result += remainder * std.math.pow(2,\
    \ digit);\n        n = n / 10;\n    }\n    return result;\n}\n/*\nGiven a positive\
    \ integer n, return the sum of the even digits.\n    Return 0 if all digits are\
    \ even.\n    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n  \
    \  0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n    long\
    \ result = 0;\n    long remainder;\n    long digit;\n    \n    while (n) {\n \
    \       remainder = n % 10;\n        digit = n % 10;\n        result += remainder\
    \ * std.math.pow(2, digit);\n        n = n / 10;\n    }\n    return result;\n\
    }\n/*\nGiven a positive integer n, return the sum of the odd digits.\n    Return\
    \ 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n    1L\n  \
    \  >>> digits(4L)\n    0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong digits(long\
    \ n) \n{\n    long result = 0;\n    long remainder;\n    long digit;\n    \n",
  "{\n    long product = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n   \
    \     digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long result = 0;\n    long digit;\n\
    \    \n    while (n) {\n        digit = n % 10;\n        result *= digit;\n  \
    \      n /= 10;\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n\
    \    while (n != 0) {\n        long d = n % 10;\n        result *= 2;\n      \
    \  if (d % 2 == 1)\n            result += (d - 1);\n        n = n / 10;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like\
    \ the idea of using bitwise operations. But why do you think this would be faster?\
    \ I suspect it would be slower, because of the extra division operations.\n<|/\
    \ c |>\n<| c |>\n: I suspect that division operations are more expensive than\
    \ multiplication operations. But I haven't tested it myself.\n<|/ c |>\n<| c |>\n\
    : I suspect that division operations are more expensive than multiplication operations.\
    \ But I haven't tested it myself.\n<|/ c |>\n<| c |>\n: I suspect that division\
    \ operations are more expensive than multiplication operations. But I haven't\
    \ tested it myself.\n<|/ c |>\n<| c |>\n: I suspect that division operations are\
    \ more expensive than multiplication operations. But I haven't tested it myself.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nlong long digits(long long n)\n{\n    long\
    \ long result = 0;\n    while (n != 0) {\n        long long d = n % 10;\n    \
    \    result *= 2;\n        if (d % 2 == 1)\n            result += (d - 1);\n \
    \       n = n / 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like this answer better than mine. :)\n<|/ c |>\n<| c |>\nI like\
    \ this answer better than mine. :)\n<|/ c |>\n<| c |>\nI like this answer better\
    \ than mine. :)\n<|/ c |>\n<| a dscore=2 |>\n<code>\nlong long digits(long long\
    \ n)\n{\n    long long result = 0;\n    while (n != 0) {\n        long long d\
    \ = n % 10;\n        result *= 2;\n        if (d % 2 == 1)\n            result\
    \ += (d - 1);\n        n = n / 10;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nI like this answer better than mine. :)\n\
    <|/ c |>\n<| c |>\nI like this answer better than mine. :)\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\nlong long digits(", "{\n    long ret = 1;\n    while (n > 0)\n \
    \   {\n        if (n % 2 == 1)\n        {\n            ret *= (n / 2);\n     \
    \   }\n        n = n / 2;\n    }\n    return ret;\n}", "{\n    long product =\
    \ 1;\n    while (n > 0) {\n        long digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    return product;\n}", "{\n    long\
    \ result = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        n /=\
    \ 10;\n        if (digit % 2 == 1) {\n            result *= digit;\n        }\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    while (n != 0) {\n\
    \        long remainder = n % 10;\n        n /= 10;\n        result += remainder\
    \ * remainder;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThe question was about C++, not C.  And this answer doesn't seem\
    \ to answer the question.  It doesn't even mention `std::numeric_limits`.\n<|/\
    \ c |>\n<| c |>\nI added a C++ solution to the answer. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThe question was about C++, not C.  And this answer\
    \ doesn't seem to answer the question.  It doesn't even mention `std::numeric_limits`.\n\
    <|/ c |>\n<| c |>\nI added a C++ solution to the answer. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThe question was about C++, not C.  And this answer\
    \ doesn't seem to answer the question.  It doesn't even mention `std::numeric_limits`.\n\
    <|/ c |>\n<| a dscore=4 |>\nThe question was about C++, not C.  And this answer\
    \ doesn't seem to answer the question.  It doesn't even mention std::numeric_limits.\n\
    The question was about how to compute a product of digits in C++, not how to compute\
    \ a product of digits in C.  And this answer doesn't seem to answer the question.\
    \  It doesn't even mention std::numeric_limits.\nThe question was about how to\
    \ compute a product of digits in C++, not how to compute a product of digits in\
    \ C.  And this answer doesn't seem to answer the question.  It doesn't even mention\
    \ std::numeric_limits.\nThe question was about how to compute a product of digits\
    \ in C++, not how to compute a product of digits in C.  And this answer doesn't\
    \ seem to answer the question.  It doesn't even mention std::numeric_limits.\n\
    The question was about how to compute a product of digits in C++, not how to compute\
    \ a product of digits in C.  And this answer doesn't seem to answer the question.\
    \  It doesn't even mention std::numeric_limits.\nThe question was about how to\
    \ compute a product of digits in C++, not how to compute a product of digits in\
    \ C.  And this answer doesn't seem to answer the question.  It doesn't even mention\
    \ std::numeric_limits.\nThe question was about how to compute a product of digits\
    \ in C++, not how to compute a product of digits in C.  And this answer doesn't\
    \ seem to answer the question.  It doesn't even mention std::numeric_limits.\n\
    The question was about how to compute a product of digits in C++, not how to compute\
    \ a ", "{\n    long result = 0;\n    long temp;\n    long i;\n    \n    for(i\
    \ = 0; i < n; i++)\n    {\n        temp = n % 10;\n        result *= temp;\n \
    \       n /= 10;\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n\
    \    long remainder;\n    long digit;\n    \n    while (n) {\n        remainder\
    \ = n % 10;\n        digit = remainder % 2;\n        result = result * 10 + digit;\n\
    \        n = n / 10;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    long digit;\n    \n    while (n != 0) {\n        digit = n % 10;\n      \
    \  result *= 2;\n        result += digit;\n        n /= 10;\n    }\n    \n   \
    \ return result;\n}", "{\n    long result = 0;\n    while (n > 0) {\n        result\
    \ *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n    long product = 1;\n    long digit;\n    \n    while (n != 0) {\n \
    \       digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n != 0) {\n        remainder = n % 10;\n        result *= (remainder\
    \ % 2 == 1);\n        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nThe question was about C++, not C.\
    \ Also, your answer doesn't seem to answer the question at all.\n<|/ c |>\n<|\
    \ c |>\nThe question was tagged C++, so I assumed C++ was the language being used.\n\
    <|/ c |>\n<| c |>\nThe question was tagged C++, so I assumed C++ was the language\
    \ being used.\n<|/ c |>\n<| c |>\nThe question was tagged C++, so I assumed C++\
    \ was the language being used.\n<|/ c |>\n<| c |>\nThe question was tagged C++,\
    \ so I assumed C++ was the language being used.\n<|/ c |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long ret = 1;\n    while (n > 0)\n    {\n        if (n % 2 == 1)\n      \
    \  {\n            ret *= (n / 2);\n        }\n        n = n / 2;\n    }\n    return\
    \ ret;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n\
    \ % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\
    \t\t}\n\t}\n\treturn product;\n}", "{\n    long result = 0;\n    while (n > 0)\
    \ {\n        long digit = n % 10;\n        result *= digit;\n        n /= 10;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\tlong result =\
    \ 0;\n\twhile (n > 0)\n\t{\n\t\tlong remainder = n % 10;\n\t\tn = n / 10;\n\t\t\
    result = result * 10 + remainder;\n\t}\n\treturn result;\n}", "{\n    long product\
    \ = 1;\n    while (n > 0)\n    {\n        if (n % 2 == 1)\n            product\
    \ *= n % 10;\n        n /= 10;\n    }\n    return product;\n}", "{\n\tlong result\
    \ = 0;\n\twhile (n > 0) {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\
    \t}\n\treturn result;\n}", "{\n    long result = 0;\n    while (n > 0)\n    {\n\
    \        result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    while (n != 0) {\n    \
    \    long digit = n % 10;\n        result *= digit;\n        n /= 10;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is\
    \ not an answer, but a comment. Answers should contain an explanation of what\
    \ was done and why.\n<|/ c |>\n<| c |>\nI agree with you, but I didn't have enough\
    \ reputation to comment on the question. That's why I posted an answer.\n<|/ c\
    \ |>\n<| c |>\nI didn't downvote you, but I suspect that someone else did. You\
    \ might want to add an explanation of why this works.\n<|/ c |>\n<| c |>\nI added\
    \ an explanation.\n<|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| a\
    \ tags=c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long result = 0;\n    long remainder;\n    \n    while (n) {\n        remainder\
    \ = n % 10;\n        result *= (remainder % 2 == 1);\n        n /= 10;\n    }\n\
    \    \n    return result;\n}", "{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        result *= (remainder\
    \ % 2 == 1 ? 2 : 1);\n        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "{\n    long result = 0;\n    while\
    \ (n != 0) {\n        int digit = n % 10;\n        result *= digit;\n        n\
    \ /= 10;\n    }\n    return result;\n}", "{\n\tlong result = 0;\n\twhile (n) {\n\
    \t\tresult *= 10;\n\t\tresult += (n % 10);\n\t\tn /= 10;\n\t}\n\treturn result;\n\
    }", "{\n    long result = 0;\n    long remainder;\n    \n    while(n>0)\n    {\n\
    \        remainder = n%10;\n        result += remainder*(remainder*2L);\n    \
    \    n /= 10;\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for negative numbers. I tested it on negative numbers and it returned 0.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for negative numbers. I tested it on negative\
    \ numbers and it returned 0.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. I tested it on negative numbers and it returned 0.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for negative numbers. I tested it on negative numbers and\
    \ it returned 0.\n<|/ c |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <stdio.h>",
  "{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult = result * 10 + (n % 10);\n\
    \t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n    long product = 1;\n    long\
    \ digit;\n    \n    while (n > 0) {\n        digit = n % 10;\n        product\
    \ = product * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}",
  "{\n    long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n \
    \       product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }", "{\n    long product = 1;\n    long digit = n % 10;\n    long remainder =\
    \ n % 10;\n    \n    while(digit!=0)\n    {\n        product = product * digit;\n\
    \        digit = remainder % 10;\n        remainder = remainder / 10;\n    }\n\
    \    \n    return product;\n}", "{\n    long result = 0;\n    long digit;\n  \
    \  \n    while (n > 0)\n    {\n        digit = n % 10;\n        result *= 2;\n\
    \        result += digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    long product = 1;\n    long digit;\n    \n    while(n > 0)\n    {\n\
    \        digit = n % 10;\n        product = product * digit;\n        n = n /\
    \ 10;\n    }\n    \n    return product;\n}", "{\n    long ret = 1;\n    long digit;\n\
    \    \n    while (n) {\n        digit = n % 10;\n        ret *= (digit % 2 ==\
    \ 1);\n        n /= 10;\n    }\n    return ret;\n}", "{\n    long product = 1;\n\
    \    while (n > 0)\n    {\n        long digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    return product;\n}", "{\n    long product = 1;\n\
    \    while (n > 0)\n    {\n        long digit = n % 10;\n        n /= 10;\n  \
    \      product *= digit;\n    }\n    return product;\n}", "{\n    long product\
    \ = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long ret = 1;\n    while (n != 0) {\n        if (n % 2\
    \ == 1) {\n            ret *= 10;\n            ret += n % 10;\n        }\n   \
    \     n /= 10;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    #include <algorithm>\n#include <numeric>", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n    long result = 0;\n\
    \    while (n != 0) {\n        result *= 10;\n        result += (n % 10);\n  \
    \      n /= 10;\n    }\n    return result;\n}", "{\n\tlong product = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tif (digit % 2 == 1)\n\t\t\tproduct\
    \ *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n\tlong result = 0;\n\
    \twhile (n != 0) {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t\
    }\n\treturn result;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong\
    \ digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn\
    \ product;\n}", "{\n    long result = 0;\n    long remainder = 0;\n    long digit;\n\
    \    \n    while (n) {\n        digit = n % 10;\n        remainder = n % 10;\n\
    \        result += digit * std.math.pow(remainder, 2);\n        n /= 10;\n   \
    \ }\n    \n    return result;\n}", "{\n    long result = 0;\n    long remainder\
    \ = 0;\n    long digit;\n    \n    while (n) {\n        digit = n % 10;\n    \
    \    remainder = n % 10;\n        result *= digit;\n        result += remainder;\n\
    \        n /= 10;\n    }\n    \n    return result;\n}", "{\n    long product =\
    \ 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n        n /= 10;\n\
    \        product *= digit;\n    }\n    return product;\n}", "{\n    long product\
    \ = 1;\n    long digit = n % 10;\n    long remainder = n % 10;\n    \n    while\
    \ (digit > 0)\n    {\n        product *= digit;\n        digit /= 10;\n    }\n\
    \    \n    if (remainder == 0)\n    {\n        product *= 2;\n    }\n    \n  \
    \  return product;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n\tlong result\
    \ = 0;\n\twhile (n>0)\n\t{\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n /\
    \ 10;\n\t}\n\treturn result;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n  \
    \  long ret = 0;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit\
    \ = n % 10;\n        ret *= 2;\n        ret += digit;\n        n /= 10;\n    }\n\
    \    \n    return ret;\n}", "{\n    long result = 0;\n    long remainder;\n  \
    \  \n    while (n) {\n        remainder = n % 10;\n        n /= 10;\n        result\
    \ += remainder * std.math.pow(2, std.math.floor(std.math.log2(remainder)));\n\
    \    }\n    \n    return result;\n}\n/*\nGiven a positive integer n, return the\
    \ product of the even digits.\n    Return 0 if all digits are odd.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
    \    15L\n    \n*/\nlong digits(long n) \n{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        n /= 10;\n      \
    \  result += remainder * std.math.pow(2, std.math.floor(std.math.log2(remainder)));\n\
    \    }\n    \n    return result;\n}\n/*\nGiven a positive integer n, return the\
    \ sum of the even digits.\n    Return 0 if all digits are even.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
    \    15L\n    \n*/\nlong digits(long n) \n{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        n /= 10;\n      \
    \  result += remainder * std.math.pow(2, std.math.floor(std.math.log2(remainder)));\n\
    \    }\n    \n    return result;\n}\n/*\nGiven a positive integer n, return the\
    \ sum of the odd digits.\n    Return 0 if all digits are odd.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
    \    15L\n    \n*/\nlong digits(long n) \n{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        n /= 10;\n      \
    \  result += remainder * std.math.pow(2, std.math.floor(std.math.log2(remainder)));\n\
    \    }\n    \n    return result;\n}\n/*\nGiven a positive integer n, return the\
    \ sum of the digits in the reverse order.\n    Return 0 if all digits are even.\n\
    \    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n  \
    \  >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n    long result\
    \ = 0;\n    long remain", "{\n    long result = 0;\n    while (n != 0) {\n   \
    \     result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n  \
    \  return result;\n}", "{\n    long ret = 1;\n    long digit;\n    while (n >\
    \ 0)\n    {\n        digit = n % 10;\n        ret *= (digit % 2 == 1 ? digit :\
    \ 0);\n        n /= 10;\n    }\n    return ret;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. Your code is very similar to mine, but I didn't\
    \ know that you can do `n % 10` like that. Thanks for teaching me something new!\n\
    <|/ c |>\n<| c |>\n: Yes, you can do that. `%` is the modulus operator. It returns\
    \ the remainder of the division of `n` by `10`.\n<|/ c |>\n<| c |>\nI see. Thanks\
    \ for teaching me something new!\n<|/ c |>\n<| a tags=algorithm,c++,math |>\n\
    <code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n   \
    \ long product = 1;\n    while (n > 0) {\n        long digit = n % 10;\n     \
    \   product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }", "{\n    long result = 0;\n    while (n > 0)\n    {\n        result *= 10;\n\
    \        result += n % 10;\n        n /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,c |>\n<| c |>\nI like your solution, but I wonder if\
    \ there is a way to do this without using any loops?\n<|/ c |>\n<| c |>\n: Yes,\
    \ there is. See my answer.\n<|/ c |>\n<| c |>\n: I added a solution without loops.\n\
    <|/ c |>\n<| c |>\n: I added a solution without loops.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <stdio.h>", "{\n    long product = 1;\n    while (n > 0)\n\
    \    {\n        long digit = n % 10;\n        product = product * digit;\n   \
    \     n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=math,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `digits(235L)` which returns\
    \ `15L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code.\
    \ Now it works.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n\tlong result = 0;\n\twhile (n > 0)\n\t\
    {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n\
    }", "{\n    long product = 1;\n    long digit;\n    for(; n > 0; n /= 10)\n  \
    \  {\n        digit = n % 10;\n        product *= (digit % 2 == 1) ? digit : 1;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work. Try it with n = 235.\n<|/ c |>\n<| c |>\n: I tested it and\
    \ it works. I even tested it on n = 235.\n<|/ c |>\n<| c |>\n: I tested it on\
    \ n = 235 and it works. I even tested it on n = 235.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on n = 235 and it works. I even tested it on n = 235.\n<|/ c |>\n<| c |>\n\
    : I tested it on n = 235 and it works. I even tested it on n = 235.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "{\n    long result = 0;\n    long remainder;\n   \
    \ \n    while (n) {\n        remainder = n % 10;\n        result += remainder\
    \ * std.math.pow(2, std.math.abs(remainder));\n        n /= 10;\n    }\n    \n\
    \    return result;\n}", "{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult\
    \ = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n\t\
    long result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult *= 10;\n\t\tresult += n % 10;\n\
    \t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long result = 0;\n    long digit;\n    \n    while (n > 0) {\n        digit\
    \ = n % 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}", "{\n    long result = 0;\n    long remainder\
    \ = 0;\n    long digit;\n    \n    while(n > 0)\n    {\n        digit = n % 10;\n\
    \        remainder = n % 10;\n        result += (remainder * std.math.pow(2, digit));\n\
    \        n = n / 10;\n    }\n    \n    return result;\n}", "{\n    long product\
    \ = 1;\n    long digit;\n    \n    while (n > 0) {\n        digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    \n    return\
    \ product;\n}", "{\n    long result = 0;\n    long remainder;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ remainder * std.math.pow(2, std.math.floor(remainder / 2));\n    }\n    \n \
    \   return result;\n}", "{\n    long result = 0;\n    while (n != 0) {\n     \
    \   if (n % 2 == 1) {\n            result *= 10;\n            result += n % 10;\n\
    \        }\n        n = n / 10;\n    }\n    return result;\n}", "{\n\tlong result\
    \ = 0;\n\twhile (n > 0) {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\
    \t}\n\treturn result;\n}", "{\n    long result = 0;\n    long digit;\n    \n \
    \   while (n) {\n        digit = n % 10;\n        result *= 2;\n        result\
    \ += digit;\n        n /= 10;\n    }\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThe `digits` function does not work as intended for\
    \ negative numbers. For example, `digits(-1L)` returns `0L` instead of `-1L`.\n\
    <|/ c |>\n<| c |>\nYes, I noticed that and fixed it.  Thanks.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>", "{\n    long result = 0;\n    while (n > 0)\n    {\n \
    \       result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a tags=algorithm,c++,math |>\n<| c |>\nI didn't\
    \ downvote, but I suspect it's because you didn't explain how this works. You\
    \ haven't explained how it works, just presented a solution that doesn't work.\
    \ Also, your solution doesn't work for negative numbers. You also haven't explained\
    \ how it works. Finally, you haven't explained why you think it works.\n<|/ c\
    \ |>\n<| c |>\nI added some comments to explain how it works. I didn't downvote\
    \ either, but I don't think it's because I didn't explain how it works. I explained\
    \ how it works and I explained why it works. I explained how it works and I explained\
    \ why it works. I explained how it works and I explained why it works. I explained\
    \ how it works and I explained why it works. I explained how it works and I explained\
    \ why it works. I explained how it works and I explained why it works. I explained\
    \ how it works and I explained why it works.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain how this works. You haven't explained\
    \ how it works, just presented a solution that doesn't work. Also, your solution\
    \ doesn't work for negative numbers. You also haven't explained how it works.\
    \ Finally, you haven't explained why you think it works.\n<|/ c |>\n<| c |>\n\
    I explained how it works and I explained why it works. I explained how it works\
    \ and I explained why it works. I explained how it works and I explained why it\
    \ works. I explained how it works and I explained why it works. I explained how\
    \ it works and I explained why it works. I explained how it works and I explained\
    \ why it works. I explained how it works and I explained why it works. I explained\
    \ how it works and I explained why it works. I explained how it works and I explained\
    \ why it works.\n<|/ c |>\n<| c |>\nI explained how it works and I explained why\
    \ it works. I explained how it works and I explained why it works. I explained\
    \ how ", "{\n    long ret = 0;\n    long digit;\n    \n    while (n) {\n     \
    \   digit = n % 10;\n        ret *= (digit % 2 == 1);\n        n /= 10;\n    }\n\
    \    return ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know how to use `std.math` functions to solve the\
    \ problem.\n<|/ c |>\n<| c |>\nI didn't see that he was asking about `std.math`\
    \ functions. I thought he was asking about how to solve the problem with loops.\
    \ I edited my answer to include a solution with loops.\n<|/ c |>\n<| c |>\nI see\
    \ your point. I was just pointing out that your answer doesn't answer the question\
    \ at all. OP wants to know how to use `std.math` functions to solve the problem.\n\
    <|/ c |>\n<| c |>\nI see your point. I was just pointing out that your answer\
    \ doesn't answer the question at all. OP wants to know how to use `std.math` functions\
    \ to solve the problem.\n<|/ c |>\n<| c |>\nI see your point. I was just pointing\
    \ out that your answer doesn't answer the question at all. OP wants to know how\
    \ to use `std.math` functions to solve the problem.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport std.stdio;\nimport std.math;\nimport std.typecons;\n/*\nGiven a\
    \ positive integer n, return the product of the odd digits.\n    Return 0 if all\
    \ digits are even.\n    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n\
    \    0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n  \
    \  long ret = 0;\n    long digit;\n    \n    while (n) {\n        digit = n %\
    \ 10;\n        ret *= (digit % 2 == 1);\n        n /= 10;\n    }\n    return ret;\n\
    }\n</code>\n<|/ a tags=d |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, however I didn't want to post the entire code because\
    \ I ", "{\n    long result = 0;\n    long digit;\n    \n    for(digit = n; digit\
    \ > 0; digit /= 2)\n    {\n        if(digit % 2 == 1)\n        {\n           \
    \ result *= digit;\n        }\n    }\n    \n    return result;\n}", "{\n    long\
    \ result = 0;\n    long temp;\n    long digit;\n    \n    while (n > 0)\n    {\n\
    \        digit = n % 10;\n        temp = result * 10 + digit;\n        result\
    \ = temp;\n        n = n / 10;\n    }\n    \n    return result;\n}", "{\n    long\
    \ result = 0;\n    while (n > 0) {\n        long digit = n % 10;\n        result\
    \ *= digit;\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=math,algorithm,java\
    \ |>\n<| c |>\nThis code does not work. Try it with n = 123, it returns 123, not\
    \ 0.\n<|/ c |>\n<| c |>\nI tested it with n = 123, and it returns 0.\n<|/ c |>\n\
    <| c |>\nI tested it with n = 123, and it returns 0.\n<|/ c |>\n<| c |>\nI tested\
    \ it with n = 123, and it returns 0.\n<|/ c |>\n<| c |>\nI tested it with n =\
    \ 123, and it returns 0.\n<|/ c |>\n<| a tags=math,algorithm,java |>\n<code>\n\
    public class Solution {\n    public static void main(String[] args) {\n      \
    \  System.out.println(digits(123));\n    }", "{\n    long result = 0;\n    long\
    \ digit;\n    \n    for(digit = n; digit > 0; digit /= 2)\n    {\n        if(digit\
    \ % 2 == 1)\n        {\n            result *= digit;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong\
    \ digit = n % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn\
    \ product;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n        long\
    \ digit = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n    return\
    \ product;\n}", "{\n    long result = 0;\n    while (n > 0)\n    {\n        result\
    \ *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. Try `digits(-1L)`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\
    \ `digits(-1L)` returns `-1`.\n<|/ c |>\n<| c |>\n: It returns `-1L` because `-1L`\
    \ is of type `long`.\n<|/ c |>\n<| c |>\n: I didn't say it returns `-1L`. I said\
    \ it returns `-1`.\n<|/ c |>\n<| c |>\n: I didn't say it returns `-1L`. I said\
    \ it returns `-1`.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>", "{\n\t\
    long product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tproduct\
    \ = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n    long\
    \ product = 1;\n    long digit;\n    \n    while (n != 0) {\n        digit = n\
    \ % 10;\n        product = product * digit;\n        n = n / 10;\n    }\n    return\
    \ product;\n}", "{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\tlong digit = n\
    \ % 10;\n\t\tif (digit % 2 == 1) {\n\t\t\tresult *= digit;\n\t\t}\n\t\tn /= 10;\n\
    \t}\n\treturn result;\n}\n/*\nGiven a positive integer n, return the product of\
    \ the even digits.\n    Return 0 if all digits are odd.\n    For example:\n  \
    \  >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
    \    15L\n    \n*/\nlong digits(long n) \n{\n\tlong result = 0;\n\twhile (n !=\
    \ 0) {\n\t\tlong digit = n % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\tresult *= digit;\n\
    \t\t}\n\t\tn /= 10;\n\t}\n\treturn result;\n}\n/*\nGiven a positive integer n,\
    \ return the sum of the even digits.\n    Return 0 if all digits are even.\n \
    \   For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n   \
    \ >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n\tlong result\
    \ = 0;\n\twhile (n != 0) {\n\t\tlong digit = n % 10;\n\t\tif (digit % 2 == 0)\
    \ {\n\t\t\tresult += digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn result;\n}\n/*\n\
    Given a positive integer n, return the sum of the odd digits.\n    Return 0 if\
    \ all digits are odd.\n    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n\
    \    0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n\t\
    long result = 0;\n\twhile (n != 0) {\n\t\tlong digit = n % 10;\n\t\tif (digit\
    \ % 2 == 1) {\n\t\t\tresult += digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn result;\n\
    }\n/*\nGiven a positive integer n, return the sum of the digits of n mod 10.\n\
    \    Return 0 if n is 0.\n    For example:\n    >>> digits(1L)\n    1L\n    >>>\
    \ digits(4L)\n    0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong digits(long\
    \ n) \n{\n\tlong result = 0;\n\twhile (n != 0) {\n\t\tlong digit = n % 10;\n\t\
    \tresult += digit;\n\t\tn /= 10;\n\t}\n\treturn result;\n}\n/*\nGiven a positive\
    \ integer n, return the sum of the digits of n mod 10.\n    Return 0 if n is 0.\n\
    \    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n", "{\n   \
    \ long result = 0;\n    long remainder;\n    \n    while (n) {\n        remainder\
    \ = n % 10;\n        n /= 10;\n        result += remainder * std.math.pow(2, std.math.mod(std.math.abs(remainder),\
    \ 2));\n    }\n    \n    return result;\n}", "{\n\tlong product = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\t\t\
    n = n / 10;\n\t}\n\treturn product;\n}", "{\n\tlong result = 0;\n\twhile (n >\
    \ 0) {\n\t\tresult *= 10;\n\t\tresult += n % 10;\n\t\tn /= 10;\n\t}\n\treturn\
    \ result;\n}", "{\n\tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit = n\
    \ % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 1) {\n\t\t\tproduct *= digit;\n\
    \t\t}\n\t}\n\treturn product;\n}", "{\n    long ret = 1;\n    while (n != 0) {\n\
    \        if (n % 2 == 1) {\n            ret *= (n / 2);\n        }\n        n\
    \ = n / 2;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nI like your solution, but I believe it can be simplified a little\
    \ more. `digits(n)` can be replaced with `n % 10`.\n<|/ c |>\n<| c |>\nYes, that's\
    \ true. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\
    \    long result = 0;\n    long digit;\n    \n    while (n > 0) {\n        digit\
    \ = n % 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe first function\
    \ doesn't work if n is negative. For example, digits(-1L) returns -1L. Also, the\
    \ second function doesn't work if n is zero. For example, digits(0L) returns 0L.\
    \ Also, the third function doesn't work if n is negative. For example, digits(-1L)\
    \ returns -1L. Also, the fourth function doesn't work if n is zero. For example,\
    \ digits(0L) returns 0L.\n<|/ c |>\n<| c |>\n: Thanks for pointing out my mistakes.\
    \ I've fixed them now.\n<|/ c |>\n<| a |>\n<code>", "{\n    long result = 0;\n\
    \    long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n   \
    \     n /= 10;\n        result += remainder * std.math.pow(2, std.math.abs(remainder));\n\
    \    }\n    \n    return result;\n}", "{\n\tlong ret = 0;\n\twhile (n) {\n\t\t\
    ret *= 10;\n\t\tret += n % 10;\n\t\tn /= 10;\n\t}\n\treturn ret;\n}", "{\n   \
    \ long ret = 1;\n    for(; n > 0; n /= 10) {\n        ret *= n % 10;\n    }\n\
    \    return ret;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. Try `digits(-1L)`.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ that out. I've updated the answer to handle negative numbers.\n<|/ c |>\n<|\
    \ a tags=math,algorithm,java |>\n<code>\npublic long digits(long n) {\n    long\
    \ ret = 1;\n    while(n > 0) {\n        ret *= n % 10;\n        n /= 10;\n   \
    \ }\n    return ret;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. Try `digits(-1L)`.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ that out. I've updated the answer to handle negative numbers.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\npublic long digits(long n) {\n    long ret = 1;\n   \
    \ while(n > 0) {\n        ret *= n % 10;\n        n /= 10;\n    }\n    return\
    \ ret;\n}\n</code>\n<|/ a tags=math,algorithm,java |>\n<| a dscore=1 |>\n<code>\n\
    public long digits(long n) {\n    long ret = 1;\n    while(n > 0) {\n        ret\
    \ *= n % 10;\n        n /= 10;\n    }\n    return ret;\n}\n</code>\n<|/ a tags=math,algorithm,java\
    \ |>\n<| a dscore=1 |>\n<code>\npublic long digits(long n) {\n    long ret = 1;\n\
    \    while(n > 0) {\n        ret *= n % 10;\n        n /= 10;\n    }\n    return\
    \ ret;\n}\n</code>\n<|/ a tags=math,algorithm,java |>\n<| a tags=math,algorithm,java\
    \ |>\n<code>\npublic long digits(long n) {\n    long ret = 1;\n    while(n > 0)\
    \ {\n        ret *= n % 10;\n        n /= 10;\n    }\n    return ret;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic long digits(long n) {\n  \
    \  long ret = 1;\n    while(n > 0) {\n        ret *= n % 10;\n        n /= 10;\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a tags=math,algorithm,java |>\n<| a tags=math,algorithm,java\
    \ |>\n<code>\npublic long digits(long n) {\n    long ret = 1;", "{\n\tlong product\
    \ = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\t\
    if (digit % 2 == 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n\
    }\n/*\nGiven a positive integer n, return the product of the even digits.\n  \
    \  Return 0 if all digits are odd.\n    For example:\n    >>> digits(1L)\n   \
    \ 1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong\
    \ digits(long n) \n{\n\tlong product = 1;\n\twhile (n > 0)\n\t{\n\t\tlong digit\
    \ = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t{\n\t\t\tproduct *=\
    \ digit;\n\t\t}\n\t}\n\treturn product;\n}\n/*\nGiven a positive integer n, return\
    \ the sum of the even digits.\n    Return 0 if all digits are even.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
    \    15L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t\
    {\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum;\n}\n/*\nGiven a positive integer\
    \ n, return the sum of the odd digits.\n    Return 0 if all digits are odd.\n\
    \    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n  \
    \  >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n\tlong sum =\
    \ 0;\n\twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif\
    \ (digit % 2 == 1)\n\t\t{\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum;\n}\n\
    /*\nGiven a positive integer n, return the sum of the digits in the first half\
    \ of the number.\n    Return 0 if all digits are even.\n    For example:\n   \
    \ >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n \
    \   15L\n    \n*/\nlong digits(long n) \n{\n\tlong sum = 0;\n\twhile (n > 0)\n\
    \t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 == 0)\n\t\t\
    {\n\t\t\tsum += digit;\n\t\t}\n\t}\n\treturn sum;\n}\n/*\nGiven a ", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n != 0) {\n        digit = n\
    \ % 10;\n        result *= digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n\tlong product = 1;\n\twhile (n > 0) {\n\t\tlong digit = n % 10;\n\t\t\
    if (digit % 2 == 1) {\n\t\t\tproduct *= digit;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn\
    \ product;\n}", "{\n    long product = 1;\n    long digit;\n    \n    while (n\
    \ > 0)\n    {\n        digit = n % 10;\n        product = product * digit;\n \
    \       n = n / 10;\n    }\n    \n    return product;\n}", "{\n\tlong result =\
    \ 0;\n\twhile (n != 0) {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\
    \t}\n\treturn result;\n}", "{\n    long result = 0;\n    while (n > 0) {\n   \
    \     result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n  \
    \  return result;\n}", "{\n    long result = 0;\n    while (n > 0) {\n       \
    \ result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long digit;\n    while (n > 0) {\n\
    \        digit = n % 10;\n        result *= 2L;\n        result += digit;\n  \
    \      n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe question was about a C++ solution, not a Python solution. Also,\
    \ the question was about a solution that uses no loops, not one that uses loops.\n\
    <|/ c |>\n<| c |>\nI didn't say it was a Python solution. I said it was a C++\
    \ solution. My point was that Python is very different from C++, and that C++\
    \ solutions often use loops. I didn't want to give a Python solution, since I\
    \ didn't want to confuse people who were trying to help with their C++ solutions.\
    \ I wanted to give a C++ solution, since that's what was asked.\n<|/ c |>\n<|\
    \ c |>\nI didn't say it was a Python solution. I said it was a C++ solution. My\
    \ point was that Python is very different from C++, and that C++ solutions often\
    \ use loops. I didn't want to give a Python solution, since I didn't want to confuse\
    \ people who were trying to help with their C++ solutions. I wanted to give a\
    \ C++ solution, since that's what was asked.\n<|/ c |>\n<| c |>\nI didn't say\
    \ it was a Python solution. I said it was a C++ solution. My point was that Python\
    \ is very different from C++, and that C++ solutions often use loops. I didn't\
    \ want to give a Python solution, since I didn't want to confuse people who were\
    \ trying to help with their C++ solutions. I wanted to give a C++ solution, since\
    \ that's what was asked.\n<|/ c |>\n<| c |>\nI didn't say it was a Python solution.\
    \ I said it was a C++ solution. My point was that Python is very different from\
    \ C++, and that C++ solutions often use loops. I didn't want to give a Python\
    \ solution, since I didn't want to confuse people who were trying to help with\
    \ their C++ solutions. I wanted to give a C++ solution, since that's what was\
    \ asked.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\n#include <cstdlib>\n#include <ctime>", "{\n    long result =\
    \ 0;\n    while (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n         \
    \   result *= 10;\n            result += n % 10;\n        }\n        n = n / 10;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    while (n != 0) {\n\
    \        result *= 10;\n        result += n % 10;\n        n /= 10;\n    }\n \
    \   return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>", "{\n    long result = 0;\n    long temp;\n    while (n > 0) {\n\
    \        temp = n % 10;\n        result *= 2L;\n        result += temp;\n    \
    \    n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long result = 0;\n    long digit = n % 10;\n    while\
    \ (digit != 0) {\n        if (digit % 2 == 1) {\n            result *= 10;\n \
    \       }\n        result += (digit % 10);\n        digit = n / 10;\n    }\n \
    \   return result;\n}", "{\n    long result = 0;\n    long digit;\n    for(digit\
    \ = n; digit > 0; digit /= 2)\n    {\n        if(digit % 2 == 1)\n        {\n\
    \            result *= digit;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long product = 1;\n    while (n > 0)\n\
    \    {\n        long digit = n % 10;\n        product *= digit;\n        n /=\
    \ 10;\n    }\n    return product;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `digits(-1234)` returns `0`.\n<|/ c |>\n\
    <| c |>\n: It works for negative numbers. `digits(-1234)` returns `-1234`.\n<|/\
    \ c |>\n<| c |>\n: It works for negative numbers. `digits(-1234)` returns `-1234`.\n\
    <|/ c |>\n<| c |>\n: It works for negative numbers. `digits(-1234)` returns `-1234`.\n\
    <|/ c |>\n<| c |>\n: It works for negative numbers. `digits(-1234)` returns `-1234`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long ret = 1;\n    while (n != 0) {\n        if\
    \ (n % 2 == 1) {\n            ret *= 10;\n        }\n        n /= 2;\n    }\n\
    \    return ret;\n}", "{\n    long ret = 0;\n    while (n > 0)\n    {\n      \
    \  ret = ret * 10 + (n % 10);\n        n = n / 10;\n    }\n    return ret;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,c++,c |>\n<code>", "{\n    long\
    \ result = 0;\n    long digit;\n    \n    while (n > 0) {\n        digit = n %\
    \ 10;\n        result *= 2;\n        result += digit;\n        n /= 10;\n    }\n\
    \    \n    return result;\n}", "{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        n /= 10;\n      \
    \  result += remainder * std.math.pow(2, std.math.abs(remainder));\n    }\n  \
    \  \n    return result;\n}", "{\n    long result = 0;\n    while (n > 0) {\n \
    \       result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    while (n > 0) {\n     \
    \   if (n % 2 == 1) {\n            result *= 10;\n            result += n % 10;\n\
    \        }\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `digits(235L)` which should\
    \ return `15L`.\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it\
    \ on `digits(235L)` which should return `15L`\n<|/ c |>\n<| c |>\nI tested it\
    \ on `digits(235L)` which should return `15L`. What do you mean by \"doesn't work\"\
    ?\n<|/ c |>\n<| c |>\nI tested it on `digits(235L)` which should return `15L`.\
    \ What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nI tested it on `digits(235L)`\
    \ which should return `15L`. What do you mean by \"doesn't work\"?\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long result = 0;\n    while (n > 0) {\n        result\
    \ *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    long remainder;\n    \n    while (n != 0) {\n\
    \        remainder = n % 10;\n        n /= 10;\n        result += remainder *\
    \ std.math.pow(2, std.math.floor(std.math.log2(n)));\n    }\n    \n    return\
    \ result;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n        long\
    \ digit = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n    return\
    \ product;\n}\n</code>\n<|/ a tags=algorithm,c++,math |>\n<| c |>\nThis doesn't\
    \ work if n is negative.\n<|/ c |>\n<| c |>\n: It does work if n is negative.\
    \ Try it out for yourself.\n<|/ c |>\n<| c |>\n: It does work if n is negative.\
    \ Try it out for yourself.\n<|/ c |>\n<| c |>\n: It does work if n is negative.\
    \ Try it out for yourself.\n<|/ c |>\n<| c |>\n: It does work if n is negative.\
    \ Try it out for yourself.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "{\n    long\
    \ product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n     \
    \   product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }", "{\n\tlong result = 0;\n\twhile (n > 0) {\n\t\tresult *= 10;\n\t\tresult +=\
    \ n % 10;\n\t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n    long product = 1;\n\
    \    while (n > 0)\n    {\n        long digit = n % 10;\n        product *= digit;\n\
    \        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work if n is negative.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work for negative numbers. I added a comment to the question.\n<|/ c |>\n<|\
    \ c |>\n: I added a comment to the question.\n<|/ c |>\n<| c |>\n: I added a comment\
    \ to the question.\n<|/ c |>\n<| c |>\n: I added a comment to the question.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nlong long int digits(long long int n)\n{\n\
    \    long long int product = 1;\n    long long int digit;\n    while(n > 0)\n\
    \    {\n        digit = n % 10;\n        product *= digit;\n        n /= 10;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<|\
    \ a tags=c++,algorithm,math |>\n<code>\nlong long int digits(long long int n)\n\
    {\n    long long int product = 1;\n    long long int digit;\n    while(n > 0)\n\
    \    {\n        digit = n % 10;\n        product *= digit;\n        n /= 10;\n\
    \    }\n    return product;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    long long int digits(long long int n)\n{\n    long long int product = 1;\n   \
    \ long long int digit;\n    while(n > 0)\n    {\n        digit = n % 10;\n   \
    \     product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math dscore=2 |>\n<| a dscore=2 |>\n<code>\nlong long\
    \ int digits(long long int n)\n{\n    long long int product = 1;\n    long long\
    \ int digit;\n    while(n > 0)\n    {\n        digit = n % 10;\n        product\
    \ *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| a tags=c++,algorithm,math |>\n<code>\nlong long int digits(long long\
    \ int n)\n{\n    long long int product = 1;\n    ", "{\n\tlong product = 1;\n\t\
    long digit;\n\twhile (n) {\n\t\tdigit = n % 10;\n\t\tproduct *= digit;\n\t\tn\
    \ /= 10;\n\t}\n\treturn product;\n}", "{\n    long product = 1;\n    while (n\
    \ > 0) {\n        if (n % 2 == 1) {\n            product *= n % 10;\n        }\n\
    \        n /= 10;\n    }\n    return product;\n}", "{\n    long product = 1;\n\
    \    long digit = n % 10;\n    while (digit != 0) {\n        product *= digit;\n\
    \        n /= 10;\n        digit = n % 10;\n    }\n    return product;\n}", "{\n\
    \    long product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n\
    \        product = product * digit;\n        n = n / 10;\n    }\n    return product;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\
    #include <ctime>\nusing namespace std;", "{\n\tlong result = 0;\n\twhile (n >\
    \ 0) {\n\t\tresult *= 10;\n\t\tresult += n % 10;\n\t\tn /= 10;\n\t}\n\treturn\
    \ result;\n}", "{\n    long product = 1;\n    while (n > 0)\n    {\n        long\
    \ digit = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n    return\
    \ product;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't work. Try\
    \ it with `digits(235L)` which should return `15L`.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works with negative numbers as well.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works with negative numbers as well.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works with negative numbers as well.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    long digits(long n) {\n    long product = 1;\n    long digit = n % 10;\n    while\
    \ (n > 0) {\n        product *= digit;\n        n /= 10;\n        digit = n %\
    \ 10;\n    }\n    return product;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n\
    <| c |>\nThis code doesn't work. Try it with `digits(235L)` which should return\
    \ `15L`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long result = 0;\n    while (n > 0)\n\
    \    {\n        result *= 10;\n        result += n % 10;\n        n /= 10;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,c++,math |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `digits(-1L)` returns `0L` instead\
    \ of `-1L`.\n<|/ c |>\n<| c |>\n: I didn't see that requirement in the question.\
    \ I'll update my answer accordingly.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't require any loops.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ require any loops.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't require\
    \ any loops.\n<|/ c |>\n<| a tags=algorithm,c++,math |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long product = 1;\n    while\
    \ (n > 0)\n    {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n    long result = 0;\n\
    \    while (n != 0) {\n        result *= 10;\n        result += (n % 10);\n  \
    \      n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,c\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include\
    \ <string.h>", "{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult *= 10;\n\
    \t\tresult += n % 10;\n\t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n\tlong result\
    \ = 0;\n\twhile (n > 0)\n\t{\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n\
    \ / 10;\n\t}\n\treturn result;\n}\n/*\nGiven a positive integer n, return the\
    \ product of the even digits.\n    Return 0 if all digits are odd.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    235L\n    \n*/\nlong digits(long n) \n{\n\tlong result = 0;\n\twhile (n >\
    \ 0)\n\t{\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn\
    \ result;\n}\n/*\nGiven a positive integer n, return the sum of the even digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n\
    \    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\n\
    long digits(long n) \n{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult\
    \ = result + n % 10;\n\t\tn = n / 10;\n\t}\n\treturn result;\n}\n/*\nGiven a positive\
    \ integer n, return the sum of the odd digits.\n    Return 0 if all digits are\
    \ odd.\n    For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n   \
    \ 4L\n    >>> digits(235L)\n    235L\n    \n*/\nlong digits(long n) \n{\n\tlong\
    \ result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult = result + n % 10;\n\t\tn = n\
    \ / 10;\n\t}\n\treturn result;\n}\n/*\nGiven a positive integer n, return the\
    \ sum of the digits of the product of \nthe digits of the original number.\n \
    \   Return 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n \
    \   1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\n\
    long digits(long n) \n{\n\tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult\
    \ = result + n % 10;\n\t\tn = n / 10;\n\t}\n\treturn result;\n}\n/*\nGiven a positive\
    \ integer n, return the sum of the digits of the product of \nthe digits of the\
    \ original number.\n    Return 0 if all digits are odd.\n    For example:\n  \
    \  >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    235L\n    \n*/\nlong digits(long n) \n{\n\tlong result = 0;\n", "{\n    long\
    \ product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n     \
    \   product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nI like this solution, although it does require\
    \ a loop. I'd like to see a solution which doesn't require a loop.\n<|/ c |>\n\
    <| c |>\n: I added a solution which doesn't require a loop.\n<|/ c |>\n<| c |>\n\
    I like the second solution. Thanks!\n<|/ c |>\n<| c |>\n: I added a solution which\
    \ doesn't require a loop.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n\
    \tlong result = 0;\n\twhile (n > 0)\n\t{\n\t\tresult = result * 10 + (n % 10);\n\
    \t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n    long result = 0;\n    while\
    \ (n > 0) {\n        result *= 10;\n        result += (n % 10);\n        n /=\
    \ 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,math,c++\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long result = 0;\n    long digit;\n    \n    while (n) {\n        digit =\
    \ n % 10;\n        result *= digit;\n        n /= 10;\n    }\n    \n    return\
    \ result;\n}", "{\n    long product = 1;\n    long digit;\n    \n    while (n\
    \ != 0) {\n        digit = n % 10;\n        product = product * digit;\n     \
    \   n = n / 10;\n    }\n    \n    return product;\n}", "{\n    long result = 0;\n\
    \    while (n > 0) {\n        result *= 10;\n        result += n % 10;\n     \
    \   n /= 10;\n    }\n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n != 0) {\n        long digit = n % 10;\n        product *= digit;\n      \
    \  n /= 10;\n    }\n    return product;\n}", "{\n\tlong product = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tn = n / 10;\n\t\tif (digit % 2 ==\
    \ 1)\n\t\t{\n\t\t\tproduct *= digit;\n\t\t}\n\t}\n\treturn product;\n}", "{\n\
    \    long ret = 1;\n    while (n > 0)\n    {\n        if (n % 2 == 1)\n      \
    \  {\n            ret *= (n / 2);\n        }\n        n = n / 2;\n    }\n    return\
    \ ret;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `digits(-1L)` returns `0L` instead of `-1L`.\n<|/ c |>\n<| c |>\nYes,\
    \ I know. That's why I wrote \"Given a positive integer n\". I didn't want to\
    \ assume that `n` is positive.\n<|/ c |>\n<| c |>\nI guess I missed that part\
    \ of the question. My bad.\n<|/ c |>\n<| a |>\n<code>", "{\n\tlong result = 0;\n\
    \twhile (n != 0) {\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t\
    }\n\treturn result;\n}", "{\n    long ret = 1;\n    while(n > 0)\n    {\n    \
    \    ret *= n % 10;\n        n /= 10;\n    }\n    return ret;\n}", "{\n\tlong\
    \ ret = 1;\n\twhile (n > 0) {\n\t\tret *= n % 10;\n\t\tn /= 10;\n\t}\n\treturn\
    \ ret;\n}", "{\n\tlong product = 1;\n\twhile (n != 0) {\n\t\tlong digit = n %\
    \ 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n\
    }", "{\n\tlong product = 1;\n\tlong digit;\n\twhile (n>0)\n\t{\n\t\tdigit = n\
    \ % 10;\n\t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n\
    }", "{\n    long result = 0;\n    while (n != 0) {\n        result *= 10;\n  \
    \      result += (n % 10);\n        n /= 10;\n    }\n    return result;\n}", "{\n\
    \    long product = 1;\n    while (n > 0)\n    {\n        long digit = n % 10;\n\
    \        product *= digit;\n        n /= 10;\n    }\n    return product;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long result = 0;\n    long remainder;\n    \n \
    \   while (n) {\n        remainder = n % 10;\n        n /= 10;\n        result\
    \ += remainder * std.math.pow(2, std.math.abs(remainder));\n    }\n    \n    return\
    \ result;\n}\n/*\nGiven a positive integer n, return the product of the even digits.\n\
    \    Return 0 if all digits are odd.\n    For example:\n    >>> digits(1L)\n \
    \   1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\n\
    long digits(long n) \n{\n    long result = 0;\n    long remainder;\n    \n   \
    \ while (n) {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ remainder * std.math.pow(2, std.math.abs(remainder));\n    }\n    \n    return\
    \ result;\n}\n/*\nGiven a positive integer n, return the sum of the even digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1L)\n\
    \    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\n\
    long digits(long n) \n{\n    long result = 0;\n    long remainder;\n    \n   \
    \ while (n) {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ remainder * std.math.pow(2, std.math.abs(remainder));\n    }\n    \n    return\
    \ result;\n}\n/*\nGiven a positive integer n, return the sum of the odd digits.\n\
    \    Return 0 if all digits are odd.\n    For example:\n    >>> digits(1L)\n \
    \   1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n    235L\n    \n*/\n\
    long digits(long n) \n{\n    long result = 0;\n    long remainder;\n    \n   \
    \ while (n) {\n        remainder = n % 10;\n        n /= 10;\n        result +=\
    \ remainder * std.math.pow(2, std.math.abs(remainder));\n    }\n    \n    return\
    \ result;\n}\n/*\nGiven a positive integer n, return the sum of the digits of\
    \ the number in reverse order.\n    Return 0 if all digits are even.\n    For\
    \ example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    4L\n    >>> digits(235L)\n\
    \    235L\n    \n*/\nlong digits(long n) \n{\n    long result = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        n /= 10;\n      \
    \  result += ", "{\n    long product = 1;\n    long digit;\n    \n    while (n\
    \ > 0)\n    {\n        digit = n % 10;\n        product *= (digit % 2 == 1) ?\
    \ digit : 0; \n        n /= 10;\n    }\n    \n    return product;\n}\n</code>\n\
    <|/ a tags=algorithm,math,c++ |>\n<| c |>\nI believe this solution is O(n^2) in\
    \ worst case and O(n) in best case.\n<|/ c |>\n<| c |>\n: Yes, you are right.\
    \ I just wanted to point out that this is O(n) in the best case and O(n^2) in\
    \ the worst case. Of course, in the best case it could be O(n^2) in worst case\
    \ too.\n<|/ c |>\n<| c |>\n: Yes, you are right. I just wanted to point out that\
    \ this is O(n) in the best case and O(n^2) in the worst case. Of course, in the\
    \ best case it could be O(n^2) in worst case too.\n<|/ c |>\n<| c |>\n: Yes, you\
    \ are right. I just wanted to point out that this is O(n) in the best case and\
    \ O(n^2) in the worst case. Of course, in the best case it could be O(n^2) in\
    \ worst case too.\n<|/ c |>\n<| c |>\n: Yes, you are right. I just wanted to point\
    \ out that this is O(n) in the best case and O(n^2) in the worst case. Of course,\
    \ in the best case it could be O(n^2) in worst case too.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe best solution I can think of is O(n) time complexity and O(1) space\
    \ complexity. \n<code>\nlong long int digits(long long int n)\n{\n    long long\
    \ int product = 1;\n    long long int digit;\n    long long int temp;\n    long\
    \ long int count = 0;\n    long long int i = 0;\n    while(n > 0)\n    {\n   \
    \     digit = n % 10;\n        temp = product * digit;\n        product *= (digit\
    \ % 2 == 1) ? digit : 0;\n        n /= 10;\n        count += temp;\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a tags=algorithm,math,c++ |>\n<| c |>\nThis\
    \ solution has O(n) space complexity, O(n) time complexity, and O(1) extra space\
    \ complexity. Not O(n^2) space complexity and O(n^2) time complexity.\n", "{\n\
    \tlong result = 0;\n\twhile (n > 0) {\n\t\tresult *= 10;\n\t\tresult += n % 10;\n\
    \t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n    long result = 0;\n    while (n\
    \ > 0)\n    {\n        long digit = n % 10;\n        if (digit % 2 == 1)\n   \
    \     {\n            result *= digit;\n        }\n        n /= 10;\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nI like\
    \ your solution, however it fails for negative numbers. I added a solution that\
    \ works for negative numbers and a test case that fails.\n<|/ c |>\n<| c |>\n\
    : I added a solution that works for negative numbers and a test case that fails.\n\
    <|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>", "{\n\tlong result = 0;\n\twhile (n > 0) {\n\t\tresult *= 10;\n\t\t\
    result += n % 10;\n\t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n    long result\
    \ = 0;\n    long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n\
    \        n /= 10;\n        result += remainder * std.math.pow(2, std.math.mod(remainder,\
    \ 2));\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n    while\
    \ (n != 0) {\n        if (n % 2 == 1) {\n            result *= 10;\n         \
    \   result += n % 10;\n        }\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n\tlong product = 1;\n\tlong digit;\n\twhile (n) {\n\t\tdigit = n % 10;\n\
    \t\tproduct *= digit;\n\t\tn /= 10;\n\t}\n\treturn product;\n}", "{\n    long\
    \ result = 0;\n    while (n > 0)\n    {\n        result *= 10;\n        result\
    \ += n % 10;\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without using any libraries.\n<|/ c |>\n<| c |>\n: Yes, you can do it without\
    \ using any libraries. I'll post a solution shortly.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution without using any libraries.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ without using any libraries.\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ using any libraries.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <cstdio>\n\
    #include <cstring>\n#include <ctime>\nusing namespace std;", "{\n    long result\
    \ = 0;\n    while (n > 0) {\n        result *= 10;\n        result += (n % 10);\n\
    \        n /= 10;\n    }\n    return result;\n}", "{\n    long result = 0;\n \
    \   long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n    \
    \    result += remainder * std.math.pow(2, std.math.mod(n, 10));\n        n /=\
    \ 10;\n    }\n    \n    return result;\n}", "{\n    long product = 1;\n    while\
    \ (n != 0) {\n        long digit = n % 10;\n        product = product * digit;\n\
    \        n = n / 10;\n    }\n    return product;\n}", "{\n\tlong product = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tlong digit = n % 10;\n\t\tproduct = product * digit;\n\
    \t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n\tlong result = 0;\n\twhile (n\
    \ > 0)\n\t{\n\t\tresult = result * 10 + (n % 10);\n\t\tn = n / 10;\n\t}\n\treturn\
    \ result;\n}", "{\n    long result = 0;\n    long remainder;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 10;\n        result += remainder * std.math.pow(2,\
    \ std.math.floor(remainder / 2));\n        n = std.math.trunc(n / 10);\n    }\n\
    \    \n    return result;\n}\n/*\nGiven a positive integer n, return the product\
    \ of the even digits.\n    Return 0 if all digits are odd.\n    For example:\n\
    \    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n\
    \    15L\n    \n*/\nlong digits(long n) \n{\n    long result = 0;\n    long remainder;\n\
    \    \n    while(n > 0)\n    {\n        remainder = n % 10;\n        result +=\
    \ remainder * std.math.pow(2, std.math.floor(remainder / 2));\n        n = std.math.trunc(n\
    \ / 10);\n    }\n    \n    return result;\n}\n/*\nGiven a positive integer n,\
    \ return the sum of the even digits.\n    Return 0 if all digits are even.\n \
    \   For example:\n    >>> digits(1L)\n    1L\n    >>> digits(4L)\n    0L\n   \
    \ >>> digits(235L)\n    15L\n    \n*/\nlong digits(long n) \n{\n    long result\
    \ = 0;\n    long remainder;\n    \n    while(n > 0)\n    {\n        remainder\
    \ = n % 10;\n        result += remainder * std.math.pow(2, std.math.floor(remainder\
    \ / 2));\n        n = std.math.trunc(n / 10);\n    }\n    \n    return result;\n\
    }\n/*\nGiven a positive integer n, return the sum of the odd digits.\n    Return\
    \ 0 if all digits are odd.\n    For example:\n    >>> digits(1L)\n    1L\n   \
    \ >>> digits(4L)\n    0L\n    >>> digits(235L)\n    15L\n    \n*/\nlong digits(long\
    \ n) \n{\n    long result = 0;\n    long remainder;\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 10;\n        result += remainder * std.math.pow(2,\
    \ std.math.floor(remainder / 2));\n        n = std.math.trunc(n / 10);\n    }\n\
    \    \n    return result;\n}\n/*\nGiven a positive integer n, return the sum of\
    \ the digits of the number in reverse order.\n    For example:\n    >>> digits(1L)\n\
    \    1L\n    >>> digits(4L)\n    0L\n    >>> digits(235L)\n    15L\n    \n*/\n\
    long digits(long n) \n", "{\n    long result = 0;\n    while (n > 0) {\n     \
    \   result *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    while (n != 0) {\n        result\
    \ *= 10;\n        result += (n % 10);\n        n /= 10;\n    }\n    return result;\n\
    }", "{\n\tlong product = 1;\n\tlong digit;\n\twhile (n>0) {\n\t\tdigit = n % 10;\n\
    \t\tproduct = product * digit;\n\t\tn = n / 10;\n\t}\n\treturn product;\n}", "{\n\
    \tlong result = 0;\n\twhile (n > 0) {\n\t\tresult *= 10;\n\t\tresult += (n % 10);\n\
    \t\tn /= 10;\n\t}\n\treturn result;\n}", "{\n    long result = 0;\n    while (n\
    \ != 0) {\n        long digit = n % 10;\n        result *= digit;\n        n /=\
    \ 10;\n    }\n    return result;\n}", "{\n    long result = 0;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        result *= 2;\n\
    \        result += digit;\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    long product = 1;\n    long digit;\n    \n    while (n) {\n      \
    \  digit = n % 10;\n        product = product * digit;\n        n = n / 10;\n\
    \    }\n    \n    return product;\n}", "{\n    long product = 1;\n    long digit;\n\
    \    \n    while (n > 0)\n    {\n        digit = n % 10;\n        product = product\
    \ * digit;\n        n = n / 10;\n    }\n    \n    return product;\n}", "{\n  \
    \  long result = 0;\n    long remainder = 0;\n    long digit = 0;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 10;\n        digit = remainder % 2;\n \
    \       result = result + digit;\n        n = n / 10;\n    }\n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
