language: d
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n        if(n % i == 0)\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n\
    \    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n \
    \   assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n\
    \    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n  \
    \  assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L)\
    \ == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) ==\
    \ false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8mzwj1kj.d(23): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mzwj1kj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2L; i <= n; ++i)\n        {\n       \
    \     if (n % i == 0L)\n            {\n                prime = false;\n      \
    \          break;\n            }\n        }\n    }\n    return prime;\n}\nunittest\n\
    {\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n  \
    \  assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n   \
    \ assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) ==\
    \ true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n\
    \    assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpltmpg9ez.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpltmpg9ez.__unittest_L43_C1() [0x427a8f]\n??:?
    void tmpltmpg9ez.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0x73ce1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L)\n        return false; \n    \n    prime = true;\n    \n\
    \    for (i = 2L; prime && i <= n; i+=i%2L)\n        prime = (n % i == 0L);\n\
    \    \n    return prime;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not\
    \ the fastest solution, since it requires division per each number in the range.\
    \ Using a sieve is much faster.\n<|/ c |>\n<| c |>\nI agree, sieve is much faster,\
    \ but this was the OP's question. He asked for \"a fast solution\", and I provided\
    \ a fast solution. Also, sieve is much more elegant than my solution. :)\n<|/\
    \ c |>\n<| c |>\nI agree with you, but I didn't downvote your answer. :)\n<|/\
    \ c |>\n<| c |>\nI didn't downvote your answer, but your solution doesn't work.\
    \ Try it with `is_prime(6L)` - it returns `true` instead of `false`. And it also\
    \ doesn't work for `is_prime(101L)` - it returns `true` instead of `false`. And\
    \ it also doesn't work for `is_prime(11L)` - it returns `true` instead of `false`.\
    \ And it also doesn't work for `is_prime(13441L)` - it returns `true` instead\
    \ of `false`. And it also doesn't work for `is_prime(61L)` - it returns `true`\
    \ instead of `false`.\n<|/ c |>\n<| c |>\nI tested it on ideone and it works.\
    \ I added the test cases you mentioned. Try it yourself. :)\n<|/ c |>\n<| a tags=c++,primes,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\n#include <vector>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpshyn_jrn.d(35): Error: declaration expected, not `<`\n/tmp/tmpshyn_jrn.d(41):
    Error: unterminated character constant\n/tmp/tmpshyn_jrn.d(44): Error: unterminated
    character constant\n/tmp/tmpshyn_jrn.d(47): Error: unterminated character constant\n/tmp/tmpshyn_jrn.d(47):
    Error: unterminated character constant\n/tmp/tmpshyn_jrn.d(47): Error: unterminated
    character constant\n/tmp/tmpshyn_jrn.d(47): Error: unterminated character constant\n/tmp/tmpshyn_jrn.d(47):
    Error: unterminated character constant\n/tmp/tmpshyn_jrn.d(47): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshyn_jrn.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime\
    \ = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa0ap9e59.d(57): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpa0ap9e59.__unittest_L43_C1() [0x427ba6]\n??:?
    void tmpa0ap9e59.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xe9d1e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc8n_hif0.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8n_hif0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long) sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph0jpe2on.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0jpe2on.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmyqk2c1z.d(25): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyqk2c1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnxiijaml.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpnxiijaml.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpnxiijaml.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x10ec8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit, a;\n    bool\
    \ prime;\n    limit = sqrt(n);\n    prime = true;\n    for (i = 2; i <= limit;\
    \ ++i)\n    {\n        a = n % i;\n        if (a == 0)\n        {\n          \
    \  prime = false;\n            break;\n        }\n    }\n    return prime;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis code is not correct. `is_prime(6L)`\
    \ returns `true` but `is_prime(101L)` returns `false`\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that after I posted it. I fixed it now.\n<|/ c |>\n<| c |>\nI fixed\
    \ it now. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n`is_prime(6L)` returns\
    \ `true` but `is_prime(101L)` returns `false`\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that after I posted it. I fixed it now.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <stdio.h>\n#include <math.h>\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph_5kjliu.d(37): Error: declaration expected, not `<`\n/tmp/tmph_5kjliu.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmph_5kjliu.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmph_5kjliu.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmph_5kjliu.d(65): Error: declaration expected, not `assert`\n/tmp/tmph_5kjliu.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmph_5kjliu.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmph_5kjliu.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmph_5kjliu.d(69): Error: declaration expected, not `assert`\n/tmp/tmph_5kjliu.d(70):
    Error: declaration expected, not `assert`\n/tmp/tmph_5kjliu.d(71): Error: declaration
    expected, not `assert`\n/tmp/tmph_5kjliu.d(72): Error: declaration expected, not
    `assert`\n/tmp/tmph_5kjliu.d(73): Error: declaration expected, not `assert`\n/tmp/tmph_5kjliu.d(74):
    Error: declaration expected, not `assert`\n/tmp/tmph_5kjliu.d(75): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_5kjliu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8ee8k4m4.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp8ee8k4m4.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp8ee8k4m4.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x51cb1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime\
    \ = true;\n    \n    for (i = 2L; i <= n; ++i)\n    {\n        if (n % i == 0L)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n \
    \   assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpq574dzun.d(48): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpq574dzun.__unittest_L43_C1() [0x427a8b]\n??:?
    void tmpq574dzun.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xac14554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n            if (n\
    \ % i == 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}\nunittest\n{\n    alias\
    \ candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2i0l_8de.d(31): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2i0l_8de.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it can\
    \ be improved. For example, `is_prime(6L)` returns `true` because `6` is divisible\
    \ by `2`, `3` and `5`. You don't need to check `6` since it isn't divisible by\
    \ `2`.\n<|/ c |>\n<| c |>\nI agree, thank you for pointing that out. I've edited\
    \ my answer to include a more efficient solution.\n<|/ c |>\n<| c |>\nI believe\
    \ that `is_prime(6L)` returns `false` because `6` is divisible by `3`, `5` and\
    \ `7`. `6` isn't divisible by `2` so `is_prime(6L)` returns `false` even though\
    \ `6` is divisible by `2`.\n<|/ c |>\n<| c |>\nYes, you're right. I was thinking\
    \ about it too much. I've edited my answer to include a more efficient solution.\n\
    <|/ c |>\n<| c |>\nI believe that `is_prime(6L)` returns `false` because `6` is\
    \ divisible by `3`, `5` and `7`. `6` isn't divisible by `2` so `is_prime(6L)`\
    \ returns `false` even though `6` is divisible by `2`.\n<|/ c |>\n<| a tags=c++,primes,algorithm\
    \ |>\nThe sieve of Eratosthenes is very efficient. \nThe idea is to generate all\
    \ numbers from 2 to sqrt(n), then filter out all numbers that are not divisible\
    \ by all numbers from 2 to sqrt(n).\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI believe\
    \ that you can use the Sieve of Eratosthenes algorithm to solve this problem.\
    \ \nThe algorithm is described here: http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf\n\
    <|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe Sieve of Eratosthenes is very\
    \ inefficient. See the other answers for more efficient solutions.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe Sieve of Eratosthenes is \nunittest\n{\n    alias candidate\
    \ = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcflvjtaq.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\n/tmp/tmpcflvjtaq.d(33):
    Error: declaration expected, not `<`\n/tmp/tmpcflvjtaq.d(36): Error: unterminated
    character constant\n/tmp/tmpcflvjtaq.d(36): Error: unterminated character constant\n/tmp/tmpcflvjtaq.d(39):
    Error: unterminated character constant\n/tmp/tmpcflvjtaq.d(42): Error: unterminated
    character constant\n/tmp/tmpcflvjtaq.d(45): Error: unterminated character constant\n/tmp/tmpcflvjtaq.d(45):
    Error: unterminated character constant\n/tmp/tmpcflvjtaq.d(48): Error: unterminated
    character constant\n/tmp/tmpcflvjtaq.d(67): Error: declaration expected, not `assert`\n/tmp/tmpcflvjtaq.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpcflvjtaq.d(69): Error: declaration
    expected, not `assert`\n/tmp/tmpcflvjtaq.d(70): Error: declaration expected, not
    `assert`\n/tmp/tmpcflvjtaq.d(71): Error: declaration expected, not `assert`\n/tmp/tmpcflvjtaq.d(72):
    Error: declaration expected, not `assert`\n/tmp/tmpcflvjtaq.d(73): Error: declaration
    expected, not `assert`\n/tmp/tmpcflvjtaq.d(74): Error: declaration expected, not
    `assert`\n/tmp/tmpcflvjtaq.d(75): Error: declaration expected, not `assert`\n/tmp/tmpcflvjtaq.d(76):
    Error: declaration expected, not `assert`\n/tmp/tmpcflvjtaq.d(77): Error: declaration
    expected, not `assert`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcflvjtaq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7bfld8ls.d(45): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp7bfld8ls.__unittest_L35_C1() [0x427b2a]\n??:?
    void tmp7bfld8ls.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xcd55d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i, limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    \n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz06bekgd.d(22): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz06bekgd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime\
    \ = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\
    \n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n\
    \    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n  \
    \  assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) ==\
    \ false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L)\
    \ == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa0ap9e59.d(57): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpa0ap9e59.__unittest_L43_C1() [0x427ba6]\n??:?
    void tmpa0ap9e59.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c0b]\n??:?
    __libc_start_main [0xe9d1e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    long limit =\
    \ (long) sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit; ++i)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    \n    return prime;\n}\nunittest\n{\n  \
    \  alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L)\
    \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L)\
    \ == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n\
    \    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n  \
    \  assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
    \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfd6e1l0l.d(23): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfd6e1l0l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; i++)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpi5kcqnhy.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpi5kcqnhy.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpi5kcqnhy.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x5c095554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool is_prime\
    \ = true;\n    for(i = 2; i <= n/2; i++)\n    {\n        if(n%i == 0)\n      \
    \  {\n            is_prime = false;\n            break;\n        }\n    }\n  \
    \  return is_prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpuxvpjanl.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmpuxvpjanl.__unittest_L34_C1() [0x427b26]\n??:?
    void tmpuxvpjanl.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0xf878f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nReturn true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n\
    \    >>> is_prime(11L)\n    true\n    >>> is_prime(13441L)\n    true\n    >>>\
    \ is_prime(61L)\n    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n\
    \    false\n    \n*/\nbool is_prime(long n) \n{\n    long i;\n    bool prime =\
    \ true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nunittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L)\
    \ == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L)\
    \ == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) ==\
    \ false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n\
    \    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n \
    \   assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8ee8k4m4.d(44): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e75]\n??:? void tmp8ee8k4m4.__unittest_L34_C1() [0x427b26]\n??:?
    void tmp8ee8k4m4.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42824b]\n??:? _d_run_main [0x4281b6]\n??:? main [0x427c07]\n??:?
    __libc_start_main [0x51cb1554]\n1/1 unittests FAILED\n'''
  stdout: b''
