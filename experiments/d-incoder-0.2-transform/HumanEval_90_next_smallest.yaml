name: HumanEval_90_next_smallest
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a list of\
  \ integers.\n    Write a function next_smallest() that returns the 2nd smallest\
  \ element of the list.\n    Return None if there is no such element.\n    >>> next_smallest([1L,\
  \ 2L, 3L, 4L, 5L])\n    2L\n    >>> next_smallest([5L, 1L, 4L, 3L, 2L])\n    2L\n\
  \    >>> next_smallest([])\n    None\n    >>> next_smallest([1L, 1L])\n    None\n\
  \    \n*/\nNullable!(long) next_smallest(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
  \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
  \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n    \
  \    assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result =\
  \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result =\
  \ candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get\
  \ == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
  }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
  \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n\
    \    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n\
    \    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n\
    \    int: z;\n    int: A;\n    int: B;\n    int: C;\n    int: D;\n    int: E;\n\
    \    int: F;\n    int: G;\n    int: H;\n    int: I;\n    int: J;\n    int: K;\n\
    \    int: L;\n    int: M;\n    int: N;\n    int: O;\n    int: P;\n    int: Q;\n\
    \    int: R;\n    int: S;\n    int: T;\n    int: U;\n    int: V;\n    int: W;\n\
    \    int: X;\n    int: Y;\n    int: Z;\n    int: a1;\n    int: a2;\n    int: a3;\n\
    \    int: a4;\n    int: a5;\n    int: a6;\n    int: a7;\n    int: a8;\n    int:\
    \ a9;\n    int: a10;\n    int: a11;\n    int: a12;\n    int: a13;\n    int: a14;\n\
    \    int: a15;\n    int: a16;\n    int: a17;\n    int: a18;\n    int: a19;\n \
    \   int: a20;\n    int: a21;\n    int: a22;\n    int: a23;\n    int: a24;\n  \
    \  int: a25;\n    int: a26;\n    int: a27;\n    int: a28;\n    int: a29;\n   \
    \ int: a30;\n    int: a31;\n    int: a32;\n    int: a33;\n    int: a34;\n    int:\
    \ a35;\n    int: a36;\n    int: a37;\n    int: a38;\n    int: a39;\n    int: a40;\n\
    \    int: a41;\n    int", "{\n    var smallest = lst[0];\n    var smallest_index\
    \ = 0;\n    var index = 0;\n    \n    for (index = 1; index < lst.Length; index++)\n\
    \    {\n        if (lst[index] < smallest)\n        {\n            smallest =\
    \ lst[index];\n            smallest_index = index;\n        }\n    }\n    \n \
    \   if (smallest_index == lst.Length - 1)\n    {\n        return null;\n    }\n\
    \    else\n    {\n        return lst[smallest_index + 1];\n    }\n}", "{\n   \
    \ int[] count = new int[256];\n    foreach(i, lst) count[i]++;\n    foreach(i,\
    \ count) \n        if(count[i] > 1) return i;\n    return null;\n}", "{\n    int?\
    \ smallest = std.math.min(lst);\n    if (smallest.is_some) {\n        return smallest;\n\
    \    } else {\n        return std.math.max(lst);\n    }\n}\n/*", "{\n    if (lst.length\
    \ == 0)\n        return null;\n    var smallest = lst[0];\n    var smallest_index\
    \ = 0;\n    for (var i = 1; i < lst.length; ++i)\n    {\n        if (lst[i] <\
    \ smallest)\n        {\n            smallest = lst[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    return smallest;\n}", "{\n    long smallest = lst[0];\n\
    \    long secondSmallest = lst[1];\n    \n    for(long i = 2; i < lst.size();\
    \ ++i)\n    {\n        if(smallest>lst[i])\n        {\n            secondSmallest\
    \ = smallest;\n            smallest = lst[i];\n        }\n        else\n     \
    \   {\n            secondSmallest = lst[i];\n        }\n    }\n    \n    return\
    \ secondSmallest;\n}\n/*", "{\n    if (lst.is_empty)\n        return null;\n \
    \   \n    long smallest = lst[0];\n    long second = lst[1];\n    \n    for (int\
    \ i = 2; i < lst.lenght; ++i)\n    {\n        if (lst[i] < smallest)\n       \
    \ {\n            smallest = lst[i];\n        }\n        else if (lst[i] > second\
    \ && lst[i] < smallest)\n        {\n            second = smallest;\n         \
    \   smallest = lst[i];\n        }\n    }\n    \n    return smallest;\n}", "{\n\
    \    int[] arr = lst.asArray!int[];\n    int len = arr.length;\n    if (len <\
    \ 2) return null;\n    int min = arr[0];\n    int minIndex = -1;\n    for (int\
    \ i = 1; i < len; ++i)\n    {\n        if (arr[i] < min)\n        {\n        \
    \    min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (minIndex\
    \ == len - 1)\n    {\n        return null;\n    }\n    return arr[minIndex + 1];\n\
    }\n/*", "{\n    long? res = null;\n    foreach(long x, lst)\n    {\n        if(x\
    \ < res)\n        {\n            res = x;\n        }\n    }\n    return res;\n\
    }", "{\n    if (lst.is_empty())\n        return null;\n    \n    var smallest\
    \ = lst[0];\n    var smallest_index = lst.index(smallest);\n    \n    var smallest_value\
    \ = smallest;\n    var smallest_index2 = smallest_index;\n    \n    for (var i\
    \ = 1; i < lst.size(); ++i)\n    {\n        var value = lst[i];\n        var index\
    \ = lst.index(value);\n        \n        if (index == smallest_index)\n      \
    \  {\n            smallest_value = value;\n            smallest_index2 = i;\n\
    \        }\n        else if (value < smallest)\n        {\n            smallest_value\
    \ = value;\n            smallest_index2 = i;\n        }\n    }\n    \n    if (smallest_index2\
    \ == smallest_index)\n        return null;\n    \n    return smallest_value;\n\
    }", "{\n    int? smallest = std.math.min.index(lst);\n    if (smallest.is_some)\
    \ {\n        return smallest;\n    }\n    \n    int? second = std.math.min.index(lst,\
    \ smallest);\n    if (second.is_some) {\n        return second;\n    }\n    \n\
    \    return null;\n}", "{\n    int? smallest = lst[0];\n    int? second = smallest;\n\
    \    for(int i = 1; i < lst.size(); ++i)\n    {\n        if(lst[i] < smallest)\n\
    \        {\n            smallest = lst[i];\n            second = smallest;\n \
    \       }\n        else if(lst[i] < second)\n        {\n            second = lst[i];\n\
    \        }\n    }\n    return second;\n}\n/*", "{\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: A;\n    int: B;\n\
    \    int: C;\n    int: D;\n    int: E;\n    int: F;\n    int: G;\n    int: H;\n\
    \    int: I;\n    int: J;\n    int: K;\n    int: L;\n    int: M;\n    int: N;\n\
    \    int: O;\n    int: P;\n    int: Q;\n    int: R;\n    int: S;\n    int: T;\n\
    \    int: U;\n    int: V;\n    int: W;\n    int: X;\n    int: Y;\n    int: Z;\n\
    \    int: a1;\n    int: a2;\n    int: a3;\n    int: a4;\n    int: a5;\n    int:\
    \ a6;\n    int: a7;\n    int: a8;\n    int: a9;\n    int: a10;\n    int: a11;\n\
    \    int: a12;\n    int: a13;\n    int: a14;\n    int: a15;\n    int: a16;\n \
    \   int: a17;\n    int: a18;\n    int: a19;\n    int: a20;\n    int: a21;\n  \
    \  int: a22;\n    int: a23;\n    int: a24;\n    int: a25;\n    int: a26;\n   \
    \ int: a27;\n    int: a28;\n    int: a29;\n    int: a30;\n    int: a31;\n    int:\
    \ a32;\n    int: a33;\n    int: a34;\n    int: a35;\n    int: a36;\n    int: a37;\n\
    \    int: a38;\n    int: a39;\n    int: a40;\n    int: a41;\n    int", "{\n  \
    \  long? smallest = lst[0];\n    long? second = smallest;\n    foreach(long x,\
    \ lst)\n    {\n        if(x < smallest)\n        {\n            second = smallest;\n\
    \            smallest = x;\n        }\n        else\n        {\n            second\
    \ = x;\n        }\n    }\n    return smallest;\n}", "{\n    int? smallest = lst[0];\n\
    \    int? secondSmallest = lst[1];\n    \n    for (int i = 2; i < lst.size();\
    \ ++i)\n    {\n        if (lst[i] < smallest)\n        {\n            smallest\
    \ = lst[i];\n        }\n        else if (lst[i] < secondSmallest)\n        {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    \n    return smallest;\n\
    }", "{\n    var smallest = lst[0];\n    var smallest_index = 0;\n    \n    for\
    \ (i in 1..lst.length)\n    {\n        if (lst[i] < smallest)\n        {\n   \
    \         smallest = lst[i];\n            smallest_index = i;\n        }\n   \
    \ }\n    \n    if (smallest_index == lst.length - 1)\n    {\n        return null;\n\
    \    }\n    else\n    {\n        return smallest;\n    }\n}", "{\n    int? smallest\
    \ = std.min.index(lst);\n    if (smallest != null)\n        return lst[smallest];\n\
    \    return null;\n}", "{\n    var min: long;\n    var i: long;\n    var j: long;\n\
    \    var k: long;\n    var n: long;\n    var min2: long;\n    var min3: long;\n\
    \    var min4: long;\n    var min5: long;\n    var min6: long;\n    var min7:\
    \ long;\n    var min8: long;\n    var min9: long;\n    var min10: long;\n    var\
    \ min11: long;\n    var min12: long;\n    var min13: long;\n    var min14: long;\n\
    \    var min15: long;\n    var min16: long;\n    var min17: long;\n    var min18:\
    \ long;\n    var min19: long;\n    var min20: long;\n    var min21: long;\n  \
    \  var min22: long;\n    var min23: long;\n    var min24: long;\n    var min25:\
    \ long;\n    var min26: long;\n    var min27: long;\n    var min28: long;\n  \
    \  var min29: long;\n    var min30: long;\n    var min31: long;\n    var min32:\
    \ long;\n    var min33: long;\n    var min34: long;\n    var min35: long;\n  \
    \  var min36: long;\n    var min37: long;\n    var min38: long;\n    var min39:\
    \ long;\n    var min40: long;\n    var min41: long;\n    var min42: long;\n  \
    \  var min43: long;\n    var min44: long;\n    var min45: long;\n    var min46:\
    \ long;\n    var min47: long;\n    var min48: long;\n    var min49: long;\n  \
    \  var min50: long;\n    var min51: long;\n    var min52: long;\n    var min53:\
    \ long;\n    var min54: long;\n    var min55: long;\n    var min56: long;\n  \
    \  var min57: long;\n    var min58: long;\n    var min59: long;\n    var min60:\
    \ long;\n    var min61: long;\n    var min62: long;\n    var min63: long;\n  \
    \  var min64: long;\n    var min65: long;\n    var min66: long;\n    var min67:\
    \ long;\n    var min68: long;\n    var min69: long;\n    var min70: long;\n  \
    \  var min71: ", "{\n    int? smallest = lst[0];\n    int? secondSmallest = lst[1];\n\
    \    \n    if (smallest.is_null && secondSmallest.is_null)\n    {\n        return\
    \ null;\n    }\n    \n    if (smallest.is_null)\n    {\n        return secondSmallest;\n\
    \    }\n    \n    if (secondSmallest.is_null)\n    {\n        return smallest;\n\
    \    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n    {\n   \
    \     return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)\n\
    \    {\n        return null;\n    }\n    \n    if (smallest.is_null && secondSmallest.is_null)",
  "{\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: b;\n    int: c;\n    int: d;\n    int: e;\n    int: f;\n\
    \    int: g;\n    int: h;\n    int: i;\n    int: j;\n    int: k;\n    int: l;\n\
    \    int: m;\n    int: n;\n    int: o;\n    int: p;\n    int: q;\n    int: r;\n\
    \    int: s;\n    int: t;\n    int: u;\n    int: v;\n    int: w;\n    int: x;\n\
    \    int: y;\n    int: z;\n    int: a;\n    int: b;\n    int: c;\n    int: d;\n\
    \    int: e;\n    int: f;\n    int: g;\n    int: h;\n    int: i;\n    int: j;\n\
    \    int: k;\n    int: l;\n    int: m;\n    int: n;\n    int: o;\n    int: p;\n\
    \    int: q;\n    int: r;\n    int: s;\n    int: t;\n    int: u;\n    int: v;\n\
    \    int: w;\n    int: x;\n    int: y;\n    int: z;\n    int: a;\n    int: b;\n\
    \    int: c;\n    int: d;\n    int: e;\n    int: f;\n    int: g;\n    int: h;\n\
    \    int: i;\n    int: j;\n    int: k;\n    int: l;\n    int: m;\n    int: n;\n\
    \    int: o;\n    int: p;\n    int: q;\n    int: r;\n    int: s;\n    int: t;\n\
    \    int: u;\n    int: v;\n    int: w;\n    int: x;\n    int: y;\n    int: z;\n\
    \    int: a;\n    int: "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
