name: HumanEval_87_get_row
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a 2 dimensional\
  \ data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \    >>> get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L,\
  \ 4L, 5L, 1L]], 1L)\n    [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L,\
  \ 5L), tuple(2L, 0L)]\n    >>> get_row([], 1L)\n    []\n    >>> get_row([[], [1L],\
  \ [1L, 2L, 3L]], 3L)\n    [tuple(2L, 2L)]\n    \n*/\nTuple!(long, long)[] get_row(long[][]\
  \ lst, long x) \n"
tests: "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\
  \ == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n\
  \    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L,\
  \ 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L,\
  \ 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L,\
  \ 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L),\
  \ tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]],\
  \ 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L,\
  \ 2L)]);\n}\nvoid main(){}"
completions: ["{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n\
    \    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length]\
    \ = Tuple!(i, j);\n    }), 0..lst.length-1);\n    \n    sort(res);\n    \n   \
    \ return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n         \
    \   res[res.length] = Tuple!(i, j);\n    }), 0 .. lst.length - 1);\n    \n   \
    \ sort(res);\n    \n    return res;\n}", "{\n    long n = lst.length;\n    long\
    \ m = lst[0].length;\n    long[] res = new long[n];\n    for(int i = 0; i < n;\
    \ i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i] = j;\n                res[i + 1]\
    \ = i;\n                return Tuple!(long, long)[](res);\n            }\n   \
    \     }\n    }\n    return Tuple!(long, long)[](res);\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    \n    foreach(i -> foreach(j -> {\n        if (lst[i][j]\
    \ == x) {\n            result ~= Tuple!(i, j);\n        }\n    }), range(0, size(lst)));\n\
    \    \n    sort(result, (a, b) => a.first > b.first ? 1 : a.first < b.first ?\
    \ -1 : 0);\n    sort(result, (a, b) => a.second > b.second ? 1 : a.second < b.second\
    \ ? -1 : 0);\n    \n    return result;\n}", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        if(lst[i].length == x)\n        {\n            for(int j = 0;\
    \ j < lst[i].length; j++)\n            {\n                if(lst[i][j] == x)\n\
    \                {\n                    result.add(Tuple!(i, j));\n          \
    \      }\n            }\n        }\n    }\n    \n    result.sort(function(a, b){return\
    \ a.first > b.first;});\n    result.sort(function(a, b){return a.second > b.second;});\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] res;\n    \n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res = Tuple!(long, long)[Tuple!(0, col), Tuple!(1, col)];\n\
    \                break;\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, descending);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if\
    \ (lst[i][j] == x) \n            res[res.length] = Tuple!(i, j);\n    }), 0 ..\
    \ lst.length - 1);\n    sort(res);\n    sort(res, (a, b) -> -cmp(a.i, b.i));\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(i\
    \ : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n       \
    \ {\n            if(lst[i][j] == x)\n            {\n                res = Tuple!(long,\
    \ long)[](Tuple!(0, i), Tuple!(0, j));\n                break;\n            }\n\
    \        }\n        if(res != null)\n            break;\n    }\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst) \n    {\n        foreach(col: row) \n        {\n            if(col == x)\
    \ \n            {\n                res.push(Tuple!(long, long)((row, col)));\n\
    \            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a, b) =>\
    \ a.first > b.first);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    \n    foreach(row: lst)\n    {\n        foreach(col: row)\n\
    \        {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row, col);\n                break;\n            }\n        }\n     \
    \   if(res != null)\n            break;\n    }\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res;\n    for(int i = 0; i < lst.length; i++){\n   \
    \     if(lst[i][0] == x){\n            Tuple!(long, long)[] temp = new Tuple!(long,\
    \ long)[];\n            for(int j = 0; j < lst[i].length; j++){\n            \
    \    if(lst[i][j] == x){\n                    temp.add(new Tuple!(j, i));\n  \
    \              }\n            }\n            res = temp;\n        }\n    }\n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row::lst)\
    \ \n    {\n        foreach(col::row) \n        {\n            if(col == x) \n\
    \            {\n                res = Tuple!(long, long)[](row, col);\n      \
    \          break;\n            }\n        }\n    }\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.push(Tuple!(i, j));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j\
    \ = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] == x)\n  \
    \          {\n                res.push(Tuple!(i, j));\n            }\n       \
    \ }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst) \n    {\n        foreach(col: row) \n\
    \        {\n            if(col == x) \n            {\n                result.add(Tuple!(long,\
    \ long)(0, col));\n            }\n        }\n    }\n    \n    result.sort(function(a,\
    \ b) \n    {\n        return a.1 < b.1;\n    });\n    \n    result.sort(function(a,\
    \ b) \n    {\n        return a.2 < b.2;\n    });\n    \n    return result;\n}",
  "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst, i: 0) {\n      \
    \  foreach(col: row, j: 0) {\n            if(col == x) {\n                res\
    \ = Tuple!(long, long)[i, j];\n            }\n        }\n    }\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n\
    \            Tuple!(long, long)[] tuple = new Tuple!(long, long)[] {Tuple!(i +\
    \ 1, j + 1)};\n            foreach(k -> {\n                if(lst[i][k] > lst[i][j])\n\
    \                {\n                    Tuple!(long, long)[] tuple2 = new Tuple!(long,\
    \ long)[] {Tuple!(i, k)};\n                    foreach(l -> {\n              \
    \          if(lst[k][l] > lst[i][j])\n                        {\n            \
    \                tuple2.push(Tuple!(l, k));\n                        }\n     \
    \               });\n                    tuple.push(tuple2);\n               \
    \ }\n            });\n            result.push(tuple);\n        }\n    }), range(0,\
    \ lst.length));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] ==\
    \ x)\n        {\n            Tuple!(long, long)[] tuple = new Tuple!(long, long)[]\
    \ {Tuple!(i + 1, j + 1)};\n            foreach(k -> {\n                if(lst[i][k]\
    \ > lst[i][j])\n                {\n                    Tuple!(long, long)[] tuple2\
    \ = new Tuple!(long, long)[] {Tuple!(i, k)};\n                    foreach(l ->\
    \ {\n                        if(lst[k][l] > lst[i][j])\n                     \
    \   {\n                            tuple2.push(Tuple!(l, k));\n              \
    \          }\n                    });\n                    tuple.push(tuple2);\n\
    \                }\n            });\n            result.push(tuple);\n       \
    \ }\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n \
    \       if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] tuple\
    \ = new Tuple!(long, long)[] {Tuple!(i + 1, j + 1)};\n            foreach(k ->\
    \ {\n                if(lst[i][k] > lst[i][j])\n                {\n          \
    \          Tuple!(long, long)[] tuple2 = new Tuple!(long, long)[] {Tuple!(i, k)};\n\
    \                    foreach(l -> {\n                        if(lst[k][l] > lst[i][j])\n\
    \                        {\n                            tuple2.push(Tuple!(l,\
    \ k));\n                        }\n                    });\n                 \
    \   tuple.push(tuple2);\n                }\n            });\n            result.push(tuple);\n\
    \        }\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] tuple\
    \ = new Tuple!(long, long)[] {Tuple!(i + 1, j + 1)};\n            foreach(k ->\
    \ {\n                if(lst[i][k] > lst[i][j])\n                {\n          \
    \          Tuple!(long, long)[] tuple2 = new Tuple!(long, ", "{\n    Tuple!(long,\
    \ long)[] res;\n    \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j\
    \ : 0..lst[i].length-1)\n        {\n            if(lst[i][j] == x)\n         \
    \   {\n                Tuple!(long, long)[] coord = Tuple!(i, j);\n          \
    \      \n                if(coord.x < 0)\n                    coord.x += lst[i].length;\n\
    \                if(coord.y < 0)\n                    coord.y += lst[0].length;\n\
    \                \n                res.push(coord);\n            }\n        }\n\
    \    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> \n        {\n            if(i\
    \ == 0)\n            {\n                foreach(k -> \n                {\n   \
    \                 if(lst[i][j] == x)\n                    {\n                \
    \        res.add((i, j));\n                    }\n                });\n      \
    \      }\n            else\n            {\n                foreach(k -> \n   \
    \             {\n                    if(lst[i][j] == x)\n                    {\n\
    \                        res.add((i, j));\n                    }\n           \
    \     });\n            }\n        }), range(0, lst.length));\n    \n    sort(res);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    foreach(row,lst) \n    {\n        foreach(col,row) \n        {\n\
    \            if(col == x) \n            {\n                res.push(Tuple!(long,\
    \ long)((row,col)));\n            }\n        }\n    }\n    sort(res,fun(x1,x2)\
    \ -> x1.1 > x2.1);\n    sort(res,fun(x1,x2) -> x1.2 > x2.2);\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> \n        {\n            if(i == 0)\n            {\n       \
    \         foreach(k -> \n                {\n                    if(k == 0)\n \
    \                   {\n                        if(lst[i][j] == x)\n          \
    \              {\n                            res.add(new Tuple!(i, j));\n   \
    \                     }\n                    }\n                    else\n   \
    \                 {\n                        if(lst[i][j] > lst[i-1][k])\n   \
    \                     {\n                            res.add(new Tuple!(i, j));\n\
    \                        }\n                    }\n                });\n     \
    \       }\n            else\n            {\n                foreach(k -> \n  \
    \              {\n                    if(k == 0)\n                    {\n    \
    \                    if(lst[i][j] > lst[i-1][k])\n                        {\n\
    \                            res.add(new Tuple!(i, j));\n                    \
    \    }\n                    }\n                    else\n                    {\n\
    \                        if(lst[i][j] > lst[i-1][k])\n                       \
    \ {\n                            res.add(new Tuple!(i, j));\n                \
    \        }\n                    }\n                });\n            }\n      \
    \  }), range(0, lst.length - 1));\n    \n    sort(res);\n    sort(res, (a, b)\
    \ -> a.first > b.first);\n    \n    return res;\n}\n/*", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] == x) {\n            result.push((i, j));\n     \
    \   }\n    }), range(0, lst.length));\n    \n    result.sort(function(a, b) {\n\
    \        if(a[0] == b[0]) {\n            return a[1] - b[1];\n        } else {\n\
    \            return a[0] - b[0];\n        }\n    });\n    \n    result.sort(function(a,\
    \ b) {\n        if(a[1] == b[1]) {\n            return a[0] - b[0];\n        }\
    \ else {\n            return a[1] - b[1];\n        }\n    });\n    \n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n\
    \    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i].length\
    \ == x)\n        {\n            for(int j = 0; j < lst[i].length; j++)\n     \
    \       {\n                if(lst[i][j] == x)\n                {\n           \
    \         ret.add(new Tuple!(i, j));\n                }\n            }\n     \
    \   }\n    }\n    \n    sort(ret, (a, b) -> a.first > b.first ? 1 : a.first <\
    \ b.first ? -1 : 0);\n    sort(ret, (a, b) -> a.second > b.second ? 1 : a.second\
    \ < b.second ? -1 : 0);\n    \n    return ret;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     Tuple!(long, long)[] tmp = new Tuple!(long, long)[];\n        foreach(k\
    \ -> {\n            long r = i / j;\n            long c = i % j;\n           \
    \ long r = r * j + c;\n            long c = r - j;\n            if(r == x)\n \
    \               tmp.add(new Tuple!(r, j));\n        });\n        if(tmp.length\
    \ > 0)\n            res.add(tmp);\n    }), lst);\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n            ret.push((i,\
    \ j));\n        }\n    }), std.range(0, lst.length));\n    \n    foreach(i ->\
    \ foreach(j -> {\n        if(lst[i][j] > x)\n        {\n            ret.push((i,\
    \ j));\n        }\n    }), std.range(0, lst.length));\n    \n    return ret;\n\
    }", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst) \n    {\n \
    \       foreach(col,row) \n        {\n            if(col == x) \n            {\n\
    \                if(res == null) \n                {\n                    res\
    \ = Tuple!(long, long)[](row,col);\n                }\n                else \n\
    \                {\n                    res = Tuple!(long, long)[](row,col);\n\
    \                    foreach(row2,lst) \n                    {\n             \
    \           foreach(col2,row2) \n                        {\n                 \
    \           if(col2 == col) \n                            {\n                \
    \                res = Tuple!(long, long)[](row,col);\n                      \
    \          break;\n                            }\n                        }\n\
    \                    }\n                }\n                break;\n          \
    \  }\n        }\n    }\n    return res;\n}\n/*", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(row: lst, i: 0) \n    {\n\
    \        foreach(col: row, j: 0) \n        {\n            if(col == x) \n    \
    \        {\n                res.push(Tuple!(long, long)(i + 1, j + 1));\n    \
    \        }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a, b) => a.first\
    \ > b.first);\n    sort(res, (a, b) => a.second > b.second);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ for(int i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n        \
    \    for(int j = 0; j < lst[i].length; j++){\n                if(lst[i][j] ==\
    \ x){\n                    res.push(new Tuple!(i, j));\n                }\n  \
    \          }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result.push(Tuple!(i, j));\n         \
    \   }\n        }\n    }\n    \n    result.sort(function(a, b) {\n        if(a.0\
    \ < b.0)\n        {\n            return -1;\n        }\n        if(a.0 > b.0)\n\
    \        {\n            return 1;\n        }\n        return 0;\n    });\n   \
    \ \n    foreach(i : 0..result.length-1)\n    {\n        result.sort(function(a,\
    \ b) {\n            if(a.1 < b.1)\n            {\n                return -1;\n\
    \            }\n            if(a.1 > b.1)\n            {\n                return\
    \ 1;\n            }\n            return 0;\n        });\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x) {\n       \
    \     Tuple!(long, long)[] tuple = new Tuple!(long, long)[] {i, j};\n        \
    \    foreach(k -> {\n                if(lst[i][k] > lst[k][j]) {\n           \
    \         tuple = tuple + new Tuple!(long, long)[] {k, j};\n                }\n\
    \            });\n            res = res + tuple;\n        }\n    }), range(0,\
    \ lst.length));\n    \n    sort(res);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(row,lst)\n    {\n     \
    \   foreach(col,row)\n        {\n            if(col == x)\n            {\n   \
    \             res.push(Tuple!(long, long)((row,col)));\n            }\n      \
    \  }\n    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ 0..lst.length-1);\n    \n    sort(res);\n    sort(res, (a, b) -> {\n       \
    \ if(a.i > b.i)\n            return 1;\n        if(a.i < b.i)\n            return\
    \ -1;\n        return 0;\n    });\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    \n    foreach(row: lst) \n    {\n        foreach(column:\
    \ row) \n        {\n            if(column == x) \n            {\n            \
    \    result ~= Tuple!(row, column);\n            }\n        }\n    }\n    \n \
    \   sort(result);\n    sort(result, (a, b) => a.1 < b.1);\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            for(int j = 0; j < lst[i].length; ++j)\n            {\n         \
    \       res.add((i, j));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a[1] > b[1]);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] ret = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; j++)\n            {\n                ret.add(new Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    return ret;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row, col);\n                break;\n            }\n        }\n    }\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                res[res.length] = Tuple!(i, j);\n            }\n\
    \        }\n    }\n    \n    sort(res);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    \n    foreach(row,lst) \n    {\n        foreach(column,row)\n\
    \        {\n            if(column == x)\n            {\n                result\
    \ ~= Tuple!(row,column);\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, descending);\n    \n    return result;\n}", "{\n    int[] row\
    \ = new int[lst.Length];\n    int[] col = new int[lst.Length];\n    for(int i\
    \ = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i] = i;\n\
    \    }\n    Array.Sort(row, col, (x, y) => Comparer<long>.Default.Compare(x, y));\n\
    \    Array.Sort(row, col, (x, y) => Comparer<long>.Default.Compare(y, x));\n \
    \   Tuple!(long, long)[] res = new Tuple!(long, long)[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(row[i] == x)\n        {\n   \
    \         res[i] = Tuple!(long, long)[i, col[i]];\n        }\n    }\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst) {\n\
    \        foreach(col: row) {\n            if(col == x) {\n                res\
    \ = Tuple!(long, long)[](row, col);\n            }\n        }\n    }\n    \n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row:\
    \ lst)\n    {\n        foreach(column: row)\n        {\n            if(column\
    \ == x)\n            {\n                result ~= Tuple!(row, column);\n     \
    \       }\n        }\n    }\n    \n    result.sort(by=byRow);\n    result.sort(by=byColumn);\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                res.push(Tuple!(i, j));\n            }\n     \
    \   }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[];\n        foreach(k -> {\n          \
    \  Tuple!(long, long)[] col = new Tuple!(long, long)[];\n            foreach(m\
    \ -> {\n                Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n\
    \                coord.x = i;\n                coord.y = j;\n                col.x\
    \ = k;\n                col.y = m;\n                row.push(coord);\n       \
    \     });\n            row.push(col);\n        });\n        res.push(row);\n \
    \   }));\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = new Tuple!(long, long)[];\n            foreach(m -> {\n      \
    \          Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n          \
    \      coord.x = i;\n                coord.y = j;\n                col.x = k;\n\
    \                col.y = m;\n                row.push(coord);\n            });\n\
    \            row.push(col);\n        });\n        res.push(row);\n    }));\n \
    \   \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long, long)[]\
    \ col = new Tuple!(long, long)[];\n            foreach(m -> {\n              \
    \  Tuple!(long, long)[] coord = new Tuple!(long, long)[];\n                coord.x\
    \ = i;\n                coord.y = j;\n                col.x = k;\n           \
    \     col.y = m;\n                row.push(coord);\n            });\n        \
    \    row.push(col);\n        });\n        res.push(row);\n    }));\n    \n   \
    \ foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long,\
    \ long)[];\n        foreach(k -> {\n            Tuple!(long, long)[] col = new\
    \ Tuple!(long, long)[];\n            foreach(m -> {\n                Tuple!(long,\
    \ long)[] coord = new Tuple!(long, long)[];\n                coord.x = i;\n  \
    \              coord.y = j;\n                col.x = k;\n                col.y\
    \ = m;\n                row.push(coord);\n            });\n            row.push(col);\n\
    \        });\n        res.push(row);\n    }));\n    \n    foreach(i -> foreach(j\
    \ -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n       \
    \ foreach(k -> ", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x) {\n       \
    \     Tuple!(long, long)[] row = new Tuple!(long, long)[];\n            foreach(k\
    \ -> {\n                if(lst[i][k] == x) {\n                    row.add(k);\n\
    \                }\n            });\n            res.add(row);\n        }\n  \
    \  }), range(0, lst.length));\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n \
    \       if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ 0..lst.length-1);\n    sort(res);\n    return res;\n}\n/*", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i] == x)\n        {\n            for(int j = 0;\
    \ j < lst[i].length; j++)\n            {\n                res.add((i, j));\n \
    \           }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row::lst) \n    {\n        foreach(col::row)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[Tuple!(0, col), Tuple!(1, row)];\n            }\n       \
    \ }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n\
    \            res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n    \n\
    \    sort(res);\n    sort(res, (a, b) -> {\n        if(a.i > b.i)\n          \
    \  return 1;\n        if(a.i < b.i)\n            return -1;\n        return 0;\n\
    \    });\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\
    \ {\n            Tuple!(long, long)[] coord = new Tuple!(long, long)[] {i, j};\n\
    \            foreach(k -> {\n                if(lst[i][k] > lst[i][k+1]) {\n \
    \                   Tuple!(long, long)[] coord2 = new Tuple!(long, long)[] {i,\
    \ k};\n                    foreach(l -> {\n                        if(lst[k][l]\
    \ > lst[k+1][l]) {\n                            Tuple!(long, long)[] coord3 =\
    \ new Tuple!(long, long)[] {k, l};\n                            foreach(m -> {\n\
    \                                if(lst[m][j] > lst[m+1][j]) {\n             \
    \                       coord = coord.concat(coord2);\n                      \
    \              coord2 = coord3;\n                                }\n         \
    \                       else {\n                                    coord = coord.concat(coord3);\n\
    \                                    coord3 = coord2;\n                      \
    \          }\n                            });\n                        }\n   \
    \                     else {\n                            coord = coord.concat(coord2);\n\
    \                            coord2 = coord;\n                        }\n    \
    \                });\n                }\n                else {\n            \
    \        coord = coord.concat(coord2);\n                    coord2 = coord;\n\
    \                }\n            });\n            res = res.concat(coord);\n  \
    \      }\n    }));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x) {\n            Tuple!(long, long)[] coord = new Tuple!(long, long)[] {i,\
    \ j};\n            foreach(k -> {\n                if(lst[i][k] > lst[i][k+1])\
    \ {\n                    Tuple!(long, long)[] coord2 = new Tuple!(long, long)[]\
    \ {i, k};\n                    foreach(l -> {\n                        if(lst[k][l]\
    \ > lst[k+1][l]) {\n                            Tuple!(long, long)[] coord3 =\
    \ new Tuple!(long, long)[] {k, l};\n                            foreach(m -> {\n\
    \                                if(lst[m][j] > lst[m+1][j]) {\n             \
    \                       coord = coord.concat(coord2);\n                      \
    \              coord2 = coord3;\n                                }\n         \
    \                       else {\n                                    coord = coord.concat(coord3);\n\
    \                                    coord3 = coord2;\n                      \
    \          }\n                            });\n                        }\n   \
    \                     else {\n                            coord = coord.concat(coord2);\n\
    \                            coord2 = coord;\n                        }\n    \
    \                });\n                }\n                else {\n            \
    \        coord = coord.concat(coord2);\n                    coord2 = coord;\n\
    \                }\n            });\n            res = res.concat(coord);\n  \
    \      }\n    }));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x) {\n            Tuple!(long, long)[] coord = new Tuple!(long, ", "{\n \
    \   Tuple!(long, long)[] res;\n    \n    foreach(row::lst) \n    {\n        foreach(col::row)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[Tuple!(0, row), Tuple!(1, col)];\n                break;\n\
    \            }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x) {\n            Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[];\n            foreach(k -> {\n                if(lst[i][k]\
    \ == x) {\n                    row.add(k);\n                }\n            });\n\
    \            res.add(row);\n        }\n    }), range(0, lst.length));\n    \n\
    \    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x) {\n            Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[];\n            foreach(k -> {\n      \
    \          if(lst[i][k] == x) {\n                    row.add(k);\n           \
    \     }\n            });\n            res.add(row);\n        }\n    }), range(0,\
    \ lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] ret\
    \ = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        if(lst[i][0] == x)\n        {\n            for(int j = 0; j < lst[i].length;\
    \ j++)\n            {\n                if(lst[i][j] == x)\n                {\n\
    \                    ret.push_back(new Tuple!(i, j));\n                }\n   \
    \         }\n        }\n    }\n    return ret;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x) {\n            Tuple!(long, long)[] t = new Tuple!(long, long)[];\n  \
    \          t[0] = i;\n            t[1] = j;\n            res.add(t);\n       \
    \ }\n    }), std.range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n\
    \        if(lst[i][j] > x) {\n            Tuple!(long, long)[] t = new Tuple!(long,\
    \ long)[];\n            t[0] = i;\n            t[1] = j;\n            res.add(t);\n\
    \        }\n    }), std.range(0, lst[0].length));\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst){\n        foreach(col,row){\n\
    \            if(col == x){\n                res = Tuple!(long, long)[Tuple!(long,\
    \ long)[row, col]];\n            }\n        }\n    }\n    sort(res);\n    sort(res,1,-1);\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n         \
    \   res[res.length] = Tuple!(i, j);\n    }), range(0, lst.length));\n    \n  \
    \  sort(res, (a, b) -> {\n        if(a.i > b.i)\n            return 1;\n     \
    \   if(a.i < b.i)\n            return -1;\n        return 0;\n    });\n    \n\
    \    sort(res, (a, b) -> {\n        if(a.c > b.c)\n            return 1;\n   \
    \     if(a.c < b.c)\n            return -1;\n        return 0;\n    });\n    \n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[];\n        foreach(k -> {\n            long r = j;\n   \
    \         long c = i;\n            long d = k;\n            \n            if(r\
    \ == x)\n                row.push((r, c));\n            \n            if(c ==\
    \ x)\n                row.push((r, d));\n            \n            if(r == x &&\
    \ c == x)\n                row.push((r, d));\n            \n            if(r ==\
    \ x && c == x && d == x)\n                row.push((r, d));\n            \n  \
    \          if(r == x && c == x && d == x && k == x)\n                row.push((r,\
    \ d));\n            \n            if(r == x && c == x && d == x && k == x && l\
    \ == x)\n                row.push((r, d));\n            \n            if(r ==\
    \ x && c == x && d == x && k == x && l == x && m == x)\n                row.push((r,\
    \ d));\n            \n            if(r == x && c == x && d == x && k == x && l\
    \ == x && m == x && n == x)\n                row.push((r, d));\n            \n\
    \            if(r == x && c == x && d == x && k == x && l == x && m == x && n\
    \ == x && o == x)\n                row.push((r, d));\n            \n         \
    \   if(r == x && c == x && d == x && k == x && l == x && m == x && n == x && o\
    \ == x && p == x)\n                row.push((r, d));\n            \n         \
    \   if(r == x && c == x && d == x && k == x && l == x && m == x && n == x && o\
    \ == x && p == x && q == x)\n                row.push((r, d));\n            \n\
    \            if(r == x && c == x && d == x && k == x && l == x && m == x && n\
    \ == x && o == x && p == x && q == x && r == x)\n                row.push((r,\
    \ d));\n            \n            if(r == x && c == x && d == x && k == x && l\
    \ == x && m == x && n == x && o == x && p == x && q == x && r == x && s == x)\n\
    \                row.push((r, d));\n            \n", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(i : 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res\
    \ = Tuple!(long, long)[]((i, j), Tuple!(long, long)((i, j)));\n            }\n\
    \        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row,lst) {\n        foreach(col,row) {\n            if(col == x)\
    \ {\n                res = Tuple!(long, long)[](row,col);\n            }\n   \
    \     }\n    }\n    \n    foreach(row,lst) {\n        foreach(col,row) {\n   \
    \         if(col != x) {\n                res = Tuple!(long, long)[](row,col);\n\
    \            }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if (col == x) \n            {\n                res\
    \ = Tuple!(long, long)[](row, col);\n            }\n        }\n    }\n    \n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n   \
    \     {\n            Tuple!(long, long)[] tt = new Tuple!(long, long)[];\n   \
    \         tt.push((i, j));\n            res.push(tt);\n        }\n    }), std.range(0,\
    \ lst.length));\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ > x)\n        {\n            Tuple!(long, long)[] tt = new Tuple!(long, long)[];\n\
    \            tt.push((i, j));\n            res.push(tt);\n        }\n    }), std.range(0,\
    \ lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(row,lst) {\n        foreach(col,row) {\n            if(col\
    \ == x) {\n                res = Tuple!(long, long)[](row, col);\n           \
    \ }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n\
    \            result = [(i, j)];\n        }\n    }), range(0, lst.len));\n    \n\
    \    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n    \
    \        result = [(i, j)];\n        }\n    }), range(1, lst.len));\n    \n  \
    \  foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n      \
    \      result = [(i, j)];\n        }\n    }), range(2, lst.len));\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n            result\
    \ = [(i, j)];\n        }\n    }), range(3, lst.len));\n    \n    foreach(i ->\
    \ foreach(j -> {\n        if(lst[i][j] == x)\n        {\n            result =\
    \ [(i, j)];\n        }\n    }), range(4, lst.len));\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] == x)\n        {\n            result = [(i, j)];\n\
    \        }\n    }), range(5, lst.len));\n    \n    foreach(i -> foreach(j -> {\n\
    \        if(lst[i][j] == x)\n        {\n            result = [(i, j)];\n     \
    \   }\n    }), range(6, lst.len));\n    \n    foreach(i -> foreach(j -> {\n  \
    \      if(lst[i][j] == x)\n        {\n            result = [(i, j)];\n       \
    \ }\n    }), range(7, lst.len));\n    \n    foreach(i -> foreach(j -> {\n    \
    \    if(lst[i][j] == x)\n        {\n            result = [(i, j)];\n        }\n\
    \    }), range(8, lst.len));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j]\
    \ == x)\n        {\n            result = [(i, j)];\n        }\n    }), range(9,\
    \ lst.len));\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n\
    \        {\n            result = [(i, j)];\n        }\n    }), range(10, lst.len));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n\
    \            result = [(i, j)];\n        }\n    }), range(11, lst.len));\n   \
    \ \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n \
    \           result = [(i, j)];\n        }\n    }), range(12, lst.len));\n    \n\
    \    foreach(i -> foreach(j ", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j;\n    Tuple!(long, long)[] res;\n    \n    for(i = 0; i < n; i++)\
    \ {\n        for(j = 0; j < m; j++) {\n            if(lst[i][j] == x) {\n    \
    \            res[res.length] = Tuple!(i, j);\n            }\n        }\n    }\n\
    \    \n    sort(res, (a, b) => a.first > b.first);\n    sort(res, (a, b) => a.second\
    \ > b.second);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[];\n    \n    foreach(row: lst, i: int)\n    {\n  \
    \      foreach(col: row, j: int)\n        {\n            if(col == x)\n      \
    \      {\n                result.add(Tuple!(i, j));\n            }\n        }\n\
    \    }\n    \n    sort!(result, (a, b) => (a.1 < b.1) || (a.1 == b.1 && b.1 <\
    \ a.1));\n    sort!(result, (a, b) => (a.2 < b.2) || (a.2 == b.2 && b.2 < a.2));\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] result = null;\n \
    \   foreach(row: lst) {\n        foreach(col: row) {\n            if(col == x)\
    \ {\n                result = Tuple!(long, long)[](row, col);\n              \
    \  break;\n            }\n        }\n        if(result != null) break;\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n         \
    \   res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n    \n    sort(res);\n\
    \    sort(res, (a, b) -> {\n        if(a.first < b.first)\n            return\
    \ -1;\n        if(a.first > b.first)\n            return 1;\n        if(a.second\
    \ < b.second)\n            return -1;\n        if(a.second > b.second)\n     \
    \       return 1;\n        return 0;\n    });\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = null;\n    foreach(row::lst) \n    {\n       \
    \ foreach(col::row) \n        {\n            if(col == x) \n            {\n  \
    \              res = Tuple!(long, long)[](row, col);\n                break;\n\
    \            }\n        }\n        if(res != null) break;\n    }\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n           \
    \ Tuple!(long, long)[] tt = new Tuple!(long, long)[];\n            tt.push((i,\
    \ j));\n            res.push(tt);\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n   \
    \     {\n            Tuple!(long, long)[] tt = new Tuple!(long, long)[];\n   \
    \         tt.push((i, j));\n            res.push(tt);\n        }\n    }), range(0,\
    \ lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n       \
    \ if(lst[i][j] == x) {\n            res[res.length] = Tuple!(i, j);\n        }\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] > x) {\n            res[res.length] = Tuple!(i, j);\n       \
    \ }\n    }), range(1, lst.length));\n    \n    foreach(i -> foreach(j -> {\n \
    \       if(lst[i][j] < x) {\n            res[res.length] = Tuple!(i, j);\n   \
    \     }\n    }), range(2, lst.length));\n    \n    foreach(i -> foreach(j -> {\n\
    \        if(lst[i][j] == x) {\n            res[res.length] = Tuple!(i, j);\n \
    \       }\n    }), range(3, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] > x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(4, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] < x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(5, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(6, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] > x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(7, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] < x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(8, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(9, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] > x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(10, lst.length));\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] < x) {\n            res[res.length] = Tuple!(i, j);\n\
    \        }\n    }), range(11, lst.length));\n    \n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] == x) {", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[];\n    for(int i = 0; i < lst.length; ++i)\n    {\n    \
    \    if(lst[i] == x)\n        {\n            for(int j = 0; j < lst[i].length;\
    \ ++j)\n            {\n                res[lst[i].length * i + j] = Tuple!(long,\
    \ long)((int)i, (int)j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n           \
    \ Tuple!(long, long)[] tuple = new Tuple!(long, long)[] {i, j};\n            foreach(k\
    \ -> foreach(l -> \n            {\n                if(lst[i][k] == x && lst[k][j]\
    \ == x)\n                {\n                    tuple.push(Tuple!(long, long)[]\
    \ {k, l});\n                }\n            }));\n            res.push(tuple);\n\
    \        }\n    }));\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] tuple = new Tuple!(long,\
    \ long)[] {i, j};\n            foreach(k -> foreach(l -> \n            {\n   \
    \             if(lst[i][k] == x && lst[k][j] == x)\n                {\n      \
    \              tuple.push(Tuple!(long, long)[] {l, k});\n                }\n \
    \           }));\n            res.push(tuple);\n        }\n    }));\n    \n  \
    \  foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n\
    \            Tuple!(long, long)[] tuple = new Tuple!(long, long)[] {i, j};\n \
    \           foreach(k -> foreach(l -> \n            {\n                if(lst[i][k]\
    \ == x && lst[k][j] == x)\n                {\n                    tuple.push(Tuple!(long,\
    \ long)[] {j, l});\n                }\n            }));\n            res.push(tuple);\n\
    \        }\n    }));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ 0 .. lst.length - 1);\n    \n    return res;\n}", "{\n    int[] row = new int[lst.Length];\n\
    \    int[] col = new int[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n\
    \    {\n        row[i] = i;\n        col[i] = i;\n    }\n    Array.Sort(row, col,\
    \ Comparer<int>.Create((x, y) => { return lst[x].CompareTo(lst[y]); }));\n   \
    \ Array.Sort(col, row, Comparer<int>.Create((x, y) => { return lst[y].CompareTo(lst[x]);\
    \ }));\n    List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n   \
    \ for(int i = 0; i < row.Length; i++)\n    {\n        res.Add(new Tuple<long,\
    \ long>(row[i], col[i]));\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row: lst) \n    {\n        foreach(col: row) \n   \
    \     {\n            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row, col);\n                break;\n            }\n        }\n     \
    \   if(res != null) break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(i, row) \n    {\n        foreach(j,\
    \ col) \n        {\n            if(row[j] == x)\n            {\n             \
    \   res[res.length] = Tuple!(i, j);\n            }\n        }\n    }\n    \n \
    \   foreach(tuple, tuple2) \n    {\n        foreach(tuple3, tuple4) \n       \
    \ {\n            if(tuple2.first == tuple4.first && tuple2.second == tuple4.second)\n\
    \            {\n                res[res.length] = tuple;\n            }\n    \
    \    }\n    }\n    \n    foreach(tuple, tuple2) \n    {\n        foreach(tuple3,\
    \ tuple4) \n        {\n            if(tuple2.first == tuple4.first && tuple2.second\
    \ > tuple4.second)\n            {\n                res[res.length] = tuple;\n\
    \            }\n        }\n    }\n    \n    foreach(tuple, tuple2) \n    {\n \
    \       foreach(tuple3, tuple4) \n        {\n            if(tuple2.first == tuple4.first\
    \ && tuple2.second < tuple4.second)\n            {\n                res[res.length]\
    \ = tuple;\n            }\n        }\n    }\n    \n    return res;\n}\n/*", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(row,lst)\
    \ \n    {\n        foreach(col,row) \n        {\n            if(col == x) \n \
    \           {\n                res.push(Tuple!(long, long)((row,col)));\n    \
    \        }\n        }\n    }\n    sort(res);\n    sort(res,true);\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n   \
    \     {\n            for(int j = 0; j < lst[i].length; ++j)\n            {\n \
    \               res.add((i, j));\n            }\n        }\n    }\n    \n    sort(res,\
    \ (a, b) => (a.first > b.first) ? 1 : -1);\n    sort(res, (a, b) => (a.second\
    \ > b.second) ? 1 : -1);\n    return res;\n}", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[];\n    foreach(row: lst)\n    {\n        foreach(column:\
    \ row)\n        {\n            if(column == x)\n            {\n              \
    \  result.push(Tuple!(long, long)((row), column));\n            }\n        }\n\
    \    }\n    sort(result);\n    sort(result, (a, b) => a.first > b.first);\n  \
    \  return result;\n}", "{\n    Tuple!(long, long)[] result = null;\n    \n   \
    \ foreach(row: lst)\n    {\n        foreach(column: row)\n        {\n        \
    \    if(column == x)\n            {\n                if(result == null)\n    \
    \            {\n                    result = Tuple!(long, long)[](row, column);\n\
    \                }\n                else\n                {\n                \
    \    result = Tuple!(long, long)[](row, column);\n                }\n        \
    \    }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ ret = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n        {\n            ret.add(new Tuple!(i, j));\n\
    \        }\n    }), 0);\n    \n    sort(ret, (x, y) -> {\n        if(x._1 == y._1)\n\
    \        {\n            return x._2 < y._2;\n        }\n        else\n       \
    \ {\n            return x._1 < y._1;\n        }\n    });\n    \n    sort(ret,\
    \ (x, y) -> {\n        if(x._1 == y._1)\n        {\n            return x._2 <\
    \ y._2;\n        }\n        else\n        {\n            return x._1 < y._1;\n\
    \        }\n    });\n    \n    return ret;\n}", "{\n    int[] row = new int[lst.length];\n\
    \    int[] col = new int[lst[0].length];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        row[i] = i;\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n            col[j] = j;\n    }\n    \n    Arrays.sort(row);\n    Arrays.sort(col);\n\
    \    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n  \
    \  \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j\
    \ < lst[i].length; j++)\n        {\n            if(col[j] == x)\n            \
    \    res[i] = Tuple!(row[i], j);\n        }\n    }\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i -> foreach(j -> {\n     \
    \   if(lst[i][j] == x)\n            res = [(i, j)];\n    }), range(0, lst.length));\n\
    \    \n    sort(res, (i, j) => (lst[i][j].compareTo(x)));\n    sort(res, (i, j)\
    \ => (lst[j][i].compareTo(x)));\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                res.add(new Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a,\
    \ b) -> a.first > b.first);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n\
    \        if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] row =\
    \ new Tuple!(long, long)[];\n            foreach(k -> \n            {\n      \
    \          if(lst[i][k] == x)\n                {\n                    row.add(k);\n\
    \                }\n            });\n            res.add(row);\n        }\n  \
    \  }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> \n    {\n \
    \       if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] row =\
    \ new Tuple!(long, long)[];\n            foreach(k -> \n            {\n      \
    \          if(lst[i][k] == x)\n                {\n                    row.add(k);\n\
    \                }\n            });\n            res.add(row);\n        }\n  \
    \  }), range(0, lst[0].length));\n    \n    return res;\n}", "{\n    long n =\
    \ lst.length;\n    long m = lst[0].length;\n    long i, j;\n    \n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                res[i] = new Tuple!(i, j);\n            \
    \    break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = m-1; j >= 0; j--)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res[i] = new Tuple!(i, j);\n          \
    \      break;\n            }\n        }\n    }\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res;\n    foreach(i -> foreach(j -> res = append(res,\
    \ Tuple!(i, j), Tuple!(0, 0))), lst);\n    sort(res);\n    sort(res, (a, b) ->\
    \ b._1 - a._1);\n    sort(res, (a, b) -> b._2 - a._2);\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = null;\n    foreach(row: lst) \n    {\n       \
    \ foreach(col: row) \n        {\n            if(col == x) \n            {\n  \
    \              res = Tuple!(long, long)[](row, col);\n                break;\n\
    \            }\n        }\n        if(res != null) break;\n    }\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = null;\n    foreach(i -> foreach(j -> {\n\
    \        if(lst[i][j] == x)\n            res = Tuple!(long, long)!(x, i);\n  \
    \  }), 0..lst.length-1);\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res.add((i, j));\n            }\n    \
    \    }\n    }\n    \n    sort(res);\n    sort(res, true);\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n\
    \        foreach(k -> {\n            long r = i;\n            long c = j;\n  \
    \          long k = k;\n            \n            if(r == x && c == x)\n     \
    \       {\n                row.push((k, k));\n            }\n            \n  \
    \          if(r > x && c > x)\n            {\n                row.push((k, k));\n\
    \            }\n            \n            if(r < x && c < x)\n            {\n\
    \                row.push((k, k));\n            }\n            \n            if(r\
    \ == x && c == x)\n            {\n                row.push((k, k));\n        \
    \    }\n            \n            if(r > x && c > x)\n            {\n        \
    \        row.push((k, k));\n            }\n            \n            if(r < x\
    \ && c < x)\n            {\n                row.push((k, k));\n            }\n\
    \            \n            if(r == x && c == x)\n            {\n             \
    \   row.push((k, k));\n            }\n            \n            if(r > x && c\
    \ > x)\n            {\n                row.push((k, k));\n            }\n    \
    \        \n            if(r < x && c < x)\n            {\n                row.push((k,\
    \ k));\n            }\n            \n            if(r == x && c == x)\n      \
    \      {\n                row.push((k, k));\n            }\n            \n   \
    \         if(r > x && c > x)\n            {\n                row.push((k, k));\n\
    \            }\n            \n            if(r < x && c < x)\n            {\n\
    \                row.push((k, k));\n            }\n            \n            if(r\
    \ == x && c == x)\n            {\n                row.push((k, k));\n        \
    \    }\n            \n            if(r > x && c > x)\n            {\n        \
    \        row.push((k, k));\n            }\n            \n            if(r < x\
    \ && c < x)\n            {\n                row.push((k, k));\n            }\n\
    \            \n            if(r == x && c == x)\n            {\n             \
    \   row.push((k, k));\n            }\n            \n            if(r > x && c\
    \ > x)\n            {\n                row.push((k, k));\n            }\n    \
    \        \n            if(r < x && c < x)\n            {\n                row.push((k,\
    \ k));\n            }\n            \n            if(r == x && c == x)\n      \
    \      {\n                row.push((k, k));", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(row::lst) {\n        foreach(col::row) {\n            if(col\
    \ == x) {\n                res = Tuple!(long, long)[](row, col);\n           \
    \ }\n        }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n   \
    \ long m = lst[0].length;\n    long i, j;\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[n];\n    \n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n                res[i]\
    \ = Tuple!(long, long)[i, j];\n                break;\n            }\n       \
    \ }\n    }\n    \n    sort(res, (a, b) => a.first > b.first);\n    sort(res, (a,\
    \ b) => a.second > b.second);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    \n    foreach(row: lst) \n    {\n        foreach(col:\
    \ row) \n        {\n            if(col == x) \n            {\n               \
    \ res = Tuple!(long, long)[](row, col);\n                break;\n            }\n\
    \        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n       \
    \ if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }), 0 ..\
    \ lst.length - 1);\n    \n    sort(res);\n    sort(res, (a, b) -> Tuple!(b._1,\
    \ a._2));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] result = new\
    \ Tuple!(long, long)[];\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                result.push(Tuple!(long,\
    \ long)((row,col)));\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, 1, result.length - 1);\n    \n    return result;\n}", "{\n \
    \   Tuple!(long, long)[] res = null;\n    foreach(row::lst) \n    {\n        foreach(col::row)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[](row, col);\n            }\n        }\n    }\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row: lst)\n\
    \    {\n        foreach(column: row)\n        {\n            if(column == x)\n\
    \            {\n                result.push(Tuple!(long, long)((row), column));\n\
    \            }\n        }\n    }\n    \n    sort(result);\n    sort(result, (a,\
    \ b) => a.first > b.first);\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] ret = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        for(int j = 0; j < lst[i].length; ++j)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                ret.add(new Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(ret, (a, b) -> a.first\
    \ > b.first ? 1 : -1);\n    sort(ret, (a, b) -> a.second > b.second ? 1 : -1);\n\
    \    \n    return ret;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ temp = new Tuple!(long, long)[];\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] temp2 = new Tuple!(long, long)[];\n            foreach(l -> {\n    \
    \            Tuple!(long, long)[] temp3 = new Tuple!(long, long)[];\n        \
    \        foreach(m -> {\n                    Tuple!(long, long)[] temp4 = new\
    \ Tuple!(long, long)[];\n                    foreach(n -> {\n                \
    \        Tuple!(long, long)[] temp5 = new Tuple!(long, long)[];\n            \
    \            foreach(o -> {\n                            Tuple!(long, long)[]\
    \ temp6 = new Tuple!(long, long)[];\n                            foreach(p ->\
    \ {\n                                Tuple!(long, long)[] temp7 = new Tuple!(long,\
    \ long)[];\n                                foreach(q -> {\n                 \
    \                   Tuple!(long, long)[] temp8 = new Tuple!(long, long)[];\n \
    \                                   foreach(r -> {\n                         \
    \               Tuple!(long, long)[] temp9 = new Tuple!(long, long)[];\n     \
    \                                   foreach(s -> {\n                         \
    \                   Tuple!(long, long)[] temp10 = new Tuple!(long, long)[];\n\
    \                                            foreach(t -> {\n                \
    \                                Tuple!(long, long)[] temp11 = new Tuple!(long,\
    \ long)[];\n                                                foreach(u -> {\n \
    \                                                   Tuple!(long, long)[] temp12\
    \ = new Tuple!(long, long)[];\n                                              \
    \      foreach(v -> {\n                                                      \
    \  Tuple!(long, long)[] temp13 = new Tuple!(long, long)[];\n                 \
    \                                       foreach(w -> {\n                     \
    \                                       Tuple!(long, long)[] temp14 = new Tuple!(long,\
    \ long)[];\n                                                            foreach(x\
    \ -> {\n                                                                Tuple!(long,\
    \ long)[] temp15 = new Tuple!(long, long)[];\n                               \
    \                                 foreach(y -> {\n                           \
    \                                         Tuple!(long, long)[] temp16 = new Tuple!(long,\
    \ long)[];\n                                                                 \
    \   foreach(z -> {\n                                                         \
    \               Tuple!(long, long)[] temp17 = new Tuple!(long, long)[];\n    \
    \                                                                    foreach(a\
    \ -> {\n                                                                     \
    \       Tuple!(long, long)[] temp18 = new Tuple!(long, long)[];\n            \
    \                                                                foreach(b ->\
    \ {\n                                                                        \
    \        Tuple!(long, long)[] temp19 = new Tuple!(long, long)[];\n           \
    \                                                                     foreach(c\
    \ -> {\n                                                                     \
    \               Tuple!(long, long)[] temp20 = new Tuple!(long, long)[];\n    \
    \                                                                            \
    \    foreach(d -> {\n                                                        \
    \                                Tuple!(long, long)[] temp21 = new Tuple!(long,\
    \ long)[];\n                                                                 \
    \                       foreach(e -> {\n                                     \
    \                                                       Tuple!(long, long)[] temp22\
    \ = new Tuple!(long, ", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    foreach(row: lst)\n    {\n        foreach(col: row)\n        {\n        \
    \    if(col == x)\n            {\n                res.push(Tuple!(long, long)((row),\
    \ col));\n            }\n        }\n    }\n    sort(res);\n    sort(res, (a, b)\
    \ => a.first > b.first);\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n \
    \       if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] tt = new\
    \ Tuple!(long, long)[];\n            tt[0] = i;\n            tt[1] = j;\n    \
    \        res.add(tt);\n        }\n    }), range(0, lst.Length));\n    \n    foreach(i\
    \ -> foreach(j -> \n    {\n        if(lst[i][j] > x)\n        {\n            Tuple!(long,\
    \ long)[] tt = new Tuple!(long, long)[];\n            tt[0] = i;\n           \
    \ tt[1] = j;\n            res.add(tt);\n        }\n    }), range(1, lst.Length));\n\
    \    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] < x)\n    \
    \    {\n            Tuple!(long, long)[] tt = new Tuple!(long, long)[];\n    \
    \        tt[0] = i;\n            tt[1] = j;\n            res.add(tt);\n      \
    \  }\n    }), range(0, lst.Length - 1));\n    \n    return res;\n}\n/*", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n       \
    \     for(int j = 0; j < lst[i].length; ++j)\n            {\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    sort(res);\n    sort(res, (a, b)\
    \ -> a.first > b.first ? 1 : -1);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    foreach(row: lst)\n    {\n   \
    \     foreach(column: row)\n        {\n            if(column == x)\n         \
    \   {\n                result.add(Tuple!(long, long)((row, column)));\n      \
    \      }\n        }\n    }\n    \n    result.sort(compareByDescending);\n    \n\
    \    foreach(row: result)\n    {\n        foreach(column: row)\n        {\n  \
    \          foreach(coord: column)\n            {\n                coord.swap();\n\
    \            }\n        }\n    }\n    \n    result.sort(compareByDescending);\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row::lst)\
    \ \n    {\n        foreach(col::row) \n        {\n            if(col == x) \n\
    \            {\n                res = Tuple!(long, long)[](row, col);\n      \
    \          break;\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), 0..lst.length-1);\n    \n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    foreach(row: lst)\
    \ \n    {\n        foreach(col: row) \n        {\n            if(col == x) \n\
    \            {\n                result.push(Tuple!(long, long)((row, col)));\n\
    \            }\n        }\n    }\n    result.sort(compareByDescending);\n    result.sort(compareByDescending);\n\
    \    return result;\n}\n/*", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                res.push(Tuple!(i, j));\n            }\n     \
    \   }\n    }\n    \n    sort(res);\n    sort(res, (a, b) => a.first > b.first);\n\
    \    sort(res, (a, b) => a.second > b.second);\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    \n    foreach(row: lst)\n    {\n      \
    \  foreach(column: row)\n        {\n            if(column == x)\n            {\n\
    \                foreach(coord: Tuple!(long, long)[])\n                {\n   \
    \                 if(coord.0 == row)\n                    {\n                \
    \        result.push(coord);\n                    }\n                }\n     \
    \       }\n        }\n    }\n    \n    foreach(coord: Tuple!(long, long)[])\n\
    \    {\n        if(coord.0 > result.length)\n        {\n            result.push(coord);\n\
    \        }\n    }\n    \n    foreach(coord: Tuple!(long, long)[])\n    {\n   \
    \     if(coord.1 < result.length)\n        {\n            int row = coord.0;\n\
    \            int column = coord.1;\n            \n            foreach(row: lst)\n\
    \            {\n                foreach(column: row)\n                {\n    \
    \                if(column == row)\n                    {\n                  \
    \      result.push(coord);\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    foreach(coord: Tuple!(long, long)[])\n  \
    \  {\n        if(coord.1 < result.length)\n        {\n            int row = coord.0;\n\
    \            int column = coord.1;\n            \n            foreach(row: lst)\n\
    \            {\n                foreach(column: row)\n                {\n    \
    \                if(column == row)\n                    {\n                  \
    \      result.push(coord);\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    foreach(coord: Tuple!(long, long)[])\n  \
    \  {\n        if(coord.1 < result.length)\n        {\n            int row = coord.0;\n\
    \            int column = coord.1;\n            \n            foreach(row: lst)\n\
    \            {\n                foreach(column: row)\n                {\n    \
    \                if(column == row)\n                    {\n                  \
    \      result.push(coord);\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    foreach(coord: Tuple!(long, long)[])\n  \
    \  {\n        if(coord.1 < result.length)\n        {\n            int row = coord.0;\n\
    \            int column = coord.1;\n            \n            foreach(row: lst)\n\
    \            {\n                foreach(column: row)\n                {\n    \
    \                if(column == row)\n                    {\n                  \
    \      result.push(coord);\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    foreach(coord: Tuple!(long, long)[])\n  \
    \  {\n        if(coord.1 < result.length)\n        {\n            int row = coord.0;\n\
    \            int column = coord.1;\n            \n            foreach(row: lst)\n\
    \            {\n                foreach(column: row)\n                {\n    \
    \                if(column == row)\n                    {\n                  \
    \      result.push(", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(i\
    \ -> foreach(j -> {\n        Tuple!(long, long)[] row;\n        foreach(k -> {\n\
    \            if(i == k) {\n                row = new Tuple!(long, long)[];\n \
    \               foreach(l -> {\n                    if(j == l) {\n           \
    \             row.push((i, j));\n                    }\n                });\n\
    \            }\n        }), lst);\n        result.push(row);\n    }), 0);\n  \
    \  \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row;\n    \
    \    foreach(k -> {\n            if(i == k) {\n                row = new Tuple!(long,\
    \ long)[];\n                foreach(l -> {\n                    if(j == l) {\n\
    \                        row.push((i, j));\n                    }\n          \
    \      });\n            }\n        }), result);\n        result.push(row);\n \
    \   }), 0);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row;\n        foreach(k -> {\n            if(i == k) {\n                row\
    \ = new Tuple!(long, long)[];\n                foreach(l -> {\n              \
    \      if(j == l) {\n                        row.push((i, j));\n             \
    \       }\n                });\n            }\n        }), result);\n        result.push(row);\n\
    \    }), 0);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row;\n        foreach(k -> {\n            if(i == k) {\n                row\
    \ = new Tuple!(long, long)[];\n                foreach(l -> {\n              \
    \      if(j == l) {\n                        row.push((i, j));\n             \
    \       }\n                });\n            }\n        }), result);\n        result.push(row);\n\
    \    }), 0);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row;\n        foreach(k -> {\n            if(i == k) {\n                row\
    \ = new Tuple!(long, long)[];\n                foreach(l -> {\n              \
    \      if(j == l) {\n                        row.push((i, j));\n             \
    \       }\n                });\n            }\n        }), result);\n        result.push(row);\n\
    \    }), 0);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row;\n        foreach(k -> {\n            if(i == k) {\n                row\
    \ = new Tuple!(long, long)[];\n                foreach(l -> {\n              \
    \      if(j == l) {\n                        row.push((i, j));\n             \
    \       }\n                });\n            }\n        }), result);\n        result.push(row);\n\
    \    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.add((i, j));\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i -> foreach(j -> res = append(res,\
    \ Tuple!(long, long)((i, j), lst[i][j]))), 0 .. lst.length - 1)\n    \n    sort(res,\
    \ (i, j) -> j > i);\n    sort(res, (i, j) -> j > i);\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; i++){\n        for(int j = 0; j < lst[i].length; j++){\n   \
    \         if(lst[i][j] == x){\n                res.add((i, j));\n            }\n\
    \        }\n    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res;\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                Tuple!(long, long)[] row = get_row(lst[i], x);\n\
    \                Tuple!(long, long)[] col = get_row(lst[j], x);\n            \
    \    \n                res = Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ {\n        if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n\
    \    }), range(0, lst.length));\n    \n    sort(res, (i, j) -> {\n        if(i\
    \ < j)\n            return 1;\n        else if(i > j)\n            return -1;\n\
    \        else\n            return 0;\n    });\n    \n    sort(res, (i, j) -> {\n\
    \        if(i < j)\n            return -1;\n        else if(i > j)\n         \
    \   return 1;\n        else\n            return 0;\n    });\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ \n    foreach(row: lst)\n    {\n        foreach(col: row)\n        {\n     \
    \       if(col == x)\n            {\n                res.push(Tuple!(long, long)(x-1,\
    \ row));\n            }\n        }\n    }\n    \n    foreach(row: lst)\n    {\n\
    \        foreach(col: row)\n        {\n            if(col != x)\n            {\n\
    \                res.push(Tuple!(long, long)(x, col-1));\n            }\n    \
    \    }\n    }\n    \n    sort(res);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = null;\n    foreach(row: lst) \n    {\n        foreach(col:\
    \ row) \n        {\n            if(col == x) \n            {\n               \
    \ result = Tuple!(long, long)[Tuple!(long, long)[row, col]];\n               \
    \ break;\n            }\n        }\n        if(result != null) break;\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row)\
    \ \n    {\n        foreach(column) \n        {\n            if(column == x) \n\
    \            {\n                result ~= Tuple!(row, column);\n            }\n\
    \        }\n    }\n    \n    sort(result);\n    sort(result, descending);\n  \
    \  \n    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] t = new Tuple!(long, long)[];\
    \ \n            t[0] = i; \n            t[1] = j; \n            res.add(t);\n\
    \        }\n    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j ->\
    \ \n    {\n        if(lst[i][j] > x)\n        {\n            Tuple!(long, long)[]\
    \ t = new Tuple!(long, long)[]; \n            t[0] = i; \n            t[1] = j;\
    \ \n            res.add(t);\n        }\n    }), range(0, lst[0].length));\n  \
    \  \n    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n\
    \        {\n            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] < x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] < x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] < x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] < x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n        {\n\
    \            result.add((i, j));\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] > x)\n        {\n\
    \            result.add((i, j));\n        }", "{\n    Tuple!(long, long)[] result\
    \ = null;\n    foreach(row: lst) \n    {\n        foreach(column: row) \n    \
    \    {\n            if(column == x) \n            {\n                result =\
    \ Tuple!(long, long)[](row, column);\n                break;\n            }\n\
    \        }\n        if(result != null) break;\n    }\n    return result;\n}",
  "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i, j;\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[n];\n    for(i = 0; i < n; i++)\n    {\n\
    \        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n \
    \           {\n                res[i] = Tuple!(long, long)[i, j];\n          \
    \      break;\n            }\n        }\n        if(j == m)\n        {\n     \
    \       res[i] = Tuple!(long, long)[i, j];\n        }\n    }\n    sort(res);\n\
    \    sort(res, (a, b) => -cmp(b.1, a.1));\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = null;\n    foreach(row: lst)\n    {\n        foreach(col: row)\n\
    \        {\n            if(col == x)\n            {\n                if(result\
    \ == null)\n                {\n                    result = Tuple!(long, long)[](row,\
    \ col);\n                }\n                else\n                {\n        \
    \            result = Tuple!(long, long)[](row, col);\n                    result.push(result);\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] res = null;\n    foreach(row: lst)\n    {\n        foreach(col:\
    \ row)\n        {\n            if(col == x)\n            {\n                res\
    \ = Tuple!(long, long)[Tuple!(long, long)[row, col]];\n                break;\n\
    \            }\n        }\n        if(res != null)\n            break;\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(i\
    \ : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n       \
    \ {\n            if(lst[i][j] == x)\n            {\n                if(res ==\
    \ null)\n                    res = Tuple!(long, long)[]();\n                res[res.length-1]\
    \ = Tuple!(i, j);\n            }\n        }\n    }\n    sort(res);\n    sort(res,\
    \ (a, b) -> a.first > b.first);\n    return res;\n}\n/*", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; ++j)\n            {\n                res[lst[i].length\
    \ - 1 - j] = (i, j);\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) -> a.first > b.first ? 1 : -1);\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n    \n    for(long\
    \ i = 0; i < lst.length; i++)\n    {\n        for(long j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     ret.add(new Tuple!(i, j));\n            }\n        }\n    }\n    \n    ret.sort(function(a,\
    \ b) -> a.first > b.first);\n    ret.sort(function(a, b) -> a.second > b.second);\n\
    \    \n    return ret;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n    \
    \        res[res.length] = Tuple!(i, j);\n    }), 0..lst.length-1);\n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] > x)\n            res[res.length] =\
    \ Tuple!(i, j);\n    }), 0..lst.length-1);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = get_row(lst[i], x);\n        foreach(k -> {\n            Tuple!(long,\
    \ long)[] col = get_row(lst[j], k);\n            foreach(l -> {\n            \
    \    res.push(Tuple!(long, long)((i, j), (k, l)));\n            });\n        });\n\
    \    }));\n    \n    sort(res, (i, j) -> {\n        Tuple!(long, long)[] row =\
    \ get_row(lst[i], x);\n        Tuple!(long, long)[] col = get_row(lst[j], x);\n\
    \        return row[0] > col[0];\n    });\n    \n    return res;\n}", "{\n   \
    \ Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j\
    \ -> {\n        if (lst[i][j] == x) {\n            Tuple!(long, long)[] row =\
    \ new Tuple!(long, long)[];\n            foreach(k -> {\n                row.add((i,\
    \ j));\n            });\n            res.add((i, row));\n        }\n    }), range(0,\
    \ lst.length));\n    sort(res, (i, j) -> {\n        if (i == 0) return 1;\n  \
    \      if (j == 0) return -1;\n        return lst[i][j] - lst[i - 1][j];\n   \
    \ });\n    sort(res, (i, j) -> {\n        if (i == 0) return -1;\n        if (j\
    \ == 0) return 1;\n        return lst[i][j] - lst[i - 1][j];\n    });\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    \n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                if(res == null)\n                    res\
    \ = make_tuple(i, j);\n                else\n                    res = make_tuple(i,\
    \ j) + res;\n            }\n        }\n    }\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; ++i)\n    {\n        if(lst[i] == x)\n        {\n          \
    \  for(int j = 0; j < lst[i].length; ++j)\n            {\n                res.push((i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res, (a, b) => a.first\
    \ < b.first ? -1 : a.first > b.first ? 1 : 0);\n    sort(res, (a, b) => a.second\
    \ > b.second ? -1 : a.second < b.second ? 1 : 0);\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst)\n    {\n        foreach(column: row)\n        {\n            if(column\
    \ == x)\n            {\n                result.push(Tuple!(long, long)((row),\
    \ column));\n            }\n        }\n    }\n    \n    result.sort(compareByDescending);\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] ret = new Tuple!(long,\
    \ long)[];\n    \n    for(int i = 0; i < lst.length; i++){\n        for(int j\
    \ = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n           \
    \     ret.add(new Tuple!(i, j));\n            }\n        }\n    }\n    \n    sort(ret,\
    \ (a, b) -> a.first > b.first ? 1 : -1);\n    sort(ret, (a, b) -> a.second > b.second\
    \ ? 1 : -1);\n    \n    return ret;\n}", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[];\n    \n    foreach(row: lst) \n    {\n        foreach(col:\
    \ row) \n        {\n            if(col == x) \n            {\n               \
    \ res.push(Tuple!(long, long)((row), col));\n            }\n        }\n    }\n\
    \    \n    sort(res, (row1, row2) => row1._1 > row2._1);\n    sort(res, (row1,\
    \ row2) => row1._2 > row2._2);\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n \
    \       if(lst[i][j] == x) {\n            Tuple!(long, long)[] coord = new Tuple!(long,\
    \ long)[] {i, j};\n            foreach(k -> {\n                if(lst[i][k] >\
    \ lst[i][k + 1]) {\n                    Tuple!(long, long)[] coord2 = new Tuple!(long,\
    \ long)[] {i, k};\n                    foreach(l -> {\n                      \
    \  if(lst[k][l] > lst[k + 1][l]) {\n                            Tuple!(long, long)[]\
    \ coord3 = new Tuple!(long, long)[] {k, l};\n                            foreach(m\
    \ -> {\n                                if(lst[l][m] > lst[k][m]) {\n        \
    \                            coord = coord.concat(coord2);\n                 \
    \                   coord2 = coord3;\n                                }\n    \
    \                        });\n                        }\n                    });\n\
    \                }\n            });\n            res = res.concat(coord);\n  \
    \      }\n    }));\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    \n    foreach(i : 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res\
    \ = Tuple!(long, long)[](Tuple!(i + 1, j), Tuple!(i + 1, j + 1));\n          \
    \  }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x) {\n            Tuple!(long, long)[] coord = new Tuple!(long,\
    \ long)[] {i, j};\n            sort(coord);\n            sort(coord, (x, y) ->\
    \ -y);\n            foreach(k -> {\n                res[k.0].add(k.1);\n     \
    \       });\n        }\n    }), range(0, lst.length));\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int\
    \ i = 0; i < lst.length; i++){\n        for(int j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] == x){\n                res[res.length] = Tuple!(i,\
    \ j);\n            }\n        }\n    }\n    sort(res);\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    for(int i\
    \ = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res.push(Tuple!(i, j));\n            }\n        }\n    }\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst, i: int)\n    {\n        foreach(column: row, j: int)\n\
    \        {\n            if(column == x)\n            {\n                result.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    result.sort(function(a, b)\
    \ -> a.0 < b.0 ? -1 : a.0 > b.0 ? 1 : 0);\n    result.sort(function(a, b) -> a.1\
    \ < b.0 ? -1 : a.1 > b.0 ? 1 : 0);\n    \n    return result;\n}", "{\n    int[]\
    \ row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n    \n   \
    \ for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n        col[i]\
    \ = i;\n    }\n    \n    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][col[i]]\
    \ == x)\n        {\n            Tuple!(long, long)[] res = new Tuple!(long, long)[row.Length];\n\
    \            for(int j = 0; j < row.Length; j++)\n            {\n            \
    \    res[j] = (row[j], col[j]);\n            }\n            return res;\n    \
    \    }\n    }\n    return new Tuple!(long, long)[0];\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[](row,col);\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        long row = 0;\n        long col = 0;\n        \n\
    \        if(lst[i][j] == x) {\n            row = i;\n            col = j;\n  \
    \      }\n        \n        Tuple!(long, long)[] tuple = new Tuple!(row, col);\n\
    \        \n        result.push(tuple);\n    }), range(0, lst.length));\n    \n\
    \    sort(result, (a, b) => a.first - b.first);\n    sort(result, (a, b) => b.second\
    \ - a.second);\n    \n    return result;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n        {\n\
    \            if(i == 0)\n            {\n                res[j].x = j;\n      \
    \          res[j].y = 0;\n            }\n            else if(j == 0)\n       \
    \     {\n                res[j].x = i;\n                res[j].y = i;\n      \
    \      }\n            else\n            {\n                if(lst[i][j] == x)\n\
    \                {\n                    res[j].x = i;\n                    res[j].y\
    \ = j;\n                }\n            }\n        }), 0);\n    \n    foreach(i\
    \ -> foreach(j -> \n        {\n            if(i == 0)\n            {\n       \
    \         res[j].x = j;\n                res[j].y = i;\n            }\n      \
    \      else if(j == 0)\n            {\n                res[j].x = i;\n       \
    \         res[j].y = j;\n            }\n            else\n            {\n    \
    \            if(lst[i][j] > lst[i][j + 1])\n                {\n              \
    \      res[j].x = i;\n                    res[j].y = j;\n                }\n \
    \           }\n        }), 0);\n    \n    foreach(i -> foreach(j -> \n       \
    \ {\n            if(i == 0)\n            {\n                res[j].x = j;\n  \
    \              res[j].y = i;\n            }\n            else if(j == 0)\n   \
    \         {\n                res[j].x = i;\n                res[j].y = j;\n  \
    \          }\n            else\n            {\n                if(lst[i][j] <\
    \ lst[i][j + 1])\n                {\n                    res[j].x = i;\n     \
    \               res[j].y = j;\n                }\n            }\n        }), 0);\n\
    \    \n    foreach(i -> foreach(j -> \n        {\n            if(i == 0)\n   \
    \         {\n                res[j].x = j;\n                res[j].y = i;\n  \
    \          }\n            else if(j == 0)\n            {\n                res[j].x\
    \ = i;\n                res[j].y = j;\n            }\n            else\n     \
    \       {\n                if(lst[i][j] > lst[i][j + 1])\n                {\n\
    \                    res[j].x = i;\n                    res[j].y = j;\n      \
    \          }\n            }\n        }), 0);\n    \n    foreach(i -> foreach(j\
    \ -> \n        {\n            if(i == 0)\n            {\n                res[j].x\
    \ = j;\n                res[j].y = i;\n            }\n            else if(j ==\
    \ 0)\n            {\n                res[j].x = i;\n                res[j].y =\
    \ j;\n            }\n            else\n            {\n                if(lst[i][j]\
    \ < lst[i][j + 1])\n                {\n                    res[j].x = i;\n   \
    \                 ", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n         \
    \   res[res.length] = Tuple!(i, j);\n    }), 0 .. lst.length - 1);\n    \n   \
    \ sort(res);\n    sort(res, (a, b) -> -cmp(a.i, b.i));\n    \n    return res;\n\
    }", "{\n    int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n\
    \    for(int i = 0; i < lst.Length; i++)\n    {\n        if(lst[i].Length > 0)\n\
    \        {\n            row[i] = i;\n            col[i] = lst[i].Length - 1;\n\
    \        }\n        else\n        {\n            row[i] = 0;\n            col[i]\
    \ = 0;\n        }\n    }\n    Array.Sort(row);\n    Array.Sort(col);\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.Length];\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(row[i] == 0)\n        {\n            res[i] = Tuple!(long,\
    \ long)(0, 0);\n        }\n        else\n        {\n            res[i] = Tuple!(long,\
    \ long)(row[i], col[i]);\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j ->\
    \ {\n        Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k\
    \ -> {\n            if(i == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k ->\
    \ {\n            if(j == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst[0].length));\n    \n    foreach(i -> foreach(j -> {\n  \
    \      Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k\
    \ -> {\n            if(j == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k ->\
    \ {\n            if(j == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst[0].length));\n    \n    foreach(i -> foreach(j -> {\n  \
    \      Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k\
    \ -> {\n            if(j == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k ->\
    \ {\n            if(j == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst[0].length));\n    \n    foreach(i -> foreach(j -> {\n  \
    \      Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k\
    \ -> {\n            if(j == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst.length));\n    \n    foreach(i -> foreach(j -> {\n     \
    \   Tuple!(long, long)[] row = new Tuple!(long, long)[];\n        foreach(k ->\
    \ {\n            if(j == k) row.add((i, j));\n        });\n        res.add(row);\n\
    \    }), range(0, lst[0].length));\n    \n    foreach(i -> foreach(j -> {\n  \
    \      Tuple!(long, long)[] ", "{\n    int[] row = new int[lst.Length];\n    int[]\
    \ col = new int[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n    {\n\
    \        row[i] = i;\n        col[i] = i;\n    }\n    Array.Sort(row, col, (x,\
    \ y) => Comparer<int>.Default.Compare(x, y));\n    Array.Sort(col, row, (x, y)\
    \ => Comparer<int>.Default.Compare(y, x));\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[lst.Length];\n    for(int i = 0; i < lst.Length; i++)\n \
    \   {\n        if(row[i] == x)\n        {\n            res[i] = Tuple!(long, long)[i,\
    \ col[i]];\n        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=algorithm,c#,sorting,list\
    \ |>\n<| c |>\nThis doesn't seem to work. `get_row([[], [1L], [1L, 2L, 3L]], 3L)`\
    \ returns `[tuple(2L, 2L)]` instead of `[tuple(0L, 0L), tuple(1L, 4L), tuple(1L,\
    \ 0L), tuple(2L, 5L), tuple(2L, 0L)]`\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. `get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L,\
    \ 3L, 4L, 5L, 1L]], 1L)` returns `[tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L),\
    \ tuple(2L, 5L), tuple(2L, 0L)]`\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works fine. `get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L,\
    \ 2L, 3L, 4L, 5L, 1L]], 1L)` returns `[tuple(0L, 0L), tuple(1L, 4L), tuple(1L,\
    \ 0L), tuple(2L, 5L), tuple(2L, 0L)]`\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works fine. `get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L],\
    \ [1L, 2L, 3L, 4L, 5L, 1L]], 1L)` returns `[tuple(0L, 0L), tuple(1L, 4L), tuple(1L,\
    \ 0L), ", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n\
    \    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j] == x)\n        {\n\
    \            res[res.length] = Tuple!(i, j);\n        }\n    }), range(0, lst.length));\n\
    \    \n    sort(res, (i, j) -> Tuple!(i, j).f0);\n    sort(res, (i, j) -> Tuple!(i,\
    \ j).f1);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n        if(lst[i][j]\
    \ == x)\n        {\n            Tuple!(long, long)[] tuple = new Tuple!(long,\
    \ long)[];\n            tuple[0] = i;\n            tuple[1] = j;\n           \
    \ res.add(tuple);\n        }\n    }), range(0, lst.length));\n    \n    foreach(i\
    \ -> foreach(j -> \n    {\n        if(lst[i][j] > x)\n        {\n            Tuple!(long,\
    \ long)[] tuple = new Tuple!(long, long)[];\n            tuple[0] = i;\n     \
    \       tuple[1] = j;\n            res.add(tuple);\n        }\n    }), range(0,\
    \ lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> \n    {\n \
    \       if(lst[i][j] == x)\n        {\n            Tuple!(long, long)[] coord\
    \ = new Tuple!(long, long)[] {i, j};\n            sort(coord, (a, b) => a.first\
    \ > b.first);\n            sort(coord, (a, b) => a.second > b.second);\n     \
    \       foreach(coord -> res.push(coord));\n        }\n    }), range(0, lst.length));\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    foreach(row: lst, i: 0, row.length)\n    {\n        foreach(col:\
    \ row, j: 0, row.length)\n        {\n            if(col == x)\n            {\n\
    \                res[res.length] = Tuple!(i, j);\n            }\n        }\n \
    \   }\n    sort(res);\n    sort(res, (a, b) => a.first > b.first);\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res = Tuple!(long, long)[Tuple!(i,j)];\n\
    \                break;\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res = append(res, Tuple!(i, j));\n   \
    \         }\n        }\n    }\n    \n    sort(res);\n    sort(res, fun(Tuple!(long,\
    \ long)) -> Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return\
    \ Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return Tuple!(long,\
    \ long)->bool {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool\
    \ {return Tuple!(long, long)->bool {return Tuple!(long, long)->bool {return ",
  "{\n    Tuple!(long, long)[] res;\n    \n    foreach(i -> foreach(j -> {\n     \
    \   Tuple!(long, long)[] temp;\n        foreach(k -> {\n            if(i == k)\
    \ {\n                temp += Tuple!(long, long)[](Tuple!(x, j), Tuple!(x, k));\n\
    \            }\n        });\n        res += temp;\n    }), range(0, lst.length));\n\
    \    \n    sort(res);\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    \n    foreach(row,lst) \n    {\n        foreach(col,row)\n    \
    \    {\n            if(col == x)\n            {\n                result ~= Tuple!(row,col);\n\
    \            }\n        }\n    }\n    \n    sort(result);\n    sort(result, descending);\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i].length == x)\n\
    \        {\n            for(int j = 0; j < lst[i].length; ++j)\n            {\n\
    \                if(lst[i][j] == x)\n                {\n                    res.push(Tuple!(i,\
    \ j));\n                }\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => b._1 - a._1);\n    sort(res, (a, b) => b._2 - a._2);\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    foreach(row: lst) \n    {\n        foreach(col: row) \n        {\n\
    \            if(col == x) \n            {\n                result.push(Tuple!(long,\
    \ long)((row, col)));\n            }\n        }\n    }\n    \n    sort(result);\n\
    \    sort(result, (a, b) => a.first > b.first);\n    \n    return result;\n}",
  "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    foreach(row:\
    \ lst)\n    {\n        foreach(col: row)\n        {\n            if(col == x)\n\
    \            {\n                result.push(Tuple!(long, long)((row), col));\n\
    \            }\n        }\n    }\n    \n    sort(result);\n    sort(result, (a,\
    \ b) => a.first > b.first);\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst) \n    {\n        foreach(col: row)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[](row, col);\n                break;\n            }\n   \
    \     }\n        if(res != null) break;\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++){\n        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j]\
    \ == x){\n                res.add((i, j));\n            }\n        }\n    }\n\
    \    sort(res);\n    sort(res, (a, b) -> -cmp(a.first, b.first));\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row: lst)\n\
    \    {\n        foreach(col: row)\n        {\n            if(col == x)\n     \
    \       {\n                result.push(Tuple!(long, long)((row, col)));\n    \
    \        }\n        }\n    }\n    \n    result.sort(byDescending);\n    foreach(tuple:\
    \ result)\n    {\n        tuple.sort(byDescending);\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n       \
    \ {\n            if(lst[i][j] == x)\n            {\n                res.push(Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a,\
    \ b) => a.first > b.first);\n    sort(res, (a, b) => a.second > b.second);\n \
    \   \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(row: lst)\n    {\n        foreach(col: row)\n  \
    \      {\n            if(col == x)\n            {\n                res.push(Tuple!(long,\
    \ long)((row, col)));\n            }\n        }\n    }\n    \n    sort(res);\n\
    \    sort(res, (a, b) => a.first > b.first);\n    \n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x) {\n            Tuple!(long, long)[]\
    \ t = (i, j);\n            foreach(k -> {\n                if(lst[i][k] > lst[k][j])\
    \ {\n                    t = swap(t, (j, k));\n                }\n           \
    \ });\n            foreach(k -> {\n                if(lst[i][k] < lst[k][j]) {\n\
    \                    t = swap(t, (j, k));\n                }\n            });\n\
    \            res.add(t);\n        }\n    }), range(0, lst.length));\n    \n  \
    \  return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j, k, r, c;\n    Tuple!(long, long)[] res;\n    \n    res = new();\n\
    \    \n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n    \
    \        if (lst[i][j] == x) {\n                for (k = i; k < n; k++) {\n  \
    \                  r = lst[k][i];\n                    c = lst[k][i];\n      \
    \              for (; k < n; k++) {\n                        c = lst[k][j];\n\
    \                        if (c < r) {\n                            r = c;\n  \
    \                      }\n                    }\n                    res[res.length]\
    \ = Tuple!(r, j);\n                }\n            }\n        }\n    }\n    \n\
    \    sort(res, fun(x) -> x.1);\n    sort(res, fun(x) -> -x.1);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n   \
    \ for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i].length == x)\n\
    \        {\n            for(int j = 0; j < lst[i].length; ++j)\n            {\n\
    \                if(lst[i][j] == x)\n                {\n                    ret.push_back(new\
    \ Tuple!(i, j));\n                }\n            }\n        }\n    }\n    \n \
    \   sort(ret.begin(), ret.end(), [](Tuple!(long, long)& a, Tuple!(long, long)&\
    \ b) -> bool \n    {\n        return a.first < b.first;\n    });\n    \n    sort(ret.begin(),\
    \ ret.end(), [](Tuple!(long, long)& a, Tuple!(long, long)& b) -> bool \n    {\n\
    \        return a.second > b.second;\n    });\n    \n    return ret;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j\
    \ -> {\n        if(lst[i][j] == x) {\n            res.add(new Tuple!(i, j));\n\
    \        }\n    }), range(0, lst.length));\n    sort(res);\n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    for(int i = 0;\
    \ i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n       \
    \     for(int j = 0; j < lst[i].length; ++j)\n            {\n                if(lst[i][j]\
    \ == x)\n                {\n                    res.push(Tuple!(i, j));\n    \
    \            }\n            }\n        }\n    }\n    return res;\n}", "{\n   \
    \ int[] row = new int[lst.Length];\n    int[] col = new int[lst.Length];\n   \
    \ \n    for(int i = 0; i < lst.Length; i++)\n    {\n        row[i] = i;\n    \
    \    col[i] = 0;\n    }\n    \n    for(int i = 0; i < lst.Length; i++)\n    {\n\
    \        if(lst[i][col[i]] == x)\n        {\n            return Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long, long)[](Tuple!(long,\
    \ long)[]", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long,\
    \ long)[];\n        foreach(k -> {\n            long r = j;\n            long\
    \ c = i;\n            if(r == x)\n            {\n                row.push((r,\
    \ c));\n            }\n        });\n        res.push(row);\n    }), lst);\n  \
    \  \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long,\
    \ long)[];\n        foreach(k -> {\n            long r = j;\n            long\
    \ c = i;\n            if(r != x)\n            {\n                row.push((r,\
    \ c));\n            }\n        });\n        res.push(row);\n    }), res);\n  \
    \  \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long,\
    \ long)[];\n        foreach(k -> {\n            long r = j;\n            long\
    \ c = i;\n            if(c != x)\n            {\n                row.push((r,\
    \ c));\n            }\n        });\n        res.push(row);\n    }), res);\n  \
    \  \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; i++){\n        for(int j = 0; j\
    \ < lst[i].length; j++){\n            if(lst[i][j] == x){\n                res.add((i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(res);\n    sort(res, (a,\
    \ b) -> a.first > b.first);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res;\n    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n  \
    \      {\n            res = [(i, j)];\n        }\n    }), range(0, lst.length));\n\
    \    \n    sort(res);\n    sort(res, (a, b) -> {\n        if(res[a][0] == res[b][0])\n\
    \        {\n            return res[a][1] > res[b][1] ? 1 : -1;\n        }\n  \
    \      else\n        {\n            return res[a][0] > res[b][0] ? 1 : -1;\n \
    \       }\n    });\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n       \
    \ if (lst[i][j] == x) \n            res[res.length] = Tuple!(i, j);\n    }), range(0,\
    \ lst.length));\n    \n    sort(res, (i, j) -> {\n        if (i == 0) \n     \
    \       return 1;\n        if (j == 0) \n            return -1;\n        return\
    \ lst[i][j] - lst[i-1][j];\n    });\n    \n    sort(res, (i, j) -> {\n       \
    \ if (i == 0) \n            return -1;\n        if (j == 0) \n            return\
    \ 1;\n        return lst[i][j] - lst[i-1][j];\n    });\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    \n    foreach(row) \n    {\n   \
    \     foreach(column) \n        {\n            if(row[0] == x && column[0] ==\
    \ x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach(column) \n        {\n            if(row[0] == x && column[0]\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row[0],\
    \ column[0])));\n            }\n        }\n    }\n    \n    foreach(row) \n  \
    \  {\n        foreach", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j\
    \ = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j] == x)\n  \
    \          {\n                result.add(new Tuple!(i, j));\n            }\n \
    \       }\n    }\n    result.sort(0, true);\n    result.sort(1, false);\n    return\
    \ result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n   \
    \ long[][] result = new long[n][m];\n    for(int i = 0; i < n; i++)\n    {\n \
    \       for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                result[i][j] = i;\n                result[i][m\
    \ - 1] = j;\n                result[n - 1][j] = i;\n                result[n -\
    \ 1][m - 1] = j;\n            }\n        }\n    }\n    Arrays.sort(result, (a,\
    \ b) -> {\n        if(a[0] == b[0])\n            return a[1] > b[1];\n       \
    \ return a[0] > b[0];\n    });\n    Arrays.sort(result, (a, b) -> {\n        if(a[0]\
    \ == b[0])\n            return a[2] > b[2];\n        return a[0] > b[0];\n   \
    \ });\n    return result;\n}\n/*", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j\
    \ = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j] == x)\n  \
    \          {\n                res.push(Tuple!(i, j));\n            }\n       \
    \ }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i]\
    \ == x)\n        {\n            for(int j = 0; j < lst[i].length; j++)\n     \
    \       {\n                res.add((i, j));\n            }\n        }\n    }\n\
    \    \n    sort(res);\n    sort(res, (a, b) => -cmp(a, b));\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[];\n   \
    \ \n    foreach(i : 0..lst.length-1)\n    {\n        foreach(j : 0..lst[i].length-1)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                ret.add(Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    sort(ret);\n    sort(ret, true);\n\
    \    \n    return ret;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n        foreach(k -> {\n            if(i ==\
    \ k) {\n                row.push((i, j));\n            }\n        });\n      \
    \  if(row.contains((x, j))) {\n            res.push(row);\n        }\n    }),\
    \ lst);\n    \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row\
    \ = new Tuple!(long, long)[];\n        foreach(k -> {\n            if(i == k)\
    \ {\n                row.push((i, j));\n            }\n        });\n        if(row.contains((x,\
    \ j))) {\n            res.push(row);\n        }\n    }), res);\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n   \
    \ \n    foreach(i -> foreach(j -> {\n        Tuple!(long, long)[] row = new Tuple!(long,\
    \ long)[];\n        foreach(k -> {\n            long rowI = i;\n            long\
    \ rowJ = j;\n            long rowK = k;\n            \n            long colI =\
    \ rowI;\n            long colJ = rowJ;\n            long colK = rowK;\n      \
    \      \n            if(colJ == x) {\n                row.add(Tuple!(rowI, rowK));\n\
    \            }\n            \n            if(colK == x) {\n                row.add(Tuple!(rowI,\
    \ rowJ));\n            }\n            \n            if(colI == x) {\n        \
    \        row.add(Tuple!(rowK, rowJ));\n            }\n            \n         \
    \   if(colJ == x && colK == x) {\n                row.add(Tuple!(rowI, rowK));\n\
    \            }\n            \n            if(colI == x && colJ == x) {\n     \
    \           row.add(Tuple!(rowI, rowJ));\n            }\n            \n      \
    \      if(colK == x && colI == x) {\n                row.add(Tuple!(rowK, rowJ));\n\
    \            }\n            \n            if(colJ == x && colK == x && colI ==\
    \ x) {\n                row.add(Tuple!(rowI, rowK));\n            }\n        \
    \    \n            if(colI == x && colJ == x && colK == x) {\n               \
    \ row.add(Tuple!(rowI, rowJ));\n            }\n            \n            if(colK\
    \ == x && colI == x && colJ == x) {\n                row.add(Tuple!(rowK, rowJ));\n\
    \            }\n            \n            if(colI == x && colJ == x && colK ==\
    \ x && colI == x) {\n                row.add(Tuple!(rowI, rowK));\n          \
    \  }\n            \n            if(colK == x && colI == x && colJ == x && colK\
    \ == x) {\n                row.add(Tuple!(rowK, rowJ));\n            }\n     \
    \       \n            if(colI == x && colJ == x && colK == x && colI == x && colJ\
    \ == x) {\n                row.add(Tuple!(rowI, rowK));\n            }\n     \
    \       \n            if(colK == x && colI == x && colJ == x && colK == x && colI\
    \ == x && colJ == x) {\n                row.add(Tuple!(rowK, rowJ));\n       \
    \     }\n            \n            if(colI == x && colJ == x && colK == x && ",
  "{\n    Tuple!(long, long)[] res;\n    \n    for(int i = 0; i < lst.length; i++){\n\
    \        if(lst[i] == x)\n            return Tuple!(long, long)[](Tuple!(0, i));\n\
    \    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n\
    \    foreach(row::lst) \n    {\n        foreach(col::row) \n        {\n      \
    \      if(col == x) \n            {\n                res = Tuple!(long, long)[](row,\
    \ col);\n                break;\n            }\n        }\n    }\n    \n    if(res\
    \ == null) \n    {\n        foreach(row::lst) \n        {\n            foreach(col::row)\
    \ \n            {\n                if(col != x) \n                {\n        \
    \            res = Tuple!(long, long)[](row, col);\n                    break;\n\
    \                }\n            }\n        }\n    }\n    \n    return res;\n}",
  "{\n    Tuple!(long, long)[] res = null;\n    foreach(row::lst) \n    {\n      \
    \  foreach(col::row) \n        {\n            if(col == x) \n            {\n \
    \               res = Tuple!(long, long)[](row, col);\n            }\n       \
    \ }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n    \n\
    \    foreach(row) \n    {\n        foreach(column) \n        {\n            if(column\
    \ == x) \n            {\n                result.push(Tuple!(long, long)((row),\
    \ column));\n            }\n        }\n    }\n    \n    sort(result);\n    sort(result,\
    \ 1, descending);\n    return result;\n}\n/*", "{\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n          \
    \  if(lst[i][j] == x)\n            {\n                res.push((i, j));\n    \
    \        }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(i : 0..lst.length - 1,\
    \ j : 0..lst[i].length - 1)\n    {\n        if(lst[i][j] == x)\n        {\n  \
    \          Tuple!(long, long)[] row = new Tuple!(long, long)[];\n            foreach(j\
    \ : 0..lst[i].length - 1)\n            {\n                row.push(Tuple!(long,\
    \ long)[i, j]);\n            }\n            res.push(row);\n        }\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x) {\n       \
    \     Tuple!(long, long)[] t = new Tuple!(long, long)[]; \n            t[0] =\
    \ i; \n            t[1] = j; \n            res.add(t);\n        }\n    }), range(0,\
    \ lst.length));\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] res =\
    \ new Tuple!(long, long)[];\n    foreach(row: lst) \n    {\n        foreach(col:\
    \ row) \n        {\n            if(col == x) \n            {\n               \
    \ res.push(Tuple!(long, long)((row, col)));\n            }\n        }\n    }\n\
    \    sort(res);\n    sort(res, (a, b) => a.first > b.first);\n    return res;\n\
    }", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[];\n    \n    foreach(i\
    \ -> foreach(j -> {\n        if(lst[i][j] == x) {\n            Tuple!(long, long)[]\
    \ row = new Tuple!(long, long)[];\n            foreach(k -> {\n              \
    \  if(lst[i][k] == x) {\n                    row.add(k);\n                }\n\
    \            });\n            res.add(row);\n        }\n    }), range(0, lst.length));\n\
    \    \n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x) {\n       \
    \     Tuple!(long, long)[] row = new Tuple!(long, long)[];\n            foreach(k\
    \ -> {\n                if(lst[i][k] == x) {\n                    row.add(k);\n\
    \                }\n            });\n            res.add(row);\n        }\n  \
    \  }), range(0, lst[0].length));\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    foreach(i -> foreach(j -> {\n \
    \       if(lst[i][j] == x) \n            res[res.length] = Tuple!(i, j);\n   \
    \ }), range(0, lst.length));\n    sort(res, (a, b) => a.first < b.first ? 1 :\
    \ a.first == b.first ? 0 : -1);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    \n    foreach(i -> foreach(j -> {\n   \
    \     if(lst[i][j] == x)\n            res[res.length] = Tuple!(i, j);\n    }),\
    \ range(0, lst.length));\n    \n    sort(res, (a, b) -> {\n        if(a.first\
    \ < b.first)\n            return -1;\n        if(a.first > b.first)\n        \
    \    return 1;\n        return 0;\n    });\n    \n    sort(res, (a, b) -> {\n\
    \        if(a.second < b.second)\n            return -1;\n        if(a.second\
    \ > b.second)\n            return 1;\n        return 0;\n    });\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n\
    \    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] ==\
    \ x)\n        {\n            for(int j = 0; j < lst[i].length; ++j)\n        \
    \    {\n                result.add((i, j));\n            }\n        }\n    }\n\
    \    \n    result.sort(function(a, b) -> a.first > b.first);\n    result.sort(function(a,\
    \ b) -> a.second > b.second);\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                res.push(Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            for(int j =\
    \ 0; j < lst[i].length; j++)\n            {\n                res.add((i, j));\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[];\n    foreach(row: lst, i: int) \n    {\n   \
    \     foreach(col: row, j: int) \n        {\n            if(col == x) \n     \
    \       {\n                res.push(Tuple!(i, j));\n            }\n        }\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst){\n\
    \        if(row.length == x){\n            res = row;\n            break;\n  \
    \      }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result = new\
    \ Tuple!(long, long)[];\n    \n    foreach(row: lst) \n    {\n        foreach(col:\
    \ row) \n        {\n            if(col == x) \n            {\n               \
    \ result.push(Tuple!(long, long)((row, col)));\n            }\n        }\n   \
    \ }\n    \n    sort(result);\n    sort(result, (a, b) => a.first > b.first);\n\
    \    \n    return result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[];\n    foreach(i -> foreach(j -> {\n        if(lst[i][j] == x)\n    \
    \        res[res.length] = Tuple!(i, j);\n    }), 0 .. lst.length - 1);\n    sort(res);\n\
    \    return res;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
