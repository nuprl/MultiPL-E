name: HumanEval_36_fizz_buzz
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn the number of times the\
  \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n   \
  \ >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n    >>> fizz_buzz(79L)\n\
  \    3L\n    \n*/\nlong fizz_buzz(long n) \n"
tests: "unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L)\
  \ == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n\
  \    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L)\
  \ == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L)\
  \ == 8026L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    for(long i = 1; i < n; ++i)\n    {\n  \
    \      if(i % 11 == 0 || i % 13 == 0)\n        {\n            ++count;\n     \
    \   }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long i;\n    for(i = n - 1; i >= 0; --i)\n    {\n        if((n % 10)\
    \ == 7)\n            ++count;\n        n /= 10;\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    long x = n;\n    long y = n;\n    long z = n;\n   \
    \ long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e =\
    \ n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n   \
    \ long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n =\
    \ n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n   \
    \ long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w =\
    \ n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n   \
    \ long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f =\
    \ n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n   \
    \ long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o =\
    \ n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n   \
    \ long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x =\
    \ n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n   \
    \ long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g =\
    \ n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n   \
    \ long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p =\
    \ n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n   \
    \ long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y =\
    \ n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n   \
    \ long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h =\
    \ n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n   \
    \ long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q =\
    \ n;\n    long r = n;\n    long s = n;\n    long t = n;\n    ", "{\n    long count\
    \ = 0;\n    long d = n % 10;\n    long m = n / 10;\n    \n    if (m % 11 == 0\
    \ || m % 13 == 0) {\n        count++;\n    }\n    \n    while (d != 7) {\n   \
    \     d = n % 10;\n        m = n / 10;\n        \n        if (m % 11 == 0 || m\
    \ % 13 == 0) {\n            count++;\n        }\n        \n        n = m;\n  \
    \  }\n    \n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\
    \tlong i;\n\tfor(i = 1; i <= n; i++){\n\t\tif((i % 11) == 0 || i % 13 == 0){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n   \
    \ long remainder;\n    \n    while (n>0) {\n        remainder = n % 11;\n    \
    \    if (remainder == 0 || remainder == 7) {\n            count++;\n        }\n\
    \        n = n / 11;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    for(long i = n; i > 0; i /= 11)\n    {\n        if(i%11 == 7)\n         \
    \   count++;\n    }\n    for(long i = n; i > 0; i /= 13)\n    {\n        if(i%13\
    \ == 7)\n            count++;\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    long remainder;\n    \n    while (n>0) {\n        remainder = n%11;\n\
    \        if (remainder == 7) {\n            count++;\n        }\n        n = n/11;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`\n<|/ c |>\n<| c |>\n\
    It works fine for me. Try it with `fizz_buzz(78L)`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for me on `fizz_buzz(78L)`\n<|/ c |>\n<| c |>\nIt works for me on `fizz_buzz(78L)`\n\
    <|/ c |>\n<| c |>\nIt works for me on `fizz_buzz(78L)`\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\tlong temp;\n\
    \t\n\twhile (n>0) {\n\t\ttemp = n % 11;\n\t\tif (temp == 7)\n\t\t\tcount++;\n\t\
    \tn = n / 11;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n    long i;\n\
    \    for(i = 1; i <= n; i += 11)\n    {\n        if((i % 11) == 0)\n         \
    \   count += 1;\n    }\n    for(i = 1; i <= n; i += 13)\n    {\n        if((i\
    \ % 13) == 0)\n            count += 1;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis is not the correct answer,\
    \ as it will return `0` for `fizz_buzz(50)`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it and it returns `0` for `fizz_buzz(50)`.\n<|/ c |>\n<| c |>\nIt returns\
    \ `0` for `fizz_buzz(50)` because `50 % 11 == 0` and `50 % 13 == 0`.\n<|/ c |>\n\
    <| c |>\nI tested it and it returns `0` for `fizz_buzz(50)` because `50 % 11 ==\
    \ 0` and `50 % 13 == 0`.\n<|/ c |>\n<| c |>\nI tested it and it returns `0` for\
    \ `fizz_buzz(50)` because `50 % 11 == 0` and `50 % 13 == 0`.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long remainder;\n    \n    while (n) {\n        remainder = n % 11;\n   \
    \     if (remainder == 7 || remainder == 13) count++;\n        n /= 11;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\n\
    This doesn't work. `fizz_buzz(78L)` returns `2L`, but `fizz_buzz(79L)` returns\
    \ `3L`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| c |>\nThe\
    \ bug is still there. `fizz_buzz(78L)` returns `2L`, but `fizz_buzz(79L)` returns\
    \ `3L`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| c |>\nThe\
    \ bug is still there. `fizz_buzz(78L)` returns `2L`, but `fizz_buzz(79L)` returns\
    \ `3L`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long count = 0;\n    for(long i = n; i > 0; i /=\
    \ 10) {\n        if((i % 11) == 0 || i % 13 == 0) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI\
    \ like this solution, but I wonder if it would be faster than the one I posted.\n\
    <|/ c |>\n<| c |>\nI doubt it would be. My solution uses `long` division which\
    \ is not very fast on modern processors. I suspect my solution would be faster\
    \ than yours because I avoid the overhead of division.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that uses `long` division.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <stdio.h>\n#include <stdlib.h>\n#include <string.h>", "{\n    long count\
    \ = 0;\n    long i;\n    for(i = 1; i <= n; i += 11)\n    {\n        if((i % 11)\
    \ == 0)\n            count += 1;\n    }\n    for(i = 1; i <= n; i += 13)\n   \
    \ {\n        if((i % 13) == 0)\n            count += 1;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long x = n;\n\
    \    long remainder;\n    \n    while (x>0)\n    {\n        remainder = x % 11;\n\
    \        if (remainder == 0 || remainder == 7)\n            count++;\n       \
    \ x /= 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try `fizz_buzz(50L)` - it returns `0L`.\n<|/\
    \ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ c |>\n: Thanks for pointing it out. Fixed now.\n<|/ c |>\n<| c |>\n: Thanks\
    \ for pointing it out. Fixed now.\n<|/ c |>\n<| c |>\n: Thanks for pointing it\
    \ out. Fixed now.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    for(long i =\
    \ 0; i <= n; i += 11)\n    {\n        if((i % 11) == 0)\n        {\n         \
    \   if((i % 13) == 0)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code does not work. `fizz_buzz(78L)` returns `3L` instead\
    \ of `2L`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now\
    \ it works.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now\
    \ it works.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now\
    \ it works.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now\
    \ it works.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n  \
    \  while(n > 0)\n    {\n        remainder = n % 11;\n        n /= 11;\n      \
    \  if(remainder == 7)\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis\
    \ code doesn't work for `n = 100` because `n % 11` is `0` when `n = 100`.\n<|/\
    \ c |>\n<| c |>\nIt works for any number less than 100. `n % 11` is `0` when `n\
    \ = 100` because `100 % 11` is `0`.\n<|/ c |>\n<| c |>\nYes, but `100 % 11` is\
    \ `0` when `n = 100`. So `n % 11` is `0` when `n = 100`.\n<|/ c |>\n<| c |>\n\
    I see what you mean. Thanks for pointing that out. I fixed my answer.\n<|/ c |>\n\
    <| c |>\nThis code doesn't work for `n = 100` because `n % 11` is `0` when `n\
    \ = 100`.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    for(long i = n; i > 0; i /=\
    \ 10L)\n    {\n        if((i % 11L) == 7L)\n            count += 1;\n        if((i\
    \ % 13L) == 7L)\n            count += 1;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThanks for your answer. I was looking\
    \ for a solution that doesn't require any loops or conditional statements. I guess\
    \ I should have specified that in the question.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that doesn't use any loops or conditional statements.\n<|/ c |>\n<|\
    \ a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long i;\n    for(i = 0; i <= n; i+=11)\n\
    \    {\n        if((i % 11) == 0)\n        {\n            count += 1;\n      \
    \  }\n    }\n    for(i = 0; i <= n; i+=13)\n    {\n        if((i % 13) == 0)\n\
    \        {\n            count += 1;\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP asked\
    \ for a solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I believe that this is an answer to the question asked.\n<|/ c\
    \ |>\n<| c |>\nI agree with you but this doesn't answer the question. OP asked\
    \ for a solution that doesn't use any loops.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I believe that this is an answer to the question asked.\n<|/ c\
    \ |>\n<| c |>\nI agree with you but this doesn't answer the question. OP asked\
    \ for a solution that doesn't use any loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n\tlong count = 0;\n\tlong x = n;\n\twhile (x>0)\n\t{\n\t\tlong y = x % 11;\n\
    \t\tif (y==7 || y==13)\n\t\t\tcount++;\n\t\tx = x / 11;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13 and are multiples of 3 or 5.\n    >>> fizz_buzz_multiples(50L)\n\
    \    0L\n    >>> fizz_buzz_multiples(78L)\n    1L\n    >>> fizz_buzz_multiples(79L)\n\
    \    1L\n    \n*/\nlong fizz_buzz_multiples(long n) \n{\n\tlong count = 0;\n\t\
    long x = n;\n\twhile (x>0)\n\t{\n\t\tlong y = x % 11;\n\t\tif (y==7 || y==13 &&\
    \ x%3==0 || x%5==0)\n\t\t\tcount++;\n\t\tx = x / 11;\n\t}\n\treturn count;\n}\n\
    /*\nReturn the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13 and are multiples of 3 or 5.\n    >>> fizz_buzz_multiples_fast(50L)\n\
    \    0L\n    >>> fizz_buzz_multiples_fast(78L)\n    1L\n    >>> fizz_buzz_multiples_fast(79L)\n\
    \    1L\n    \n*/\nlong fizz_buzz_multiples_fast(long n) \n{\n\tlong count = 0;\n\
    \tlong x = n;\n\twhile (x>0)\n\t{\n\t\tlong y = x % 11;\n\t\tif (y==7 || y==13\
    \ && x%3==0 || x%5==0)\n\t\t\tcount++;\n\t\tx = x / 11;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13 and are multiples of 3 or 5.\n    >>> fizz_buzz_multiples_fast(50L)\n\
    \    0L\n    >>> fizz_buzz_multiples_fast(78L)\n    1L\n    >>> fizz_buzz_multiples_fast(79L)\n\
    \    1L\n    \n*/\nlong fizz_buzz_multiples_fast(long n) \n{\n\tlong count = 0;\n\
    \tlong x = n;\n\twhile (x>0)\n\t{\n\t\tlong y = x % 11;\n\t\tif (y==7 || y==13\
    \ && x%3==0 || x%5==0)\n\t\t\tcount++;\n\t\t", "{\n    long count = 0;\n    long\
    \ x = n;\n    long y = x;\n    long z = x;\n    long a = x;\n    long b = x;\n\
    \    long c = x;\n    long d = x;\n    long e = x;\n    long f = x;\n    long\
    \ g = x;\n    long h = x;\n    long i = x;\n    long j = x;\n    long k = x;\n\
    \    long l = x;\n    long m = x;\n    long n = x;\n    long o = x;\n    long\
    \ p = x;\n    long q = x;\n    long r = x;\n    long s = x;\n    long t = x;\n\
    \    long u = x;\n    long v = x;\n    long w = x;\n    long x = x;\n    long\
    \ y = x;\n    long z = x;\n    long a = x;\n    long b = x;\n    long c = x;\n\
    \    long d = x;\n    long e = x;\n    long f = x;\n    long g = x;\n    long\
    \ h = x;\n    long i = x;\n    long j = x;\n    long k = x;\n    long l = x;\n\
    \    long m = x;\n    long n = x;\n    long o = x;\n    long p = x;\n    long\
    \ q = x;\n    long r = x;\n    long s = x;\n    long t = x;\n    long u = x;\n\
    \    long v = x;\n    long w = x;\n    long x = x;\n    long y = x;\n    long\
    \ z = x;\n    long a = x;\n    long b = x;\n    long c = x;\n    long d = x;\n\
    \    long e = x;\n    long f = x;\n    long g = x;\n    long h = x;\n    long\
    \ i = x;\n    long j = x;\n    long k = x;\n    long l = x;\n    long m = x;\n\
    \    long n = x;\n    long o = x;\n    long p = x;\n    long q = x;\n    long\
    \ r = x;\n    long s = x;\n    long t = x;\n    long u = x;\n    long v = x;\n\
    \    long w = x;\n    long x = x;\n    long y = x;\n    long z = x;\n    long\
    \ a = x;\n    long b = x;\n    long c = x;\n    long d = x;\n    long e = x;\n\
    \    long f = x;\n    long g = x;\n    long h = x;\n    long i = x;\n    long\
    \ j = x;\n    long k = x;\n    long l = x;\n    long m = x;\n    long n = x;\n\
    \    long o = x;\n    long p = x;\n    long q = x;\n    long r = x;\n    long\
    \ s = x;\n    long t = x;\n    ", "{\n    long count = 0;\n    for(long i = n;\
    \ i > 0; i /= 11L) \n    {\n        if((i % 11L) == 7L) \n        {\n        \
    \    count += 1;\n        }\n    }\n    for(long i = n; i > 0; i /= 13L) \n  \
    \  {\n        if((i % 13L) == 7L) \n        {\n            count += 1;\n     \
    \   }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, but I believe it can be optimized a little\
    \ more. For example, you can just check if `i % 11L == 0` instead of `i % 11L\
    \ == 13L`.\n<|/ c |>\n<| c |>\nI agree with you, that is a good optimization.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI like your solution, but I\
    \ believe it can be optimized a little more. For example, you can just check if\
    \ `i % 11L == 0` instead of `i % 11L == 13L`.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, that is a good optimization. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ c |>\nI like your solution, but I believe it can be optimized a little more.\
    \ For example, you can just check if `i % 11L == 0` instead of `i % 11L == 13L`.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n    while\
    \ (n>0) {\n        remainder = n % 11;\n        if (remainder == 7) {\n      \
    \      count++;\n        }\n        n = n / 11;\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't answer the\
    \ question, which is about how to implement the algorithm, not how to implement\
    \ the algorithm.\n<|/ c |>\n<| c |>\nThe question was how to implement the algorithm,\
    \ not how to implement the algorithm.\n<|/ c |>\n<| c |>\nThe question was how\
    \ to implement the algorithm, not how to implement the algorithm.\n<|/ c |>\n\
    <| c |>\nThe question was how to implement the algorithm, not how to implement\
    \ the algorithm.\n<|/ c |>\n<| c |>\nThe question was how to implement the algorithm,\
    \ not how to implement the algorithm.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long div = 11;\n    long mod;\n    \n    while (n > div) {\n       \
    \ mod = n % div;\n        if (mod != 0 && mod != 11 && mod != 13) {\n        \
    \    count++;\n        }\n        div *= 10;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ d = n % 11;\n    long e = (n - d) / 13;\n    long f = (n - d) / 11;\n    long\
    \ g = (n - d) / 7;\n    long h = (n - d) / 5;\n    long i = (n - d) / 3;\n   \
    \ long j = (n - d) / 1;\n    long k = (n - d) / 2;\n    long l = (n - d) / 3;\n\
    \    long m = (n - d) / 5;\n    long n = (n - d) / 7;\n    long o = (n - d) /\
    \ 11;\n    long p = (n - d) / 13;\n    long q = (n - d) / 17;\n    long r = (n\
    \ - d) / 19;\n    long s = (n - d) / 23;\n    long t = (n - d) / 29;\n    long\
    \ u = (n - d) / 31;\n    long v = (n - d) / 37;\n    long w = (n - d) / 43;\n\
    \    long x = (n - d) / 49;\n    long y = (n - d) / 57;\n    long z = (n - d)\
    \ / 63;\n    long a = (n - d) / 69;\n    long b = (n - d) / 77;\n    long c =\
    \ (n - d) / 83;\n    long d = (n - d) / 89;\n    long e = (n - d) / 97;\n    long\
    \ f = (n - d) / 103;\n    long g = (n - d) / 111;\n    long h = (n - d) / 117;\n\
    \    long i = (n - d) / 123;\n    long j = (n - d) / 129;\n    long k = (n - d)\
    \ / 135;\n    long l = (n - d) / 141;\n    long m = (n - d) / 147;\n    long n\
    \ = (n - d) / 153;\n    long o = (n - d) / 159;\n    long p = (n - d) / 165;\n\
    \    long q = (n - d) / 171;\n    long r = (n - d) / 177;\n    long s = (n - d)\
    \ / 183;\n    long t = (n - d) / 189;\n    long u = (n - d) / 195;\n    long v\
    \ = (n - d) / 201;\n    long w = (n - d) / 207;\n    long x = (n - d) / 213;\n\
    \    long y = (n - d) / 219;\n    long z = (n - d) / 223;\n    long a = (n - d)\
    \ / 227;\n    long b = (n - d) / 233;\n    long c = (n - d) / 239;\n    long d\
    \ = (n - d) / 245;\n", "{\n    long count = 0;\n    long temp;\n    \n    temp\
    \ = n;\n    \n    while (temp > 0) {\n        if (temp % 11 == 0 || temp % 13\
    \ == 0) {\n            count++;\n        }\n        temp /= 10;\n    }\n    \n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to do it without using an\
    \ array?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use an array\n<|/\
    \ c |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it\
    \ without using an array?\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use an array\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to do it without using an array?\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long div = 11L;\n    while (n > div) {\n        if (n % div == 0)\n\
    \            count += 1;\n        div *= 11L;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int fizzBuzz(int n) {\n  \
    \  int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 15 == 0)\
    \ {\n            count++;\n        } else if (i % 5 == 0) {\n            count++;\n\
    \        } else if (i % 3 == 0) {\n            count++;\n        } else if (i\
    \ % 15 == 0 && i % 5 == 0) {\n            count++;\n        } else if (i % 15\
    \ == 0 && i % 3 == 0) {\n            count++;\n        } else if (i % 5 == 0 &&\
    \ i % 3 == 0) {\n            count++;\n        } else if (i % 15 == 0 && i % 5\
    \ == 0 && i % 3 == 0) {\n            count++;\n        } else if (i % 15 == 0\
    \ && i % 3 == 0 && i % 5 == 0) {\n            count++;\n        } else if (i %\
    \ 3 == 0 && i % 5 == 0) {\n            count++;\n        } else if (i % 3 == 0\
    \ && i % 15 == 0) {\n            count++;\n        } else if (i % 3 == 0 && i\
    \ % 5 == 0 && i % 15 == 0) {\n            count++;\n        } else if (i % 3 ==\
    \ 0 && i % 15 == 0 && i % 5 == 0) {\n            count++;\n        } else if (i\
    \ % 3 == 0 && i % 5 == 0 && i % 15 == 0 && i % 3 != 0) {\n            count++;\n\
    \        } else if (i % 3 == 0 && i % 5 == 0 && i % 15 == 0 && i % 5 == 0) {\n\
    \            count++;\n        } else if (i % 3 == 0 && i % 5 == 0 && i % 15 ==\
    \ 0 && i % 3 == 0) {\n            count++;\n        } else if (i % 3 == 0 && i\
    \ % 5 == 0 && i % 15 == 0 && i % 3 == 0 && i % 5 == 0) {\n            count++;\n\
    \        } else if (i % 3 == 0 && i % 5 == 0 && i % 15 == 0 && i % 3 == 0 && i\
    \ % 5 == 0 && i % 3 != 0) {\n            count++;\n        } else if (i % 3 ==\
    \ 0 && i % 5 == 0 && i % 15 == 0 && i % 3 == 0 && i % 5 == 0 && i % 3 == 0) {\n\
    \            count++;\n        } else if (i % 3 == 0 && i % 5 == 0 && i % 15 ==\
    \ 0 && i % 3 == 0 && i % 5 == 0 && i % 3 == 0 && i % 3 != 0) {\n            count++;\n\
    \        } else if (i % 3 == 0 && i % 5 == 0 && i % 15 == 0 && i % 3 == 0 && i\
    \ % 5 == 0 && i % 3 == 0 && i % 3 != 0) {\n            count++;\n        } else\
    \ if (i % 3 == 0 && i % 5 == 0 && i % 15 == 0 && i % 3 == 0 && i % 5 == 0 && i\
    \ % 3 == 0 && i % 3 != 0 && i % 5 != 0) {\n            count++;\n        } else\
    \ if (i % 3 == 0 && i % 5 == 0 && i % 15 == 0 && i % 3 == 0 && i % 5 == 0 && i\
    \ % 3 == 0 && i % 3 != 0 && i % 5 == 0) {\n            count++;\n        } else\
    \ if (i % 3 == 0 && i % ", "{\n\tlong count = 0;\n\tfor (long i = n; i > 0; i\
    \ /= 11L) {\n\t\tif (i % 11L == 13L) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn\
    \ count;\n}", "{\n    long count = 0;\n    long remainder = n % 11;\n    long\
    \ remainder2 = n % 13;\n    long remainder3 = n % 17;\n    long remainder4 = n\
    \ % 19;\n    long remainder5 = n % 23;\n    long remainder6 = n % 29;\n    long\
    \ remainder7 = n % 37;\n    long remainder8 = n % 41;\n    long remainder9 = n\
    \ % 45;\n    long remainder10 = n % 49;\n    long remainder11 = n % 53;\n    long\
    \ remainder12 = n % 59;\n    long remainder13 = n % 67;\n    long remainder14\
    \ = n % 71;\n    long remainder15 = n % 77;\n    long remainder16 = n % 83;\n\
    \    long remainder17 = n % 89;\n    long remainder18 = n % 93;\n    long remainder19\
    \ = n % 99;\n    long remainder20 = n % 103;\n    long remainder21 = n % 109;\n\
    \    long remainder22 = n % 113;\n    long remainder23 = n % 119;\n    long remainder24\
    \ = n % 125;\n    long remainder25 = n % 131;\n    long remainder26 = n % 137;\n\
    \    long remainder27 = n % 143;\n    long remainder28 = n % 149;\n    long remainder29\
    \ = n % 155;\n    long remainder30 = n % 161;\n    long remainder31 = n % 167;\n\
    \    long remainder32 = n % 173;\n    long remainder33 = n % 179;\n    long remainder34\
    \ = n % 185;\n    long remainder35 = n % 191;\n    long remainder36 = n % 197;\n\
    \    long remainder37 = n % 203;\n    long remainder38 = n % 209;\n    long remainder39\
    \ = n % 215;\n    long remainder40 = n % 221;\n    long remainder41 = n % 227;\n\
    \    long remainder42 = n % 233;\n    long remainder43 = n % 239;\n    long remainder44\
    \ = n % 245;\n    long remainder45 = n % 251;\n    long remainder46 = n % 257;\n\
    \    long remainder47 = n % 263;\n    long remainder48 = n % 269;\n    long remainder49\
    \ = n % 275;\n    long remainder50 = n % 281;\n    long remainder51 = n % 287;\n\
    \    long remainder52 = n % 293;\n    long ", "{\n    long count = 0;\n    long\
    \ digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n        if\
    \ (digit == 7)\n        {\n            count++;\n        }\n        n /= 10;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long d = n % 10;\n    long x = n / 10;\n\
    \    \n    while(x != 0)\n    {\n        if(x % 11 == 0 || x % 13 == 0)\n    \
    \    {\n            count++;\n        }\n        x = x / 10;\n    }\n    \n  \
    \  return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ remainder;\n    \n    while (n>0) {\n        remainder = n%11;\n        if (remainder\
    \ == 7) {\n            count++;\n        }\n        n = n/11;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your\
    \ solution, but I believe that `remainder` should be initialized to `0` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\n: Yes, you are right. Thanks for pointing that out.\
    \ I fixed it.\n<|/ c |>\n<| c |>\nI like your solution, but I believe that `remainder`\
    \ should be initialized to `0` instead of `1`.\n<|/ c |>\n<| c |>\n: Yes, you\
    \ are right. Thanks for pointing that out. I fixed it.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long i;\n    for(i = 1; i <= n; i++) {\n        if((i % 11) == 0 ||\
    \ i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your solution,\
    \ but I wonder why you chose to implement it this way. Why not just use an `if`\
    \ statement?\n<|/ c |>\n<| c |>\nI chose to implement it this way because I wanted\
    \ to show that you can use a for loop to solve this problem in O(1) time.\n<|/\
    \ c |>\n<| c |>\nI see. Thanks for your answer. I'm still new to programming and\
    \ I didn't know that you can do that with for loops. I guess I should learn more\
    \ about for loops :)\n<|/ c |>\n<| c |>\nI added a solution that uses only a for\
    \ loop and a while loop.\n<|/ c |>\n<| c |>\nI added a solution that uses only\
    \ a for loop and a while loop.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\t\
    long i;\n\tfor(i = 1; i <= n; i++){\n\t\tif((i % 11) == 0){\n\t\t\tif((i % 13)\
    \ == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}", "{\n   \
    \ long count = 0;\n    long remainder;\n    \n    while (n) {\n        remainder\
    \ = n % 10;\n        if (remainder == 7 || remainder == 11 || remainder == 13)\
    \ count++;\n        n = n / 10;\n    }\n    \n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do it without using any loops?\n<|/ c |>\n<| c |>\nI added\
    \ a solution without loops.\n<|/ c |>\n<| c |>\nI added a solution without loops.\n\
    <|/ c |>\n<| c |>\nI added a solution without loops.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long i;\n    \n    for(i = n; (i /= 10) != 0; i\
    \ /= 10)\n    {\n        remainder = i % 10;\n        if(remainder == 7)\n   \
    \     {\n            count += 1;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for(long i = n; i > 0; i /= 10) {\n        if((i % 11)\
    \ == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,c++11 |>\n<| c |>\n`fizz_buzz(78L)` returns\
    \ `3L` not `2L`\n<|/ c |>\n<| c |>\nYes, I missed that. Fixed now.\n<|/ c |>\n\
    <| c |>\n`fizz_buzz(78L)` returns `3L` not `2L`\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that. Fixed now.\n<|/ c |>\n<| c |>\n`fizz_buzz(78L)` returns `3L` not `2L`\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long i;\n    for(i = 1; i < n; i+=11)\n    {\n    \
    \    if((i % 11) == 0)\n        {\n            count += 1;\n        }\n    }\n\
    \    for(i = 1; i < n; i+=13)\n    {\n        if((i % 13) == 0)\n        {\n \
    \           count += 1;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't answer the question.\
    \ He wants to know how many times 7 appears in numbers divisible by 11 and 13.\
    \ Your solution only counts how many times 7 appears in numbers divisible by 11.\n\
    <|/ c |>\n<| c |>\n: I misread the question. My bad.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is the best so far, but I believe it can be improved by using a\
    \ `std::bitset` instead of a `long` for the counter.\n<|/ c |>\n<| c |>\n: I agree.\
    \ `std::bitset` would be a better choice.\n<|/ c |>\n<| c |>\n: I believe this\
    \ answer is the best so far, but I believe it can be improved by using a `std::bitset`\
    \ instead of a `long` for the counter.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long div = 11L;\n    long mod = 13L;\n    \n    while\
    \ (n >= div && n >= mod) {\n        count += 1;\n        div *= 11L;\n       \
    \ mod *= 13L;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| c |>\nI added\
    \ a version that uses `std::bitset` instead of `std::vector`.\n<|/ c |>\n<| a\
    \ tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long count = 0;\n    long div =\
    \ 11;\n    long mod;\n    \n    while (n > div) {\n        mod = n % div;\n  \
    \      if (mod != 0 && mod != 11 && mod != 13) {\n            count++;\n     \
    \   }\n        div *= 10;\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    for(long i=1; i<=n; i+=11)\n        if((i % 11) == 0)\n            count\
    \ += 1;\n    for(long i=1; i<=n; i+=13)\n        if((i % 13) == 0)\n         \
    \   count += 1;\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. `fizz_buzz(78L)` returns `2L` instead of\
    \ `3L`.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting it. I just\
    \ tested it again and I got `3L` as the output. Are you sure you tested it correctly?\n\
    <|/ c |>\n<| c |>\n: I tested it again and I got `3L` as the output. Are you sure\
    \ you tested it correctly?\n<|/ c |>\n<| c |>\n: I tested it again and I got `3L`\
    \ as the output. Are you sure you tested it correctly?\n<|/ c |>\n<| c |>\n: I\
    \ tested it again and I got `3L` as the output. Are you sure you tested it correctly?\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    for(long i = n; i > 0; i /= 11L) {\n        if((i %\
    \ 11L) == 7L) {\n            count++;\n        }\n    }\n    for(long i = n; i\
    \ > 0; i /= 13L) {\n        if((i % 13L) == 7L) {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78)`.\n<|/ c |>\n<| c\
    \ |>\n: It does work. `78` is divisible by both `11` and `13`, so `fizz_buzz(78)`\
    \ returns `2`.\n<|/ c |>\n<| c |>\n: I see what you mean. `fizz_buzz(78)` returns\
    \ `2` because `78` is divisible by both `11` and `13`, but `fizz_buzz(78L)` returns\
    \ `0` because `78L` is divisible by `11L` but not by `13L`.\n<|/ c |>\n<| c |>\n\
    : I fixed the bug in my answer.\n<|/ c |>\n<| c |>\n: I added a version that works\
    \ with `long long` instead of `long`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n#include\
    \ <iostream>\n#include <string>", "{\n    long count = 0;\n    long i;\n    for(i\
    \ = 1; i < n; ++i)\n    {\n        if(i % 11 == 0 || i % 13 == 0)\n          \
    \  ++count;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code does not work. Try it on `fizz_buzz(78L)`. It returns\
    \ `3L` instead of `2L`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've\
    \ fixed it now.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've fixed\
    \ it now.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've fixed it now.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing that out. I've fixed it now.\n<|/ c |>\n\
    <| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long digit;\n    for(digit = n; digit >\
    \ 0; digit /= 10) {\n        if(digit % 11 == 0 || digit % 13 == 0) {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long remainder;\n    long i;\n    \n    for(i = n /\
    \ 10; i; i = i / 10)\n    {\n        remainder = i % 10;\n        if(remainder\
    \ == 7 || remainder == 11)\n            count++;\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThanks so much for your help!\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long remainder;\n    long temp;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 10;\n        temp = remainder % 11;\n \
    \       if(temp == 7)\n        {\n            count++;\n        }\n        n =\
    \ n / 10;\n    }\n    return count;\n}", "{\n    long count = 0;\n    long digit\
    \ = n % 10;\n    long remainder = n % 10;\n    \n    if (remainder == 7)\n   \
    \ {\n        count += 1;\n    }\n    \n    if (remainder == 6)\n    {\n      \
    \  count += 1;\n    }\n    \n    if (remainder == 5)\n    {\n        count +=\
    \ 1;\n    }\n    \n    if (remainder == 4)\n    {\n        count += 1;\n    }\n\
    \    \n    if (remainder == 3)\n    {\n        count += 1;\n    }\n    \n    if\
    \ (remainder == 2)\n    {\n        count += 1;\n    }\n    \n    if (remainder\
    \ == 1)\n    {\n        count += 1;\n    }\n    \n    if (remainder == 0)\n  \
    \  {\n        count += 1;\n    }\n    \n    if (digit == 7)\n    {\n        count\
    \ += 1;\n    }\n    \n    if (digit == 6)\n    {\n        count += 1;\n    }\n\
    \    \n    if (digit == 5)\n    {\n        count += 1;\n    }\n    \n    if (digit\
    \ == 4)\n    {\n        count += 1;\n    }\n    \n    if (digit == 3)\n    {\n\
    \        count += 1;\n    }\n    \n    if (digit == 2)\n    {\n        count +=\
    \ 1;\n    }\n    \n    if (digit == 1)\n    {\n        count += 1;\n    }\n  \
    \  \n    if (digit == 0)\n    {\n        count += 1;\n    }\n    \n    return\
    \ count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it for\
    \ n = 50 and you'll see that it returns 0.\n<|/ c |>\n<| c |>\nYes, I see that\
    \ now. Thanks for pointing that out. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed\
    \ it. I had forgotten to change the remainder to `n % 10` instead of `n % 1`.\n\
    <|/ c |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "{\n    long count = 0;\n    long div = 11L;\n    long mod = 13L;\n \
    \   \n    while(n > div)\n    {\n        long temp = n % div;\n        \n    \
    \    if(temp == mod)\n        {\n            count++;\n        }\n        \n \
    \       div *= 10L;\n        mod *= 10L;\n    }\n    \n    return count;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\tlong x = n;\n\t\
    while (x>0) {\n\t\tif (x%11==7) {\n\t\t\tcount++;\n\t\t}\n\t\tif (x%13==7) {\n\
    \t\t\tcount++;\n\t\t}\n\t\tx = x/10;\n\t}\n\treturn count;\n}\n/*\nReturn the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13 and are divisible by 3 or 5.\n    >>> fizz_buzz_with_3_or_5(50L)\n\
    \    0L\n    >>> fizz_buzz_with_3_or_5(78L)\n    2L\n    >>> fizz_buzz_with_3_or_5(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_with_3_or_5(long n) \n{\n\tlong count = 0;\n\
    \tlong x = n;\n\twhile (x>0) {\n\t\tif (x%11==7) {\n\t\t\tcount++;\n\t\t}\n\t\t\
    if (x%13==7) {\n\t\t\tcount++;\n\t\t}\n\t\tif (x%3==7) {\n\t\t\tcount++;\n\t\t\
    }\n\t\tif (x%5==7) {\n\t\t\tcount++;\n\t\t}\n\t\tx = x/10;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13 and are divisible by 3 or 5.\n    >>> fizz_buzz_with_3_or_5(50L)\n\
    \    0L\n    >>> fizz_buzz_with_3_or_5(78L)\n    2L\n    >>> fizz_buzz_with_3_or_5(79L)\n\
    \    3L\n    \n*/\nlong fizz_buzz_with_3_or_5(long n) \n{\n\tlong count = 0;\n\
    \tlong x = n;\n\twhile (x>0) {\n\t\tif (x%11==7) {\n\t\t\tcount++;\n\t\t}\n\t\t\
    if (x%13==7) {\n\t\t\tcount++;\n\t\t}\n\t\tif (x%3==7) {\n\t\t\tcount++;\n\t\t\
    }\n\t\tif (x%5==7) {\n\t\t\tcount++;\n\t\t}\n\t\tx = x/10;\n\t}\n\treturn count;\n\
    }\n/*\nReturn the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13 and are divisible by 3 or 5.\n    >>> fizz_buzz_with_3_or_5(50L)\n\
    \    0L\n    >>> fizz_buzz_with_3_or_5(78L)\n    2L\n    >>> fizz_buzz_with_3_or_5(79L)\n\
    \    3L\n    \n*/", "{\n    long count = 0;\n    long div = 11L;\n    long mod\
    \ = 13L;\n    long x = n;\n    \n    while(x != 0)\n    {\n        long y = x\
    \ % div;\n        long z = x % mod;\n        \n        if(z == 7L)\n        {\n\
    \            count++;\n        }\n        \n        div = div * 10L;\n       \
    \ mod = mod * 10L;\n        x = x / 10L;\n    }\n    \n    return count;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\t\n\twhile (n >=\
    \ 1000) {\n\t\tcount += n % 10 == 7 ? 1 : 0;\n\t\tn /= 10;\n\t}\n\t\n\twhile (n\
    \ >= 100) {\n\t\tcount += n % 10 == 7 ? 1 : 0;\n\t\tn /= 10;\n\t}\n\t\n\twhile\
    \ (n >= 10) {\n\t\tcount += n % 10 == 7 ? 1 : 0;\n\t\tn /= 10;\n\t}\n\t\n\treturn\
    \ count;\n}", "{\n    long count = 0;\n    long div = 11L;\n    while (n > div)\
    \ {\n        if (n % div == 0)\n            count++;\n        div = div * 2L;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n\
    : I tested it and it works. I even tested it on `fizz_buzz(78L)` before posting\
    \ my answer. Did you try it?\n<|/ c |>\n<| c |>\n: I tested it on `fizz_buzz(78L)`\
    \ before posting my answer. Did you try it?\n<|/ c |>\n<| c |>\n: I tested it\
    \ on `fizz_buzz(78L)` before posting my answer. Did you try it?\n<|/ c |>\n<|\
    \ c |>\n: I tested it on `fizz_buzz(78L)` before posting my answer. Did you try\
    \ it?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n  \
    \  while (n>0) {\n        remainder = n % 10;\n        if (remainder == 7 || remainder\
    \ == 11 || remainder == 13) count++;\n        n = n / 10;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    long temp;\n    \n    temp = n % 11;\n    if\
    \ (temp == 0)\n        count += 1;\n    \n    temp = n % 13;\n    if (temp ==\
    \ 0)\n        count += 1;\n    \n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for the answer. I am not able to understand how this works.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nThe first line is\
    \ just to import the std library and type definitions. You don't need to do that\
    \ if you don't want to. `std` contains many useful types and functions. `typecons`\
    \ contains many useful type constructors. `math` contains many useful math functions.\
    \ `std.math` contains many useful math functions. `std.typecons` contains many\
    \ useful type constructors. `std.math` contains many useful math functions. `std.typecons`\
    \ contains many useful type constructors. `std.math` contains many useful math\
    \ functions. `std.typecons` contains many useful type constructors. `std.math`\
    \ contains many useful math functions. `std.typecons` contains many useful type\
    \ constructors. `std.math` contains many useful math functions. `std.typecons`\
    \ contains many useful type constructors. `std.math` contains many useful math\
    \ functions. `std.typecons` contains many useful type constructors. `std.math`\
    \ contains many useful math functions. `std.typecons` contains many useful type\
    \ constructors. `std.math` contains many useful math functions. `std.typecons`\
    \ contains many useful type constructors. `std.math` contains many useful math\
    \ functions. `std.typecons` contains many useful type constructors. `std.math`\
    \ contains many useful math functions. `std.typecons` contains many useful type\
    \ constructors. `std.math` contains many useful math functions. `std.typecons`\
    \ contains many useful type constructors. `std.math` contains many useful math\
    \ functions. `std.typecons` contains many useful type constructors. `std.math`\
    \ contains many useful math functions. `std.typecons` contains many useful type\
    \ constructors. `std.math` contains many useful math functions. `std.typecons`\
    \ contains many useful type constructors. `std.math` contains many useful math\
    \ functions. `std.typecons` contains many useful type constructors. `std.math`\
    \ contains many useful math functions. `std.", "{\n    long count = 0;\n    long\
    \ remainder;\n    \n    while (n>0)\n    {\n        remainder = n % 10;\n    \
    \    if (remainder == 7)\n        {\n            count++;\n        }\n       \
    \ n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    \n    for(long i = n; i > 0; i /= 10) {\n     \
    \   remainder = i % 10;\n        if(remainder == 7) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, but I wonder how it compares to other solutions\
    \ posted here?\n<|/ c |>\n<| c |>\nI like your solution as well, but I wonder\
    \ how it compares to other solutions posted here?\n<|/ c |>\n<| c |>\n: I added\
    \ a comparison of other solutions posted here. I also added a solution that uses\
    \ `std::to_string` instead of `std::to_chars`.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long x = n;\n    long remainder;\n    \n    while (x>0) {\n        remainder\
    \ = x % 11;\n        if (remainder == 7) {\n            count++;\n        }\n\
    \        x /= 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis is not the best solution. `fizz_buzz(78)` returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nI agree with you, this is just an example to show\
    \ how it works. But I agree with you that it's better to use a `while` loop to\
    \ solve this problem.\n<|/ c |>\n<| c |>\nI agree, it's better to use a while\
    \ loop to solve this problem. But the OP asked for a recursive solution. He didn't\
    \ ask for a while loop solution.\n<|/ c |>\n<| c |>\nI agree with you, it's better\
    \ to use a while loop to solve this problem. But the OP asked for a recursive\
    \ solution. He didn't ask for a while loop solution.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, it's better to use a while loop to solve this problem. But the OP\
    \ asked for a recursive solution. He didn't ask for a while loop solution.\n<|/\
    \ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long\
    \ o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n\
    \    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long\
    \ x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n\
    \    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long\
    \ g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n\
    \    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long\
    \ p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n\
    \    ", "{\n\tlong count = 0;\n\tfor (long i = n; i > 0; i /= 11L) {\n\t\tif (i\
    \ % 13L == 0)\n\t\t\tcount += 1;\n\t\telse if (i % 11L == 0)\n\t\t\tcount += 2;\n\
    \t}\n\treturn count;\n}", "{\n    long count = 0;\n    long i;\n    for(i = 1;\
    \ i <= n; i += 11)\n    {\n        if((i % 11) == 0)\n        {\n            count\
    \ += 1;\n        }\n    }\n    for(i = 1; i <= n; i += 13)\n    {\n        if((i\
    \ % 13) == 0)\n        {\n            count += 1;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis is not\
    \ correct. `fizz_buzz(78L)` returns `3L` but `fizz_buzz(79L)` returns `2L`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug, thanks. I missed that `fizz_buzz(79L)` returns\
    \ `3L` instead of `2L`.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ that is also O(n).\n<|/ c |>\n<| c |>\n: I added a more efficient solution that\
    \ is also O(n).\n<|/ c |>\n<| c |>\n: I added a more efficient solution that is\
    \ also O(n).\n<|/ c |>\n<| a dscore=4 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 10;\n        if(remainder == 7 || remainder ==\
    \ 11)\n            count++;\n        n /= 10;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI didn't downvote, but I suspect it's because you\
    \ didn't explain what was wrong with OP's code. Also, your code is more complicated\
    \ than it needs to be. `n % 10` will never return `0`, so you can just do `while\
    \ (n) { if (n % 10 == 7) count++; n /= 10; }`\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ either, but I think it's because you didn't explain what was wrong with OP's\
    \ code. Also, your code is more complicated than it needs to be. `n % 10` will\
    \ never return `0`, so you can just do `while (n) { if (n % 10 == 7) count++;\
    \ n /= 10; }`\n<|/ c |>\n<| c |>\nI didn't downvote either, but I think it's because\
    \ you didn't explain what was wrong with OP's code. Also, your code is more complicated\
    \ than it needs to be. `n % 10` will never return `0`, so you can just do `while\
    \ (n) { if (n % 10 == 7) count++; n /= 10; }`\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ either, but I think it's because you didn't explain what was wrong with OP's\
    \ code. Also, your code is more complicated than it needs to be. `n % 10` will\
    \ never return `0`, so you can just do `while (n) { if (n % 10 == 7) count++;\
    \ n /= 10; }`\n<|/ c |>\n<| c |>\nI didn't downvote either, but I think it's because\
    \ you didn't explain what was wrong with OP's code. Also, your code is more complicated\
    \ than it needs to be. `n % 10` will never return `0`, so you can just do `while\
    \ (n) { if (n % 10 == 7) count++; n /= 10; }`\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long dividend = n;\n    \n    while(dividend !=\
    \ 0) {\n        remainder = dividend % 11;\n        if (remainder == 7) {\n  \
    \          count++;\n        }\n        dividend = dividend / 11;\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    long i;\n    for(i = 0; i <\
    \ n; ++i)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n        {\n      \
    \      count += 1;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "{\n    long count = 0;\n    long temp;\n   \
    \ \n    temp = n;\n    \n    while (temp > 0) {\n        if (temp % 11 == 0 ||\
    \ temp % 13 == 0) {\n            count++;\n        }\n        temp /= 10;\n  \
    \  }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| a tags=fizzbuzz,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\
    \twhile (n >= 100) {\n\t\tcount += n % 11;\n\t\tn /= 11;\n\t}\n\twhile (n >= 10)\
    \ {\n\t\tcount += n % 11;\n\t\tn /= 11;\n\t}\n\twhile (n >= 1) {\n\t\tcount +=\
    \ n % 11;\n\t\tn /= 11;\n\t}\n\treturn count;\n}\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 10 or 11.\n\
    \    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    1L\n    >>> fizz_buzz(79L)\n\
    \    2L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\twhile (n >=\
    \ 100) {\n\t\tcount += n % 10;\n\t\tn /= 10;\n\t}\n\twhile (n >= 10) {\n\t\tcount\
    \ += n % 10;\n\t\tn /= 10;\n\t}\n\twhile (n >= 1) {\n\t\tcount += n % 10;\n\t\t\
    n /= 10;\n\t}\n\treturn count;\n}\n/*\nReturn the number of times the digit 7\
    \ appears in integers less than n which are divisible by 10 or 11.\n    >>> fizz_buzz(50L)\n\
    \    0L\n    >>> fizz_buzz(78L)\n    1L\n    >>> fizz_buzz(79L)\n    2L\n    \n\
    */\nlong fizz_buzz(long n) \n{\n\tlong count = 0;\n\twhile (n >= 100) {\n\t\t\
    count += n % 10;\n\t\tn /= 10;\n\t}\n\twhile (n >= 10) {\n\t\tcount += n % 10;\n\
    \t\tn /= 10;\n\t}\n\twhile (n >= 1) {\n\t\tcount += n % 10;\n\t\tn /= 10;\n\t\
    }\n\treturn count;\n}\n/*\nReturn the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 9 or 10.\n    >>> fizz_buzz(50L)\n    0L\n\
    \    >>> fizz_buzz(78L)\n    1L\n    >>> fizz_buzz(79L)\n    2L\n    \n*/\nlong\
    \ fizz_buzz(long n) \n{\n\tlong count = 0;\n\twhile (n >= 100) {\n\t\tcount +=\
    \ n % 9;\n\t\tn /= 9;\n\t}\n\twhile (n >= 10) {\n\t\tcount += n % 9;\n\t\tn /=\
    \ 9;\n\t}\n\twhile (n >= 1) {\n\t\tcount += n % 9;\n\t\tn /= 9;\n\t}\n\treturn\
    \ count;\n}\n/*\nReturn the number of ", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n) {\n        remainder = n % 10;\n        if (remainder ==\
    \ 7 || remainder == 11 || remainder == 13) {\n            count++;\n        }\n\
    \        n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nI like this solution, it's very simple, easy to understand, and\
    \ easy to understand. Thanks!\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long temp;\n\
    \    long i;\n    \n    temp = n;\n    \n    while(temp > 0)\n    {\n        i\
    \ = temp % 11;\n        temp = temp / 11;\n        \n        if(i == 7)\n    \
    \    {\n            count++;\n        }\n    }\n    \n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ library functions. I did try to use your solution but I am not able to figure\
    \ out how to implement it. Can you please help me with that?\n<|/ c |>\n<| c |>\n\
    I added a solution that uses no library functions. I hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks a lot for the help. I really appreciate it. I tried the code but\
    \ it is not giving me the correct output. I am getting a wrong answer for the\
    \ input of 50. Can you please help me with that?\n<|/ c |>\n<| c |>\nI added a\
    \ solution that uses no library functions. I hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks a lot for the help. I really appreciate it. I tried the code but it is\
    \ not giving me the correct output. I am getting a wrong answer for the input\
    \ of 50. Can you please help me with that?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.Scanner;",
  "{\n    long count = 0;\n    long div = 11L;\n    while (n > div) {\n        if\
    \ (n % div == 0)\n            count += 1;\n        div *= 11L;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long remainder;\n    \n    while (n>0)\
    \ {\n        remainder = n%11;\n        if (remainder == 7 || remainder == 13)\
    \ count++;\n        n = n/11;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code. Also, your code is very inefficient, since it\
    \ does division repeatedly and doesn't use any built-in functions. You also don't\
    \ explain why you think it's inefficient.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I just wanted to show a solution that is easy to understand and easy to understand.\
    \ Also I wanted to show that OP can easily modify his code by adding some conditions.\
    \ I didn't want to give a complete solution. Also I wanted to show that OP can\
    \ easily modify his code by adding some conditions. I didn't want to give a complete\
    \ solution. Also I wanted to show that OP can easily modify his code by adding\
    \ some conditions. I didn't want to give a complete solution. Also I wanted to\
    \ show that OP can easily modify his code by adding some conditions. I didn't\
    \ want to give a complete solution. Also I wanted to show that OP can easily modify\
    \ his code by adding some conditions. I didn't want to give a complete solution.\
    \ Also I wanted to show that OP can easily modify his code by adding some conditions.\
    \ I didn't want to give a complete solution.\n<|/ c |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain what was wrong with OP's code.\
    \ Also, your code is very inefficient, since it does division repeatedly and doesn't\
    \ use any built-in functions. You also don't explain why you think it's inefficient.\n\
    <|/ c |>\n<| c |>\nI agree with you. I just wanted to show a solution that is\
    \ easy to understand and easy to understand. Also I wanted to show that OP can\
    \ easily modify his code by adding some conditions. I didn't want to give a complete\
    \ solution. Also I wanted to show that OP can easily modify his code by adding\
    \ some conditions. I didn't want to give a complete solution. Also I wanted to\
    \ show that OP can easily modify his code by adding some conditions. I didn't\
    \ want to give a complete solution. Also I wanted to show that OP can easily modify\
    \ his code by adding some conditions. I didn't want to give a complete solution.\
    \ Also I wanted to show that OP can easily modify his code ", "{\n    long count\
    \ = 0;\n    long x = n;\n    long y = x;\n    long z = 0;\n    long w = 0;\n \
    \   \n    while(y != 0)\n    {\n        z = y % 10;\n        w = y / 10;\n   \
    \     \n        if(z == 7)\n        {\n            count++;\n        }\n     \
    \   \n        y = w;\n    }\n    \n    return count;\n}", "{\n    long count =\
    \ 0;\n    long remainder;\n    long i;\n    \n    for(i = 1; i <= n; i++) {\n\
    \        remainder = n % i;\n        if (remainder == 0 || remainder == 11 ||\
    \ remainder == 13) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like the idea of\
    \ using remainder, but I wonder if there's a way to do this without using remainder.\
    \ I'm thinking about this for a while and I'm wondering if there's some way to\
    \ do this without using remainder.\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ remainder. Hope it helps.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ if there's a way to do this without using remainder. I'm thinking about this\
    \ for a while and I'm wondering if there's some way to do this without using remainder.\n\
    <|/ c |>\n<| c |>\n: I added a solution without remainder. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nI like your solution, but I wonder if there's a way to do this\
    \ without using remainder. I'm thinking about this for a while and I'm wondering\
    \ if there's some way to do this without using remainder.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long i;\n    for(i = 1; i <= n; i++) {\n        if(i % 11 == 0 || i % 13\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n\tlong count = 0;\n\twhile (n > 0)\n\t{\n\t\tlong remainder\
    \ = n % 11;\n\t\tif (remainder == 0 || remainder == 7)\n\t\t\tcount++;\n\t\tn\
    \ = n / 11;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n    while (n >\
    \ 0)\n    {\n        long remainder = n % 10;\n        if (remainder == 7)\n \
    \       {\n            count++;\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your\
    \ solution, however it only works for numbers divisible by 11 or 13. For example,\
    \ fizz_buzz(78) returns 2 instead of 3.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it.  Thanks.\n<|/ c |>\n<| c |>\nI like your solution, however it\
    \ only works for numbers divisible by 11 or 13. For example, fizz_buzz(78) returns\
    \ 2 instead of 3.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it.  Thanks.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n  \
    \  long count = 0;\n    long remainder;\n    long i;\n    for(i = n;i >= 1000;i--)\n\
    \    {\n        remainder = i % 11;\n        if(remainder == 0 || remainder ==\
    \ 7)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    while (n>0) {\n        remainder = n%11;\n        if (remainder ==\
    \ 7 || remainder == 13) {\n            count++;\n        }\n        n = n/11;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code does\
    \ not work if n is negative.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long\
    \ count = 0;\n    long i;\n    for(i = 0; i <= n; i++)\n    {\n        if((i %\
    \ 11) == 0 || i % 13 == 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\n\
    I didn't know that `std::count` existed! Thanks for teaching me something new!\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long count = 0;\n    long remainder;\n\
    \    \n    for(long i = 0; i <= n; i++){\n        remainder = n % 10;\n      \
    \  if(remainder == 7 || remainder == 11 || remainder == 13){\n            count++;\n\
    \        }\n        n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code does not work. Try it with `fizz_buzz(78L)` which should\
    \ return `3L` but instead returns `0L`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it now. Thanks.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks.\n<|/ c\
    \ |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    long count = 0;\n    long x = n;\n\
    \    long y = n;\n    long z = 0;\n    \n    while (x != 0)\n    {\n        z\
    \ = x % 10;\n        if (z == 7)\n        {\n            count++;\n        }\n\
    \        x = x / 10;\n    }\n    \n    while (y != 0)\n    {\n        z = y %\
    \ 10;\n        if (z == 7)\n        {\n            count++;\n        }\n     \
    \   y = y / 10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nI like how you used the modulus operator to find the number of\
    \ times 7 appears in an integer.\n<|/ c |>\n<| c |>\nI like how you used the modulus\
    \ operator to find the number of times 7 appears in an integer.\n<|/ c |>\n<|\
    \ c |>\nI like how you used the modulus operator to find the number of times 7\
    \ appears in an integer.\n<|/ c |>\n<| c |>\nI like how you used the modulus operator\
    \ to find the number of times 7 appears in an integer.\n<|/ c |>\n<| c |>\nI like\
    \ how you used the modulus operator to find the number of times 7 appears in an\
    \ integer.\n<|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long d = n % 11;\n    long\
    \ e = n % 13;\n    long f = n % 7;\n    long g = n % 3;\n    long h = n % 5;\n\
    \    long i = n % 1;\n    long j = n % 9;\n    long k = n % 7;\n    long l = n\
    \ % 3;\n    long m = n % 5;\n    long n = n % 1;\n    long o = n % 9;\n    long\
    \ p = n % 7;\n    long q = n % 3;\n    long r = n % 5;\n    long s = n % 1;\n\
    \    long t = n % 9;\n    long u = n % 7;\n    long v = n % 3;\n    long w = n\
    \ % 5;\n    long x = n % 1;\n    long y = n % 9;\n    long z = n % 7;\n    long\
    \ a = n % 3;\n    long b = n % 5;\n    long c = n % 1;\n    long d = n % 9;\n\
    \    long e = n % 7;\n    long f = n % 3;\n    long g = n % 5;\n    long h = n\
    \ % 1;\n    long i = n % 9;\n    long j = n % 7;\n    long k = n % 3;\n    long\
    \ l = n % 5;\n    long m = n % 1;\n    long n = n % 9;\n    long o = n % 7;\n\
    \    long p = n % 3;\n    long q = n % 5;\n    long r = n % 1;\n    long s = n\
    \ % 9;\n    long t = n % 7;\n    long u = n % 3;\n    long v = n % 5;\n    long\
    \ w = n % 1;\n    long x = n % 9;\n    long y = n % 7;\n    long z = n % 3;\n\
    \    long a = n % 5;\n    long b = n % 1;\n    long c = n % 9;\n    long d = n\
    \ % 7;\n    long e = n % 3;\n    long f = n % 5;\n    long g = n % 1;\n    long\
    \ h = n % 9;\n    long i = n % 7;\n    long j = n % 3;\n    long k = n % 5;\n\
    \    long l = n % 1;\n    long m = n % 9;\n    long n = n % 7;\n    long o = n\
    \ % 3;\n    long p = n % 5;\n    long q = n % 1;\n    long r = n % 9;\n    long\
    \ s = n % 7;\n    long t = n % 3;\n    long u = n % 5;\n    long v = n % 1;\n\
    \    long w = n % 9;\n    long x = n % 7;\n    long y = n % 3;\n    long z = n\
    \ % 5;\n    long a = n % 1;\n    long b = n % 9;\n    long c = n % 7;\n    long\
    \ d = n % 3;\n    long e = n % 5;\n    long f = n % 1;\n    long g = n % 9;\n\
    \    long h = n % 7;\n    long i = n % 3;\n    long ", "{\n    long count = 0;\n\
    \    for(long i = n; i > 0; i /= 11L) {\n        if((i % 11L) == 7L) {\n     \
    \       count++;\n        }\n    }\n    for(long i = n; i > 0; i /= 13L) {\n \
    \       if((i % 13L) == 7L) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution. Very elegant\
    \ and easy to understand.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long count\
    \ = 0;\n    while (n > 0)\n    {\n        if (n % 11 == 0 || n % 13 == 0)\n  \
    \          count++;\n        n = n / 10;\n    }\n    return count;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis code doesn't work. Try it with `fizz_buzz(123)`.\n<|/\
    \ c |>\n<| c |>\n: It works fine for me. `fizz_buzz(123)` returns `2`.\n<|/ c\
    \ |>\n<| c |>\n: It works for me too. `fizz_buzz(123)` returns `2`.\n<|/ c |>\n\
    <| c |>\n: It works for me too. `fizz_buzz(123)` returns `2`.\n<|/ c |>\n<| c\
    \ |>\n: It works for me too. `fizz_buzz(123)` returns `2`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "{\n    long count = 0;\n    long remainder;\n    \n    for(long\
    \ i = n; i > 0; i /= 10) {\n        remainder = i % 10;\n        if((remainder\
    \ == 7) && (i % 11 == 0) || (remainder == 7) && (i % 13 == 0)) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i <= n; i++) {\n\
    \        if((i % 11) == 0 || i % 13 == 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    long remainder;\n\
    \    long i;\n    for(i = n; (remainder = i / 11) != 0; i = remainder)\n    {\n\
    \        if((remainder % 11) == 7)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nThis code doesn't work. Try it with 50 and you'll see that it returns\
    \ 0 instead of 2.\n<|/ c |>\n<| c |>\n: I tested it with 50 and it returns 2.\
    \ I also tested it with 78 and it returns 3. Are you sure you tested it with 50?\n\
    <|/ c |>\n<| c |>\n: I tested it with 50 and it returns 2. I also tested it with\
    \ 78 and it returns 3. Are you sure you tested it with 50?\n<|/ c |>\n<| c |>\n\
    : I tested it with 50 and it returns 2. I also tested it with 78 and it returns\
    \ 3. Are you sure you tested it with 50?\n<|/ c |>\n<| c |>\n: I tested it with\
    \ 50 and it returns 2. I also tested it with 78 and it returns 3. Are you sure\
    \ you tested it with 50?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long count = 0;\n    while (n\
    \ > 0)\n    {\n        if (n % 11 == 0)\n            count += 1;\n        if (n\
    \ % 13 == 0)\n            count += 1;\n        n /= 10;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=c++,fizzbuzz,algorithm |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do it without using any loops.\n<|/ c |>\n\
    <| c |>\nI added a solution without loops.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without using any loops.\n<|/ c |>\n\
    <| c |>\nI added a solution without loops.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without using any loops.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long count = 0;\n    while (n > 0)\n    {\n        if (n % 11 == 0 || n % 13\
    \ == 0)\n            count++;\n        n = n / 10;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n: I tested it and it works.\
    \ I even tested it on `fizz_buzz(78L)` before posting my answer. `fizz_buzz(78L)`\
    \ returns `2L` which is correct.\n<|/ c |>\n<| c |>\n: I tested it on `fizz_buzz(78L)`\
    \ before posting my answer. `fizz_buzz(78L)` returns `2L` which is correct.\n\
    <|/ c |>\n<| c |>\n: I tested it on `fizz_buzz(78L)` before posting my answer.\
    \ `fizz_buzz(78L)` returns `2L` which is correct.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on `fizz_buzz(78L)` before posting my answer. `fizz_buzz(78L)` returns `2L`\
    \ which is correct.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    for(long i =\
    \ n; i > 0; i /= 11)\n    {\n        if(i % 11 == 7)\n            count++;\n \
    \   }\n    for(long i = n; i > 0; i /= 13)\n    {\n        if(i % 13 == 7)\n \
    \           count++;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis solution does not work for numbers divisible by both 11 and\
    \ 13. For example, fizz_buzz(78) returns 2 instead of 3.\n<|/ c |>\n<| c |>\n\
    Yes, I see that now. I've updated my answer to account for that.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    long temp;\n    \n\
    \    while(n > 0)\n    {\n        remainder = n % 10;\n        temp = remainder\
    \ % 11;\n        if(temp == 0 || temp == 7)\n        {\n            count++;\n\
    \        }\n        n = n / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nThis doesn't work. Try it for n = 78.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that doesn't use any loops.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ use any loops.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't use any\
    \ loops.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long count = 0;\n    long div = 11L;\n    long\
    \ remainder;\n    \n    while (n>0) {\n        remainder = n % div;\n        if\
    \ (remainder == 7L) {\n            count++;\n        }\n        div = div * 10L;\n\
    \        n = n / div;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThe `div` variable should be initialized to `11L` instead of `10L`.\n\
    <|/ c |>\n<| c |>\nThanks, I fixed that.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "{\n    long count = 0;\n    long remainder;\n    \n    while (n>0) {\n        remainder\
    \ = n % 11;\n        if (remainder == 0 || remainder == 7) {\n            count++;\n\
    \        }\n        n = n / 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\n`fizz_buzz(78L)` returns `3L` instead of `2L`.\n<|/ c |>\n<| c\
    \ |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n`fizz_buzz(78L)` returns `3L`\
    \ instead of `2L` because `78L` can be divided by `11` only once. `78L` can be\
    \ divided by `11` twice and `78L` can be divided by `13` once. `78L` can be divided\
    \ by `13` twice and `78L` can be divided by `11` once. `78L` can be divided by\
    \ `11` three times and `78L` can be divided by `13` once. `78L` can be divided\
    \ by `13` three times and `78L` can be divided by `11` once. `78L` can be divided\
    \ by `11` four times and `78L` can be divided by `13` once. `78L` can be divided\
    \ by `13` four times and `78L` can be divided by `11` once. `78L` can be divided\
    \ by `11` five times and `78L` can be divided by `13` once. `78L` can be divided\
    \ by `13` five times and `78L` can be divided by `11` once. `78L` can be divided\
    \ by `11` six times and `78L` can be divided by `13` once. `78L` can be divided\
    \ by `13` six times and `78L` can be divided by `11` once. `78L` can be divided\
    \ by `11` seven times and `78L` can be divided by `13` once. `78L` can be divided\
    \ by `13` seven times and `78L` can be divided by `11` once. `78L` can be divided\
    \ by `11` eight times and `78L` can be divided by `13` once. `78L` can be divided\
    \ by `13` eight times and `78L` can be divided by `", "{\n    long count = 0;\n\
    \    long temp;\n    \n    temp = n;\n    \n    while (temp > 0) {\n        if\
    \ (temp % 11 == 0 || temp % 13 == 0) {\n            count++;\n        }\n    \
    \    temp /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long remainder;\n    long i;\n    for(i = 1; i <= n;\
    \ i++) {\n        remainder = i % 11;\n        if (remainder == 7) {\n       \
    \     count++;\n        }\n        if (remainder == 13) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to avoid the\
    \ extra loop? I suspect there is, but I haven't thought of it yet.\n<|/ c |>\n\
    <| c |>\nI suspect there is, but I haven't thought of it yet. I'll post it here\
    \ when I find it.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ loops.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long i;\n    for(i = 0; i < n; ++i)\n  \
    \  {\n        if((i % 11) == 0 || i % 13 == 0)\n        {\n            ++count;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1, n+1):\n\
    \        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\
    </code>\n<|/ a tags=fizzbuzz,python |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def fizz_buzz(n):\n    count = 0\n    for i in range(1, n+1):\n        if i %\
    \ 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n</code>\n\
    <|/ a tags=fizzbuzz,python |>\n<| a tags=fizzbuzz,python |>\n<code>\ndef fizz_buzz(n):\n\
    \    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13\
    \ == 0:\n            count += 1\n    return count\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef fizz_buzz(n):\n    count = 0\n\
    \    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n       \
    \     count += 1\n    return count\n</code>\n<|/ a tags=fizzbuzz,python |>\n<|\
    \ a dscore=0 |>\n<code>\ndef fizz_buzz(n):\n    count = 0\n    for i in range(1,\
    \ n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return\
    \ count\n</code>\n<|/ a tags=fizzbuzz,python |>\n<| a dscore=0 |>\n<code>\ndef\
    \ fizz_buzz(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 11\
    \ == 0 or i % 13 == 0:\n            count += 1\n    return count\n</code>\n<|/\
    \ a tags=fizzbuzz,python |>\n<| a dscore=0 |>\n<code>\ndef fizz_buzz(n):\n   \
    \ count = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 ==\
    \ 0:\n            count += 1\n    return count\n</code>\n<|/ a tags=fizzbuzz,python ",
  "{\n    long count = 0;\n    long div = 11L;\n    while (n > div) {\n        if\
    \ (n % div == 0)\n            count++;\n        div = div * 3L;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThanks for\
    \ the answer. Can you please explain why you used the long type for n?\n<|/ c\
    \ |>\n<| c |>\nThe `long` type is a 64-bit integer type. `long long` is a 64-bit\
    \ integer type. `long` is 32-bit integer type. `long long` is 64-bit integer type.\
    \ `long` is 32-bit integer type. `long long` is 64-bit integer type. `long` is\
    \ 32-bit integer type. `long long` is 64-bit integer type. `long` is 32-bit integer\
    \ type. `long long` is 64-bit integer type. `long` is 32-bit integer type. `long\
    \ long` is 64-bit integer type. `long` is 32-bit integer type. `long long` is\
    \ 64-bit integer type. `long` is 32-bit integer type. `long long` is 64-bit integer\
    \ type. `long` is 32-bit integer type. `long long` is 64-bit integer type. `long`\
    \ is 32-bit integer type. `long long` is 64-bit integer type. `long` is 32-bit\
    \ integer type. `long long` is 64-bit integer type. `long` is 32-bit integer type.\
    \ `long long` is 64-bit integer type. `long` is 32-bit integer type. `long long`\
    \ is 64-bit integer type. `long` is 32-bit integer type. `long long` is 64-bit\
    \ integer type. `long` is 32-bit integer type. `long long` is 64-bit integer type.\
    \ `long` is 32-bit integer type. `long long` is 64-bit integer type. `long` is\
    \ 32-bit integer type. `long long` is 64-bit integer type. `long` is 32-bit integer\
    \ type. `long long` is 64-bit integer type. `long` is 32-bit integer type. `long\
    \ long` is 64-bit integer type. `long` is 32-bit integer type. `long long` is\
    \ 64-bit integer type. `long` is 32-bit integer type. `long long` is 64-bit integer\
    \ type. `long` is 32-bit integer type. `long long` is 64-bit integer type. `long`\
    \ is 32-bit integer type. `long long` is 64-bit integer type. `long` is 32-bit\
    \ integer type. `long long` is 64-bit integer type. `long` is 32-bit integer type.\
    \ `long long` is 64-bit integer type. `long` is 32-bit integer type. `long long`\
    \ is 64-bit integer type. `long` is 32-bit integer type. `long long` is 64-bit\
    \ integer type. `long` is 32-bit integer type. `long long` is 64-bit integer type.\
    \ `long` is 32-bit integer type. `long long` is 64-bit integer type. `long` is\
    \ 32-bit integer type. ", "{\n    long count = 0;\n    long i;\n    for(i = 0;\
    \ i < n; ++i)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n            ++count;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nI like your solution, but I wonder how it compares to other solutions\
    \ posted here?\n<|/ c |>\n<| c |>\n: It doesn't compare with other solutions posted\
    \ here. It compares against the other solutions posted here. It also compares\
    \ against the other solutions posted here. It also compares against the other\
    \ solutions posted here. It also compares against the other solutions posted here.\
    \ It also compares against the other solutions posted here. It also compares against\
    \ the other solutions posted here. It also compares against the other solutions\
    \ posted here. It also compares against the other solutions posted here. It also\
    \ compares against the other solutions posted here. It also compares against the\
    \ other solutions posted here. It also compares against the other solutions posted\
    \ here. It also compares against the other solutions posted here. It also compares\
    \ against the other solutions posted here. It also compares against the other\
    \ solutions posted here. It also compares against the other solutions posted here.\
    \ It also compares against the other solutions posted here. It also compares against\
    \ the other solutions posted here. It also compares against the other solutions\
    \ posted here. It also compares against the other solutions posted here. It also\
    \ compares against the other solutions posted here. It also compares against the\
    \ other solutions posted here. It also compares against the other solutions posted\
    \ here. It also compares against the other solutions posted here. It also compares\
    \ against the other solutions posted here. It also compares against the other\
    \ solutions posted here. It also compares against the other solutions posted here.\
    \ It also compares against the other solutions posted here. It also compares against\
    \ the other solutions posted here. It also compares against the other solutions\
    \ posted here. It also compares against the other solutions posted here. It also\
    \ compares against the other solutions posted here. It also compares against the\
    \ other solutions posted here. It also compares against the other solutions posted\
    \ here. It also compares against the other solutions posted here. It ", "{\n \
    \   long count = 0;\n    long div = 11L;\n    long mod;\n    \n    while (n >\
    \ div) {\n        mod = n % div;\n        if (mod != 0 && mod != 7) {\n      \
    \      count++;\n        }\n        div = div * 3L;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try fizz_buzz(50L).\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It\
    \ returns 0 for the input you mentioned.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case for you. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a test case for\
    \ you. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a test case for you. Try\
    \ it yourself.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long remainder;\n    \n    while (n>0) {\n        remainder = n % 10;\n \
    \       if (remainder == 7 || remainder == 11 || remainder == 13) {\n        \
    \    count++;\n        }\n        n = n / 10;\n    }\n    return count;\n}", "{\n\
    \tlong count = 0;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong m;\n\tlong n;\n\tlong\
    \ p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong\
    \ w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong A;\n\tlong B;\n\tlong C;\n\tlong\
    \ D;\n\tlong E;\n\tlong F;\n\tlong G;\n\tlong H;\n\tlong I;\n\tlong J;\n\tlong\
    \ K;\n\tlong L;\n\tlong M;\n\tlong N;\n\tlong O;\n\tlong P;\n\tlong Q;\n\tlong\
    \ R;\n\tlong S;\n\tlong T;\n\tlong U;\n\tlong V;\n\tlong W;\n\tlong X;\n\tlong\
    \ Y;\n\tlong Z;\n\tlong _1;\n\tlong _2;\n\tlong _3;\n\tlong _4;\n\tlong _5;\n\t\
    long _6;\n\tlong _7;\n\tlong _8;\n\tlong _9;\n\tlong _10;\n\tlong _11;\n\tlong\
    \ _12;\n\tlong _13;\n\tlong _14;\n\tlong _15;\n\tlong _16;\n\tlong _17;\n\tlong\
    \ _18;\n\tlong _19;\n\tlong _20;\n\tlong _21;\n\tlong _22;\n\tlong _23;\n\tlong\
    \ _24;\n\tlong _25;\n\tlong _26;\n\tlong _27;\n\tlong _28;\n\tlong _29;\n\tlong\
    \ _30;\n\tlong _31;\n\tlong _32;\n\tlong _33;\n\tlong _34;\n\tlong _35;\n\tlong\
    \ _36;\n\tlong _37;\n\tlong _38;\n\tlong _39;\n\tlong _40;\n\tlong _41;\n\tlong\
    \ _42;\n\tlong _43;\n\tlong _44;\n\tlong _45;\n\tlong _46;\n\tlong _47;\n\tlong\
    \ _48;\n\tlong _49;\n\tlong _50;\n\tlong _51;\n\tlong _52;\n\tlong _53;\n\tlong\
    \ _54;\n\tlong _55;\n\tlong _56;\n\tlong _57", "{\n    long count = 0;\n    long\
    \ remainder = n;\n    long counter = 0;\n    \n    while (remainder > 0)\n   \
    \ {\n        counter++;\n        remainder = remainder / 10;\n    }\n    \n  \
    \  if (remainder == 0)\n    {\n        count = counter;\n    }\n    \n    if (remainder\
    \ == 1)\n    {\n        count = counter + 1;\n    }\n    \n    if (remainder ==\
    \ 2)\n    {\n        count = counter + 2;\n    }\n    \n    if (remainder == 3)\n\
    \    {\n        count = counter + 3;\n    }\n    \n    if (remainder == 4)\n \
    \   {\n        count = counter + 4;\n    }\n    \n    if (remainder == 5)\n  \
    \  {\n        count = counter + 5;\n    }\n    \n    if (remainder == 6)\n   \
    \ {\n        count = counter + 6;\n    }\n    \n    if (remainder == 7)\n    {\n\
    \        count = counter + 7;\n    }\n    \n    if (remainder == 8)\n    {\n \
    \       count = counter + 8;\n    }\n    \n    if (remainder == 9)\n    {\n  \
    \      count = counter + 9;\n    }\n    \n    if (remainder == 10)\n    {\n  \
    \      count = counter + 10;\n    }\n    \n    if (remainder == 11)\n    {\n \
    \       count = counter + 11;\n    }\n    \n    if (remainder == 12)\n    {\n\
    \        count = counter + 12;\n    }\n    \n    if (remainder == 13)\n    {\n\
    \        count = counter + 13;\n    }\n    \n    return count;\n}\n</code>\n<|/\
    \ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThe `remainder` variable is unnecessary.\
    \ Just use `counter` instead.\n<|/ c |>\n<| c |>\nThe `remainder` variable is\
    \ necessary because `counter` will never be `0`.\n<|/ c |>\n<| c |>\nThe `remainder`\
    \ variable is necessary because `counter` will never be `0`.\n<|/ c |>\n<| c |>\n\
    The `remainder` variable is necessary because `counter` will never be `0`.\n<|/\
    \ c |>\n<| c |>\nThe `remainder` variable is necessary because `counter` will\
    \ never be `0`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long x = n;\n    long y = x;\n\
    \    long z = 0;\n    long w = 0;\n    long v = 0;\n    long u = 0;\n    \n  \
    \  while(y != 0)\n    {\n        z = y % 10;\n        w = y / 10;\n        v =\
    \ z * z + w * w;\n        if(v == 7)\n        {\n            count++;\n      \
    \  }\n        y = x / 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n\tlong count = 0;\n\twhile (n != 0)\n\t{\n\t\tlong remainder = n\
    \ % 10;\n\t\tif (remainder == 7)\n\t\t{\n\t\t\tcount += 1;\n\t\t}\n\t\tn /= 10;\n\
    \t}\n\treturn count;\n}", "{\n    long count = 0;\n    long digit;\n    \n   \
    \ for (digit = 1; digit <= n; digit++) {\n        if (n % digit == 0) {\n    \
    \        if (digit % 11 == 0 || digit % 13 == 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't answer the question. The OP wants to know how many\
    \ times 7 appears in numbers divisible by 11 or 13. Your code only counts how\
    \ many times 7 appears in numbers divisible by 11 or 13.\n<|/ c |>\n<| c |>\n\
    : I missed that part. Updated my answer.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that counts how many times 7 appears in numbers divisible by 11 or 13. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\n: I added a solution that counts how many times\
    \ 7 appears in numbers divisible by 11 or 13. Hope it helps.\n<|/ c |>\n<| c |>\n\
    : I added a solution that counts how many times 7 appears in numbers divisible\
    \ by 11 or 13. Hope it helps.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n\
    <code>\n#include <iostream>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long i;\n    for(i = 1; i <= n; i++) {\n        if((i % 11) == 0 || i % 13\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your solution, but I believe\
    \ that `i % 11 == 0 || i % 13 == 0` should be `i % 11 == 0 || i % 13 == 0`. Otherwise\
    \ `fizz_buzz(78)` will return `3` instead of `2`.\n<|/ c |>\n<| c |>\nI believe\
    \ that `i % 11 == 0 || i % 13 == 0` should be `i % 11 == 0 || i % 13 == 0`. Otherwise\
    \ `fizz_buzz(78)` will return `3` instead of `2`.\n<|/ c |>\n<| c |>\n: Yes, you\
    \ are right. I fixed it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long count = 0;\n    long remainder\
    \ = n % 11;\n    long remainder2 = n % 13;\n    long remainder3 = n % 17;\n  \
    \  long remainder4 = n % 19;\n    long remainder5 = n % 23;\n    long remainder6\
    \ = n % 29;\n    long remainder7 = n % 37;\n    long remainder8 = n % 47;\n  \
    \  long remainder9 = n % 55;\n    long remainder10 = n % 63;\n    long remainder11\
    \ = n % 79;\n    long remainder12 = n % 87;\n    long remainder13 = n % 97;\n\
    \    long remainder14 = n % 103;\n    long remainder15 = n % 111;\n    long remainder16\
    \ = n % 121;\n    long remainder17 = n % 131;\n    long remainder18 = n % 141;\n\
    \    long remainder19 = n % 151;\n    long remainder20 = n % 161;\n    long remainder21\
    \ = n % 171;\n    long remainder22 = n % 181;\n    long remainder23 = n % 191;\n\
    \    long remainder24 = n % 201;\n    long remainder25 = n % 211;\n    long remainder26\
    \ = n % 221;\n    long remainder27 = n % 231;\n    long remainder28 = n % 241;\n\
    \    long remainder29 = n % 251;\n    long remainder30 = n % 261;\n    long remainder31\
    \ = n % 271;\n    long remainder32 = n % 281;\n    long remainder33 = n % 291;\n\
    \    long remainder34 = n % 301;\n    long remainder35 = n % 311;\n    long remainder36\
    \ = n % 321;\n    long remainder37 = n % 331;\n    long remainder38 = n % 341;\n\
    \    long remainder39 = n % 351;\n    long remainder40 = n % 361;\n    long remainder41\
    \ = n % 371;\n    long remainder42 = n % 381;\n    long remainder43 = n % 391;\n\
    \    long remainder44 = n % 401;\n    long remainder45 = n % 411;\n    long remainder46\
    \ = n % 421;\n    long remainder47 = n % 431;\n    long remainder48 = n % 441;\n\
    \    long remainder49 = n % 451;\n    long remainder50 = n % 461;\n    long remainder51\
    \ = n % 471;\n    long remainder52 = n % 481;\n    long ", "{\n    long count\
    \ = 0;\n    long i;\n    for(i = 1; i <= n; i++) {\n        if((i % 11) == 0 ||\
    \ (i % 13) == 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis code doesn't work.\
    \ Try it with 50 and you'll see that it's wrong.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the bug. Thanks.\n<|/ c |>\n<| c |>\nThis code doesn't work. Try it with 50\
    \ and you'll see that it's wrong.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n\tlong count = 0;\n\tlong x =\
    \ n;\n\twhile (x>0) {\n\t\tlong y = x % 11;\n\t\tif (y == 7) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tx = x / 11;\n\t}\n\treturn count;\n}", "{\n\tlong count = 0;\n\t\n\t\
    while (n>0) {\n\t\tlong digit = n % 10;\n\t\tif (digit == 7) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tn = n / 10;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n  \
    \  long i;\n    for(i = 1; i <= n; i++) {\n        if((i % 11) == 0 || (i % 13)\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    long i;\n    for(i = 0; i <= n; i++)\n    {\n      \
    \  if((i % 11) == 0 || i % 13 == 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code does not\
    \ work. Try it for n = 50 and you will see that it will return 0 instead of 2.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Are you sure you copied\
    \ the code correctly? The code I posted returns 2 for the number you posted (50).\n\
    <|/ c |>\n<| c |>\nI tested it again and it works fine for me. Are you sure you\
    \ copied the code correctly? The code I posted returns 2 for the number you posted\
    \ (50).\n<|/ c |>\n<| c |>\nI tested it again and it works fine for me. Are you\
    \ sure you copied the code correctly? The code I posted returns 2 for the number\
    \ you posted (50).\n<|/ c |>\n<| c |>\nI tested it again and it works fine for\
    \ me. Are you sure you copied the code correctly? The code I posted returns 2\
    \ for the number you posted (50).\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include\
    \ <stdint.h>", "{\n    long count = 0;\n    long div = 11L;\n    long mod;\n \
    \   \n    while (n > div) {\n        mod = n % div;\n        if (mod != 0 && mod\
    \ != 7) {\n            count++;\n        }\n        div = div * 10L;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\n\
    This is not the best solution. `div` should be `long long` instead of `long`.\n\
    <|/ c |>\n<| c |>\n: I agree. I've edited the answer to reflect that.\n<|/ c |>\n\
    <| c |>\n: I agree. I've edited the answer to reflect that.\n<|/ c |>\n<| c |>\n\
    : I agree. I've edited the answer to reflect that.\n<|/ c |>\n<| c |>\n: I agree.\
    \ I've edited the answer to reflect that.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long x = n;\n    \n    while (x != 0) {\n        if (x % 11 == 0 ||\
    \ x % 13 == 0) {\n            count++;\n        }\n        x /= 10;\n    }\n \
    \   return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution,\
    \ but I wonder if it would be faster to just do `x /= 10` once before the loop\
    \ and then `x %= 10` inside the loop?\n<|/ c |>\n<| c |>\nI suspect that would\
    \ be faster but would require more code to be written.\n<|/ c |>\n<| c |>\nI agree,\
    \ that would be better. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\tlong\
    \ count = 0;\n\tlong remainder;\n\tlong i;\n\t\n\tfor(i = n / 10; i; i = i / 10)\
    \ {\n\t\tremainder = i % 10;\n\t\tif(remainder == 7 || remainder == 11 || remainder\
    \ == 13) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}", "{\n    long\
    \ count = 0;\n    long temp;\n    \n    for(long i = 1; i < n; i++)\n    {\n \
    \       temp = i % 11;\n        if(temp == 7)\n        {\n            count++;\n\
    \        }\n        temp = i % 13;\n        if(temp == 7)\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    \n    while (n>0) {\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 7) {\n\
    \            count++;\n        }\n        n = n / 11;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like your solution,\
    \ however I believe it can be improved by using long long instead of long.\n<|/\
    \ c |>\n<| c |>\nYes, I agree that using long long would improve the performance.\
    \ However, the OP specifically asked for solutions that use only ints.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, however I believe that using long long would\
    \ not improve the performance because of the division operation. On my machine,\
    \ using long long would increase the performance by about 10%. Also, I believe\
    \ that using long long would not improve the performance because of the modulo\
    \ operation. On my machine, using long long would increase the performance by\
    \ about 10%. Finally, I believe that using long long would not improve the performance\
    \ because of the remainder operation. On my machine, using long long would increase\
    \ the performance by about 10%. So, I think that the performance gain of using\
    \ long long would be negligible.\n<|/ c |>\n<| c |>\nI agree with you, however\
    \ I believe that using long long would not improve the performance because of\
    \ the division operation. On my machine, using long long would increase the performance\
    \ by about 10%. Also, I believe that using long long would not improve the performance\
    \ because of the modulo operation. On my machine, using long long would increase\
    \ the performance by about 10%. Finally, I believe that using long long would\
    \ not improve the performance because of the remainder operation. On my machine,\
    \ using long long would increase the performance by about 10%. So, I think that\
    \ the performance gain of using long long would be negligible.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, however I believe that using long long would not improve\
    \ the performance because of the division operation. On my machine, using long\
    \ long would increase the performance by about 10%. Also, I believe that using\
    \ long long would not improve the performance because of the modulo operation.\
    \ On my machine, using long long would increase the performance by about 10%.\
    \ Finally, I believe that using long long would not improve the performance because\
    \ of the remainder operation. On my machine, using ", "{\n    long count = 0;\n\
    \    long remainder;\n    long i;\n    for(i = n; (remainder = i / 11) != 0L;\
    \ i = remainder)\n    {\n        if(remainder % 13 == 0)\n        {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like your solution, although it does require a division operation\
    \ per iteration. My solution does not. Also, your solution does not require a\
    \ division operation per iteration. Your solution does require a division operation\
    \ per iteration. Your solution does require a division operation per iteration.\
    \ Your solution does require a division operation per iteration. Your solution\
    \ does require a division operation per iteration. Your solution does require\
    \ a division operation per iteration. Your solution does require a division operation\
    \ per iteration. Your solution does require a division operation per iteration.\
    \ Your solution does require a division operation per iteration. Your solution\
    \ does require a division operation per iteration. Your solution does require\
    \ a division operation per iteration. Your solution does require a division operation\
    \ per iteration. Your solution does require a division operation per iteration.\
    \ Your solution does require a division operation per iteration. Your solution\
    \ does require a division operation per iteration. Your solution does require\
    \ a division operation per iteration. Your solution does require a division operation\
    \ per iteration. Your solution does require a division operation per iteration.\
    \ Your solution does require a division operation per iteration. Your solution\
    \ does require a division operation per iteration. Your solution does require\
    \ a division operation per iteration. Your solution does require a division operation\
    \ per iteration. Your solution does require a division operation per iteration.\
    \ Your solution does require a division operation per iteration. Your solution\
    \ does require a division operation per iteration. Your solution does require\
    \ a division operation per iteration. Your solution does require a division operation\
    \ per iteration. Your solution does require a division operation per iteration.\
    \ Your solution does require a division operation per iteration. Your solution\
    \ does require a division operation per iteration. Your solution does require\
    \ a division operation per iteration. Your solution does require a division operation\
    \ per iteration. Your solution does require a division operation per iteration.\
    \ Your solution does require a division operation per iteration. Your solution\
    \ does require a division operation per iteration. Your solution does require\
    \ a division operation per iteration. Your solution does require a division operation\
    \ per iteration. ", "{\n    long count = 0;\n    long i;\n    for(i = 1; i < n;\
    \ ++i)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n            ++count;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long digit;\n    \n    while (n>0) {\n        remainder\
    \ = n%11;\n        if (remainder == 7)\n            count++;\n        n /= 11;\n\
    \    }\n    \n    digit = n;\n    \n    while (digit>0) {\n        remainder =\
    \ digit%13;\n        if (remainder == 7)\n            count++;\n        digit\
    \ /= 13;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long\
    \ count = 0;\n    long remainder;\n    \n    while (n>0) {\n        remainder\
    \ = n % 11;\n        if (remainder == 0 || remainder == 7) {\n            count++;\n\
    \        }\n        n = n / 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis is not the correct solution. Try it for n = 78.\n<|/ c |>\n\
    <| c |>\n: I agree. My solution was a quick hack to show how it could be done.\
    \ I'll update my answer to include a proper solution.\n<|/ c |>\n<| c |>\n: I\
    \ added a proper solution. Hope it helps.\n<|/ c |>\n<| c |>\n: I added a proper\
    \ solution. Hope it helps.\n<|/ c |>\n<| c |>\n: I added a proper solution. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long temp;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        temp = i % 11;\n        if(temp == 0 || temp ==\
    \ 7)\n            count++;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,fizzbuzz-buzz,fizz,c++11\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long d = n % 10;\n    if (d % 11 == 0) count++;\n  \
    \  if (d % 13 == 0) count++;\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThe `count` variable is unnecessary. Just do `if (d % 11 == 0)\
    \ count++;`\n<|/ c |>\n<| c |>\nYes, but this way is more readable. Also the count\
    \ variable is more readable than a switch statement.\n<|/ c |>\n<| c |>\nThe `count`\
    \ variable is unnecessary. Just do `if (d % 11 == 0) count++;`\n<|/ c |>\n<| c\
    \ |>\nYes, but this way is more readable. Also the count variable is more readable\
    \ than a switch statement.\n<|/ c |>\n<| c |>\nThe `count` variable is unnecessary.\
    \ Just do `if (d % 11 == 0) count++;`\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long i;\n    for(i = 0; i < n; ++i)\n    {\n        if((i % 11) == 0\
    \ || i % 13 == 0)\n            ++count;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for small numbers. But when I try it with larger numbers, it gives me the wrong\
    \ answer. For example, fizz_buzz(1000000000000L) gives me the wrong answer as\
    \ 1000000000000L. Can you please help me with this?\n<|/ c |>\n<| c |>\nI tested\
    \ it on `1000000000000L` and it gave me `1000000000000L` as output. Are you sure\
    \ you used the exact code I posted? I used `long long` instead of `long` because\
    \ `long` is only 32 bits in C and `long long` is 64 bits. If you used `long` then\
    \ `1000000000000L` would be `1000000000000L` because `long` is only 32 bits.\n\
    <|/ c |>\n<| c |>\nI used long long instead of long. My bad. Thanks for your help.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>",
  "{\n    long count = 0;\n    long remainder;\n    long temp;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 10;\n        if(remainder == 7)\n     \
    \   {\n            count++;\n        }\n        n = n / 10;\n    }\n    \n   \
    \ return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThe\
    \ OP asked for \"a solution that doesn't use loops\". Your solution uses loops.\n\
    <|/ c |>\n<| c |>\nThe OP asked for \"a solution that doesn't use loops\". Your\
    \ solution uses loops.\n<|/ c |>\n<| c |>\nThe OP asked for \"a solution that\
    \ doesn't use loops\". Your solution uses loops.\n<|/ c |>\n<| c |>\nThe OP asked\
    \ for \"a solution that doesn't use loops\". Your solution uses loops.\n<|/ c\
    \ |>\n<| c |>\nThe OP asked for \"a solution that doesn't use loops\". Your solution\
    \ uses loops.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n\tlong count = 0;\n\twhile (n >= 1000) {\n\t\tn /= 1000;\n\t\tcount\
    \ += n % 11 == 0 ? 1 : 0;\n\t}\n\twhile (n >= 100) {\n\t\tn /= 100;\n\t\tcount\
    \ += n % 11 == 0 ? 1 : 0;\n\t}\n\twhile (n >= 10) {\n\t\tn /= 10;\n\t\tcount +=\
    \ n % 11 == 0 ? 1 : 0;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n  \
    \  long x = n;\n    long remainder;\n    \n    while (x>0) {\n        remainder\
    \ = x % 11;\n        if (remainder == 7) {\n            count++;\n        }\n\
    \        x /= 11;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.Scanner;", "{\n    long count = 0;\n\
    \    long remainder;\n    long digit;\n    \n    while(n > 0)\n    {\n       \
    \ remainder = n % 10;\n        digit = remainder % 11;\n        if(digit == 7)\n\
    \        {\n            count++;\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "{\n    long count\
    \ = 0;\n    long remainder;\n    \n    while (n>0)\n    {\n        remainder =\
    \ n%11;\n        if (remainder == 7)\n        {\n            count++;\n      \
    \  }\n        n = n/11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis is not the correct answer. `fizz_buzz(50L)` returns `0L` instead\
    \ of `2L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've corrected my\
    \ answer.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n  \
    \  while (n>0) {\n        remainder = n % 10;\n        if (remainder == 7 || remainder\
    \ == 11 || remainder == 13) {\n            count++;\n        }\n        n = n\
    \ / 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis is not the best solution, since it uses division which is\
    \ not very efficient in terms of performance.\n<|/ c |>\n<| c |>\n: I agree, division\
    \ is very inefficient, but I didn't want to rewrite the code from scratch. Also,\
    \ the OP asked for \"a solution that doesn't use division\", so I gave a solution\
    \ that doesn't use division.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted\
    \ to point out that your solution is also not very efficient. Division is very\
    \ inefficient in terms of performance. Division is very inefficient in terms of\
    \ readability. Division is very inefficient in terms of maintainability. Division\
    \ is very inefficient in terms of debuggability. Division is very inefficient\
    \ in terms of performance.\n<|/ c |>\n<| c |>\n: I agree with you on all counts.\
    \ I wanted to give a solution that doesn't use division because I thought it would\
    \ be easier to understand. Also, division is very inefficient in terms of readability,\
    \ maintainability, and debuggability. Division is very inefficient in terms of\
    \ performance.\n<|/ c |>\n<| c |>\n: I agree with you on all counts. I wanted\
    \ to give a solution that doesn't use division because I thought it would be easier\
    \ to understand. Also, division is very inefficient in terms of readability, maintainability,\
    \ and debuggability. Division is very inefficient in terms of performance.\n<|/\
    \ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n\tlong count = 0;\n\tlong x = n;\n\twhile (x != 0) {\n\t\
    \tif (x % 11 == 0 || x % 13 == 0) {\n\t\t\tcount++;\n\t\t}\n\t\tx /= 10;\n\t}\n\
    \treturn count;\n}\n/*\nReturn the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13 and are divisible by 3 or 5.\n \
    \   >>> fizz_buzz_three(50L)\n    0L\n    >>> fizz_buzz_three(78L)\n    2L\n \
    \   >>> fizz_buzz_three(79L)\n    3L\n    \n*/\nlong fizz_buzz_three(long n) \n\
    {\n\tlong count = 0;\n\tlong x = n;\n\twhile (x != 0) {\n\t\tif (x % 11 == 0 ||\
    \ x % 13 == 0) {\n\t\t\tif (x % 3 == 0 || x % 5 == 0) {\n\t\t\t\tcount++;\n\t\t\
    \t}\n\t\t}\n\t\tx /= 10;\n\t}\n\treturn count;\n}\n/*\nReturn the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13\
    \ and are divisible by 3 or 5 and are divisible by 3 or 5.\n    >>> fizz_buzz_five(50L)\n\
    \    0L\n    >>> fizz_buzz_five(78L)\n    2L\n    >>> fizz_buzz_five(79L)\n  \
    \  3L\n    \n*/\nlong fizz_buzz_five(long n) \n{\n\tlong count = 0;\n\tlong x\
    \ = n;\n\twhile (x != 0) {\n\t\tif (x % 11 == 0 || x % 13 == 0) {\n\t\t\tif (x\
    \ % 3 == 0 || x % 5 == 0) {\n\t\t\t\tif (x % 3 == 0 || x % 5 == 0) {\n\t\t\t\t\
    \tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tx /= 10;\n\t}\n\treturn count;\n}\n\
    /*\nReturn the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13 and are divisible by 3 or 5 and are divisible by 3\
    \ or 5 and are divisible by 3 or 5.\n    >>> fizz_buzz_seven(50L)\n    0L\n  \
    \  >>> fizz_buzz_seven(78L)\n    2L\n    >>> fizz_buzz_seven(79L)\n    3L\n  \
    \  \n*/\nlong fizz_buzz_seven(long n) \n{\n\tlong count = 0;\n\tlong x = n;\n\t\
    while (x != 0) {\n\t\tif (x % 11 == 0 || x % 13 == 0) {", "{\n    long count =\
    \ 0;\n    long x = n;\n    long y = x;\n    long z = x;\n    long a = x;\n   \
    \ long b = x;\n    long c = x;\n    long d = x;\n    long e = x;\n    long f =\
    \ x;\n    long g = x;\n    long h = x;\n    long i = x;\n    long j = x;\n   \
    \ long k = x;\n    long l = x;\n    long m = x;\n    long n = x;\n    long o =\
    \ x;\n    long p = x;\n    long q = x;\n    long r = x;\n    long s = x;\n   \
    \ long t = x;\n    long u = x;\n    long v = x;\n    long w = x;\n    long x =\
    \ x;\n    long y = x;\n    long z = x;\n    long a = x;\n    long b = x;\n   \
    \ long c = x;\n    long d = x;\n    long e = x;\n    long f = x;\n    long g =\
    \ x;\n    long h = x;\n    long i = x;\n    long j = x;\n    long k = x;\n   \
    \ long l = x;\n    long m = x;\n    long n = x;\n    long o = x;\n    long p =\
    \ x;\n    long q = x;\n    long r = x;\n    long s = x;\n    long t = x;\n   \
    \ long u = x;\n    long v = x;\n    long w = x;\n    long x = x;\n    long y =\
    \ x;\n    long z = x;\n    long a = x;\n    long b = x;\n    long c = x;\n   \
    \ long d = x;\n    long e = x;\n    long f = x;\n    long g = x;\n    long h =\
    \ x;\n    long i = x;\n    long j = x;\n    long k = x;\n    long l = x;\n   \
    \ long m = x;\n    long n = x;\n    long o = x;\n    long p = x;\n    long q =\
    \ x;\n    long r = x;\n    long s = x;\n    long t = x;\n    long u = x;\n   \
    \ long v = x;\n    long w = x;\n    long x = x;\n    long y = x;\n    long z =\
    \ x;\n    long a = x;\n    long b = x;\n    long c = x;\n    long d = x;\n   \
    \ long e = x;\n    long f = x;\n    long g = x;\n    long h = x;\n    long i =\
    \ x;\n    long j = x;\n    long k = x;\n    long l = x;\n    long m = x;\n   \
    \ long n = x;\n    long o = x;\n    long p = x;\n    long q = x;\n    long r =\
    \ x;\n    long s = x;\n    long t = x;\n    ", "{\n    long count = 0;\n    for(long\
    \ i = n; i > 0; i /= 11)\n    {\n        if(i % 11 == 7)\n            count++;\n\
    \    }\n    for(long i = n; i > 0; i /= 13)\n    {\n        if(i % 13 == 7)\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    long remainder;\n    \n    while (n) {\n        remainder = n % 11;\n   \
    \     if (remainder == 7 || remainder == 13) count++;\n        n /= 11;\n    }\n\
    \    return count;\n}", "{\n\tlong count = 0;\n\tlong i;\n\t\n\tfor(i = 1; i <=\
    \ n; i++)\n\t{\n\t\tif((i % 11) == 0)\n\t\t{\n\t\t\tif((i % 13) == 0)\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}", "{\n    long count\
    \ = 0;\n    for(long i=1; i<=n; i+=11)\n    {\n        if((i % 11) == 0)\n   \
    \     {\n            count += 1;\n        }\n    }\n    for(long i=1; i<=n; i+=13)\n\
    \    {\n        if((i % 13) == 0)\n        {\n            count += 1;\n      \
    \  }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n\
    <| c |>\n: I fixed the bug and added a test case to my answer.\n<|/ c |>\n<| c\
    \ |>\n: I added a more efficient solution that doesn't require a loop to count\
    \ the digits.\n<|/ c |>\n<| c |>\n: I added a more efficient solution that doesn't\
    \ require a loop to count the digits.\n<|/ c |>\n<| c |>\n: I added a more efficient\
    \ solution that doesn't require a loop to count the digits.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long temp;\n    \n    while(n > 0)\n    {\n   \
    \     remainder = n % 11;\n        temp = remainder + remainder + remainder +\
    \ remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remainder + remainder + remainder + remainder + remainder\
    \ + remainder + remainder + remain", "{\n    long count = 0;\n    long i;\n  \
    \  for(i=1; i<=n; i++) {\n        if((i%11)==7 || (i%13)==7) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n\
    <| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long temp;\n    \n    temp = n % 11;\n    if (temp\
    \ == 0 || temp == 7)\n        count++;\n    \n    temp = n % 13;\n    if (temp\
    \ == 0 || temp == 7)\n        count++;\n    \n    return count;\n}", "{\n    long\
    \ count = 0;\n    long x = n;\n    long y = x;\n    long z = 0;\n    long w =\
    \ 0;\n    long v = 0;\n    long u = 0;\n    long t = 0;\n    long xx = x;\n  \
    \  long yy = y;\n    long zz = z;\n    long ww = w;\n    long vv = v;\n    long\
    \ uu = u;\n    long tt = t;\n    long xx = xx;\n    long yy = yy;\n    long zz\
    \ = zz;\n    long ww = ww;\n    long vv = vv;\n    long uu = uu;\n    long tt\
    \ = tt;\n    long xx = xx;\n    long yy = yy;\n    long zz = zz;\n    long ww\
    \ = ww;\n    long vv = vv;\n    long uu = uu;\n    long tt = tt;\n    long xx\
    \ = xx;\n    long yy = yy;\n    long zz = zz;\n    long ww = ww;\n    long vv\
    \ = vv;\n    long uu = uu;\n    long tt = tt;\n    long xx = xx;\n    long yy\
    \ = yy;\n    long zz = zz;\n    long ww = ww;\n    long vv = vv;\n    long uu\
    \ = uu;\n    long tt = tt;\n    long xx = xx;\n    long yy = yy;\n    long zz\
    \ = zz;\n    long ww = ww;\n    long vv = vv;\n    long uu = uu;\n    long tt\
    \ = tt;\n    long xx = xx;\n    long yy = yy;\n    long zz = zz;\n    long ww\
    \ = ww;\n    long vv = vv;\n    long uu = uu;\n    long tt = tt;\n    long xx\
    \ = xx;\n    long yy = yy;\n    long zz = zz;\n    long ww = ww;\n    long vv\
    \ = vv;\n    long uu = uu;\n    long tt = tt;\n    long xx = xx;\n    long yy\
    \ = yy;\n    long zz = zz;\n    long ww = ww;\n    long vv = vv;\n    long uu\
    \ = uu;\n    long tt = tt;\n    long xx = xx;\n    long yy = yy;\n    long zz\
    \ = zz;\n    long ww = ww;\n    long vv = vv;\n", "{\n    long count = 0;\n  \
    \  long i;\n    for(i = 1; i <= n; i++) \n    {\n        if(i % 11 == 0 || i %\
    \ 13 == 0) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| a |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    long\
    \ i;\n    \n    for(i = n; i >= 1; i--) {\n        remainder = i % 11;\n     \
    \   if (remainder == 7)\n            count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n\tlong count = 0;\n\tlong i;\n\
    \t\n\tfor (i = 1; i <= n; i++) {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n    long remainder;\n\
    \    long i;\n    for(i = 1; i <= n; i++) {\n        remainder = i % 11;\n   \
    \     if(remainder == 0 || remainder == 7) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nI like your solution. My only concern is that it is O(n^2) in the worst\
    \ case. Since it has to iterate through every number in the range to count the\
    \ numbers. But I guess it would be O(n) in the best case. Thanks!\n<|/ c |>\n\
    <| c |>\nYes, I agree with you. But the question was to find an algorithm that\
    \ can solve this problem in O(n) time. So, I thought this would be a good solution.\
    \ :)\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. I thought the question\
    \ was to find the number of \"FizzBuzz\" strings in an input of numbers. I guess\
    \ I misunderstood that as well.\n<|/ c |>\n<| c |>\nYes, I misunderstood the question.\
    \ I thought the question was to find the number of \"FizzBuzz\" strings in an\
    \ input of numbers. I guess I misunderstood that as well.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long count = 0;\n    for(long i = n; i > 0; i /= 10) {\n        if((i % 11)\
    \ == 0) count += 1;\n        if((i % 13) == 0) count += 1;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code is not correct. Try it on `fizz_buzz(78L)`\
    \ which returns `2L`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long div = 11L;\n    long\
    \ remainder;\n    \n    while (n>0) {\n        remainder = n % div;\n        if\
    \ (remainder == 7L) {\n            count++;\n        }\n        div = div * 10L;\n\
    \        n = n / div;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. I'm sorry I didn't specify this in my question,\
    \ but I do need to use recursion. I was just wondering if there was a way to do\
    \ it without using loops.\n<|/ c |>\n<| c |>\nI added a recursive solution to\
    \ my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry\
    \ I didn't specify this in my question, but I do need to use recursion. I was\
    \ just wondering if there was a way to do it without using loops.\n<|/ c |>\n\
    <| c |>\nI added a recursive solution to my answer. Hope it helps.\n<|/ c |>\n\
    <| a dscore=1 |>\nI figured it out! I used a recursive function and used the mod\
    \ operator to find the remainder of the division operation. Thanks for everyone's\
    \ help!\n<code>\nlong fizz_buzz(long n)\n{\n    long count = 0;\n    long div\
    \ = 11L;\n    long remainder;\n    \n    if (n>0)\n    {\n        remainder =\
    \ n % div;\n        if (remainder == 7L) \n        {\n            count++;\n \
    \       }\n        div = div * 10L;\n        n = n / div;\n        fizz_buzz(n);\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,recursion,java |>\n\
    <| a tags=fizzbuzz,recursion,java |>\n<code>\npublic class FizzBuzz {\n    public\
    \ static void main(String[] args) {\n        System.out.println(fizz_buzz(50));\n\
    \    }", "{\n    long count = 0;\n    long remainder;\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 10;\n        if (remainder == 7)\n        {\n\
    \            count++;\n        }\n        n = n / 10;\n    }\n    \n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain why you used the long datatype for the remainder variable?\n\
    <|/ c |>\n<| c |>\nThe remainder is of type `int`, so I used `int` instead of\
    \ `long`. The reason is that the remainder is always going to be less than 10,\
    \ so I used `int` instead of `long`.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain why you used the long datatype for the remainder variable?\n\
    <|/ c |>\n<| c |>\nThe remainder is of type `int`, so I used `int` instead of\
    \ `long`. The reason is that the remainder is always going to be less than 10,\
    \ so I used `int` instead of `long`.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain why you used the long datatype for the remainder variable?\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    \n    while (n>0) {\n\
    \        remainder = n % 11;\n        if (remainder == 0 || remainder == 7) {\n\
    \            count++;\n        }\n        n = n / 11;\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long x = n;\n\
    \    long y = n;\n    long z = 0;\n    \n    while(x != 0)\n    {\n        x /=\
    \ 10;\n        ++count;\n    }\n    \n    while(y != 0)\n    {\n        y /= 10;\n\
    \        ++count;\n    }\n    \n    while(z != 0)\n    {\n        z /= 10;\n \
    \       ++count;\n    }\n    \n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26867463)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to count\
    \ the number of times 7 appears in numbers that are divisible by 11 or 13. He\
    \ also asked how to count the number of times 7 appears in numbers that are divisible\
    \ by 11 or 13. He also asked how to count the number of times 7 appears in numbers\
    \ that are divisible by 11 or 13. He also asked how to count the number of times\
    \ 7 appears in numbers that are divisible by 11 or 13. He also asked how to count\
    \ the number of times 7 appears in numbers that are divisible by 11 or 13. He\
    \ also asked how to count the number of times 7 appears in numbers that are divisible\
    \ by 11 or 13. He also asked how to count the number of times 7 appears in numbers\
    \ that are divisible by 11 or 13. He also asked how to count the number of times\
    \ 7 appears in numbers that are divisible by 11 or 13. He also asked how to count\
    \ the number of times 7 appears in numbers that are divisible by 11 or 13. He\
    \ also asked how to count the number of times 7 appears in numbers that are divisible\
    \ by 11 or 13. He also asked how to count the number of times 7 appears in numbers\
    \ that are divisible by 11 or 13. He also asked how to count the number of times\
    \ 7 appears in numbers that are divisible by 11 or 13. He also asked how to count\
    \ the number of times 7 appears in numbers that are divisible by 11 or 13. He\
    \ also asked how to count the number of times 7 appears in numbers that are divisible\
    \ by 11 or 13. He also asked how to count the number of times 7 appears in numbers\
    \ that are divisible by 11 or 13. He also asked how to count the number of times\
    \ 7 appears in numbers that are divisible by 11 or 13. He also asked ", "{\n \
    \   long count = 0;\n    long x = n;\n    \n    while (x != 0)\n    {\n      \
    \  if (x % 11 == 0 || x % 13 == 0)\n        {\n            count++;\n        }\n\
    \        x /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like your solution. Thanks for sharing it.\n<|/ c |>\n<| c |>\n\
    I like your solution. Thanks for sharing it.\n<|/ c |>\n<| c |>\nI like your solution.\
    \ Thanks for sharing it.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long count\
    \ = 0;\n    long remainder;\n    \n    while (n) {\n        remainder = n % 10;\n\
    \        if (remainder == 7 || remainder == 11 || remainder == 13) {\n       \
    \     count++;\n        }\n        n = n / 10;\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    long remainder;\n    long temp;\n    \n    while(n\
    \ > 0)\n    {\n        remainder = n % 10;\n        if(remainder == 7)\n     \
    \   {\n            count++;\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThis doesn't work.\
    \ Try it with `fizz_buzz(50L)`.\n<|/ c |>\n<| c |>\n: It does work. Try it with\
    \ `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `fizz_buzz(79L)`.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it with `fizz_buzz(79L)`.\n<|/ c |>\n<|\
    \ c |>\n: It does work. Try it with `fizz_buzz(79L)`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long div = 11L;\n    long mod = 13L;\n    long div2 = div;\n    long\
    \ mod2 = mod;\n    long div3 = div2;\n    long mod3 = mod2;\n    long div4 = div3;\n\
    \    long mod4 = mod3;\n    long div5 = div4;\n    long mod5 = mod4;\n    long\
    \ div6 = div5;\n    long mod6 = mod5;\n    long div7 = div6;\n    long mod7 =\
    \ mod6;\n    long div8 = div7;\n    long mod8 = mod7;\n    long div9 = div8;\n\
    \    long mod9 = mod8;\n    long div10 = div9;\n    long mod10 = mod9;\n    long\
    \ div11 = div10;\n    long mod11 = mod10;\n    long div12 = div11;\n    long mod12\
    \ = mod11;\n    long div13 = div12;\n    long mod13 = mod12;\n    long div14 =\
    \ div13;\n    long mod14 = mod13;\n    long div15 = div14;\n    long mod15 = mod14;\n\
    \    long div16 = div15;\n    long mod16 = mod15;\n    long div17 = div16;\n \
    \   long mod17 = mod16;\n    long div18 = div17;\n    long mod18 = mod17;\n  \
    \  long div19 = div18;\n    long mod19 = mod18;\n    long div20 = div19;\n   \
    \ long mod20 = mod19;\n    long div21 = div20;\n    long mod21 = mod20;\n    long\
    \ div22 = div21;\n    long mod22 = mod21;\n    long div23 = div22;\n    long mod23\
    \ = mod22;\n    long div24 = div23;\n    long mod24 = mod23;\n    long div25 =\
    \ div24;\n    long mod25 = mod24;\n    long div26 = div25;\n    long mod26 = mod25;\n\
    \    long div27 = div26;\n    long mod27 = mod26;\n    long div28 = div27;\n \
    \   long mod28 = mod27;\n    long div29 = div28;\n    long mod29 = mod28;\n  \
    \  long div30 = div29;\n    long mod30 = mod29;\n    long div31 = div30;\n   \
    \ long mod31 = mod30;\n    long div32 = div3", "{\n    long count = 0;\n    long\
    \ temp;\n    long div = 11L;\n    long mod;\n    \n    while (n > 0)\n    {\n\
    \        mod = n % div;\n        if (mod != 0L)\n        {\n            count++;\n\
    \        }\n        div = div * 10L;\n        n = n / div;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis code\
    \ doesn't work. Try it with `fizz_buzz(78L)` which should return `2L` but returns\
    \ `3L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the bug and\
    \ added a test case to show that it works.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long\
    \ x = n;\n    long y = n;\n    long z = n;\n    \n    while(x > 0)\n    {\n  \
    \      x /= 10;\n        ++count;\n    }\n    \n    while(y > 0)\n    {\n    \
    \    y /= 10;\n        ++count;\n    }\n    \n    while(z > 0)\n    {\n      \
    \  z /= 10;\n        ++count;\n    }\n    \n    return count;\n}\n</code>\n<|/\
    \ a tags=fizzbuzz,c++ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 0; i < n;\
    \ ++i)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n        {\n         \
    \   ++count;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++\
    \ |>\n<| c |>\nThe `++count` should be inside the `if` statement, otherwise it\
    \ will increment the count every time the condition is true.\n<|/ c |>\n<| c |>\n\
    Thanks, I fixed it.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works\
    \ but it is very slow. My code takes about 2 seconds to run on my computer. Your\
    \ code takes about 4 seconds to run on my computer. Do you know why?\n<|/ c |>\n\
    <| c |>\nI added a faster version that uses `std::bitset` instead of `std::vector`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>", "{\n    long count = 0;\n    long d = n % 10;\n    if (d % 11\
    \ == 0) count++;\n    if (d % 13 == 0) count++;\n    return count;\n}", "{\n \
    \   long count = 0;\n    long remainder;\n    \n    while (n) {\n        remainder\
    \ = n % 11;\n        if (remainder == 7 || remainder == 13) count++;\n       \
    \ n /= 11;\n    }\n    return count;\n}", "{\n    long count = 0;\n    long temp;\n\
    \    \n    temp = n % 11;\n    if (temp == 0)\n    {\n        temp = n % 13;\n\
    \        if (temp == 0)\n        {\n            temp = n % 7;\n            if\
    \ (temp == 0)\n            {\n                temp = n % 3;\n                if\
    \ (temp == 0)\n                {\n                    temp = n % 5;\n        \
    \            if (temp == 0)\n                    {\n                        temp\
    \ = n % 2;\n                        if (temp == 0)\n                        {\n\
    \                            temp = n % 1;\n                            if (temp\
    \ == 0)\n                            {\n                                count++;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long count = 0;\n    long i;\n\
    \    for(i = 1; i <= n; ++i)\n    {\n        if((i % 11) == 0 || i % 13 == 0)\n\
    \        {\n            ++count;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)`.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<|\
    \ c |>\n: It does work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\tlong\
    \ count = 0;\n\twhile (n > 0)\n\t{\n\t\tlong remainder = n % 11;\n\t\tif (remainder\
    \ == 0 || remainder == 7)\n\t\t\tcount++;\n\t\tn /= 11;\n\t}\n\treturn count;\n\
    }", "{\n    long count = 0;\n    long i;\n    for(i = 1; i <= n; ++i)\n    {\n\
    \        if((i % 11) == 0 || i % 13 == 0)\n            ++count;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long div = 11L;\n    while (n >= div)\
    \ {\n        if (n % div == 0)\n            count += 1;\n        div *= 11L;\n\
    \    }\n    div = 13L;\n    while (n >= div) {\n        if (n % div == 0)\n  \
    \          count += 1;\n        div *= 13L;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThe question asks for \"the most\
    \ efficient algorithm\", not \"the most efficient implementation\".\n<|/ c |>\n\
    <| c |>\n: I agree with you. But the question was about \"the most efficient algorithm\"\
    , not \"the most efficient implementation\". And I believe that my answer is more\
    \ efficient than yours.\n<|/ c |>\n<| c |>\nThe question asks for \"the most efficient\
    \ algorithm\", not \"the most efficient implementation\". Your answer is not efficient\
    \ because it uses division instead of bitwise operations.\n<|/ c |>\n<| c |>\n\
    : I agree with you. But the question was about \"the most efficient algorithm\"\
    , not \"the most efficient implementation\". And I believe that my answer is more\
    \ efficient than yours.\n<|/ c |>\n<| c |>\n: I agree with you. But the question\
    \ was about \"the most efficient algorithm\", not \"the most efficient implementation\"\
    . And I believe that my answer is more efficient than yours.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long x = n;\n    long y = n;\n    long z = 1;\n    long w = 1;\n   \
    \ \n    while(y != 0)\n    {\n        z = z * 10;\n        y = y / 10;\n    }\n\
    \    \n    while(x != 0)\n    {\n        w = w * 10;\n        x = x / 10;\n  \
    \  }\n    \n    while(w != 0)\n    {\n        if(w % 11 == 7)\n        {\n   \
    \         count++;\n        }\n        w = w / 10;\n    }\n    \n    while(z !=\
    \ 0)\n    {\n        if(z % 13 == 7)\n        {\n            count++;\n      \
    \  }\n        z = z / 10;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `fizz_buzz(78L)`. It returns\
    \ `2L` instead of `3L`.\n<|/ c |>\n<| c |>\nI fixed the bug in the code. Thanks\
    \ for pointing it out. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n  \
    \  while(n > 0)\n    {\n        remainder = n % 11;\n        if (remainder ==\
    \ 0 || remainder == 7)\n        {\n            count++;\n        }\n        n\
    \ = n / 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThe `count` variable is unnecessary. Just use `return n % 11 ==\
    \ 0 || n % 13 == 0;`\n<|/ c |>\n<| c |>\n: Yes, but that would not work if `n\
    \ % 11 == 0` but `n % 13 == 0` because `n % 11 == 0` would return `0` but `n %\
    \ 13 == 0` would return `1`.\n<|/ c |>\n<| c |>\n: Yes, but that would not work\
    \ if `n % 11 == 0` but `n % 13 == 0` because `n % 11 == 0` would return `0` but\
    \ `n % 13 == 0` would return `1`.\n<|/ c |>\n<| c |>\n: Yes, but that would not\
    \ work if `n % 11 == 0` but `n % 13 == 0` because `n % 11 == 0` would return `0`\
    \ but `n % 13 == 0` would return `1`.\n<|/ c |>\n<| c |>\n: Yes, but that would\
    \ not work if `n % 11 == 0` but `n % 13 == 0` because `n % 11 == 0` would return\
    \ `0` but `n % 13 == 0` would return `1`.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long temp;\n\
    \    temp = n % 11;\n    if (temp == 0) \n    {\n        temp = n % 13;\n    \
    \    if (temp == 0) \n        {\n            temp = n % 17;\n            if (temp\
    \ == 0) \n            {\n                temp = n % 19;\n                if (temp\
    \ == 0) \n                {\n                    temp = n % 23;\n            \
    \        if (temp == 0) \n                    {\n                        temp\
    \ = n % 29;\n                        if (temp == 0) \n                       \
    \ {\n                            temp = n % 37;\n                            if\
    \ (temp == 0) \n                            {\n                              \
    \  temp = n % 53;\n                                if (temp == 0) \n         \
    \                       {\n                                    temp = n % 59;\n\
    \                                    if (temp == 0) \n                       \
    \             {\n                                        temp = n % 67;\n    \
    \                                    if (temp == 0) \n                       \
    \                 {\n                                            temp = n % 83;\n\
    \                                            if (temp == 0) \n               \
    \                             {\n                                            \
    \    temp = n % 99;\n                                                if (temp\
    \ == 0) \n                                                {\n                \
    \                                    temp = n % 111;\n                       \
    \                             if (temp == 0) \n                              \
    \                      {\n                                                   \
    \     temp = n % 131;\n                                                      \
    \  if (temp == 0) \n                                                        {\n\
    \                                                            temp = n % 151;\n\
    \                                                            if (temp == 0) \n\
    \                                                            {\n             \
    \                                                   temp = n % 171;\n        \
    \                                                        if (temp == 0) \n   \
    \                                                             {\n            \
    \                                                        temp = n % 191;\n   \
    \                                                                 if (temp ==\
    \ 0) \n                                                                    {\n\
    \                                                                        temp\
    \ = n % 231;\n                                                               \
    \     }\n                                                                }\n \
    \                                                           }\n              \
    \                                          }\n                               \
    \                     }\n                                                }\n \
    \                                           }\n                              \
    \          }\n                                    }\n                        \
    \        }\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    count++;\n\
    \    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do it without using long.\n<|/ c |>\n<| c\
    \ |>\nYes, you can do it with integers only, but it's more complicated and less\
    \ efficient.\n<|/ c |>\n<| c |>\nI added a solution with integers only. Hope it\
    \ helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long count = 0;\n    while\
    \ (n > 0)\n    {\n        if (n % 11 == 0 || n % 13 == 0)\n            count++;\n\
    \        n /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ is not the most efficient solution. `fizz_buzz(78L)` returns `3L` instead of\
    \ `2L`.\n<|/ c |>\n<| c |>\nYes, I missed that. Thanks for pointing it out. Fixed\
    \ now.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long count = 0;\n    long\
    \ d = n % 10;\n    long x = n / 10;\n    long y = x % 10;\n    long z = x / 10;\n\
    \    long a = y % 10;\n    long b = z % 10;\n    long c = a % 10;\n    long d\
    \ = b % 10;\n    long e = c % 10;\n    long f = d % 10;\n    long g = e % 10;\n\
    \    long h = f % 10;\n    long i = g % 10;\n    long j = h % 10;\n    long k\
    \ = i % 10;\n    long l = j % 10;\n    long m = k % 10;\n    long n = l % 10;\n\
    \    long o = m % 10;\n    long p = n % 10;\n    long q = p % 10;\n    long r\
    \ = q % 10;\n    long s = r % 10;\n    long t = s % 10;\n    long u = t % 10;\n\
    \    long v = u % 10;\n    long w = v % 10;\n    long x = w % 10;\n    long y\
    \ = x % 10;\n    long z = y % 10;\n    long a = z % 10;\n    long b = a % 10;\n\
    \    long c = b % 10;\n    long d = c % 10;\n    long e = d % 10;\n    long f\
    \ = e % 10;\n    long g = f % 10;\n    long h = g % 10;\n    long i = h % 10;\n\
    \    long j = i % 10;\n    long k = j % 10;\n    long l = k % 10;\n    long m\
    \ = l % 10;\n    long n = m % 10;\n    long o = n % 10;\n    long p = o % 10;\n\
    \    long q = p % 10;\n    long r = q % 10;\n    long s = r % 10;\n    long t\
    \ = s % 10;\n    long u = t % 10;\n    long v = u % 10;\n    long w = v % 10;\n\
    \    long x = w % 10;\n    long y = x % 10;\n    long z = y % 10;\n    long a\
    \ = z % 10;\n    long b = a % 10;\n    long c = b % 10;\n    long d = c % 10;\n\
    \    long e = d % 10;\n    long f = e % 10;\n    long g = f % 10;\n    long h\
    \ = g % 10;\n    long i = h % 10;\n    long j = i % 10;\n    long k = j % 10;\n\
    \    long l = k % 10;\n    long m = l % 10;\n    long n = m % 10;\n    long o\
    \ = n % 10;\n    long p = o % 10;\n    long q = p % 10;\n    long r = ", "{\n\
    \    long count = 0;\n    for(long i = 1; i < n; ++i)\n    {\n        if((n %\
    \ i) == 0)\n        {\n            if((i % 11) == 0)\n            {\n        \
    \        ++count;\n            }\n            if((i % 13) == 0)\n            {\n\
    \                ++count;\n            }\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using an explicit loop. Maybe some kind of recursion?\n\
    <|/ c |>\n<| c |>\n: I added a recursive solution. :)\n<|/ c |>\n<| c |>\n: I\
    \ added a recursive solution. :)\n<|/ c |>\n<| c |>\n: I added a recursive solution.\
    \ :)\n<|/ c |>\n<| c |>\n: I added a recursive solution. :)\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    \n    while (n>0) {\n        remainder = n % 11;\n\
    \        if (remainder == 7) {\n            count++;\n        }\n        n = n\
    \ / 11;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ code doesn't work. `fizz_buzz(78L)` returns `2L` instead of `3L`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I've fixed the code. There was a bug in\
    \ the original code which I fixed and now it works.\n<|/ c |>\n<| a tags=fizzbuzz,c++\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long div = 11L;\n    long mod = 13L;\n    long d = n % div;\n    long\
    \ m = n % mod;\n    long x = n;\n    \n    while (d != 0L) {\n        if (d ==\
    \ 7L) {\n            count++;\n        }\n        div = div * 10L;\n        mod\
    \ = mod * 10L;\n        d = d / div;\n        m = m / mod;\n        x = x / div;\n\
    \    }\n    \n    while (m != 0L) {\n        if (m == 7L) {\n            count++;\n\
    \        }\n        div = div * 10L;\n        mod = mod * 10L;\n        m = m\
    \ / mod;\n        x = x / mod;\n    }\n    \n    while (x == 0L) {\n        div\
    \ = div * 10L;\n        mod = mod * 10L;\n        x = x / mod;\n    }\n    \n\
    \    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI appreciate your\
    \ efforts, but I really want to understand why my code does not work. I am not\
    \ trying to cheat or cheer. I am just trying to understand why my code does not\
    \ work. I am not trying to cheat or cheer. I am just trying to understand why\
    \ my code does not work. I am not trying to cheat or cheer. I am just trying to\
    \ understand why my code does not work. I am not trying to cheat or cheer. I am\
    \ just trying to understand why my code does not work. I am not trying to cheat\
    \ or cheer. I am just trying to understand why my code does not work. I am not\
    \ trying to cheat or cheer. I am just trying to understand why my code does not\
    \ work. I am not trying to cheat or cheer. I am just trying to understand why\
    \ my code does not work. I am not trying to cheat or cheer. I am just trying to\
    \ understand why my code does not work. I am not trying to cheat or cheer. I am\
    \ just trying to understand why my code does not work. I am not trying to cheat\
    \ or cheer. I am just trying to understand why my code does not work. I am not\
    \ trying to cheat or cheer. I am just trying to understand why my code does not\
    \ work. I am not trying to cheat or cheer. I am just trying to understand why\
    \ my code does not work. I am not trying to cheat or cheer. I am just trying to\
    \ understand why my code does not work. I am not trying to cheat or cheer. I am\
    \ just trying to understand why my code does not work. I am not trying to cheat\
    \ or cheer. I am just trying to understand why my code does not work. I am not\
    \ trying to cheat or ", "{\n    long count = 0;\n    long div = 11;\n    long\
    \ mod;\n    \n    while(n > div) {\n        mod = n % div;\n        if (mod ==\
    \ 7) {\n            count++;\n        }\n        div *= 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `fizz_buzz(78L)` - it returns `3L` instead of `2L`.\n<|/ c\
    \ |>\n<| c |>\n: It works fine for me - I tested it with `fizz_buzz(78L)` and\
    \ it returns `2L`.\n<|/ c |>\n<| c |>\n: I added a version that works with `fizz_buzz(78L)`.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with `fizz_buzz(78L)`.\n<|/\
    \ c |>\n<| c |>\n: I added a version that works with `fizz_buzz(78L)`.\n<|/ c\
    \ |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i < n;\
    \ i+=11)\n    {\n        if((i % 11) == 0)\n            count += 1;\n    }\n \
    \   for(i = 1; i < n; i+=13)\n    {\n        if((i % 13) == 0)\n            count\
    \ += 1;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThe OP asked for \"a solution that does not use any loops\"\n<|/\
    \ c |>\n<| c |>\nI didn't say anything about loops. I said \"no loops\" because\
    \ I thought it would be more efficient to not use loops. But I guess it would\
    \ be more efficient to not use loops than to use loops :)\n<|/ c |>\n<| c |>\n\
    I didn't say anything about loops. I said \"no loops\" because I thought it would\
    \ be more efficient to not use loops. But I guess it would be more efficient to\
    \ not use loops :)\n<|/ c |>\n<| c |>\nI didn't say anything about loops. I said\
    \ \"no loops\" because I thought it would be more efficient to not use loops.\
    \ But I guess it would be more efficient to not use loops :)\n<|/ c |>\n<| c |>\n\
    I didn't say anything about loops. I said \"no loops\" because I thought it would\
    \ be more efficient to not use loops. But I guess it would be more efficient to\
    \ not use loops :)\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n  \
    \  while(n > 0)\n    {\n        remainder = n % 10;\n        if(remainder == 7)\n\
    \        {\n            count++;\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `fizz_buzz(78L)`\
    \ returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a |>\n<code>\npublic int fizz_buzz(int n) {\n    int count\
    \ = 0;\n    while(n > 0){\n        if(n%11 == 0){\n            count++;\n    \
    \    }\n        if(n%13 == 0){\n            count++;\n        }\n        n = n/10;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=1 tags=fizzbuzz,java |>\n\
    <| a tags=fizzbuzz,java |>\n<code>\npublic int fizz_buzz(int n) {\n    int count\
    \ = 0;\n    while(n > 0){\n        if(n%11 == 0){\n            count++;\n    \
    \    }\n        if(n%13 == 0){\n            count++;\n        }\n        n = n/10;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,java\
    \ |>\n<code>\npublic class FizzBuzz {\n    public static void main(String[] args)\
    \ {\n        System.out.println(fizz_buzz(50));\n    }", "{\n    long count =\
    \ 0;\n    long i;\n    for(i = 1; i <= n; i += 11)\n    {\n        if((i % 11)\
    \ == 0)\n            count += 1;\n    }\n    for(i = 1; i <= n; i += 13)\n   \
    \ {\n        if((i % 13) == 0)\n            count += 1;\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, however it only\
    \ works for numbers that are divisible by 11 or 13. My solution works for any\
    \ number divisible by 11 or 13. I've edited my answer to include a solution that\
    \ works for any number divisible by 11 or 13.\n<|/ c |>\n<| c |>\nThanks for your\
    \ solution. I've edited my answer to include a solution that works for any number\
    \ divisible by 11 or 13.\n<|/ c |>\n<| c |>\nThanks for your solution. I've edited\
    \ my answer to include a solution that works for any number divisible by 11 or\
    \ 13.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long div = 11L;\n    long\
    \ remainder;\n    \n    while (n) {\n        remainder = n % div;\n        if\
    \ (remainder == 7L) {\n            count++;\n        }\n        div *= 11L;\n\
    \        n /= div;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis is not the best solution. `fizz_buzz(78)` returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\n: I agree with you. My solution is more of a \"\
    hack\" than a solution. I'll edit my answer to include a better solution.\n<|/\
    \ c |>\n<| c |>\n: I added a better solution. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\n: I added a better solution. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\n: I added a better solution. Thanks for pointing that out.\n\
    <|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n\tlong count = 0;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\
    \t{\n\t\tif((i % 11) == 0)\n\t\t{\n\t\t\tif((i % 13) == 0)\n\t\t\t{\n\t\t\t\t\
    count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n\
    \    long div = 11L;\n    long mod = 13L;\n    while(n > div) {\n        count\
    \ += n % div == mod ? 1 : 0;\n        div *= 10L;\n        mod *= 10L;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n<| c |>\nThanks for\
    \ your answer. Can you please explain me the logic behind this code?\n<|/ c |>\n\
    <| c |>\nThe code loops through all the numbers from 1 to n (inclusive) and checks\
    \ if the remainder when divided by 11 or 13 is equal to the remainder when divided\
    \ by 10 (mod 10). `count += n % div == mod ? 1 : 0;` means if `n % div == mod\
    \ then add 1 to `count`. Otherwise add 0.\n<|/ c |>\n<| c |>\nThanks a lot. Can\
    \ you please explain me the logic behind this code?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code explaining what each line does.\n<|/ c |>\n<| c |>\n\
    Thanks a lot. Can you please explain me the logic behind this code?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   \
    \ long count = 0;\n    long div = 11L;\n    long remainder;\n    \n    while(n\
    \ > div)\n    {\n        remainder = n % div;\n        \n        if(remainder\
    \ == 7L) \n        {\n            count++;\n        }\n        \n        div =\
    \ div * 10L;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with 50 and you'll see that it returns\
    \ 0 instead of 2.\n<|/ c |>\n<| c |>\n: I tested it with 50 and it returned 2.\
    \ What did you do to test it?\n<|/ c |>\n<| c |>\n: I tested it with 50 and it\
    \ returned 2. What did you do to test it?\n<|/ c |>\n<| c |>\n: I tested it with\
    \ 50 and it returned 2. What did you do to test it?\n<|/ c |>\n<| c |>\n: I tested\
    \ it with 50 and it returned 2. What did you do to test it?\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long temp;\n    \n    for(long i = n; i > 0; i /= 10) {\n        temp\
    \ = i % 11;\n        if(temp == 0 || temp == 7)\n            count++;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do it without using an array?\n<|/ c |>\n\
    <| c |>\n: Yes, there is. See my answer.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long temp;\n    \n    temp = n % 11;\n    if (temp == 0)\n        count\
    \ += 1;\n    \n    temp = n % 13;\n    if (temp == 0)\n        count += 1;\n \
    \   \n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so\
    \ much for the help! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome.\
    \ Feel free to accept the answer if it solved your problem.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>", "{\n    long count = 0;\n\
    \    while (n > 0)\n    {\n        if (n % 11 == 0 || n % 13 == 0)\n         \
    \   count++;\n        n /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution. Although I wonder why you didn't use modulo\
    \ operator in the first place. Is it because it is more efficient than division?\n\
    <|/ c |>\n<| c |>\nI didn't use modulo because I didn't know how to use it in\
    \ this situation. I'm still learning C and I didn't know how to use it until I\
    \ saw this solution. Thanks for the help!\n<|/ c |>\n<| c |>\nI didn't know how\
    \ to use it either, but now I do. Thanks for the help!\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long count = 0;\n    long x = n;\n    \n    while (x>0)\
    \ {\n        if ((x % 11) == 0 || (x % 13) == 0) {\n            count++;\n   \
    \     }\n        x /= 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `fizz_buzz(78L)` - it returns `2L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting\
    \ it. I just tested it again to be sure. `78L` returns `3L`.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Thanks for pointing that out. I've updated my answer to\
    \ fix it.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated my\
    \ answer to fix it.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated\
    \ my answer to fix it.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long i;\n    for(i = 1; i <= n;\
    \ i++) {\n        if(i % 11 == 0 || i % 13 == 0) {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11490274)\n\
    <|/ c |>\n<| c |>\nThe question was how to count the number of times the digit\
    \ 7 appears in integers less than n which are divisible by 11 or 13. My answer\
    \ was the correct solution to the question. Why do you think this does not provide\
    \ an answer?\n<|/ c |>\n<| c |>\nThe question was how to count the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\
    \ My answer was the correct solution to the question. Why do you think this does\
    \ not provide an answer?\n<|/ c |>\n<| c |>\nThe question was how to count the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13. My answer was the correct solution to the question. Why do you\
    \ think this does not provide an answer?\n<|/ c |>\n<| c |>\nThe question was\
    \ how to count the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13. My answer was the correct solution to the question.\
    \ Why do you think this does not provide an answer?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "{\n    long count = 0;\n    for(long i = n; i > 0; i /= 11)\n    {\n\
    \        count += n % 11;\n        n /= 11;\n    }\n    for(long i = n; i > 0;\
    \ i /= 13)\n    {\n        count += n % 13;\n        n /= 13;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long d = n % 10;\n    long m = n /\
    \ 10;\n    long x = m % 11;\n    long y = m / 11;\n    long z = m % 13;\n    long\
    \ a = m / 13;\n    \n    if (d == 7)\n    {\n        if (x != 0 || y != 0 || z\
    \ != 0 || a != 0)\n            count++;\n    }\n    \n    if (d == 6)\n    {\n\
    \        if (x != 0 || y != 0 || z != 0)\n            count++;\n    }\n    \n\
    \    if (d == 5)\n    {\n        if (x != 0 || y != 0)\n            count++;\n\
    \    }\n    \n    if (d == 4)\n    {\n        if (x != 0)\n            count++;\n\
    \    }\n    \n    if (d == 3)\n    {\n        if (y != 0)\n            count++;\n\
    \    }\n    \n    if (d == 2)\n    {\n        if (z != 0)\n            count++;\n\
    \    }\n    \n    if (d == 1)\n    {\n        if (a != 0)\n            count++;\n\
    \    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long count = 0;\n    long i;\n    for(i = 1; i <= n; i++) {\n        if((i\
    \ % 11) == 0 || (i % 13) == 0) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThis\
    \ is not an answer, but a comment. Please, remove it before you get downvoted.\n\
    <|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code, and how your solution fixes it.\n<|/ c |>\n<|\
    \ c |>\nI added some explanation to the answer.\n<|/ c |>\n<| c |>\nI added some\
    \ explanation to the answer.\n<|/ c |>\n<| c |>\nI added some explanation to the\
    \ answer.\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long count = 0;\n    long remainder;\n    \n  \
    \  while (n>0)\n    {\n        remainder = n%11;\n        if (remainder == 0 ||\
    \ remainder == 7)\n        {\n            count++;\n        }\n        n = n/11;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't know that you\
    \ could import std.math like that. Thanks!\n<|/ c |>\n<| c |>\nI didn't know that\
    \ you could import std.math like that. Thanks!\n<|/ c |>\n<| c |>\nI didn't know\
    \ that you could import std.math like that. Thanks!\n<|/ c |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long i;\n    \n    for(i = n - 1; i >= 0; i--)\n\
    \    {\n        remainder = n % 10;\n        if(remainder == 7 || remainder ==\
    \ 11)\n        {\n            count++;\n        }\n        n = n / 10;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `fizz_buzz(78L)`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the output to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the output to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the output to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added the output to the answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include\
    \ <stdint.h>\n#include <inttypes.h>", "{\n    long count = 0;\n    long div =\
    \ 11L;\n    long mod = 13L;\n    long tmp;\n    \n    while (n >= div)\n    {\n\
    \        tmp = (n % div);\n        if (tmp == mod)\n        {\n            count++;\n\
    \        }\n        div += 11L;\n        mod += 13L;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| a tags=fizzbuzz,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    long i;\n    \n    for(i = n - 1; i >= 0; i--)\n\
    \    {\n        remainder = n % 10;\n        if(remainder == 7 || remainder ==\
    \ 11)\n        {\n            count++;\n        }\n        n = n / 10;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work.\
    \ `fizz_buzz(78L)` returns `3` when it should be `2`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. `78L` is divisible by 11 and 13, so `fizz_buzz(78L)` returns `2`.\n<|/\
    \ c |>\n<| c |>\nOh, I see what you mean. You're right. Sorry about that. I'll\
    \ edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. `fizz_buzz(78L)` returns `3` when it should\
    \ be `2`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\tlong count = 0;\n\twhile\
    \ (n > 0)\n\t{\n\t\tlong remainder = n % 11;\n\t\tif (remainder == 0 || remainder\
    \ == 7)\n\t\t\tcount++;\n\t\tn /= 11;\n\t}\n\treturn count;\n}", "{\n\tlong count\
    \ = 0;\n\tlong div = 11L;\n\tlong remainder;\n\t\n\twhile (n>0)\n\t{\n\t\tremainder\
    \ = n % div;\n\t\tif (remainder == 7L) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tdiv\
    \ = div * 10L;\n\t\tn = n / div;\n\t}\n\treturn count;\n}\n/*\nReturn the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong\
    \ count = 0;\n\tlong div = 13L;\n\tlong remainder;\n\t\n\twhile (n>0)\n\t{\n\t\
    \tremainder = n % div;\n\t\tif (remainder == 7L) \n\t\t{\n\t\t\tcount++;\n\t\t\
    }\n\t\tdiv = div * 10L;\n\t\tn = n / div;\n\t}\n\treturn count;\n}\n/*\nReturn\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong\
    \ count = 0;\n\tlong div = 11L;\n\tlong remainder;\n\t\n\twhile (n>0)\n\t{\n\t\
    \tremainder = n % div;\n\t\tif (remainder == 7L) \n\t\t{\n\t\t\tcount++;\n\t\t\
    }\n\t\tdiv = div * 10L;\n\t\tn = n / div;\n\t}\n\treturn count;\n}\n/*\nReturn\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n    >>> fizz_buzz(50L)\n    0L\n    >>> fizz_buzz(78L)\n    2L\n\
    \    >>> fizz_buzz(79L)\n    3L\n    \n*/\nlong fizz_buzz(long n) \n{\n\tlong\
    \ count = 0;\n\tlong div = 13L;\n\tlong remainder;\n\t\n\twhile (n>0)\n\t{\n\t\
    \tremainder = n % div;\n\t\tif (remainder == 7L) \n\t\t{\n\t\t\tcount++;\n\t\t\
    }\n", "{\n    long count = 0;\n    long remainder;\n    long i;\n    \n    for(i\
    \ = 1; i <= n; i++){\n        remainder = i % 11;\n        if((remainder == 7)\
    \ || (remainder == 13)){\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question. He wants\
    \ to know how many times 7 appears in numbers divisible by 11 or 13. Your code\
    \ returns how many times 7 appears in numbers divisible by 11 or 13. He wants\
    \ to know how many times 7 appears in numbers divisible by 11 or 13 and divisible\
    \ by 7. Your code returns how many times 7 appears in numbers divisible by 11\
    \ or 13 and divisible by 7. He wants to know how many times 7 appears in numbers\
    \ divisible by 11 or 13 and divisible by 7 and divisible by 11.\n<|/ c |>\n<|\
    \ c |>\nHe wants to know how many times 7 appears in numbers divisible by 11 or\
    \ 13 and divisible by 7 and divisible by 11. He wants to know how many times 7\
    \ appears in numbers divisible by 11 or 13 and divisible by 7 and divisible by\
    \ 11. He wants to know how many times 7 appears in numbers divisible by 11 or\
    \ 13 and divisible by 7 and divisible by 11. He wants to know how many times 7\
    \ appears in numbers divisible by 11 or 13 and divisible by 7 and divisible by\
    \ 11. He wants to know how many times 7 appears in numbers divisible by 11 or\
    \ 13 and divisible by 7 and divisible by 11. He wants to know how many times 7\
    \ appears in numbers divisible by 11 or 13 and divisible by 7 and divisible by\
    \ 11. He wants to know how many times 7 appears in numbers divisible by 11 or\
    \ 13 and divisible by 7 and divisible by 11. He wants to know how many times 7\
    \ appears in numbers divisible by 11 or 13 and divisible by 7 and divisible by\
    \ 11. He wants to know how many times 7 appears in numbers divisible by 11 or\
    \ 13 and divisible by 7 and divisible by 11. He wants to know how many times 7\
    \ appears in numbers divisible by 11 or 13 and divisible by 7 and divisible by\
    \ 11. He wants to know how many times 7 appears in numbers divisible by 11 or\
    \ 13 and divisible by 7 and divisible by 11. He wants to know how many times 7\
    \ appear", "{\n    long count = 0;\n    long remainder;\n    long temp;\n    \n\
    \    while (n>0) {\n        remainder = n%11;\n        if (remainder == 7)\n \
    \           count++;\n        temp = n/11;\n        n = temp;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nThe question\
    \ was about C++, not C. `long long` isn't a standard type.\n<|/ c |>\n<| c |>\n\
    The question was tagged C++, so I assumed that he was using C++.\n<|/ c |>\n<|\
    \ c |>\nYes, but `long long` isn't a standard type. `long long` is only guaranteed\
    \ to be at least 64 bits.\n<|/ c |>\n<| c |>\nThe question was tagged C++, so\
    \ I assumed that he was using C++.\n<|/ c |>\n<| c |>\nThe question was tagged\
    \ C++, so I assumed that he was using C++.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long count = 0;\n\
    \    long remainder;\n    \n    while (n>0) {\n        remainder = n%11;\n   \
    \     if (remainder == 7) {\n            count++;\n        }\n        n = n/11;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it for n = 78.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it for n = 78. You'll get 3L. Try it for n = 79. You'll get 2L. Try it for\
    \ n = 80. You'll get 1L. Try it for n = 81. You'll get 0L.\n<|/ c |>\n<| c |>\n\
    It doesn't work for n = 78. Try it for n = 78. You'll get 3L. Try it for n = 79.\
    \ You'll get 2L. Try it for n = 80. You'll get 1L. Try it for n = 81. You'll get\
    \ 0L.\n<|/ c |>\n<| c |>\nIt works for n = 78. You'll get 3L. Try it for n = 79.\
    \ You'll get 2L. Try it for n = 80. You'll get 1L. Try it for n = 81. You'll get\
    \ 0L.\n<|/ c |>\n<| c |>\nIt works for n = 78. You'll get 3L. Try it for n = 79.\
    \ You'll get 2L. Try it for n = 80. You'll get 1L. Try it for n = 81. You'll get\
    \ 0L.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    long remainder;\n    \n    while(n > 0)\n\
    \    {\n        remainder = n % 11;\n        if (remainder == 0 || remainder ==\
    \ 7)\n            count++;\n        n = n / 11;\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=fizzbuzz,c++,algorithm |>\n<| c |>\nI like the idea of using\
    \ modulus instead of division. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ n is negative.\n<|/ c |>\n<| c |>\n: It does work if n is negative. `n % 11`\
    \ returns `0` when n is negative.\n<|/ c |>\n<| c |>\n: It does work if n is negative.\
    \ `n % 11` returns `0` when n is negative.\n<|/ c |>\n<| c |>\n: It does work\
    \ if n is negative. `n % 11` returns `0` when n is negative.\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe most efficient way is to use bit operations. \n<code>", "{\n    long\
    \ count = 0;\n    long remainder;\n    long temp;\n    \n    while (n>0) {\n \
    \       remainder = n%11;\n        if (remainder == 7) {\n            count++;\n\
    \        }\n        n = n/11;\n    }\n    \n    temp = count;\n    \n    while\
    \ (temp > 0) {\n        if (temp % 11 == 7)\n            count++;\n        temp\
    \ /= 11;\n    }\n    \n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nI like this solution, although it does require a lot of extra memory\
    \ (a lot of temporary variables).\n<|/ c |>\n<| c |>\nI agree with you, this is\
    \ definitely the most elegant solution. However I believe that it is also the\
    \ most inefficient solution (at least in terms of memory consumption).\n<|/ c\
    \ |>\n<| c |>\nI agree with you, this is definitely the most elegant solution.\
    \ However I believe that it is also the most inefficient solution (at least in\
    \ terms of memory consumption).\n<|/ c |>\n<| c |>\nI agree with you, this is\
    \ definitely the most elegant solution. However I believe that it is also the\
    \ most inefficient solution (at least in terms of memory consumption).\n<|/ c\
    \ |>\n<| c |>\nI agree with you, this is definitely the most elegant solution.\
    \ However I believe that it is also the most inefficient solution (at least in\
    \ terms of memory consumption).\n<|/ c |>\n<| a dscore=5 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <iterator>\n#include\
    \ <vector>", "{\n    long count = 0;\n    long remainder;\n    \n    for(long\
    \ i = 1; i <= n; i++) {\n        remainder = i % 11;\n        if (remainder ==\
    \ 0 || remainder == 7) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "{\n    long count =\
    \ 0;\n    long temp;\n    \n    temp = n % 11;\n    if (temp == 0) \n    {\n \
    \       temp = n % 13;\n        if (temp == 0) \n        {\n            temp =\
    \ n % 7;\n            if (temp == 0) \n            {\n                temp = n\
    \ % 5;\n                if (temp == 0) \n                {\n                 \
    \   temp = n % 3;\n                    if (temp == 0) \n                    {\n\
    \                        temp = n % 1;\n                        if (temp == 0)\
    \ \n                        {\n                            temp = n;\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n    }\n    \n    count = temp;\n    return count;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long count = 0;\n    long\
    \ remainder;\n    \n    while(n > 0)\n    {\n        remainder = n % 11;\n   \
    \     if (remainder == 0 || remainder == 7)\n        {\n            count++;\n\
    \        }\n        n = n / 11;\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with 50 and you'll see why.\n<|/\
    \ c |>\n<| c |>\n: I tested it with 50 and it returned 0 as expected.\n<|/ c |>\n\
    <| c |>\n: I tested it with 50 and it returned 0 as expected.\n<|/ c |>\n<| c\
    \ |>\n: I tested it with 50 and it returned 0 as expected.\n<|/ c |>\n<| c |>\n\
    : I tested it with 50 and it returned 0 as expected.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long remainder;\n    \n    for(long i = n; i > 0; i /= 10) {\n     \
    \   remainder = i % 10;\n        if(remainder == 7) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=fizzbuzz,c++ |>\n\
    <| a tags=fizzbuzz,c++ |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long count = 0;\n    long x = n;\n    \n    while (x > 0)\n    {\n     \
    \   if (x % 11 == 0 || x % 13 == 0)\n        {\n            count++;\n       \
    \ }\n        x /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,fizzbuzz,algorithm\
    \ |>\n<| c |>\nI like this solution, however it has a few problems. Firstly, it\
    \ only works with integers. Secondly, it only works with numbers divisible by\
    \ 11 or 13. Thirdly, it only works with numbers divisible by 11 or 13. Fourthly,\
    \ it only works with numbers divisible by 11 or 13. Fifthly, it only works with\
    \ numbers divisible by 11 or 13. Sixthly, it only works with numbers divisible\
    \ by 11 or 13. Seventhly, it only works with numbers divisible by 11 or 13. Eighthly,\
    \ it only works with numbers divisible by 11 or 13. Ninthly, it only works with\
    \ numbers divisible by 11 or 13. Tenthly, it only works with numbers divisible\
    \ by 11 or 13. Eleventhly, it only works with numbers divisible by 11 or 13. Twelfthly,\
    \ it only works with numbers divisible by 11 or 13. Thirteenthly, it only works\
    \ with numbers divisible by 11 or 13. Fourteenthly, it only works with numbers\
    \ divisible by 11 or 13. Fifteenthly, it only works with numbers divisible by\
    \ 11 or 13. Sixteenthly, it only works with numbers divisible by 11 or 13. Seventeenthly,\
    \ it only works with numbers divisible by 11 or 13. Eighteenthly, it only works\
    \ with numbers divisible by 11 or 13. Nineteenthly, it only works with numbers\
    \ divisible by 11 or 13. Twentiethly, it only works with numbers divisible by\
    \ 11 or 13. Twenty-first, it only works with numbers divisible by 11 or 13. Twenty-second,\
    \ it only works with numbers divisible by 11 or 13. Twenty-third, it only works\
    \ with numbers divisible by 11 or 13. Twenty-fourth, it only works with numbers\
    \ divisible by 11 or 13. Twenty-fifth, it only works with numbers divisible by\
    \ 11 or 13. Twenty-sixth, it only works with numbers divisible by 11 or 13. Twenty-seventh,\
    \ it only works with numbers divisible by 11 or "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
