name: HumanEval_76_is_simple_power
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L,\
  \ 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L,\
  \ 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L,\
  \ 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long\
  \ x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    long long power = 1;\n    long long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= x;\n        result *= power;\n        n /= 2;\n\
    \    }\n    \n    return result == x;\n}", "{\n    long result = 1;\n    long\
    \ power = 1;\n    \n    while (power < n)\n    {\n        result *= x;\n     \
    \   power *= x;\n    }\n    \n    return (result == x);\n}", "{\n    if (n ==\
    \ 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n    if\
    \ (x < 0)\n        return false;\n    long res = 1;\n    while (n > 1) {\n   \
    \     if (n % 2 == 0) {\n            res = res * x;\n        }\n        n = n\
    \ / 2;\n        x = x * x;\n    }\n    return (res == x);\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe question was about C++, not C. `std::pow` does not exist in\
    \ C++.\n<|/ c |>\n<| c |>\nYes, I know. My answer was in C. My mistake.\n<|/ c\
    \ |>\n<| c |>\nThis code doesn't work for negative numbers. `is_simple_power(-1L,\
    \ 4L)` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nThe code still doesn't work for\
    \ negative numbers. `is_simple_power(-1L, 4L)` returns `true` instead of `false`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long r = 1;\n    long m = n;\n  \
    \  long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n \
    \   long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= 2;\n  \
    \  }\n    \n    return result == power;\n}", "{\n    long long power = 1;\n  \
    \  long long result = 1;\n    \n    while (n > 0)\n    {\n        power *= x;\n\
    \        result *= power;\n        n--;\n    }\n    \n    return (result == x);\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = ", "{\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 1L) return true;\n    if (x == 2L) return\
    \ true;\n    if (x == 3L) return true;\n    if (x == 5L) return true;\n    if\
    \ (x == 8L) return true;\n    if (x == 16L) return true;\n    if (x == 32L) return\
    \ true;\n    if (x == 64L) return true;\n    if (x == 128L) return true;\n   \
    \ if (x == 256L) return true;\n    if (x == 512L) return true;\n    if (x == 1024L)\
    \ return true;\n    if (x == 2048L) return true;\n    if (x == 4096L) return true;\n\
    \    if (x == 8192L) return true;\n    if (x == 16384L) return true;\n    if (x\
    \ == 32768L) return true;\n    if (x == 65536L) return true;\n    if (x == 131072L)\
    \ return true;\n    if (x == 262144L) return true;\n    if (x == 524288L) return\
    \ true;\n    if (x == 1048576L) return true;\n    if (x == 2097152L) return true;\n\
    \    if (x == 4194304L) return true;\n    if (x == 8388608L) return true;\n  \
    \  if (x == 16777216L) return true;\n    if (x == 33554432L) return true;\n  \
    \  if (x == 67108864L) return true;\n    if (x == 134217728L) return true;\n \
    \   if (x == 268435456L) return true;\n    if (x == 536870912L) return true;\n\
    \    if (x == 1073741824L) return true;\n    if (x == 2147483648L) return true;\n\
    \    if (x == 4294967296L) return true;\n    if (x == 8589934592L) return true;\n\
    \    if (x == 17179869184L) return true;\n    if (x == 34359738368L) return true;\n\
    \    if (x == 68719476736L) return true;\n    if (x == 137438953472L) return true;\n\
    \    if (x == 274877906944L) return true;\n    if (x == 549755813888L) return\
    \ true;\n    if (x == 1099511627776L) return true;\n    if (x == 2199023255552L)\
    \ return true;\n    if (x == 4398046511104L) return true;\n    if (x == 8796093022208L)\
    \ return true;\n    if (x == 17592186044416L) return true;\n    if (x == 35184372088832L)\
    \ return true;\n    if (x == 70368744177664L) return true;\n    if (x == 140737488355328L)\
    \ return true;\n    if (x == 281474976710656L) return true;\n    if (x == 562949953421312L)\
    \ return true;\n    if (x == 1125899906842624L) return true;\n", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result\
    \ == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while (n > 1) {\n        power = power * n;\n       \
    \ if (power == x) {\n            result = true;\n            break;\n        }\n\
    \        n = n - 1;\n    }\n    \n    return result;\n}", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while (n > 1) {\n        power *= n;\n \
    \       result *= x;\n        n /= 2;\n    }\n    \n    return result == power;\n\
    }", "{\n    if (n == 0) return true;\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long m = n / 3;\n    if (m == 0) return false;\n    if (m == 1)\
    \ return true;\n    if (m == n) return true;\n    if (m % 2 == 0) return false;\n\
    \    if (m % 3 == 0) return false;\n    long m2 = m / 3;\n    if (m2 == 0) return\
    \ false;\n    if (m2 == 1) return true;\n    if (m2 == n) return true;\n    if\
    \ (m2 % 2 == 0) return false;\n    if (m2 % 3 == 0) return false;\n    long m3\
    \ = m2 / 3;\n    if (m3 == 0) return false;\n    if (m3 == 1) return true;\n \
    \   if (m3 == n) return true;\n    if (m3 % 2 == 0) return false;\n    if (m3\
    \ % 3 == 0) return false;\n    long m4 = m3 / 3;\n    if (m4 == 0) return false;\n\
    \    if (m4 == 1) return true;\n    if (m4 == n) return true;\n    if (m4 % 2\
    \ == 0) return false;\n    if (m4 % 3 == 0) return false;\n    long m5 = m4 /\
    \ 3;\n    if (m5 == 0) return false;\n    if (m5 == 1) return true;\n    if (m5\
    \ == n) return true;\n    if (m5 % 2 == 0) return false;\n    if (m5 % 3 == 0)\
    \ return false;\n    long m6 = m5 / 3;\n    if (m6 == 0) return false;\n    if\
    \ (m6 == 1) return true;\n    if (m6 == n) return true;\n    if (m6 % 2 == 0)\
    \ return false;\n    if (m6 % 3 == 0) return false;\n    long m7 = m6 / 3;\n \
    \   if (m7 == 0) return false;\n    if (m7 == 1) return true;\n    if (m7 == n)\
    \ return true;\n    if (m7 % 2 == 0) return false;\n    if (m7 % 3 == 0) return\
    \ false;\n    long m8 = m7 / 3;\n    if (m8 == 0) return false;\n    if (m8 ==\
    \ 1) return true;\n    if (m8 == n) return true;\n    if (m8 % 2 == 0) return\
    \ false;\n    if (m8 % 3 == 0) return false;\n    long m9 = m8 / 3;\n    if (m9\
    \ == 0) return false;\n    if (m9 == 1) return true;\n    if (m9 == n) return\
    \ true;\n    if (m9 % 2 == 0) return false;\n    if (m9 % 3 == 0) return false;\n\
    \    long m10 = m9 / 3;\n    if (m10 == 0) return false;\n    if (m10 == 1) return\
    \ true;\n    if (m10 == n) return true;\n    if (", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power = power *\
    \ x;\n        n = n - 1;\n    }\n    \n    while(power > 0)\n    {\n        result\
    \ = result * power;\n        power = power - 1;\n    }\n    \n    if(result ==\
    \ x)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    if (x == 1L) return true;\n    if\
    \ (x == 0L) return false;\n    if (n == 0L) return false;\n    if (n == 1L) return\
    \ true;\n    \n    long r = 1L;\n    \n    long d = 1L;\n    \n    long m = 0L;\n\
    \    \n    long k = 0L;\n    \n    long j = 0L;\n    \n    long k1 = 1L;\n   \
    \ \n    long k2 = 1L;\n    \n    long k3 = 1L;\n    \n    long k4 = 1L;\n    \n\
    \    long k5 = 1L;\n    \n    long k6 = 1L;\n    \n    long k7 = 1L;\n    \n \
    \   long k8 = 1L;\n    \n    long k9 = 1L;\n    \n    long k10 = 1L;\n    \n \
    \   long k11 = 1L;\n    \n    long k12 = 1L;\n    \n    long k13 = 1L;\n    \n\
    \    long k14 = 1L;\n    \n    long k15 = 1L;\n    \n    long k16 = 1L;\n    \n\
    \    long k17 = 1L;\n    \n    long k18 = 1L;\n    \n    long k19 = 1L;\n    \n\
    \    long k20 = 1L;\n    \n    long k21 = 0L;\n    \n    long k22 = 0L;\n    \n\
    \    long k23 = 0L;\n    \n    long k24 = 0L;\n    \n    long k25 = 0L;\n    \n\
    \    long k26 = 0L;\n    \n    long k27 = 0L;\n    \n    long k28 = 0L;\n    \n\
    \    long k29 = 0L;\n    \n    long k30 = 0L;\n    \n    long k31 = 0L;\n    \n\
    \    long k32 = 0L;\n    \n    long k33 = 0L;\n    \n    long k34 = 0L;\n    \n\
    \    long k35 = 0L;\n    \n    long k36 = 0L;\n    \n    long k37 = 0L;\n    \n\
    \    long k38 = 0L;\n    \n    long k39 = 0L;\n    \n    long k40 = 0L;\n    \n\
    \    long k41 = 0L;\n    \n    long k42 = 0L;\n    \n    long k43 = 0L;\n    \n\
    \    long k44 = 0L;\n", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = ", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while (n > 1) {\n        if (n % 2 == 1) {\n\
    \            power *= x;\n        }\n        result *= x;\n        n /= 2;\n \
    \       x *= x;\n    }\n    \n    if (n == 1) {\n        if (power * x == x) {\n\
    \            return true;\n        }\n    }\n    \n    return false;\n}", "{\n\
    \    long result = 1;\n    long power = 1;\n    \n    while(power < n)\n    {\n\
    \        result *= x;\n        power *= x;\n    }\n    \n    return result ==\
    \ x;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n  \
    \  \n    return result == power;\n}", "{\n    long result = 1;\n    for(int i\
    \ = 1; i < n; i++){\n        result = result * x;\n    }\n    return result ==\
    \ x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct. `is_simple_power(3L,\
    \ 3L)` returns `true` but `is_simple_power(3L, 2L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    if (x == 1L) return\
    \ true;\n    if (x == 0L) return false;\n    if (n == 0L) return false;\n    if\
    \ (n == 1L) return true;\n    long r = 1L;\n    long m = 1L;\n    while (m <=\
    \ n) \n    {\n        if (m % 2 == 1L) \n        {\n            r *= x;\n    \
    \    }\n        m += 2L;\n    }\n    return (r == x);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine for small numbers\
    \ but for large numbers it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| c |>\nI added a faster version that uses `long` instead of `int`.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works fine for small numbers\
    \ but for large numbers it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| c |>\nI added a faster version that uses `long` instead of `int`.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works fine for small numbers\
    \ but for large numbers it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n\
    #include <math.h>", "{\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = ", "{\n    long power = 1;\n  \
    \  long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n    \
    \    result *= x;\n        n -= power;\n    }\n    \n    return result == x;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try is_simple_power(3L,\
    \ 3L).\n<|/ c |>\n<| c |>\nIt does work. Try is_simple_power(3L, 3L). You will\
    \ get false\n<|/ c |>\n<| c |>\nYes, it works. But it also works with `is_simple_power(3L,\
    \ 2L)`. Try it.\n<|/ c |>\n<| c |>\nYes, it works. Try it. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. Try it\
    \ again. Try it again. Try it again. Try it again. Try it again. Try it again.\
    \ Try it again. Try it again. Try it again. Try it again. Try it again. ", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while (n > 0)\n    {\n \
    \       power = power * n;\n        n = n - 1;\n    }\n    \n    while (power\
    \ > 0)\n    {\n        if (x % power == 0)\n        {\n            result = false;\n\
    \            break;\n        }\n        power = power * n;\n        n = n - 1;\n\
    \    }\n    \n    return result;\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while (n > 1) {\n        if (n % 2 == 0) {\n            power\
    \ *= x;\n        }\n        x /= 2;\n        result *= x;\n        n /= 2;\n \
    \   }\n    \n    if (n == 1) {\n        if (power == x) {\n            return\
    \ true;\n        }\n    }\n    \n    return false;\n}", "{\n    long res = 1;\n\
    \    for(long i = 1; i < n; i++){\n        res *= x;\n    }\n    return res ==\
    \ x;\n}", "{\n    if (x == 1L) return true;\n    if (x == 0L) return false;\n\
    \    if (n == 0L) return false;\n    if (n == 1L) return true;\n    if (n % 2\
    \ == 1L) return false;\n    long a = long(x) / n;\n    long b = long(x) % n;\n\
    \    long c = long(n) / n;\n    long d = long(n) % n;\n    if (a == 1L) return\
    \ true;\n    if (b == 1L) return true;\n    if (c == 1L) return true;\n    if\
    \ (d == 1L) return true;\n    if (a == 0L) return false;\n    if (b == 0L) return\
    \ false;\n    if (c == 0L) return false;\n    if (d == 0L) return false;\n   \
    \ if (a == 1L) return true;\n    if (b == 1L) return true;\n    if (c == 1L) return\
    \ true;\n    if (d == 1L) return true;\n    if (a == 0L) return false;\n    if\
    \ (b == 0L) return false;\n    if (c == 0L) return false;\n    if (d == 0L) return\
    \ false;\n    if (a == 1L) return true;\n    if (b == 1L) return true;\n    if\
    \ (c == 1L) return true;\n    if (d == 1L) return true;\n    if (a == 0L) return\
    \ false;\n    if (b == 0L) return false;\n    if (c == 0L) return false;\n   \
    \ if (d == 0L) return false;\n    if (a == 1L) return true;\n    if (b == 1L)\
    \ return true;\n    if (c == 1L) return true;\n    if (d == 1L) return true;\n\
    \    if (a == 0L) return false;\n    if (b == 0L) return false;\n    if (c ==\
    \ 0L) return false;\n    if (d == 0L) return false;\n    if (a == 1L) return true;\n\
    \    if (b == 1L) return true;\n    if (c == 1L) return true;\n    if (d == 1L)\
    \ return true;\n    if (a == 0L) return false;\n    if (b == 0L) return false;\n\
    \    if (c == 0L) return false;\n    if (d == 0L) return false;\n    if (a ==\
    \ 1L) return true;\n    if (b == 1L) return true;\n    if (c == 1L) return true;\n\
    \    if (d == 1L) return true;\n    if (a == 0L) return false;\n    if (b == 0L)\
    \ return false;\n    if (c == 0L) return false;\n    if (d == 0L) return false;\n\
    \    if (a == 1L) return true;\n    if (b == 1L) return true;\n    if (c == 1L)\
    \ return true;\n    if (d == 1L) return true;\n    if (a == 0L) return false;\n\
    \    if (b == 0L) return false;\n    if (c == 0L) return false;\n    if (d ==\
    \ 0L) return false;\n    if (a == 1L) return true;\n    if (b == 1L) return true;\n\
    \    if (c == 1L) return true;\n    if (d == 1L) return true;\n    if (a == 0L)\
    \ return false;\n    if (b == 0L) return false;\n    if (c == 0L) return false;\n\
    \    if (d == 0L) return false;\n    if (a == 1L) return true;\n    if (b == 1L)\
    \ return true;\n    if (c == 1L) return true;\n    if (d == 1L) return true;\n\
    \    if (", "{\n    long power = 1;\n    long result = 1;\n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n /= 2;\n    }\n  \
    \  return (result == power);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work for `is_simple_power(3L, 2L)` which returns `true` but should be `false`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to fix the problem.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\nThe algorithm is quite simple:\n<code>",
  "{\n    if (n == 0) return true;\n    if (n == 1) return true;\n    if (n % 2 ==\
    \ 0) return false;\n    long r = x;\n    long m = n / 2;\n    while (m > 1) {\n\
    \        if (m % 2 == 0) return false;\n        r = r * r;\n        m = m / 2;\n\
    \    }\n    return r == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    The question was about a power of 2, not about a power of n.\n<|/ c |>\n<| c |>\n\
    : I believe that `is_simple_power(2L, 2L)` returns `true` because `2L**2=2L`.\n\
    <|/ c |>\n<| c |>\n: Yes, I see that now. My bad.\n<|/ c |>\n<| c |>\n: I believe\
    \ that `is_simple_power(2L, 2L)` returns `true` because `2L**2=2L`.\n<|/ c |>\n\
    <| c |>\n: Yes, I see that now. My bad.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    long long int power = 1;\n    long long int result = 1;\n   \
    \ \n    while (n > 1) {\n        if (n % 2 == 0) {\n            power *= x;\n\
    \        }\n        result *= x;\n        n /= 2;\n        x *= x;\n    }\n  \
    \  \n    if (n == 1) {\n        if (power == result) {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= 2;\n    }\n    \n    return result == power;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n        power *=\
    \ n;\n        result *= x;\n        n /= 2;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    long long power = 1;\n    long long result = 1;\n    \n\
    \    while (n > 1) {\n        power *= n;\n        result *= x;\n        n /=\
    \ 2;\n    }\n    \n    return (result == power);\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\n`pow` returns `double`, not `long long`.\n<|/ c |>\n<| c |>\n`pow`\
    \ returns `double`, not `long long`.  `pow` returns `double` because `double`\
    \ has more precision than `long long`.  `long long` has less precision than `double`.\
    \  `long long` has less precision than `float`.  `long long` has less precision\
    \ than `int`.  `long long` has less precision than `short`.  `long long` has less\
    \ precision than `char`.  `long long` has less precision than `unsigned char`.\
    \  `long long` has less precision than `unsigned short`.  `long long` has less\
    \ precision than `unsigned int`.  `long long` has less precision than `unsigned\
    \ long`.  `long long` has less precision than `unsigned long long`.  `long long`\
    \ has less precision than `float`.  `long long` has less precision than `double`.\
    \  `long long` has less precision than `long double`.  `long long` has less precision\
    \ than `__int128`.  `long long` has less precision than `__uint128`.  `long long`\
    \ has less precision than `__float128`.  `long long` has less precision than `__double128`.\
    \  `long long` has less precision than `__int256`.  `long long` has less precision\
    \ than `__uint256`.  `long long` has less precision than `__float256`.  `long\
    \ long` has less precision than `__double256`.  `long long` has less precision\
    \ than `__int512`.  `long long` has less precision than `__uint512`.  `long long`\
    \ has less precision than `__float512`.  `long long` has less precision than `__double512`.\
    \  `long long` has less precision than `__int1024`.  `long long` has less precision\
    \ than `__uint1024`.  `long long` has less precision than `__float1024`.  `long\
    \ long` has less precision than `__double1024`.  `long long` has less precision\
    \ than `__int2048`.  `long long` has less precision than `__uint2048`.  `long\
    \ long` has less precision than `__float2048`.  `long long", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return (result ==\
    \ power);\n}", "{\n    long result = 1;\n    long power = 1;\n    \n    while(power\
    \ < n)\n    {\n        result *= x;\n        power *= x;\n    }\n    \n    return\
    \ result == x;\n}", "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n\
    \        return (x == 1);\n    if (x == 1)\n        return false;\n    long r\
    \ = 1;\n    long m = 1;\n    while (m <= n)\n    {\n        if (m % 2 == 1)\n\
    \            r *= x;\n        m += 1;\n    }\n    return (r == x);\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math |>\n<| c |>\nI believe this fails for `is_simple_power(3L,\
    \ 3L)`\n<|/ c |>\n<| c |>\n: Yes, it fails for 3L and 3L. Fixed now.\n<|/ c |>\n\
    <| c |>\n`is_simple_power(3L, 3L)` returns `true` on my machine.\n<|/ c |>\n<|\
    \ c |>\n: Yes, it returns true on my machine. Fixed now.\n<|/ c |>\n<| c |>\n\
    `is_simple_power(3L, 3L)` returns `true` on my machine.\n<|/ c |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>", "{\n    if (n == 0) return true;\n    if (n == 1) return false;\n\
    \    if (x == 1) return true;\n    long res = 1;\n    for (long i = 1; i < n;\
    \ i++) res = (res*x)%n;\n    return res == x;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not work. Try it with `is_simple_power(2L, 2L)`\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting it. What is the problem?\n<|/ c\
    \ |>\n<| c |>\nIt does not work for `is_simple_power(2L, 2L)`\n<|/ c |>\n<| c\
    \ |>\nIt works for me. Try it again. `is_simple_power(2L, 2L)` returns `true`\n\
    <|/ c |>\n<| c |>\nIt does not work for `is_simple_power(2L, 2L)`\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while (n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return (result == power);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct. `is_simple_power(1L,\
    \ 4L)` returns `true` but `is_simple_power(2L, 2L)` returns `false`.\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing out. I fixed the code.\n<|/ c |>\n<| c |>\n`is_simple_power(1L,\
    \ 4L)` returns `true` but `is_simple_power(2L, 2L)` returns `false`\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing out. I fixed the code.\n<|/ c |>\n<| c |>\n`is_simple_power(1L,\
    \ 4L)` returns `true` but `is_simple_power(2L, 2L)` returns `false`\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while (n > 1) {\n        power *= n;\n        result *= x;\n\
    \        n /= 2;\n    }\n    \n    if (result == power) {\n        return true;\n\
    \    }\n    \n    return false;\n}", "{\n    long r = 1;\n    long m = n;\n  \
    \  while(m > 1)\n    {\n        if(x == m**r)\n        {\n            return true;\n\
    \        }\n        r <<= 1;\n        m >>= 1;\n    }\n    return false;\n}",
  "{\n    long result = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    ", "{\n    long power = 1;\n    long result = 1;\n    \n   \
    \ while (n > 1) {\n        if (n % 2 == 0) {\n            power *= x;\n      \
    \  }\n        n /= 2;\n        x *= x;\n    }\n    \n    if (n == 1) {\n     \
    \   power *= x;\n    }\n    \n    return (power * x == result);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThe question states that `3L` should be\
    \ false, but your code returns true.\n<|/ c |>\n<| c |>\nI fixed the bug, thank\
    \ you for pointing it out.\n<|/ c |>\n<| c |>\nThis code doesn't work. `is_simple_power(3L,\
    \ 3L)` returns true.\n<|/ c |>\n<| c |>\nI fixed the bug, thank you for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nThis code doesn't work. `is_simple_power(3L, 3L)`\
    \ returns true.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    if (n == 0)\n  \
    \      return true;\n    if (n == 1)\n        return (x == 1);\n    if (x < 0)\n\
    \        return false;\n    long result = 1;\n    while (n > 0)\n    {\n     \
    \   if (n % 2 == 0)\n        {\n            if (result % x == 0)\n           \
    \     return false;\n            result *= x;\n        }\n        n /= 2;\n  \
    \      x *= x;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. `is_simple_power(2L, 2L)` returns `true` but `is_simple_power(2L,\
    \ 3L)` returns `false`.\n<|/ c |>\n<| c |>\nI fixed the bug. Now it works.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. `is_simple_power(2L, 2L)` returns `true` but\
    \ `is_simple_power(2L, 3L)` returns `false`.\n<|/ c |>\n<| c |>\nI fixed the bug.\
    \ Now it works.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long power = 1;\n    long result\
    \ = 1;\n    while(n > 0)\n    {\n        power = power * n;\n        result =\
    \ result * x;\n        n = n - 1;\n    }\n    return (result == power);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis fails for `is_simple_power(1L, 4L)`\
    \ which returns `true` but should return `false`.\n<|/ c |>\n<| c |>\nIt fails\
    \ for `is_simple_power(1L, 4L)` because `is_simple_power(1L, 4L)` returns `true`\
    \ but should return `false`\n<|/ c |>\n<| c |>\nIt fails for `is_simple_power(1L,\
    \ 4L)` because `is_simple_power(1L, 4L)` returns `true` but should return `false`\n\
    <|/ c |>\n<| c |>\nIt fails for `is_simple_power(1L, 4L)` because `is_simple_power(1L,\
    \ 4L)` returns `true` but should return `false`\n<|/ c |>\n<| c |>\nIt fails for\
    \ `is_simple_power(1L, 4L)` because `is_simple_power(1L, 4L)` returns `true` but\
    \ should return `false`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    if (n ==\
    \ 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0) return is_simple_power(x,\
    \ n / 2);\n    else return is_simple_power(x * x, n / 2);\n}", "{\n    if (x ==\
    \ 1L)\n        return true;\n    if (x == 0L)\n        return false;\n    if (n\
    \ == 0L)\n        return false;\n    if (n < 0L)\n        return false;\n    if\
    \ (n % 2L == 0L)\n        return is_simple_power(x, n / 2L);\n    if (n % 2L ==\
    \ 1L)\n        return is_simple_power(x, n / 2L);\n    if (n % 4L == 0L)\n   \
    \     return is_simple_power(x, n / 4L);\n    if (n % 4L == 1L)\n        return\
    \ is_simple_power(x, n / 4L);\n    if (n % 8L == 0L)\n        return is_simple_power(x,\
    \ n / 8L);\n    if (n % 8L == 1L)\n        return is_simple_power(x, n / 8L);\n\
    \    if (n % 16L == 0L)\n        return is_simple_power(x, n / 16L);\n    if (n\
    \ % 16L == 1L)\n        return is_simple_power(x, n / 16L);\n    if (n % 32L ==\
    \ 0L)\n        return is_simple_power(x, n / 32L);\n    if (n % 32L == 1L)\n \
    \       return is_simple_power(x, n / 32L);\n    if (n % 64L == 0L)\n        return\
    \ is_simple_power(x, n / 64L);\n    if (n % 64L == 1L)\n        return is_simple_power(x,\
    \ n / 64L);\n    if (n % 128L == 0L)\n        return is_simple_power(x, n / 128L);\n\
    \    if (n % 128L == 1L)\n        return is_simple_power(x, n / 128L);\n    if\
    \ (n % 256L == 0L)\n        return is_simple_power(x, n / 256L);\n    if (n %\
    \ 256L == 1L)\n        return is_simple_power(x, n / 256L);\n    if (n % 512L\
    \ == 0L)\n        return is_simple_power(x, n / 512L);\n    if (n % 512L == 1L)\n\
    \        return is_simple_power(x, n / 512L);\n    if (n % 1024L == 0L)\n    \
    \    return is_simple_power(x, n / 1024L);\n    if (n % 1024L == 1L)\n       \
    \ return is_simple_power(x, n / 1024L);\n    if (n % 2048L == 0L)\n        return\
    \ is_simple_power(x, n / 2048L);\n    if (n % 2048L == 1L)\n        return is_simple_power(x,\
    \ n / 2048L);\n    if (n % 4096L == 0L)\n        return is_simple_power(x, n /\
    \ 4096L);\n    if (n % 4096L == 1L)\n        return is_simple_power(x, n / 4096L);\n\
    \    if (n % 8192L == 0L)\n        return is_simple_power(x, n / 8192L);\n   \
    \ if (n % 8192L == 1L)\n        return is_simple_power(x, n / 8192L);\n    if\
    \ (n % 16384L == 0L)\n        return is_", "{\n    if (n == 0)\n        return\
    \ true;\n    if (n == 1)\n        return (x == 1);\n    if (n % 2 == 0)\n    \
    \    return is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x\
    \ * x, n / 2);\n}", "{\n    if (x == 1L)\n        return true;\n    if (x == 0L)\n\
    \        return false;\n    if (n == 0L)\n        return false;\n    if (n % 2\
    \ == 0L)\n        return is_simple_power(x, n / 2L);\n    return is_simple_power(x,\
    \ n / 2L) && is_simple_power(x, n / 2L);\n}", "{\n    long long power = 1;\n \
    \   long long result = 1;\n    \n    while (n > 1) {\n        power *= n;\n  \
    \      result *= x;\n        n /= 2;\n    }\n    \n    if (n == 1) {\n       \
    \ if (result == x) {\n            return true;\n        }\n    }\n    \n    return\
    \ false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work.\
    \ `is_simple_power(1L, 4L)` returns `true` but `is_simple_power(3L, 2L)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've fixed the code.\n\
    <|/ c |>\n<| c |>\nThe code still doesn't work. `is_simple_power(1L, 4L)` returns\
    \ `true` but `is_simple_power(3L, 2L)` returns `false`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing out. I've fixed the code.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ out. I've fixed the code.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n\
    \    long result = 1;\n    long power = 1;\n    while(power < n)\n    {\n    \
    \    result *= x;\n        power *= x;\n    }\n    return result == x;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for negative powers, e.g.\
    \ `is_simple_power(1L, -2L)` returns `true`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ `is_simple_power(1L, -2L)` returns `true`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ `is_simple_power(1L, -2L)` returns `true`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ `is_simple_power(1L, -2L)` returns `true`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ `is_simple_power(1L, -2L)` returns `true`.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    if (n == 0) \n    {\n        return true;\n    }\n    long\
    \ r = 1;\n    while (n) \n    {\n        if ((n % 2) == 0) \n        {\n     \
    \       r *= x;\n        }\n        n /= 2;\n        x *= x;\n    }\n    return\
    \ r == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct.\
    \ `is_simple_power(3L, 2L)` returns `true` but `3L**2 == 9L`.\n<|/ c |>\n<| c\
    \ |>\nI guess I misunderstood the question. I'll edit my answer.\n<|/ c |>\n<|\
    \ c |>\nThe question was about a number `x` being a simple power of `n`, not about\
    \ a number `n` being a simple power of `x`. So your answer is not correct.\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a solution that checks for simple\
    \ powers.\n<|/ c |>\n<| c |>\nThe question was about a number `x` being a simple\
    \ power of `n`, not about a number `n` being a simple power of `x`. So your answer\
    \ is not correct.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = ", "{\n    long power = 1;\n    long result = 1;\n    \n   \
    \ while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n /=\
    \ x;\n    }\n    \n    return result == power;\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while (n > 1) {\n        if (n % 2 == 1) {\n\
    \            power *= x;\n        }\n        n /= 2;\n        x *= x;\n    }\n\
    \    \n    if (n == 1) {\n        power *= x;\n    }\n    \n    return power==result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `is_simple_power(1L,\
    \ 4L)` returns `true` while `is_simple_power(3L, 2L)` returns `false`\n<|/ c |>\n\
    <| c |>\nYes, I forgot to add that case. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I think I should add that my question was about\
    \ a general solution, not just for powers of 2.\n<|/ c |>\n<| c |>\nI added a\
    \ general solution for any number n and any number x.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I think I should add that my question was about a general solution,\
    \ not just for powers of 2.\n<|/ c |>\n<| a |>\n<code>", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        n /= x;\n    }\n    \n    return (result == power);\n\
    }", "{\n    long result = 1;\n    long power = 1;\n    \n    while(power < n)\n\
    \    {\n        result *= x;\n        power *= x;\n    }\n    \n    if(result\
    \ == x)\n    {\n        return true;\n    }\n    \n    return false;\n}", "{\n\
    \    if (n == 0) return true;\n    if (n == 1) return true;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return false;\n    if (x == 2) return true;\n    if\
    \ (x == n) return true;\n    if (x < n) return is_simple_power(x, n-1);\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I\
    \ wonder why you used `long` instead of `int`?\n<|/ c |>\n<| c |>\nI used `long`\
    \ because I wanted to be sure that `int` would not overflow the range of the numbers.\
    \ I didn't want to change the code too much just to make it work. `int` would\
    \ work just as well.\n<|/ c |>\n<| c |>\nI see. Thanks for your answer!\n<|/ c\
    \ |>\n<| a dscore=1 |>\nI wrote a recursive function which checks if a number\
    \ is a power of n. \n<code>", "{\n    long result = 1;\n    long power = 1;\n\
    \    \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n  \
    \      n /= x;\n    }\n    \n    return result == power;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like your solution, but I believe it can be optimized a little\
    \ more. For example, you can start by calculating the factorial of n and use that\
    \ to calculate the factorial of x and then compare the two results. That would\
    \ save you a lot of multiplications and divisions.\n<|/ c |>\n<| c |>\nYes, that\
    \ would be a good optimization, thank you. I'll edit my answer.\n<|/ c |>\n<|\
    \ c |>\nI believe this solution will fail for large values of x and n. For example,\
    \ `is_simple_power(2L, 3L)` returns `true` but `is_simple_power(2L, 4L)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nYes, I believe it will. I'll edit my answer to\
    \ include a solution that will work for large values of x and n.\n<|/ c |>\n<|\
    \ c |>\nI believe this solution will fail for large values of x and n. For example,\
    \ `is_simple_power(2L, 3L)` returns `true` but `is_simple_power(2L, 4L)` returns\
    \ `false`.\n<|/ c |>\n<| a tags=c++,algorithm |>\nI believe this solution will\
    \ work for large values of x and n. For example, is_simple_power(2L, 3L) returns\
    \ true but is_simple_power(2L, 4L) returns false.\n<code>", "{\n    if (n==1)\
    \ return true;\n    if (n==0) return false;\n    if (n==-1) return false;\n  \
    \  if (n==-2) return false;\n    if (n==-3) return false;\n    if (n==-4) return\
    \ false;\n    if (n==-5) return false;\n    if (n==-6) return false;\n    if (n==-7)\
    \ return false;\n    if (n==-8) return false;\n    if (n==-9) return false;\n\
    \    if (n==-10) return false;\n    if (n==-11) return false;\n    if (n==-12)\
    \ return false;\n    if (n==-13) return false;\n    if (n==-14) return false;\n\
    \    if (n==-15) return false;\n    if (n==-16) return false;\n    if (n==-17)\
    \ return false;\n    if (n==-18) return false;\n    if (n==-19) return false;\n\
    \    if (n==-20) return false;\n    if (n==-21) return false;\n    if (n==-22)\
    \ return false;\n    if (n==-23) return false;\n    if (n==-24) return false;\n\
    \    if (n==-25) return false;\n    if (n==-26) return false;\n    if (n==-27)\
    \ return false;\n    if (n==-28) return false;\n    if (n==-29) return false;\n\
    \    if (n==-30) return false;\n    if (n==-31) return false;\n    if (n==-32)\
    \ return false;\n    if (n==-33) return false;\n    if (n==-34) return false;\n\
    \    if (n==-35) return false;\n    if (n==-36) return false;\n    if (n==-37)\
    \ return false;\n    if (n==-38) return false;\n    if (n==-39) return false;\n\
    \    if (n==-40) return false;\n    if (n==-41) return false;\n    if (n==-42)\
    \ return false;\n    if (n==-43) return false;\n    if (n==-44) return false;\n\
    \    if (n==-45) return false;\n    if (n==-46) return false;\n    if (n==-47)\
    \ return false;\n    if (n==-48) return false;\n    if (n==-49) return false;\n\
    \    if (n==-50) return false;\n    if (n==-51) return false;\n    if (n==-52)\
    \ return false;\n    if (n==-53) return false;\n    if (n==-54) return false;\n\
    \    if (n==-55) return false;\n    if (n==-56) return false;\n    if (n==-57)\
    \ return false;\n    if (n==-58) return false;\n    if (n==-59) return false;\n\
    \    if (n==-60) return false;\n    if (n==-61) return false;\n    if (n==-62)\
    \ return false;\n    if (n==-63) return false;\n    if (n==-64) return false;\n\
    \    if (n==-65) return false;\n    if (n==-66) return false;\n    if (n==-67)\
    \ return false;\n    if (n==-68) return false;\n    if (n==-69) return false;\n\
    \    if (n==-70) return false;\n    if (n==-71) return false;\n    if (n==-72)\
    \ return false;\n    if (n==-73) return false;\n    if (n", "{\n    long result\
    \ = 1;\n    long power = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        n /= x;\n    }\n    \n    return result == power;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `is_simple_power(3L,\
    \ 3L)`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What do you\
    \ mean by \"doesn't work\"? It returns true for 3L and 3L. Did you try it?\n<|/\
    \ c |>\n<| c |>\nYes, I tested it. It returns true for 3L and 3L. Did you try\
    \ it?\n<|/ c |>\n<| c |>\nYes, I tested it. It returns true for 3L and 3L. Did\
    \ you try it?\n<|/ c |>\n<| c |>\nI tested it again and it returns true for 3L\
    \ and 3L. Did you try it?\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n  \
    \      power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long r = 1;\n    long m = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n",
  "{\n    long pow_of_n = pow(n, x);\n    return pow_of_n == x;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm |>\n<| c |>\nThis fails for `is_simple_power(3L, 2L)`, which\
    \ returns `true` but should return `false`.\n<|/ c |>\n<| c |>\n: I agree. My\
    \ answer was intended to be an alternative to `pow` which I didn't realize. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ use `pow`.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't use `pow`.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't use `pow`.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>", "{\n    if (n==0) return true;\n    if (n==1) return\
    \ true;\n    if (x==1L) return true;\n    if (x==2L) return true;\n    if (x==3L)\
    \ return true;\n    if (x==4L) return true;\n    if (x==5L) return true;\n   \
    \ if (x==6L) return true;\n    if (x==7L) return true;\n    if (x==8L) return\
    \ true;\n    if (x==9L) return true;\n    if (x==10L) return true;\n    if (x==11L)\
    \ return true;\n    if (x==12L) return true;\n    if (x==13L) return true;\n \
    \   if (x==14L) return true;\n    if (x==15L) return true;\n    if (x==16L) return\
    \ true;\n    if (x==17L) return true;\n    if (x==18L) return true;\n    if (x==19L)\
    \ return true;\n    if (x==20L) return true;\n    if (x==21L) return true;\n \
    \   if (x==22L) return true;\n    if (x==23L) return true;\n    if (x==24L) return\
    \ true;\n    if (x==25L) return true;\n    if (x==26L) return true;\n    if (x==27L)\
    \ return true;\n    if (x==28L) return true;\n    if (x==29L) return true;\n \
    \   if (x==30L) return true;\n    if (x==31L) return true;\n    if (x==32L) return\
    \ true;\n    if (x==33L) return true;\n    if (x==34L) return true;\n    if (x==35L)\
    \ return true;\n    if (x==36L) return true;\n    if (x==37L) return true;\n \
    \   if (x==38L) return true;\n    if (x==39L) return true;\n    if (x==40L) return\
    \ true;\n    if (x==41L) return true;\n    if (x==42L) return true;\n    if (x==43L)\
    \ return true;\n    if (x==44L) return true;\n    if (x==45L) return true;\n \
    \   if (x==46L) return true;\n    if (x==47L) return true;\n    if (x==48L) return\
    \ true;\n    if (x==49L) return true;\n    if (x==50L) return true;\n    if (x==51L)\
    \ return true;\n    if (x==52L) return true;\n    if (x==53L) return true;\n \
    \   if (x==54L) return true;\n    if (x==55L) return true;\n    if (x==56L) return\
    \ true;\n    if (x==57L) return true;\n    if (x==58L) return true;\n    if (x==59L)\
    \ return true;\n    if (x==60L) return true;\n    if (x==61L) return true;\n \
    \   if (x==62L) return true;\n", "{\n    if (x == 1L) {\n        return true;\n\
    \    }\n    if (x == 0L) {\n        return false;\n    }\n    if (n == 0L) {\n\
    \        return false;\n    }\n    if (n == 1L) {\n        return true;\n    }\n\
    \    if (n % 2 == 0L) {\n        return false;\n    }\n    long a = x % n;\n \
    \   long b = n / 2;\n    long c = n;\n    long d = 1;\n    while (a != 0L) {\n\
    \        if (a % 2 == 1L) {\n            if (b == c) \n                return\
    \ true;\n            d *= c;\n        }\n        c /= 2;\n        b *= 2;\n  \
    \      a /= 2;\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis is not the correct answer. Try is_simple_power(3L, 3L).\n\
    <|/ c |>\n<| c |>\n: I believe it is. `3L**3` is `27L`, which is not equal to\
    \ `3L`.\n<|/ c |>\n<| c |>\n: I believe it is. `3L**3` is `27L`, which is not\
    \ equal to `3L`.\n<|/ c |>\n<| c |>\n: I believe it is. `3L**3` is `27L`, which\
    \ is not equal to `3L`.\n<|/ c |>\n<| c |>\n: I believe it is. `3L**3` is `27L`,\
    \ which is not equal to `3L`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>",
  "{\n    long result = 1;\n    for(int i = 1; i < n; i++){\n        result = result\
    \ * x;\n    }\n    return result == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis doesn't work. Try is_simple_power(3L, 2L).\n<|/ c |>\n<| c |>\n\
    I didn't test it, but I believe it works. I tested it on ideone.com and it works.\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com and it works. I believe it works.\
    \ I tested it on ideone.com and it works.\n<|/ c |>\n<| c |>\nI tested it on ideone.com\
    \ and it works. I believe it works. I tested it on ideone.com and it works.\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com and it works. I believe it works.\
    \ I tested it on ideone.com and it works.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = ", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n  \
    \  \n    return result == power;\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result\
    \ == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return (result == power);\n}", "{\n    long result = 1;\n    for(int\
    \ i = 1; i < n; i++)\n    {\n        result = result * x;\n    }\n    return result\
    \ == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `is_simple_power(-1, 2L)` returns `true`, but `is_simple_power(-2,\
    \ 2L)` returns `false`.\n<|/ c |>\n<| c |>\nYes, it does. `is_simple_power(-1,\
    \ 2L)` returns `true` because `-1` is `1L` and 2 is `2L`. `is_simple_power(-2,\
    \ 2L)` returns `false` because `-2` is `-1L` and 2 is `-2L`. `is_simple_power(-1,\
    \ -2L)` returns `false` because `-1` is `-1L` and -2 is `-2L`.\n<|/ c |>\n<| c\
    \ |>\nI see what you mean. My mistake.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works for negative numbers. I hope it helps.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\nThe simplest way is to check if x is divisible by n. \n<code>", "{\n   \
    \ long long power = 1;\n    long long result = 1;\n    \n    while(n > 0)\n  \
    \  {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n\
    \    return (result == power);\n}\n</code>\n<|/ a |>\n<| c |>\nThe question was\
    \ about a number that is a power of another number, not about a number that is\
    \ a power of another number modulo some number.\n<|/ c |>\n<| c |>\nYes, I realized\
    \ that after I posted my answer. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    The question was about a number that is a power of another number, not about a\
    \ number that is a power of another number modulo some number.\n<|/ c |>\n<| c\
    \ |>\nI didn't see that until after I posted my answer. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a |>\n<code>", "{\n    long power = 1;\n    long result =\
    \ 1;\n    \n    while (n > 1) {\n        if (n % 2 == 0) {\n            power\
    \ *= x;\n        }\n        result *= x;\n        n /= 2;\n        x *= x;\n \
    \   }\n    \n    return (result == power);\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n        result\
    \ *= power;\n        n--;\n    }\n    \n    return result == x;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n        if (n %\
    \ 2 == 1) {\n            power *= x;\n        }\n        result *= x;\n      \
    \  n /= 2;\n    }\n    \n    if (n == 1) {\n        power *= x;\n    }\n    \n\
    \    return (power * result == x);\n}", "{\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for `is_simple_power(2L,\
    \ 2L)` which returns `true` but should be `false`.\n<|/ c |>\n<| c |>\nI believe\
    \ that `is_simple_power(2L, 2L)` returns `false` because `2L**2 = 8L` but `8L**2\
    \ = 64L` which is `not is_simple_power(2L, 2L)`.\n<|/ c |>\n<| c |>\nYes, but\
    \ `is_simple_power(2L, 2L)` returns `true` because `2L**2 = 8L` but `8L**2 = 64L`\
    \ which is `not is_simple_power(2L, 2L)`.\n<|/ c |>\n<| c |>\nI believe that `is_simple_power(2L,\
    \ 2L)` returns `false` because `2L**2 = 8L` but `8L**2 = 64L` which is `not is_simple_power(2L,\
    \ 2L)`.\n<|/ c |>\n<| c |>\nYes, but `is_simple_power(2L, 2L)` returns `true`\
    \ because `2L**2 = 8L` but `8L**2 = 64L` which is `not is_simple_power(2L, 2L)`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long result = 1;\n    long\
    \ power = 1;\n    long limit;\n    \n    limit = n;\n    \n    while (power <\
    \ limit)\n    {\n        result *= x;\n        power *= n;\n    }\n    \n    if\
    \ (result == x)\n    {\n        return true;\n    }\n    else\n    {\n       \
    \ return false;\n    }\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis\
    \ doesn't work for `is_simple_power(1L, 4L)`, which returns `true` but should\
    \ return `false`.\n<|/ c |>\n<| c |>\nI believe that `is_simple_power(1L, 4L)`\
    \ returns `true` because `1L**4 == 1L`.\n<|/ c |>\n<| c |>\nYes, but `1L**4 ==\
    \ 1L` doesn't mean that `1L**4 == 1L`.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My mistake. Thank you for pointing it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long r = 1;\n    long m = n;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n", "{\n    long result = 1;\n\
    \    long power = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n   \
    \     result *= x;\n        n -= power;\n    }\n    \n    return (result == x);\n\
    }", "{\n    long result = 1;\n    long power = 1;\n    long temp = 1;\n    \n\
    \    while(n > 0)\n    {\n        temp = temp * x;\n        power++;\n       \
    \ n--;\n    }\n    \n    while(power > 0)\n    {\n        if(temp == x)\n    \
    \    {\n            return true;\n        }\n        temp = temp / x;\n      \
    \  power--;\n    }\n    \n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26825829)\n\
    <|/ c |>\n<| c |>\nI believe it does provide an answer to the question. He asked\
    \ if he could write his own function to check if a number is a simple power of\
    \ another number. He also said that he already had a function that checks if a\
    \ number is a power of another number. He also said that he already had a function\
    \ that checks if a number is a power of another number. He also said that he already\
    \ had a function that checks if a number is a power of another number. He also\
    \ said that he already had a function that checks if a number is a power of another\
    \ number. He also said that he already had a function that checks if a number\
    \ is a power of another number. He also said that he already had a function that\
    \ checks if a number is a power of another number. He also said that he already\
    \ had a function that checks if a number is a power of another number. He also\
    \ said that he already had a function that checks if a number is a power of another\
    \ number. He also said that he already had a function that checks if a number\
    \ is a power of another number. He also said that he already had a function that\
    \ checks if a number is a power of another number. He also said that he already\
    \ had a function that checks if a number is a power of another number. He also\
    \ said that he already had a function that checks if a number is a power of another\
    \ number. He also said that he already had a function that checks if a number\
    \ is a power of another number. He also said that he already had a function that\
    \ checks if a number is a power of another number. He also said that he already\
    \ had a function that checks if a number is a power of another number. He also\
    \ said that he already had a function that checks if a number is a power of another\
    \ number. He also said that he ", "{\n    long r = 1;\n    long m = n;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 0;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 0;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 0;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 0;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;", "{\n    long r = 1;\n    long power = 1;\n    long\
    \ power = n;\n    long power = power;\n    long power = power;\n    long power\
    \ = power;\n    long power = power;\n    long power = power;\n    long power =\
    \ power;\n    long power = power;\n    long power = power;\n    long power = power;\n\
    \    long power = power;\n    long power = power;\n    long power = power;\n \
    \   long power = power;\n    long power = power;\n    long power = power;\n  \
    \  long power = power;\n    long power = power;\n    long power = power;\n   \
    \ long power = power;\n    long power = power;\n    long power = power;\n    long\
    \ power = power;\n    long power = power;\n    long power = power;\n    long power\
    \ = power;\n    long power = power;\n    long power = power;\n    long power =\
    \ power;\n    long power = power;\n    long power = power;\n    long power = power;\n\
    \    long power = power;\n    long power = power;\n    long power = power;\n \
    \   long power = power;\n    long power = power;\n    long power = power;\n  \
    \  long power = power;\n    long power = power;\n    long power = power;\n   \
    \ long power = power;\n    long power = power;\n    long power = power;\n    long\
    \ power = power;\n    long power = power;\n    long power = power;\n    long power\
    \ = power;\n    long power = power;\n    long power = power;\n    long power =\
    \ power;\n    long power = power;\n    long power = power;\n    long power = power;\n\
    \    long power = power;\n    long power = power;\n    long power = power;\n \
    \   long power = power;\n    long power = power;\n    long power = power;\n  \
    \  long power = power;\n    long power = power;\n    long power = power;\n   \
    \ long power = power;\n    long power = power;\n    long power = power;\n    long\
    \ power = power;\n    long power = power;\n    long power = power;\n    long power\
    \ = power;\n    long power = power;\n    long pow", "{\n    if (n == 0) return\
    \ true;\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (n\
    \ % 2 == 0) return false;\n    long a = n / 2;\n    long b = n - a;\n    long\
    \ c = 1;\n    while (b > 0) {\n        c = c * x;\n        if (c > n) return false;\n\
    \        b = b - 1;\n        x = x * x;\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ For example, `is_simple_power(-4, 2)` returns `true`, but `is_simple_power(-4,\
    \ 3)` returns `false`.\n<|/ c |>\n<| c |>\n: Yes, you're right. I've fixed the\
    \ code now. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ For example, `is_simple_power(-4, 2)` returns `true`, but `is_simple_power(-4,\
    \ 3)` returns `false`.\n<|/ c |>\n<| c |>\n: Yes, you're right. I've fixed the\
    \ code now. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long\
    \ result = 1;\n    long power = 1;\n    \n    while(power < n)\n    {\n      \
    \  result *= x;\n        power *= x;\n    }\n    \n    return (result == x);\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    \n    while (power < n)\n\
    \    {\n        power *= x;\n        result *= power;\n    }\n    \n    if (result\
    \ == x)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nThis fails for\
    \ `is_simple_power(3L, 3L)` which returns `true` but should return `false`.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I've fixed the code. Thank you for pointing\
    \ out.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>", "{\n    long long\
    \ power = 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n        n--;\n\
    \    }\n    \n    return power==x;\n}", "{\n    long long power = 1;\n    long\
    \ long result = 1;\n    \n    while (n > 0)\n    {\n        power = power * n;\n\
    \        result = result * x;\n        n = n - 1;\n    }\n    \n    if (result\
    \ == power)\n        return true;\n    \n    return false;\n}", "{\n    long long\
    \ int power = 1;\n    long long int result = 1;\n    \n    while(n > 0)\n    {\n\
    \        power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n   \
    \ return (result == power);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try `is_simple_power(3L, 3L)`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works fine. Can you please explain why it doesn't work?\n<|/ c |>\n<| c |>\n\
    It doesn't work because `is_simple_power(3L, 3L)` returns `true` instead of `false`.\
    \ Your code returns `true` because `3L**3 == 3L`.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. Thanks for pointing that out. I fixed my answer.\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try `is_simple_power(3L, 3L)`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= x;\n        result *= power;\n        n /= 2;\n    }\n\
    \    \n    return result == x;\n}", "{\n    long r = 1;\n    long m = 1;\n   \
    \ long i = 1;\n    long j = 1;\n    long k = 1;\n    \n    while (i < n) {\n \
    \       r = r * x;\n        i++;\n    }\n    \n    while (j > 0) {\n        m\
    \ = m * x;\n        j--;\n    }\n    \n    while (k < n) {\n        k = k * x;\n\
    \        k++;\n    }\n    \n    if (r == m) {\n        return true;\n    }\n \
    \   \n    return false;\n}", "{\n    if (n == 0)\n        return true;\n    if\
    \ (n == 1)\n        return (x == 1);\n    if (x == 1)\n        return is_simple_power(x,\
    \ n-1);\n    if (x % n == 0)\n        return is_simple_power(x, n-1);\n    return\
    \ false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI believe this fails\
    \ for `is_simple_power(1L, 4L)`\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(1L,\
    \ 4L)`\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(1L, 4L)`\n\
    <|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(1L, 4L)`\n<|/ c |>\n\
    <| c |>\nI believe this fails for `is_simple_power(1L, 4L)`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= x;\n        result *= power;\n        n--;\n \
    \   }\n    \n    return result == x;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>", "{\n    long r = 1;\n    long m = n;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 0;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 0;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 0;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 0;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n >\
    \ 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n\
    \    \n    return (result == power);\n}", "{\n    if (n == 0) return true;\n \
    \   if (n == 1) return true;\n    if (x == 1) return true;\n    if (x == n) return\
    \ true;\n    if (n % 2 == 0) return false;\n    long m = n / 2;\n    if (m ==\
    \ 1) return true;\n    if (m == n) return true;\n    if (m == 2) return true;\n\
    \    if (m == n-1) return true;\n    if (m == n+2) return true;\n    if (m ==\
    \ n+3) return true;\n    if (m == n+4) return true;\n    if (m == n+5) return\
    \ true;\n    if (m == n+6) return true;\n    if (m == n+7) return true;\n    if\
    \ (m == n+8) return true;\n    if (m == n+9) return true;\n    if (m == n+10)\
    \ return true;\n    if (m == n+11) return true;\n    if (m == n+12) return true;\n\
    \    if (m == n+13) return true;\n    if (m == n+14) return true;\n    if (m ==\
    \ n+15) return true;\n    if (m == n+16) return true;\n    if (m == n+17) return\
    \ true;\n    if (m == n+18) return true;\n    if (m == n+19) return true;\n  \
    \  if (m == n+20) return true;\n    if (m == n+21) return true;\n    if (m ==\
    \ n+22) return true;\n    if (m == n+23) return true;\n    if (m == n+24) return\
    \ true;\n    if (m == n+25) return true;\n    if (m == n+26) return true;\n  \
    \  if (m == n+27) return true;\n    if (m == n+28) return true;\n    if (m ==\
    \ n+29) return true;\n    if (m == n+30) return true;\n    if (m == n+31) return\
    \ true;\n    if (m == n+32) return true;\n    if (m == n+33) return true;\n  \
    \  if (m == n+34) return true;\n    if (m == n+35) return true;\n    if (m ==\
    \ n+36) return true;\n    if (m == n+37) return true;\n    if (m == n+38) return\
    \ true;\n    if (m == n+39) return true;\n    if (m == n+40) return true;\n  \
    \  if (m == n+41) return true;\n    if (m == n+42) return true;\n    if (m ==\
    \ n+43) return true;\n    if (m == n+44) return true;\n    if (m == n+45) return\
    \ true;\n    if (m == n+46) return true;\n    if (m == n+47) return true;\n  \
    \  if (m == n+48) return true;\n    if (m == n+49) return true;\n    if (m ==\
    \ n+50) return true;\n", "{\n    if (n == 0) return true;\n    if (n == 1) return\
    \ true;\n    if (n == -1) return false;\n    if (x == 1) return true;\n    if\
    \ (x == -1) return false;\n    if (x == 0) return false;\n    if (x == 1) return\
    \ true;\n    if (x == -1) return false;\n    if (x == 0) return false;\n    if\
    \ (x == 1) return true;\n    if (x == -1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x == -1) return false;\n    if\
    \ (x == 0) return false;\n    if (x == 1) return true;\n    if (x == -1) return\
    \ false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n    if\
    \ (x == -1) return false;\n    if (x == 0) return false;\n    if (x == 1) return\
    \ true;\n    if (x == -1) return false;\n    if (x == 0) return false;\n    if\
    \ (x == 1) return true;\n    if (x == -1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x == -1) return false;\n    if\
    \ (x == 0) return false;\n    if (x == 1) return true;\n    if (x == -1) return\
    \ false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n    if\
    \ (x == -1) return false;\n    if (x == 0) return false;\n    if (x == 1) return\
    \ true;\n    if (x == -1) return false;\n    if (x == 0) return false;\n    if\
    \ (x == 1) return true;\n    if (x == -1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x == -1) return false;\n    if\
    \ (x == 0) return false;\n    if (x == 1) return true;\n    if (x == -1) return\
    \ false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n    if\
    \ (x == -1) return false;\n    if (x == 0) return false;\n    if (x == 1) return\
    \ true;\n    if (x == -1) return false;\n    if (x == 0) return false;\n    if\
    \ (x == 1) return true;\n    if (x == -1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x == -1) return false;\n    if\
    \ (x == 0) return false;\n    if (x == 1) return true;\n    if (x == -1) return\
    \ false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n    if\
    \ (x == -1) return false;\n    if (x == 0) return false;\n    if (x == 1) return\
    \ true;\n    if (x == -1) return false;\n    if (x == 0) return false;\n    if\
    \ (x == 1) return true;\n    if (x == -1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x == -1) return false;\n    if\
    \ (x == 0) return false;\n    if (x == 1) return true;\n    if (x == -1) return\
    \ false;\n    if (x == 0) return false;\n    if (x == 1) return true;\n    if\
    \ (x == -1) return false;\n    if (x == 0) return false;\n    if (x == 1) return\
    \ true;\n    if (x == -1) return false;\n    if (x == 0) return false;\n    if\
    \ (x == 1) return true;\n    if (x == -1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x == -1) return false;\n    if\
    \ (x == 0) return false;\n", "{\n    long result = 1;\n    for(long i = 1; i <\
    \ n; i++)\n    {\n        result = result * x;\n    }\n    return result == x;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n        power *=\
    \ n;\n        result *= x;\n        n /= 2;\n    }\n    \n    if (x == power)\
    \ {\n        return true;\n    }\n    \n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis fails for `is_simple_power(3L, 3L)`.\n<|/ c |>\n<| c |>\n\
    Yes, it fails for 3L and 3L. I'll fix it.\n<|/ c |>\n<| c |>\nThis fails for `is_simple_power(3L,\
    \ 3L)`.\n<|/ c |>\n<| c |>\nYes, it fails for 3L and 3L. I'll fix it.\n<|/ c |>\n\
    <| c |>\nThis fails for `is_simple_power(3L, 3L)`.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long result = 1;\n    long power = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n -= power;\n\
    \    }\n    \n    return result == x;\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return (result == power);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `is_simple_power(-4, 2)` returns `true` instead of `false`.\n<|/ c |>\n<| c\
    \ |>\nYes, I know. That's why I wrote \"Your task is to write a function that\
    \ returns true if a number x is a simple power of n and false in other cases.\"\
    \ in the first line of my answer.\n<|/ c |>\n<| c |>\nI didn't see that part.\
    \ Sorry. My bad.\n<|/ c |>\n<| c |>\nThis fails for negative numbers. `is_simple_power(-4,\
    \ 2)` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nYes, I know. That's\
    \ why I wrote \"Your task is to write a function that returns true if a number\
    \ x is a simple power of n and false in other cases.\" in the first line of my\
    \ answer.\n<|/ c |>\n<| a tags=c++,algorithm |>\nThe algorithm is simple:", "{\n\
    \    long res = 1;\n    long power = 1;\n    \n    while (power < n) {\n     \
    \   power *= x;\n        res *= power;\n    }\n    \n    return res == x;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `is_simple_power(1L, 4L)`\
    \ returns `true` but `is_simple_power(2L, 2L)` returns `false`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I added the test case to the answer.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while (power < n)\n    {\n        power *= x;\n     \
    \   result *= power;\n    }\n    \n    return (result == x);\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for `is_simple_power(1L,\
    \ 4L)`, which returns `true`.\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting it. I think you misunderstood the question. 1L**4 is equal to 1L*1L*1L*1L.\
    \ 1L**4 is equal to 1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*1L*",
  "{\n    long power = 1;\n    long result = 1;\n    while(n > 0)\n    {\n       \
    \ power *= n;\n        result *= x;\n        n /= x;\n    }\n    return (result\
    \ == power);\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't\
    \ work. `is_simple_power(3L, 3L)` returns true.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. `is_simple_power(3L, 3L)` returns true.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. `is_simple_power(3L, 3L)` returns true.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. `is_simple_power(3L, 3L)` returns true.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. `is_simple_power(3L, 3L)` returns true.\n<|/ c |>\n<| a tags=c++,algorithm,math\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    long temp;\n\
    \    \n    while(n > 0)\n    {\n        temp = power;\n        power = temp *\
    \ x;\n        result += power;\n        n--;\n    }\n    \n    return result ==\
    \ x;\n}", "{\n    long power = 1;\n    long result = 1;\n    long limit = n;\n\
    \    while(power < limit)\n    {\n        result *= x;\n        power *= n;\n\
    \    }\n    if(result == x)\n        return true;\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. `is_simple_power(2L,\
    \ 2L)` returns `true` but `is_simple_power(3L, 2L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nI tested it on ideone, it returns true.\n<|/ c |>\n<| c |>\nI tested\
    \ it on ideone, it returns true.\n<|/ c |>\n<| c |>\nI tested it on ideone, it\
    \ returns true.\n<|/ c |>\n<| c |>\nI tested it on ideone, it returns true.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long result = 1;\n    long power = 1;\n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n -= power;\n\
    \    }\n    return result == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c\
    \ |>\nThis doesn't work. `is_simple_power(3L, 3L)` returns true.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work. `is_simple_power(3L,\
    \ 3L)` returns true.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. `is_simple_power(3L, 3L)` returns true.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "{\n    if (n == 0) return true;\n    if (n == 1) return\
    \ false;\n    if (x == 1) return true;\n    if (x == 0) return false;\n    if\
    \ (x < n) return is_simple_power(x, n-1);\n    long res = 1;\n    for (long i\
    \ = 1; i < n; i++) res = (res*x)%n;\n    return res == x;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for `is_simple_power(3L, 2L)`, which returns\
    \ `true` instead of `false`.\n<|/ c |>\n<| c |>\nI fixed the bug, thank you. Now\
    \ it works.\n<|/ c |>\n<| c |>\nI fixed the bug, thank you. Now it works.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug, thank you. Now it works.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thank you. Now it works.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    if (n == 0) return true;\n    if (n == 1) return true;\n    if\
    \ (x == 1) return true;\n    if (x == n) return true;\n    if (n % 2 == 0) return\
    \ false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n\
    \    if (n % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if\
    \ (n % 13 == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n %\
    \ 19 == 0) return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 ==\
    \ 0) return false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return\
    \ false;\n    if (n % 41 == 0) return false;\n    if (n % 47 == 0) return false;\n\
    \    if (n % 53 == 0) return false;\n    if (n % 59 == 0) return false;\n    if\
    \ (n % 61 == 0) return false;\n    if (n % 67 == 0) return false;\n    if (n %\
    \ 71 == 0) return false;\n    if (n % 73 == 0) return false;\n    if (n % 79 ==\
    \ 0) return false;\n    if (n % 83 == 0) return false;\n    if (n % 89 == 0) return\
    \ false;\n    if (n % 97 == 0) return false;\n    if (n % 101 == 0) return false;\n\
    \    if (n % 103 == 0) return false;\n    if (n % 107 == 0) return false;\n  \
    \  if (n % 111 == 0) return false;\n    if (n % 113 == 0) return false;\n    if\
    \ (n % 117 == 0) return false;\n    if (n % 121 == 0) return false;\n    if (n\
    \ % 123 == 0) return false;\n    if (n % 127 == 0) return false;\n    if (n %\
    \ 131 == 0) return false;\n    if (n % 133 == 0) return false;\n    if (n % 137\
    \ == 0) return false;\n    if (n % 141 == 0) return false;\n    if (n % 143 ==\
    \ 0) return false;\n    if (n % 147 == 0) return false;\n    if (n % 151 == 0)\
    \ return false;\n    if (n % 153 == 0) return false;\n    if (n % 157 == 0) return\
    \ false;\n    if (n % 161 == 0) return false;\n    if (n % 163 == 0) return false;\n\
    \    if (n % 167 == 0) return false;\n    if (n % 171 == 0) return false;\n  \
    \  if (n % 173 == 0) return false;\n    if (n % 177 == 0) return false;\n    if\
    \ (n % 181 == 0) return false;\n    if (n % 183 == 0) return false;\n    if (n\
    \ % 187 == 0) return false;\n    if (n % 191 == 0) return false;\n    if (n %\
    \ 193 == 0) return false;\n    if (n % 197 == 0) return false;\n    if (n % 201\
    \ == 0) return false;\n    if (n % 203 == 0) return false;\n    if (n % 207 ==\
    \ 0) return false;\n    if (n % 211 == 0) return false;\n    if (n % 213 == 0)\
    \ return false;\n    if (n % 217 == 0) return false;\n    if (n % 221 == 0) return\
    \ false;\n", "{\n    long long power = 1;\n    long long result = 1;\n    \n \
    \   while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n\
    \ /= 2;\n    }\n    \n    return (result == power);\n}", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power = power\
    \ * n;\n        \n        if(power == x)\n        {\n            result = true;\n\
    \            break;\n        }\n        \n        n = n - 1;\n    }\n    \n  \
    \  return result;\n}", "{\n    long result = 1;\n    long power = 1;\n    \n \
    \   while (power < n)\n    {\n        result *= x;\n        power *= x;\n    }\n\
    \    \n    return result == x;\n}", "{\n    if (x == 1L) return true;\n    if\
    \ (x == 0L) return false;\n    if (n == 0L) return false;\n    if (n == 1L) return\
    \ true;\n    long res = 1L;\n    long power = 1L;\n    while (power < n) {\n \
    \       res = res * x;\n        power = power + 1;\n    }\n    return (res ==\
    \ x);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for `is_simple_power(3L,\
    \ 2L)` which should return `true`.\n<|/ c |>\n<| c |>\nI missed that case. Thanks\
    \ for pointing it out. Updated the answer.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for `is_simple_power(3L, 2L)` which should return `true`.\n<|/ c |>\n<| c |>\n\
    I missed that case. Thanks for pointing it out. Updated the answer.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    if (n == 0) return true;\n    if\
    \ (n == 1) return true;\n    if (n % 2 == 0) return false;\n    long a = x;\n\
    \    long b = n;\n    while (b > 1) {\n        if (b % 2 == 1) {\n           \
    \ a = a * x;\n        }\n        b = b >> 1;\n    }\n    return a == x;\n}", "{\n\
    \    long long power = 1;\n    long long result = 1;\n    \n    while (n > 1)\
    \ {\n        power = power * n;\n        result = result * x;\n        n = n -\
    \ 1;\n    }\n    \n    return (result == power);\n}", "{\n    long result = 1;\n\
    \    long power = 1;\n    \n    while(power < n)\n    {\n        result *= x;\n\
    \        power *= x;\n    }\n    \n    return result == x;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try `is_simple_power(3L,\
    \ 2L)` which returns true.\n<|/ c |>\n<| c |>\nYes, you are right. I missed that\
    \ case. Thank you for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ Try `is_simple_power(3L, 2L)` which returns true.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I missed that case. Thank you for pointing it out.\n<|/ c |>\n<|\
    \ a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result =\
    \ 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n\
    \        n /= x;\n    }\n    \n    return (result == power);\n}", "{\n    long\
    \ long power = 1;\n    long long result = 1;\n    \n    while (n > 0)\n    {\n\
    \        if (n % 2 == 0)\n        {\n            power *= x;\n        }\n    \
    \    \n        result *= x;\n        n /= 2;\n    }\n    \n    return (result\
    \ == power);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you very much! I really\
    \ appreciate your help!\n<|/ c |>\n<| c |>\nYou're welcome. I'm glad I could help.\
    \ If you think my answer was helpful, please consider accepting it by clicking\
    \ on the check mark next to it. This will help future visitors who have a similar\
    \ question. Thanks!\n<|/ c |>\n<| a tags=c++,algorithm |>\nI wrote a solution\
    \ in Java, hope it helps you:\n<code>\npublic boolean isSimplePower(long x, long\
    \ n) {\n    long power = 1;\n    long result = 1;\n    \n    while (n > 0)\n \
    \   {\n        if (n % 2 == 0)\n        {\n            power *= x;\n        }\n\
    \        \n        result *= x;\n        n /= 2;\n    }\n    \n    return (result\
    \ == power);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you very much! I really\
    \ appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ temp;\n    \n    while(n > 0)\n    {\n        temp = power;\n        power =\
    \ temp * x;\n        result += power;\n        n--;\n    }\n    \n    if(result\
    \ == x)\n        return true;\n    else\n        return false;\n}", "{\n    if\
    \ (x == 1L) return true;\n    if (x == 0L) return false;\n    if (n == 0L) return\
    \ false;\n    if (n == 1L) return true;\n    if (n % 2 == 0L) return false;\n\
    \    long a = x % n;\n    long b = n - a;\n    long c = 1L;\n    long d = 1L;\n\
    \    long e = 1L;\n    long f = 1L;\n    long g = 1L;\n    long h = 1L;\n    long\
    \ i = 1L;\n    long j = 1L;\n    long k = 1L;\n    long l = 1L;\n    long m =\
    \ 1L;\n    long n = 2L;\n    long o = 2L;\n    long p = 2L;\n    long q = 2L;\n\
    \    long r = 2L;\n    long s = 2L;\n    long t = 2L;\n    long u = 2L;\n    long\
    \ v = 1L;\n    long w = 1L;\n    long x = 1L;\n    long y = 1L;\n    long z =\
    \ 1L;\n    long A = 1L;\n    long B = 1L;\n    long C = 1L;\n    long D = 1L;\n\
    \    long E = 1L;\n    long F = 1L;\n    long G = 1L;\n    long H = 1L;\n    long\
    \ I = 1L;\n    long J = 1L;\n    long K = 1L;\n    long L = 1L;\n    long M =\
    \ 1L;\n    long N = 1L;\n    long O = 1L;\n    long P = 1L;\n    long Q = 1L;\n\
    \    long R = 1L;\n    long S = 1L;\n    long T = 1L;\n    long U = 1L;\n    long\
    \ V = 1L;\n    long W = 1L;\n    long X = 1L;\n    long Y = 1L;\n    long Z =\
    \ 1L;\n    long AA = 1L;\n    long AB = 1L;\n    long AC = 1L;\n    long AD =\
    \ 1L;\n    long AE = 1L;\n    long AF = 1L;\n    long AG = 1L;\n    long AH =\
    \ 1L;\n    long AI = 1L;\n    long AJ = 1L;\n    long AK = 1L;\n    long AL =\
    \ 1L;\n    long AM = 1L;\n    long AN = 1L;\n    long AO = 1L;\n    long AP =\
    \ 1L;\n    ", "{\n    long result = 1;\n    long power = 1;\n    long power2 =\
    \ 1;\n    long power3 = 1;\n    long power4 = 1;\n    long power5 = 1;\n    long\
    \ power6 = 1;\n    long power7 = 1;\n    long power8 = 1;\n    long power9 = 1;\n\
    \    long power10 = 1;\n    long power11 = 1;\n    long power12 = 1;\n    long\
    \ power13 = 1;\n    long power14 = 1;\n    long power15 = 1;\n    long power16\
    \ = 1;\n    long power17 = 1;\n    long power18 = 1;\n    long power19 = 1;\n\
    \    long power20 = 1;\n    long power21 = 1;\n    long power22 = 1;\n    long\
    \ power23 = 1;\n    long power24 = 1;\n    long power25 = 1;\n    long power26\
    \ = 1;\n    long power27 = 1;\n    long power28 = 1;\n    long power29 = 1;\n\
    \    long power30 = 1;\n    long power31 = 1;\n    long power32 = 1;\n    long\
    \ power33 = 1;\n    long power34 = 1;\n    long power35 = 1;\n    long power36\
    \ = 1;\n    long power37 = 1;\n    long power38 = 1;\n    long power39 = 1;\n\
    \    long power40 = 1;\n    long power41 = 1;\n    long power42 = 1;\n    long\
    \ power43 = 1;\n    long power44 = 1;\n    long power45 = 1;\n    long power46\
    \ = 1;\n    long power47 = 1;\n    long power48 = 1;\n    long power49 = 1;\n\
    \    long power50 = 1;\n    long power51 = 1;\n    long power52 = 1;\n    long\
    \ power53 = 1;\n    long power54 = 1;\n    long power55 = 1;\n    long power56\
    \ = 1;\n    long power57 = 1;\n    long power58 = 1;\n    long power59 = 1;\n\
    \    long power60 = 1;\n    long power61 = 1;\n    long power62 = 1;\n    long\
    \ power63 = 1;\n    long power64 = 1;\n    long power65 = 1;\n    long power66\
    \ = 1;\n    long power67 = 1;\n    long power68 = 1;\n    long power69 = 1;\n\
    \    long power70 = 1;\n    long power71 = 1;\n    long power72 = 1;\n    long\
    \ power73 = 1;\n    long power74 = 1;\n    long power75 = 1;\n    long power76\
    \ = 1;\n    long power77 = 1;\n    long power78 = 1;\n    long power79 = 1;\n\
    \    long power80 = 1;\n    long power81 = 1;\n    long power82 = 1;\n    long\
    \ power83 = 1;\n", "{\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long p = 1;\n    long q = 1;\n", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n  \
    \      power *= n;\n        result *= x;\n        n -= 1;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n\
    \    while(n > 0)\n    {\n        power = power * x;\n        result = result\
    \ * n;\n        n = n - 1;\n    }\n    \n    return (result == power);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work for `is_simple_power(1L, 4L)`\n\
    <|/ c |>\n<| c |>\nI didn't get you, can you please elaborate?\n<|/ c |>\n<| c\
    \ |>\nThe function should return `true` for 1L and 4L. Your function returns `false`\
    \ for 1L and 2L. 1L and 2L are simple powers of 2, but 1L and 4L are not.\n<|/\
    \ c |>\n<| c |>\nI got it now, thanks for pointing out. Updated the answer.\n\
    <|/ c |>\n<| a |>\n<code>", "{\n    if (n == 0) return true;\n    if (n == 1)\
    \ return true;\n    if (n % 2 == 0) return false;\n    long a = x;\n    long b\
    \ = n;\n    while (b > 0) {\n        if (b % 2 == 1) a *= x;\n        b /= 2;\n\
    \    }\n    return a == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "{\n\
    \    if (n == 0)\n        return true;\n    if (n == 1)\n        return (x ==\
    \ 1);\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n\
    \        return is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a tags=c++,algorithm,c++11\
    \ |>\n<| c |>\nThe first `if` statement is redundant. `if (n == 0)` will already\
    \ be true when `n == 1`.\n<|/ c |>\n<| c |>\nYes, you're right. I just wanted\
    \ to show that you can write it without an `if` statement and that `n == 0` will\
    \ already be true when `n == 1`.\n<|/ c |>\n<| c |>\nThe first `if` statement\
    \ is redundant. `if (n == 0)` will already be true when `n == 1`.\n<|/ c |>\n\
    <| c |>\nYes, you're right. I just wanted to show that you can write it without\
    \ an `if` statement and that `n == 0` will already be true when `n == 1`.\n<|/\
    \ c |>\n<| c |>\nThe first `if` statement is redundant. `if (n == 0)` will already\
    \ be true when `n == 1`.\n<|/ c |>\n<| a tags=c++,algorithm,c++11 |>\nThe simplest\
    \ solution would be to just use logarithms:\n<code>", "{\n    long r = 1;\n  \
    \  long power = 1;\n    \n    while(n > 0)\n    {\n        power = power * n;\n\
    \        \n        if(power == x)\n        {\n            return true;\n     \
    \   }\n        \n        r = r * x;\n        \n        n = n - 1;\n    }\n   \
    \ \n    return false;\n}", "{\n    long power = 1;\n    long result = 1;\n   \
    \ long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = ", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= 2;\n    }\n    \n    return (result ==\
    \ power);\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}", "{\n    long res = 1;\n    for(int\
    \ i = 1; i < n; i++)\n    {\n        res = res * x;\n    }\n    return res ==\
    \ x;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nThis fails for `is_simple_power(1L,\
    \ 4L)` which returns `true` but should return `false`.\n<|/ c |>\n<| c |>\n: Thanks,\
    \ I fixed it.\n<|/ c |>\n<| c |>\nThis fails for `is_simple_power(1L, 4L)` which\
    \ returns `true` but should return `false`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed\
    \ it.\n<|/ c |>\n<| c |>\nThis fails for `is_simple_power(1L, 4L)` which returns\
    \ `true` but should return `false`.\n<|/ c |>\n<| a |>\n<code>", "{\n    long\
    \ r = 1;\n    long m = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n", "{\n    long result = 1;\n    long\
    \ power = n;\n    \n    while (power > 1) {\n        if (power % 2 == 1) {\n \
    \           result *= x;\n        }\n        power /= 2;\n        x *= x;\n  \
    \  }\n    \n    if (power == 1) {\n        return result == x;\n    }\n    \n\
    \    return false;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n\
    \    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n\
    \ -= 1;\n    }\n    \n    return (result == power);\n}", "{\n    if (n == 0)\n\
    \        return true;\n    if (n == 1)\n        return (x == 1);\n    if (x <\
    \ 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x\
    \ == 2)\n        return (x == 1);\n    if (x == 3)\n        return (x == 1);\n\
    \    if (x == 4)\n        return (x == 1);\n    if (x == 5)\n        return (x\
    \ == 1);\n    if (x == 6)\n        return (x == 1);\n    if (x == 7)\n       \
    \ return (x == 1);\n    if (x == 8)\n        return (x == 1);\n    if (x == 9)\n\
    \        return (x == 1);\n    if (x == 10)\n        return (x == 1);\n    if\
    \ (x == 11)\n        return (x == 1);\n    if (x == 12)\n        return (x ==\
    \ 1);\n    if (x == 13)\n        return (x == 1);\n    if (x == 14)\n        return\
    \ (x == 1);\n    if (x == 15)\n        return (x == 1);\n    if (x == 16)\n  \
    \      return (x == 1);\n    if (x == 17)\n        return (x == 1);\n    if (x\
    \ == 18)\n        return (x == 1);\n    if (x == 19)\n        return (x == 1);\n\
    \    if (x == 20)\n        return (x == 1);\n    if (x == 21)\n        return\
    \ (x == 1);\n    if (x == 22)\n        return (x == 1);\n    if (x == 23)\n  \
    \      return (x == 1);\n    if (x == 24)\n        return (x == 1);\n    if (x\
    \ == 25)\n        return (x == 1);\n    if (x == 26)\n        return (x == 1);\n\
    \    if (x == 27)\n        return (x == 1);\n    if (x == 28)\n        return\
    \ (x == 1);\n    if (x == 29)\n        return (x == 1);\n    if (x == 30)\n  \
    \      return (x == 1);\n    if (x == 31)\n        return (x == 1);\n    if (x\
    \ == 32)\n        return (x == 1);\n    if (x == 33)\n        return (x == 1);\n\
    \    if (x == 34)\n        return (x == 1);\n    if (x == 35)\n        return\
    \ (x == 1);\n    if (x == 36)\n        return (x == 1);\n    if (x == 37)\n  \
    \      return (x == 1);\n    if (x == 38)\n        return (x == 1);\n    if (x\
    \ == 39)\n        return (x == 1);\n    if (x == 40)\n        return (x == 1);\n\
    \    if (x == 41)\n        return (x == 1);\n    if (x == 42)\n        return\
    \ (x == 1);\n    if (x == 44)\n        return (x == 1);\n    if (x == 45)\n  \
    \      return (x == 1);\n    if (x == 46)\n        return (x == 1);\n    if (x\
    \ == 47)\n        return (x == 1);\n    if (x == 48)\n        return (x == 1);\n\
    \    if (x == 49)\n        return (x == 1);\n    if (x == 50)\n        return\
    \ (x == 1);\n    if (x == 51)\n        return (x == 1);\n    if (x == 52)\n  \
    \      return (x == 1);\n    if (x == 53)\n        return (x", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while (n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return (result ==\
    \ power);\n}", "{\n    long result = 1;\n    long power = n;\n    while(power\
    \ > 1)\n    {\n        if(power % 2 == 1)\n        {\n            result *= x;\n\
    \        }\n        power /= 2;\n        x *= x;\n    }\n    return result ==\
    \ x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis fails for `is_simple_power(1L,\
    \ 4L)` which should return `true`.\n<|/ c |>\n<| c |>\nI didn't see that requirement,\
    \ thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\nI believe\
    \ this fails for `is_simple_power(1L, 2L)` which should return `true`.\n<|/ c\
    \ |>\n<| c |>\nI believe this fails for `is_simple_power(1L, 3L)` which should\
    \ return `false`.\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(1L,\
    \ 4L)` which should return `true`.\n<|/ c |>\n<| a |>\n<code>", "{\n    long long\
    \ power = 1;\n    long long result = 1;\n    \n    while(n > 0)\n    {\n     \
    \   power *= x;\n        result *= power;\n        n /= 2;\n    }\n    \n    return\
    \ result == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work for `is_simple_power(3L, 2L)` which returns `true` instead of `false`\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ this.\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(3L, 1L)`\
    \ which returns `true` instead of `false`\n<|/ c |>\n<| c |>\nYes, you're right.\
    \ I missed that case. I've updated my answer to account for this.\n<|/ c |>\n\
    <| c |>\nThis fails for `is_simple_power(3L, 3L)` which returns `true` instead\
    \ of `false`\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long power = 1;\n \
    \   long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n   \
    \     result *= x;\n        n /= x;\n    }\n    \n    return (result == power);\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n  \
    \  {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n\
    \    return (result == power);\n}", "{\n    long result = 1;\n    long power =\
    \ 1;\n    long pow = n;\n    \n    while(pow > 0)\n    {\n        result *= x;\n\
    \        pow *= pow;\n        power *= n;\n    }\n    \n    return result == x;\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n\
    \        power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n   \
    \ return result == power;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `is_simple_power(3L, 2L)` returns `true` but `is_simple_power(3L, 1L)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI tested it on repl.it and it works. I\
    \ edited my answer to include a link to the repl.it link\n<|/ c |>\n<| c |>\n\
    I tested it on repl.it and it works. I edited my answer to include a link to the\
    \ repl.it link\n<|/ c |>\n<| c |>\nI tested it on repl.it and it works. I edited\
    \ my answer to include a link to the repl.it link\n<|/ c |>\n<| c |>\nI tested\
    \ it on repl.it and it works. I edited my answer to include a link to the repl.it\
    \ link\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long pow_of_n = pow(n, x);\n    return pow_of_n ==\
    \ x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `pow` returns\
    \ a `double` which isn't a power of `long`.\n<|/ c |>\n<| c |>\nI didn't know\
    \ that. Thanks for pointing that out. I'll edit my answer.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that works with `long`s.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n   \
    \ long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = ", "{\n    long result\
    \ = 1;\n    long power = 1;\n    \n    while(power < n)\n    {\n        power\
    \ *= x;\n        result *= power;\n    }\n    \n    return (result == x);\n}",
  "{\n    long power = 1;\n    long result = 1;\n    long limit = (long) pow(2, n);\n\
    \    \n    while(power < limit)\n    {\n        power *= x;\n        result *=\
    \ power;\n    }\n    \n    return result == x;\n}", "{\n    long long power =\
    \ 1;\n    long long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= 10;\n    }\n    \n    return (result\
    \ == power);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `is_simple_power(-10, 2)` returns `true`.\n<|/ c |>\n\
    <| c |>\nIt works for negative numbers. `is_simple_power(-10, 2)` returns `true`.\n\
    <|/ c |>\n<| c |>\nI didn't say it wouldn't. I said it wouldn't work for negative\
    \ numbers. `is_simple_power(-10, 2)` returns `true`.\n<|/ c |>\n<| c |>\nOh, I\
    \ see what you mean. Yes, it works for negative numbers. I misunderstood what\
    \ you meant by \"simple\".\n<|/ c |>\n<| c |>\nI added a solution that works for\
    \ negative numbers. I hope it helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\
    \    long pow_of_n = pow(n, x);\n    return pow_of_n == x;\n}", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n -= 1;\n    }\n    \n    return (result ==\
    \ power);\n}", "{\n    long result = 1;\n    long power = 1;\n    while(n > 0)\n\
    \    {\n        power *= n;\n        if(power > x)\n        {\n            break;\n\
    \        }\n        result *= power;\n    }\n    return result == x;\n}", "{\n\
    \    if (n == 0) return true;\n    if (n == 1) return true;\n    if (n % 2 ==\
    \ 0) return false;\n    long m = n / 2;\n    long r = 1;\n    while (m > 1) {\n\
    \        if (m % 2 == 1) return false;\n        r = r * x;\n        m = m / 2;\n\
    \    }\n    return r == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n  \
    \      power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ (result == power);\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\n\
    `pow` isn't a standard function in C++.\n<|/ c |>\n<| c |>\n`pow` isn't a standard\
    \ function in C++, but it is in C99.\n<|/ c |>\n<| c |>\n: It is a standard function\
    \ in C99, but not in C++.\n<|/ c |>\n<| c |>\n: I didn't know that. Thanks for\
    \ the info!\n<|/ c |>\n<| c |>\n: It is a standard function in C++, but not in\
    \ C99.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result\
    \ *= x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n \
    \   long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n   \
    \     power = power * n;\n        result = result * x;\n        n = n - 1;\n \
    \   }\n    \n    return (result == power);\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. Try is_simple_power(2L, 4L).\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I added the test case in the answer. Can you please\
    \ explain why it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work for `is_simple_power(2L,\
    \ 4L)` because `2L**4` is `8L`.\n<|/ c |>\n<| c |>\nI see. Thank you for pointing\
    \ that out. I updated the answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n        return (x ==\
    \ 1);\n    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n\
    \        return is_simple_power(x * x, n / 2);\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= x;\n  \
    \      result *= power;\n        n--;\n    }\n    \n    return result == x;\n}",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n \
    \       power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ (result == power);\n}", "{\n    long power = 1;\n    long result = 1;\n    \n\
    \    while(n > 0)\n    {\n        power *= x;\n        result *= power;\n    \
    \    n /= 2;\n    }\n    \n    return (result == x);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe question was about a number that is a power of another number,\
    \ not about a number that is a power of another number.\n<|/ c |>\n<| c |>\nI\
    \ misunderstood the question. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    if (n == 0)\n        return true;\n    if (x == 1)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a tags=c++,algorithm,big-o\
    \ |>\n<| c |>\nThis is not O(n) but O(log(n))\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. My mistake. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm,big-o |>\n<code>",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n \
    \       power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    if (n == 0)\n        return true;\n    if (n ==\
    \ 1)\n        return (x == 1);\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work for `is_simple_power(3L, 3L)` which\
    \ should return `true`.\n<|/ c |>\n<| c |>\nYes, you are right. I've edited my\
    \ answer and added a test case for 3L and 3L.\n<|/ c |>\n<| a |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n      \
    \  if (n % 2 == 0) {\n            power *= x;\n        }\n        n /= 2;\n  \
    \      x *= x;\n    }\n    \n    if (n == 1) {\n        power *= x;\n    }\n \
    \   \n    return (power * x == result);\n}", "{\n    long r = 1;\n    long m =\
    \ n;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l =\
    \ 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n", "{\n    if (x == 1L) return true;\n    if (x == 0L)\
    \ return false;\n    if (n == 0L) return false;\n    if (n == 1L) return true;\n\
    \    if (x == n) return true;\n    if (n % 2 == 0L) return false;\n    if (n %\
    \ 3 == 0L) return false;\n    if (n % 5 == 0L) return false;\n    long r = x;\n\
    \    long m = n;\n    while (m%2 == 0L) m /= 2;\n    while (m%3 == 0L) m /= 3;\n\
    \    while (m%5 == 0L) m /= 5;\n    while (r%m == 0L) r /= m;\n    return r ==\
    \ x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI guess you meant `return\
    \ r == x;` instead of `return r == n;`\n<|/ c |>\n<| c |>\nYes, I meant `r ==\
    \ x`. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI believe this fails for\
    \ `is_simple_power(1L, 0L)`\n<|/ c |>\n<| c |>\nYes, I believe it fails for `is_simple_power(1L,\
    \ 0L)`. But I believe it fails for `is_simple_power(1L, 1L)` as well. `1L**0L\
    \ == 1L`\n<|/ c |>\n<| c |>\nI believe it fails for `is_simple_power(1L, 1L)`\
    \ as well. `1L**1L == 1L`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n\
    \    if (n == 0) return true;\n    if (n == 1) return true;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return false;\n    if (x == 2) return true;\n    if\
    \ (x == 3) return true;\n    if (x == n) return true;\n    if (x == n-1) return\
    \ true;\n    if (x == n+1) return true;\n    if (x == n+2) return true;\n    if\
    \ (x == n+3) return true;\n    if (x == n+4) return true;\n    if (x == n+5) return\
    \ true;\n    if (x == n+6) return true;\n    if (x == n+7) return true;\n    if\
    \ (x == n+8) return true;\n    if (x == n+9) return true;\n    if (x == n+10)\
    \ return true;\n    if (x == n+11) return true;\n    if (x == n+12) return true;\n\
    \    if (x == n+13) return true;\n    if (x == n+14) return true;\n    if (x ==\
    \ n+15) return true;\n    if (x == n+16) return true;\n    if (x == n+17) return\
    \ true;\n    if (x == n+18) return true;\n    if (x == n+19) return true;\n  \
    \  if (x == n+20) return true;\n    if (x == n+21) return true;\n    if (x ==\
    \ n+22) return true;\n    if (x == n+23) return true;\n    if (x == n+24) return\
    \ true;\n    if (x == n+25) return true;\n    if (x == n+26) return true;\n  \
    \  if (x == n+27) return true;\n    if (x == n+28) return true;\n    if (x ==\
    \ n+29) return true;\n    if (x == n+30) return true;\n    if (x == n+31) return\
    \ true;\n    if (x == n+32) return true;\n    if (x == n+33) return true;\n  \
    \  if (x == n+34) return true;\n    if (x == n+35) return true;\n    if (x ==\
    \ n+36) return true;\n    if (x == n+37) return true;\n    if (x == n+38) return\
    \ true;\n    if (x == n+39) return true;\n    if (x == n+40) return true;\n  \
    \  if (x == n+41) return true;\n    if (x == n+42) return true;\n    if (x ==\
    \ n+43) return true;\n    if (x == n+44) return true;\n    if (x == n+45) return\
    \ true;\n    if (x == n+46) return true;\n    if (x == n+47) return true;\n  \
    \  if (x == n+48) return true;\n    if (x == n+49) return true;\n    if (x ==\
    \ n+50) return true;\n    if (x == n+51) return true;\n    if (x == n+52) return\
    \ true;\n    if (x == n+53) return true;\n    if (x == n+54) return true;\n  \
    \  if (x == n+55) return true;\n    if (x == n+56) return true;\n    if (x ==\
    \ n+57) return true;\n    if (x == n", "{\n    long power = 1;\n    long result\
    \ = 1;\n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n \
    \       n--;\n    }\n    return (result == power);\n}", "{\n    long result =\
    \ 1;\n    long power = 1;\n    \n    while (power < n)\n    {\n        result\
    \ *= x;\n        power *= x;\n    }\n    \n    if (result == x)\n    {\n     \
    \   return true;\n    }\n    \n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work for `is_simple_power(3L, 2L)` which returns `false`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while (n > 0)\n    {\n        if (n % 2 == 0)\n     \
    \   {\n            power *= x;\n        }\n        \n        result *= x;\n  \
    \      n /= 2;\n        x *= x;\n    }\n    \n    return (result == power);\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct. `is_simple_power(3L,\
    \ 2L)` returns `true` but `is_simple_power(3L, 1L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nYes, I forgot about that case. Thanks for pointing it out. I've fixed\
    \ the code now.\n<|/ c |>\n<| c |>\nThis is not correct. `is_simple_power(3L,\
    \ 2L)` returns `true` but `is_simple_power(3L, 1L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nYes, I forgot about that case. Thanks for pointing it out. I've fixed\
    \ the code now.\n<|/ c |>\n<| c |>\nThis is not correct. `is_simple_power(3L,\
    \ 2L)` returns `true` but `is_simple_power(3L, 1L)` returns `false`.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = ", "{\n  \
    \  long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n    \
    \    power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long result = 1;\n    long power = 1;\n    \n\
    \    while(power < n)\n    {\n        result *= x;\n        power *= x;\n    }\n\
    \    \n    return result == x;\n}", "{\n    long power = 1;\n    long result =\
    \ 1;\n    \n    while (n > 1) {\n        if (n % 2 == 0) {\n            power\
    \ *= x;\n        }\n        result *= x;\n        n /= 2;\n        x *= x;\n \
    \   }\n    \n    if (n == 1) {\n        result *= x;\n    }\n    \n    return\
    \ (result == power);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ for `is_simple_power(3L, 3L)` which should return `true`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug. Now it works.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(3L,\
    \ 3L)` which should return `true`.\n<|/ c |>\n<| c |>\nI fixed the bug. Now it\
    \ works.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(3L, 3L)` which\
    \ should return `true`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n \
    \   long r = 1;\n    long m = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n \
    \   long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n", "{\n    long res = 1;\n\
    \    for(long i = 1; i < n; i++)\n    {\n        res = res * x;\n    }\n    return\
    \ res == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_simple_power(1L,\
    \ 4L)` returns `true` while `is_simple_power(2L, 2L)` returns `false`.\n<|/ c\
    \ |>\n<| c |>\nI didn't get you. Can you please elaborate your question with examples?\n\
    <|/ c |>\n<| c |>\n`is_simple_power(1L, 4L)` returns `true` while `is_simple_power(2L,\
    \ 2L)` returns `false`.\n<|/ c |>\n<| c |>\nI edited my answer. Now it works as\
    \ you wanted.\n<|/ c |>\n<| c |>\nThis doesn't work. `is_simple_power(1L, 4L)`\
    \ returns `true` while `is_simple_power(2L, 2L)` returns `false`.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>", "{\n\
    \    long long power = 1;\n    long long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n /= 10;\n    }\n \
    \   \n    return (result == power);\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = ", "{\n  \
    \  long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = ", "{\n    long power = 1;\n    long result = 1;\n  \
    \  long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = ", "{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n   \
    \ if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n     \
    \   return is_simple_power(x, n / 2) && is_simple_power(x, n / 2);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>", "{\n    if (n == 0) return true;\n    if\
    \ (n == 1) return true;\n    if (n % 2 == 0) return false;\n    long a = x % n;\n\
    \    long b = x - (a * n);\n    long c = n / 2;\n    while (c > 1) {\n       \
    \ if (a % c == 0) return false;\n        if (b % c == 0) return false;\n     \
    \   c /= 2;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work for `is_simple_power(3L, 2L)` because `3L` isn't a power of\
    \ `2L`.\n<|/ c |>\n<| c |>\nI didn't see that case. Thanks for pointing it out.\
    \ I've updated my answer.\n<|/ c |>\n<| c |>\nThis doesn't work for `is_simple_power(3L,\
    \ 2L)` because `3L` isn't a power of `2L`.\n<|/ c |>\n<| c |>\nI didn't see that\
    \ case. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n\
    This doesn't work for `is_simple_power(3L, 2L)` because `3L` isn't a power of\
    \ `2L`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long res = 1;\n\
    \    long power = 1;\n    \n    while (power < n)\n    {\n        res *= x;\n\
    \        power *= x;\n    }\n    \n    return (res == x);\n}", "{\n    if (n ==\
    \ 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n    if\
    \ (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, n / 2);\n}", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power = power * n;\n        \n\
    \        if(power == x)\n        {\n            result = true;\n            break;\n\
    \        }\n        \n        power *= x;\n    }\n    \n    return result;\n}",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n     \
    \   power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n    return\
    \ (result == power);\n}", "{\n    long long power = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= x;\n        n--;\n    }\n    \n    return power==x;\n\
    }", "{\n    long r = 1;\n    long m = 1;\n    long k = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long m = 1;\n    long n = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long m = 1;\n    long n = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long m = 1;\n    long n = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long m = 1;\n    long n = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long m = 1;\n    long n = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long m = 1;\n    long n = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long m = 1;\n    long n = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long m = 1;\n    long n = 1;\n", "{\n    long r =\
    \ 1;\n    long m = n;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n   \
    \ long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h =\
    \ 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n   \
    \ long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q =\
    \ 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= 2;\n    }\n    \n    return result == power;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,math,c |>\n<| c |>\nI like your solution, but I believe\
    \ it would be more efficient to just check `n % 2 == 0` instead of `n / 2`.\n\
    <|/ c |>\n<| c |>\nI believe that would be the case for most of the cases, but\
    \ the OP said that he wants to return `true` for `3L` and `2L` as well. `3L` isn't\
    \ a power of `2L`, so `n % 2 == 0` would return `false` for `3L`.\n<|/ c |>\n\
    <| c |>\nYes, I see that now. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    I believe that `n % 2 == 0` would return `true` for `3L` and `2L` as well, but\
    \ `3L` isn't a power of `2L`, so `n % 2 == 0` would return `false` for `3L`.\n\
    <|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out.\n<|/ c |>\n\
    <| a tags=c++,algorithm,math,c |>\n<code>", "{\n    long result = 1;\n    long\
    \ power = n;\n    \n    while (power != 0)\n    {\n        if (power % 2 == 1)\n\
    \        {\n            result *= x;\n        }\n        power /= 2;\n       \
    \ x *= x;\n    }\n    \n    return result == x;\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while (n > 1) {\n        power *= n;\n      \
    \  result *= x;\n        n /= 2;\n    }\n    \n    if (n == 1) {\n        if (result\
    \ == x) {\n            return true;\n        }\n    }\n    \n    return false;\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n  \
    \  {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n\
    \    return (result == power);\n}", "{\n    if (n == 0) return true;\n    if (n\
    \ == 1) return true;\n    if (x == 1) return true;\n    if (x == n) return true;\n\
    \    if (n % 2 == 0) return false;\n    long a = x % n;\n    if (a == 0) return\
    \ false;\n    if (a % 2 == 0) return false;\n    long b = n / 2;\n    long c =\
    \ 1;\n    while (a != 0) {\n        if (a % 2 == 0) {\n            if (b == 0)\
    \ return false;\n            if (b == c) return true;\n            long d = b\
    \ / 2;\n            if (d == c) return true;\n            if (d % 2 == 0) return\
    \ false;\n            c += 1;\n            b = d;\n        }\n        a /= 2;\n\
    \    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I tried your code, but I got an infinite loop. Can you please check\
    \ my code again?\n<|/ c |>\n<| c |>\nI added some comments to my code. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I\
    \ got an infinite loop. Can you please check my code again?\n<|/ c |>\n<| c |>\n\
    I added some comments to my code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I tried your code, but I got an infinite loop. Can you please check\
    \ my code again?\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return (result == power);\n}", "{\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for negative powers, e.g. `is_simple_power(1, -2)` returns `true`,\
    \ but `is_simple_power(1, -4)` returns `false`.\n<|/ c |>\n<| c |>\nYes, I realized\
    \ that after I posted my comment. I've updated my answer to include a solution\
    \ for negative powers. Thanks for pointing that out.\n<|/ c |>\n<| a |>\n<code>",
  "{\n    long r = 1;\n    long m = n;\n    while(m > 1) {\n        if(m % 2 == 1)\
    \ {\n            r *= x;\n        }\n        m /= 2;\n        x *= x;\n    }\n\
    \    return r == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is\
    \ not the most efficient solution. `pow` uses `sqrt` internally, so `is_simple_power`\
    \ will take O(sqrt(n)) time. `is_simple_power` can be implemented without `sqrt`\
    \ by using a `while` loop and `%` operator.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I wanted to show a solution that doesn't use sqrt or pow. I'll edit my answer\
    \ to include your suggestion.\n<|/ c |>\n<| c |>\nI added a solution without `sqrt`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power = power * n;\n   \
    \     \n        if(power == x)\n        {\n            return true;\n        }\n\
    \        \n        result = result * n;\n        \n        if(result > x)\n  \
    \      {\n            return false;\n        }\n    }\n    \n    return false;\n\
    }", "{\n    long long power = 1;\n    long long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power = power * n;\n        result = result * x;\n    \
    \    n--;\n    }\n    \n    return result == power;\n}", "{\n    if (n == 0) return\
    \ true;\n    if (n == 1) return true;\n    if (x == 0) return false;\n    if (x\
    \ == 1) return false;\n    if (x == 2) return true;\n    if (x == 3) return true;\n\
    \    if (x == 4) return true;\n    if (x == 5) return true;\n    if (x == 6) return\
    \ true;\n    if (x == 7) return true;\n    if (x == 8) return true;\n    if (x\
    \ == 9) return true;\n    if (x == 10) return true;\n    if (x == 11) return true;\n\
    \    if (x == 12) return true;\n    if (x == 13) return true;\n    if (x == 14)\
    \ return true;\n    if (x == 15) return true;\n    if (x == 16) return true;\n\
    \    if (x == 17) return true;\n    if (x == 18) return true;\n    if (x == 19)\
    \ return true;\n    if (x == 20) return true;\n    if (x == 21) return true;\n\
    \    if (x == 22) return true;\n    if (x == 23) return true;\n    if (x == 24)\
    \ return true;\n    if (x == 25) return true;\n    if (x == 26) return true;\n\
    \    if (x == 27) return true;\n    if (x == 28) return true;\n    if (x == 29)\
    \ return true;\n    if (x == 30) return true;\n    if (x == 31) return true;\n\
    \    if (x == 32) return true;\n    if (x == 33) return true;\n    if (x == 34)\
    \ return true;\n    if (x == 35) return true;\n    if (x == 36) return true;\n\
    \    if (x == 37) return true;\n    if (x == 38) return true;\n    if (x == 39)\
    \ return true;\n    if (x == 40) return true;\n    if (x == 41) return true;\n\
    \    if (x == 42) return true;\n    if (x == 43) return true;\n    if (x == 44)\
    \ return true;\n    if (x == 45) return true;\n    if (x == 46) return true;\n\
    \    if (x == 47) return true;\n    if (x == 48) return true;\n    if (x == 49)\
    \ return true;\n    if (x == 50) return true;\n    if (x == 51) return true;\n\
    \    if (x == 52) return true;\n    if (x == 53) return true;\n    if (x == 54)\
    \ return true;\n    if (x == 55) return true;\n    if (x == 56) return true;\n\
    \    if (x == 57) return true;\n    if (x == 58) return true;\n    if (x == 59)\
    \ return true;\n    if (x == 60) return true;\n    if (x == 61) return true;\n\
    \    if (x == 62) return true;\n    if (x == 63) return true;\n    if (x == 64)\
    \ return true;\n    if (x == 65) return true;\n    if (x == 66) return true;\n\
    \    if (x == 67) return true;\n    if (x == 68) return true;\n    if (x == 69)\
    \ return true;\n    if (x == 70) return true;\n    if (x == 71) return true;\n\
    \    if (x == 72) return true;\n    if (x == 73) return true;\n    if (x == 74)\
    \ return true;\n    if (x == 75) return true;\n    if (x == 76) return true;\n\
    \    if (x == 77) return true;\n    if (x == 78) return true;\n    if (x == 79)\
    \ return true;\n    if (x == 80) return true;\n    if (x == 81) return true;",
  "{\n    if (x == 1L)\n        return true;\n    if (x == 0L)\n        return false;\n\
    \    if (n == 0L)\n        return false;\n    if (n % 2 == 0L)\n        return\
    \ is_simple_power(x, n / 2L);\n    return is_simple_power(x, n / 2L) && is_simple_power(x,\
    \ n / 2L);\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThe second `is_simple_power(x,\
    \ n / 2L)` should be `is_simple_power(x, n / 2L) && is_simple_power(x, n / 2L)`.\n\
    <|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ `is_simple_power(3L, 2L)` which returns `true`.\n<|/ c |>\n<| c |>\nI fixed\
    \ it again. Thanks for pointing out my mistake.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for `is_simple_power(3L, 2L)` which returns `true`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
