name: HumanEval_76_is_simple_power
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L,\
  \ 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L,\
  \ 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L,\
  \ 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long\
  \ x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    long long power = 1;\n    long long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= x;\n        result *= power;\n        n /= 2;\n\
    \    }\n    \n    return result == x;\n}", "{\n    long result = 1;\n    long\
    \ power = 1;\n    \n    while (power < n)\n    {\n        result *= x;\n     \
    \   power *= x;\n    }\n    \n    return (result == x);\n}", "{\n    if (n ==\
    \ 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n    if\
    \ (x < 0)\n        return false;\n    long res = 1;\n    while (n > 1) {\n   \
    \     if (n % 2 == 0) {\n            res = res * x;\n        }\n        n = n\
    \ / 2;\n        x = x * x;\n    }\n    return (res == x);\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe question was about C++, not C. `std::pow` does not exist in\
    \ C++.\n<|/ c |>\n<| c |>\nYes, I know. My answer was in C. My mistake.\n<|/ c\
    \ |>\n<| c |>\nThis code doesn't work for negative numbers. `is_simple_power(-1L,\
    \ 4L)` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nThe code still doesn't work for\
    \ negative numbers. `is_simple_power(-1L, 4L)` returns `true` instead of `false`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long r = 1;\n    long m = n;\n  \
    \  long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n \
    \   long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= 2;\n  \
    \  }\n    \n    return result == power;\n}", "{\n    long long power = 1;\n  \
    \  long long result = 1;\n    \n    while (n > 0)\n    {\n        power *= x;\n\
    \        result *= power;\n        n--;\n    }\n    \n    return (result == x);\n\
    }", "{\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = ", "{\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    if (x == 1L) return true;\n    if (x == 2L) return\
    \ true;\n    if (x == 3L) return true;\n    if (x == 5L) return true;\n    if\
    \ (x == 8L) return true;\n    if (x == 16L) return true;\n    if (x == 32L) return\
    \ true;\n    if (x == 64L) return true;\n    if (x == 128L) return true;\n   \
    \ if (x == 256L) return true;\n    if (x == 512L) return true;\n    if (x == 1024L)\
    \ return true;\n    if (x == 2048L) return true;\n    if (x == 4096L) return true;\n\
    \    if (x == 8192L) return true;\n    if (x == 16384L) return true;\n    if (x\
    \ == 32768L) return true;\n    if (x == 65536L) return true;\n    if (x == 131072L)\
    \ return true;\n    if (x == 262144L) return true;\n    if (x == 524288L) return\
    \ true;\n    if (x == 1048576L) return true;\n    if (x == 2097152L) return true;\n\
    \    if (x == 4194304L) return true;\n    if (x == 8388608L) return true;\n  \
    \  if (x == 16777216L) return true;\n    if (x == 33554432L) return true;\n  \
    \  if (x == 67108864L) return true;\n    if (x == 134217728L) return true;\n \
    \   if (x == 268435456L) return true;\n    if (x == 536870912L) return true;\n\
    \    if (x == 1073741824L) return true;\n    if (x == 2147483648L) return true;\n\
    \    if (x == 4294967296L) return true;\n    if (x == 8589934592L) return true;\n\
    \    if (x == 17179869184L) return true;\n    if (x == 34359738368L) return true;\n\
    \    if (x == 68719476736L) return true;\n    if (x == 137438953472L) return true;\n\
    \    if (x == 274877906944L) return true;\n    if (x == 549755813888L) return\
    \ true;\n    if (x == 1099511627776L) return true;\n    if (x == 2199023255552L)\
    \ return true;\n    if (x == 4398046511104L) return true;\n    if (x == 8796093022208L)\
    \ return true;\n    if (x == 17592186044416L) return true;\n    if (x == 35184372088832L)\
    \ return true;\n    if (x == 70368744177664L) return true;\n    if (x == 140737488355328L)\
    \ return true;\n    if (x == 281474976710656L) return true;\n    if (x == 562949953421312L)\
    \ return true;\n    if (x == 1125899906842624L) return true;\n", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result\
    \ == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while (n > 1) {\n        power = power * n;\n       \
    \ if (power == x) {\n            result = true;\n            break;\n        }\n\
    \        n = n - 1;\n    }\n    \n    return result;\n}", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while (n > 1) {\n        power *= n;\n \
    \       result *= x;\n        n /= 2;\n    }\n    \n    return result == power;\n\
    }", "{\n    if (n == 0) return true;\n    if (x == 1) return true;\n    if (x\
    \ == n) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long m = n / 3;\n    if (m == 0) return false;\n    if (m == 1)\
    \ return true;\n    if (m == n) return true;\n    if (m % 2 == 0) return false;\n\
    \    if (m % 3 == 0) return false;\n    long m2 = m / 3;\n    if (m2 == 0) return\
    \ false;\n    if (m2 == 1) return true;\n    if (m2 == n) return true;\n    if\
    \ (m2 % 2 == 0) return false;\n    if (m2 % 3 == 0) return false;\n    long m3\
    \ = m2 / 3;\n    if (m3 == 0) return false;\n    if (m3 == 1) return true;\n \
    \   if (m3 == n) return true;\n    if (m3 % 2 == 0) return false;\n    if (m3\
    \ % 3 == 0) return false;\n    long m4 = m3 / 3;\n    if (m4 == 0) return false;\n\
    \    if (m4 == 1) return true;\n    if (m4 == n) return true;\n    if (m4 % 2\
    \ == 0) return false;\n    if (m4 % 3 == 0) return false;\n    long m5 = m4 /\
    \ 3;\n    if (m5 == 0) return false;\n    if (m5 == 1) return true;\n    if (m5\
    \ == n) return true;\n    if (m5 % 2 == 0) return false;\n    if (m5 % 3 == 0)\
    \ return false;\n    long m6 = m5 / 3;\n    if (m6 == 0) return false;\n    if\
    \ (m6 == 1) return true;\n    if (m6 == n) return true;\n    if (m6 % 2 == 0)\
    \ return false;\n    if (m6 % 3 == 0) return false;\n    long m7 = m6 / 3;\n \
    \   if (m7 == 0) return false;\n    if (m7 == 1) return true;\n    if (m7 == n)\
    \ return true;\n    if (m7 % 2 == 0) return false;\n    if (m7 % 3 == 0) return\
    \ false;\n    long m8 = m7 / 3;\n    if (m8 == 0) return false;\n    if (m8 ==\
    \ 1) return true;\n    if (m8 == n) return true;\n    if (m8 % 2 == 0) return\
    \ false;\n    if (m8 % 3 == 0) return false;\n    long m9 = m8 / 3;\n    if (m9\
    \ == 0) return false;\n    if (m9 == 1) return true;\n    if (m9 == n) return\
    \ true;\n    if (m9 % 2 == 0) return false;\n    if (m9 % 3 == 0) return false;\n\
    \    long m10 = m9 / 3;\n    if (m10 == 0) return false;\n    if (m10 == 1) return\
    \ true;\n    if (m10 == n) return true;\n    if (", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power = power *\
    \ x;\n        n = n - 1;\n    }\n    \n    while(power > 0)\n    {\n        result\
    \ = result * power;\n        power = power - 1;\n    }\n    \n    if(result ==\
    \ x)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    if (x == 1L) return true;\n    if\
    \ (x == 0L) return false;\n    if (n == 0L) return false;\n    if (n == 1L) return\
    \ true;\n    \n    long r = 1L;\n    \n    long d = 1L;\n    \n    long m = 0L;\n\
    \    \n    long k = 0L;\n    \n    long j = 0L;\n    \n    long k1 = 1L;\n   \
    \ \n    long k2 = 1L;\n    \n    long k3 = 1L;\n    \n    long k4 = 1L;\n    \n\
    \    long k5 = 1L;\n    \n    long k6 = 1L;\n    \n    long k7 = 1L;\n    \n \
    \   long k8 = 1L;\n    \n    long k9 = 1L;\n    \n    long k10 = 1L;\n    \n \
    \   long k11 = 1L;\n    \n    long k12 = 1L;\n    \n    long k13 = 1L;\n    \n\
    \    long k14 = 1L;\n    \n    long k15 = 1L;\n    \n    long k16 = 1L;\n    \n\
    \    long k17 = 1L;\n    \n    long k18 = 1L;\n    \n    long k19 = 1L;\n    \n\
    \    long k20 = 1L;\n    \n    long k21 = 0L;\n    \n    long k22 = 0L;\n    \n\
    \    long k23 = 0L;\n    \n    long k24 = 0L;\n    \n    long k25 = 0L;\n    \n\
    \    long k26 = 0L;\n    \n    long k27 = 0L;\n    \n    long k28 = 0L;\n    \n\
    \    long k29 = 0L;\n    \n    long k30 = 0L;\n    \n    long k31 = 0L;\n    \n\
    \    long k32 = 0L;\n    \n    long k33 = 0L;\n    \n    long k34 = 0L;\n    \n\
    \    long k35 = 0L;\n    \n    long k36 = 0L;\n    \n    long k37 = 0L;\n    \n\
    \    long k38 = 0L;\n    \n    long k39 = 0L;\n    \n    long k40 = 0L;\n    \n\
    \    long k41 = 0L;\n    \n    long k42 = 0L;\n    \n    long k43 = 0L;\n    \n\
    \    long k44 = 0L;\n", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = ", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while (n > 1) {\n        if (n % 2 == 1) {\n\
    \            power *= x;\n        }\n        result *= x;\n        n /= 2;\n \
    \       x *= x;\n    }\n    \n    if (n == 1) {\n        if (power * x == x) {\n\
    \            return true;\n        }\n    }\n    \n    return false;\n}", "{\n\
    \    long result = 1;\n    long power = 1;\n    \n    while(power < n)\n    {\n\
    \        result *= x;\n        power *= x;\n    }\n    \n    return result ==\
    \ x;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n  \
    \  \n    return result == power;\n}", "{\n    long result = 1;\n    for(int i\
    \ = 1; i < n; i++){\n        result = result * x;\n    }\n    return result ==\
    \ x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct. `is_simple_power(3L,\
    \ 3L)` returns `true` but `is_simple_power(3L, 2L)` returns `false`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
