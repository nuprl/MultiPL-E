name: HumanEval_31_is_prime
language: d
prompt: "import std.math;\n/*\nReturn true if a given number is prime, and false otherwise.\n\
  \    >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n    >>> is_prime(11L)\n\
  \    true\n    >>> is_prime(13441L)\n    true\n    >>> is_prime(61L)\n    true\n\
  \    >>> is_prime(4L)\n    false\n    >>> is_prime(1L)\n    false\n    \n*/\nbool\
  \ is_prime(long n) \n"
tests: "unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) ==\
  \ false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n\
  \    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n \
  \   assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L)\
  \ == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n\
  \    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n  \
  \  assert(candidate(255379L) == false);\n}\nvoid main(){}"
completions: ["{\n    long i;\n    long limit = sqrt(n);\n    for(i = 2; i <= limit;\
    \ i++)\n    {\n        if(n % i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    long i;\n    bool prime;\n  \
    \  \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n\
    \        prime = true;\n        for (i = 2L; i <= n; ++i)\n        {\n       \
    \     if (n % i == 0L)\n            {\n                prime = false;\n      \
    \          break;\n            }\n        }\n    }\n    return prime;\n}", "{\n\
    \    long i;\n    bool prime;\n    \n    if (n < 2L)\n        return false; \n\
    \    \n    prime = true;\n    \n    for (i = 2L; prime && i <= n; i+=i%2L)\n \
    \       prime = (n % i == 0L);\n    \n    return prime;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis is not the fastest solution, since it requires division per\
    \ each number in the range. Using a sieve is much faster.\n<|/ c |>\n<| c |>\n\
    I agree, sieve is much faster, but this was the OP's question. He asked for \"\
    a fast solution\", and I provided a fast solution. Also, sieve is much more elegant\
    \ than my solution. :)\n<|/ c |>\n<| c |>\nI agree with you, but I didn't downvote\
    \ your answer. :)\n<|/ c |>\n<| c |>\nI didn't downvote your answer, but your\
    \ solution doesn't work. Try it with `is_prime(6L)` - it returns `true` instead\
    \ of `false`. And it also doesn't work for `is_prime(101L)` - it returns `true`\
    \ instead of `false`. And it also doesn't work for `is_prime(11L)` - it returns\
    \ `true` instead of `false`. And it also doesn't work for `is_prime(13441L)` -\
    \ it returns `true` instead of `false`. And it also doesn't work for `is_prime(61L)`\
    \ - it returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nI tested it on ideone\
    \ and it works. I added the test cases you mentioned. Try it yourself. :)\n<|/\
    \ c |>\n<| a tags=c++,primes,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\n#include <vector>\nusing namespace std;", "{\n    long i;\n    bool\
    \ prime;\n    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n\
    \    prime = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n        if (n\
    \ % i == 0) \n        {\n            prime = false;\n            break;\n    \
    \    }\n    }\n    \n    return prime;\n}", "{\n    long i, limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}", "{\n    long i, limit = (long) sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime;\n    prime\
    \ = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i = 2;\
    \ i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}", "{\n\
    \    long i, limit, a;\n    bool prime;\n    limit = sqrt(n);\n    prime = true;\n\
    \    for (i = 2; i <= limit; ++i)\n    {\n        a = n % i;\n        if (a ==\
    \ 0)\n        {\n            prime = false;\n            break;\n        }\n \
    \   }\n    return prime;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code is\
    \ not correct. `is_prime(6L)` returns `true` but `is_prime(101L)` returns `false`\n\
    <|/ c |>\n<| c |>\nYes, I noticed that after I posted it. I fixed it now.\n<|/\
    \ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| c\
    \ |>\n`is_prime(6L)` returns `true` but `is_prime(101L)` returns `false`\n<|/\
    \ c |>\n<| c |>\nYes, I noticed that after I posted it. I fixed it now.\n<|/ c\
    \ |>\n<| a |>\n<code>\n#include <stdio.h>\n#include <math.h>", "{\n    long i;\n\
    \    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}", "{\n    long i;\n    bool prime;\n    \n    if\
    \ (n < 2L) \n    {\n        return false;\n    }\n    \n    prime = true;\n  \
    \  \n    for (i = 2L; i <= n; ++i)\n    {\n        if (n % i == 0L)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}", "{\n    long i;\n    bool prime = true;\n    \n    if (n < 2L) \n\
    \    {\n        prime = false;\n    }\n    else\n    {\n        for (i = 2L; i\
    \ <= sqrt(n); ++i)\n        {\n            if (n % i == 0L)\n            {\n \
    \               prime = false;\n                break;\n            }\n      \
    \  }\n    }\n    return prime;\n}", "{\n    long i;\n    long limit = (long) sqrt(n);\n\
    \    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nI like your solution, but I believe it can be improved.\
    \ For example, `is_prime(6L)` returns `true` because `6` is divisible by `2`,\
    \ `3` and `5`. You don't need to check `6` since it isn't divisible by `2`.\n\
    <|/ c |>\n<| c |>\nI agree, thank you for pointing that out. I've edited my answer\
    \ to include a more efficient solution.\n<|/ c |>\n<| c |>\nI believe that `is_prime(6L)`\
    \ returns `false` because `6` is divisible by `3`, `5` and `7`. `6` isn't divisible\
    \ by `2` so `is_prime(6L)` returns `false` even though `6` is divisible by `2`.\n\
    <|/ c |>\n<| c |>\nYes, you're right. I was thinking about it too much. I've edited\
    \ my answer to include a more efficient solution.\n<|/ c |>\n<| c |>\nI believe\
    \ that `is_prime(6L)` returns `false` because `6` is divisible by `3`, `5` and\
    \ `7`. `6` isn't divisible by `2` so `is_prime(6L)` returns `false` even though\
    \ `6` is divisible by `2`.\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\nThe sieve\
    \ of Eratosthenes is very efficient. \nThe idea is to generate all numbers from\
    \ 2 to sqrt(n), then filter out all numbers that are not divisible by all numbers\
    \ from 2 to sqrt(n).\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI believe that you\
    \ can use the Sieve of Eratosthenes algorithm to solve this problem. \nThe algorithm\
    \ is described here: http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf\n<|/ a\
    \ tags=c++,primes,algorithm |>\n<| c |>\nThe Sieve of Eratosthenes is very inefficient.\
    \ See the other answers for more efficient solutions.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe Sieve of Eratosthenes is ", "{\n    long i;\n    bool prime;\n    prime\
    \ = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}", "{\n    long i, limit = (long)sqrt(n);\n    bool prime = true;\n\
    \    \n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n        {\n   \
    \         prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }", "{\n    long i;\n    bool prime;\n    \n    if (n < 2L) \n    {\n        return\
    \ false;\n    }\n    \n    prime = true;\n    \n    for (i = 2L; i <= n; i+=2)\
    \ \n    {\n        if (n % i == 0) \n        {\n            prime = false;\n \
    \           break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long\
    \ i;\n    long limit = (long) sqrt(n);\n    bool prime = true;\n    \n    for\
    \ (i = 2; i <= limit; ++i)\n    {\n        if (n % i == 0)\n        {\n      \
    \      prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2;\
    \ i++)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n \
    \           break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    bool is_prime = true;\n    for(i = 2; i <= n/2; i++)\n    {\n        if(n%i\
    \ == 0)\n        {\n            is_prime = false;\n            break;\n      \
    \  }\n    }\n    return is_prime;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n     \
    \       prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }", "{\n    long i;\n    bool prime;\n    \n    if (n < 2L)\n        return false;\
    \ \n    \n    prime = true;\n    \n    for (i = 2L; i <= n; i++)\n    {\n    \
    \    if (n % i == 0L)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    bool prime\
    \ = true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nI didn't downvote\
    \ you, but I suspect it's because you didn't explain what was wrong with OP's\
    \ code. Also, your code is very inefficient, since it uses `sqrt` instead of `isprime`.\n\
    <|/ c |>\n<| c |>\nI didn't downvote you, but I suspect it's because you didn't\
    \ explain what was wrong with OP's code. Also, your code is very inefficient,\
    \ since it uses `sqrt` instead of `isprime`.\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ you, but I suspect it's because you didn't explain what was wrong with OP's\
    \ code. Also, your code is very inefficient, since it uses `sqrt` instead of `isprime`.\n\
    <|/ c |>\n<| c |>\nI didn't downvote you, but I suspect it's because you didn't\
    \ explain what was wrong with OP's code. Also, your code is very inefficient,\
    \ since it uses `sqrt` instead of `isprime`.\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ you, but I suspect it's because you didn't explain what was wrong with OP's\
    \ code. Also, your code is very inefficient, since it uses `sqrt` instead of `isprime`.\n\
    <|/ c |>\n<| a tags=c++,primes |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long i;\n    long limit = (long)sqrt(n);\n    bool\
    \ prime = true;\n    \n    for (i = 2; i <= limit; ++i)\n    {\n        if (n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; i++)\n    {\n        if(n % i == 0)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    long\
    \ i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not an answer. Explain what your code does, and how it\
    \ does it.\n<|/ c |>\n<| c |>\nThis is not an answer. Explain what your code does,\
    \ and how it does it.\n<|/ c |>\n<| c |>\nThis is not an answer. Explain what\
    \ your code does, and how it does it.\n<|/ c |>\n<| c |>\nThis is not an answer.\
    \ Explain what your code does, and how it does it.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Scanner;\nimport java.util.ArrayList;", "{\n    long\
    \ i;\n    bool prime;\n    prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n\
    \        if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime;\n \
    \   prime = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n        if(n % i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    \n\
    \    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}", "{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n \
    \   {\n        if(n%i == 0)\n        {\n            prime = false;\n         \
    \   break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool\
    \ prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n\
    \    else\n    {\n        for (i = 2L; i <= n; ++i)\n        {\n            if\
    \ (n % i == 0L)\n            {\n                prime = false;\n             \
    \   break;\n            }\n        }\n    }\n    \n    return prime;\n}", "{\n\
    \    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n \
    \       if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes,algorithm\
    \ |>\n<| c |>\nThis is not the most efficient way to find primes. A better way\
    \ would be to start at `sqrt(n)` and test `n % i == 0` for each `i` up to `sqrt(n)`.\n\
    <|/ c |>\n<| c |>\n: I agree, but I wanted to keep it simple and easy to understand.\
    \ I'll edit my answer to include your suggestion.\n<|/ c |>\n<| c |>\n: I added\
    \ a more efficient algorithm that uses only `sqrt()`.\n<|/ c |>\n<| c |>\n: I\
    \ added a more efficient algorithm that uses only `sqrt()`.\n<|/ c |>\n<| c |>\n\
    : I added a more efficient algorithm that uses only `sqrt()`.\n<|/ c |>\n<| a\
    \ tags=c++,primes,algorithm |>\n<code>", "{\n    long i;\n    bool prime = true;\n\
    \    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n     \
    \       prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }", "{\n    long i, limit, a;\n    bool prime;\n    limit = sqrt(n);\n    prime\
    \ = true;\n    for (i = 2; i <= limit; i++)\n    {\n        a = n % i;\n     \
    \   if (a == 0)\n        {\n            prime = false;\n            break;\n \
    \       }\n    }\n    return prime;\n}", "{\n    long i;\n    long limit = (long)\
    \ sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit; i++)\n \
    \   {\n        if (n % i == 0)\n        {\n            prime = false;\n      \
    \      break;\n        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes\
    \ |>\n<| c |>\n`long limit = (long) sqrt(n);` should be `long limit = (long) sqrt(n);`\n\
    <|/ c |>\n<| c |>\n`long limit = (long) sqrt(n);` should be `long limit = sqrt(n);`\n\
    <|/ c |>\n<| c |>\n`long limit = (long) sqrt(n);` should be `long limit = sqrt(n);`\n\
    <|/ c |>\n<| c |>\n`long limit = (long) sqrt(n);` should be `long limit = sqrt(n);`\n\
    <|/ c |>\n<| c |>\n`long limit = (long) sqrt(n);` should be `long limit = sqrt(n);`\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <=\
    \ n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    bool is_prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            is_prime = false;\n            break;\n      \
    \  }\n    }\n    return is_prime;\n}", "{\n    long i;\n    bool b;\n    \n  \
    \  if (n <= 1)\n        return false;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n\
    \    {\n        if (n % i == 0)\n        {\n            b = false;\n         \
    \   break;\n        }\n    }\n    \n    return b;\n}", "{\n    long i;\n    bool\
    \ prime = true;\n    for(i = 2; i <= n / 2; i++)\n    {\n        if(n % i == 0)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}", "{\n    long i;\n    bool prime;\n    \n    if (n <= 1)\n\
    \        return false; // 0 or 1 are not primes\n    \n    prime = true;\n   \
    \ \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n       \
    \ {\n            prime = false;\n            break;\n        }\n    }\n    \n\
    \    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    \n    if\
    \ (n < 2L)\n    {\n        return false;\n    }\n    \n    for (i = 2L; prime;\
    \ i+=2L)\n    {\n        if (n % i == 0L)\n        {\n            prime = false;\n\
    \        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    long limit\
    \ = (long)sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit;\
    \ i++)\n    {\n        if (n % i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long\
    \ i;\n    long limit = (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n\
    \        if(n%i == 0)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    long i;\n    bool prime;\n    prime = true;\n \
    \   if (n < 2L)\n        return prime;\n    if (n == 2L)\n        return prime;\n\
    \    for (i = 3L; prime && i <= n; i+=2L)\n        prime = (n % i == 0L);\n  \
    \  return prime;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `prime` variable\
    \ is unnecessary. Just return `i <= n`.\n<|/ c |>\n<| c |>\n: Yes, I know, but\
    \ I wanted to keep it close to the original code. Also, `prime` was a boolean\
    \ variable that was not initialized to `true`.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n\
    \        if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=primes,c++,algorithm,c\
    \ |>\n<| c |>\nThis is not the fastest solution. Try it out with n = 1000000007\
    \ and you will see that it is still slower than the other solutions.\n<|/ c |>\n\
    <| c |>\n: I agree, this is slower than the other solutions. But I believe it\
    \ is the fastest solution. Since it uses no division at all, it should be the\
    \ fastest solution. Also, it does not use any division at all. So, why do you\
    \ say it is not the fastest solution?\n<|/ c |>\n<| c |>\n: I see your point.\
    \ Yes, it is the fastest solution. But it uses division too. So, it is not the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest solution. So, I think it is the\
    \ fastest solution. But, it is still the fastest ", "{\n    long i;\n    bool\
    \ prime = true;\n    \n    if (n < 2L) \n    {\n        return false;\n    }\n\
    \    \n    for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i == 0) \n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ \n    return prime;\n}", "{\n    long i;\n    bool prime;\n    \n    if (n <\
    \ 2L) \n    {\n        return false;\n    }\n    \n    prime = true;\n    \n \
    \   for (i = 2L; i <= n; ++i)\n    {\n        if (n % i == 0L)\n        {\n  \
    \          prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}", "{\n    long i;\n    bool prime;\n    \n    if (n < 2L) \n    {\n\
    \        prime = false;\n    }\n    else\n    {\n        prime = true;\n     \
    \   for (i = 2L; i <= n; ++i)\n        {\n            if (n % i == 0L)\n     \
    \       {\n                prime = false;\n                break;\n          \
    \  }\n        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime\
    \ = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n    for(i=2; i<=limit;\
    \ i++)\n    {\n        if(n%i==0)\n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}", "{\n    long i;\n    bool prime;\n    \n\
    \    prime = true;\n    \n    if (n <= 1) return prime;\n    \n    for (i = 2;\
    \ i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}",
  "{\n    long i;\n    bool b;\n    long limit = sqrt(n);\n    for(i = 2; i <= limit;\
    \ i++)\n    {\n        if(n%i == 0)\n        {\n            b = false;\n     \
    \       break;\n        }\n        else\n        {\n            b = true;\n  \
    \      }\n    }\n    return b;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; i++)\n    {\n        if(n % i == 0)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    long\
    \ i;\n    bool prime = true;\n    \n    if (n < 2L)\n    {\n        return false;\n\
    \    }\n    \n    for (i = 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n\
    \        {\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    return prime;\n}", "{\n    long i;\n    bool prime;\n    \n    if (n\
    \ < 2L) \n    {\n        return false;\n    }\n    \n    prime = true;\n    \n\
    \    for (i = 2L; i <= n; i+=2) \n    {\n        if (n % i == 0) \n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= sqrt(n);\
    \ ++i)\n    {\n        if(n % i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}", "{\n\
    \    long i;\n    bool prime = true;\n    \n    if (n < 2L)\n        return prime;\n\
    \    \n    for (i = 2L; i <= n; i+=2L)\n    {\n        if (n % i == 0L)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ \n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}\n</code>\n\
    <|/ a tags=c++,primes |>\n<| c |>\nI believe this algorithm is wrong. `is_prime(6L)`\
    \ returns `true` but `is_prime(101L)` returns `false`. `is_prime(11L)` returns\
    \ `true` but `is_prime(13441L)` returns `false`. `is_prime(61L)` returns `true`\
    \ but `is_prime(4L)` returns `false`. `is_prime(1L)` returns `false`. `is_prime(2L)`\
    \ returns `true` but `is_prime(9L)` returns `false`. `is_prime(10L)` returns `true`\
    \ but `is_prime(100L)` returns `false`. `is_prime(100L)` returns `true` but `is_prime(1000L)`\
    \ returns `false`. `is_prime(1000L)` returns `true` but `is_prime(10000L)` returns\
    \ `false`. `is_prime(10000L)` returns `true` but `is_prime(100000L)` returns `false`.\
    \ `is_prime(100000L)` returns `true` but `is_prime(1000000L)` returns `false`.\
    \ `is_prime(1000000L)` returns `true` but `is_prime(10000000L)` returns `false`.\
    \ `is_prime(10000000L)` returns `true` but `is_prime(100000000L)` returns `false`.\
    \ `is_prime(100000000L)` returns `true` but `is_prime(1000000000L)` returns `false`.\
    \ `is_prime(1000000000L)` returns `true` but `is_prime(10000000000L)` returns\
    \ `false`. `is_prime(10000000000L)` returns `true` but `is_prime(100000000000L)`\
    \ returns `false`. `is_prime(100000000000L)` returns `true` but `is_prime(1000000000000L)`\
    \ returns `false`. `is_prime(1000000000000L)` returns `true` but `is_prime(10000000000000L)`\
    \ returns `false`. `is_prime(10000000000000L)` returns `true` but `is_prime(100000000000000L)`\
    \ returns `false`. `is_prime(100000000000000L)` returns `true` but `is_prime(1000000000000000L)`\
    \ returns `false`. `is_prime(1000000000000000L)` returns `true` but `is_prime(10000000000000000L)`\
    \ returns `false`. `", "{\n    long i;\n    bool prime = true;\n    \n    if (n\
    \ < 2L)\n    {\n        prime = false;\n    }\n    else\n    {\n        for (i\
    \ = 2L; i <= sqrt(n); ++i)\n        {\n            if (n % i == 0L)\n        \
    \    {\n                prime = false;\n                break;\n            }\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=primes,c++,sieve-of-eratosthenes\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long i;\n    long limit = (long)sqrt(n);\n    for(i\
    \ = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    long i;\n    long limit\
    \ = (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n \
    \       {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=c++,primes |>\n<| c |>\nThis code is not correct. `is_prime(6L)`\
    \ returns `false` but `is_prime(101L)` returns `true`. `is_prime(11L)` returns\
    \ `true` but `is_prime(13441L)` returns `true`.\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ to mention that is_prime should return false for 6 and 101. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n`is_prime(6L)` returns `false` but `is_prime(101L)`\
    \ returns `true`. `is_prime(11L)` returns `true` but `is_prime(13441L)` returns\
    \ `true`.\n<|/ c |>\n<| c |>\nYes, I forgot to mention that is_prime should return\
    \ false for 6 and 101. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n`is_prime(6L)`\
    \ returns `false` but `is_prime(101L)` returns `true`. `is_prime(11L)` returns\
    \ `true` but `is_prime(13441L)` returns `true`.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long i;\n    long\
    \ limit = (long)sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit; ++i)\n\
    \    {\n        if(n%i == 0)\n        {\n            prime = false;\n        \
    \    break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool\
    \ prime;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        prime = true;\n        for (i = 2L; i <= n; ++i)\n        {\n\
    \            if (n % i == 0L) \n            {\n                prime = false;\n\
    \                break;\n            }\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a tags=c++,primes,c |>\n<| c |>\nThe `prime` variable is unnecessary.\
    \ Just return `i` instead of `prime`.\n<|/ c |>\n<| c |>\n: I agree, that would\
    \ be better. I'll edit my answer.\n<|/ c |>\n<| c |>\n: I agree, that would be\
    \ better. I'll edit my answer.\n<|/ c |>\n<| c |>\n: I agree, that would be better.\
    \ I'll edit my answer.\n<|/ c |>\n<| c |>\n: I agree, that would be better. I'll\
    \ edit my answer.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "{\n    long i;\n    bool\
    \ prime;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\
    \ if (n == 2L) \n    {\n        prime = true;\n    }\n    else if (n % 2L == 0L)\
    \ \n    {\n        prime = false;\n    }\n    else\n    {\n        for (i = 3L;\
    \ i * i <= n; i += 2L) \n        {\n            if (n % i == 0L) \n          \
    \  {\n                prime = false;\n                break;\n            }\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    \n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n\
    \ % 2 == 0) return false;\n    \n    for (i = 3; i * i <= n; i += 2)\n    {\n\
    \        if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    bool prime\
    \ = true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n  \
    \      {\n            prime = false;\n            break;\n        }\n    }\n \
    \   return prime;\n}", "{\n    long i;\n    for(i = 2; i <= n/2; i++)\n    {\n\
    \        if(n % i == 0)\n        {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n</code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\n\
    The first test should be `i <= n/2`, otherwise it won't work for `is_prime(6)`.\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n: Thanks, I fixed\
    \ it.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n: Thanks,\
    \ I fixed it.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "{\n    long i;\n    long\
    \ limit = (long) sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit;\
    \ i++)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n \
    \           break;\n        }\n    }\n    return prime;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe OP asked for prime numbers, not for prime factors.\n<|/ c |>\n\
    <| c |>\nYes, I know. I just wanted to show that you can use the above function\
    \ to find prime numbers. I thought it would be helpful to show that you can use\
    \ the above function to find prime factors.\n<|/ c |>\n<| c |>\nThe OP asked for\
    \ prime numbers, not for prime factors.\n<|/ c |>\n<| c |>\nI know. I just wanted\
    \ to show that you can use the above function to find prime numbers. I thought\
    \ it would be helpful to show that you can use the above function to find prime\
    \ factors.\n<|/ c |>\n<| c |>\nI know. I just wanted to show that you can use\
    \ the above function to find prime numbers. I thought it would be helpful to show\
    \ that you can use the above function to find prime factors.\n<|/ c |>\n<| a tags=c++,primes\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long i;\n    bool prime = true;\n    \n    if (n < 2L)\n        return prime;\n\
    \    \n    for (i = 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    \n\
    \    return prime;\n}", "{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n    {\n\
    \        if(n%i == 0)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    long i;\n    bool prime;\n    \n    if (n < 2L)\
    \ \n    {\n        return false;\n    }\n    \n    prime = true;\n    \n    for\
    \ (i = 2L; i <= n; i+=2) \n    {\n        if (n % i == 0L) \n        {\n     \
    \       prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}\n</code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe first two\
    \ lines of `is_prime` can be replaced with `return n < 2L;`\n<|/ c |>\n<| c |>\n\
    : Yes, but that would make the function less efficient.\n<|/ c |>\n<| c |>\n:\
    \ I agree, but I wanted to keep it close to the OP's original code. Also, I wanted\
    \ to show that `bool` can be replaced with `bool` as well.\n<|/ c |>\n<| c |>\n\
    : I agree, but I wanted to show that `bool` can be replaced with `bool` as well.\
    \ Also, I wanted to show that `bool` can be replaced with `bool` as well.\n<|/\
    \ c |>\n<| c |>\n: I agree, but I wanted to show that `bool` can be replaced with\
    \ `bool` as well. Also, I wanted to show that `bool` can be replaced with `bool`\
    \ as well.\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>", "{\n    long\
    \ i;\n    bool prime = true;\n    for(i = 2; i <= n/2; i++)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}", "{\n    long i;\n    long limit = (long) sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not the fastest solution, since it requires iterating over\
    \ all primes up to sqrt(n).\n<|/ c |>\n<| c |>\nYes, I agree. But, it is still\
    \ a good solution, since it requires iterating over all primes up to sqrt(n).\n\
    <|/ c |>\n<| c |>\nYes, I agree. But, it is still a good solution, since it requires\
    \ iterating over all primes up to sqrt(n).\n<|/ c |>\n<| c |>\nYes, I agree. But,\
    \ it is still a good solution, since it requires iterating over all primes up\
    \ to sqrt(n).\n<|/ c |>\n<| c |>\nYes, I agree. But, it is still a good solution,\
    \ since it requires iterating over all primes up to sqrt(n).\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2;\
    \ ++i)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n \
    \           break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    long limit = (long)sqrt(n);\n    bool prime = true;\n    for(i = 2; i <=\
    \ limit; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes,algorithm,math\
    \ |>\n<| c |>\nThis code doesn't work for me. `is_prime(6L)` returns `true` but\
    \ `is_prime(101L)` returns `false`.\n<|/ c |>\n<| c |>\n: I tested it on ideone,\
    \ and it works fine. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n\
    : I tested it on ideone, and it works fine. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\n: I tested it on ideone, and it works fine. Are you sure you\
    \ copied it correctly?\n<|/ c |>\n<| c |>\n: I tested it on ideone, and it works\
    \ fine. Are you sure you copied it correctly?\n<|/ c |>\n<| a tags=c++,primes,algorithm,math\
    \ |>\n<code>", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2;\
    \ ++i)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n \
    \           break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    long limit = (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n   \
    \     if(n%i == 0)\n        {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n</code>\n<|/ a tags=c++,primes,c |>\n<| c |>\nThis is not\
    \ the fastest solution. There are faster algorithms for prime number checking.\n\
    <|/ c |>\n<| c |>\n: I agree, but I wanted to show a working solution. Also, I\
    \ wanted to show that OP can easily adapt this code to his needs.\n<|/ c |>\n\
    <| c |>\n: I agree, but I wanted to show a working solution. Also, I wanted to\
    \ show that OP can easily adapt this code to his needs.\n<|/ c |>\n<| c |>\n:\
    \ I agree, but I wanted to show a working solution. Also, I wanted to show that\
    \ OP can easily adapt this code to his needs.\n<|/ c |>\n<| c |>\n: I agree, but\
    \ I wanted to show a working solution. Also, I wanted to show that OP can easily\
    \ adapt this code to his needs.\n<|/ c |>\n<| a tags=c++,primes,c |>\n<code>\n\
    #include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n\
    #include <ctime>", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <=\
    \ n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    return prime;\n}", "{\n    long i,\
    \ k;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else\n    {\n        for (i = 2L; i <= n; i++)\n        {\n      \
    \      if (n % i == 0L)\n            {\n                prime = false;\n     \
    \           break;\n            }\n        }\n    }\n    \n    return prime;\n\
    }", "{\n    long i;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n \
    \       prime = false;\n    }\n    else\n    {\n        for (i = 2L; i <= sqrt(n);\
    \ ++i)\n        {\n            if (n % i == 0L) \n            {\n            \
    \    prime = false;\n                break;\n            }\n        }\n    }\n\
    \    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i = 2;\
    \ i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime =\
    \ false;\n            break;\n        }\n    }\n    return prime;\n}", "{\n  \
    \  long i;\n    bool prime;\n    \n    if (n < 2L) \n    {\n        return false;\n\
    \    }\n    \n    prime = true;\n    \n    for (i = 2L; i <= n; ++i)\n    {\n\
    \        if (n % i == 0L) \n        {\n            prime = false;\n          \
    \  break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n  \
    \  long limit = (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n     \
    \   if(n%i == 0)\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}", "{\n    long i;\n    bool prime;\n    \n    prime = true;\n\
    \    \n    for (i = 2; i <= n/2; ++i)\n    {\n        if (n % i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    \n\
    \    return prime;\n}", "{\n    long i;\n    bool b;\n    long limit = sqrt(n);\n\
    \    for(i = 2; i <= limit; i++)\n    {\n        if(n%i == 0)\n        {\n   \
    \         b = false;\n            break;\n        }\n        else\n        {\n\
    \            b = true;\n        }\n    }\n    return b;\n}", "{\n    long i;\n\
    \    bool prime;\n    \n    if (n < 2L) \n    {\n        return false;\n    }\n\
    \    \n    prime = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n     \
    \   if (n % i == 0) \n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    long limit\
    \ = (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe `sqrt` function should\
    \ be `std::sqrt`.\n<|/ c |>\n<| c |>\n`sqrt` returns a `double`, not a `long`.\
    \ `sqrt` should be `std::sqrt`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that\
    \ out. Fixed.\n<|/ c |>\n<| c |>\n: I fixed the code to use `std::sqrt` instead\
    \ of `sqrt`. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n: Thanks for pointing\
    \ that out. Fixed.\n<|/ c |>\n<| a dscore=4 |>\nThe simplest way is to use Sieve\
    \ of Eratosthenes algorithm. \nThe idea is to generate all prime numbers up to\
    \ sqrt(n) and then filter out those that are not divisible by any number from\
    \ 2 to sqrt(n).\n<|/ a tags=c++,primes,algorithm |>\n<| c |>\nThe Sieve of Eratosthenes\
    \ algorithm is *not* the simplest way. There are more efficient ways to do this.\n\
    <|/ c |>\n<| c |>\n: I agree. There are more efficient ways to do this.\n<|/ c\
    \ |>\n<| c |>\n: I agree. There are more efficient ways to do this. But this one\
    \ is the simplest and fastest way to implement the Sieve of Eratosthenes algorithm.\n\
    <|/ c |>\n<| c |>\n: I agree. There are more efficient ways to do this. But this\
    \ one is the simplest and fastest way to implement the Sieve of Eratosthenes algorithm.\n\
    <|/ c |>\n<| c |>\n: I agree. There are more efficient ways to do this. But this\
    \ one is the simplest and fastest way to implement the Sieve of Eratosthenes algorithm.\n\
    <|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long i;\n   \
    \ for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}", "{\n    long i;\n\
    \    bool prime;\n    prime = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n\
    \        if(n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n     \
    \       prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }", "{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    </code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThe first line\
    \ should be `bool is_prime(long n) `\n<|/ c |>\n<| c |>\nThe first line should\
    \ be `bool is_prime(long n) `\n<|/ c |>\n<| c |>\nThe first line should be `bool\
    \ is_prime(long n) `\n<|/ c |>\n<| c |>\nThe first line should be `bool is_prime(long\
    \ n) `\n<|/ c |>\n<| c |>\nThe first line should be `bool is_prime(long n) `\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long i;\n    long limit = (long)\
    \ sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    long i;\n    bool prime = true;\n    for(i = 2; i <= sqrt(n); ++i)\n    {\n\
    \        if(n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime;\n \
    \   \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    prime =\
    \ true;\n    \n    for (i = 2L; i <= n; ++i)\n    {\n        if (n % i == 0L)\
    \ \n        {\n            prime = false;\n            break;\n        }\n   \
    \ }\n    \n    return prime;\n}", "{\n    long i, j, k;\n    bool prime = true;\n\
    \    \n    if (n < 2L) \n    {\n        return false;\n    }\n    \n    for (i\
    \ = 2L; i <= n; i++) \n    {\n        if (n % i == 0L) \n        {\n         \
    \   prime = false;\n            break;\n        }\n    }\n    \n    return prime;\n\
    }\n</code>\n<|/ a tags=primes,c++,algorithm,math |>\n<| c |>\n`is_prime(6L)` returns\
    \ `true` but `is_prime(101L)` returns `false`\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ about that case. Thanks for pointing it out. I've updated the answer.\n<|/ c\
    \ |>\n<| c |>\nThe `is_prime` function can be simplified a little bit by removing\
    \ the `prime` variable and just returning `n % 2 == 0`.\n<|/ c |>\n<| c |>\nYes,\
    \ that's true. I've updated the answer accordingly.\n<|/ c |>\n<| c |>\n`is_prime(6L)`\
    \ returns `true` but `is_prime(101L)` returns `false`\n<|/ c |>\n<| a tags=primes,c++,algorithm,math\
    \ |>\n<code>", "{\n    long i;\n    long limit = (long)sqrt(n);\n    for(i = 2;\
    \ i <= limit; i++)\n    {\n        if(n % i == 0)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    long i;\n    bool b;\n\
    \    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n     \
    \       b = false;\n            break;\n        }\n        b = true;\n    }\n\
    \    return b;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts,\
    \ but this doesn't really answer the question. As I said in the question, I am\
    \ aware of how to find prime numbers. I am also aware of how to find prime numbers\
    \ in general. My question is about how to find prime numbers in a specific range.\
    \ Your code doesn't do that.\n<|/ c |>\n<| c |>\nThe code I posted does exactly\
    \ that. It finds prime numbers in a given range. Did you try it? It does exactly\
    \ what you asked for. Did you even read the code? It does exactly what you asked\
    \ for. Did you even try it? It does exactly what you asked for. Did you even try\
    \ it? It does exactly what you asked for. Did you even try it? It does exactly\
    \ what you asked for. Did you even try it? It does exactly what you asked for.\
    \ Did you even try it? It does exactly what you asked for. Did you even try it?\
    \ It does exactly what you asked for. Did you even try it? It does exactly what\
    \ you asked for. Did you even try it? It does exactly what you asked for. Did\
    \ you even try it? It does exactly what you asked for. Did you even try it? It\
    \ does exactly what you asked for. Did you even try it? It does exactly what you\
    \ asked for. Did you even try it? It does exactly what you asked for. Did you\
    \ even try it? It does exactly what you asked for. Did you even try it? It does\
    \ exactly what you asked for. Did you even try it? It does exactly what you asked\
    \ for. Did you even try it? It does exactly what you asked for. Did you even try\
    \ it? It does exactly what you asked for. Did you even try it? It does exactly\
    \ what you asked for. Did you even try it? It does exactly what you asked for.\
    \ Did you even try it? It does exactly what you asked for. Did you even try it?\
    \ It does exactly what you asked for. Did you even try it? It does exactly what\
    \ you asked for. Did you even try it? It does exactly what you asked for. Did\
    \ you even try it? It does exactly what you asked for. Did you even ", "{\n  \
    \  long i;\n    bool prime = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n \
    \   {\n        if (n % i == 0)\n        {\n            prime = false;\n      \
    \      break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n\
    \    bool b;\n    for(i=2; i<=n/2; i++)\n    {\n        if(n%i==0)\n        {\n\
    \            b = false;\n            break;\n        }\n    }\n    return b;\n\
    }", "{\n    long i;\n    bool b;\n    \n    // check for even numbers\n    if\
    \ (n & 1L) \n    {\n        return false;\n    }\n    \n    // check for factors\
    \ up to sqrt(n)\n    for (i = 2L; i <= std.sqrt(n); ++i) \n    {\n        if (n\
    \ % i == 0L) \n        {\n            b = false;\n            break;\n       \
    \ }\n    }\n    \n    return b;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was using\
    \ C++. I've edited my question to reflect this.\n<|/ c |>\n<| c |>\nI added a\
    \ C++ version that uses `std::vector`\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I'm sorry I didn't specify that I was using C++. I've edited my question to\
    \ reflect this.\n<|/ c |>\n<| c |>\nI added a C++ version that uses `std::vector`\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify that I was\
    \ using C++. I've edited my question to reflect this.\n<|/ c |>\n<| a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long i;\n    bool is_prime = true;\n    for(i = 2;\
    \ i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n    return is_prime;\n}", "{\n\
    \    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n \
    \       if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<|\
    \ c |>\nThis code doesn't work for large numbers. Try it with `is_prime(10L)`.\n\
    <|/ c |>\n<| c |>\n: I didn't say it wouldn't, I said it wouldn't.  It doesn't\
    \ work for large numbers.  It works for small numbers.  It works for numbers that\
    \ aren't prime.  It works for numbers that aren't divisible by 2.  It works for\
    \ numbers that aren't divisible by 3.  It works for numbers that aren't divisible\
    \ by 5.  It works for numbers that aren't divisible by 7.  It works for numbers\
    \ that aren't divisible by 11.  It works for numbers that aren't divisible by\
    \ 13.  It works for numbers that aren't divisible by 17.  It works for numbers\
    \ that aren't divisible by 19.  It works for numbers that aren't divisible by\
    \ 23.  It works for numbers that aren't divisible by 29.  It works for numbers\
    \ that aren't divisible by 31 or 37.  It works for numbers that aren't divisible\
    \ by 41 or 43.  It works for numbers that aren't divisible by 47.  It works for\
    \ numbers that aren't divisible by 53 and so on.  It works for numbers that aren't\
    \ divisible by any number between 2 and sqrt(n).\n<|/ c |>\n<| c |>\n: It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(n).  It works\
    \ for numbers that aren't divisible by any number between 2 and sqrt(", "{\n \
    \   long i;\n    bool is_prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n\
    \        if(n%i == 0)\n        {\n            is_prime = false;\n            break;\n\
    \        }\n    }\n    return is_prime;\n}", "{\n    long i;\n    bool prime;\n\
    \    \n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n        else\n   \
    \     {\n            prime = true;\n        }\n    }\n    \n    return prime;\n\
    }", "{\n    long i;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}",
  "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n\
    \        if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes,algorithm\
    \ |>\n<| c |>\nThis code is not correct. `is_prime(6L)` returns `false` but `is_prime(101L)`\
    \ returns `true`.\n<|/ c |>\n<| c |>\nThe code was written by someone else and\
    \ I didn't want to change it too much. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| c |>\nThe code was written by someone else and I didn't\
    \ want to change it too much. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\nThe code was written by someone else and I didn't want to change\
    \ it too much. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n\
    <| c |>\nThe code was written by someone else and I didn't want to change it too\
    \ much. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe most efficient way is to use Sieve of Eratosthenes algorithm. \nThe\
    \ algorithm is very simple:", "{\n    long i;\n    bool prime = true;\n    \n\
    \    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n    {\n   \
    \     for (i = 2L; i <= n; i++)\n        {\n            if (n % i == 0L)\n   \
    \         {\n                prime = false;\n                break;\n        \
    \    }\n        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime\
    \ = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}", "{\n    long i;\n    bool prime;\n    \n    if (n < 2L)\n    {\n\
    \        return false;\n    }\n    \n    prime = true;\n    \n    for (i = 2L;\
    \ i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}",
  "{\n    long i;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n       \
    \ return prime;\n    }\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n       \
    \ if (n % i == 0) \n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    bool prime\
    \ = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n      \
    \  {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2;\
    \ ++i)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n \
    \           break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else if (n == 2L) \n    {\n        prime = true;\n    }\n    else\n\
    \    {\n        for (i = 3L; i * i <= n; i += 2L) \n        {\n            if\
    \ (n % i == 0L) \n            {\n                prime = false;\n            \
    \    break;\n            }\n        }\n    }\n    \n    return prime;\n}\n</code>\n\
    <|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThe `prime` variable\
    \ is unnecessary. Just return `true` if the number is prime, and `false` otherwise.\
    \ Also, `i` should be `long i`.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted\
    \ to keep it simple and understandable for OP.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I wanted to keep it simple and understandable for OP.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, but I wanted to keep it simple and understandable for\
    \ OP.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to keep it simple and\
    \ understandable for OP.\n<|/ c |>\n<| a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long i;\n    bool prime;\n    \n    prime = true;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else \n   \
    \ {\n        for (i = 2L; i <= sqrt(n); ++i) \n        {\n            if (n %\
    \ i == 0L) \n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n\
    \    bool prime;\n    \n    if (n < 2L)\n        return false; // n is less than\
    \ 2\n    \n    prime = true;\n    \n    for (i = 2L; i <= n; i++) {\n        if\
    \ (n % i == 0L) {\n            prime = false;\n            break;\n        }\n\
    \    }\n    \n    return prime;\n}", "{\n    long i;\n    bool is_prime = true;\n\
    \    \n    if (n < 2L) \n    {\n        is_prime = false;\n    }\n    else\n \
    \   {\n        for (i = 2L; i <= n; i+=2L)\n        {\n            if (n % i ==\
    \ 0L)\n            {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    return is_prime;\n}", "{\n    long\
    \ i;\n    long limit = (long) sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n\
    \        if(n % i == 0)\n            return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the fastest solution. `is_prime`\
    \ can be implemented much faster by factoring only odd numbers. Also `is_prime`\
    \ can be implemented much faster by using a sieve.\n<|/ c |>\n<| c |>\n: I agree,\
    \ but I thought that OP was interested in knowing how to implement the algorithm\
    \ himself. I didn't want to give him a complete solution, just an idea of how\
    \ to implement it.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that OP\
    \ was interested in knowing how to implement the algorithm himself. I didn't want\
    \ to give him a complete solution, just an idea of how to implement it.\n<|/ c\
    \ |>\n<| c |>\n: I agree with you, but I thought that OP was interested in knowing\
    \ how to implement the algorithm himself. I didn't want to give him a complete\
    \ solution, just an idea of how to implement it.\n<|/ c |>\n<| c |>\n: I agree\
    \ with you, but I thought that OP was interested in knowing how to implement the\
    \ algorithm himself. I didn't want to give him a complete solution, just an idea\
    \ of how to implement it.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long i;\n\
    \    bool prime;\n    prime = true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n\
    \        if(n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    The question is tagged [tag:c++], not [tag:c]. Also, `std::vector` isn't a good\
    \ choice for implementing `is_prime`, since it allocates memory dynamically, and\
    \ that can cause memory fragmentation. Better use a `std::bitset`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing out. I am new to C++ and I didn't know about std::bitset.\
    \ I'll look into it.\n<|/ c |>\n<| c |>\n: I agree with you. std::bitset is better\
    \ than std::vector in this case. Thanks for pointing out.\n<|/ c |>\n<| c |>\n\
    : Thanks for pointing out. I didn't know about std::bitset. I'll look into it.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing out. I didn't know about std::bitset.\
    \ I'll look into it.\n<|/ c |>\n<| a tags=c++,primes |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long i;\n    bool prime = true;\n\
    \    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n   \
    \         prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes |>\n<| c |>\nThis code\
    \ is not correct. Try it for input `6L`. It returns `true` but should be `false`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| c |>\nThe code is not\
    \ correct. Try it for input `6L`. It returns `true` but should be `false`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| c |>\nThe code is not\
    \ correct. Try it for input `6L`. It returns `true` but should be `false`.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>", "{\n    long i;\n    bool prime;\n    \n  \
    \  prime = true;\n    \n    for (i = 2; i <= sqrt(n); ++i)\n    {\n        if\
    \ (n % i == 0)\n        {\n            prime = false;\n            break;\n  \
    \      }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    long limit\
    \ = (long) sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit;\
    \ i++)\n    {\n        if (n % i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else\n    {\n        for (i = 2L; i <= n; i++)\n        {\n      \
    \      if (n % i == 0L)\n            {\n                prime = false;\n     \
    \           break;\n            }\n        }\n    }\n    return prime;\n}", "{\n\
    \    long i;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n == 2L) \n    {\n        prime = true;\n    }\n\
    \    else if (n % 2L == 1L) \n    {\n        prime = false;\n    }\n    else if\
    \ (n % 3L == 2L) \n    {\n        prime = false;\n    }\n    else if (n % 5L ==\
    \ 3L) \n    {\n        prime = false;\n    }\n    else if (n % 7L == 5L) \n  \
    \  {\n        prime = false;\n    }\n    else if (n % 11L == 7L) \n    {\n   \
    \     prime = false;\n    }\n    else if (n % 13L == 11L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 17L == 13L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 19L == 17L) \n    {\n        prime = false;\n    }\n\
    \    else if (n % 23L == 19L) \n    {\n        prime = false;\n    }\n    else\
    \ if (n % 29L == 23L) \n    {\n        prime = false;\n    }\n    else if (n %\
    \ 31L == 29L) \n    {\n        prime = false;\n    }\n    else if (n % 37L ==\
    \ 31L) \n    {\n        prime = false;\n    }\n    else if (n % 41L == 37L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 43L == 39L) \n    {\n\
    \        prime = false;\n    }\n    else if (n % 47L == 43L) \n    {\n       \
    \ prime = false;\n    }\n    else if (n % 53L == 47L) \n    {\n        prime =\
    \ false;\n    }\n    else if (n % 59L == 53L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 61L == 59L) \n    {\n        prime = false;\n    }\n\
    \    else if (n % 67L == 61L) \n    {\n        prime = false;\n    }\n    else\
    \ if (n % 71L == 67L) \n    {\n        prime = false;\n    }\n    else if (n %\
    \ 73L == 71L) \n    {\n        prime = false;\n    }\n    else if (n % 79L ==\
    \ 73L) \n    {\n        prime = false;\n    }\n    else if (n % 83L == 79L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 89L == 83L) \n    {\n\
    \        prime = false;\n    }\n    else if (n % 97L == 89L) \n    {\n       \
    \ prime = false;\n    }\n    else if (n % 101L == 97L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 103L == 101L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 107L == 103L) \n    {\n        prime = false;\n    }\n\
    \    else if (", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <=\
    \ n/2; i++)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    long limit = (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n    {\n   \
    \     if(n % i == 0)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    long i;\n    bool prime = true;\n    for(i = 2;\
    \ i <= n / 2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}", "{\n\
    \    long i, limit = (long)sqrt(n);\n    bool prime = true;\n    for(i = 2; i\
    \ <= limit; ++i)\n    {\n        if(n%i == 0)\n        {\n            prime =\
    \ false;\n            break;\n        }\n    }\n    return prime;\n}\n</code>\n\
    <|/ a tags=c++,primes,algorithm |>\n<| c |>\nThis is not correct. `is_prime(6L)`\
    \ returns `true` but `is_prime(101L)` returns `false`.\n<|/ c |>\n<| c |>\nI believe\
    \ that `is_prime(6L)` returns `true` because `6` is prime. `is_prime(101L)` returns\
    \ `false` because `101` is not prime.\n<|/ c |>\n<| c |>\n`is_prime(6L)` returns\
    \ `true` because `6` is prime. `is_prime(101L)` returns `false` because `101`\
    \ is not prime.\n<|/ c |>\n<| c |>\nYes, I agree with you. My point was that `is_prime(6L)`\
    \ returns `true` because `6` is prime. `is_prime(101L)` returns `false` because\
    \ `101` is not prime.\n<|/ c |>\n<| c |>\n`is_prime(6L)` returns `true` because\
    \ `6` is prime. `is_prime(101L)` returns `false` because `101` is not prime.\n\
    <|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>", "{\n    long i;\n    long\
    \ limit = sqrt(n);\n    bool prime = true;\n    for(i = 2; i <= limit; i++)\n\
    \    {\n        if(n % i == 0)\n        {\n            prime = false;\n      \
    \      break;\n        }\n    }\n    return prime;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI believe that `is_prime` should return `true` if the number is\
    \ prime and `false` otherwise. Your code returns `true` if the number is prime\
    \ and `false` if the number is composite. Also, `is_prime` should return `true`\
    \ if the number is prime and `false` if the number is composite. Your code returns\
    \ `true` if the number is prime and `false` if the number is composite. Also,\
    \ `is_prime` should return `true` if the number is prime and `false` if the number\
    \ is composite. Your code returns `true` if the number is prime and `false` if\
    \ the number is composite. Also, `is_prime` should return `true` if the number\
    \ is prime and `false` if the number is composite. Your code returns `true` if\
    \ the number is prime and `false` if the number is composite. Also, `is_prime`\
    \ should return `true` if the number is prime and `false` if the number is composite.\
    \ Your code returns `true` if the number is prime and `false` if the number is\
    \ composite. Also, `is_prime` should return `true` if the number is prime and\
    \ `false` if the number is composite. Your code returns `true` if the number is\
    \ prime and `false` if the number is composite. Also, `is_prime` should return\
    \ `true` if the number is prime and `false` if the number is composite. Your code\
    \ returns `true` if the number is prime and `false` if the number is composite.\
    \ Also, `is_prime` should return `true` if the number is prime and `false` if\
    \ the number is composite. Your code returns `true` if the number is prime and\
    \ `false` if the number is composite. Also, `is_prime` should return `true` if\
    \ the number is prime and `false` if the number is composite. Your code returns\
    \ `true` if the number is prime and `false` if the number is composite. Also,\
    \ `is_prime` should return `true` if the number is prime and `false` if the number\
    \ is composite. Your code returns `true` if the number is prime and `false` if\
    \ the number is composite. Also, `is_prime` should return `true` if the number\
    \ is prime and `false` if the number is composite. Your code returns `true` if\
    \ the number is prime and `false` if the number is composite. Also, `is_prime`\
    \ should return `true` if the number is prime and `false` if the number is composite.\
    \ Your code returns `true` if the number is prime and `false` if the number is\
    \ composite. Also, `is_prime` should return `true` if the number is prime and\
    \ `false` if the number is composite. Your code returns `true` if the number is\
    \ prime and `false` if the number is composite. Also, `is_prime` ", "{\n    long\
    \ i;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else if (n == 2L) \n    {\n        prime = true;\n    }\n    else\
    \ if (n % 2L == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 3L\
    \ == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 5L == 0L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 7L == 0L) \n    {\n  \
    \      prime = false;\n    }\n    else if (n % 11L == 0L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 13L == 0L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 17L == 0L) \n    {\n        prime = false;\n    }\n \
    \   else if (n % 19L == 0L) \n    {\n        prime = false;\n    }\n    else if\
    \ (n % 23L == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 29L\
    \ == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 31L == 0L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 37L == 0L) \n    {\n \
    \       prime = false;\n    }\n    else if (n % 41L == 0L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 43L == 0L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 47L == 0L) \n    {\n        prime = false;\n    }\n \
    \   else if (n % 53L == 0L) \n    {\n        prime = false;\n    }\n    else if\
    \ (n % 59L == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 61L\
    \ == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 67L == 0L) \n\
    \    {\n        prime = false;\n    }\n    else if (n % 71L == 0L) \n    {\n \
    \       prime = false;\n    }\n    else if (n % 73L == 0L) \n    {\n        prime\
    \ = false;\n    }\n    else if (n % 79L == 0L) \n    {\n        prime = false;\n\
    \    }\n    else if (n % 83L == 0L) \n    {\n        prime = false;\n    }\n \
    \   else if (n % 89L == 0L) \n    {\n        prime = false;\n    }\n    else if\
    \ (n % 97L == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 101L\
    \ == 0L) \n    {\n        prime = false;\n    }\n    else if (n % 103L == 0L)\
    \ \n    {\n        prime = false;\n    }\n    else if (n % 107L == 0L) \n    {\n\
    \        prime = false;\n    }\n    else if (n % 109L == 0L) \n    {\n       \
    \ prime = false;\n    }\n    else if (n % 113L == 0L", "{\n    long i;\n    long\
    \ limit = (long)sqrt(n);\n    bool prime = true;\n    \n    for (i = 2; i <= limit;\
    \ i++)\n    {\n        if (n % i == 0)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long\
    \ i;\n    for(i=2; i<=n/2; i++)\n    {\n        if(n%i==0)\n        {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `is_prime(6L)`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nI copied the code exactly as you wrote it. I even tried it\
    \ on ideone.com. Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\n\
    I copied the code exactly as you wrote it. I even tried it on ideone.com. Are\
    \ you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nI copied the code\
    \ exactly as you wrote it. I even tried it on ideone.com. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long i;\n\
    \    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    \n\
    \    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n\
    \            prime = false;\n            break;\n        }\n    }\n    \n    return\
    \ prime;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n    for(i = 2;\
    \ i <= limit; i++)\n    {\n        if(n%i == 0)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,primes,algorithm\
    \ |>\n<| c |>\nThe first test should be `i <= limit` instead of `i <= limit -\
    \ 1`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n: Thanks,\
    \ I fixed it.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\n:\
    \ Thanks, I fixed it.\n<|/ c |>\n<| a tags=c++,primes,algorithm |>\n<code>", "{\n\
    \    long i;\n    long limit = (long)sqrt(n);\n    for(i=2; i<=limit; ++i)\n \
    \   {\n        if(n%i==0)\n            return false;\n    }\n    return true;\n\
    }", "{\n    long i;\n    bool prime = true;\n    \n    if (n < 2L)\n    {\n  \
    \      prime = false;\n    }\n    else if (n == 2L)\n    {\n        prime = true;\n\
    \    }\n    else\n    {\n        for (i = 3L; prime && i <= n; i += 2L)\n    \
    \    {\n            if (n % i == 0L)\n            {\n                prime = false;\n\
    \            }\n        }\n    }\n    return prime;\n}", "{\n    long i;\n   \
    \ long limit = (long) sqrt(n);\n    bool prime = true;\n    \n    for (i = 2;\
    \ i <= limit; ++i)\n    {\n        if (n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime;\n}",
  "{\n    long i;\n    bool prime = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n\
    \    bool is_prime = true;\n    \n    if (n < 2L)\n    {\n        is_prime = false;\n\
    \    }\n    else\n    {\n        for (i = 2L; i <= sqrt(n); ++i)\n        {\n\
    \            if (n % i == 0L)\n            {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n    }\n    \n    return is_prime;\n\
    }\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\n`is_prime(6L)` returns `true`,\
    \ but `is_prime(101L)` returns `false`.  `is_prime(11L)` returns `true`, but `is_prime(13441L)`\
    \ returns `true`.  `is_prime(61L)` returns `true`, but `is_prime(4L)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: I fixed the bugs. Thanks.\n<|/ c |>\n<| c |>\n\
    `is_prime(6L)` returns `true`, but `is_prime(101L)` returns `false`.  `is_prime(11L)`\
    \ returns `true`, but `is_prime(13441L)` returns `true`.  `is_prime(61L)` returns\
    \ `true`, but `is_prime(4L)` returns `false`.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bugs. Thanks.\n<|/ c |>\n<| c |>\n`is_prime(6L)` returns `true`, but `is_prime(101L)`\
    \ returns `false`.  `is_prime(11L)` returns `true`, but `is_prime(13441L)` returns\
    \ `true`.  `is_prime(61L)` returns `true`, but `is_prime(4L)` returns `false`.\n\
    <|/ c |>\n<| a tags=c++,primes |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long i;\n    bool is_prime = true;\n    \n    if\
    \ (n < 2L)\n        return is_prime;\n    \n    for (i = 2L; i <= n; i++)\n  \
    \  {\n        if (n % i == 0L)\n        {\n            is_prime = false;\n   \
    \         break;\n        }\n    }\n    \n    return is_prime;\n}", "{\n    long\
    \ i;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "{\n    long\
    \ i;\n    bool prime;\n    \n    if (n < 2L)\n        return false; // n is less\
    \ than 2\n    \n    prime = true;\n    \n    for (i = 2L; i <= sqrt(n); ++i)\n\
    \    {\n        if (n % i == 0L)\n        {\n            prime = false;\n    \
    \        break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n\
    \    bool prime;\n    prime = true;\n    for(i = 2; i <= n/2; i++)\n    {\n  \
    \      if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    The question was about a specific language, C#, which is what this answer was\
    \ written in. Also, your answer doesn't explain how it works.\n<|/ c |>\n<| c\
    \ |>\nThe question was about a specific language, C#, which is what this answer\
    \ was written in. Also, your answer doesn't explain how it works.\n<|/ c |>\n\
    <| c |>\nThe question was about a specific language, C#, which is what this answer\
    \ was written in. Also, your answer doesn't explain how it works.\n<|/ c |>\n\
    <| c |>\nThe question was about a specific language, C#, which is what this answer\
    \ was written in. Also, your answer doesn't explain how it works.\n<|/ c |>\n\
    <| c |>\nThe question was about a specific language, C#, which is what this answer\
    \ was written in. Also, your answer doesn't explain how it works.\n<|/ c |>\n\
    <| a tags=c#,primes,algorithm |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    long i;\n    bool prime = true;\n\
    \    \n    if (n < 2L)\n    {\n        return false;\n    }\n    \n    for (i\
    \ = 2L; i <= n; i++)\n    {\n        if (n % i == 0L)\n        {\n           \
    \ prime = false;\n            break;\n        }\n    }\n    \n    return prime;\n\
    }", "{\n    long i;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n \
    \       prime = false;\n    }\n    else if (n == 2L) \n    {\n        prime =\
    \ true;\n    }\n    else \n    {\n        for (i = 3L; prime && i <= n; i+=2)\
    \ \n        {\n            if (n % i == 0L) \n            {\n                prime\
    \ = false;\n            }\n        }\n    }\n    \n    return prime;\n}", "{\n\
    \    long i;\n    long limit = (long)sqrt(n);\n    for(i = 2; i <= limit; i++)\n\
    \    {\n        if(n%i == 0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your\
    \ answer! I tested it and it works fine. But, can you please explain me why you\
    \ used the long type for n? I thought that long was enough for all numbers. Thanks!\n\
    <|/ c |>\n<| c |>\n`long` can hold numbers up to 2^63 - 1, but `long long` can\
    \ hold numbers up to 2^64 - 1. So `long` should be enough for most cases. But\
    \ `long long` should be used if you need to store numbers up to 2^64 - 1.\n<|/\
    \ c |>\n<| c |>\n`long` is enough for most cases, but `long long` should be used\
    \ if you need to store numbers up to 2^64 - 1.\n<|/ c |>\n<| c |>\nThanks for\
    \ your explanation! I understand it now.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n\
    \        if(n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    \n    for (i = 2; i <= n / 2; ++i)\n    {\n        if (n % i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ \n    return prime;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n%i==0)\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}", "{\n    long i;\n \
    \   bool prime = true;\n    \n    for (i = 2; i <= n / 2; ++i)\n    {\n      \
    \  if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This is not an answer, but a comment to another answer.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer, but a comment to another answer.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer, but a comment to another answer.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer, but a comment to another answer.\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer, but a comment to another answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long i;\n    long limit = (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n\
    \    {\n        if(n%i == 0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n        {\n   \
    \         return false;\n        }\n    }\n    return true;\n}", "{\n    long\
    \ i;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else \n    {\n        for (i = 2L; i <= n; i+=2) \n        {\n   \
    \         if (n % i == 0) \n            {\n                prime = false;\n  \
    \              break;\n            }\n        }\n    }\n    return prime;\n}",
  "{\n    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n\
    \        if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    for(i = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n   \
    \         prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the fastest solution. There\
    \ are faster ways to determine if a number is prime (like [this](http://stackoverflow.com/questions/2068372/fastest-way-to-determine-if-a-number-is-prime-python)).\
    \ Also, your solution does not work for `is_prime(11L)`, which returns `true`\
    \ instead of `false`.\n<|/ c |>\n<| c |>\nI agree with you, this is just an example\
    \ to show how to do it. I will edit my answer to include a faster solution.\n\
    <|/ c |>\n<| c |>\nI added a faster solution, thank you for pointing out.\n<|/\
    \ c |>\n<| c |>\nThe fastest solution is still not correct. `is_prime(11L)` returns\
    \ `true` instead of `false`.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a faster solution, thank you for pointing out.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "{\n    long i;\n    long limit = (long)sqrt(n);\n    for(i = 2; i <=\
    \ limit; ++i)\n    {\n        if(n % i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    for(i = 2; i <= n/2; i++)\n    {\n        if(n%i == 0)\n        {\n     \
    \       prime = false;\n            break;\n        }\n    }\n    return prime;\n\
    }", "{\n    long i;\n    bool prime;\n    prime = true;\n    for(i = 2; i <= n/2;\
    \ ++i)\n    {\n        if(n%i == 0)\n        {\n            prime = false;\n \
    \           break;\n        }\n    }\n    return prime;\n}", "{\n    long i;\n\
    \    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else\n    {\n        for (i = 2L; i <= n; ++i)\n        {\n      \
    \      if (n % i == 0L)\n            {\n                prime = false;\n     \
    \           break;\n            }\n        }\n    }\n    return prime;\n}", "{\n\
    \    long i;\n    bool b;\n    \n    if (n < 2L)\n        return false; \n   \
    \ \n    for (i = 2L; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0L)\n   \
    \     {\n            b = false;\n            break;\n        }\n        b = true;\n\
    \    }\n    \n    return b;\n}\n</code>\n<|/ a tags=c++,primes,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ when compiling: `error: invalid operands of types 'long int' and 'long int'\
    \ to binary 'operator%'`\n<|/ c |>\n<| c |>\nI fixed the error. Thanks for your\
    \ help!\n<|/ c |>\n<| c |>\nI fixed the error. Thanks for your help!\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace\
    \ std;", "{\n    long i;\n    bool is_prime = true;\n    \n    for (i = 2; i <=\
    \ n / 2; ++i)\n    {\n        if (n % i == 0)\n        {\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return is_prime;\n\
    }", "{\n    long i;\n    bool is_prime = true;\n    for(i = 2; i <= n / 2; ++i)\n\
    \    {\n        if(n % i == 0)\n        {\n            is_prime = false;\n   \
    \         break;\n        }\n    }\n    return is_prime;\n}", "{\n    long i;\n\
    \    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n        if(n%i\
    \ == 0)\n        {\n            prime = false;\n            break;\n        }\n\
    \    }\n    return prime;\n}\n</code>\n<|/ a tags=c++,primes |>\n<| c |>\nThis\
    \ is not the most efficient way to solve this problem. There are much better ways\
    \ to solve this problem.\n<|/ c |>\n<| c |>\n: I agree, but I wanted to give a\
    \ quick solution to his problem and I thought this would be a good place to start.\
    \ Also, I wanted to give a quick solution to his problem and I thought this would\
    \ be a good place to start. Also, I wanted to give a quick solution to his problem\
    \ and I thought this would be a good place to start. Also, I wanted to give a\
    \ quick solution to his problem and I thought this would be a good place to start.\
    \ Also, I wanted to give a quick solution to his problem and I thought this would\
    \ be a good place to start. Also, I wanted to give a quick solution to his problem\
    \ and I thought this would be a good place to start. Also, I wanted to give a\
    \ quick solution to his problem and I thought this would be a good place to start.\
    \ Also, I wanted to give a quick solution to his problem and I thought this would\
    \ be a good place to start. Also, I wanted to give a quick solution to his problem\
    \ and I thought this would be a good place to start. Also, I wanted to give a\
    \ quick solution to his problem and I thought this would be a good place to start.\
    \ Also, I wanted to give a quick solution to his problem and I thought this would\
    \ be a good place to start. Also, I wanted to give a quick solution to his problem\
    \ and I thought this would be a good place to start.\n<|/ c |>\n<| c |>\n: I agree,\
    \ but I wanted to give a quick solution to his problem and I thought this would\
    \ be a good place to start. Also, I wanted to give a quick solution to his problem\
    \ and I thought this would be a good place to start. Also, I wanted to give a\
    \ quick solution to his problem and I thought this would be a good place to start.\
    \ Also, I wanted to give a quick solution to his problem and I thought this would\
    \ be a good place to start. Also, I wanted to give a quick solution to his problem\
    \ and I thought this would be a good place to start. Also, I wanted to give a\
    \ quick solution to his problem and I thought this would be a good place to start.\
    \ Also, I wanted to give a quick solution to his problem and I thought this would\
    \ be a good place to start. Also, I wanted to ", "{\n    long i;\n    long limit\
    \ = (long)sqrt(n);\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }", "{\n    long i, limit = (long) sqrt(n);\n    bool prime = true;\n    \n  \
    \  if (n <= 1) return false;\n    \n    for (i = 2; i <= limit; i++)\n    {\n\
    \        if (n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    for(i = 2;\
    \ i <= n/2; ++i)\n    {\n        if(n%i == 0)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    long i;\n    long limit = sqrt(n);\n\
    \    for(i=2; i<=limit; i++)\n    {\n        if(n % i == 0)\n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=primes,c++,algorithm\
    \ |>\n<| c |>\nThis code is not correct. `is_prime(6L)` returns `true` but `is_prime(101L)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI didn't test it but i think it works fine\n\
    <|/ c |>\n<| c |>\nIt doesn't work. `is_prime(6L)` returns `true` but `is_prime(101L)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI tested it and it works fine\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine\n<|/ c |>\n<| a dscore=4 |>\nI wrote a\
    \ small program to test the efficiency of various prime number generators. I used\
    \ the Sieve of Eratosthenes algorithm to find all prime numbers between 1 and\
    \ 100000000. \nThe program is written in C++11 and uses std::bitset to store the\
    \ primes. \nThe program is as follows:\n<code>\n#include <iostream>\n#include\
    \ <bitset>\n#include <vector>\n#include <chrono>\n#include <cmath>\n#include <ctime>\n\
    #include <cstdlib>\n#include <algorithm>\nusing namespace std;", "{\n    long\
    \ i;\n    bool prime = true;\n    for(i = 2; i <= n / 2; ++i)\n    {\n       \
    \ if(n % i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else if (n\
    \ == 2L) \n    {\n        prime = true;\n    }\n    else if (n % 2L == 0L) \n\
    \    {\n        prime = false;\n    }\n    else\n    {\n        for (i = 3L; i\
    \ * i <= n; i += 2L) \n        {\n            if (n % iL == 0L) \n           \
    \ {\n                prime = false;\n                break;\n            }\n \
    \       }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    bool prime\
    \ = true;\n    \n    if (n <= 1) return false;\n    if (n == 2) return true;\n\
    \    if (n % 2 == 0) return false;\n    \n    for (i = 3; i * i <= n; i += 2)\n\
    \    {\n        if (n % i == 0)\n        {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n\
    \    long limit = (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n    {\n       \
    \ if(n%i==0)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n    bool prime\
    \ = true;\n    for(i = 2; i <= limit; ++i)\n    {\n        if(n%i == 0)\n    \
    \    {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i = 2; i\
    \ <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime =\
    \ false;\n            break;\n        }\n    }\n    return prime;\n}", "{\n  \
    \  long i;\n    bool prime = true;\n    \n    for (i = 2; i <= n / 2; i++) {\n\
    \        if (n % i == 0) {\n            prime = false;\n            break;\n \
    \       }\n    }\n    return prime;\n}", "{\n    long i;\n    long limit = (long)sqrt(n);\n\
    \    bool prime = true;\n    for(i = 2; i <= limit; i++)\n    {\n        if(n\
    \ % i == 0)\n        {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n\
    \    \n    if (n < 2L)\n        return prime;\n    \n    for (i = 2L; i <= sqrt(n);\
    \ ++i)\n    {\n        if (n % i == 0L)\n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long\
    \ i;\n    bool prime;\n    \n    if (n < 2L) \n    {\n        return false;\n\
    \    }\n    \n    prime = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n\
    \        if (n % i == 0) \n        {\n            prime = false;\n           \
    \ break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n   \
    \ bool prime;\n    \n    if (n < 2L) \n    {\n        return false;\n    }\n \
    \   \n    prime = true;\n    \n    for (i = 2L; i <= n; ++i)\n    {\n        if\
    \ (n % i == 0L)\n        {\n            prime = false;\n            break;\n \
    \       }\n    }\n    \n    return prime;\n}", "{\n    long i;\n    bool prime\
    \ = true;\n    \n    if (n < 2L)\n        return prime;\n    \n    for (i = 2L;\
    \ i <= sqrt(n); ++i)\n        if (n % i == 0L)\n            prime = false;\n \
    \   \n    return prime;\n}", "{\n    long i;\n    bool prime = true;\n    for(i\
    \ = 2; i <= n/2; ++i)\n    {\n        if(n % i == 0)\n        {\n            prime\
    \ = false;\n            break;\n        }\n    }\n    return prime;\n}", "{\n\
    \    long i;\n    long limit = (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n \
    \   {\n        if(n % i == 0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    long i;\n    bool is_prime;\n    \n    if\
    \ (n < 2L) \n    {\n        is_prime = false;\n    }\n    else if (n == 2L) \n\
    \    {\n        is_prime = true;\n    }\n    else \n    {\n        is_prime =\
    \ false;\n        for (i = 3L; is_prime == false && i <= n; i = i + 2L) \n   \
    \     {\n            if (n % i == 0L) \n            {\n                is_prime\
    \ = true;\n            }\n        }\n    }\n    return is_prime;\n}", "{\n   \
    \ long i;\n    bool prime;\n    \n    if (n < 2L) \n    {\n        return false;\n\
    \    }\n    \n    prime = true;\n    \n    for (i = 2L; i <= n; i+=2) \n    {\n\
    \        if (n % i == 0) \n        {\n            prime = false;\n           \
    \ break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long i;\n   \
    \ bool b;\n    for(i = 2; i <= n/2; i++)\n    {\n        if(n%i == 0)\n      \
    \  {\n            b = false;\n            break;\n        }\n        b = true;\n\
    \    }\n    return b;\n}", "{\n    long i;\n    long limit = sqrt(n);\n    for(i\
    \ = 2; i <= limit; ++i)\n    {\n        if(n % i == 0)\n        {\n          \
    \  return false;\n        }\n    }\n    return true;\n}", "{\n    long i;\n  \
    \  bool prime;\n    \n    if (n < 2L)\n    {\n        return false;\n    }\n \
    \   \n    prime = true;\n    \n    for (i = 2L; i <= sqrt(n); ++i)\n    {\n  \
    \      if (n % i == 0L)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    return prime;\n}", "{\n    long i, k;\n    bool prime\
    \ = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n    }\n    else\n\
    \    {\n        for (i = 2L; i <= n; ++i)\n        {\n            if (n % i ==\
    \ 0L)\n            {\n                prime = false;\n                break;\n\
    \            }\n        }\n    }\n    return prime;\n}", "{\n    long i;\n   \
    \ for(i=2; i<=n/2; i++)\n    {\n        if(n%i==0)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis is not an answer to the question. He asked for a way to find prime\
    \ numbers, not whether they are prime or not.\n<|/ c |>\n<| c |>\nThis is not\
    \ an answer to the question. He asked for a way to find prime numbers, not whether\
    \ they are prime or not.\n<|/ c |>\n<| c |>\nThis is not an answer to the question.\
    \ He asked for a way to find prime numbers, not whether they are prime or not.\n\
    <|/ c |>\n<| c |>\nThis is not an answer to the question. He asked for a way to\
    \ find prime numbers, not whether they are prime or not.\n<|/ c |>\n<| c |>\n\
    This is not an answer to the question. He asked for a way to find prime numbers,\
    \ not whether they are prime or not.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n\
    \    long i;\n    bool prime = true;\n    for(i = 2; i <= n/2; ++i)\n    {\n \
    \       if(n%i == 0)\n        {\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime;\n}", "{\n    long i;\n    bool prime;\n \
    \   \n    if (n <= 1) return false;\n    \n    prime = true;\n    \n    for (i\
    \ = 2; i <= sqrt(n); ++i)\n    {\n        if (n % i == 0)\n        {\n       \
    \     prime = false;\n            break;\n        }\n    }\n    \n    return prime;\n\
    }", "{\n    long i;\n    long limit = (long)sqrt(n);\n    for(i=2; i<=limit; i++)\n\
    \    {\n        if(n%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}", "{\n    long i, j, k;\n    bool prime;\n    \n \
    \   prime = true;\n    \n    if (n < 2L) \n    {\n        return prime;\n    }\n\
    \    \n    for (i = 2L; i <= n; i+=2) \n    {\n        prime = false;\n      \
    \  for (j = 2L; j < i; j++) \n        {\n            if (i % j == 0) \n      \
    \      {\n                prime = true;\n                break;\n            }\n\
    \        }\n        if (prime) \n        {\n            break;\n        }\n  \
    \  }\n    \n    return prime;\n}", "{\n    long i;\n    long limit = (long) sqrt(n);\n\
    \    for(i = 2; i <= limit; ++i)\n    {\n        if(n % i == 0)\n        {\n \
    \           return false;\n        }\n    }\n    return true;\n}", "{\n    long\
    \ i;\n    bool prime = true;\n    \n    if (n < 2L) \n    {\n        prime = false;\n\
    \    }\n    else\n    {\n        for (i = 2L; i <= n; i+=2L)\n        {\n    \
    \        if (n % i == 0L)\n            {\n                prime = false;\n   \
    \             break;\n            }\n        }\n    }\n    return prime;\n}",
  "{\n    long i;\n    bool prime;\n    \n    if (n < 2L) \n    {\n        return\
    \ false;\n    }\n    \n    prime = true;\n    \n    for (i = 2L; i <= sqrt(n);\
    \ ++i) \n    {\n        if (n % i == 0L) \n        {\n            prime = false;\n\
    \            break;\n        }\n    }\n    \n    return prime;\n}", "{\n    long\
    \ i;\n    bool prime;\n    \n    if (n < 2L) \n    {\n        return false;\n\
    \    }\n    \n    prime = true;\n    \n    for (i = 2L; i <= n; i++)\n    {\n\
    \        if (n % i == 0L) \n        {\n            prime = false;\n          \
    \  break;\n        }\n    }\n    \n    return prime;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
