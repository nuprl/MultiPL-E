name: HumanEval_92_any_int
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of\
  \ the other two, and all numbers are integers.\n    Returns false in any other cases.\n\
  \    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L,\
  \ 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6,\
  \ -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float\
  \ z) \n"
tests: "unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
  \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
  \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
  \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
  \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
  \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
completions: ["{\n    return std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x,\
    \ y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n}", "{\n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z)) return false;\n    if (std.math.isnan(x)\
    \ && std.math.isnan(y) && std.math.isnan(z)) return false;\n    if (std.math.isinf(x)\
    \ && std.", "{\n    return std.math.isInfinite(x) || std.math.isInfinite(y) ||\
    \ std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z) || std.math.isInfinite(x - y) || std.math.isInfinite(x\
    \ - z) || std.math.isInfinite(y - z);\n}", "{\n    return ((std.int(x) == std.int(std.math.add(x,y)))\
    \ && (std.int(y) == std.int(std.math.add(x,z))));\n}", "{\n    return std.int(x)\
    \ == std.int(y) + std.int(z);\n}", "{\n    return ((std.math._abs(x) + std.math._abs(y)\
    \ + std.math._abs(z)) <= std.math._int(std.math._abs(x) + std.math._abs(y) + std.math._abs(z)));\n\
    }", "{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y) && std.math.isIntegral(z))\
    \ || (std.math.isIntegral(x) && std.math.isIntegral(y) && std.math.isIntegral(z)\
    \ && std.math.isIntegral(x+y) && std.math.isIntegral(x+z) && std.math.isIntegral(y+z)));\n\
    }", "{\n    return std.int(x) == std.int(y) + std.int(z);\n}", "{\n    return\
    \ std.int(x) == std.int(y) + std.int(z);\n}\n/*", "{\n    return ((std.math.rem(x,y)\
    \ == 0.0) && (std.math.rem(y,z) == 0.0) && (std.math.rem(x,z) == 0.0));\n}", "{\n\
    \    return ((std.int(x) == std.int(y)) || (std.int(y) == std.int(z)) || (std.int(z)\
    \ == std.int(x)));\n}", "{\n    return std.int._toInt(x) == std.int._toInt(y)\
    \ && std.int._toInt(x) == std.int._toInt(z);\n}", "{\n    return std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isIn",
  "{\n    bool result = false;\n    \n    if (std.math.isnan(x) || std.math.isnan(y)\
    \ || std.math.isnan(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || st",
  "{\n    return std.math.isInfinite(x) || std.math.isInfinite(y) || std.math.isInfinite(z)\
    \ || std.math.isInfinite(x+y) || std.math.isInfinite(x+z) || std.math.isInfinite(y+z);\n\
    }", "{\n    return ((std.int(x) == std.int(x + y)) && (std.int(y) == std.int(y\
    \ + z)) && (std.int(z) == std.int(z + x)));\n}", "{\n    return std.int(x) ==\
    \ std.int(y) + std.int(z);\n}\n/*", "{\n    return std.int(x) == std.int(y) +\
    \ std.int(z);\n}", "{\n    if (std.math.isnan(x) || std.math.isnan(y) || std.math.isnan(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) || std.math.isinf(y) ||\
    \ std.math.isinf(z))\n        return false;\n    \n    if (std.math.isinf(x) &&\
    \ std.math.isinf(y) && std.math.isinf(z))\n        return false;\n    \n    if\
    \ (std.math.isinf(x) && std.math.isinf(y) && !std.math.isinf(z))\n        return\
    \ false;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y) && std.math.isinf(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z))\n        return false;\n    \n    if (std.math.isinf(x)\
    \ && std.math.isinf(y) && std.math.isinf(z))\n        return false;\n    \n  \
    \  if (std.math.isinf(x) && std.math.isinf(y) && !std.math.isinf(z))\n       \
    \ return false;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y) && std.math.isinf(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && !std.math.isinf(z))\n        return false;\n    \n    if (x == y && y ==\
    \ z && z == 0)\n        return true;\n    \n    if (x == y && y == z && z != 0)\n\
    \        return false;\n    \n    if (x == y && y != z && z == 0)\n        return\
    \ true;\n    \n    if (x == y && y != z && z != 0)\n        return false;\n  \
    \  \n    if (x == y && y == z && z != 0)\n        return false;\n    \n    if\
    \ (x == y && y == z && z != 0)\n        return false;\n    \n    if (x == y &&\
    \ y == z && z != 0)\n        return false;\n    \n    if (x == y && y == z &&\
    \ z != 0)\n        return false;\n    \n    if (x == y && y == z && z != 0)\n\
    \        return false;\n    \n    if (x == y && y == z && z != 0)\n        return\
    \ false;\n    \n    if (x == y && y == z && z != 0)\n        return false;\n \
    \   \n    if (x == y && y == z && z != 0)\n        return false;\n    \n    if\
    \ (x == y && y == z && z != 0)\n        return false;\n    \n    if (x == y &&\
    \ y == z && z != 0)\n        return false;\n    \n    if (x == y && y == z &&\
    \ z != 0)\n        return false;\n    \n    if (x == y && ", "{\n    return std.int(x)\
    \ == std.int(y) + std.int(z);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
