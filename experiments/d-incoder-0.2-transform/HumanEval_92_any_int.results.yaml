language: d
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isclose(x, y, rel_tol=1e-9) &&\
    \ std.math.isclose(x, y, rel_tol=1e-9) && std.math.isclose(x, y, rel_tol=1e-9);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp292z5fcw.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp292z5fcw.d(28): Error: undefined identifier `isclose` in module
    `std.math`\n/tmp/tmp292z5fcw.d(28): Error: undefined identifier `isclose` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp292z5fcw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.math.isinf(y)\
    \ && std.math.isinf(z)) return false;\n    if (std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z)) return false;\n    if (std.math.isinf(x) && std.\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9e1ecj_j.d(49): Error: identifier expected following `.`, not
    `unittest`\n/tmp/tmp9e1ecj_j.d(50): Error: found `{` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9e1ecj_j.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x + y) || std.math.isInfinite(x\
    \ + z) || std.math.isInfinite(y + z) || std.math.isInfinite(x - y) || std.math.isInfinite(x\
    \ - z) || std.math.isInfinite(y - z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcnwasq66.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmpcnwasq66.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcnwasq66.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(std.math.add(x,y)))\
    \ && (std.int(y) == std.int(std.math.add(x,z))));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l25ihzb.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmp7l25ihzb.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmp7l25ihzb.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmp7l25ihzb.d(28): Error:
    identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7l25ihzb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpamapzt67.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpamapzt67.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math._abs(x) + std.math._abs(y) +\
    \ std.math._abs(z)) <= std.math._int(std.math._abs(x) + std.math._abs(y) + std.math._abs(z)));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppecv_00x.d(28): Error: undefined identifier `_abs` in module
    `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmppecv_00x.d(28):
    Error: undefined identifier `_abs` in module `std.math`, did you mean template
    `abs(Num)(Num x)`?\n/tmp/tmppecv_00x.d(28): Error: undefined identifier `_abs`
    in module `std.math`, did you mean template `abs(Num)(Num x)`?\n/tmp/tmppecv_00x.d(28):
    Error: undefined identifier `_int` in module `std.math`, did you mean function
    `rint`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppecv_00x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z)) || (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z) && std.math.isIntegral(x+y) && std.math.isIntegral(x+z)\
    \ && std.math.isIntegral(y+z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpen8hhkn7.d(28): Error: undefined identifier `isIntegral` in
    module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28):
    Error: undefined identifier `isIntegral` in module `std.math`, did you mean template
    `isIntegral(T)`?\n/tmp/tmpen8hhkn7.d(28): Error: undefined identifier `isIntegral`
    in module `std.math`, did you mean template `isIntegral(T)`?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpen8hhkn7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpamapzt67.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpamapzt67.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe8xk8nsv.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpe8xk8nsv.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpe8xk8nsv.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpe8xk8nsv.d(30): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8xk8nsv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.rem(x,y) == 0.0) && (std.math.rem(y,z)\
    \ == 0.0) && (std.math.rem(x,z) == 0.0));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnrx2zpng.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpnrx2zpng.d(28): Error: undefined identifier `rem` in module
    `std.math`\n/tmp/tmpnrx2zpng.d(28): Error: undefined identifier `rem` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnrx2zpng.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z)) || (std.int(z) == std.int(x)));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps3l3dj_b.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmps3l3dj_b.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmps3l3dj_b.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmps3l3dj_b.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmps3l3dj_b.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmps3l3dj_b.d(28): Error: identifier expected
    following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3l3dj_b.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int._toInt(x) == std.int._toInt(y)\
    \ && std.int._toInt(x) == std.int._toInt(z);\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptvc535wy.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmptvc535wy.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmptvc535wy.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmptvc535wy.d(28): Error:
    identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptvc535wy.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isInt.any(std.math.isInt.all([std.math.isIn\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl0opw_3y.d(29): Error: found `unittest` when expecting `,`\n/tmp/tmpl0opw_3y.d(44):
    Error: found `void` when expecting `,`\n/tmp/tmpl0opw_3y.d(44): Error: found `{`
    when expecting `,`\n/tmp/tmpl0opw_3y.d(44): Error: expression expected, not `}`\n/tmp/tmpl0opw_3y.d(44):
    Error: found `End of File` when expecting `,`\n/tmp/tmpl0opw_3y.d(28): Error:
    found `End of File` when expecting `]`\n/tmp/tmpl0opw_3y.d(44): Error: found `End
    of File` when expecting `,`\n/tmp/tmpl0opw_3y.d(44): Error: found `End of File`
    when expecting `)`\n/tmp/tmpl0opw_3y.d(44): Error: found `End of File` when expecting
    `,`\n/tmp/tmpl0opw_3y.d(44): Error: found `End of File` when expecting `)`\n/tmp/tmpl0opw_3y.d(44):
    Error: found `End of File` when expecting `,`\n/tmp/tmpl0opw_3y.d(28): Error:
    found `End of File` when expecting `]`\n/tmp/tmpl0opw_3y.d(44): Error: found `End
    of File` when expecting `,`\n/tmp/tmpl0opw_3y.d(44): Error: found `End of File`
    when expecting `)`\n/tmp/tmpl0opw_3y.d(44): Error: found `End of File` when expecting
    `,`\n/tmp/tmpl0opw_3y.d(44): Error: found `End of File` when expecting `)`\n/tmp/tmpl0opw_3y.d(44):
    Error: found `End of File` when expecting `,`\n/tmp/tmpl0opw_3y.d(28): Error:
    found `End of File` when expecting `]`\n/tmp/tmpl0opw_3y.d(44): Error: found `End
    of File` when expecting `,`\n/tmp/tmpl0opw_3y.d(44): Error: found `End of File`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0opw_3y.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if (std.math.isnan(x)\
    \ || std.math.isnan(y) || std.math.isnan(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || std.math.isinf(y) || std.math.isinf(z))\n    {\n        return result;\n\
    \    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y) || std.math.isinf(z))\n\
    \    {\n        return result;\n    }\n    \n    if (std.math.isinf(x) || std.math.isinf(y)\
    \ || std.math.isinf(z))\n    {\n        return result;\n    }\n    \n    if (std.math.isinf(x)\
    \ || st\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa30zrtz0.d(106): Error: found `unittest` when expecting `)`\n/tmp/tmpa30zrtz0.d(121):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa30zrtz0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInfinite(x) || std.math.isInfinite(y)\
    \ || std.math.isInfinite(z) || std.math.isInfinite(x+y) || std.math.isInfinite(x+z)\
    \ || std.math.isInfinite(y+z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwl6ug8kd.d(28): Error: undefined identifier `isInfinite` in
    module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpwl6ug8kd.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpwl6ug8kd.d(28): Error: undefined
    identifier `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X
    x) if (isFloatingPoint!X)`?\n/tmp/tmpwl6ug8kd.d(28): Error: undefined identifier
    `isInfinite` in module `std.math`, did you mean template `isInfinity(X)(X x) if
    (isFloatingPoint!X)`?\n/tmp/tmpwl6ug8kd.d(28): Error: undefined identifier `isInfinite`
    in module `std.math`, did you mean template `isInfinity(X)(X x) if (isFloatingPoint!X)`?\n/tmp/tmpwl6ug8kd.d(28):
    Error: undefined identifier `isInfinite` in module `std.math`, did you mean template
    `isInfinity(X)(X x) if (isFloatingPoint!X)`?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwl6ug8kd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x) == std.int(x + y)) && (std.int(y)\
    \ == std.int(y + z)) && (std.int(z) == std.int(z + x)));\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_s07fq7n.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmp_s07fq7n.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmp_s07fq7n.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmp_s07fq7n.d(28): Error:
    identifier expected following `.`, not `int`\n/tmp/tmp_s07fq7n.d(28): Error: identifier
    expected following `.`, not `int`\n/tmp/tmp_s07fq7n.d(28): Error: identifier expected
    following `.`, not `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_s07fq7n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe8xk8nsv.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpe8xk8nsv.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpe8xk8nsv.d(28):
    Error: identifier expected following `.`, not `int`\n/tmp/tmpe8xk8nsv.d(30): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8xk8nsv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpamapzt67.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpamapzt67.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z))\n        return false;\n    \n    if (std.math.isinf(x) ||\
    \ std.math.isinf(y) || std.math.isinf(z))\n        return false;\n    \n    if\
    \ (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n        return\
    \ false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && !std.math.isinf(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z))\n        return false;\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && !std.math.isinf(z))\n        return false;\n    \n\
    \    if (std.math.isinf(x) && std.math.isinf(y) && std.math.isinf(z))\n      \
    \  return false;\n    \n    if (std.math.isinf(x) && std.math.isinf(y) && !std.math.isinf(z))\n\
    \        return false;\n    \n    if (std.math.isinf(x) && !std.math.isinf(y)\
    \ && std.math.isinf(z))\n        return false;\n    \n    if (std.math.isinf(x)\
    \ && !std.math.isinf(y) && !std.math.isinf(z))\n        return false;\n    \n\
    \    if (x == y && y == z && z == 0)\n        return true;\n    \n    if (x ==\
    \ y && y == z && z != 0)\n        return false;\n    \n    if (x == y && y !=\
    \ z && z == 0)\n        return true;\n    \n    if (x == y && y != z && z != 0)\n\
    \        return false;\n    \n    if (x == y && y == z && z != 0)\n        return\
    \ false;\n    \n    if (x == y && y == z && z != 0)\n        return false;\n \
    \   \n    if (x == y && y == z && z != 0)\n        return false;\n    \n    if\
    \ (x == y && y == z && z != 0)\n        return false;\n    \n    if (x == y &&\
    \ y == z && z != 0)\n        return false;\n    \n    if (x == y && y == z &&\
    \ z != 0)\n        return false;\n    \n    if (x == y && y == z && z != 0)\n\
    \        return false;\n    \n    if (x == y && y == z && z != 0)\n        return\
    \ false;\n    \n    if (x == y && y == z && z != 0)\n        return false;\n \
    \   \n    if (x == y && y == z && z != 0)\n        return false;\n    \n    if\
    \ (x == y && y == z && z != 0)\n        return false;\n    \n    if (x == y &&\
    \ \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp89vb8xz3.d(104): Error: expression expected, not `unittest`\n/tmp/tmp89vb8xz3.d(105):
    Error: found `{` when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp89vb8xz3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x) == std.int(y) + std.int(z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpamapzt67.d(28): Error: identifier expected following `.`, not `int`\n/tmp/tmpamapzt67.d(28):
    Error: identifier expected following `.`, not `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpamapzt67.d", "-I/tmp"]\n'''
  stdout: b''
