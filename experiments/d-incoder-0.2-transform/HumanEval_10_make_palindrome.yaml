name: HumanEval_10_make_palindrome
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Find the shortest palindrome\
  \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
  \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
  \ the end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\"\
  )\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring\
  \ make_palindrome(string string) \n"
tests: "unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\"\
  ) == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
  jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
completions: ["{\n    string reverse = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(0, i);\n        reverse += temp;\n      \
    \  \n        if(temp == temp)\n        {\n            prefix = string.substr(0,\
    \ i);\n            suffix = string.substr(i, string.length());\n        }\n  \
    \  }\n    \n    string result = prefix + reverse + suffix;\n    \n    return result;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(i, 1);\n        reverse += temp;\n        \n   \
    \     if(temp == string[i])\n        {\n            prefix = string.substr(0,\
    \ i);\n            suffix = string.substr(i + 1, string.length() - i);\n     \
    \   }\n    }\n    \n    return prefix + reverse + suffix;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for \"cat\" because \"cat\" is not a palindrome.\n\
    <|/ c |>\n<| c |>\nI believe this algorithm is correct. As I understand it, you\
    \ take the first letter of the string and reverse it (so \"cat\" becomes \"tac\"\
    ) and then you append it to the end of the string \"tac\" which becomes \"tacc\"\
    , which becomes \"taccc\", which becomes \"taccca\", which becomes \"tacccaa\"\
    , which becomes \"tacccaaa\", which becomes \"tacccaaaa\", which becomes \"tacccaaaaac\"\
    , which becomes \"tacccaaaaaca\", which becomes \"tacccaaaaacaa\", which becomes\
    \ \"tacccaaaaacaaa\", which becomes \"tacccaaaaacaaaa\", which becomes \"tacccaaaaacaaaac\"\
    , which becomes \"tacccaaaaacaaaaca\", which becomes \"tacccaaaaacaaaacaa\", which\
    \ becomes \"tacccaaaaacaaaacaaa\", which becomes \"tacccaaaaacaaaacaaaac\", which\
    \ becomes \"tacccaaaaacaaaacaaaaca\", which becomes \"tacccaaaaacaaaacaaaacaa\"\
    , which becomes \"tacccaaaaacaaaacaaaacaaa\", which becomes \"tacccaaaaacaaaacaaaacaaaac\"\
    , which becomes \"tacccaaaaacaaaacaaaacaaaaca\", which becomes \"tacccaaaaacaaaacaaaacaaaacaa\"\
    , which becomes \"tacccaaaaacaaaacaaaacaaaacaaa\", which becomes \"tacccaaaaacaaaacaaaacaaaacaaaac\"\
    , which becomes \"tacccaaaaacaaaacaaaacaaaacaaaaca\", which becomes \"tacccaaaaacaa",
  "{\n    int len = string.length();\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        if(string[i] != reverse[i])\n\
    \        {\n            return string;\n        }\n    }\n    \n    return string;\n\
    }", "{\n    string result = string;\n    string reverse = \"\";\n    int length\
    \ = string.length();\n    int i = 0;\n    \n    while(i < length/2)\n    {\n \
    \       reverse += string[i];\n        i++;\n    }\n    \n    while(i < length)\n\
    \    {\n        reverse += string[i];\n        i++;\n    }\n    \n    while(i\
    \ < length)\n    {\n        reverse += string[i];\n        i++;\n    }\n    \n\
    \    while(i < length)\n    {\n        reverse += string[i];\n        i++;\n \
    \   }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n   \
    \     i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n    {\n        reverse += string[i];\n\
    \        i++;\n    }\n    \n    while(i < length)\n", "{\n    string result =\
    \ string;\n    string reverse = \"\";\n    int length = string.length();\n   \
    \ for(int i = 0; i < length; i++)\n    {\n        reverse += string[i];\n    }\n\
    \    for(int i = 0; i < length; i++)\n    {\n        if(string[i] != reverse[i])\n\
    \        {\n            result = result + reverse;\n            break;\n     \
    \   }\n    }\n    return result;\n}\n/*\n Find the longest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n \
    \   \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring\
    \ make_palindrome(string string) \n{\n    string result = string;\n    string\
    \ reverse = \"\";\n    int length = string.length();\n    for(int i = 0; i < length;\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != reverse[i])\n        {\n            result\
    \ = result + reverse;\n            break;\n        }\n    }\n    return result;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string result = string;\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[i];\n \
    \   }\n    for(int i = 0; i < length; i++)\n    {\n        if(string[i] != reverse[i])\n\
    \        {\n            result = result + reverse;\n            break;\n     \
    \   }\n    }\n    return result;\n}\n/*\n Find the longest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    >>> make_palindro", "{\n    string reverse = \"\";\n    int start = 0;\n\
    \    int end = 0;\n    bool found = false;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            found = true;\n            end = i;\n            break;\n\
    \        }\n    }\n    if(!found)\n    {\n        return string;\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \    }\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            reverse = reverse + string[i];\n        }\n    }\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \    }\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            reverse = reverse + string[i];\n        }\n    }\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \    }\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            reverse = reverse + string[i];\n        }\n    }\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \    }\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            reverse = reverse + string[i];\n        }\n    }\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n", "{\n    string postfix = \"\";\n    string prefix =\
    \ \"\";\n    string reverse = \"\";\n    \n    int length = string.length();\n\
    \    \n    for (int i = 0; i < length; i++)\n    {\n        if (string[i] == string[length\
    \ - 1 - i])\n        {\n            postfix += string[i];\n        }\n       \
    \ else\n        {\n            prefix += string[i];\n        }\n    }\n    \n\
    \    reverse = reverse(prefix);\n    \n    return postfix + reverse;\n}", "{\n\
    \    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            reverse = reverse + string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            result = result + prefix + reverse + suffix;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    int len = string.length();\n   \
    \ string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < len; i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        reverse += temp;\n        string temp2 = string.substr(len - i\
    \ - 1, 1);\n        suffix += temp2;\n    }\n    \n    string result = prefix\
    \ + reverse + suffix;\n    return result;\n}", "{\n    string reverse = \"\";\n\
    \    string prefix = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i\
    \ < string.length())\n    {\n        while(j < string.length() && string[i] !=\
    \ string[j])\n        {\n            j++;\n        }\n        \n        reverse\
    \ += string[i];\n        \n        while(j < string.length() && string[i] == string[j])\n\
    \        {\n            j++;\n        }\n        \n        prefix += string[i];\n\
    \        \n        i = j;\n    }\n    \n    return prefix + reverse;\n}", "{\n\
    \    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        reverse += string[i];\n    }\n    string\
    \ prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n        prefix +=\
    \ string[i];\n    }\n    string postfix = \"\";\n    for(int i = 0; i < length;\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    string palindrome = prefix\
    \ + reverse + postfix;\n    return palindrome;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        reverse += string[i];\n    }\n    string prefix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        prefix += string[i];\n    }\n    string\
    \ postfix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    string palindrome = prefix + reverse + postfix;\n\
    \    return palindrome;\n}\n/*\n Find the longest palindrome that begins with\
    \ a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    >>>\
    \ make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\
    \n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[i];\n \
    \   }\n    string prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n\
    \        prefix += string[i];\n    }\n    string postfix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        postfix += string[i];\n    }\n    string ",
  "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++) {\n        string temp\
    \ = string.substr(i, 1);\n        reverse += temp;\n        \n        if(temp\
    \ == string[i]) {\n            prefix += temp;\n            suffix += temp;\n\
    \        }\n    }\n    \n    string result = prefix + reverse + suffix;\n    \n\
    \    return result;\n}", "{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse = reverse + string[i];\n\
    \    }\n    string result = string;\n    for(int i = 0; i < length; i++)\n   \
    \ {\n        if(string[i] != reverse[i])\n        {\n            result = result\
    \ + string[i];\n            break;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThe question was about how\
    \ to find the longest palindrome that begins with a given string. Your solution\
    \ finds the longest palindrome that ends with a given string.\n<|/ c |>\n<| c\
    \ |>\nThe question was about how to find the shortest palindrome that begins with\
    \ a given string. Your solution finds the longest palindrome that ends with a\
    \ given string.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    int len = string.length();\n\
    \    int max_len = len - 1;\n    int max_palindrome = 0;\n    string palindrome\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        prefix = string.substr(0, i);\n       \
    \ suffix = string.substr(i, len);\n        \n        if(std.string.isPalindrome(suffix))\n\
    \        {\n            int palindrome_len = std.string.length(suffix);\n    \
    \        \n            if(palindrome_len > max_len)\n            {\n         \
    \       max_len = palindrome_len;\n                max_palindrome = i;\n     \
    \       }\n        }\n    }\n    \n    string reversed_prefix = \"\";\n    for(int\
    \ i = 0; i < max_len; i++)\n    {\n        reversed_prefix += string.substr(i,\
    \ 1);\n    }\n    \n    return prefix + reversed_prefix + suffix;\n}", "{\n  \
    \  string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(0, i);\n        \n        if(temp == temp)\n        {\n    \
    \        reverse = reverse + temp;\n            \n            for(int j = i; j\
    \ < string.length(); j++)\n            {\n                string temp2 = string.substr(j,\
    \ 1);\n                \n                if(temp2 == temp2)\n                {\n\
    \                    suffix = suffix + \"-\" + temp2;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    \n    string result =\
    \ prefix + reverse + suffix;\n    \n    return result;\n}", "{\n    int len =\
    \ string.length();\n    int max_len = len - 1;\n    int max_palindrome = 0;\n\
    \    int max_palindrome_len = 0;\n    string palindrome = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        prefix = string.substr(0, i);\n        suffix = string.substr(i,\
    \ len);\n        \n        if(isPalindrome(prefix) && isPalindrome(suffix))\n\
    \        {\n            int palindrome_len = prefix.length() + suffix.length();\n\
    \            \n            if(palindrome_len > max_palindrome_len)\n         \
    \   {\n                max_palindrome_len = palindrome_len;\n                max_palindrome\
    \ = i;\n            }\n        }\n    }\n    \n    return string.substr(0, max_palindrome)\
    \ + string.substr(max_palindrome + max_palindrome_len);\n}", "{\n    string reverse\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse += string[i];\n    }\n    string prefix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        prefix += string[i];\n        if(string[i]\
    \ == reverse[length - 1 - i])\n        {\n            break;\n        }\n    }\n\
    \    return prefix + reverse;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I believe it can be optimized a little more. For example, you can start\
    \ from the end and work backwards, instead of starting from the beginning and\
    \ working forwards. Also, you can start from the end and work backwards, instead\
    \ of starting from the beginning and working forwards. And you can start from\
    \ the end and work backwards, instead of starting from the beginning and working\
    \ forwards. And so on. Also, you can start from the end and work backwards, instead\
    \ of starting from the beginning and working forwards. And so on. Also, you can\
    \ start from the end and work backwards, instead of starting from the beginning\
    \ and working forwards. And so on. Also, you can start from the end and work backwards,\
    \ instead of starting from the beginning and working forwards. And so on. Also,\
    \ you can start from the end and work backwards, instead of starting from the\
    \ beginning and working forwards. And so on. Also, you can start from the end\
    \ and work backwards, instead of starting from the beginning and working forwards.\
    \ And so on. Also, you can start from the end and work backwards, instead of starting\
    \ from the beginning and working forwards. And so on. Also, you can start from\
    \ the end and work backwards, instead of starting from the beginning and working\
    \ forwards. And so on. Also, you can start from the end and work backwards, instead\
    \ of starting from the beginning and working forwards. And so on. Also, you can\
    \ start from the end and work backwards, instead of starting from the beginning\
    \ and working forwards. And so on. Also, you can start from the end and work backwards,\
    \ instead of starting from the beginning and working forwards. And so on. Also,\
    \ you can start from the end and work backwards, instead of starting from the\
    \ beginning and working forwards. And so on. Also, you can start from the end\
    \ and work backwards, instead of starting from the beginning and working forwards.\
    \ And so on. Also, you can start from the end and work backwards, instead of starting\
    \ from the beginning and working forwards. And so on. Also, you can start from\
    \ the end and work backwards, instead of starting from the beginning and working\
    \ forwards. And so on. Also, you can start from the end and work backwards, instead\
    \ of starting from the beginning and working forwards. And so on. Also, you can\
    \ start from the end and work backwards, instead of starting from the beginning\
    \ and working forwards. And so on. Also, you can start from the end and work backwards,\
    \ instead of starting from the beginning and working forwards. And so on. Also,\
    \ you can ", "{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++) \n    {\n        reverse += string[length\
    \ - 1 - i];\n    }\n    string result = string + reverse;\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work if\
    \ the string starts with a palindrome. For example, `make_palindrome(\"aba\")`\
    \ returns `\"aba\"`, not `\"aba\"`.\n<|/ c |>\n<| c |>\n: I agree, my algorithm\
    \ is incorrect. I've updated my answer to fix it.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer to fix the bug that I mentioned in my comment on the question.\n<|/\
    \ c |>\n<| c |>\n: I updated my answer to fix the bug that I mentioned in my comment\
    \ on the question.\n<|/ c |>\n<| c |>\n: I updated my answer to fix the bug that\
    \ I mentioned in my comment on the question.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string reverse = \"\";\n    string prefix = \"\";\n\
    \    string suffix = \"\";\n    int longest = 0;\n    int longestLength = 0;\n\
    \    int i;\n    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            longestLength++;\n\
    \        }\n        else\n        {\n            longest = i;\n            longestLength\
    \ = longestLength;\n        }\n    }\n    for(i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            reverse = reverse + string[i];\n        }\n    }\n    for(i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    string result = reverse + prefix + suffix;\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post - you can always comment on\
    \ your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nI agree with you. However I believe this answer does answer\
    \ the question as asked.\n<|/ c |>\n<| c |>\nI agree with you. However I believe\
    \ this answer does answer the question as asked.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. However I believe this answer does answer the question as asked.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. However I believe this answer does answer the\
    \ question as asked.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string reverse = \"\";\n   \
    \ int start = 0;\n    int end = string.length() - 1;\n    while(start < end)\n\
    \    {\n        if(string[start] == string[end])\n        {\n            reverse\
    \ = reverse + string[start];\n            start++;\n            end--;\n     \
    \   }\n        else\n        {\n            reverse = reverse + string[start]\
    \ + string[end];\n            start++;\n            end--;\n        }\n    }\n\
    \    return reverse;\n}", "{\n    string reverse = \"\";\n    string prefix =\
    \ \"\";\n    string suffix = \"\";\n    string longest = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        prefix = string.substr(0, i);\n\
    \        suffix = string.substr(i, string.length());\n        \n        if(isPalindrome(suffix))\n\
    \        {\n            longest = prefix + suffix;\n            reverse = reverse\
    \ + longest;\n        }\n    }\n    \n    return reverse;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string[i];\n\
    \        reverse += temp;\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string[i];\n        prefix += temp;\n   \
    \ }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string[i];\n        suffix += temp;\n    }\n    \n    string result =\
    \ prefix + reverse + suffix;\n    return result;\n}", "{\n    string reverse =\
    \ \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    int i = 0;\n\
    \    int j = 0;\n    int length = 0;\n    \n    length = string.length();\n  \
    \  \n    while(i < length) \n    {\n        while(j < length && string[i] == string[j])\
    \ \n        {\n            j++;\n        }\n        \n        if(j == length)\
    \ \n        {\n            reverse = reverse + string[i];\n            i++;\n\
    \        }\n        else \n        {\n            reverse = reverse + string[i]\
    \ + string[j];\n            i++;\n            j++;\n        }\n    }\n    \n \
    \   length = string.length();\n    \n    while(i < length) \n    {\n        while(j\
    \ < length && string[i] == string[j]) \n        {\n            j++;\n        }\n\
    \        \n        if(j == length) \n        {\n            suffix = suffix +\
    \ string[i];\n            i++;\n        }\n        else \n        {\n        \
    \    suffix = suffix + string[i] + string[j];\n            i++;\n            j++;\n\
    \        }\n    }\n    \n    length = string.length();\n    \n    while(i < length)\
    \ \n    {\n        while(j < length && string[i] == string[j]) \n        {\n \
    \           j++;\n        }\n        \n        if(j == length) \n        {\n \
    \           prefix = prefix + string[i];\n            i++;\n        }\n      \
    \  else \n        {\n            prefix = prefix + string[i] + string[j];\n  \
    \          i++;\n            j++;\n        }\n    }\n    \n    return prefix +\
    \ reverse + suffix;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            prefix += string[i];\n        }\n        else\n        {\n\
    \            suffix += string[i];\n        }\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse += string[i];\n        }\n    }\n\
    \    \n    return prefix + reverse + suffix;\n}", "{\n    string result = \"\"\
    ;\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n  \
    \  {\n        if(string[i] == string[length - 1 - i])\n        {\n           \
    \ result += string[i];\n        }\n    }\n    string reverse = reverse(string(result));\n\
    \    string result = string + reverse;\n    return result;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ string[string.length() - 1 - i])\n        {\n            reverse = reverse +\
    \ string[i];\n            prefix = prefix + string[i];\n            suffix = suffix\
    \ + string[i];\n        }\n        else\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string result = \"\";\n    int i = 0;\n    int j = string.size() -\
    \ 1;\n    while (i < j)\n    {\n        if (string[i] != string[j])\n        {\n\
    \            result += string[i];\n            i++;\n            j--;\n      \
    \  }\n        else\n        {\n            i++;\n            j--;\n        }\n\
    \    }\n    result += string[j];\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n            reverse = reverse\
    \ + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n            reverse = reverse\
    \ + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n            reverse = reverse\
    \ + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n            reverse = reverse\
    \ + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n            reverse = reverse\
    \ + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n            reverse = reverse\
    \ + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string", "{\n    string result = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(0, i);\n        string reverse = std.string.reverse(temp);\n\
    \        \n        if(temp == reverse)\n        {\n            prefix = temp;\n\
    \            suffix = reverse;\n        }\n        else\n        {\n         \
    \   result += temp + reverse;\n        }\n    }\n    \n    return result + prefix\
    \ + suffix;\n}\n/*\n Find the longest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(0, i);\n        string reverse = std.string.reverse(temp);\n\
    \        \n        if(temp == reverse)\n        {\n            prefix = temp;\n\
    \            suffix = reverse;\n        }\n        else\n        {\n         \
    \   result += temp + reverse;\n        }\n    }\n    \n    return result + prefix\
    \ + suffix;\n}\n/*\n Find the longest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(0, i);\n        string reverse = std.string.reverse(temp);\n\
    \        \n        if(temp == reverse)\n        {\n            prefix = temp;\n\
    \            suffix = reverse;\n        }\n        else\n        {", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ string[string.length() - 1 - i])\n        {\n            reverse = reverse +\
    \ string[i];\n            prefix = prefix + string[i];\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string reverse = \"\";\n    int len = string.length();\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        reverse += string[len - 1 - i];\n    }\n\
    \    string result = string + reverse;\n    return result;\n}\n/*\n Find the longest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int len = string.length();\n    for(int i = 0; i < len; i++)\n    {\n     \
    \   reverse += string[len - 1 - i];\n    }\n    string result = string + reverse;\n\
    \    return result;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int len = string.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[len - 1 - i];\n    }\n    string\
    \ result = string + reverse;\n    return result;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int len = string.length", "{\n    string reverse = \"\";\n    int length =\
    \ string.length();\n    for(int i = 0; i < length; i++)\n    {\n        reverse\
    \ += string[length - 1 - i];\n    }\n    string prefix = \"\";\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        prefix += string[i];\n    }\n    return\
    \ prefix + reverse;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>", "{\n    string\
    \ reverse = \"\";\n    int length = string.length();\n    for(int i = 0; i < length;\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    string palindrome = string;\n\
    \    string prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n     \
    \   prefix += string[i];\n        if(string[i] == reverse[length - 1 - i])\n \
    \       {\n            palindrome += prefix;\n            prefix = \"\";\n   \
    \     }\n    }\n    return palindrome;\n}\n</code>\n<|/ a tags=c++,algorithm,string\
    \ |>\n<| c |>\nThis code doesn't work. Try it on \"abba\". It returns \"abba\"\
    , not \"abb\".\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\
    \ :)\n<|/ c |>\n<| c |>\nThis code doesn't work. Try it on \"abba\". It returns\
    \ \"abba\", not \"abb\".\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out. :)\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(0, i);\n        \n        if(temp == temp)\n\
    \        {\n            prefix = temp;\n            suffix = string.substr(i,\
    \ string.length() - i);\n        }\n        else\n        {\n            reverse\
    \ = reverse + temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        \n        if(temp\
    \ == temp)\n        {\n            reverse = reverse + temp;\n        }\n    \
    \    else\n        {\n            reverse = reverse + temp;\n        }\n    }\n\
    \    \n    result = prefix + reverse + suffix;\n    \n    return result;\n}",
  "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    int length = string.length();\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  \n        if(temp == \"\")\n        {\n            reverse = reverse + temp;\n\
    \            prefix = prefix + temp;\n            suffix = suffix + temp;\n  \
    \      }\n        else\n        {\n            reverse = reverse + temp;\n   \
    \         suffix = suffix + temp;\n        }\n    }\n    \n    string palindrome\
    \ = prefix + reverse + suffix;\n    \n    return palindrome;\n}", "{\n    string\
    \ reverse = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i < string.length())\n\
    \    {\n        if(string[i] == string[j])\n        {\n            i++;\n    \
    \        j++;\n        }\n        else\n        {\n            reverse = reverse\
    \ + string[i];\n            i++;\n            j--;\n        }\n    }\n    \n \
    \   return reverse + string;\n}", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    string longest = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix = prefix\
    \ + string[i];\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            suffix = suffix + string[i];\n        }\n    }\n    \n   \
    \ longest = prefix + reverse + suffix;\n    \n    return longest;\n}", "{\n  \
    \  string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string;\n        temp = temp[i];\n        reverse = reverse + temp;\n    }\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string;\n        temp = temp[i];\n        prefix = prefix + temp;\n    }\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string;\n        temp = temp[i];\n        suffix = suffix + temp;\n    }\n\
    \    \n    string result = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  result = result + temp;\n    }\n    \n    result = result + reverse + prefix\
    \ + suffix;\n    \n    return result;\n}", "{\n    string result = string;\n \
    \   string reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != reverse[i])\n        {\n            result\
    \ = result + reverse[i];\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++) \n    {\n        reverse = reverse + string[i];\n    }\n\
    \    string prefix = \"\";\n    for(int i = 0; i < length; i++) \n    {\n    \
    \    prefix = prefix + string[i];\n    }\n    string postfix = \"\";\n    for(int\
    \ i = 0; i < length; i++) \n    {\n        postfix = postfix + string[i];\n  \
    \  }\n    if(postfix != reverse && postfix != prefix && postfix != reverse) \n\
    \    {\n        string result = prefix + reverse + postfix;\n        return result;\n\
    \    }\n    else \n    {\n        return \"\";\n    }\n}\n</code>\n<|/ a tags=algorithm,c++,string\
    \ |>\n<| c |>\nThis doesn't work if the string starts with a palindrome. For example,\
    \ `make_palindrome(\"abba\")` returns `\"abba\"`.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that and fixed it now. Thanks.\n<|/ c |>\n<| a tags=algorithm,c++,string |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n  \
    \  while(i < j)\n    {\n        if(string[i] != string[j])\n        {\n      \
    \      break;\n        }\n        reverse += string[i];\n        i++;\n      \
    \  j--;\n    }\n    string result = string + reverse;\n    return result;\n}\n\
    /*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n\
    \    while(i < j)\n    {\n        if(string[i] != string[j])\n        {\n    \
    \        break;\n        }\n        reverse += string[i];\n        i++;\n    \
    \    j--;\n    }\n    string result = string + reverse;\n    return result;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n\
    \    while(i < j)\n    {\n        if(string[i] != string[j])\n        {\n    \
    \        break;\n        }\n        reverse += string[i];\n        i++;\n    \
    \    j--;\n    }\n    string result = string + reverse;\n    return result;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make", "{\n    string postfix = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n \
    \   }\n    string reverse = reverse(postfix);\n    string result = postfix + reverse;\n\
    \    return result;\n}", "{\n    string result = string;\n    string reverse =\
    \ \"\";\n    for(int i = string.length() - 1; i >= 0; i--)\n    {\n        reverse\
    \ += string[i];\n    }\n    for(int i = string.length() - 1; i >= 0; i--)\n  \
    \  {\n        if(string[i] != reverse[i])\n        {\n            result = result\
    \ + reverse[i];\n            break;\n        }\n    }\n    return result;\n}",
  "{\n    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        reverse += string[i];\n    }\n    string\
    \ prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n        prefix +=\
    \ string[i];\n    }\n    string postfix = reverse(prefix);\n    string result\
    \ = prefix + postfix;\n    return result;\n}", "{\n    string reverse = \"\";\n\
    \    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \        else\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n        else\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string reverse = \"\";\n    int i = 0;\n    int j = string.size()\
    \ - 1;\n    while (i < j) {\n        reverse += string[i];\n        i++;\n   \
    \     j--;\n    }\n    reverse += string[j];\n    return reverse;\n}", "{\n  \
    \  string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        \n        if(temp == string.substr(string.length()\
    \ - i, 1))\n        {\n            reverse = reverse + temp;\n            \n \
    \           if(i == 0)\n            {\n                prefix = string;\n    \
    \            suffix = temp;\n            }\n            else\n            {\n\
    \                prefix = prefix + temp;\n                suffix = suffix + \"\
    -\" + temp;\n            }\n        }\n    }\n    \n    return prefix + reverse\
    \ + suffix;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n/*\n Find\
    \ the shortest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n\
    \        \n        if(temp == string.substr(string.length() - i, 1))\n       \
    \ {\n            reverse = reverse + temp;\n            \n            if(i ==\
    \ 0)\n            {\n                prefix = string;\n                suffix\
    \ = temp;\n            }\n            else\n            {\n                prefix\
    \ = prefix + temp;\n                suffix = suffix + \"-\" + temp;\n        \
    \    }\n        }\n    }\n    \n    return prefix + reverse + suffix;\n}\n</code>\n\
    <|/ a tags=string,c++ |>\n<| c |>\nPlease add some explanation to your answer\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n/*\n Find the shortest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n \
    \   \"catac\"\n    >>> make_palindrome(\"", "{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    for(int i = 0; i < len; i++)\n    {\n       \
    \ reverse += string[i];\n    }\n    string prefix = string.substr(0, len - 1);\n\
    \    string suffix = string.substr(len - 1, len);\n    string palindrome = prefix\
    \ + reverse + suffix;\n    return palindrome;\n}", "{\n    string reverse = \"\
    \";\n    int start = 0;\n    int end = string.length() - 1;\n    while(start <\
    \ end)\n    {\n        if(string[start] == string[end])\n        {\n         \
    \   reverse = reverse + string[start];\n            start++;\n            end--;\n\
    \        }\n        else\n        {\n            reverse = reverse + string[start]\
    \ + string[end];\n            start++;\n            end--;\n        }\n    }\n\
    \    return reverse;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int start = 0;\n    int end = string.length()\
    \ - 1;\n    while(start < end)\n    {\n        if(string[start] == string[end])\n\
    \        {\n            reverse = reverse + string[start];\n            start++;\n\
    \            end--;\n        }\n        else\n        {\n            reverse =\
    \ reverse + string[start] + string[end];\n            start++;\n            end--;\n\
    \        }\n    }\n    return reverse;\n}\n/*\n Find the longest palindrome that\
    \ begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    - Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int start = 0;\n    int end = string.length() - 1;\n    while(start < end)\n\
    \    {\n        if(string[start] == string[end])\n        {\n            reverse\
    \ = reverse + string[start];\n            start++;\n            end--;\n     \
    \   }\n        else\n        {\n            reverse = reverse + string[start]\
    \ + string[end];\n            start++;\n            end--;\n        }\n", "{\n\
    \    string reverse = \"\";\n    string longest = \"\";\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        string prefix = string.substr(0,\
    \ i);\n        string suffix = string.substr(i, string.length());\n        \n\
    \        if(isPalindrome(prefix) && isPalindrome(suffix))\n        {\n       \
    \     longest = prefix + suffix;\n            reverse = reverse + longest;\n \
    \       }\n    }\n    \n    return reverse;\n}", "{\n    string postfix = \"\"\
    ;\n    string prefix = \"\";\n    string reverse = \"\";\n    int length = string.length();\n\
    \    \n    for (int i = 0; i < length; i++)\n    {\n        if (string[i] == string[length\
    \ - 1 - i])\n        {\n            postfix = postfix + string[i];\n        }\n\
    \    }\n    \n    for (int i = 0; i < length; i++)\n    {\n        if (string[i]\
    \ == string[length - 1 - i])\n        {\n            reverse = reverse + string[i];\n\
    \        }\n    }\n    \n    string result = postfix + reverse;\n    \n    return\
    \ result;\n}", "{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[i];\n \
    \   }\n    string prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n\
    \        prefix += string[i];\n    }\n    string postfix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        postfix += string[i];\n    }\n    string\
    \ palindrome = prefix + reverse + postfix;\n    return palindrome;\n}", "{\n \
    \   string result = string;\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        if(string[i] != string[length - 1 - i])\n\
    \        {\n            string temp = string;\n            string temp2 = string;\n\
    \            string temp3 = string;\n            string temp4 = string;\n    \
    \        string temp5 = string;\n            string temp6 = string;\n        \
    \    string temp7 = string;\n            string temp8 = string;\n            string\
    \ temp9 = string;\n            string temp10 = string;\n            string temp11\
    \ = string;\n            string temp12 = string;\n            string temp13 =\
    \ string;\n            string temp14 = string;\n            string temp15 = string;\n\
    \            string temp16 = string;\n            string temp17 = string;\n  \
    \          string temp18 = string;\n            string temp19 = string;\n    \
    \        string temp20 = string;\n            string temp21 = string;\n      \
    \      string temp22 = string;\n            string temp23 = string;\n        \
    \    string temp24 = string;\n            string temp25 = string;\n          \
    \  string temp26 = string;\n            string temp27 = string;\n            string\
    \ temp28 = string;\n            string temp29 = string;\n            string temp30\
    \ = string;\n            string temp31 = string;\n            string temp32 =\
    \ string;\n            string temp33 = string;\n            string temp34 = string;\n\
    \            string temp35 = string;\n            string temp36 = string;\n  \
    \          string temp37 = string;\n            string temp38 = string;\n    \
    \        string temp39 = string;\n            string temp40 = string;\n      \
    \      string temp41 = string;\n            string temp42 = string;\n        \
    \    string temp43 = string;\n            string temp44 = string;\n          \
    \  string temp45 = string;\n            string temp46 = string;\n            string\
    \ temp47 = string;\n            string temp48 = string;\n            string temp49\
    \ = string;\n            string temp50 = string;\n            string temp51 =\
    \ string;\n            string temp52 = string;\n            string temp53 = string;\n\
    \            string temp54 = string;\n            string temp55 = string;\n  \
    \          string temp56 = string;\n            string temp57 = string;\n    \
    \        string temp58 = string;\n            string temp59 = string;\n      \
    \      string temp60 = string;\n            string temp61 = string;\n        \
    \    string temp62 = string;\n            string temp63 = string;\n          \
    \  string temp64 = string;\n            string temp65 = string;\n            string\
    \ temp66 = string;\n            string temp67 = string;\n            string temp68\
    \ = string;\n            string temp69 = string;\n            string temp70 =\
    \ string;\n            string ", "{\n    string reverse = \"\";\n    string longest\
    \ = \"\";\n    string longest2 = \"\";\n    string longest3 = \"\";\n    string\
    \ longest4 = \"\";\n    string longest5 = \"\";\n    string longest6 = \"\";\n\
    \    string longest7 = \"\";\n    string longest8 = \"\";\n    string longest9\
    \ = \"\";\n    string longest10 = \"\";\n    string longest11 = \"\";\n    string\
    \ longest12 = \"\";\n    string longest13 = \"\";\n    string longest14 = \"\"\
    ;\n    string longest15 = \"\";\n    string longest16 = \"\";\n    string longest17\
    \ = \"\";\n    string longest18 = \"\";\n    string longest19 = \"\";\n    string\
    \ longest20 = \"\";\n    string longest21 = \"\";\n    string longest22 = \"\"\
    ;\n    string longest23 = \"\";\n    string longest24 = \"\";\n    string longest25\
    \ = \"\";\n    string longest26 = \"\";\n    string longest27 = \"\";\n    string\
    \ longest28 = \"\";\n    string longest29 = \"\";\n    string longest30 = \"\"\
    ;\n    string longest31 = \"\";\n    string longest32 = \"\";\n    string longest33\
    \ = \"\";\n    string longest34 = \"\";\n    string longest35 = \"\";\n    string\
    \ longest36 = \"\";\n    string longest37 = \"\";\n    string longest38 = \"\"\
    ;\n    string longest39 = \"\";\n    string longest40 = \"\";\n    string longest41\
    \ = \"\";\n    string longest42 = \"\";\n    string longest43 = \"\";\n    string\
    \ longest44 = \"\";\n    string longest45 = \"\";\n    string longest46 = \"\"\
    ;\n    string longest47 = \"\";\n    string longest48 = \"\";\n    string longest49\
    \ = \"\";\n    string longest50 = \"\";\n    string longest51 = \"\";\n    string\
    \ longest52 = \"\";\n    string longest53 = \"\";\n    string longest54 = \"\"\
    ;\n    string longest55 = \"\";\n    string longest56 = \"\";\n    string longest57\
    \ = \"\";\n    string longest58 = \"\";\n    string longest59 = \"\";\n    string\
    \ longest60 = \"\";\n    string longest61 = \"\";\n    string longest62 = \"\"\
    ;\n    string longest63 = \"\";\n    string longest64 = \"\";\n    string longest65\
    \ = \"\";\n    string longest66 = \"\";\n    string longest67 = \"\";\n    string\
    \ longest68 = \"\";\n    string longest69 = \"\";\n    string longest70 = \"\"\
    ;\n    string longest71 = \"\";\n    string longest72 = \"\";\n    string longest73\
    \ = \"\";\n    string longest74 = \"\";\n    string longest75 = \"\";\n    string\
    \ longest76 = \"\";\n    string longest77 = \"\";\n    string longest78 = \"\"\
    ;\n    string longest79 = \"\";\n    string longest80 = \"\";\n    string longest81\
    \ = \"\";\n    string ", "{\n    int len = string.length();\n    string reverse\
    \ = \"\";\n    for(int i = 0; i < len/2; i++)\n        reverse += string[i];\n\
    \    reverse += string[len-1];\n    return reverse;\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string[i];\n\
    \        reverse += temp;\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string[i];\n        prefix += temp;\n   \
    \ }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string[i];\n        suffix += temp;\n    }\n    \n    string palindrome\
    \ = prefix + reverse + suffix;\n    \n    return palindrome;\n}", "{\n    string\
    \ result = string;\n    int length = string.length();\n    int i = 0;\n    int\
    \ j = 0;\n    \n    while (i < length / 2)\n    {\n        if (string[i] != string[length\
    \ - 1 - i])\n        {\n            string temp = string;\n            string\
    \ temp2 = string;\n            string temp3 = string;\n            string temp4\
    \ = string;\n            string temp5 = string;\n            string temp6 = string;\n\
    \            string temp7 = string;\n            string temp8 = string;\n    \
    \        string temp9 = string;\n            string temp10 = string;\n       \
    \     string temp11 = string;\n            string temp12 = string;\n         \
    \   string temp13 = string;\n            string temp14 = string;\n           \
    \ string temp15 = string;\n            string temp16 = string;\n            string\
    \ temp17 = string;\n            string temp18 = string;\n            string temp19\
    \ = string;\n            string temp20 = string;\n            string temp21 =\
    \ string;\n            string temp22 = string;\n            string temp23 = string;\n\
    \            string temp24 = string;\n            string temp25 = string;\n  \
    \          string temp26 = string;\n            string temp27 = string;\n    \
    \        string temp28 = string;\n            string temp29 = string;\n      \
    \      string temp30 = string;\n            string temp31 = string;\n        \
    \    string temp32 = string;\n            string temp33 = string;\n          \
    \  string temp34 = string;\n            string temp35 = string;\n            string\
    \ temp36 = string;\n            string temp37 = string;\n            string temp38\
    \ = string;\n            string temp39 = string;\n            string temp40 =\
    \ string;\n            string temp41 = string;\n            string temp42 = string;\n\
    \            string temp43 = string;\n            string temp44 = string;\n  \
    \          string temp45 = string;\n            string temp46 = string;\n    \
    \        string temp47 = string;\n            string temp48 = string;\n      \
    \      string temp49 = string;\n            string temp50 = string;\n        \
    \    string temp51 = string;\n            string temp52 = string;\n          \
    \  string temp53 = string;\n            string temp54 = string;\n            string\
    \ temp55 = string;\n            string temp56 = string;\n            string temp57\
    \ = string;\n            string temp58 = string;\n            string temp59 =\
    \ string;\n            string temp60 = string;\n            string temp61 = string;\n\
    \            string temp62 = string;\n            string temp63 = string;\n  \
    \          string temp64 = string;\n            string temp65 = string;\n    \
    \        string temp66 = string;\n            string temp67 = string;\n      \
    \      string temp68 = string;\n            string temp69 = string;\n", "{\n \
    \   string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++) {\n        string temp =\
    \ string;\n        temp.insert(i, string[i]);\n        \n        if(temp == string)\
    \ {\n            reverse = reverse + temp;\n            prefix = prefix + temp;\n\
    \            suffix = suffix + temp;\n        }\n    }\n    \n    string result\
    \ = \"\";\n    \n    if(reverse == string) {\n        result = prefix + reverse;\n\
    \    }\n    else {\n        result = prefix + reverse + suffix;\n    }\n    \n\
    \    return result;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        reverse +=\
    \ temp;\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        \n        if(temp == reverse)\n\
    \        {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i\
    \ + 1, string.length() - i);\n        }\n    }\n    \n    return prefix + reverse;\n\
    }", "{\n    int len = string.length();\n    string reverse = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < len;\
    \ i++)\n    {\n        string temp = prefix + string[i];\n        reverse = reverse\
    \ + temp;\n        prefix = temp;\n    }\n    \n    for(int i = len - 1; i >=\
    \ 0; i--)\n    {\n        string temp = prefix + string[i];\n        reverse =\
    \ reverse + temp;\n        suffix = suffix + temp;\n    }\n    \n    return reverse\
    \ + suffix;\n}", "{\n    int len = string.length();\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i =\
    \ 0; i < len; i++)\n    {\n        string temp = string.substr(0, i);\n      \
    \  reverse += temp;\n        \n        if(temp == string.substr(len - i - 1, len\
    \ - i))\n        {\n            prefix = string.substr(0, i);\n            suffix\
    \ = string.substr(len - i - 1, len - i);\n            break;\n        }\n    }\n\
    \    \n    return prefix + reverse + suffix;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;",
  "{\n    int len = string.length();\n    string reverse = \"\";\n    for(int i =\
    \ 0; i < len; i++)\n    {\n        reverse += string[len - 1 - i];\n    }\n  \
    \  string prefix = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    return prefix + reverse;\n}\n</code>\n<|/ a tags=string,c++,algorithm,string\
    \ |>\n<| a tags=string,c++,algorithm,string |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string reverse = \"\";\n   \
    \ string longest = \"\";\n    int longestLength = 0;\n    int longestIndex = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        string postfix =\
    \ \"\";\n        string prefix = \"\";\n        for(int j = 0; j < i; j++)\n \
    \       {\n            postfix += string[j];\n            prefix += string[j];\n\
    \        }\n        string postfix = reverse(postfix);\n        if(postfix !=\
    \ string)\n        {\n            longest = postfix + string;\n            longestLength\
    \ = postfix.length();\n            longestIndex = i;\n        }\n    }\n    string\
    \ result = \"\";\n    for(int i = longestIndex; i < string.length(); i++)\n  \
    \  {\n        result += string[i];\n    }\n    string reversed = reverse(result);\n\
    \    string final = result + reversed;\n    return final;\n}\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis doesn't work. Try it with `\"abba\"`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it on \"abba\" and it returned \"abba\".\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for `\"abba\"` because `reverse(\"abba\")` returns `\"\
    abba\"` instead of `\"abbaba\"`.\n<|/ c |>\n<| c |>\nOh, I see what you mean.\
    \ I'll fix it now.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cmath>\nusing namespace std;", "{\n    string\
    \ result = string;\n    string postfix = \"\";\n    string prefix = \"\";\n  \
    \  \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix = postfix\
    \ + string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        prefix = prefix + string[i];\n    }\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n      \
    \  {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != prefix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != postfix[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != prefix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] != prefix[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != postfix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != prefix[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != prefix[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != prefix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != postfix[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != prefix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] != prefix[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != postfix", "{\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n         \
    \   prefix = prefix + string[i];\n            suffix = suffix + string[i];\n \
    \       }\n    }\n    \n    string result = prefix + reverse + suffix;\n    \n\
    \    return result;\n}", "{\n    string postfix = \"\";\n    int i = 0;\n    int\
    \ j = 0;\n    string reverse = \"\";\n    \n    while(i < string.length())\n \
    \   {\n        postfix += string[i];\n        i++;\n    }\n    \n    while(j <\
    \ postfix.length())\n    {\n        reverse += postfix[j];\n        j++;\n   \
    \ }\n    \n    return reverse;\n}", "{\n    string reverse = \"\";\n    string\
    \ longest = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        if(temp == string[i])\n        {\n            prefix += temp;\n\
    \        }\n        else\n        {\n            suffix += temp;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(i, 1);\n        if(temp == string[i])\n        {\n    \
    \        prefix += temp;\n        }\n        else\n        {\n            suffix\
    \ += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(i, 1);\n        if(temp == string[i])\n\
    \        {\n            prefix += temp;\n        }\n        else\n        {\n\
    \            suffix += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        if(temp ==\
    \ string[i])\n        {\n            prefix += temp;\n        }\n        else\n\
    \        {\n            suffix += temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        if(temp == string[i])\n        {\n            prefix += temp;\n\
    \        }\n        else\n        {\n            suffix += temp;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(i, 1);\n        if(temp == string[i])\n        {\n    \
    \        prefix += temp;\n        }\n        else\n        {\n            suffix\
    \ += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(i, 1);\n        if(temp == string[i])\n\
    \        {\n            prefix += temp;\n        }\n        else\n        {\n\
    \            suffix += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        if(temp ==\
    \ string[i])\n        {\n            prefix += temp;\n        }\n        else\n\
    \        {\n            suffix += temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        if(temp == string[i])\n        {\n            prefix += temp;\n\
    \        }\n        else\n        {\n            suffix += temp;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(i, 1);\n        if(temp == string[i])\n        {\n    \
    \        prefix += temp;\n        }\n        else\n        {\n", "{\n    string\
    \ reverse = \"\";\n    int i = 0;\n    int j = 0;\n    int length = string.length();\n\
    \    \n    while(i < length / 2)\n    {\n        reverse += string[i];\n     \
    \   i++;\n    }\n    \n    while(j < length)\n    {\n        reverse += string[j];\n\
    \        j++;\n    }\n    \n    return reverse;\n}", "{\n    string result = \"\
    \";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        string temp2 = string.substr(i, string.length());\n        \n \
    \       if(temp == temp2)\n        {\n            reverse = reverse + temp;\n\
    \        }\n    }\n    \n    result = prefix + reverse + suffix;\n    \n    return\
    \ result;\n}", "{\n    string postfix = \"\";\n    string prefix = \"\";\n   \
    \ string reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] !=\
    \ postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != prefix[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] != reverse[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    return postfix + reverse + prefix;\n\
    }", "{\n    string result = \"\";\n    int length = string.length();\n    \n \
    \   for(int i = 0; i < length; i++)\n    {\n        if(string[i] == string[length\
    \ - 1 - i])\n        {\n            result += string[i];\n        }\n    }\n \
    \   \n    return result + string[length - 1];\n}", "{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    \n    for(int i =\
    \ 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        prefix += string[i];\n    }\n    \n   \
    \ if(reverse == prefix)\n    {\n        return string;\n    }\n    \n    string\
    \ palindrome = prefix + reverse;\n    \n    return palindrome;\n}", "{\n    string\
    \ result = string;\n    string prefix = string;\n    string suffix = string;\n\
    \    \n    while(!std.string.isEmpty(prefix))\n    {\n        string reverse =\
    \ std.string.reverse(prefix);\n        string postfix = std.string.concat(prefix,\
    \ reverse);\n        \n        if(std.string.isPalindrome(postfix))\n        {\n\
    \            result = std.string.concat(result, postfix);\n            prefix\
    \ = std.string.concat(prefix, reverse);\n        }\n        else\n        {\n\
    \            prefix = std.string.concat(prefix, reverse);\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = string;\n    int length\
    \ = string.length();\n    \n    for(int i = 0; i < length; i++)\n    {\n     \
    \   string prefix = string.substr(0, i);\n        string suffix = string.substr(i,\
    \ length);\n        string reverse = std.string.reverse(suffix);\n        string\
    \ postfix = prefix + reverse;\n        \n        if(postfix != string)\n     \
    \   {\n            result = postfix;\n            break;\n        }\n    }\n \
    \   \n    return result;\n}", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  reverse = reverse + temp;\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  prefix = prefix + temp;\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  suffix = suffix + temp;\n    }\n    \n    string result = \"\";\n    result\
    \ = prefix + reverse + suffix;\n    return result;\n}", "{\n    int length = string.length();\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < length; i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        string temp2 = string.substr(i, length);\n        \n        if(temp\
    \ == temp2)\n        {\n            reverse = reverse + temp;\n            prefix\
    \ = prefix + temp;\n            suffix = temp + suffix;\n        }\n    }\n  \
    \  \n    string result = prefix + reverse + suffix;\n    \n    return result;\n\
    }", "{\n    string reverse = \"\";\n    int i = 0;\n    int j = 0;\n    \n   \
    \ while(i < string.length())\n    {\n        if(string[i] == string[j])\n    \
    \    {\n            i++;\n            j++;\n        }\n        else\n        {\n\
    \            reverse = reverse + string[i];\n            i++;\n            j--;\n\
    \        }\n    }\n    \n    return reverse + string;\n}", "{\n    string reverse\
    \ = \"\";\n    int start = 0;\n    int end = string.length();\n    while(start\
    \ < end)\n    {\n        reverse = reverse + string.substr(start,1);\n       \
    \ start = end;\n        end = string.length();\n        while(start < end)\n \
    \       {\n            end = end - 1;\n            if(string.substr(start,1) ==\
    \ string.substr(end,1))\n            {\n                end = end - 1;\n     \
    \       }\n            else\n            {\n                break;\n         \
    \   }\n        }\n    }\n    return string + reverse;\n}\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| c |>\nThis doesn't work if the string starts with a palindrome. For example,\
    \ `make_palindrome(\"abba\")` returns `\"abba\"` instead of `\"abbba\"`.\n<|/\
    \ c |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThis fails for `make_palindrome(\"abba\")` returns\
    \ `\"abba\"` instead of `\"abbba\"`.\n<|/ c |>\n<| a tags=string,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        \n        if(temp == string[i])\n        {\n\
    \            prefix += temp;\n        }\n        else\n        {\n           \
    \ suffix += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            prefix += temp;\n        }\n        else\n\
    \        {\n            suffix += temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string[i])\n        {\n            prefix\
    \ += temp;\n        }\n        else\n        {\n            suffix += temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string[i])\n\
    \        {\n            prefix += temp;\n        }\n        else\n        {\n\
    \            suffix += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            prefix += temp;\n        }\n        else\n\
    \        {\n            suffix += temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string[i])\n        {\n            prefix\
    \ += temp;\n        }\n        else\n        {\n            suffix += temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string[i])\n\
    \        {\n            prefix += temp;\n        }\n        else\n        {\n\
    \            suffix += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            prefix += temp;\n        }\n        else\n\
    \        {\n            suffix += temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string[i])\n        {\n            prefix\
    \ += temp;\n        }\n        else\n        {\n            suffix += temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string[i])",
  "{\n    int len = string.length();\n    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    string reverse = reverse(prefix);\n    \n    return postfix\
    \ + reverse + postfix;\n}", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  reverse = reverse + temp;\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  prefix = prefix + temp;\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp[i];\n      \
    \  suffix = suffix + temp;\n    }\n    \n    string result = prefix + reverse\
    \ + suffix;\n    return result;\n}", "{\n    string reverse = \"\";\n    int i\
    \ = 0;\n    int j = 0;\n    \n    while(i < string.length())\n    {\n        string\
    \ prefix = string.substr(0, i);\n        string suffix = string.substr(i);\n \
    \       \n        if(std.string.isPalindrome(suffix))\n        {\n           \
    \ string postfix = string.substr(0, i) + string.substr(i, string.length());\n\
    \            \n            reverse = prefix + postfix + reverse;\n           \
    \ \n            i = j;\n        }\n        \n        i++;\n        j++;\n    }\n\
    \    \n    return reverse;\n}", "{\n    string reverse = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    string palindrome = string;\n    for(int i = 0; i\
    \ < length; i++)\n    {\n        palindrome += reverse;\n    }\n    return palindrome;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string;\n        temp = temp + string[i];\n        \n        if(isPalindrome(temp))\n\
    \        {\n            reverse = reverse + temp;\n            prefix = prefix\
    \ + string[i];\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string;\n        temp = temp + string[i];\n\
    \        \n        if(isPalindrome(temp))\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    return reverse + prefix + suffix;\n\
    }", "{\n    int length = string.length();\n    string reverse = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] == string[length - 1 - i])\n        {\n  \
    \          reverse = reverse + string[i];\n        }\n        else\n        {\n\
    \            reverse = reverse + string[i] + string[length - 1 - i];\n       \
    \ }\n    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ == string[length - 1 - i])\n        {\n            suffix = suffix + string[i];\n\
    \        }\n        else\n        {\n            suffix = suffix + string[i] +\
    \ string[length - 1 - i];\n        }\n    }\n    \n    return prefix + reverse\
    \ + suffix;\n}", "{\n    string result = string;\n    int length = string.length();\n\
    \    int i = 0;\n    int j = 0;\n    while(i < length && j < length) \n    {\n\
    \        if(string[i] == string[j]) \n        {\n            i++;\n          \
    \  j++;\n        }\n        else \n        {\n            if(string[i] > string[j])\
    \ \n            {\n                string temp = string[i];\n                string[i]\
    \ = string[j];\n                string[j] = temp;\n                i++;\n    \
    \        }\n            else \n            {\n                string temp = string[j];\n\
    \                string[j] = string[i];\n                string[i] = temp;\n \
    \               j++;\n            }\n        }\n    }\n    while(i < length) \n\
    \    {\n        string temp = string[i];\n        string[i] = string[length -\
    \ 1];\n        string[length - 1] = temp;\n        i++;\n    }\n    while(j <\
    \ length) \n    {\n        string temp = string[j];\n        string[j] = string[0];\n\
    \        string[0] = temp;\n        j++;\n    }\n    return string;\n}\n/*\n Find\
    \ the longest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string result = string;\n \
    \   int length = string.length();\n    int i = 0;\n    int j = 0;\n    while(i\
    \ < length && j < length) \n    {\n        if(string[i] == string[j]) \n     \
    \   {\n            i++;\n            j++;\n        }\n        else \n        {\n\
    \            if(string[i] > string[j]) \n            {\n                string\
    \ temp = string[i];\n                string[i] = string[j];\n                string[j]\
    \ = temp;\n                i++;\n            }\n            else \n          \
    \  {\n                string temp = string[j];\n                string[j] = string[i];\n\
    \                string[i] = temp;\n                j++;\n            }\n    \
    \    }\n    }\n    while(i < length) \n    {\n        string temp = string[i];\n\
    \        string[i] = string[length - 1];\n        string[length - 1] = temp;\n\
    \        i++;\n    }\n    while(j < length) \n    {\n        string temp = string[j];\n\
    \        string[j] = string[0];\n        string[0] = temp;\n        j++;\n   \
    \ }\n    return string;\n}\n/*\n Find the longest palindrome ", "{\n    int len\
    \ = string.length();\n    string reverse = \"\";\n    string prefix = \"\";\n\
    \    string suffix = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n  \
    \      string temp = string.substr(0, i);\n        reverse += temp;\n        \n\
    \        if(temp == temp)\n        {\n            prefix = temp;\n        }\n\
    \        \n        temp = string.substr(len - i - 1, len - i - 1);\n        suffix\
    \ += temp;\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n    string\
    \ result = string;\n    string prefix = string;\n    string suffix = string;\n\
    \    string reverse;\n    \n    while(!std.string.isEmpty(prefix))\n    {\n  \
    \      reverse = std.string.reverse(prefix);\n        suffix = std.string.append(reverse,\
    \ suffix);\n        prefix = std.string.append(reverse, prefix);\n    }\n    \n\
    \    while(!std.string.isEmpty(suffix))\n    {\n        reverse = std.string.reverse(suffix);\n\
    \        prefix = std.string.append(reverse, prefix);\n        suffix = std.string.append(reverse,\
    \ suffix);\n    }\n    \n    result = std.string.append(prefix, suffix);\n   \
    \ \n    return result;\n}", "{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[length\
    \ - 1 - i];\n    }\n    return string + reverse;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    string postfix = \"\";\n    string prefix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            postfix += string[i];\n\
    \        }\n        else\n        {\n            prefix += string[i];\n      \
    \  }\n    }\n    \n    return prefix + string.reverse(postfix);\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string[i])\n        {\n            prefix\
    \ = prefix + temp;\n            suffix = suffix + temp;\n        }\n        else\n\
    \        {\n            reverse = reverse + temp;\n        }\n    }\n    \n  \
    \  string result = prefix + reverse + suffix;\n    \n    return result;\n}", "{\n\
    \    string result = string;\n    string reverse = \"\";\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != reverse[i])\n\
    \        {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string result = string;\n    string reverse = \"\";\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != reverse[i])\n\
    \        {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string result = string;\n    string reverse = \"\";\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != reverse[i])\n\
    \        {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat", "{\n    string reverse = \"\";\n   \
    \ string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n\
    \        reverse += temp;\n        \n        if(temp == string[i])\n        {\n\
    \            prefix = string.substr(0, i);\n            suffix = string.substr(i\
    \ + 1, string.length() - i - 1);\n        }\n    }\n    \n    return prefix +\
    \ reverse + suffix;\n}", "{\n    string reverse = \"\";\n    int len = string.length();\n\
    \    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n\
    \    string prefix = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    string palindrome = prefix + reverse;\n    return\
    \ palindrome;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int len = string.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[i];\n    }\n    string prefix\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    string palindrome = prefix + reverse;\n    return palindrome;\n}\n\
    /*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int len = string.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[i];\n    }\n    string prefix\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    string palindrome = prefix + reverse;\n    return palindrome;\n}\n\
    /*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindrom", "{\n    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        reverse += string[string.length()\
    \ - i - 1];\n    }\n    \n    postfix = reverse(postfix);\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] != reverse[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    string result = prefix + postfix\
    \ + reverse;\n    \n    return result;\n}", "{\n    string reverse = \"\";\n \
    \   string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        string temp = string;\n        temp\
    \ = temp[i];\n        reverse = reverse + temp;\n    }\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        string temp = string;\n       \
    \ temp = temp[i];\n        prefix = prefix + temp;\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string;\n     \
    \   temp = temp[i];\n        suffix = suffix + temp;\n    }\n    \n    string\
    \ result = reverse + prefix + suffix;\n    \n    return result;\n}", "{\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            postfix += string[i];\n        }\n        else\n        {\n\
    \            prefix += string[i];\n        }\n    }\n    \n    return prefix +\
    \ postfix + reverse(prefix);\n}", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            reverse = reverse + string[i];\n            prefix = prefix\
    \ + string[i];\n            suffix = suffix + string[i];\n        }\n    }\n \
    \   \n    return prefix + reverse + suffix;\n}", "{\n    string result = string;\n\
    \    string postfix = \"\";\n    string prefix = \"\";\n    int length = string.length();\n\
    \    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ != postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(string[i] != prefix[i])\n       \
    \ {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != postfix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ != prefix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(string[i] != postfix[i])\n      \
    \  {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != prefix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ != postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(string[i] != prefix[i])\n       \
    \ {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != postfix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ != prefix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(string[i] != postfix[i])\n      \
    \  {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != prefix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ != postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(string[i] != prefix[i])\n       \
    \ {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != postfix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ != prefix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(string[i] != postfix[i])\n      \
    \  {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != prefix[i])\n        {\n            break;\n\
    \        }\n    }\n", "{\n    string result = \"\";\n    string prefix = \"\"\
    ;\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            prefix = prefix + string[i];\n            suffix = string[i];\n \
    \       }\n        else\n        {\n            prefix = prefix + string[i];\n\
    \            suffix = suffix + string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            result += string[i];\n        }\n        else\n\
    \        {\n            result += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < prefix.length(); i++)\n    {\n        result += prefix[i];\n    }\n\
    \    \n    for(int i = 0; i < suffix.length(); i++)\n    {\n        result +=\
    \ suffix[i];\n    }\n    \n    return result;\n}", "{\n    string result = string;\n\
    \    int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        string prefix = string.substr(0, i);\n        string suffix = string.substr(i,\
    \ length);\n        string reverse = std.string.reverse(suffix);\n        string\
    \ postfix = prefix + reverse;\n        if(postfix != string)\n        {\n    \
    \        result = postfix;\n            break;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,algorithm,c++ |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        reverse += string[length - 1 - i];\n \
    \   }\n    return string + reverse;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix =\
    \ prefix + string[i];\n        suffix = suffix + string[i];\n    }\n    \n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            result = result + prefix + suffix;\n     \
    \       break;\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \        }\n        else\n        {\n            suffix += string[i];\n      \
    \  }\n    }\n    \n    reverse += prefix;\n    reverse += suffix;\n    \n    return\
    \ reverse;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\";\n  \
    \  string suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(i, 1);\n        reverse += temp;\n\
    \        \n        if(temp == string[i])\n        {\n            prefix = string.substr(0,\
    \ i);\n            suffix = string.substr(i + 1, string.length() - i);\n     \
    \   }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n    string\
    \ reverse = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i < string.length())\n\
    \    {\n        if(string[i] == string[j])\n        {\n            i++;\n    \
    \        j++;\n        }\n        else\n        {\n            reverse = reverse\
    \ + string[i];\n            i++;\n            j--;\n        }\n    }\n    \n \
    \   return reverse + string;\n}", "{\n    int len = string.length();\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    \n    for(int i = 0; i < len;\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < len; i++)\n    {\n        prefix += string[i];\n    }\n    \n    if(reverse\
    \ == prefix)\n    {\n        return string;\n    }\n    \n    string palindrome\
    \ = prefix + reverse;\n    \n    return palindrome;\n}", "{\n    string reverse\
    \ = \"\";\n    int i = 0;\n    \n    while(i < string.length())\n    {\n     \
    \   reverse += string[i];\n        i++;\n    }\n    \n    string prefix = \"\"\
    ;\n    int j = 0;\n    \n    while(j < reverse.length())\n    {\n        prefix\
    \ += reverse[j];\n        j++;\n    }\n    \n    return prefix + string;\n}",
  "{\n    string reverse = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i\
    \ < string.length())\n    {\n        string postfix = \"\";\n        while(j <\
    \ string.length())\n        {\n            postfix += string[j];\n           \
    \ j++;\n        }\n        string prefix = \"\";\n        while(i < string.length())\n\
    \        {\n            prefix += string[i];\n            i++;\n        }\n  \
    \      if(postfix == prefix)\n        {\n            reverse = reverse + postfix\
    \ + string[i];\n        }\n    }\n    return reverse;\n}", "{\n    string reverse\
    \ = \"\";\n    int start = 0;\n    int end = 0;\n    \n    while(start < string.length())\n\
    \    {\n        end = string.find_first_of(string[start], string.length() - 1);\n\
    \        reverse = reverse + string[start];\n        reverse = reverse + string[end];\n\
    \        start = end + 1;\n    }\n    \n    return reverse;\n}", "{\n    string\
    \ reverse = \"\";\n    int start = 0;\n    int end = string.length() - 1;\n  \
    \  while(start < end)\n    {\n        if(string[start] == string[end])\n     \
    \   {\n            reverse = reverse + string[start];\n            start++;\n\
    \            end--;\n        }\n        else\n        {\n            reverse =\
    \ reverse + string[start] + string[end];\n            start++;\n            end--;\n\
    \        }\n    }\n    return reverse;\n}\n/*\n Find the longest palindrome that\
    \ begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    - Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int start = 0;\n    int end = string.length() - 1;\n    while(start < end)\n\
    \    {\n        if(string[start] == string[end])\n        {\n            reverse\
    \ = reverse + string[start];\n            start++;\n            end--;\n     \
    \   }\n        else\n        {\n            reverse = reverse + string[start]\
    \ + string[end];\n            start++;\n            end--;\n        }\n    }\n\
    \    return reverse;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int start = 0;\n    int end = string.length()\
    \ - 1;\n    while(start < end)\n    {\n        if(string[start] == string[end])\n\
    \        {\n            reverse = reverse + string[start];\n            start++;\n\
    \            end--;\n        }\n        else\n        {\n            reverse =\
    \ reverse + string[start] + string[end];\n            start++;\n            end--;\n\
    \        }\n", "{\n    string reverse = \"\";\n    int i = 0;\n    int j = 0;\n\
    \    \n    while(i < string.length())\n    {\n        if(string[i] == string[j])\n\
    \        {\n            i++;\n            j++;\n        }\n        else\n    \
    \    {\n            reverse = reverse + string[i];\n            i++;\n       \
    \     j--;\n        }\n    }\n    \n    return reverse + string;\n}", "{\n   \
    \ string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(0, i) + string.substr(i, string.length());\n        \n     \
    \   if(temp == reverse(temp))\n        {\n            prefix = string.substr(0,\
    \ i);\n            suffix = string.substr(i, string.length());\n        }\n  \
    \  }\n    \n    return prefix + reverse(suffix);\n}", "{\n    string result =\
    \ \"\";\n    string reverse = \"\";\n    int length = string.length();\n    \n\
    \    for (int i = 0; i < length; i++)\n    {\n        reverse = reverse + string[i];\n\
    \    }\n    \n    for (int i = 0; i < length; i++)\n    {\n        if (string[i]\
    \ != reverse[i])\n        {\n            result = result + string[i];\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    string reverse = \"\";\n  \
    \  int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        reverse += string[i];\n    }\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    string suffix = string.substr(string.length() - 1, string.length());\n\
    \    string palindrome = prefix + reverse + suffix;\n    return palindrome;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string postfix = \"\";\n    string prefix = \"\";\n\
    \    string reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            postfix += string[i];\n        }\n        else\n        {\n     \
    \       prefix += string[i];\n        }\n    }\n    \n    reverse = reverse(prefix);\n\
    \    postfix = reverse(postfix);\n    \n    return postfix + reverse;\n}", "{\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        reverse += temp;\n        \n        if(temp\
    \ == string.substr(string.length() - i, string.length() - i))\n        {\n   \
    \         suffix = string.substr(i, string.length() - i);\n            prefix\
    \ = string.substr(0, i);\n        }\n    }\n    \n    return prefix + reverse\
    \ + suffix;\n}", "{\n    int len = string.length();\n    string reverse = \"\"\
    ;\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        string prefix =\
    \ string.substr(0, i);\n        string suffix = string.substr(i + 1, len - i);\n\
    \        \n        if(std.string.isPalindrome(prefix + reverse + suffix))\n  \
    \      {\n            return prefix + reverse + suffix;\n        }\n    }\n  \
    \  \n    return \"\";\n}", "{\n    string reverse = \"\";\n    string prefix =\
    \ \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        reverse +=\
    \ temp;\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(0, i);\n        prefix += temp;\n    }\n  \
    \  \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        suffix += temp;\n    }\n    \n    return prefix\
    \ + reverse + suffix;\n}", "{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[i];\n \
    \   }\n    string postfix = \"\";\n    for(int i = length - 1; i >= 0; i--)\n\
    \    {\n        postfix += reverse[i];\n    }\n    return postfix + string;\n\
    }\n</code>\n<|/ a tags=string,algorithm,c++ |>\n<| c |>\nI believe this algorithm\
    \ is O(n^2) because of the nested loops. I believe this can be done in O(n).\n\
    <|/ c |>\n<| c |>\n: Yes, it can be done in O(n) by using a stack to reverse the\
    \ string and to find the longest palindrome in O(n) by using a stack to find the\
    \ longest palindrome in O(n).\n<|/ c |>\n<| c |>\n: I believe this algorithm is\
    \ O(n^2) because of the nested loops. I believe this can be done in O(n).\n<|/\
    \ c |>\n<| c |>\n: Yes, it can be done in O(n) by using a stack to reverse the\
    \ string and to find the longest palindrome in O(n) by using a stack to find the\
    \ longest palindrome in O(n).\n<|/ c |>\n<| c |>\n: I believe this algorithm is\
    \ O(n^2) because of the nested loops. I believe this can be done in O(n).\n<|/\
    \ c |>\n<| a tags=string,algorithm,c++ |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <stack>\nusing namespace std;", "{\n    string reverse =\
    \ \"\";\n    string prefix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = prefix + string[i];\n        reverse += temp;\n\
    \        prefix = temp;\n    }\n    \n    return reverse;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    int length = string.length();\n    \n    for(int i = 0; i < length; i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        reverse += temp;\n\
    \        \n        temp = string.substr(i, string.length());\n        prefix +=\
    \ temp;\n        \n        temp = string.substr(0, i);\n        suffix += temp;\n\
    \    }\n    \n    string result = prefix + reverse + suffix;\n    \n    return\
    \ result;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\";\n   \
    \ string suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            reverse = reverse + string[i];\n            prefix = prefix + string[i];\n\
    \            suffix = suffix + string[i];\n        }\n    }\n    \n    return\
    \ prefix + reverse + suffix;\n}", "{\n    string reverse = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    string result = string;\n    for(int i = 0; i < length;\
    \ i++)\n    {\n        result += reverse;\n    }\n    return result;\n}\n/*\n\
    \ Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        reverse += string[i];\n    }\n    string\
    \ result = string;\n    for(int i = 0; i < length; i++)\n    {\n        result\
    \ += reverse;\n    }\n    return result;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        reverse += string[i];\n    }\n    string result = string;\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        result += reverse;\n    }\n    return\
    \ result;\n}\n/*\n Find the longest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n", "{\n    string result = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ == string[length - 1 - i])\n        {\n            result += string[i];\n  \
    \      }\n    }\n    string reverse = reverse(string(result));\n    string result\
    \ = string + reverse;\n    return result;\n}\n/*\n Find the longest postfix of\
    \ supplied string that is a palindrome.\n    Algorithm idea is simple:\n    -\
    \ Find the longest postfix of supplied string that is a palindrome.\n    - Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string result = \"\";\n   \
    \ int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        if(string[i] == string[length - 1 - i])\n        {\n            result\
    \ += string[i];\n        }\n    }\n    string reverse = reverse(string(result));\n\
    \    string result = string + reverse;\n    return result;\n}\n/*\n Find the longest\
    \ postfix of supplied string that is a palindrome.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string result = \"\";\n   \
    \ int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        if(string[i] == string[length - 1 - i])\n        {\n            result\
    \ += string[i];\n        }\n    }\n    string reverse = reverse(string(result));\n\
    \    string result = string + reverse;\n    return result;\n}\n/*\n Find the longest\
    \ postfix of supplied string that is a palindrome.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make",
  "{\n    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == temp.reverse())\n        {\n            prefix = string.substr(0, i);\n \
    \           suffix = string.substr(i + 1, string.length() - i);\n            reverse\
    \ = temp + reverse;\n        }\n    }\n    \n    string temp = prefix + reverse\
    \ + suffix;\n    \n    return result;\n}", "{\n    string reverse = \"\";\n  \
    \  string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        string temp = string.substr(0, i);\n\
    \        reverse += temp;\n        \n        if(temp == string[i])\n        {\n\
    \            prefix = string.substr(0, i);\n            suffix = string.substr(i);\n\
    \        }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        reverse += temp;\n        \n        if(temp == string[i])\n   \
    \     {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i\
    \ + 1);\n        }\n    }\n    \n    return prefix + reverse + suffix;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nThis doesn't work if the string starts with\
    \ a palindrome. Try it with `make_palindrome(\"aba\")`.\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that and fixed it before you posted your comment. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        result += string[i];\n    }\n    for(int i = length - 1; i >=\
    \ 0; i--)\n    {\n        result += string[i];\n    }\n    for(int i = 0; i <\
    \ length; i++)\n    {\n        result += string[i];\n    }\n    return result;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            prefix = prefix + string[i];\n            suffix = string[string.length()\
    \ - 1 - i] + suffix;\n        }\n        else\n        {\n            longest\
    \ = prefix + string[i] + suffix;\n            reverse = reverse + longest;\n \
    \           prefix = \"\";\n            suffix = \"\";\n        }\n    }\n   \
    \ return reverse;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            prefix = prefix + string[i];\n            suffix = string[string.length()\
    \ - 1 - i] + suffix;\n        }\n        else\n        {\n            longest\
    \ = prefix + string[i] + suffix;\n            reverse = reverse + longest;\n \
    \           prefix = \"\";\n            suffix = \"\";\n        }\n    }\n   \
    \ return reverse;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            prefix = prefix + string[i];", "{\n    string postfix = \"\
    \";\n    string prefix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n   \
    \ }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != postfix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != prefix[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != reverse[i])\n        {\n            break;\n        }\n    }\n    \n    return\
    \ postfix + reverse + prefix;\n}", "{\n    string reverse = \"\";\n    int i =\
    \ 0;\n    int j = 0;\n    int length = 0;\n    \n    length = string.length();\n\
    \    \n    while(i < length / 2)\n    {\n        reverse = reverse + string[i];\n\
    \        i++;\n    }\n    \n    while(j < length)\n    {\n        reverse = reverse\
    \ + string[j];\n        j++;\n    }\n    \n    return reverse;\n}", "{\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n   \
    \ string palindrome = \"\";\n    \n    int length = string.length();\n    \n \
    \   // Find longest postfix of string that is a palindrome\n    for (int i = 0;\
    \ i < length; i++)\n    {\n        if (string[i] == string[length - 1 - i])\n\
    \        {\n            postfix = postfix + string[i];\n        }\n    }\n   \
    \ \n    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix\n    for (int i = 0; i < length; i++)\n    {\n\
    \        if (string[i] == string[length - 1 - i])\n        {\n            reverse\
    \ = reverse + string[i];\n        }\n    }\n    \n    // If postfix and reverse\
    \ are equal, return empty string\n    if (postfix == reverse)\n    {\n       \
    \ return \"\";\n    }\n    \n    // If postfix and reverse are not equal, return\
    \ postfix + reverse + prefix\n    else\n    {\n        palindrome = postfix +\
    \ reverse + prefix;\n        return palindrome;\n    }\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string reverse = \"\";\n    int\
    \ len = string.length();\n    int i = 0;\n    int j = 0;\n    \n    while (i <\
    \ len) {\n        if (string[i] == string[len - 1 - i]) {\n            reverse\
    \ = reverse + string[i];\n            i++;\n            j++;\n        }\n    \
    \    else {\n            reverse = reverse + string[i];\n            j++;\n  \
    \      }\n    }\n    \n    return reverse + string.substr(0, j);\n}", "{\n   \
    \ string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > longest.length())\n        {\n            longest\
    \ = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string;\n        temp = temp + string[i];\n    \
    \    \n        if(temp.length() > ", "{\n    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix = postfix + string[i];\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        prefix = prefix + string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ = reverse + string[i];\n    }\n    \n    if(postfix.length() > prefix.length())\n\
    \    {\n        postfix = postfix.substr(0, postfix.length() - 1);\n    }\n  \
    \  \n    return postfix + reverse + prefix;\n}", "{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n \
    \       reverse += string[i];\n    }\n    \n    for(int i = len - 1; i >= 0; i--)\n\
    \    {\n        reverse += string[i];\n    }\n    \n    return reverse;\n}", "{\n\
    \    int len = string.length();\n    string reverse = \"\";\n    for(int i = 0;\
    \ i < len / 2; ++i)\n    {\n        reverse += string[i];\n    }\n    reverse\
    \ += string[len - 1];\n    string result = string;\n    for(int i = 0; i < len;\
    \ ++i)\n    {\n        if(string[i] != reverse[i])\n        {\n            result\
    \ += string[i];\n            break;\n        }\n    }\n    return result;\n}\n\
    /*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    int len = string.length();\n    string reverse = \"\";\n    for(int i = 0;\
    \ i < len / 2; ++i)\n    {\n        reverse += string[i];\n    }\n    reverse\
    \ += string[len - 1];\n    string result = string;\n    for(int i = 0; i < len;\
    \ ++i)\n    {\n        if(string[i] != reverse[i])\n        {\n            result\
    \ += string[i];\n            break;\n        }\n    }\n    return result;\n}\n\
    /*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    int len = string.length();\n    string reverse = \"\";\n    for(int i = 0;\
    \ i < len / 2; ++i)\n    {\n        reverse += string[i];\n    }\n    reverse\
    \ += string[len - 1];\n    string result = string;\n    for(int i = 0; i < len;\
    \ ++i)\n    {\n        if(string[i] != reverse[i])\n        {\n            result\
    \ += string[i];\n            break;\n        }\n    }\n    return result;\n}\n\
    /*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of ", "{\n    string result\
    \ = string;\n    int length = string.length();\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] != string[length - 1 - i])\n        {\n  \
    \          string temp = string;\n            string temp2 = string;\n       \
    \     string temp3 = string;\n            string temp4 = string;\n           \
    \ string temp5 = string;\n            string temp6 = string;\n            string\
    \ temp7 = string;\n            string temp8 = string;\n            string temp9\
    \ = string;\n            string temp10 = string;\n            string temp11 =\
    \ string;\n            string temp12 = string;\n            string temp13 = string;\n\
    \            string temp14 = string;\n            string temp15 = string;\n  \
    \          string temp16 = string;\n            string temp17 = string;\n    \
    \        string temp18 = string;\n            string temp19 = string;\n      \
    \      string temp20 = string;\n            string temp21 = string;\n        \
    \    string temp22 = string;\n            string temp23 = string;\n          \
    \  string temp24 = string;\n            string temp25 = string;\n            string\
    \ temp26 = string;\n            string temp27 = string;\n            string temp28\
    \ = string;\n            string temp29 = string;\n            string temp30 =\
    \ string;\n            string temp31 = string;\n            string temp32 = string;\n\
    \            string temp33 = string;\n            string temp34 = string;\n  \
    \          string temp35 = string;\n            string temp36 = string;\n    \
    \        string temp37 = string;\n            string temp38 = string;\n      \
    \      string temp39 = string;\n            string temp40 = string;\n        \
    \    string temp41 = string;\n            string temp42 = string;\n          \
    \  string temp43 = string;\n            string temp44 = string;\n            string\
    \ temp45 = string;\n            string temp46 = string;\n            string temp47\
    \ = string;\n            string temp48 = string;\n            string temp49 =\
    \ string;\n            string temp50 = string;\n            string temp51 = string;\n\
    \            string temp52 = string;\n            string temp53 = string;\n  \
    \          string temp54 = string;\n            string temp55 = string;\n    \
    \        string temp56 = string;\n            string temp57 = string;\n      \
    \      string temp58 = string;\n            string temp59 = string;\n        \
    \    string temp60 = string;\n            string temp61 = string;\n          \
    \  string temp62 = string;\n            string temp63 = string;\n            string\
    \ temp64 = string;\n            string temp65 = string;\n            string temp66\
    \ = string;\n            string temp67 = string;\n            string temp68 =\
    \ string;\n            string temp69 = string;\n            string temp70 = string;\n",
  "{\n    string result = \"\";\n    int length = string.length();\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        string prefix = string.substr(0, i);\n\
    \        string suffix = string.substr(i, length);\n        \n        if(isPalindrome(prefix)\
    \ && isPalindrome(suffix))\n        {\n            string reversePrefix = reverse(prefix);\n\
    \            string reverseSuffix = reverse(suffix);\n            \n         \
    \   string newPrefix = reversePrefix + suffix;\n            string newSuffix =\
    \ reverseSuffix + prefix;\n            \n            result = newPrefix + newSuffix;\n\
    \            break;\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ reverse = \"\";\n    int start = 0;\n    int end = 0;\n    bool found = false;\n\
    \    \n    while(!found)\n    {\n        end = string.find_first_of(\"abcdefghijklmnopqrstuvwxyz\"\
    , start);\n        if(end == string::npos)\n        {\n            found = true;\n\
    \        }\n        else\n        {\n            reverse = reverse + string.substr(start,\
    \ end - start);\n            start = end + 1;\n        }\n    }\n    \n    return\
    \ reverse + string.substr(start, string.find_first_of(\"abcdefghijklmnopqrstuvwxyz\"\
    , start));\n}", "{\n    string result = string;\n    string reverse = \"\";\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse +=\
    \ string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != reverse[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != reverse[i])\n        {\n            result += string[i];\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    string reverse = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        reverse +=\
    \ temp;\n        \n        if(temp == string.substr(string.length() - i, string.length()\
    \ - i))\n        {\n            suffix = string.substr(i, string.length() - i);\n\
    \            prefix = string.substr(0, i);\n        }\n    }\n    \n    return\
    \ prefix + reverse + suffix;\n}", "{\n    string result = string;\n    string\
    \ prefix = string;\n    string suffix = string;\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix.insert(0, string[i]);\n  \
    \          suffix = suffix.insert(0, string[i]);\n        }\n        else\n  \
    \      {\n            prefix = prefix.insert(0, string[i]);\n            suffix\
    \ = suffix.insert(0, string[i]);\n        }\n    }\n    \n    string reverse =\
    \ suffix;\n    for(int i = 0; i < reverse.length(); i++)\n    {\n        reverse\
    \ = reverse.insert(0, reverse[reverse.length() - 1 - i]);\n    }\n    \n    result\
    \ = prefix.insert(0, reverse);\n    return result;\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \        else\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n        else\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string reverse = \"\";\n    int start = 0;\n    int end = string.length()\
    \ - 1;\n    \n    while (start < end)\n    {\n        if (string[start] != string[end])\n\
    \        {\n            reverse = reverse + string[start];\n            start\
    \ = start + 1;\n            end = end - 1;\n        }\n        else\n        {\n\
    \            start = start + 1;\n            end = end - 1;\n        }\n    }\n\
    \    \n    return reverse + string[start];\n}", "{\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n         \
    \   prefix = prefix + string[i];\n            suffix = suffix + string[i];\n \
    \       }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n    int\
    \ len = string.length();\n    string reverse = \"\";\n    \n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < len;\
    \ i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i\
    \ < len; i++)\n    {\n        suffix += string[i];\n    }\n    \n    string palindrome\
    \ = prefix + reverse + suffix;\n    \n    return palindrome;\n}", "{\n    string\
    \ reverse = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i < string.length())\n\
    \    {\n        string postfix = \"\";\n        while(j < string.length() && string[i]\
    \ != string[j])\n        {\n            postfix += string[j];\n            j++;\n\
    \        }\n        reverse += postfix;\n        i++;\n    }\n    \n    return\
    \ string + reverse;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            reverse = reverse + string[i];\n            prefix = prefix\
    \ + string[i];\n            suffix = suffix + string[i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n            prefix = prefix\
    \ + string[i];\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(i, 1);\n        reverse += temp;\n        \n   \
    \     if(temp == string[i])\n        {\n            prefix = string.substr(0,\
    \ i);\n            suffix = string.substr(i + 1, string.length() - i - 1);\n \
    \       }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string.substr(string.length() - i, 1))\n \
    \       {\n            reverse = reverse + temp;\n            \n            if(i\
    \ == 0)\n            {\n                prefix = temp;\n            }\n      \
    \      else\n            {\n                suffix = temp;\n            }\n  \
    \      }\n        else\n        {\n            reverse = reverse + temp;\n   \
    \     }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n    int len\
    \ = string.length();\n    string reverse = \"\";\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        reverse += string[len - 1 - i];\n    }\n    string result\
    \ = string;\n    string prefix = \"\";\n    for(int i = 0; i < len; i++)\n   \
    \ {\n        prefix += string[i];\n        if(string[i] == reverse[len - 1 - i])\n\
    \        {\n            result += prefix;\n            prefix = \"\";\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,string,c++ |>\n\
    <| c |>\nThis doesn't work if the string starts with a palindrome. For example,\
    \ `make_palindrome(\"aba\")` returns `\"aba\"` instead of `\"aba\"`.\n<|/ c |>\n\
    <| c |>\n: I added a fix for that case.\n<|/ c |>\n<| c |>\n: I added a fix for\
    \ that case.\n<|/ c |>\n<| c |>\n: I added a fix for that case.\n<|/ c |>\n<|\
    \ c |>\n: I added a fix for that case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        string temp2 = string.substr(i, string.length());\n\
    \        \n        if(temp == temp2)\n        {\n            prefix = temp;\n\
    \            suffix = temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            string temp = string.substr(0, i);\n            string\
    \ temp2 = string.substr(i, string.length());\n            \n            string\
    \ reverse = temp2.reverse();\n            string reverse2 = reverse.substr(0,\
    \ reverse.length());\n            \n            string temp3 = prefix + reverse2\
    \ + suffix;\n            \n            if(temp3 == temp)\n            {\n    \
    \            result = temp3;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[length\
    \ - 1 - i];\n    }\n    string result = string + reverse;\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work. Try\
    \ it with `make_palindrome(\"abba\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with `make_palindrome(\"abba\")`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it\
    \ with `make_palindrome(\"abba\")`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it\
    \ with `make_palindrome(\"abba\")`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it\
    \ with `make_palindrome(\"abba\")`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string reverse = \"\";\n    string prefix = \"\";\n    int i = 0;\n    int\
    \ j = 0;\n    \n    while(i < string.size() && j < string.size())\n    {\n   \
    \     if(string[i] == string[j])\n        {\n            reverse = reverse + string[i];\n\
    \            i++;\n            j++;\n        }\n        else\n        {\n    \
    \        reverse = reverse + string[j];\n            j++;\n        }\n    }\n\
    \    \n    while(i < string.size())\n    {\n        reverse = reverse + string[i];\n\
    \        i++;\n    }\n    \n    while(j < string.size())\n    {\n        reverse\
    \ = reverse + string[j];\n        j++;\n    }\n    \n    string result = prefix\
    \ + reverse;\n    return result;\n}", "{\n    string result = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        string temp2 = string.substr(i, string.length());\n\
    \        \n        if(temp == temp2)\n        {\n            result += temp;\n\
    \            result += suffix;\n        }\n    }\n    \n    return result;\n}",
  "{\n    int len = string.length();\n    string reverse = \"\";\n    for(int i =\
    \ 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n    string prefix\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    string postfix = \"\";\n    for(int i = 0; i < len; i++)\n    {\n\
    \        postfix += string[i];\n    }\n    string result = prefix + reverse +\
    \ postfix;\n    return result;\n}\n/*\n Find the longest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n \
    \   \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring\
    \ make_palindrome(string string) \n{\n    int len = string.length();\n    string\
    \ reverse = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        reverse +=\
    \ string[i];\n    }\n    string prefix = \"\";\n    for(int i = 0; i < len; i++)\n\
    \    {\n        prefix += string[i];\n    }\n    string postfix = \"\";\n    for(int\
    \ i = 0; i < len; i++)\n    {\n        postfix += string[i];\n    }\n    string\
    \ result = prefix + reverse + postfix;\n    return result;\n}\n/*\n Find the longest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    for(int i = 0; i < len; i++)\n    {\n       \
    \ reverse += string[i];\n    }\n    string prefix = \"\";\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        prefix += string[i];\n    }\n    string postfix\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    string result = prefix + reverse + postfix;\n    return result;\n\
    }\n/*\n Find the longest p", "{\n    int len = string.length();\n    string reverse\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    string prefix = \"\";\n    for(int i = 0; i < len; i++)\n    {\n \
    \       prefix += string[i];\n    }\n    return prefix + reverse;\n}", "{\n  \
    \  string result = string;\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    int length = string.length();\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        if(string[i] == string[length - 1 - i])\n        {\n  \
    \          prefix = prefix + string[i];\n            suffix = string[length -\
    \ 1 - i] + suffix;\n        }\n        else\n        {\n            break;\n \
    \       }\n    }\n    \n    string reverse = reverse(prefix);\n    \n    result\
    \ = result + reverse + suffix;\n    \n    return result;\n}", "{\n    int len\
    \ = string.length();\n    string reverse = \"\";\n    string prefix = \"\";\n\
    \    string suffix = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n  \
    \      string temp = string.substr(0, i);\n        reverse += temp;\n        \n\
    \        if(temp == temp.reverse())\n        {\n            prefix = string.substr(0,\
    \ i);\n            suffix = string.substr(i, len);\n        }\n    }\n    \n \
    \   return prefix + reverse + suffix;\n}", "{\n    string reverse = \"\";\n  \
    \  int length = string.length();\n    for(int i = 0; i < length; i++) \n    {\n\
    \        reverse += string[i];\n    }\n    string postfix = \"\";\n    int postfix_length\
    \ = string.length() - 1;\n    for(int i = 0; i < postfix_length; i++) \n    {\n\
    \        postfix += string[postfix_length - i];\n    }\n    string result = string\
    \ + reverse + postfix;\n    return result;\n}", "{\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    string longest =\
    \ \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(i, 1);\n        reverse += temp;\n        \n        if(temp\
    \ == string[i])\n        {\n            longest = temp;\n        }\n    }\n  \
    \  \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        \n        if(temp == string[i])\n        {\n\
    \            prefix = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            suffix = temp;\n        }\n    }\n   \
    \ \n    return prefix + reverse + suffix;\n}\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| c |>\nThis doesn't work. Try `make_palindrome(\"aba\")`.\n<|/ c |>\n\
    <| c |>\nIt does work, try it yourself. It returns \"aba\" as expected.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for `make_palindrome(\"aba\")`.\n<|/ c |>\n<| c\
    \ |>\nIt does work, try it yourself. It returns \"aba\" as expected.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for `make_palindrome(\"aba\")`.\n<|/ c |>\n<| a |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  string postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\"\
    ;\n    \n    int length = string.length();\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < length; i++)\n    {\n        prefix += string[length - i - 1];\n    }\n\
    \    \n    for(int i = 0; i < length; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        reverse += string[length\
    \ - i - 1];\n    }\n    \n    for(int i = 0; i < length; i++)\n    {\n       \
    \ postfix += reverse;\n    }\n    \n    return postfix;\n}", "{\n    int len =\
    \ string.length();\n    string reverse = \"\";\n    string prefix = \"\";\n  \
    \  string suffix = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n    \
    \    string temp = prefix + string[i];\n        \n        if(temp == temp)\n \
    \       {\n            reverse = reverse + temp;\n            prefix = prefix\
    \ + string[i];\n        }\n        else\n        {\n            reverse = reverse\
    \ + temp;\n            suffix = suffix + string[i];\n        }\n    }\n    \n\
    \    return reverse + suffix;\n}", "{\n    string result = string;\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            postfix += string[i];\n        }\n        else\n        {\n\
    \            prefix += string[i];\n        }\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            postfix += string[i];\n        }\n       \
    \ else\n        {\n            postfix += string[i];\n        }\n    }\n    \n\
    \    for(int i = 0; i < prefix.length(); i++)\n    {\n        result += prefix[i];\n\
    \    }\n    \n    for(int i = 0; i < postfix.length(); i++)\n    {\n        result\
    \ += postfix[i];\n    }\n    \n    return result;\n}", "{\n    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i < string.length())\n\
    \    {\n        string postfix = \"\";\n        while(j < string.length() && string[i]\
    \ != string[j])\n        {\n            postfix += string[j];\n            j++;\n\
    \        }\n        reverse += postfix;\n        i++;\n    }\n    \n    return\
    \ string + reverse;\n}", "{\n    string result = string;\n    int length = string.length();\n\
    \    int i = 0;\n    int j = 0;\n    while(i < length / 2)\n    {\n        if(string[i]\
    \ != string[length - 1 - i])\n        {\n            string temp = string;\n \
    \           string temp2 = string;\n            string temp3 = string;\n     \
    \       string temp4 = string;\n            string temp5 = string;\n         \
    \   string temp6 = string;\n            string temp7 = string;\n            string\
    \ temp8 = string;\n            string temp9 = string;\n            string temp10\
    \ = string;\n            string temp11 = string;\n            string temp12 =\
    \ string;\n            string temp13 = string;\n            string temp14 = string;\n\
    \            string temp15 = string;\n            string temp16 = string;\n  \
    \          string temp17 = string;\n            string temp18 = string;\n    \
    \        string temp19 = string;\n            string temp20 = string;\n      \
    \      string temp21 = string;\n            string temp22 = string;\n        \
    \    string temp23 = string;\n            string temp24 = string;\n          \
    \  string temp25 = string;\n            string temp26 = string;\n            string\
    \ temp27 = string;\n            string temp28 = string;\n            string temp29\
    \ = string;\n            string temp30 = string;\n            string temp31 =\
    \ string;\n            string temp32 = string;\n            string temp33 = string;\n\
    \            string temp34 = string;\n            string temp35 = string;\n  \
    \          string temp36 = string;\n            string temp37 = string;\n    \
    \        string temp38 = string;\n            string temp39 = string;\n      \
    \      string temp40 = string;\n            string temp41 = string;\n        \
    \    string temp42 = string;\n            string temp43 = string;\n          \
    \  string temp44 = string;\n            string temp45 = string;\n            string\
    \ temp46 = string;\n            string temp47 = string;\n            string temp48\
    \ = string;\n            string temp49 = string;\n            string temp50 =\
    \ string;\n            string temp51 = string;\n            string temp52 = string;\n\
    \            string temp53 = string;\n            string temp54 = string;\n  \
    \          string temp55 = string;\n            string temp56 = string;\n    \
    \        string temp57 = string;\n            string temp58 = string;\n      \
    \      string temp59 = string;\n            string temp60 = string;\n        \
    \    string temp61 = string;\n            string temp62 = string;\n          \
    \  string temp63 = string;\n            string temp64 = string;\n            string\
    \ temp65 = string;\n            string temp66 = string;\n            string temp67\
    \ = string;\n            string temp68 = string;\n            string temp69 =\
    \ string;\n            ", "{\n    string reverse = \"\";\n    string prefix =\
    \ \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++) {\n        \n        if(string[i] == string[string.length() - 1 - i]) {\n\
    \            \n            reverse = reverse + string[i];\n            \n    \
    \    } else {\n            \n            prefix = prefix + string[i];\n      \
    \      \n        }\n        \n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++) {\n        \n        if(string[i] == string[string.length() - 1 - i]) {\n\
    \            \n            suffix = suffix + string[i];\n            \n      \
    \  } else {\n            \n            suffix = suffix + string[i];\n        \
    \    \n        }\n        \n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string;\n        temp = temp + string[i];\n        \n        if(isPalindrome(temp))\n\
    \        {\n            reverse = reverse + temp;\n            prefix = prefix\
    \ + string[i];\n            suffix = string[i];\n        }\n    }\n    \n    return\
    \ reverse + prefix + suffix;\n}", "{\n    int len = string.length();\n    string\
    \ reverse = \"\";\n    for(int i = 0; i < len/2; i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    return string + reverse;\n}\n/*\n Find the longest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    for(int i = 0; i < len/2; i++)\n    {\n     \
    \   reverse += string[i];\n    }\n    return string + reverse;\n}\n/*\n Find the\
    \ longest palindrome that begins with a supplied string.\n    Algorithm idea is\
    \ simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    for(int i = 0; i < len/2; i++)\n    {\n     \
    \   reverse += string[i];\n    }\n    return string + reverse;\n}\n/*\n Find the\
    \ longest palindrome that begins with a supplied string.\n    Algorithm idea is\
    \ simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    for(int i = 0; i < len/2; i++)\n    {\n     \
    \   reverse += string[i];\n    }\n    return string ", "{\n    string reverse\
    \ = \"\";\n    int start = 0;\n    int end = 0;\n    \n    while(end < string.length)\n\
    \    {\n        end = string.find_first_of(string[end], start);\n        reverse\
    \ = reverse + string[end];\n        start = end + 1;\n    }\n    \n    return\
    \ reverse + string.substr(start);\n}", "{\n    string result = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string reverse\
    \ = std.string.reverse(temp);\n        \n        if(temp == reverse)\n       \
    \ {\n            prefix = temp;\n            suffix = reverse;\n        }\n  \
    \  }\n    \n    string temp = string.substr(0, string.length() - 1);\n    string\
    \ reverse = std.string.reverse(temp);\n    \n    if(temp == reverse)\n    {\n\
    \        prefix = temp;\n        suffix = reverse;\n    }\n    \n    string palindrome\
    \ = prefix + suffix;\n    \n    return palindrome;\n}", "{\n    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i < string.length())\n\
    \    {\n        if(string[i] == string[j])\n        {\n            i++;\n    \
    \        j++;\n        }\n        else\n        {\n            reverse = reverse\
    \ + string[i];\n            i++;\n            j--;\n        }\n    }\n    return\
    \ reverse + string;\n}", "{\n    int len = string.length();\n    string reverse\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[len\
    \ - 1 - i];\n    }\n    string prefix = \"\";\n    for(int i = 0; i < len; i++)\n\
    \    {\n        prefix += string[i];\n    }\n    return prefix + reverse;\n}",
  "{\n    string result = string;\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length / 2; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    for(int i = length / 2; i >= 0; i--)\n    {\n        reverse += string[i];\n\
    \    }\n    for(int i = 0; i < length; i++)\n    {\n        result += reverse;\n\
    \    }\n    return result;\n}", "{\n    int len = string.length();\n    string\
    \ reverse = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        reverse +=\
    \ string[i];\n    }\n    string prefix = \"\";\n    for(int i = 0; i < len; i++)\n\
    \    {\n        prefix += string[i];\n    }\n    return prefix + reverse;\n}",
  "{\n    string postfix = \"\";\n    string prefix = \"\";\n    string reverse =\
    \ \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n    \
    \    {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != prefix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != reverse[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    return prefix + reverse + postfix;\n}", "{\n    string reverse\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse += string[i];\n    }\n    string prefix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        prefix += string[i];\n    }\n    string\
    \ postfix = \"\";\n    for(int i = length - 1; i >= 0; i--)\n    {\n        postfix\
    \ += string[i];\n    }\n    return prefix + reverse + postfix;\n}\n/*\n Find the\
    \ longest palindrome that begins with a supplied string.\n    Algorithm idea is\
    \ simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        reverse += string[i];\n    }\n    string prefix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        prefix += string[i];\n    }\n    string\
    \ postfix = \"\";\n    for(int i = length - 1; i >= 0; i--)\n    {\n        postfix\
    \ += string[i];\n    }\n    return prefix + reverse + postfix;\n}\n/*\n Find the\
    \ longest palindrome that begins with a supplied string.\n    Algorithm idea is\
    \ simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        reverse += string[i];\n    }\n    string prefix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        prefix += string[i];\n    }\n    string\
    \ postfix = \"\";\n    for(int i = length - 1; i >= 0; i--)\n    {\n        postfix\
    \ += string[i];\n    }\n    return prefix + reverse + postfix;\n}\n/*", "{\n \
    \   string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(0, i);\n        reverse += temp;\n        \n        if(temp\
    \ == temp.reverse())\n        {\n            prefix = string.substr(0, i);\n \
    \           suffix = string.substr(i);\n        }\n    }\n    \n    return prefix\
    \ + reverse + suffix;\n}", "{\n    int len = string.length();\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    string prefix = \"\";\n    for(int i = 0; i < len; i++)\n  \
    \  {\n        prefix += string[i];\n    }\n    \n    string postfix = \"\";\n\
    \    for(int i = len - 1; i >= 0; i--)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    return prefix + reverse + postfix;\n}", "{\n    int len = string.length();\n\
    \    int max_len = len/2;\n    string prefix = string.substr(0,max_len);\n   \
    \ string suffix = string.substr(max_len,len);\n    string reverse = reverse(prefix);\n\
    \    return reverse+suffix;\n}", "{\n    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ if(string[i] == string[string.length() - 1 - i])\n        {\n            postfix\
    \ += string[i];\n        }\n        else\n        {\n            prefix += string[i];\n\
    \        }\n    }\n    \n    return prefix + postfix + reverse(prefix);\n}", "{\n\
    \    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        reverse += string[i];\n    }\n    string\
    \ prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n        prefix +=\
    \ string[i];\n    }\n    string postfix = \"\";\n    for(int i = length - 1; i\
    \ >= 0; i--)\n    {\n        postfix += string[i];\n    }\n    string result =\
    \ prefix + reverse + postfix;\n    return result;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string reverse = \"\";\n  \
    \  int length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        reverse += string[i];\n    }\n    string prefix = \"\";\n    for(int\
    \ i = 0; i < length; i++)\n    {\n        prefix += string[i];\n    }\n    string\
    \ postfix = \"\";\n    for(int i = length - 1; i >= 0; i--)\n    {\n        postfix\
    \ += string[i];\n    }\n    string result = prefix + reverse + postfix;\n    return\
    \ result;\n}\n/*\n Find the longest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        reverse += string[i];\n    }\n    string\
    \ prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n        prefix +=\
    \ string[i];\n    }\n    string postfix = \"\";\n    for(int i = length - 1; i\
    \ >= 0; i--)\n    {\n        postfix += string[i];\n    }\n    string ", "{\n\
    \    string postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n    \
    \    {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != prefix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != reverse[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    return prefix + reverse + postfix;\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        string temp2 = string.substr(i, string.length());\n        \n \
    \       if(temp == temp2)\n        {\n            reverse = reverse + temp;\n\
    \            prefix = prefix + temp;\n            suffix = suffix + temp2;\n \
    \       }\n    }\n    \n    string result = prefix + reverse + suffix;\n    \n\
    \    return result;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        reverse +=\
    \ temp;\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        \n        if(temp == reverse)\n\
    \        {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i\
    \ + 1, string.length() - i - 1);\n        }\n    }\n    \n    return prefix +\
    \ reverse;\n}", "{\n    string reverse = \"\";\n    int i = 0;\n    int j = 0;\n\
    \    while(i < string.length())\n    {\n        while(j < string.length() && string[i]\
    \ == string[j])\n        {\n            j++;\n        }\n        reverse += string[i];\n\
    \        reverse += string[j];\n        i++;\n        j--;\n    }\n    return\
    \ reverse;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\";\n  \
    \  string suffix = \"\";\n    int longest = 0;\n    int i;\n    \n    for(i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longest++;\n        }\n    }\n    \n    for(i\
    \ = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \    }\n    \n    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + \"-\" + string[i];\n        }\n    }\n    \n    for(i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            prefix = prefix + string[i];\n        }\n    }\n    \n   \
    \ return prefix + reverse + suffix;\n}", "{\n    string reverse = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        reverse +=\
    \ temp;\n        \n        if(temp == string[i])\n        {\n            prefix\
    \ = string.substr(0, i);\n            suffix = string.substr(i + 1, string.length()\
    \ - i);\n        }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = string.substr(0, i);\n        suffix = string.substr(i,\
    \ string.length());\n        \n        if(isPalindrome(prefix) && isPalindrome(suffix))\n\
    \        {\n            longest = prefix + suffix;\n        }\n    }\n    \n \
    \   return longest;\n}", "{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length/2; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    reverse += string[length-1];\n    return reverse;\n}", "{\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            postfix = postfix + string[i];\n        }\n        else\n\
    \        {\n            prefix = prefix + string[i];\n        }\n    }\n    \n\
    \    return prefix + postfix + reverse(prefix);\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string postfix = \"\";\n  \
    \  string prefix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            postfix = postfix + string[i];\n        }\n        else\n       \
    \ {\n            prefix = prefix + string[i];\n        }\n    }\n    \n    return\
    \ prefix + postfix + reverse(prefix);\n}\n/*\n Find the longest palindrome that\
    \ begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    - Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    string postfix = \"\";\n  \
    \  string prefix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            postfix = postfix + string[i];\n        }\n        else\n       \
    \ {\n            prefix = prefix + string[i];\n        }\n    }\n    \n    return\
    \ prefix + postfix + reverse(prefix);\n}\n/*\n Find the longest palindrome that\
    \ begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the\
    \ longest postfix of supplied string that ", "{\n    string reverse = \"\";\n\
    \    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        string temp = string;\n        temp\
    \ = temp + string[i];\n        temp = reverse(temp);\n        \n        if(temp\
    \ == string)\n        {\n            reverse = temp;\n            prefix = string;\n\
    \            suffix = string;\n        }\n        else\n        {\n          \
    \  reverse = reverse + temp;\n            prefix = prefix + string[i];\n     \
    \       suffix = suffix + string[i];\n        }\n    }\n    \n    return prefix\
    \ + reverse + suffix;\n}", "{\n    string reverse = \"\";\n    int start = 0;\n\
    \    int end = string.length();\n    while(start < end)\n    {\n        reverse\
    \ = reverse + string[start];\n        start = start + 1;\n        end = end -\
    \ 1;\n    }\n    string result = string;\n    result = result + reverse;\n   \
    \ return result;\n}", "{\n    string result = \"\";\n    string prefix = \"\"\
    ;\n    string suffix = \"\";\n    string reverse = \"\";\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string.substr(string.length() - i, 1))\n \
    \       {\n            suffix = string.substr(i, string.length() - i);\n     \
    \       reverse = string.substr(string.length() - i, string.length() - i);\n \
    \       }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string.substr(string.length()\
    \ - i, 1))\n        {\n            prefix = string.substr(0, i);\n           \
    \ reverse = string.substr(0, i);\n        }\n    }\n    \n    string result =\
    \ prefix + reverse + suffix;\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(i, 1);\n        \n        if(temp == string[i])\n\
    \        {\n            prefix += temp;\n        }\n        else\n        {\n\
    \            suffix += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            reverse += temp;\n        }\n        else\n\
    \        {\n            reverse += temp;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string[i])\n        {\n            result\
    \ += temp;\n        }\n        else\n        {\n            result += temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string[i])\n\
    \        {\n            result += temp;\n        }\n        else\n        {\n\
    \            result += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            result += temp;\n        }\n        else\n\
    \        {\n            result += temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string[i])\n        {\n            result\
    \ += temp;\n        }\n        else\n        {\n            result += temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string[i])\n\
    \        {\n            result += temp;\n        }\n        else\n        {\n\
    \            result += temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            result += temp;\n        }\n        else\n\
    \        {\n            result += temp;\n        }\n    }\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == string[i])\n        {\n            result\
    \ += temp;\n        }\n        else\n        {\n            result += temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string[i])\n\
    \        {\n            result += temp;\n        }", "{\n    string reverse =\
    \ \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \        else\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n        else\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string;\n        temp = temp[i];\n        \n        if(temp ==\
    \ string[i])\n        {\n            reverse = reverse + temp;\n            \n\
    \            if(i == 0)\n            {\n                prefix = string;\n   \
    \         }\n            else\n            {\n                suffix = string;\n\
    \            }\n        }\n        else\n        {\n            reverse = reverse\
    \ + temp;\n        }\n    }\n    \n    string result = prefix + reverse + suffix;\n\
    \    \n    return result;\n}\n/*\n Find the longest palindrome that begins with\
    \ a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    >>>\
    \ make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\
    \n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reverse = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string;\n        temp = temp[i];\n        \n        if(temp\
    \ == string[i])\n        {\n            reverse = reverse + temp;\n          \
    \  \n            if(i == 0)\n            {\n                prefix = string;\n\
    \            }\n            else\n            {\n                suffix = string;\n\
    \            }\n        }\n        else\n        {\n            reverse = reverse\
    \ + temp;\n        }\n    }\n    \n    string result = prefix + reverse + suffix;\n\
    \    \n    return result;\n}\n/*\n Find the longest palindrome that begins with\
    \ a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    >>>\
    \ make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\
    \n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reverse = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        ", "{\n    int len = string.length();\n    string reverse = \"\";\n \
    \   \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i] !=\
    \ reverse[i])\n        {\n            break;\n        }\n    }\n    \n    string\
    \ result = string;\n    result += reverse;\n    \n    return result;\n}\n/*\n\
    \ Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    >>> make_palindrome(\"\")\n \
    \   \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \n*/\nstring make_palindrome(string string) \n{\n\
    \    int len = string.length();\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        if(string[i] != reverse[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    string result = string;\n\
    \    result += reverse;\n    \n    return result;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    >>> make_palindrome(\"\")\n    \"\"\n    >>> make_palindrome(\"\
    cat\")\n    \"catac\"\n    >>> make_palindrome(\"cata\")\n    \"catac\"\n    \n\
    */\nstring make_palindrome(string string) \n{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n \
    \       reverse += string[i];\n    }\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(string[i] != reverse[i])\n        {\n            break;\n \
    \       }\n    }\n    \n    string result = string;\n    result += reverse;\n\
    \    \n    return result;\n}\n/*\n Find the longest palindrome that begins with\
    \ a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
