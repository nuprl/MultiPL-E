name: HumanEval_65_circular_shift
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long remainder;\n    \n    if (shift\
    \ > digits(x))\n    {\n        remainder = x % 10;\n        x /= 10;\n       \
    \ shift -= digits(x);\n        result += to_string(remainder);\n    }\n    \n\
    \    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        shift -= digits(x);\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > __digits__)\n    {\n        shift = __digits__ - shift;\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = (x % __digits__);\n\
    \        x /= __digits__;\n        x <<= 1;\n        x |= remainder;\n       \
    \ shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder = (x\
    \ % __digits__);\n        x /= __digits__;\n        result += __digits__ - remainder;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        shift -= digits(x);\n        \n        while\
    \ (remainder > 0)\n        {\n            result += digits[remainder];\n     \
    \       remainder /= 10;\n        }\n        \n        return result + digits[remainder];\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        shift -= digits(x);\n        \n        result += digits[remainder];\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = n % 10;\n        n = n / 10;\n        result = remainder + result;\n     \
    \   shift--;\n    }\n    \n    if(n < 10)\n    {\n        result = n + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = n;\n    long shift2 = shift;\n    \n    while (m > 0)\n\
    \    {\n        result += (n % 10) + \"\";\n        n /= 10;\n        m -= shift2;\n\
    \        shift2 -= shift;\n    }\n    \n    if (shift2 > 0)\n    {\n        result\
    \ += (n % 10) + \"\";\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while(n > 0)\n    {\n\
    \        long digit = n % 10;\n        result += digits[digit];\n        carry\
    \ = digit + carry;\n        n /= 10;\n    }\n    \n    if(carry > 0)\n       \
    \ result += digits[carry];\n    \n    for(int i = result.length() - 1; i >= shift;\
    \ i--)\n        result[i] = digits[result[i]];\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    if (shift > __digits__)\n\
    \    {\n        shift = __digits__ - shift;\n    }\n    \n    while (shift > 0)\n\
    \    {\n        remainder = (x % 10);\n        x /= 10;\n        x += (shift -=\
    \ __digits__);\n        result += __digits__ - remainder;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long digit;\n    \n    if (shift\
    \ > digits_in_long(x))\n    {\n        digit = x % 10;\n        x /= 10;\n   \
    \     result += digit;\n        \n        while (shift > digits_in_long(x))\n\
    \        {\n            digit = x % 10;\n            x /= 10;\n            result\
    \ += digit;\n            shift -= digits_in_long(x);\n        }\n    }\n    else\n\
    \    {\n        while (shift > digits_in_long(x))\n        {\n            digit\
    \ = x % 10;\n            x /= 10;\n            result += digit;\n            shift\
    \ -= digits_in_long(x);\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = (x % 10);\n        x /= 10;\n        x += (shift -=\
    \ (remainder % 10));\n        result += (remainder < 10 ? remainder + \"0\" :\
    \ remainder + \"\");\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % n;\n    long d = n % m;\n   \
    \ long r = m / n;\n    long s = n % r;\n    long t = m / r;\n    long u = t %\
    \ s;\n    long v = s / t;\n    long w = v % t;\n    long x = v / t;\n    long\
    \ y = w % x;\n    long z = w / x;\n    long a = y % z;\n    long b = z / y;\n\
    \    long c = a % b;\n    long d = b / a;\n    long e = c % d;\n    long f = d\
    \ / c;\n    long g = e % f;\n    long h = f / e;\n    long i = g / f;\n    long\
    \ j = h % i;\n    long k = i / h;\n    long l = j % k;\n    long m = l / j;\n\
    \    long n = m % l;\n    long o = n / m;\n    long p = o % n;\n    long q = p\
    \ / o;\n    long r = q % p;\n    long s = r / q;\n    long t = s % r;\n    long\
    \ u = t / s;\n    long v = u % t;\n    long w = v / u;\n    long x = w % v;\n\
    \    long y = x / w;\n    long z = y % x;\n    long a = z / z;\n    long b = a\
    \ % a;\n    long c = b / a;\n    long d = c % b;\n    long e = d / b;\n    long\
    \ f = e % e;\n    long g = f / e;\n    long h = g / f;\n    long i = h % g;\n\
    \    long j = i / h;\n    long k = j % i;\n    long l = k / j;\n    long m = l\
    \ % k;\n    long n = m / m;\n    long o = n / n;\n    long p = o % o;\n    long\
    \ q = p / o;\n    long r = q % p;\n    long s = r / q;\n    long t = s % r;\n\
    \    long u = t / s;\n    long v = u % t;\n    long w = v / u;\n    long x = w\
    \ % v;\n    long y = x / w;\n    long z = y % x;\n    long a = z / z;\n    long\
    \ b = a % a;\n    long c = b / a;\n    long d = c % b;\n    long e = d / b;\n\
    \    long f = e % e;\n    long g = f / e;\n    long h = g", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n   \
    \ long s = m / r;\n    long t = m % r;\n    \n    for(long i = 0; i < s; ++i)\n\
    \    {\n        result += to_string(t);\n        t += r;\n    }\n    \n    for(long\
    \ i = 0; i < r; ++i)\n    {\n        result += to_string(n);\n        n -= m;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % n;\n    long r = n >> m;\n    long s = n - (r<<m);\n\
    \    \n    while(s > 0)\n    {\n        result = char(r % 10) + result;\n    \
    \    r = r >> 10;\n        s = s >> 10;\n    }\n    \n    while(m > 0)\n    {\n\
    \        result = char(r % 10) + result;\n        r = r >> 10;\n        m = m\
    \ >> 10;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long digit = x;\n    long carry = 0;\n    \n    while (shift > 0)\n    {\n\
    \        digit = digit >> shift;\n        carry = digit & 1;\n        result +=\
    \ char(carry);\n        shift -= 1;\n    }\n    \n    if (carry > 0)\n       \
    \ result += char(carry);\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n   \
    \     {\n            result += to_string(-x);\n            x /= 10;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digits = x;\n    long remainder;\n    \n    while (digits > 0)\n    {\n    \
    \    remainder = digits % 10;\n        digits = digits / 10;\n        result +=\
    \ to_string(remainder);\n    }\n    \n    if (shift > result.length())\n    {\n\
    \        string reversed = result;\n        reversed.reverse();\n        result\
    \ = reversed;\n    }\n    \n    result += (shift - result.length()) * '0';\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        result += remainder;\n    }\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        shift -= digits(x);\n        result += remainder;\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        \n        while (remainder !=\
    \ 0)\n        {\n            result += remainder;\n            x /= 10;\n    \
    \        remainder = x % 10;\n            x /= 10;\n            shift -= digits(x);\n\
    \        }\n    }\n    else\n    {\n        shift -= digits(x);\n    }\n    \n\
    \    while (shift > 0)\n    {\n        result += digit(x);\n        x /= 10;\n\
    \        shift--;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    remainder = digits(x) % shift;\n        \n        while (remainder > 0)\n\
    \        {\n            result += digits(x % 10);\n            x /= 10;\n    \
    \        remainder--;\n        }\n        \n        while (remainder < 0)\n  \
    \      {\n            result += digits(x % 10);\n            x /= 10;\n      \
    \      remainder++;\n        }\n    }\n    else\n    {\n        long remainder;\n\
    \        \n        while ((x > 0) && (shift > 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift--;\n        }\n\
    \        \n        while ((x < 0) && (shift < 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift++;\n        }\n\
    \        \n        while ((x > 0) && (shift > 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift--;\n        }\n\
    \        \n        while ((x < 0) && (shift < 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift++;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = x;\n\
    \        shift = 0;\n    }\n    else\n    {\n        remainder = 0;\n    }\n \
    \   \n    while (shift > 0)\n    {\n        remainder = remainder << 1;\n    \
    \    shift = shift - 1;\n    }\n    \n    while (remainder != 0)\n    {\n    \
    \    result = remainder % 10 + result;\n        remainder = remainder / 10;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (x) {\n        remainder = x%10;\n        result\
    \ += char(remainder);\n        x /= 10;\n    }\n    \n    if (shift > result.length())\n\
    \        result = circular_shift(result, shift-result.length());\n    \n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
