name: HumanEval_65_circular_shift
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long remainder;\n    \n    if (shift\
    \ > digits(x))\n    {\n        remainder = x % 10;\n        x /= 10;\n       \
    \ shift -= digits(x);\n        result += to_string(remainder);\n    }\n    \n\
    \    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        shift -= digits(x);\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > __digits__)\n    {\n        shift = __digits__ - shift;\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = (x % __digits__);\n\
    \        x /= __digits__;\n        x <<= 1;\n        x |= remainder;\n       \
    \ shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder = (x\
    \ % __digits__);\n        x /= __digits__;\n        result += __digits__ - remainder;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        shift -= digits(x);\n        \n        while\
    \ (remainder > 0)\n        {\n            result += digits[remainder];\n     \
    \       remainder /= 10;\n        }\n        \n        return result + digits[remainder];\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        shift -= digits(x);\n        \n        result += digits[remainder];\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = n % 10;\n        n = n / 10;\n        result = remainder + result;\n     \
    \   shift--;\n    }\n    \n    if(n < 10)\n    {\n        result = n + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = n;\n    long shift2 = shift;\n    \n    while (m > 0)\n\
    \    {\n        result += (n % 10) + \"\";\n        n /= 10;\n        m -= shift2;\n\
    \        shift2 -= shift;\n    }\n    \n    if (shift2 > 0)\n    {\n        result\
    \ += (n % 10) + \"\";\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while(n > 0)\n    {\n\
    \        long digit = n % 10;\n        result += digits[digit];\n        carry\
    \ = digit + carry;\n        n /= 10;\n    }\n    \n    if(carry > 0)\n       \
    \ result += digits[carry];\n    \n    for(int i = result.length() - 1; i >= shift;\
    \ i--)\n        result[i] = digits[result[i]];\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    if (shift > __digits__)\n\
    \    {\n        shift = __digits__ - shift;\n    }\n    \n    while (shift > 0)\n\
    \    {\n        remainder = (x % 10);\n        x /= 10;\n        x += (shift -=\
    \ __digits__);\n        result += __digits__ - remainder;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long digit;\n    \n    if (shift\
    \ > digits_in_long(x))\n    {\n        digit = x % 10;\n        x /= 10;\n   \
    \     result += digit;\n        \n        while (shift > digits_in_long(x))\n\
    \        {\n            digit = x % 10;\n            x /= 10;\n            result\
    \ += digit;\n            shift -= digits_in_long(x);\n        }\n    }\n    else\n\
    \    {\n        while (shift > digits_in_long(x))\n        {\n            digit\
    \ = x % 10;\n            x /= 10;\n            result += digit;\n            shift\
    \ -= digits_in_long(x);\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = (x % 10);\n        x /= 10;\n        x += (shift -=\
    \ (remainder % 10));\n        result += (remainder < 10 ? remainder + \"0\" :\
    \ remainder + \"\");\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % n;\n    long d = n % m;\n   \
    \ long r = m / n;\n    long s = n % r;\n    long t = m / r;\n    long u = t %\
    \ s;\n    long v = s / t;\n    long w = v % t;\n    long x = v / t;\n    long\
    \ y = w % x;\n    long z = w / x;\n    long a = y % z;\n    long b = z / y;\n\
    \    long c = a % b;\n    long d = b / a;\n    long e = c % d;\n    long f = d\
    \ / c;\n    long g = e % f;\n    long h = f / e;\n    long i = g / f;\n    long\
    \ j = h % i;\n    long k = i / h;\n    long l = j % k;\n    long m = l / j;\n\
    \    long n = m % l;\n    long o = n / m;\n    long p = o % n;\n    long q = p\
    \ / o;\n    long r = q % p;\n    long s = r / q;\n    long t = s % r;\n    long\
    \ u = t / s;\n    long v = u % t;\n    long w = v / u;\n    long x = w % v;\n\
    \    long y = x / w;\n    long z = y % x;\n    long a = z / z;\n    long b = a\
    \ % a;\n    long c = b / a;\n    long d = c % b;\n    long e = d / b;\n    long\
    \ f = e % e;\n    long g = f / e;\n    long h = g / f;\n    long i = h % g;\n\
    \    long j = i / h;\n    long k = j % i;\n    long l = k / j;\n    long m = l\
    \ % k;\n    long n = m / m;\n    long o = n / n;\n    long p = o % o;\n    long\
    \ q = p / o;\n    long r = q % p;\n    long s = r / q;\n    long t = s % r;\n\
    \    long u = t / s;\n    long v = u % t;\n    long w = v / u;\n    long x = w\
    \ % v;\n    long y = x / w;\n    long z = y % x;\n    long a = z / z;\n    long\
    \ b = a % a;\n    long c = b / a;\n    long d = c % b;\n    long e = d / b;\n\
    \    long f = e % e;\n    long g = f / e;\n    long h = g", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n   \
    \ long s = m / r;\n    long t = m % r;\n    \n    for(long i = 0; i < s; ++i)\n\
    \    {\n        result += to_string(t);\n        t += r;\n    }\n    \n    for(long\
    \ i = 0; i < r; ++i)\n    {\n        result += to_string(n);\n        n -= m;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % n;\n    long r = n >> m;\n    long s = n - (r<<m);\n\
    \    \n    while(s > 0)\n    {\n        result = char(r % 10) + result;\n    \
    \    r = r >> 10;\n        s = s >> 10;\n    }\n    \n    while(m > 0)\n    {\n\
    \        result = char(r % 10) + result;\n        r = r >> 10;\n        m = m\
    \ >> 10;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long digit = x;\n    long carry = 0;\n    \n    while (shift > 0)\n    {\n\
    \        digit = digit >> shift;\n        carry = digit & 1;\n        result +=\
    \ char(carry);\n        shift -= 1;\n    }\n    \n    if (carry > 0)\n       \
    \ result += char(carry);\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n   \
    \     {\n            result += to_string(-x);\n            x /= 10;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ digits = x;\n    long remainder;\n    \n    while (digits > 0)\n    {\n    \
    \    remainder = digits % 10;\n        digits = digits / 10;\n        result +=\
    \ to_string(remainder);\n    }\n    \n    if (shift > result.length())\n    {\n\
    \        string reversed = result;\n        reversed.reverse();\n        result\
    \ = reversed;\n    }\n    \n    result += (shift - result.length()) * '0';\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        result += remainder;\n    }\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        shift -= digits(x);\n        result += remainder;\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        \n        while (remainder !=\
    \ 0)\n        {\n            result += remainder;\n            x /= 10;\n    \
    \        remainder = x % 10;\n            x /= 10;\n            shift -= digits(x);\n\
    \        }\n    }\n    else\n    {\n        shift -= digits(x);\n    }\n    \n\
    \    while (shift > 0)\n    {\n        result += digit(x);\n        x /= 10;\n\
    \        shift--;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n    \
    \    remainder = digits(x) % shift;\n        \n        while (remainder > 0)\n\
    \        {\n            result += digits(x % 10);\n            x /= 10;\n    \
    \        remainder--;\n        }\n        \n        while (remainder < 0)\n  \
    \      {\n            result += digits(x % 10);\n            x /= 10;\n      \
    \      remainder++;\n        }\n    }\n    else\n    {\n        long remainder;\n\
    \        \n        while ((x > 0) && (shift > 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift--;\n        }\n\
    \        \n        while ((x < 0) && (shift < 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift++;\n        }\n\
    \        \n        while ((x > 0) && (shift > 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift--;\n        }\n\
    \        \n        while ((x < 0) && (shift < 0))\n        {\n            result\
    \ += digits(x % 10);\n            x /= 10;\n            shift++;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = x;\n\
    \        shift = 0;\n    }\n    else\n    {\n        remainder = 0;\n    }\n \
    \   \n    while (shift > 0)\n    {\n        remainder = remainder << 1;\n    \
    \    shift = shift - 1;\n    }\n    \n    while (remainder != 0)\n    {\n    \
    \    result = remainder % 10 + result;\n        remainder = remainder / 10;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (x) {\n        remainder = x%10;\n        result\
    \ += char(remainder);\n        x /= 10;\n    }\n    \n    if (shift > result.length())\n\
    \        result = circular_shift(result, shift-result.length());\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while\
    \ (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result\
    \ += to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (x > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = 1;\n    while(m <= shift) {\n        m <<= 1;\n       \
    \ n <<= 1;\n    }\n    while(n > 0) {\n        result += (char)(n % 10);\n   \
    \     n /= 10;\n    }\n    while(m > 0) {\n        result += (char)((n >> m) %\
    \ 10);\n        n >>= m;\n        m <<= 1;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long n = x;\n    long m = 1;\n    long d;\n  \
    \  while(m <= shift)\n    {\n        d = n % m;\n        n /= m;\n        m /=\
    \ m;\n        result += to_string(m);\n        result += to_string(d + 1);\n \
    \   }\n    result += to_string(n);\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n   \
    \ long s = m / r;\n    long t = m % r;\n    \n    for(int i = 0; i < s; i++)\n\
    \    {\n        result += char(x);\n    }\n    \n    for(int i = 0; i < t; i++)\n\
    \    {\n        result += char(x);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digits = (int)std::log10(x);\n    long shift\
    \ = std::abs(shift);\n    long remainder = x % 10;\n    long shiftRight = shift\
    \ % digits;\n    long shiftLeft = shift - shiftRight;\n    long shiftLeftDigits\
    \ = digits - shiftRight;\n    long shiftLeftRemainder = remainder % 10;\n    long\
    \ shiftLeftRemainderDigits = shiftLeftRemainder % digits;\n    long shiftLeftRemainderDigits\
    \ = shiftLeftRemainder / digits;\n    long shiftLeftRemainderRemainder = shiftLeftRemainder\
    \ % 10;\n    long shiftLeftRemainderRemainderDigits = shiftLeftRemainderRemainder\
    \ % digits;\n    long shiftLeftRemainderRemainderDigits = shiftLeftRemainderRemainder\
    \ / digits;\n    long shiftLeftRemainderRemainderRemainder = shiftLeftRemainderRemainder\
    \ % 10;\n    long shiftLeftRemainderRemainderRemainderDigits = shiftLeftRemainderRemainderRemainder\
    \ / digits;\n    long shiftLeftRemainderRemainderRemainderRemainder = shiftLeftRemainderRemainderRemainder\
    \ % 10;\n    long shiftLeftRemainderRemainderRemainderRemainderDigits = shiftLeftRemainderRemainderRemainderRemainder\
    \ / digits;\n    long shiftLeftRemainderRemainderRemainderRemainderRemainder =\
    \ shiftLeftRemainderRemainderRemainderRemainderRemainder % 10;\n    long shiftLeftRemainderRemainderRemainderRemainderRemainderDigits\
    \ = shiftLeftRemainderRemainderRemainderRemainderRemainderRemainder / digits;\n\
    \    long shiftLeftRemainderRemainderRemainderRemainderRemainderRemainder = shiftLeftRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 10;\n    long shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderRemainder /\
    \ digits;\n    long shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 10;\n    long shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderDigits\
    \ = shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / digits;\n    long shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftLeftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 10;\n    long shiftLeft", "{\n    string result = \"\";\n    long n = x;\n\
    \    long carry = 0;\n    \n    while(shift > 0)\n    {\n        carry = n % 10;\n\
    \        n /= 10;\n        result += to_string(carry);\n        shift -= 1;\n\
    \    }\n    \n    while(n>0)\n    {\n        result += to_string(n%10);\n    \
    \    n /= 10;\n    }\n    \n    if(shift > 0)\n    {\n        result += to_string(carry);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder = x % 10;\n    long digit = x % 10;\n    long digits = 1;\n    long\
    \ shifts = 1;\n    \n    while(shift > digits)\n    {\n        shift -= digits;\n\
    \        digits++;\n    }\n    \n    while(shift > 0)\n    {\n        shift -=\
    \ digits;\n        digits++;\n    }\n    \n    while(shift > 0)\n    {\n     \
    \   shift -= digits;\n        digits++;\n    }\n    \n    while(shift > 0)\n \
    \   {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digits;\n        digits++;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        shift -= digit", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long carry = 0;\n    for(long i = 0; i < shift; i++)\n    {\n  \
    \      long digit = n % 10;\n        result += digit;\n        carry = digit *\
    \ 10 + carry;\n        n /= 10;\n    }\n    result += carry;\n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += to_string(remainder);\n        shift--;\n \
    \   }\n    \n    while(shift < 0)\n    {\n        remainder = digit % 10;\n  \
    \      digit = digit / 10;\n        result += to_string(remainder);\n        shift++;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (x) {\n        remainder = x%10;\n        result\
    \ += char(remainder);\n        x /= 10;\n    }\n    \n    if (shift > result.length())\
    \ {\n        shift = result.length();\n    }\n    \n    for (int i = 0; i < shift;\
    \ i++) {\n        result += char(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit;\n    \n    while (shift > 0)\n\
    \    {\n        digit = x % 10;\n        x /= 10;\n        result += (char)digit;\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        digit = x\
    \ % 10;\n        x /= 10;\n        result += (char)(digit + shift);\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long digit = x;\n \
    \   long remainder;\n    \n    while(shift > 0)\n    {\n        remainder = digit\
    \ % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    if (shift > numeric_limits<long>::digits)\n\
    \        shift = numeric_limits<long>::digits;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long d = shift;\n    while (d > 0) {\n        long r = n % 10;\n        result\
    \ += r + \"\";\n        n /= 10;\n        d -= 1;\n    }\n    if (d > 0) {\n \
    \       result += n % 10;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % 10;\n    long d = shift / 10;\n\
    \    \n    while (n > 0)\n    {\n        if (m == 0)\n        {\n            result\
    \ += to_string(n);\n            break;\n        }\n        \n        result +=\
    \ to_string(n%10 + m%10);\n        n = n/10;\n        m = m/10;\n    }\n    \n\
    \    if (d > 0)\n    {\n        result += to_string(n);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    if\
    \ (shift > numeric_limits<long>::digits) {\n        shift = numeric_limits<long>::digits;\n\
    \    }\n    \n    remainder = x % shift;\n    x /= shift;\n    \n    while (x)\
    \ {\n        result += to_string(x);\n        x /= 10;\n    }\n    \n    result\
    \ += to_string(remainder);\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % 10;\n    long r = shift / 10;\n\
    \    \n    for(long i = 0; i < r; ++i)\n    {\n        result += to_string(n%10);\n\
    \        n = n/10;\n    }\n    \n    for(long i = r; i < m; ++i)\n    {\n    \
    \    result += to_string(n%10);\n        n = n/10;\n    }\n    \n    result +=\
    \ to_string(n%10);\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n    long s =\
    \ m / r;\n    long t = m % r;\n    \n    while(s > 0)\n    {\n        result =\
    \ char(t) + result;\n        s -= 1;\n        t += 1;\n    }\n    \n    while(t\
    \ > 0)\n    {\n        result = char(t) + result;\n        t -= 1;\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    \n    while (shift > 0)\n    {\n        if (shift > n)\n       \
    \ {\n            result += n % 10;\n            n = n / 10;\n        }\n     \
    \   else\n        {\n            result += m % 10;\n            m = m / 10;\n\
    \            n = n / 10;\n        }\n        shift -= n;\n    }\n    \n    if\
    \ (n != 0)\n    {\n        result += n % 10;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (x != 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while (x != 0)\n    {\n        remainder = x % 10;\n       \
    \ x /= 10;\n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    if (shift >\
    \ sizeof(long)*8) {\n        shift = (sizeof(long)*8) - shift;\n    }\n    \n\
    \    remainder = x % shift;\n    x /= shift;\n    \n    while (x) {\n        result\
    \ += (char)(x % 10);\n        x /= 10;\n    }\n    \n    result += (char)(remainder);\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = shift % n;\n    long d = n % m;\n    long r = m / n;\n    long s\
    \ = 1;\n    \n    while (d > 0) {\n        result += char(r % 10 + s);\n     \
    \   r /= 10;\n        s *= 10;\n        d /= 10;\n    }\n    \n    while (m >\
    \ 0) {\n        result += char(r % 10 + s);\n        r /= 10;\n        s *= 10;\n\
    \        m /= 10;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > 64) \n    {\n        shift\
    \ = 64;\n    }\n    \n    remainder = x % shift;\n    \n    while (shift > 0)\n\
    \    {\n        result += (char)((remainder % 10) + '0');\n        remainder =\
    \ (remainder / 10) % shift;\n        shift--;\n    }\n    \n    result += (remainder\
    \ + '0');\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (shift > 0)\n    {\n        remainder = (x % 10);\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while (x > 0)\n    {\n        remainder = (x % 10);\n      \
    \  x /= 10;\n        result += to_string(remainder);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = shift\
    \ % n;\n    long r = shift / n;\n    \n    while (r > 0) {\n        result +=\
    \ n % 10;\n        n /= 10;\n        r /= 10;\n    }\n    \n    while (m > 0)\
    \ {\n        result += n % 10;\n        n /= 10;\n        m /= 10;\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long i = 0;\n    \n    while (n != 0) {\n        long r\
    \ = m % 10;\n        result += char(r);\n        m /= 10;\n        n -= r;\n \
    \       i++;\n    }\n    \n    if (shift > i) {\n        long r = m % 10;\n  \
    \      result += char(r);\n        m /= 10;\n        n -= r;\n        i -= shift;\n\
    \    }\n    \n    while (i >= 0) {\n        result += char(n % 10);\n        n\
    \ /= 10;\n        i -= 1;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    long m = shift % 10;\n    long r = shift / 10;\n    \n   \
    \ while (n > 0)\n    {\n        long tmp = n % 10;\n        result += string(tmp)\
    \ + string(m);\n        n = n / 10;\n        m += r;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n\
    \    long d;\n    \n    while (m != 0) {\n        d = n % m;\n        n /= m;\n\
    \        m /= 10;\n        result += char(d);\n    }\n    \n    long s = n;\n\
    \    long r = 1;\n    \n    while (s != 0) {\n        d = s / 10;\n        s %=\
    \ 10;\n        r <<= 1;\n        r |= d;\n    }\n    \n    r >>= shift;\n    \n\
    \    while (shift > 0 && r != 0) {\n        d = r % 10;\n        r /= 10;\n  \
    \      result += (char)d;\n        shift -= 1;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    if(x < 0)\n   \
    \ {\n        while(shift > 0)\n        {\n            remainder = x % 10;\n  \
    \          x /= 10;\n            result += to_string(remainder);\n           \
    \ shift -= 1;\n        }\n        \n        result += \"0\";\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long remainder;\n  \
    \  \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder;\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   if(x < 0)\n    {\n        result += to_string(-x);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    if\
    \ (shift > digits(x))\n    {\n        shift = digits(x);\n    }\n    \n    remainder\
    \ = (x % shift);\n    \n    while (shift > 0)\n    {\n        result += digits[remainder];\n\
    \        remainder = (remainder % shift);\n        shift--;\n    }\n    \n   \
    \ result += digits[remainder];\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder =\
    \ x % 10;\n        x /= 10;\n        result += to_string(remainder);\n       \
    \ shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long remainder;\n    \n    while (x) {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n    }\n    \n    while\
    \ (shift) {\n        remainder = shift % 10;\n        shift /= 10;\n        result\
    \ += to_string(remainder);\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    while (shift) {\n        remainder = shift % 10;\n        shift /=\
    \ 10;\n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += string(remainder);\n        shift -= 1;\n \
    \   }\n    \n    while(shift < 0)\n    {\n        remainder = digit % 10;\n  \
    \      digit = digit / 10;\n        result += string(remainder);\n        shift\
    \ += 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder\
    \ = x;\n        \n        while (shift > digits(remainder))\n        {\n     \
    \       remainder <<= 1;\n            shift -= digits(remainder);\n        }\n\
    \        \n        result += to_string(remainder);\n    }\n    else\n    {\n \
    \       remainder = x;\n        \n        while (shift > 0)\n        {\n     \
    \       remainder >>= 1;\n            shift -= digits(remainder);\n        }\n\
    \        \n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    if(x < 0)\n   \
    \ {\n        while(x < 0)\n        {\n            result += to_string(-x);\n \
    \           x /= 10;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n  \
    \  {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        \n        while (remainder >\
    \ 0)\n        {\n            result += to_string(remainder);\n            x /=\
    \ 10;\n            shift -= digits(x);\n            remainder = x % 10;\n    \
    \        x /= 10;\n        }\n        \n        return result + to_string(x);\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        shift -= digits(x);\n        \n        while (remainder\
    \ > 0)\n        {\n            result += to_string(remainder);\n            x\
    \ /= 10;\n            shift -= digits(x);\n            remainder = x % 10;\n \
    \           x /= 10;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long digits = x;\n    long remainder = x % 10;\n\
    \    long shiftDigits = shift;\n    \n    while(shiftDigits > 0)\n    {\n    \
    \    shiftDigits--;\n        digits = digits*10 + remainder;\n        remainder\
    \ = x % 10;\n        x = x / 10;\n    }\n    \n    while(digits > 0)\n    {\n\
    \        result += digits;\n        digits--;\n        x = x / 10;\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long d = 1;\n    long shift2\
    \ = shift;\n    \n    while (shift2 > 0)\n    {\n        shift2 /= 10;\n     \
    \   d *= 10;\n    }\n    \n    while (n > 0)\n    {\n        result += (char)(n\
    \ % d);\n        n /= d;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long digit;\n    \n    while (n != 0) {\n        digit =\
    \ n % 10;\n        result += char(digit);\n        n /= 10;\n    }\n    \n   \
    \ long shiftDigits = shift;\n    \n    while (shiftDigits > 0) {\n        digit\
    \ = n % 10;\n        result += char(digit);\n        n /= 10;\n        shiftDigits--;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % n;\n    long r = n % m;\n    long s = m / r;\n\
    \    long t = m % r;\n    \n    while(s > 0)\n    {\n        result = to_string(s%10)\
    \ + result;\n        s = s/10;\n    }\n    \n    while(r > 0)\n    {\n       \
    \ result = to_string(r%10) + result;\n        r = r/10;\n    }\n    \n    result\
    \ = to_string(s) + result;\n    \n    if(t > 0)\n    {\n        result = to_string(t\
    \ % 10) + result;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n      \
    \  remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n      \
    \  result += remainder;\n    }\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        shift -= digits(x);\n        result +=\
    \ remainder;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder =\
    \ x % 10;\n        x /= 10;\n        result += to_string(remainder);\n       \
    \ shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n     \
    \   {\n            remainder = x % 10;\n            x /= 10;\n            result\
    \ += to_string(remainder);\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = n % m;\n    long s = m / r;\n    long t = m % r;\n    \n    while(s > 0)\n\
    \    {\n        result += (char)('0' + t);\n        s -= 10;\n        t /= 10;\n\
    \    }\n    \n    while(t > 0)\n    {\n        result += (char)('0' + t);\n  \
    \      t /= 10;\n    }\n    \n    result += (char)(('0' + r));\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while\
    \ (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result\
    \ += to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (x !=\
    \ 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (x) {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n    \n\
    \    if (shift > result.length())\n        return result + to_string(x % 10);\n\
    \    \n    string reversed = \"\";\n    \n    for (long i = result.length() -\
    \ 1; i >= 0; i--)\n        reversed += result[i];\n    \n    return shift == 0\
    \ ? reversed : circular_shift(shift, shift + 1) + reversed;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n\
    \        remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n\
    \        result += remainder;\n    }\n    \n    while (shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n   \
    \     result += remainder;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder =\
    \ x % 10;\n        x /= 10;\n        result += to_string(remainder);\n       \
    \ shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long n = x;\n    long m = 1;\n    long r = 1;\n    long tmp;\n    \n\
    \    while (n > 0)\n    {\n        tmp = n % 10;\n        result += tmp;\n   \
    \     n /= 10;\n    }\n    \n    long shift2 = shift;\n    while (shift2 > 0)\n\
    \    {\n        tmp = n % 10;\n        result += tmp;\n        n /= 10;\n    \
    \    shift2 -= 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long carry = 0;\n    \n    while (shift > 0)\n\
    \    {\n        long digit = n % 10;\n        result += digits[digit];\n     \
    \   carry = digit * 10 + carry;\n        n /= 10;\n        shift -= 1;\n    }\n\
    \    \n    if (carry)\n        result += digits[carry];\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digits = digits(x);\n    long shiftDigits\
    \ = digits(shift);\n    long shiftBits = bits(shift);\n    long shiftBitsRemaining\
    \ = shiftBits % digits;\n    long shiftBitsRemainingBits = shiftBitsRemaining\
    \ % shiftBits;\n    long shiftBitsRemainingBitsBits = shiftBitsRemainingBits %\
    \ shiftBits;\n    long shiftBitsRemainingBitsBitsBits = shiftBitsRemainingBitsBits\
    \ % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBits = shiftBitsRemainingBitsBitsBits\
    \ % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBits = shiftBitsRemainingBitsBitsBitsBits\
    \ % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBits = shiftBitsRemainingBitsBitsBitsBits\
    \ % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBitsBits = shiftBitsRemainingBitsBitsBitsBits\
    \ % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBitsBitsBits =\
    \ shiftBitsRemainingBitsBitsBitsBits % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = shiftBitsRemainingBitsBitsBitsBits % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = shiftBitsRemainingBitsBitsBitsBits % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = shiftBitsRemainingBitsBitsBitsBits % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = shiftBitsRemainingBitsBitsBitsBits % shiftBits;\n    long shiftBitsRemainingBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = ", "{\n    string result = \"\";\n    long remainder;\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (x > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = x %\
    \ 10;\n        x /= 10;\n        shift -= digits(x);\n        \n        while\
    \ (remainder != 0)\n        {\n            result += remainder;\n            x\
    \ /= 10;\n            shift -= digits(x);\n            remainder = x % 10;\n \
    \           x /= 10;\n        }\n    }\n    else\n    {\n        while ((x > 0)\
    \ && (shift > 0))\n        {\n            result += (x % 10) + 48;\n         \
    \   x /= 10;\n            shift -= digits(x);\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = n;\n\
    \    long temp;\n    \n    while (m > 0)\n    {\n        temp = m % 10;\n    \
    \    m /= 10;\n        if (shift > 0)\n        {\n            result += (temp\
    \ + shift) % 10;\n        }\n        else\n        {\n            result += temp;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > 64) \n    {\n        shift = (64 - shift);\n    }\n   \
    \ \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   if (x < 0)\n    {\n        result += to_string(-x);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n\
    \    long shift2 = shift;\n    while(shift2 > 0)\n    {\n        m <<= 1;\n  \
    \      shift2 >>= 1;\n    }\n    while(m > 0)\n    {\n        n <<= 1;\n     \
    \   m >>= 1;\n    }\n    while(n > 0)\n    {\n        result += (char)(n % 10);\n\
    \        n /= 10;\n    }\n    while(m > 0)\n    {\n        result += (char)(n\
    \ % 10);\n        n /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `circular_shift(-12, 2)`\
    \ returns `-121`.\n<|/ c |>\n<| a tags=c++,algorithm,bit-manipulation |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <bitset>\nusing namespace std;",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n\
    \        {\n            result += to_string(-x);\n            x /= 10;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long n = x;\n    long carry = 0;\n    \n    while (shift > 0)\n    {\n    \
    \    long digit = n % 10;\n        result += digits[digit];\n        carry = digit\
    \ * 10 + carry;\n        n /= 10;\n        shift -= 1;\n    }\n    \n    if (carry\
    \ > 0)\n    {\n        result += digits[carry];\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += char(remainder);\n        shift -= 1;\n   \
    \ }\n    \n    if(digit > 0)\n    {\n        result += char(digit);\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long digits =\
    \ (int)digits(x);\n    long shift = shift % digits;\n    long remainder = x %\
    \ digits;\n    long digit = remainder;\n    \n    while(shift > 0)\n    {\n  \
    \      digit = digit * 10 + remainder;\n        remainder = digit % 10;\n    \
    \    digit = digit / 10;\n        shift = shift - 1;\n    }\n    \n    while(shift\
    \ < digits)\n    {\n        digit = remainder;\n        remainder = digit % 10;\n\
    \        digit = digit / 10;\n        shift = shift + 1;\n    }\n    \n    result\
    \ += digit;\n    \n    return result;\n}\n/*\nReturn the number of digits of x.\n\
    */\nlong digits(long x) \n{\n    long digits = 0;\n    \n    while(x > 0)\n  \
    \  {\n        digits = digits + 1;\n        x = x / 10;\n    }\n    \n    return\
    \ digits;\n}\n/*\nReturn the number of digits of x.\n*/\nlong digits(string x)\
    \ \n{\n    long digits = 0;\n    \n    for(auto it = x.cbegin(); it != x.cend();\
    \ ++it)\n    {\n        digits = digits + 1;\n    }\n    \n    return digits;\n\
    }\n/*\nReturn the number of digits of x.\n*/\nlong digits(string x, int radix)\
    \ \n{\n    long digits = 0;\n    \n    for(auto it = x.cbegin(); it != x.cend();\
    \ ++it)\n    {\n        digits = digits + 1;\n    }\n    \n    return digits;\n\
    }\n/*\nReturn the number of digits of x.\n*/\nlong digits(string x, char radix)\
    \ \n{\n    long digits = 0;\n    \n    for(auto it = x.cbegin(); it != x.cend();\
    \ ++it)\n    {\n        digits = digits + 1;\n    }\n    \n    return digits;\n\
    }\n/*\nReturn the number of digits of x.\n*/\nlong digits(string x, char radix,\
    \ int radix_digits) \n{\n    long digits = 0;\n    \n    for(auto it = x.cbegin();\
    \ it != x.cend(); ++it)\n    {\n        digits = digits + 1;\n    }\n    \n  \
    \  return digits;\n}\n/*\nReturn the number of digits of x.\n*/\nlong digits(string\
    \ x, char radix, int radix_digits, int radix_digits_digits) \n{\n    long digits\
    \ = 0;\n    \n    for(auto it = x.cbegin(); it != x.cend(); ++it)\n    {\n   \
    \     digits = digits + 1;\n    }\n    ", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        shift = digits(x);\n\
    \    }\n    \n    remainder = x % 10;\n    x /= 10;\n    \n    while (shift >\
    \ 0)\n    {\n        result += remainder;\n        shift -= 1;\n        remainder\
    \ = x % 10;\n        x /= 10;\n    }\n    \n    if (remainder > 0)\n    {\n  \
    \      result += remainder;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % 10;\n    long d = shift\
    \ / 10;\n    while (n > 0)\n    {\n        long r = n % 10;\n        result +=\
    \ r + d;\n        n = n / 10;\n        d = d / 10;\n    }\n    if (shift > 0)\n\
    \    {\n        string reversed = result;\n        reversed.reverse();\n     \
    \   result += reversed;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n   \
    \ long s = m / r;\n    long t = m % r;\n    \n    while(s > 0)\n    {\n      \
    \  result += (char)('0' + t);\n        s -= 10;\n        t /= 10;\n    }\n   \
    \ \n    while(t > 0)\n    {\n        result += (char)('0' + t);\n        t -=\
    \ 10;\n    }\n    \n    if(m > 0)\n    {\n        result += (char)('0' + m);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long carry = 0;\n    \n    while(shift > 0)\n    {\n        long\
    \ digit = n % 10;\n        result += digits[digit];\n        carry = digit * 10\
    \ + carry;\n        n /= 10;\n        shift -= 1;\n    }\n    \n    if(carry >\
    \ 0)\n        result += digits[carry];\n    \n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r\
    \ = n % m;\n    long s = m / r;\n    long t = m % r;\n    \n    while(s > 0)\n\
    \    {\n        result += (char)('0' + t);\n        s -= 10;\n        t /= 10;\n\
    \    }\n    \n    while(t > 0)\n    {\n        result += (char)('0' + t);\n  \
    \      t -= 10;\n    }\n    \n    result += (char)('0' + r);\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    if\
    \ (shift > x.digits.length)\n    {\n        shift = x.digits.length - shift;\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x /= 10;\n        result += to_string(remainder);\n        shift--;\n   \
    \ }\n    \n    while (x.digits.length - shift > 0)\n    {\n        remainder =\
    \ x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (x) {\n        remainder = x % 10;\n        x /= 10;\n      \
    \  if (remainder > shift) {\n            result += remainder - shift;\n      \
    \  } else {\n            result += remainder;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = shift\
    \ % n;\n    long d = n % m;\n    long r = m / d;\n    long s = shift / d;\n  \
    \  long t = n % m;\n    long u = m / t;\n    long v = shift / t;\n    long w =\
    \ t % m;\n    long x = r * s;\n    long y = r * t;\n    long z = u * v;\n    long\
    \ a = z * w;\n    long b = z * x;\n    long c = y * x;\n    long d = y * z;\n\
    \    long e = x * z;\n    long f = u * z;\n    long g = v * w;\n    long h = v\
    \ * x;\n    long i = w * x;\n    long j = w * u;\n    long k = x * u;\n    long\
    \ l = x * v;\n    long m = u * v;\n    long n = v * w;\n    long o = w * v;\n\
    \    long p = v * x;\n    long q = w * u;\n    long r = v * v;\n    long s = w\
    \ * w;\n    long t = x * w;\n    long u = x * x;\n    long v = u * x;\n    long\
    \ w = v * u;\n    long x = v * v;\n    long y = w * v;\n    long z = w * w;\n\
    \    long a = x * y;\n    long b = y * z;\n    long c = z * a;\n    long d = a\
    \ * c;\n    long e = b * d;\n    long f = c * e;\n    long g = d * f;\n    long\
    \ h = e * g;\n    long i = f * h;\n    long j = g * i;\n    long k = h * j;\n\
    \    long l = i * k;\n    long m = j * l;\n    long n = k * m;\n    long o = l\
    \ * n;\n    long p = m * o;\n    long q = n * p;\n    long r = o * q;\n    long\
    \ s = p * r;\n    long t = q * s;\n    long u = s * t;\n    long v = t * u;\n\
    \    long w = u * v;\n    long x = v * w;\n    long y = w * x;\n    long z = x\
    \ * y;\n    long a = y * z;\n    long b = z * a;\n    long c = a * b;\n    long\
    \ d = b * c;\n    long e = c * d;\n    long f = d * e;\n    long g = e * f;\n\
    \    long h = f * g;\n    long i = g * h;\n    long j = h * i;\n    long k = i\
    \ * ", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(x != 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % n;\n    long d = n % m;\n    long r = m / n;\n\
    \    string s = \"\";\n    \n    while(d > 0)\n    {\n        s = to_string(n\
    \ % 10) + s;\n        n = m % n;\n        m = m / 10;\n        d = d / 10;\n \
    \   }\n    \n    while(m > 0)\n    {\n        s = to_string(n % 10) + s;\n   \
    \     n = m % n;\n        m = m / 10;\n    }\n    \n    while(n > 0)\n    {\n\
    \        s = to_string(n % 10) + s;\n        n = n / 10;\n    }\n    \n    while(d\
    \ > 0)\n    {\n        s = to_string(n % 10) + s;\n        n = m % n;\n      \
    \  m = m / 10;\n        d = d / 10;\n    }\n    \n    while(m > 0)\n    {\n  \
    \      s = to_string(n % 10) + s;\n        n = m % n;\n        m = m / 10;\n \
    \   }\n    \n    while(n > 0)\n    {\n        s = to_string(n % 10) + s;\n   \
    \     n = n / 10;\n    }\n    \n    while(d > 0)\n    {\n        s = to_string(n\
    \ % 10) + s;\n        n = m % n;\n        m = m / 10;\n        d = d / 10;\n \
    \   }\n    \n    while(m > 0)\n    {\n        s = to_string(n % 10) + s;\n   \
    \     n = m % n;\n        m = m / 10;\n    }\n    \n    while(n > 0)\n    {\n\
    \        s = to_string(n % 10) + s;\n        n = n / 10;\n    }\n    \n    while(d\
    \ > 0)\n    {\n        s = to_string(n % 10) + s;\n        n = m % n;\n      \
    \  m = m / 10;\n        d = d / 10;\n    }\n    \n    while(m > 0)\n    {\n  \
    \      s = to_string(n % 10) + s;\n        n = m % n;\n        m = m / 10;\n \
    \   }\n    \n    while(n > 0)\n    {\n        s = to_string(n % 10) + s;\n   \
    \     n = n / 10;\n    }\n    \n    while(d > 0)\n    {\n        s = to_string(n\
    \ % 10) + s;\n        n = m % n;\n        m = m / 10;\n        d = d / 10;\n \
    \   }\n    \n    while(m > 0)\n    {\n        s = to_string(n % 10) + s;\n   \
    \     n = m % n;\n        m = m / 10;\n    }\n    \n    while(n > 0)\n    {\n\
    \        s = to_string(n % 10) + s;\n        n = n / 10;\n    }\n    \n    while(d\
    \ > 0)\n    {\n        s = to_string(n % 10) + s;\n        n = m % n;\n      \
    \  m = m / 10;\n        d = d ", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long digits = x;\n    long shift = shift;\n \
    \   while (shift > digits) {\n        shift -= digits;\n        result += digits;\n\
    \        digits = 0;\n    }\n    digits = x;\n    while (shift > digits) {\n \
    \       shift -= digits;\n        result += digits;\n        digits = 0;\n   \
    \ }\n    result += digits;\n    return result;\n}", "{\n    string result = \"\
    \";\n    long n = x;\n    long m = 1;\n    \n    while (m <= shift) {\n      \
    \  n += m;\n        m <<= 1;\n    }\n    \n    while (n > 0) {\n        result\
    \ += (char)(n % 10);\n        n /= 10;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > length(x)) \n    {\n        shift = length(x);\n    }\n\
    \    \n    remainder = x % shift;\n    x /= shift;\n    \n    while (x != 0)\n\
    \    {\n        result += char(x % 10);\n        x /= 10;\n    }\n    \n    result\
    \ += char(remainder);\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long digit = x;\n    long remainder;\n    \n    while(shift > 0)\n  \
    \  {\n        remainder = digit % 10;\n        digit = digit / 10;\n        result\
    \ += to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(shift\
    \ < 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift += 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long remainder;\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n \
    \       result += to_string(remainder);\n        shift -= 1;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long digit = x;\n  \
    \  long remainder;\n    \n    while(shift > 0)\n    {\n        remainder = digit\
    \ % 10;\n        digit = digit / 10;\n        result += string(remainder);\n \
    \       shift--;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += string(remainder);\n\
    \        shift--;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    if (shift > __digits__) \n    {\n  \
    \      shift = __digits__ - shift;\n    }\n    \n    remainder = __mod__(x,shift);\n\
    \    \n    while (remainder > 0)\n    {\n        result = __digits__ - remainder\
    \ + result;\n        remainder = __mod__(x,shift);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = 1;\n    long digit;\n    \n    while\
    \ (n != 0) {\n        digit = n % 10;\n        n /= 10;\n        if (shift > m)\
    \ {\n            result += digit;\n            m += 1;\n        } else {\n   \
    \         result += digit;\n            m -= 1;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    if\
    \ (shift > length(x)) \n    {\n        shift = length(x);\n    }\n    \n    while\
    \ (shift > 0) \n    {\n        remainder = x % 10;\n        x /= 10;\n       \
    \ result += to_string(remainder);\n        shift -= 1;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n\
    \    long d = 1;\n    long r = 1;\n    long carry = 0;\n    \n    while (m !=\
    \ 0)\n    {\n        long temp = n / m;\n        long temp2 = temp * m;\n    \
    \    long temp3 = temp2 * m;\n        long temp4 = temp3 * m;\n        long temp5\
    \ = temp4 * m;\n        long temp6 = temp5 * m;\n        long temp7 = temp6 *\
    \ m;\n        long temp8 = temp7 * m;\n        long temp9 = temp8 * m;\n     \
    \   long temp10 = temp9 * m;\n        long temp11 = temp10 * m;\n        long\
    \ temp12 = temp11 * m;\n        long temp13 = temp12 * m;\n        long temp14\
    \ = temp13 * m;\n        long temp15 = temp14 * m;\n        long temp16 = temp15\
    \ * m;\n        long temp17 = temp16 * m;\n        long temp18 = temp17 * m;\n\
    \        long temp19 = temp18 * m;\n        long temp20 = temp19 * m;\n      \
    \  long temp21 = temp20 * m;\n        long temp22 = temp21 * m;\n        long\
    \ temp23 = temp22 * m;\n        long temp24 = temp23 * m;\n        long temp25\
    \ = temp24 * m;\n        long temp26 = temp25 * m;\n        long temp27 = temp26\
    \ * m;\n        long temp28 = temp27 * m;\n        long temp29 = temp28 * m;\n\
    \        long temp30 = temp29 * m;\n        long temp31 = temp30 * m;\n      \
    \  long temp32 = temp31 * m;\n        long temp33 = temp32 * m;\n        long\
    \ temp34 = temp33 * m;\n        long temp35 = temp34 * m;\n        long temp36\
    \ = temp35 * m;\n        long temp37 = temp36 * m;\n        long temp38 = temp37\
    \ * m;\n        long temp39 = temp38 * m;\n        long temp40 = temp39 * m;\n\
    \        long temp41 = temp40 * m;\n        long temp42 = temp41 * m;\n      \
    \  long temp43 = temp42 * m;\n        long temp44 = temp43 * m;\n        long\
    \ temp45 = temp44 * m;\n        long temp46 = temp45 * m;\n        long temp47\
    \ = temp46 * m;\n        long temp48 = temp47 * m;\n        long temp49 = temp48\
    \ * m;\n        long ", "{\n    string result = \"\";\n    long digits = digits(x);\n\
    \    long remainder = x % 10;\n    long shiftDigits = digits - shift;\n    long\
    \ shiftRemainder = remainder % 10;\n    long shiftRemainderDigits = shiftRemainder\
    \ / 10;\n    long shiftRemainderRemainder = shiftRemainder % 10;\n    \n    for(long\
    \ i = 0; i < shiftDigits; i++)\n    {\n        result += digits[shiftRemainderRemainder];\n\
    \        shiftRemainderRemainder = shiftRemainderRemainder / 10;\n    }\n    \n\
    \    result += digits[shiftRemainderRemainder];\n    \n    return result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. `circular_shift(-12,\
    \ 2)` returns `-121`.\n<|/ c |>\n<| c |>\nI fixed the negative numbers. I didn't\
    \ test it thoroughly but I think it works.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    string circular_shift(long x, int shift) {\n    string result = \"\";\n    long\
    \ digits = digits(x);\n    long remainder = x % 10;\n    long shiftDigits = digits\
    \ - shift;\n    long shiftRemainder = remainder % 10;\n    long shiftRemainderDigits\
    \ = shiftRemainder / 10;\n    long shiftRemainderRemainder = shiftRemainder %\
    \ 10;\n    \n    for(long i = 0; i < shiftDigits; i++) {\n        result += digits[shiftRemainderRemainder];\n\
    \        shiftRemainderRemainder = shiftRemainderRemainder / 10;\n    }\n    \n\
    \    result += digits[shiftRemainderRemainder];\n    \n    return result;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `circular_shift(-12, 2)` returns `-121`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the negative numbers. I didn't test it thoroughly but I think it works.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers. `circular_shift(-12,\
    \ 2)` returns `-121`.\n<|/ c |>\n<| c |>\nI fixed the negative numbers. I didn't\
    \ test it thoroughly but I think it works.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\n#include <cmath>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   while (x != 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n   \
    \     result += to_string(remainder);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long n = x;\n    long carry = 0;\n    \n    while (shift > 0)\n \
    \   {\n        long digit = n % 10;\n        result += digit;\n        carry =\
    \ digit * 10 + carry;\n        n /= 10;\n        shift -= 1;\n    }\n    \n  \
    \  if (carry)\n        result += digit;\n    \n    return result;\n}", "{\n  \
    \  string result = \"\";\n    long remainder;\n    \n    if (shift > __digits__)\
    \ \n    {\n        shift = __digits__ - shift;\n    }\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = (x % 10);\n        x /= 10;\n        x += (shift\
    \ -= __digits__);\n        result += (char)(remainder);\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    if\
    \ (shift > digits(x))\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        shift -= digits(x);\n        result += to_string(remainder);\n    }\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        shift -= digits(x);\n        result += to_string(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while (x != 0)\n    {\n        remainder = x % 10;\n       \
    \ x /= 10;\n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digits = digits(x);\n    long shift\
    \ = shift % digits;\n    long remainder = x % digits;\n    long i = 1;\n    \n\
    \    while (i < digits) {\n        result += to_string(remainder);\n        remainder\
    \ = remainder / 10;\n        i++;\n    }\n    \n    while (shift > 0) {\n    \
    \    result += to_string(remainder);\n        remainder = remainder / 10;\n  \
    \      shift--;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long digit = x;\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = digit % 10;\n        digit = digit / 10;\n       \
    \ result += to_string(remainder);\n        shift -= 1;\n    }\n    \n    while\
    \ (shift < 0)\n    {\n        remainder = digit % 10;\n        digit = digit /\
    \ 10;\n        result += to_string(remainder);\n        shift += 1;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    if(x < 0)\n    {\n        while(x < 0)\n        {\n            result\
    \ += to_string(-x % 10);\n            x /= 10;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ remainder;\n        shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n\
    \        result += x % 10;\n        x /= 10;\n        shift -= 1;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long digits = (int)std::log10(x);\n    long shift\
    \ = std::abs(shift);\n    long shifts = shift > digits ? digits - shift : shift;\n\
    \    long remain = x % 10;\n    long carry = 0;\n    \n    for(long i = 0; i <\
    \ shifts; ++i)\n    {\n        long digit = remain + carry;\n        carry = 0;\n\
    \        \n        for(long j = 0; j < digit; ++j)\n        {\n            carry\
    \ = digits[j] >= 10;\n            digits[j] = digits[j] - 10;\n        }\n   \
    \     \n        result += to_string(carry + digit);\n    }\n    \n    for(long\
    \ i = 0; i < digits; ++i)\n    {\n        result += to_string(carry + remain);\n\
    \        carry = 0;\n        remain = x % 10;\n    }\n    \n    result += to_string(carry\
    \ + remain);\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long m = shift % n;\n    long r = n % m;\n    long s = m / r;\n\
    \    long t = m % r;\n    \n    for(long i = 0; i < s; i++)\n    {\n        result\
    \ += char(x);\n        x /= 10;\n    }\n    \n    for(long i = 0; i < t; i++)\n\
    \    {\n        result += char(x);\n        x /= 10;\n    }\n    \n    result\
    \ += char(x);\n    \n    return result;\n}", "{\n    string result = \"\";\n \
    \   long digit = x;\n    long digits = 1;\n    while (shift > digits) {\n    \
    \    shift -= digits;\n        result += digit;\n        digit = x % 10;\n   \
    \     digits++;\n    }\n    while (shift > 0) {\n        result += digit;\n  \
    \      shift -= digits;\n        digit = x % 10;\n        digits++;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ m = 1;\n    long temp;\n    \n    while(n > 0)\n    {\n        temp = n % 10;\n\
    \        n = n / 10;\n        result += temp;\n        m += m;\n    }\n    \n\
    \    while(m > 0)\n    {\n        temp = m % 10;\n        m = m / 10;\n      \
    \  result += temp;\n        n += n;\n    }\n    \n    while(shift > 0)\n    {\n\
    \        temp = n % 10;\n        n = n / 10;\n        result += temp;\n      \
    \  shift -= 1;\n    }\n    \n    while(n > 0)\n    {\n        temp = n % 10;\n\
    \        n = n / 10;\n        result += temp;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n    long\
    \ carry = 0;\n    \n    while (shift > 0)\n    {\n        long digit = n % 10;\n\
    \        result += digits[digit];\n        n /= 10;\n        shift -= 1;\n   \
    \ }\n    \n    while (n > 0)\n    {\n        long digit = n % 10;\n        result\
    \ += digits[digit];\n        n /= 10;\n    }\n    \n    if (carry > 0)\n     \
    \   result += digits[carry];\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while(shift > 0)\n    {\n        remainder =\
    \ x % 10;\n        x /= 10;\n        result += to_string(remainder);\n       \
    \ shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (x) {\n        remainder = x % 10;\n        x /= 10;\n      \
    \  result += remainder;\n    }\n    \n    if (shift > result.length())\n     \
    \   return result + reverse(result.substr(result.length() - shift));\n    \n \
    \   return result + reverse(result);\n}", "{\n    string result = \"\";\n    long\
    \ n = x;\n    long carry = 0;\n    \n    while (shift > 0)\n    {\n        long\
    \ digit = n % 10;\n        carry = digit + carry;\n        n /= 10;\n        shift\
    \ -= 1;\n    }\n    \n    if (carry > 0)\n    {\n        result += to_string(carry);\n\
    \    }\n    \n    while (n > 0)\n    {\n        long digit = n % 10;\n       \
    \ result += to_string(digit);\n        n /= 10;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    if(x < 0)\n   \
    \ {\n        while(shift > 0)\n        {\n            remainder = x % 10;\n  \
    \          x /= 10;\n            result += to_string(remainder);\n           \
    \ shift -= 1;\n        }\n        \n        result += to_string(x);\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long digits =\
    \ digits(x);\n    long shift = shift % digits;\n    long remainder = x % digits;\n\
    \    \n    if (shift > digits)\n    {\n        shift = digits;\n    }\n    \n\
    \    for (long i = 0; i < shift; i++)\n    {\n        result += (char)((x >> i)\
    \ & 1);\n    }\n    \n    for (long i = 0; i < remainder; i++)\n    {\n      \
    \  result += (char)((x >> i) & 1);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (x) {\n     \
    \   remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    if (shift > result.length())\n        result = to_string(result.length()\
    \ - shift) + result;\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long n = x;\n    long m = shift % n;\n    long r = n >> m;\n    long\
    \ s = n - (r<<m);\n    while(s > 0)\n    {\n        result = char(r % 10) + result;\n\
    \        r = r >> 10;\n        s = s >> 10;\n    }\n    while(m > 0)\n    {\n\
    \        result = char(r % 10) + result;\n        r = r >> 10;\n        m = m\
    \ >> 10;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > x.digits.length)\n        shift = x.digits.length\
    \ - shift;\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n\
    \        x /= 10;\n        result += to_string(remainder);\n        shift -= 1;\n\
    \    }\n    \n    while (x.digits.length - shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = shift % n;\n    long r = n % m;\n    long s = m / r;\n    long t\
    \ = m % r;\n    \n    while(s > 0)\n    {\n        result = to_string(s) + result;\n\
    \        s -= 1;\n    }\n    \n    while(t > 0)\n    {\n        result = to_string(s)\
    \ + result + to_string(t % 10);\n        t /= 10;\n    }\n    \n    if(shift >\
    \ n)\n    {\n        result = to_string(s) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += to_string(digit) + to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(digit)\
    \ + to_string(remainder);\n        shift += 1;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(shift > 0)\n\
    \    {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder = x\
    \ % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > numeric_limits<long>::digits)\n        shift = numeric_limits<long>::digits;\n\
    \    \n    remainder = x % shift;\n    \n    while (shift > 0)\n    {\n      \
    \  result += (char)((x % shift) + ord('0'));\n        x /= shift;\n        shift\
    \ /= 10;\n    }\n    \n    if (remainder > 0)\n        result += (char)(remainder\
    \ + ord('0'));\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long digit = x;\n    long remainder;\n    \n    while(shift > 0)\n    {\n\
    \        remainder = digit % 10;\n        digit = digit / 10;\n        result\
    \ += to_string(remainder);\n        shift -= 1;\n    }\n    \n    while(shift\
    \ < 0)\n    {\n        remainder = digit % 10;\n        digit = digit / 10;\n\
    \        result += to_string(remainder);\n        shift += 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ m = n;\n    long temp;\n    \n    while (shift > 0)\n    {\n        temp = m\
    \ % 10;\n        m = m / 10;\n        result = temp + result;\n        shift--;\n\
    \    }\n    \n    while (m > 0)\n    {\n        temp = m % 10;\n        m = m\
    \ / 10;\n        result = temp + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long n = x;\n    long m = 1;\n    long shift2\
    \ = shift;\n    \n    while (n > 0)\n    {\n        long digit = n % 10;\n   \
    \     result += digit;\n        n /= 10;\n        m += shift2;\n        shift2\
    \ -= m;\n    }\n    \n    if (shift > 0)\n    {\n        string reversed = result;\n\
    \        reversed.reverse();\n        result += reversed;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while\
    \ (shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result\
    \ += to_string(remainder);\n        shift -= 1;\n    }\n    \n    while (x !=\
    \ 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        result += to_string(-x);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder = x;\n\
    \        \n        while (shift > digits(remainder))\n        {\n            remainder\
    \ = remainder % 10;\n            shift--;\n        }\n        \n        while\
    \ (remainder > 0)\n        {\n            result += digits[remainder];\n     \
    \       remainder = remainder / 10;\n        }\n        \n        return result;\n\
    \    }\n    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n    \
    \    x = x / 10;\n        result += digits[remainder];\n        shift--;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > digits(x))\n    {\n        remainder = x % 10;\n      \
    \  x /= 10;\n        shift -= digits(x);\n        \n        while (remainder !=\
    \ 0)\n        {\n            result += to_string(remainder);\n            remainder\
    \ = x % 10;\n            x /= 10;\n            shift -= digits(x);\n        }\n\
    \        \n        return result + to_string(x);\n    }\n    \n    while (shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        shift -=\
    \ digits(x);\n        \n        result += to_string(remainder);\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long digits = digits(x);\n\
    \    long shift = shift % digits;\n    long remainder = x % digits;\n    \n  \
    \  while (remainder != 0) {\n        result += char(remainder % 10);\n       \
    \ remainder = remainder / 10;\n    }\n    \n    while (shift != 0) {\n       \
    \ result += string(digits, 0);\n        shift -= digits;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long carry\
    \ = 0;\n    \n    while (shift > 0)\n    {\n        long digit = n % 10;\n   \
    \     carry = digit + carry;\n        n = n / 10;\n        shift = shift - 1;\n\
    \    }\n    \n    if (carry > 0)\n    {\n        result += to_string(carry);\n\
    \    }\n    \n    while (n > 0)\n    {\n        long digit = n % 10;\n       \
    \ result += to_string(digit);\n        n = n / 10;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += string(remainder);\n        shift--;\n    }\n\
    \    \n    while(shift < 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += string(remainder);\n        shift++;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift -= 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long digits = x;\n\
    \    long remainder;\n    \n    while(shift > digits)\n    {\n        shift -=\
    \ digits;\n        digits = x;\n        x /= 10;\n    }\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ char(remainder);\n        shift -= 1;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (x) {\n    \
    \    remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \    }\n    \n    while (shift) {\n        remainder = shift % 10;\n        shift\
    \ /= 10;\n        result += to_string(remainder);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digit = x;\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = digit % 10;\n       \
    \ digit = digit / 10;\n        result += to_string(remainder);\n        shift--;\n\
    \    }\n    \n    while (shift < 0)\n    {\n        remainder = digit % 10;\n\
    \        digit = digit / 10;\n        result += to_string(remainder);\n      \
    \  shift++;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long n = x;\n    long m = 1;\n    long shift2 = shift;\n    \n    while\
    \ (shift2 > 0)\n    {\n        m <<= 1;\n        shift2 >>= 1;\n    }\n    \n\
    \    while (m > 0)\n    {\n        n >>= 1;\n        m >>= 1;\n        result\
    \ += char(n);\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long n = x;\n    long m = shift % n;\n    long r = n % m;\n    long s\
    \ = n - m;\n    long t = x;\n    \n    while(s > 0)\n    {\n        result +=\
    \ (char)((t % 10) + '0');\n        t = t / 10;\n        s = s - 1;\n    }\n  \
    \  \n    while(m > 0)\n    {\n        result += (char)((r % 10) + '0');\n    \
    \    r = r / 10;\n        m = m - 1;\n    }\n    \n    while(t > 0)\n    {\n \
    \       result += (char)((t % 10) + '0');\n        t = t / 10;\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ carry = 0;\n    \n    while (shift > 0)\n    {\n        long digit = n % 10;\n\
    \        result += digits[digit] + carry;\n        carry = digit << 1;\n     \
    \   shift -= 1;\n        n /= 10;\n    }\n    \n    if (carry != 0)\n        result\
    \ += digits[carry];\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long remainder;\n    \n    if (shift > digits(x))\n    {\n        remainder\
    \ = x;\n        shift = 0;\n    }\n    else\n    {\n        remainder = x % 10;\n\
    \        shift = shift % digits(x);\n    }\n    \n    while (shift > 0)\n    {\n\
    \        result += digits[remainder];\n        remainder = remainder / 10;\n \
    \       shift = shift / 10;\n    }\n    \n    result += digits[remainder];\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long shift2 = shift;\n    \n    while (n != 0) {\n     \
    \   long r = n % 10;\n        result += r;\n        n /= 10;\n        m += m;\n\
    \        shift2 += shift2;\n    }\n    \n    m %= 10;\n    result += (m << shift2);\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    if (shift > numeric_limits<long>::digits) {\n        shift = numeric_limits<long>::digits;\n\
    \    }\n    \n    remainder = x % shift;\n    x /= shift;\n    \n    while (x\
    \ != 0) {\n        result += to_string(x);\n        x /= 10;\n    }\n    \n  \
    \  result += to_string(remainder);\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n   \
    \     remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while(shift < 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift += 1;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder = x % 10;\n    long digit = x % 10;\n    long digits\
    \ = 1;\n    long carry = 0;\n    \n    while(shift > digits) {\n        digit\
    \ = remainder % 10;\n        remainder = remainder / 10;\n        digits = digits\
    \ + 1;\n        carry = 1;\n    }\n    \n    while(shift > digits) {\n       \
    \ digit = remainder % 10;\n        remainder = remainder / 10;\n        digits\
    \ = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift > digits) {\n\
    \        digit = remainder % 10;\n        remainder = remainder / 10;\n      \
    \  digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift > digits)\
    \ {\n        digit = remainder % 10;\n        remainder = remainder / 10;\n  \
    \      digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n    }\n    \n    while(shift\
    \ > digits) {\n        digit = remainder % 10;\n        remainder = remainder\
    \ / 10;\n        digits = digits + 1;\n        carry = 1;\n", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long m = 1;\n    long r = 1;\n    long tmp;\n\
    \    \n    while(n > 0)\n    {\n        tmp = n % 10;\n        result += tmp;\n\
    \        n = n / 10;\n    }\n    \n    while(shift > 0)\n    {\n        tmp =\
    \ result % 10;\n        result = result / 10;\n        result = result + tmp;\n\
    \        shift = shift / 10;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n    {\n  \
    \      remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x != 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = n;\n    long r = n;\n    long s = 1;\n    long t = 0;\n    long\
    \ i = 0;\n    \n    while (m != 0) {\n        long digit = m % 10;\n        m\
    \ /= 10;\n        \n        if (i == shift) {\n            result += digit;\n\
    \            s += 1;\n        }\n        \n        if (s > 0) {\n            t\
    \ += digit;\n            s -= 1;\n        }\n        \n        i++;\n    }\n \
    \   \n    if (r > 0) {\n        result += t;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(shift\
    \ > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n        shift -= 1;\n    }\n    \n    if(x < 0)\n   \
    \ {\n        while(x < 0)\n        {\n            result += to_string(-x % 10);\n\
    \            x /= 10;\n        }\n    }\n    \n    return result;\n}", "{\n  \
    \  string result = \"\";\n    long remainder;\n    \n    while (shift > 0)\n \
    \   {\n        remainder = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n\
    \        shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = n;\n    long shift2 = shift;\n    long shift3 = shift2;\n    long\
    \ shift4 = shift3;\n    long shift5 = shift4;\n    long shift6 = shift5;\n   \
    \ long shift7 = shift6;\n    long shift8 = shift7;\n    long shift9 = shift8;\n\
    \    long shift10 = shift9;\n    long shift11 = shift10;\n    long shift12 = shift11;\n\
    \    long shift13 = shift12;\n    long shift14 = shift13;\n    long shift15 =\
    \ shift14;\n    long shift16 = shift15;\n    long shift17 = shift16;\n    long\
    \ shift18 = shift17;\n    long shift19 = shift18;\n    long shift20 = shift19;\n\
    \    long shift21 = shift20;\n    long shift22 = shift21;\n    long shift23 =\
    \ shift22;\n    long shift24 = shift23;\n    long shift25 = shift24;\n    long\
    \ shift26 = shift25;\n    long shift27 = shift26;\n    long shift28 = shift27;\n\
    \    long shift29 = shift28;\n    long shift30 = shift29;\n    long shift31 =\
    \ shift30;\n    long shift32 = shift31;\n    long shift33 = shift32;\n    long\
    \ shift34 = shift33;\n    long shift35 = shift34;\n    long shift36 = shift35;\n\
    \    long shift37 = shift36;\n    long shift38 = shift37;\n    long shift39 =\
    \ shift38;\n    long shift40 = shift39;\n    long shift41 = shift40;\n    long\
    \ shift42 = shift41;\n    long shift43 = shift42;\n    long shift44 = shift43;\n\
    \    long shift45 = shift44;\n    long shift46 = shift45;\n    long shift47 =\
    \ shift46;\n    long shift48 = shift47;\n    long shift49 = shift48;\n    long\
    \ shift50 = shift49;\n    long shift51 = shift50;\n    long shift52 = shift51;\n\
    \    long shift53 = shift52;\n    long shift54 = shift53;\n    long shift55 =\
    \ shift54;\n    long shift56 = shift55;\n    long shift57 = shift56;\n    long\
    \ shift58 = shift57;\n    long shift59 = shift58;\n    long shift", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = shift % n;\n    long r = shift\
    \ / n;\n    \n    while (r > 0) {\n        result += to_string(n);\n        n\
    \ += m;\n        r--;\n    }\n    \n    while (n > 0) {\n        result += to_string(n);\n\
    \        n--;\n    }\n    \n    return result;\n}", "{\n    string result = \"\
    \";\n    long digits = digits(x);\n    long shift = shift % digits;\n    long\
    \ remainder = x % digits;\n    \n    for(long i = 0; i < shift; ++i)\n    {\n\
    \        result += digits[remainder];\n        remainder = (remainder + digits[remainder])\
    \ % digits;\n    }\n    \n    result += digits[remainder];\n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    if (shift >\
    \ digits(x))\n    {\n        remainder = x % 10;\n        x /= 10;\n        shift\
    \ -= digits(x);\n        result += remainder;\n    }\n    \n    while (shift >\
    \ 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n        shift -= digits(x);\n\
    \        result += remainder;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long digits = digits(x);\n    long shift = shift % digits;\n\
    \    long remainder = x % digits;\n    long i = 1;\n    \n    while(i < shift)\
    \ {\n        result += digits[i];\n        i++;\n    }\n    \n    result += digits[remainder];\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long n = x;\n\
    \    long m = 1;\n    long digit;\n    \n    while (n != 0) {\n        digit =\
    \ n % 10;\n        n /= 10;\n        m <<= 1;\n        if (m > shift) {\n    \
    \        m -= shift;\n            result += (char)('0' + digit);\n        } else\
    \ {\n            result += (char)(digit + '0');\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while\
    \ (x) {\n        remainder = x % 10;\n        x /= 10;\n        result += remainder;\n\
    \    }\n    \n    while (shift) {\n        remainder = shift % 10;\n        shift\
    \ /= 10;\n        result += remainder;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digits = 1;\n    \n    while (shift > digits)\
    \ {\n        digits = digits*10;\n        shift -= digits;\n    }\n    \n    while\
    \ (digits > 0) {\n        long digit = x % 10;\n        result += (char)digit;\n\
    \        x /= 10;\n        digits--;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digit = x;\n    long remainder;\n    \n \
    \   while(shift > 0)\n    {\n        remainder = digit % 10;\n        digit =\
    \ digit / 10;\n        result += char(remainder);\n        shift--;\n    }\n \
    \   \n    while(shift < 0)\n    {\n        remainder = digit % 10;\n        digit\
    \ = digit / 10;\n        result += char(remainder);\n        shift++;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while (shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while (x > 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    while (x) {\n    \
    \    remainder = x%10;\n        result += to_string(remainder);\n        x /=\
    \ 10;\n    }\n    \n    while (shift) {\n        remainder = x%10;\n        result\
    \ += to_string(remainder);\n        x /= 10;\n        shift -= 1;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(shift > 0)\n    {\n        remainder = x % 10;\n        x /=\
    \ 10;\n        result += to_string(remainder);\n        shift -= 1;\n    }\n \
    \   \n    while(shift < 0)\n    {\n        remainder = x % 10;\n        x /= 10;\n\
    \        result += to_string(remainder);\n        shift += 1;\n    }\n    \n \
    \   return result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long\
    \ m = shift % n;\n    long r = n % m;\n    long s = m / r;\n    long t = m % r;\n\
    \    \n    for(int i = 0; i < s; i++)\n    {\n        result += to_string(t);\n\
    \        t += r;\n    }\n    \n    for(int i = 0; i < r; i++)\n    {\n       \
    \ result += to_string(n);\n        n -= m;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long remainder;\n    \n    if (shift > digits(x))\n\
    \    {\n        remainder = x;\n        \n        while (shift > digits(remainder))\n\
    \        {\n            remainder = remainder % 10;\n            shift--;\n  \
    \      }\n        \n        result = to_string(remainder);\n    }\n    else\n\
    \    {\n        while (shift > 0)\n        {\n            remainder = x % 10;\n\
    \            x = x / 10;\n            \n            if (shift > digits(x))\n \
    \           {\n                remainder = x;\n                \n            \
    \    while (shift > digits(remainder))\n                {\n                  \
    \  remainder = remainder % 10;\n                    shift--;\n               \
    \ }\n                \n                result = to_string(remainder) + result;\n\
    \            }\n            else\n            {\n                result = to_string(remainder)\
    \ + result;\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long digit;\n    \n    while (shift > 0)\n   \
    \ {\n        digit = x % 10;\n        x /= 10;\n        result += digit;\n   \
    \     shift -= 1;\n    }\n    \n    while (x > 0)\n    {\n        digit = x %\
    \ 10;\n        x /= 10;\n        result += digit;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long digits = (int)std::log10(x);\n   \
    \ long shift = std::abs(shift);\n    long remainder;\n    \n    if (shift > digits)\n\
    \    {\n        shift = digits;\n    }\n    \n    for (long i = digits; i >= shift;\
    \ i--)\n    {\n        remainder = x % 10;\n        x /= 10;\n        result +=\
    \ to_string(remainder);\n    }\n    \n    if (shift < digits)\n    {\n       \
    \ string reversed = result;\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back();\n\
    \        reversed.pop_back();\n        reversed.pop_back();\n        reversed.pop_back",
  "{\n    string result = \"\";\n    long n = x;\n    long m = shift % n;\n    long\
    \ r = n % m;\n    long s = m / r;\n    long t = m % r;\n    long i = 1;\n    \n\
    \    while(i < s) {\n        result += to_string(t);\n        t += r;\n      \
    \  i++;\n    }\n    \n    while(i >= 0) {\n        result += to_string(t);\n \
    \       t -= r;\n        i--;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long n = x;\n    long m = n;\n    long shift2 = shift;\n\
    \    \n    while (m != 0) {\n        m >>= 1;\n        shift2 += 1;\n    }\n \
    \   \n    while (shift2 > 0) {\n        result += n % 10;\n        n /= 10;\n\
    \        shift2 -= 1;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long n = x;\n    long remainder;\n    \n    while (shift > 0)\n\
    \    {\n        remainder = n % 10;\n        n = n / 10;\n        result += char(remainder);\n\
    \        shift--;\n    }\n    \n    while (n > 0)\n    {\n        remainder =\
    \ n % 10;\n        n = n / 10;\n        result += char(remainder);\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long digit = x;\n\
    \    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder = digit\
    \ % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = digit % 10;\n        digit = digit / 10;\n        result += to_string(remainder);\n\
    \        shift--;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(shift > 0)\n    {\n        remainder\
    \ = x % 10;\n        x /= 10;\n        result += to_string(remainder);\n     \
    \   shift -= 1;\n    }\n    \n    if(x < 0)\n    {\n        while(x < 0)\n   \
    \     {\n            result += to_string(-x);\n            x /= 10;\n        }\n\
    \    }\n    \n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
