name: HumanEval_93_encode
language: d
prompt: "import std.math;\n/*\n\n    Write a function that takes a message, and encodes\
  \ in such a \n    way that it swaps case of all letters, replaces all vowels in\
  \ \n    the message with the letter that appears 2 places ahead of that \n    vowel\
  \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n  \
  \  >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n \
  \   \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n"
tests: "unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\"\
  ) == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"\
  YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C\
  \ MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW\
  \ wHcT Tq wRkTg\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) \n    {\n        char c = message[i];\n        result += toupper(c);\n\
    \    }\n    for(int i = 0; i < message.length(); i++) \n    {\n        char c\
    \ = message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++) \n    {\n        char c = message[i];\n        result\
    \ += toupper(c);\n        result += tolower(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++) \n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n        result += toupper(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++) \n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \    }\n    for(int i = 0; i < message.length(); i++) \n    {\n        char c\
    \ = message[i];\n        result += tolower(c);\n        result += tolower(c);\n\
    \        result += tolower(c);\n        result += toupper(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++) \n    {\n        char c = message[i];\n  \
    \      result += tolower(c);\n        result += tolower(c);\n        result +=\
    \ tolower(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \    }\n    for(int i = 0; i < message.length(); i++) \n    {\n        char c\
    \ = message[i];\n        result += tolower(c);\n        result += tolower(c);\n\
    \        result += tolower(c);\n        result += tolower(c);\n        result\
    \ += tolower(c);\n        result += toupper(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++) \n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n        result += tolower(c);\n        result += tolower(c);\n\
    \        result += tolower(c);\n        result += tolower(c);\n        result\
    \ += tolower(c);\n        result += toupper(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++) \n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n        result += tolower(c);\n        result += tolower(c);\n\
    \        result += tolower(c);\n        result += tolower(c);\n        result\
    \ += tolower(c);\n        result += toupper(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++) \n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n        result += tolower(c);\n        result += tolower(c);\n\
    \        result += tolower(c);\n        result += tolower(c);\n        result\
    \ += tolower(c);\n        result += toupper(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++) \n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n        result += to", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     char nextLetter = message[i+1];\n        \n        if(isalpha(c))\n    \
    \    {\n            result += toupper(c);\n            result += toupper(nextLetter);\n\
    \        }\n        else\n        {\n            result += c;\n            result\
    \ += nextLetter;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThanks for the answer! I understand your solution, but I wanted\
    \ to do it without using any libraries. I guess I should have mentioned that in\
    \ my question. Sorry about that.\n<|/ c |>\n<| c |>\nNo problem. I've added a\
    \ solution without using any libraries.\n<|/ c |>\n<| c |>\nThanks for the answer!\
    \ I understand your solution, but I wanted to do it without using any libraries.\
    \ I guess I should have mentioned that in my question. Sorry about that.\n<|/\
    \ c |>\n<| c |>\nNo problem. I've added a solution without using any libraries.\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>\n#include <cstring>", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n  \
    \  {\n        char c = message[i];\n        char nextLetter = message[i+1];\n\
    \        \n        if(isalpha(c))\n        {\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            {\n                result\
    \ += nextLetter;\n            }\n            else\n            {\n           \
    \     result += toupper(c);\n            }\n        }\n        else\n        {\n\
    \            result += c;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. Try it on \"This is a message\".\n<|/ c\
    \ |>\n<| c |>\nI tested it on \"This is a message\" and it worked. Are you sure\
    \ you copied the code correctly?\n<|/ c |>\n<| c |>\nI tested it on \"This is\
    \ a message\" and it worked. Are you sure you copied the code correctly?\n<|/\
    \ c |>\n<| c |>\nI tested it on \"This is a message\" and it worked. Are you sure\
    \ you copied the code correctly?\n<|/ c |>\n<| c |>\nI tested it on \"This is\
    \ a message\" and it worked. Are you sure you copied the code correctly?\n<|/\
    \ c |>\n<| a tags=c++ |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += toupper(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n\
    \    {\n        char c = message[i];\n        result += tolower(c);\n    }\n \
    \   for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n\
    \        result += toupper(c);\n        result += tolower(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += tolower(c);\n        result += toupper(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += tolower(c);\n        result += toupper(c);\n        result +=\
    \ tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n    {\n \
    \       char c = message[i];\n        result += tolower(c);\n        result +=\
    \ toupper(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \    }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n        result += toupper(c);\n\
    \        result += tolower(c);\n        result += toupper(c);\n        result\
    \ += tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n    {\n\
    \        char c = message[i];\n        result += tolower(c);\n        result +=\
    \ toupper(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \        result += tolower(c);\n        result += toupper(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += tolower(c);\n        result += toupper(c);\n        result +=\
    \ tolower(c);\n        result += toupper(c);\n        result += tolower(c);\n\
    \        result += toupper(c);\n        result += tolower(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += tolower(c);\n        result += toupper(c);\n        result +=\
    \ tolower(c);\n        result += toupper(c);\n        result += tolower(c);\n\
    \        result += toupper(c);\n        result += tolower(c);\n        result\
    \ += toupper(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n    {\n\
    \        char c = message[i];\n        result += tolower(c);\n        result +=\
    \ toupper(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \        result += tolower(c);\n        result += toupper(c);\n        result\
    \ += tolower(c);\n        result += toupper(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++)\n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n        result += to", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += toupper(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n\
    \    {\n        char c = message[i];\n        result += tolower(c);\n    }\n \
    \   for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n\
    \        result += toupper(c);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you very much! This was very helpful!\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    map<string,string> m;\n    for(int i=0;i<message.length();i++)\n\
    \    {\n        string temp=message[i];\n        m[temp]=temp;\n    }\n    for(int\
    \ i=0;i<message.length();i++)\n    {\n        string temp=message[i];\n      \
    \  string temp2=m[temp];\n        for(int j=0;j<temp2.length();j++)\n        {\n\
    \            if(temp2[j]=='a' || temp2[j]=='e' || temp2[j]=='i' || temp2[j]=='o'\
    \ || temp2[j]=='u')\n            {\n                temp2[j]=temp2[j+1];\n   \
    \         }\n        }\n        m[temp]=temp2;\n    }\n    string temp;\n    for(int\
    \ i=0;i<message.length();i++)\n    {\n        temp=m[message[i]];\n        message[i]=temp;\n\
    \    }\n    return message;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThank\
    \ you so much for your help. I really appreciate it. I will try this out and let\
    \ you know how it goes.\n<|/ c |>\n<| c |>\nI edited my post to show what I have\
    \ so far. I am not sure how to implement your suggestions though. I am still a\
    \ beginner at C++.\n<|/ c |>\n<| c |>\nI edited my post to show what I have so\
    \ far. I am not sure how to implement your suggestions though. I am still a beginner\
    \ at C++.\n<|/ c |>\n<| c |>\nI edited my post to show what I have so far. I am\
    \ not sure how to implement your suggestions though. I am still a beginner at\
    \ C++.\n<|/ c |>\n<| c |>\nI edited my post to show what I have so far. I am not\
    \ sure how to implement your suggestions though. I am still a beginner at C++.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += (tolower(c) == c) ? toupper(c) : tolower(c);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I understand\
    \ that my code was a little bit too complicated. I am still a beginner at programming\
    \ and I really appreciate your help.\n<|/ c |>\n<| c |>\nNo problem. Good luck\
    \ with your coding!\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>\nusing namespace std;", "{\n    string result =\
    \ \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c\
    \ = message[i];\n        switch(c)\n        {\n            case 'a':\n       \
    \     case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n                result += \"A\";\n                break;\n           \
    \ case 'b':\n            case 'f':\n            case 'n':\n            case 'r':\n\
    \            case 't':\n                result += \"B\";\n                break;\n\
    \            case 'c':\n            case 'd':\n            case 'g':\n       \
    \     case 'h':\n            case 'j':\n                result += \"C\";\n   \
    \             break;\n            case 'e':\n            case 'f':\n         \
    \   case 'g':\n            case 'h':\n            case 'i':\n                result\
    \ += \"D\";\n                break;\n            case 'f':\n            case 'g':\n\
    \            case 'h':\n            case 'i':\n                result += \"E\"\
    ;\n                break;\n            case 'g':\n            case 'h':\n    \
    \        case 'i':\n                result += \"F\";\n                break;\n\
    \            case 'h':\n            case 'i':\n                result += \"G\"\
    ;\n                break;\n            case 'i':\n                result += \"\
    H\";\n                break;\n            case 'j':\n                result +=\
    \ \"I\";\n                break;\n            case 'k':\n                result\
    \ += \"K\";\n                break;\n            case 'l':\n                result\
    \ += \"L\";\n                break;\n            case 'm':\n                result\
    \ += \"M\";\n                break;\n            case 'n':\n                result\
    \ += \"N\";\n                break;\n            case 'o':\n                result\
    \ += \"O\";\n                break;\n            case 'p':\n                result\
    \ += \"P\";\n                break;\n            case 'q':\n                result\
    \ += \"Q\";\n                break;\n            case 'r':\n                result\
    \ += \"R\";\n                break;\n            case 's':\n                result\
    \ += \"S\";\n                break;\n            case 't':\n                result\
    \ += \"T\";\n                break;\n            case 'u':\n                result\
    \ += \"U\";\n                break;\n            case 'v':\n                result\
    \ += \"V\";\n                break;\n            case 'w':\n                result\
    \ += \"W\";\n                break;\n            case 'x':\n                result\
    \ += \"X\";\n                break;\n            case 'y':\n                result\
    \ += \"Y\";\n                break;\n            case 'z':\n                result\
    \ += \"Z\";\n                break;\n            default:\n                result\
    \ += c;\n                break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI see what you did there, but I still don't understand\
    \ how you did it. Can you explain it to me?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThank you so much! I really\
    \ appreciate it", "{\n    string result = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        result += toupper(c);\n    }\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        result += toupper(c);\n    }\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        result += tolower(c);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI didn't downvote, but this doesn't answer the question. The OP\
    \ wants to know how to swap case and replace vowels.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote, but this doesn't answer the question. The OP wants to know how to\
    \ swap case and replace vowels.\n<|/ c |>\n<| c |>\nI didn't downvote, but this\
    \ doesn't answer the question. The OP wants to know how to swap case and replace\
    \ vowels.\n<|/ c |>\n<| c |>\nI didn't downvote, but this doesn't answer the question.\
    \ The OP wants to know how to swap case and replace vowels.\n<|/ c |>\n<| c |>\n\
    I didn't downvote, but this doesn't answer the question. The OP wants to know\
    \ how to swap case and replace vowels.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n  \
    \  {\n        char c = message[i];\n        result += toupper(c);\n    }\n   \
    \ for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n\
    \        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \       result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \       result += tolower(c);\n        result += toupper(c);\n        result +=\
    \ tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n    {\n \
    \       char c = message[i];\n        result += toupper(c);\n        result +=\
    \ tolower(c);\n        result += toupper(c);\n        result += tolower(c);\n\
    \        result += toupper(c);\n        result += tolower(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += toupper(c);\n        result += tolower(c);\n        result +=\
    \ toupper(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \        result += tolower(c);\n        result += toupper(c);\n        result\
    \ += tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n    {\n\
    \        char c = message[i];\n        result += toupper(c);\n        result +=\
    \ tolower(c);\n        result += toupper(c);\n        result += tolower(c);\n\
    \        result += toupper(c);\n        result += tolower(c);\n        result\
    \ += toupper(c);\n        result += tolower(c);\n    }\n    for(int i = 0; i <\
    \ message.length(); i++)\n    {\n        char c = message[i];\n        result\
    \ += toupper(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \        result += tolower(c);\n        result += toupper(c);\n        result\
    \ += tolower(c);\n        result += toupper(c);\n        result += tolower(c);\n\
    \        result += toupper(c);\n        result += tolower(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += toupper(c);\n        result += tolower(c);\n        result +=\
    \ toupper(c);\n        result += tolower(c);\n        result += toupper(c);\n\
    \        result += tolower(c);\n        result += toupper(c);\n        result\
    \ += tolower(c);\n        result += toupper(c);\n        result += tolower(c);\n\
    \    }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += toupper(c);\n        result += tolower(c);\n\
    \        result += toupper(c);\n        result += tolower(c);\n        result\
    \ += to", "{\n    string result = \"\";\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI believe this would only work if you had a dictionary\
    \ that mapped every vowel to its position in the alphabet. Otherwise you would\
    \ have to keep track of which letters had already been replaced.\n<|/ c |>\n<|\
    \ c |>\nYes, I believe that would be the case. I'm going to edit my answer to\
    \ include a solution that doesn't require a dictionary.\n<|/ c |>\n<| c |>\nI\
    \ believe this would only work if you had a dictionary that mapped every vowel\
    \ to its position in the alphabet. Otherwise you would have to keep track of which\
    \ letters had already been replaced.\n<|/ c |>\n<| c |>\nI believe this would\
    \ only work if you had a dictionary that mapped every vowel to its position in\
    \ the alphabet. Otherwise you would have to keep track of which letters had already\
    \ been replaced.\n<|/ c |>\n<| c |>\nI believe this would only work if you had\
    \ a dictionary that mapped every vowel to its position in the alphabet. Otherwise\
    \ you would have to keep track of which letters had already been replaced.\n<|/\
    \ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>\nusing namespace std;", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += toupper(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n\
    \    {\n        char c = message[i];\n        result += tolower(c);\n    }\n \
    \   for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n\
    \        result += toupper(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += tolower(c);\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThank\
    \ you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome. Don't\
    \ forget to accept the answer if it solved your problem.\n<|/ c |>\n<| c |>\n\
    I did but my reputation is too low for it to show publicly.\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n  \
    \  {\n        char c = message[i];\n        result += (toupper(c) - 'A' + 2) %\
    \ 26 + 'A';\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any string functions. I only have to\
    \ write the encode function.\n<|/ c |>\n<| c |>\nI added a solution without string\
    \ functions.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use\
    \ any string functions. I only have to write the encode function.\n<|/ c |>\n\
    <| c |>\nI added a solution without string functions.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char\
    \ c = message[i];\n        result += toupper(c);\n    }\n    for(int i = 0; i\
    \ < message.length(); i++)\n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n    {\n\
    \        char c = message[i];\n        result += toupper(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n\
    \    {\n        char c = message[i];\n        result += toupper(c);\n    }\n \
    \   for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n\
    \        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    ", "{\n    string result = \"\";\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += toupper(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += tolower(c);\n    }\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        result += tolower(c);\n \
    \   }\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c =\
    \ message[i];\n        result += toupper(c);\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't work. Try it with `encode(\"\
    This is a message\")`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the\
    \ test case to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work for `encode(\"\
    This is a message\")`. It returns `tHKS KS C MGSSCGG`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case to the answer.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work for `encode(\"This is a message\")`. It returns `tHKS KS C MGSSCGG`.\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char\
    \ c = message[i];\n        result += toupper(c);\n    }\n    for(int i = 0; i\
    \ < message.length(); i++)\n    {\n        char c = message[i];\n        result\
    \ += tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n    {\n\
    \        char c = message[i];\n        result += toupper(c);\n    }\n    for(int\
    \ i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n   \
    \     result += tolower(c);\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `encode(\"This is a message\")`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"This is a message\")`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `encode(\"This is a message\"\
    )`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"This is a message\"\
    )`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `encode(\"This is a message\"\
    )`.\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string encoded = \"\";\n   \
    \ for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        char upper = std.toupper(c);\n        char lower = std.tolower(c);\n\
    \        char vowel = std.toupper(lower);\n        char vowel2 = std.tolower(upper);\n\
    \        char vowel3 = std.toupper(vowel2);\n        char vowel4 = std.tolower(vowel3);\n\
    \        char vowel5 = std.toupper(vowel4);\n        char vowel6 = std.tolower(vowel5);\n\
    \        char vowel7 = std.toupper(vowel6);\n        char vowel8 = std.tolower(vowel7);\n\
    \        char vowel9 = std.toupper(vowel8);\n        char vowel10 = std.tolower(vowel9);\n\
    \        char vowel11 = std.toupper(vowel10);\n        char vowel12 = std.tolower(vowel11);\n\
    \        char vowel13 = std.toupper(vowel12);\n        char vowel14 = std.tolower(vowel13);\n\
    \        char vowel15 = std.toupper(vowel14);\n        char vowel16 = std.tolower(vowel15);\n\
    \        char vowel17 = std.toupper(vowel16);\n        char vowel18 = std.tolower(vowel17);\n\
    \        char vowel19 = std.toupper(vowel18);\n        char vowel20 = std.tolower(vowel19);\n\
    \        char vowel21 = std.toupper(vowel20);\n        char vowel22 = std.tolower(vowel21);\n\
    \        char vowel23 = std.toupper(vowel22);\n        char vowel24 = std.tolower(vowel23);\n\
    \        char vowel25 = std.toupper(vowel24);\n        char vowel26 = std.tolower(vowel25);\n\
    \        char vowel27 = std.toupper(vowel26);\n        char vowel28 = std.tolower(vowel27);\n\
    \        char vowel29 = std.toupper(vowel28);\n        char vowel30 = std.tolower(vowel29);\n\
    \        char vowel31 = std.toupper(vowel30);\n        char vowel32 = std.tolower(vowel31);\n\
    \        char vowel33 = std.toupper(vowel32);\n        char vowel34 = std.tolower(vowel33);\n\
    \        char vowel35 = std.toupper(vowel34);\n        char vowel36 = std.tolower(vowel35);\n\
    \        char vowel37 = std.toupper(vowel36);\n        char ", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n     \
    \   char c = message[i];\n        result += toupper(c);\n    }\n    for(int i\
    \ = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n     \
    \   result += tolower(c);\n    }\n    for(int i = 0; i < message.length(); i++)\n\
    \    {\n        char c = message[i];\n        result += toupper(c);\n    }\n \
    \   for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n\
    \        result += tolower(c);\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the message is \"aBcD\" for example\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. I tested it before posting it.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work if you input \"aBcD\" for example\n<|/ c |>\n<| c |>\n:\
    \ It does work. Did you test it? It works perfectly for me. `aBcD` becomes `tHKS\
    \ KS C MGSSCGG`.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it yourself.\
    \ It doesn't work if you input \"aBcD\" for example\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    for(int i = 0; i < message.length();\
    \ i++)\n    {\n        char c = message[i];\n        char nextLetter = message[i+1];\n\
    \        \n        if(isalpha(c))\n        {\n            result += toupper(c);\n\
    \            result += tolower(nextLetter);\n        }\n        else\n       \
    \ {\n            result += c;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nThanks for your answer! I appreciate it! I\
    \ did try this but for some reason it didn't work. I'm still trying to figure\
    \ out why.\n<|/ c |>\n<| c |>\nI added a little bit of explanation to the answer.\n\
    <|/ c |>\n<| c |>\nThanks so much! I appreciate it! I did try this but for some\
    \ reason it didn't work. I'm still trying to figure out why.\n<|/ c |>\n<| c |>\n\
    I added a little bit of explanation to the answer.\n<|/ c |>\n<| c |>\nThanks\
    \ so much! I appreciate it! I did try this but for some reason it didn't work.\
    \ I'm still trying to figure out why.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
