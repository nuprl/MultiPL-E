name: HumanEval_16_count_distinct_characters
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how\
  \ many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
  xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
  */\nlong count_distinct_characters(string string) \n"
tests: "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
  \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
  ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
  Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
completions: ["{\n    long result = 0;\n    foreach(char c in string)\n    {\n   \
    \     result += tolower(c) - 'a';\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c in string)\n    {\n        result += tolower(c)\
    \ - tolower(string[0]);\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    \n    foreach(char,string){\n        count += 1;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char, string) {\n        count\
    \ += 1;\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n     \
    \   for(int j = 0; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n        }\n        count++;\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n        }\n        count++;\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>>\
    \ count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int ", "{\n    long distinct = 0;\n    for(auto c : string) \n    {\n\
    \        distinct += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26\
    \ : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n    return distinct;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string like \"abA\"\
    \n<|/ c |>\n<| c |>\nIt does. I tested it before posting it. What do you mean\
    \ by \"doesn't work\"? It returns 3 for \"abA\".\n<|/ c |>\n<| c |>\nI mean it\
    \ returns 3 instead of 4\n<|/ c |>\n<| c |>\nI tested it again and it returns\
    \ 4 for \"abA\". Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\n\
    Yes, I copied it correctly. I'm running it on ideone.com\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long distinctCharacters = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n     \
    \   distinctCharacters += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z')\
    \ ? 26 : 1;\n    }\n    return distinctCharacters;\n}", "{\n    long count = 0;\n\
    \    \n    foreach(char,string){\n        if(!islower(char) && !isupper(char)){\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(char,string){\n        result\
    \ += char.hashCode();\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\npublic int countDistinctChars(String str) {\n    int\
    \ count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n\
    \        if(str.indexOf(c) == str.lastIndexOf(c)) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,java |>\n<|\
    \ a tags=string,java |>\n<code>\npublic int countDistinctChars(String str) {\n\
    \    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        char\
    \ c = str.charAt(i);\n        if(str.indexOf(c) == str.lastIndexOf(c)) {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,java |>\n<code>\npublic int countDistinctChars(String str)\
    \ {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n       \
    \ char c = str.charAt(i);\n        if(str.indexOf(c) == str.lastIndexOf(c)) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int countDistinctChars(String\
    \ str) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n  \
    \      char c = str.charAt(i);\n        if(str.indexOf(c) == str.lastIndexOf(c))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a tags=string,java |>\n<| c |>\nPlease don't post only code as an answer, but\
    \ also provide an explanation of what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27825814)\n<|/ c |>\n", "{\n    long\
    \ count = 0;\n    \n    foreach(char, string) {\n        foreach(char, string)\
    \ {\n            foreach(char, string) {\n                foreach(char, string)\
    \ {\n                    foreach(char, string) {\n                        foreach(char,\
    \ string) {\n                            foreach(char, string) {\n           \
    \                     foreach(char, string) {\n                              \
    \      foreach(char, string) {\n                                        foreach(char,\
    \ string) {\n                                            foreach(char, string)\
    \ {\n                                                foreach(char, string) {\n\
    \                                                    foreach(char, string) {\n\
    \                                                        foreach(char, string)\
    \ {\n                                                            foreach(char,\
    \ string) {\n                                                                foreach(char,\
    \ string) {\n                                                                \
    \    foreach(char, string) {\n                                               \
    \                         foreach(char, string) {\n                          \
    \                                                  foreach(char, string) {\n \
    \                                                                            \
    \   foreach(char, string) {\n                                                \
    \                                    foreach(char, string) {\n               \
    \                                                                         foreach(char,\
    \ string) {\n                                                                \
    \                            foreach(char, string) {\n                       \
    \                                                                         foreach(char,\
    \ string) {\n                                                                \
    \                                    foreach(char, string) {\n               \
    \                                                                            \
    \             foreach(char, string) {\n                                      \
    \                                                                      foreach(char,\
    \ string) {\n                                                                \
    \                                                foreach(char, string) {\n   \
    \                                                                            \
    \                                     foreach(char, string) {\n              \
    \                                                                            \
    \                              foreach(char, string) {\n                     \
    \                                                                            \
    \                           foreach(char, string) {\n                        \
    \                                                                            \
    \                            foreach(char, string) {\n                       \
    \                                                                            \
    \                                 foreach(char, string) {\n                  \
    \                                                                            \
    \                                          foreach(char, string) {\n         \
    \                                                                            \
    \                                                       foreach(char, string)\
    \ {\n                                                                        \
    \                                                                        foreach(char,\
    \ string) {\n                                                                \
    \                                                                            \
    \        foreach(char, string) {\n                                           \
    \                                                                            \
    \                                 foreach(char, string) {\n                  \
    \                                                                            \
    \                                                              foreach(char, string)\
    \ {\n                                                                        \
    \                                                                            \
    \            foreach(char, string) {\n                                       \
    \                                                                            \
    \                                                 foreach(char, string) {\n  \
    \                                                                            \
    \                                                                            \
    \              foreach(char, string) {\n                                     \
    \                                                                            \
    \                                                           foreach(char, string)\
    \ {\n                                                                        \
    \                                                                            \
    \                            foreach(char, string) {\n                       \
    \                                                                            \
    \                                                                            \
    \     foreach(char, string) {\n                                              \
    \                                                                            \
    \                                                              foreach(char, string)\
    \ {\n                                                                        \
    \                                                                            \
    \                                        foreach(char, string) {\n           \
    \                                                                            \
    \                                                                            \
    \                             foreach(char, string) {\n                      \
    \                                                                            \
    \                                                                            \
    \                      foreach(char, string) {\n                             \
    \                                                                            \
    \                                                                            \
    \                   foreach(char, string) {\n                                \
    \                                                                            \
    \                                                                            \
    \                    foreach(char, string) {\n                               \
    \                                                                            \
    \                                                                            \
    \                         foreach(char, string) {\n                          \
    \                                                                            \
    \                                                                            \
    \                                  foreach(char, string) {\n                 \
    \                                                                            \
    \                                                                            \
    \                                               foreach(char, string) {\n    \
    \                                                                            \
    \                                                                            \
    \                                                                foreach(char,\
    \ string) {\n                                                                \
    \                                                                            \
    \                                                                            \
    \        foreach(char, string) {\n                                           \
    \                                                                            \
    \                                                                            \
    \                                 foreach(char, string) {\n                  \
    \                                                                            \
    \                                                                            \
    \                                                              foreach(char, string)\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                            \
    \            foreach(char, string) {\n                                       \
    \                                                                            \
    \                                                                            \
    \                                                 foreach(char, string) {\n",
  "{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n        count\
    \ += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    \n    return count;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n    \
    \    count += 1;\n    }\n    \n    return count;\n}", "{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_count(string.subarray(i,\
    \ i + 1));\n    }\n    return result;\n}", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char, string)\
    \ {\n        count += 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    for(auto c : string)\n    {\n        result += std.algorithm.count_distinct_characters(c);\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n\
    \        for(int j = 0; j < temp.length(); j++)\n        {\n            string\
    \ temp2 = temp.substr(j, 1);\n            count += count_distinct_characters(temp2);\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis is not the right answer. Try `count_distinct_characters(\"\
    abbcccdd\")` with your algorithm.\n<|/ c |>\n<| c |>\nI agree, my algorithm is\
    \ incorrect. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed the algorithm and added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI fixed the algorithm and added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI fixed the algorithm and added\
    \ a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\nI believe this can be\
    \ done in O(n) time complexity using hash tables. \n<code>\n#include <iostream>\n\
    #include <string>\n#include <unordered_map>", "{\n    long distinct = 0;\n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        distinct += std.algorithm.distinct(c).count;\n    }\n    return distinct;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n    \
    \    foreach(char c2 in string)\n        {\n            if (c == c2)\n       \
    \     {\n                count++;\n            }\n        }\n    }\n    \n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(char c in string) \n\
    \    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long distinct = 0;\n    foreach(char c in string)\n    {\n        distinct\
    \ += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return distinct;\n\
    }", "{\n    long count = 0;\n    foreach(char, string) \n    {\n        count\
    \ += 1;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long result = 0;\n    foreach(char c in string) \n    {\n\
    \        result += std.string.count(c);\n    }\n    return result;\n}", "{\n \
    \   long count = 0;\n    \n    foreach(char c in string)\n    {\n        count\
    \ += 1;\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c in string)\n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        char c = string[i];\n        for(int j\
    \ = i; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(c != d)\n            {\n                break;\n            }\n\
    \            else\n            {\n                count++;\n            }\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char,\
    \ string) \n    {\n        count += 1;\n    }\n    return count;\n}", "{\n   \
    \ long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n  \
    \  }\n    \n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,\
    \ string) \n    {\n        count += 1;\n    }\n    \n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    for(auto c : string) \n \
    \   {\n        count += count_distinct_characters(c);\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        result += std.string.get_char_count(string[i]);\n    }\n    return\
    \ result;\n}", "{\n    long distinct = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        char c = string[i];\n        distinct = (distinct + 1)\
    \ + ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ? 1L : 0L);\n    }\n   \
    \ return distinct;\n}", "{\n    long count = 0;\n    foreach(char c in string)\
    \ {\n        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 9\
    \ : 1;\n    }\n    return count;\n}", "{\n\tlong count = 0;\n\tfor (auto c : string)\
    \ \n\t{\n\t\tcount += count_distinct_characters(c);\n\t}\n\treturn count;\n}",
  "{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ (c - 'A');\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char,\
    \ string) \n    {\n        count += 1;\n    }\n    return count;\n}", "{\n   \
    \ long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n     \
    \   string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ count += count_distinct_characters(temp2);\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char,string) {\n        count += 1;\n\
    \    }\n    return count;\n}", "{\n    long distinctCharacters = 0;\n    \n  \
    \  for (auto c : string)\n    {\n        distinctCharacters += (tolower(c) - 'a');\n\
    \    }\n    \n    return distinctCharacters;\n}", "{\n    long count = 0;\n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c) && !std.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,\
    \ string) {\n        count += 1;\n    }\n    \n    return count;\n}", "{\n   \
    \ long count = 0;\n    foreach(char, string) {\n        count += (char)toupper(char)\
    \ - 'A' + 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n     \
    \   if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ", "{\n    long count = 0;\n    \n    foreach(char,string){\n        count\
    \ += 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n       \
    \ if(!isalpha(c))\n            continue;\n        \n        for(int j = i+1; j\
    \ < string.length(); j++)\n        {\n            char d = string[j];\n      \
    \      if(isalpha(d))\n            {\n                if(tolower(c) == tolower(d))\n\
    \                    count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!isalpha(c))\n\
    \        {\n            count += 1;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count +=\
    \ (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string like\
    \ \"abBcCdD\"\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated\
    \ my answer accordingly.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long result = 0;\n    foreach(char, string) {\n        result\
    \ += char.hashCode();\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    \n    for (auto c : string)\n    {\n        auto lower = tolower(c);\n  \
    \      auto upper = toupper(c);\n        \n        if (lower == upper)\n     \
    \   {\n            count++;\n        }\n    }\n    \n    return count;\n}", "{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        for(int j = 0; j < sub.length();\
    \ j++)\n        {\n            string sub2 = sub.substr(j, 1);\n            count\
    \ += count_distinct_characters(sub2);\n        }\n    }\n    return count;\n}",
  "{\n\tlong result = 0;\n\tfor (auto c : string)\n\t{\n\t\tresult += std.algorithm.count_distinct_chars(c);\n\
    \t}\n\treturn result;\n}", "{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j =\
    \ 0; j < temp.length(); j++)\n        {\n            string temp2 = temp.substr(j,\
    \ 1);\n            if(!temp2.empty())\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length();\
    \ j++)\n        {\n            string temp2 = temp.substr(j, 1);\n           \
    \ if(!temp2.empty())\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n           \
    \ string temp2 = temp.substr(j, 1);\n            if(!temp2.empty())\n        \
    \    {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n           \
    \ string temp2 = temp.substr(j, 1);\n            if(!temp2.empty())\n        \
    \    {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n", "{\n \
    \   long count = 0;\n    foreach(char c in string) {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c in\
    \ string) \n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c in\
    \ string)\n    {\n        count += 1;\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n    >>>\
    \ count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L",
  "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n \
    \       char c = string[i];\n        if(!std.isAlpha(c))\n        {\n        \
    \    count += 1;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n\
    }", "{\n    long distinct = 0;\n    foreach(char c in string) \n    {\n      \
    \  distinct += (int)c;\n    }\n    return distinct;\n}", "{\n    long count =\
    \ 0;\n    for(auto c : string) \n    {\n        auto lower = tolower(c);\n   \
    \     auto upper = toupper(c);\n        if(lower != upper) \n        {\n     \
    \       count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    \n    foreach(char, string) {\n        char c = char;\n        \n\
    \        foreach(char, string) {\n            if (c == char) {\n             \
    \   count++;\n            }\n        }\n    }\n    \n    return count;\n}", "{\n\
    \    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'a' &&\
    \ c <= 'z') || (c >= 'A' && c <= 'Z'));\n    }\n    return distinct;\n}", "{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string.at(i);\n        if(!std.ctype.isUpper(c))\n           \
    \ count++;\n    }\n    return count;\n}", "{\n\tlong count = 0;\n\tfor (auto c\
    \ : string) \n\t{\n\t\tauto lower = tolower(c);\n\t\tauto upper = toupper(c);\n\
    \t\tif (lower != upper) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }", "{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for(auto c : string)\n    {\n        auto it = std::find_if(string.begin(),\
    \ string.end(), [&](char ch){ return std::toupper(ch) == std::toupper(c); });\n\
    \        if(it != string.end())\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long distinctCharacters = 0;\n    \n  \
    \  foreach(char c in string) \n    {\n        distinctCharacters++;\n        \n\
    \        if(distinctCharacters > 1) \n        {\n            break;\n        }\n\
    \    }\n    \n    return distinctCharacters;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThis code does not work. `count_distinct_characters(\"xyzXYZ\"\
    )` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. `count_distinct_characters(\"xyzXYZ\")` returns `3L` instead of `2L`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. `count_distinct_characters(\"\
    xyzXYZ\")` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works fine. `count_distinct_characters(\"xyzXYZ\")` returns `3L` instead of\
    \ `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `count_distinct_characters(\"\
    xyzXYZ\")` returns `3L` instead of `2L`.\n<|/ c |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string sub = string.substr(i, 1);\n        for(int j =\
    \ 0; j < sub.length(); j++)\n        {\n            string sub2 = sub.substr(j,\
    \ 1);\n            count += sub2.length();\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char,string){\n        count +=\
    \ 1;\n    }\n    return count;\n}", "{\n\tlong count = 0;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tchar c = string[i];\n\t\tfor (int j = 0; j <\
    \ string.length(); j++) {\n\t\t\tif (i == j) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\
    \t\tchar d = string[j];\n\t\t\tif (islower(c) && islower(d)) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t\tif (isupper(c) && isupper(d))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\t\
    return count;\n}", "{\n    long count = 0;\n    foreach(char c in string)\n  \
    \  {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(char, string) {\n\
    \        count += 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    \n    foreach(char, string) \n    {\n        count += 1;\n    }\n    \n \
    \   return count;\n}", "{\n    long count = 0;\n    foreach(char, string) \n \
    \   {\n        count += 1;\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(char c in string) \n    {\n        count += (c >= 'A' && c <=\
    \ 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,string){\n\
    \        count += 1;\n    }\n    \n    return count;\n}", "{\n    long count =\
    \ 0;\n    \n    for (auto c : string) \n    {\n        auto lower = tolower(c);\n\
    \        auto upper = toupper(c);\n        \n        if (lower == upper) \n  \
    \      {\n            count++;\n        }\n    }\n    \n    return count;\n}",
  "{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n\
    \    }\n    \n    return count;\n}", "{\n    long count = 0;\n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n           \
    \ if(temp[j] != string[i])\n            {\n                count++;\n        \
    \        break;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(char, string) {\n        result += char.ordinal();\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        char c = string[i];\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(c != d)\n            {\n                break;\n            }\n\
    \            else\n            {\n                count++;\n            }\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n       \
    \ if(!std.algorithm.contains(string.chars, c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,string){\n\
    \        count += 1;\n    }\n    \n    return count;\n}", "{\n    long count =\
    \ 0;\n    for(auto c : string)\n    {\n        count += std.algorithm.distinct(c).count;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char\
    \ c in string) \n    {\n        count += count_distinct_characters(c);\n    }\n\
    \    \n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        char c = string[i];\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(c != d)\n            {\n                break;\n            }\n\
    \            else\n            {\n                count++;\n            }\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,\
    \ string) {\n        count += 1;\n    }\n    \n    return count;\n}", "{\n\tlong\
    \ count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t{\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if (islower(c)) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\
    \telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n    long\
    \ count = 0;\n    \n    foreach(char, string) \n    {\n        count += 1;\n \
    \   }\n    \n    return count;\n}", "{\n    long result = 0;\n    foreach(char,\
    \ string) {\n        result += char.ordinal();\n    }\n    return result;\n}",
  "{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!isalpha(c))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string sub = string.substr(i, 1);\n        count += sub.length();\n   \
    \ }\n    return count;\n}", "{\n\tlong count = 0;\n\t\n\tfor (auto c : string)\
    \ \n\t{\n\t\tauto lower = tolower(c);\n\t\tauto upper = toupper(c);\n\t\t\n\t\t\
    if (lower == upper) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount\
    \ += 2;\n\t\t}\n\t}\n\t\n\treturn count;\n}", "{\n    long distinct = 0;\n   \
    \ \n    foreach(char c in string) {\n        distinct++;\n    }\n    \n    return\
    \ distinct;\n}", "{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif\
    \ (isupper(c)) \n\t\t\tcount += 2L;\n\t\telse if (islower(c)) \n\t\t\tcount +=\
    \ 2L;\n\t\telse \n\t\t\tcount++;\n\t}\n\treturn count;\n}", "{\n\tlong count =\
    \ 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\t\tauto upper\
    \ = toupper(c);\n\t\tif (lower != upper) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \treturn count;\n}", "{\n    long count = 0;\n    \n    foreach(char, string)\
    \ {\n        count += 1;\n    }\n    \n    return count;\n}", "{\n\tlong count\
    \ = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += std.algorithm.distinct_chars(c);\n\
    \t}\n\treturn count;\n}", "{\n\tlong count = 0;\n\tfor (char c : string) \n\t\
    {\n\t\tif (islower(c)) \n\t\t\tcount++;\n\t\telse if (isupper(c)) \n\t\t\tcount++;\n\
    \t\telse \n\t\t\tcount++;\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n\
    \    foreach(char c in string) \n    {\n        foreach(char c2 in string) \n\
    \        {\n            if (c == c2) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        char c = string[i];\n        for(int j\
    \ = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(c != d)\n            {\n                count++;\n           \
    \     break;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n     \
    \   char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n  \
    \      {\n            if(c == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long distinct\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        distinct = (distinct + 1) + ((c >= 'A' && c <= 'Z') || (c\
    \ >= 'a' && c <= 'z') ? 1L : 0L);\n    }\n    return distinct;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `count_distinct_characters(\"\
    Jerry\")`.\n<|/ c |>\n<| c |>\n: I tested it and it works. I even tested it on\
    \ `count_distinct_characters(\"Jerry\")` before posting my answer. Can you give\
    \ me an example where it fails?\n<|/ c |>\n<| c |>\n: I tested it on `count_distinct_characters(\"\
    Jerry\")` before posting my answer. Can you give me an example where it fails?\n\
    <|/ c |>\n<| c |>\n: I tested it on `count_distinct_characters(\"Jerry\")` before\
    \ posting my answer. Can you give me an example where it fails?\n<|/ c |>\n<|\
    \ c |>\n: I tested it on `count_distinct_characters(\"Jerry\")` before posting\
    \ my answer. Can you give me an example where it fails?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    long result = 0;\n    foreach(char c in string)\n    {\n\
    \        result += tolower(c) - 'a';\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(char c in\
    \ string)\n    {\n        result += (int)c;\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string.at(i);\n        if(!std.isUpper(c))\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    for(auto c : string)\n\
    \    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char, string) {\n        count\
    \ += 1;\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n    foreach(char,\
    \ string) {\n        count += 1;\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n\
    \            count++;\n    }\n    \n    return count;\n}", "{\n    long count\
    \ = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    \n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(char c in string)\n\
    \    {\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n    \
    \    }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c in string) \n    {\n        count += count_distinct_characters(string);\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    \n    foreach(char,\
    \ string) \n    {\n        char c = char;\n        \n        foreach(char, string)\
    \ \n        {\n            if (c != char) \n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    \n    return count;\n\
    }", "{\n    long distinct = 0;\n    \n    foreach(char, string) {\n        distinct\
    \ += (char)toupper(char)-(char) tolower(char);\n    }\n    \n    return distinct;\n\
    }", "{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count\
    \ += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' &&\
    \ c <= '9') ? 10 : 0;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long distinct = 0;\n    \n\
    \    foreach(char, string) {\n        distinct++;\n    }\n    \n    return distinct;\n\
    }", "{\n    long distinct = 0;\n    foreach(char c in string)\n    {\n       \
    \ distinct = (distinct + 1) + ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));\n\
    \    }\n    return distinct;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n\
    <| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question\
    \ was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n\
    <|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe\
    \ question was about C++, not C#.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n\
    <code>", "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `string` doesn't have\
    \ a `length` property. `string` doesn't have a `foreach` method.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code a bit. Sorry about that. My bad.\n<|/ c |>\n<| c |>\n\
    I fixed the code a bit. Sorry about that. My bad.\n<|/ c |>\n<| a tags=string,c#\
    \ |>\n<code>\nstring s = \"abc\";", "{\n    long count = 0;\n    foreach(char,\
    \ string) {\n        count += 1;\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ tags=string,c++,algorithm |>\n<| c |>\n`string` isn't a standard C++ type. Are\
    \ you sure this compiles?\n<|/ c |>\n<| c |>\nYes, it compiles just fine. I'm\
    \ using `g++ -std=c++11 -o test test.cpp`\n<|/ c |>\n<| c |>\nI guess you meant\
    \ `std::unordered_set<char>` instead of `std::unordered_set<std::string>`?\n<|/\
    \ c |>\n<| c |>\nYes, I meant `unordered_set<char>`. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a string like \"aba\" and you\
    \ want the count of distinct characters to return 2.\n<|/ c |>\n<| a dscore=5\
    \ tags=string,c++,algorithm |>\nThe most efficient way is to use std::unordered_set<char>\
    \ and count the occurrences.\n<code>\n#include <unordered_set>\n#include <string>\n\
    #include <iostream>", "{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    char c = string[i];\n        if(!std.algorithm.contains(string.chars, c))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long result = 0;\n    foreach(char c in string)\n    {\n        result +=\
    \ std.string.length(string);\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result +=\
    \ std.algorithm.distinct_count_if(string.begin() + i, string.end(), [](char c)\
    \ { return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); });\n    }\n    return\
    \ result;\n}", "{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c))\
    \ \n\t\t{\n\t\t\tcount += 2L;\n\t\t}\n\t\telse if (islower(c)) \n\t\t{\n\t\t\t\
    count += 2L;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }", "{\n    long count = 0;\n    foreach(char,string){\n        if(!islower(char)\
    \ && !isupper(char)){\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += count_distinct_characters(c);\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        char c = string[i];\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(c != d)\n            {\n                break;\n            }\n\
    \            else\n            {\n                count++;\n            }\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n       \
    \ if(!std.isLower(c))\n            count++;\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    \n    foreach(char c in string)\n    {\n        count\
    \ += 1;\n    }\n    \n    return count;\n}", "{\n    long result = 0;\n    foreach(char\
    \ c in string) \n    {\n        result += (int)c;\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n  \
    \  {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    \n    for (auto c : string) \n    {\n       \
    \ auto lower = tolower(c);\n        auto upper = toupper(c);\n        \n     \
    \   if (lower != upper) \n        {\n            count++;\n        }\n    }\n\
    \    \n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n\
    \            continue;\n        for(int j = i+1; j < string.length(); j++)\n \
    \       {\n            char d = string[j];\n            if(std.isAlpha(d))\n \
    \               continue;\n            if(c == d)\n                count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1;\
    \ j < string.length(); j++)\n        {\n            char d = string[j];\n    \
    \        if(std.isAlpha(d))\n                continue;\n            if(c == d)\n\
    \                count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(std.isAlpha(d))\n                continue;\n\
    \            if(c == d)\n                count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n\
    \    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong\
    \ count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n     \
    \   if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(std.isAlpha(d))\n\
    \                continue;\n            if", "{\n    long count = 0;\n    \n \
    \   foreach(char,string){\n        count += 1;\n    }\n    \n    return count;\n\
    }", "{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        result += std.algorithm.distinct_chars(string[i]);\n    }\n   \
    \ return result;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.",
  "{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count +=\
    \ 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n\
    \            count++;\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \   >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"\
    Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\
    \    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      char c = string[i];\n        if(!std.isLower(c))\n            count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")", "{\n    long count = 0;\n    \n\
    \    foreach(char, string) \n    {\n        count += 1;\n    }\n    \n    return\
    \ count;\n}", "{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower\
    \ = tolower(c);\n\t\tif (lower != c) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn\
    \ count;\n}", "{\n    long result = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n   \
    \ }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char c in string)\
    \ \n    {\n        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z')\
    \ ? 26 : (c >= '0' && c <= '9') ? 10 : 1;\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isUpper(c))\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    \n    for (auto c : string) \n    {\n        auto lower = tolower(c);\n \
    \       auto upper = toupper(c);\n        if (lower != upper) \n        {\n  \
    \          count++;\n        }\n    }\n    \n    return count;\n}", "{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.charAt(i);\n        if(!std.isAlpha(c))\n            continue;\n\
    \        \n        for(int j = i+1; j < string.length(); j++)\n        {\n   \
    \         char d = string.charAt(j);\n            if(std.isAlpha(d))\n       \
    \     {\n                count += 1;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char,string){\n\
    \        count += 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return\
    \ count;\n}", "{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n\
    \        char c = char;\n        \n        foreach(char, string) \n        {\n\
    \            char d = char;\n            \n            if (c == d) \n        \
    \    {\n                count++;\n            }\n        }\n    }\n    \n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(char c in string) \n    {\n\
    \        count += (long)toupper(c) - tolower(c);\n    }\n    return count;\n}",
  "{\n    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'A' &&\
    \ c <= 'Z') ? 1L : 0);\n        distinct = (distinct + 1) + ((c >= 'a' && c <=\
    \ 'z') ? 1L : 0);\n    }\n    return distinct;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if you have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt\
    \ does work if you have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt does work\
    \ if you have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt does work if you\
    \ have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt does work if you have a\
    \ string like \"abcABC\"\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count +=\
    \ 1;\n    }\n    return count;\n}", "{\n    long count = 0;\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(c != d)\n            {\n                count++;\n           \
    \     break;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long result = 0;\n    foreach(char, string) {\n        result += char.ordinal();\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char c in\
    \ string) \n    {\n        count += count_distinct_characters(c);\n    }\n   \
    \ return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis\
    \ solution has a time complexity of O(n^2) which is not very efficient.\n<|/ c\
    \ |>\n<| c |>\n: I agree with you. But the OP asked for \"efficient\", and I believe\
    \ that this is an efficient solution. Of course, there are other solutions that\
    \ may be more efficient.\n<|/ c |>\n<| c |>\n: I believe that this is an efficient\
    \ solution. Of course, there are other solutions that may be more efficient.\n\
    <|/ c |>\n<| c |>\n: I believe that this is an efficient solution. Of course,\
    \ there are other solutions that may be more efficient.\n<|/ c |>\n<| c |>\n:\
    \ I believe that this is an efficient solution. Of course, there are other solutions\
    \ that may be more efficient.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    foreach(char c in string) \n    {\n    \
    \    count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >=\
    \ '0' && c <= '9') ? 10 : 0;\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    \n    for (auto c : string) \n    {\n        auto lower = tolower(c);\n\
    \        auto upper = toupper(c);\n        \n        if (lower != upper) \n  \
    \      {\n            count += 1;\n        }\n    }\n    \n    return count;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char, string) {\n        char c\
    \ = tolower(char);\n        if(!isalpha(c)) {\n            count += 1;\n     \
    \   }\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n    \n   \
    \ foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count\
    \ += count_distinct_characters(c);\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    foreach(char c in string)\n    {\n        result += tolower(c)\
    \ - 'a';\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c in string) \n    {\n        count += 1;\n    }\n    return count;\n}", "{\n\
    \tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += count_distinct_characters(c);\n\
    \t}\n\treturn count;\n}", "{\n    long count = 0;\n    foreach(char, string) \n\
    \    {\n        count += (char)toupper(char)-(char) tolower(char);\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n   \
    \     result += std.algorithm.distinct_count(string[i]);\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count\
    \ += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't work if\
    \ there are more than 26 distinct characters. For example, `count_distinct_characters(\"\
    ab\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n: I didn't see that requirement\
    \ in the question. I'll update my answer to include that requirement.\n<|/ c |>\n\
    <| c |>\n: I updated my answer to include a solution that doesn't require a hash\
    \ table.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution that\
    \ doesn't require a hash table.\n<|/ c |>\n<| c |>\n: I updated my answer to include\
    \ a solution that doesn't require a hash table.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower\
    \ = tolower(c);\n\t\tauto upper = toupper(c);\n\t\tif (lower == upper) \n\t\t\
    {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n    long count = 0;\n\
    \    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(char c in string)\n    {\n\
    \        result += std.string.length(string) - std.string.count(string[c]);\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    \n    for (auto c\
    \ : string) \n    {\n        count += std.algorithm.count_if(string.begin(), string.end(),\
    \ [](char c) { return c == c; });\n    }\n    \n    return count;\n}", "{\n  \
    \  long count = 0;\n    for(auto c : string)\n    {\n        auto lower = tolower(c);\n\
    \        if(lower != c)\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    long count = 0;\n    \n    foreach(char, string)\
    \ {\n        count += 1;\n    }\n    \n    return count;\n}", "{\n    long count\
    \ = 0;\n    for(auto c : string)\n    {\n        if(!std.algorithm.contains(string,\
    \ c))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nI believe this solution will fail\
    \ for strings with repeated characters, e.g. \"aba\".\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I missed that case. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ c |>\nThis solution doesn't work for strings with repeated characters, e.g.\
    \ \"aba\".\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nI believe this solution will fail for\
    \ strings with repeated characters, e.g. \"aba\".\n<|/ c |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        char c = string.charAt(i);\n        if(!std.typecons.isUpper(c))\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return\
    \ count;\n}", "{\n    long distinctCharacters = 0;\n    \n    foreach(char in\
    \ string) \n    {\n        distinctCharacters++;\n    }\n    \n    return distinctCharacters;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n       \
    \ count += 1;\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n \
    \   foreach(char,string){\n        count += 1;\n    }\n    return count;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport\
    \ java.lang.*;\nimport java.io.*;", "{\n    long count = 0;\n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n\
    \        {\n            count += 1;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n \
    \       char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(!std.isAlpha(d))\n                continue;\n\
    \            count += std.toLower(c) == std.toLower(d);\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1;\
    \ j < string.length(); j++)\n        {\n            char d = string[j];\n    \
    \        if(!std.isAlpha(d))\n                continue;\n            count +=\
    \ std.toLower(c) == std.toLower(d);\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n\
    \    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n           \
    \ continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n \
    \           char d = string[j];\n            if(!std.isAlpha(d))\n           \
    \     continue;\n            count += std.toLower(c) == std.toLower(d);\n    \
    \    }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1;\
    \ j < string.length(); j", "{\n    long count = 0;\n    foreach(char c in string)\n\
    \    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long distinctCharacters = 0;\n    foreach(char c in\
    \ string) {\n        distinctCharacters++;\n    }\n    return distinctCharacters;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char, string) {\n        count\
    \ += 1;\n    }\n    \n    return count;\n}", "{\n\tlong count = 0;\n\tfor (char\
    \ c : string)\n\t{\n\t\tlong value = std.tolower(c) - 'a';\n\t\tif (value == 0)\
    \ \n\t\t\tvalue = std.toupper(c) - 'A';\n\t\tcount += value;\n\t}\n\treturn count;\n\
    }", "{\n    long count = 0;\n    \n    foreach(char,string){\n        if(!islower(char))\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist ", "{\n    long count = 0;\n    \n    foreach(char,\
    \ string) {\n        count += 1;\n    }\n    \n    return count;\n}", "{\n   \
    \ long count = 0;\n    for(auto c : string)\n    {\n        auto lower = tolower(c);\n\
    \        if(lower != c)\n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
