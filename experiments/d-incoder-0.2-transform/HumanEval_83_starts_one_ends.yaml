name: HumanEval_83_starts_one_ends
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
  \ n, return the count of the numbers of n-digit\n    positive integers that start\
  \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n"
tests: "unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
  \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
  \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
  void main(){}"
completions: ["{\n\tlong count = 0;\n\t\n\tfor (long i = 1; i < n; i++) {\n\t\tif\
    \ (std.math.mod(i, 10) == 1) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n\
    }", "{\n\tlong count = 0;\n\tlong digit = n;\n\twhile (digit > 0)\n\t{\n\t\tcount\
    \ += digit % 10;\n\t\tdigit /= 10;\n\t}\n\treturn count;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    long digit;\n    \n    while\
    \ (n > 0)\n    {\n        digit = n % 10;\n        if (digit == 1)\n        {\n\
    \            count++;\n        }\n        n /= 10;\n    }\n    \n    return count;\n\
    }", "{\n    long count = 0;\n    long last = 1;\n    for(long i = 1; i <= n; ++i)\n\
    \    {\n        if(last == 1)\n        {\n            ++count;\n        }\n  \
    \      last = std.math.rem(i, 10);\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    long start = 1;\n    long end = 1;\n    long digit;\n    \n\
    \    while (n > 0)\n    {\n        digit = n % 10;\n        if (digit == 1)\n\
    \        {\n            count++;\n        }\n        n = n / 10;\n    }\n    \n\
    \    return count;\n}", "{\n\tlong count = 0;\n\t\n\tfor (long i = n; i > 0; i\
    \ /= 10) \n\t{\n\t\tif (i % 10 == 1) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\
    \treturn count;\n}", "{\n    long count = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    long digit;\n    \n    while (n > 0)\n    {\n        digit = n % 10;\n\
    \        \n        if (digit == 1)\n        {\n            count++;\n        }\n\
    \        \n        if (digit == 0)\n        {\n            end = start;\n    \
    \        start = 1;\n        }\n        \n        n = n / 10;\n    }\n    \n \
    \   return count;\n}", "{\n    long count = 0;\n    for(long i = 1; i <= n; i++)\
    \ \n    {\n        if((n % i) == 0) \n        {\n            count++;\n      \
    \  }\n    }\n    return count;\n}", "{\n\tlong count = 0;\n\tlong digit = n;\n\
    \twhile(digit > 0)\n\t{\n\t\tcount += digit % 10;\n\t\tdigit /= 10;\n\t}\n\treturn\
    \ count;\n}", "{\n    long count = 0;\n    \n    for(long i = n; i > 0; i /= 10)\n\
    \    {\n        if((i % 10) == 1)\n            count++;\n    }\n    \n    return\
    \ count;\n}", "{\n    long count = 0;\n    long limit = n;\n    long curr = 1;\n\
    \    long digit;\n    \n    while (curr < limit)\n    {\n        digit = curr\
    \ % 10;\n        if (digit == 1)\n        {\n            count++;\n        }\n\
    \        curr *= 10;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    \n    for(long i = n; i > 0; i /= 10)\n    {\n        if(i % 10 == 1)\n \
    \       {\n            count++;\n        }\n    }\n    \n    return count;\n}",
  "{\n    long count = 0;\n    \n    for(long i = 1; i < n; ++i)\n    {\n        if((i\
    \ % 10) == 1)\n        {\n            ++count;\n        }\n    }\n    \n    return\
    \ count;\n}", "{\n    long count = 0;\n    long digit = n;\n    \n    while (digit\
    \ > 0)\n    {\n        digit = digit / 10;\n        count++;\n    }\n    \n  \
    \  return count;\n}", "{\n    long count = 0;\n    \n    for(long i = 2; i <=\
    \ n; i++)\n    {\n        if((n % i) == 0)\n        {\n            count += 1;\n\
    \        }\n    }\n    \n    return count;\n}", "{\n    long count = 0;\n    long\
    \ x = 1;\n    \n    while(n > 0)\n    {\n        count += n / x;\n        n %=\
    \ x;\n        x *= 10;\n    }\n    \n    return count;\n}", "{\n    long count\
    \ = 0;\n    \n    for(long i = 1; i <= n; i++)\n    {\n        if((i % 10) ==\
    \ 1)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question at all.\
    \ OP wants to know how many numbers of `n` digits start with 1 or end with 1.\n\
    <|/ c |>\n<| c |>\nI misread the question. I've updated my answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Scanner;", "{\n    long count = 0;\n\
    \    \n    while(n > 0)\n    {\n        long digit = n % 10;\n        if(digit\
    \ == 1)\n        {\n            count++;\n        }\n        n = n / 10;\n   \
    \ }\n    \n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <math.h>\n#include <time.h>\n#include <stdint.h>\n#include <inttypes.h>", "{\n\
    \    long count = 0;\n    long start = 1;\n    long end = 1;\n    long limit =\
    \ (long) Math.pow(10, n);\n    \n    while (start <= limit) {\n        long mid\
    \ = (start + end) / 2;\n        if (mid % 2 == 0) {\n            if (mid % 3 ==\
    \ 0) {\n                if (mid % 5 == 0) {\n                    count++;\n  \
    \              }\n            }\n        }\n        if (mid % 3 == 0) {\n    \
    \        if (mid % 5 == 0) {\n                count++;\n            }\n      \
    \  }\n        if (mid % 5 == 0) {\n            count++;\n        }\n        if\
    \ (mid % 7 == 0) {\n            count++;\n        }\n        if (mid % 11 == 0)\
    \ {\n            count++;\n        }\n        if (mid % 13 == 0) {\n         \
    \   count++;\n        }\n        if (mid % 17 == 0) {\n            count++;\n\
    \        }\n        if (mid % 19 == 0) {\n            count++;\n        }\n  \
    \      if (mid % 23 == 0) {\n            count++;\n        }\n        if (mid\
    \ % 29 == 0) {\n            count++;\n        }\n        if (mid % 31 == 0) {\n\
    \            count++;\n        }\n        if (mid % 37 == 0) {\n            count++;\n\
    \        }\n        if (mid % 41 == 0) {\n            count++;\n        }\n  \
    \      if (mid % 43 == 0) {\n            count++;\n        }\n        if (mid\
    \ % 47 == 0) {\n            count++;\n        }\n        if (mid % 53 == 0) {\n\
    \            count++;\n        }\n        if (mid % 59 == 0) {\n            count++;\n\
    \        }\n        if (mid % 61 == 0) {\n            count++;\n        }\n  \
    \      if (mid % 67 == 0) {\n            count++;\n        }\n        if (mid\
    \ % 71 == 0) {\n            count++;\n        }\n        if (mid % 73 == 0) {\n\
    \            count++;\n        }\n        if (mid % 79 == 0) {\n            count++;\n\
    \        }\n        if (mid % 83 == 0) {\n            count++;\n        }\n  \
    \      if (mid % 89 == 0) {\n            count++;\n        }\n        if (mid\
    \ % 97 == 0) {\n            count++;\n        }\n        if (mid % 101 == 0) {\n\
    \            count++;\n        }\n        if (mid % 103 == 0) {\n            count++;\n\
    \        }\n        if (mid % 107 == 0) {\n            count++;\n        }\n \
    \       if (mid % 111 == 0) {\n            count++;\n        }\n        if (mid\
    \ % 113 == 0) {\n            count++;\n        }\n        if (mid % 117 == 0)\
    \ {\n            count++;\n        }\n        if (mid % 121 == 0) {\n        \
    \    count++;\n        }\n        if (mid % 123 == 0) {\n            count++;\n\
    \        }\n        if (mid % 127 == 0) {\n", "{\n    long count = 0;\n    \n\
    \    for(long i = 1; i < n; i++)\n    {\n        if((i % 10) == 1)\n        {\n\
    \            count++;\n        }\n    }\n    \n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
