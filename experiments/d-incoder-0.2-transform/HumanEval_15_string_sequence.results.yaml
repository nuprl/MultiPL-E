language: d
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpokpawog2.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokpawog2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    long i;\n    \n    for(i = 0L; i < n; ++i)\n    \
    \    s += to_string(i);\n    \n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxghnh0kq.d(16): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxghnh0kq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5s3_5_12.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5s3_5_12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep, string pad) \n{\n    string s = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad;\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep + pad + pad2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2, string pad3) \n{\n    string s = \"\";\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3;\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2, string pad3, string pad4) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3 + pad4;\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxib_ibf.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxib_ibf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgo0s0xx_.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgo0s0xx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i < n; ++i)\n      \
    \  result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5mcilsjm.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mcilsjm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n    \
    \    s += to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n\
    \        s += to_string(i, base);\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj3135j8.d(15): Error: undefined identifier `to_string`

    /tmp/tmpfj3135j8.d(31): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj3135j8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnzugzmni.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzugzmni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1ueku75.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ueku75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n    \
    \    s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9irpdiz.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9irpdiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpokpawog2.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokpawog2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, int radix) \n{\n    string s = \"\";\n   \
    \ for(long i = 0; i < n; ++i)\n        s += to_string(i, base, radix);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int radix) \n{\n\
    \    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ radix);\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int radix, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n        s += to_string(i, radix, base);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int radix, int base, int\
    \ radix) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s\
    \ += to_string(i, radix, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int radix, int base, int \nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa1ckv80.d(101): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa1ckv80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for (i = 0; i <= n; i++) {\n\
    \        s = s + to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtk_su8j.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtk_su8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1ueku75.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ueku75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5742b8wp.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5742b8wp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n     \
    \   s += to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2emlnzu.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2emlnzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgo0s0xx_.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgo0s0xx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__y0b2uz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__y0b2uz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base) \n{\n\
    \    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i, base);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string base) \n\
    {\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i, base);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, string\
    \ base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i,\
    \ base, base);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string base, string base) \n{\n    string s = \"\";\n    for(long i = 0;\
    \ i < n; i++) s += to_string(i, base, base);\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, string base,\
    \ string base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s +=\
    \ to_string(i, base, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string base, string base, string base) \n{\n    string\
    \ s = \"\";\n    for(long i = 0; i < n; i++) \nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr96x6v4o.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr96x6v4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1ueku75.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ueku75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep, string pad) \n{\n    string s = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad;\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep + pad + pad2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2, string pad3) \n{\n    string s = \"\";\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3;\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2, string pad3, string pad4) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3 + pad4;\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxib_ibf.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxib_ibf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    \n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    \n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzsu70nsq.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzsu70nsq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, char sep) \n{\n    string result = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        result += to_string(i) + sep;\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep) \n\
    {\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n        result\
    \ += to_string(i) + sep;\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, char sep, string sep2) \n{\n    string result = \"\"\
    ;\n    for(long i = 0; i < n; ++i)\n        result += to_string(i) + sep + sep2;\n\
    \    return result;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string result = \"\";\n    for(long i =\
    \ 0; i < n; ++i)\n        result += to_string(i) + sep + sep2;\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, char\
    \ sep2) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n    \
    \    result += to_string(i) + sep + sep2;\n    return result;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string sep2)\
    \ \n{\n    string result = \nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_hitsvs.d(103): Error: expression expected, not `unittest`

    /tmp/tmpw_hitsvs.d(104): Error: semicolon expected, not `{`

    /tmp/tmpw_hitsvs.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_hitsvs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpta99eabq.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpta99eabq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\twhile (n > 0)\n\t{\n\t\ts += \" \" + (n % 10);\n\
    \t\tn /= 10;\n\t}\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3q2uyeav.d(15): Error: incompatible types for `(" ") + (n % cast(long)10)`:
    `string` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3q2uyeav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5742b8wp.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5742b8wp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; i++) result +=\
    \ to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgk77bbqd.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgk77bbqd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_tofuzh.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_tofuzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5s3_5_12.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5s3_5_12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5742b8wp.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5742b8wp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5s3_5_12.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5s3_5_12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\ts = string(n);\n\t\n\tfor (int i = 0; i < n; ++i)\n\
    \t\ts += \" \" << i;\n\t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p2ooq89.d(14): Error: function expected before `()`, not `string`
    of type `string`

    /tmp/tmp7p2ooq89.d(17): Error: `" "` is not of integral type, it is a `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p2ooq89.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1ueku75.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ueku75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n\
    \        result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92yyh5yl.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92yyh5yl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n\ts += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdib09ydr.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdib09ydr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n     \
    \   s += to_string(i);\n    }\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base) \n{\n    string s = \"\";\n    for(long i\
    \ = 0; i < n; ++i)\n    {\n        s += to_string(i, base);\n    }\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int radix)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n        s\
    \ += to_string(i, base, radix);\n    }\n    return s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4\
    \ 5\"\n    \n*/\nstring string_sequence(long n, string base) \n{\n    string s\
    \ = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n        s += to_string(i, base);\n\
    \    }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string base, int radix) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n    {\n        s += to_string(i, base, radix);\n    }\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string base, int\
    \ radix, int precision) \n{\n    string s = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n    {\n        s += to_string(i, base, radix, precision);\n    }\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqwkbkt59.d(104): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwkbkt59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, int digits) \n{\n    string s = \"\";\n  \
    \  for(long i = 0; i < n; ++i)\n        s += to_string(i, base, digits);\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i, base, digits, precision);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int width) \n{\n    string s = \"\";\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i, base, digits, precision, width);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int width, int fill) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i, base, digits, precision, width,\
    \ fill);\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppm0losa1.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppm0losa1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, char base) \n{\n    string s = \"\";\n    for(long i\
    \ = 0; i < n; ++i)\n        s += to_string(i, base);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string base) \n{\n   \
    \ string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ base);\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char base, string base) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i, base, base);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string base, string base)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ base, base);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string base, string base, string base) \n{\n    string s = \"\";\n\nunittest\n\
    {\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\"\
    );\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"\
    0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3zrp96n2.d(104): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zrp96n2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep, string pad) \n{\n    string s = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad;\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep + pad + pad2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2, string pad3) \n{\n    string s = \"\";\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3;\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2, string pad3, string pad4) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3 + pad4;\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxib_ibf.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxib_ibf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n \
    \       s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, int digits) \n{\n    string s = \"\";\n  \
    \  for (long i = 0; i < n; ++i)\n        s += to_string(i, base, digits);\n  \
    \  return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n\
    \        s += to_string(i, base, digits, precision);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int radix) \n{\n    string s = \"\";\n    for (long i = 0; i\
    \ < n; ++i)\n        s += to_string(i, base, digits, precision, radix);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int radix, int pad) \n{\n    string s = \"\";\n    for (long\
    \ i = 0; i < n; ++i)\n        s += to_string(i, base, digits, precision, radix,\
    \ pad);\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 \nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgs171j1_.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgs171j1_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5qzdoa4s.d(14): Error: undefined identifier `to_string`

    /tmp/tmp5qzdoa4s.d(29): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5qzdoa4s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char delim) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i, delim);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string delim) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i, delim);\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char delim, string delim2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ delim, delim2);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string delim, string delim2) \n{\n    string s = \"\";\n    for(long i =\
    \ 0; i < n; ++i)\n        s += to_string(i, delim, delim2);\n    return s;\n}\n\
    /*\n Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string delim, string\
    \ delim2, string delim3) \n{\n    string s = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n        s += to_string(i, delim, delim2, delim3);\n    return s;\n}\n\
    /*\n Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 \nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0nkpq6u.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0nkpq6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgo0s0xx_.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgo0s0xx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep) \n{\n\
    \    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep) \n\
    {\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i) +\
    \ sep;\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep, string sep2) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4\
    \ 5\"\n    \n*/\nstring string_sequence(long n, string sep, string sep2) \n{\n\
    \    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i) + sep\
    \ + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2, string sep3) \n{\n    string s;\n    for(long i\
    \ = 0; i < n; ++i)\n        s += to_string(i) + sep + sep2 + sep3;\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ sep2, string \nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiioidpcf.d(101): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiioidpcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep, string pad) \n{\n    string s = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad;\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i) + sep + pad + pad2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2, string pad3) \n{\n    string s = \"\";\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3;\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2, string pad3, string pad4) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep + pad + pad2 + pad3 + pad4;\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxib_ibf.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxib_ibf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, string digits) \n{\n    string s = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        s += to_string(i, base, digits);\n \
    \   return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, string\
    \ digits, string pad) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i, base, digits, pad);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, string digits,\
    \ string pad, int width) \n{\n    string s = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n        s += to_string(i, base, digits, pad, width);\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, string\
    \ digits, string pad, int width, int precision) \n{\n    string s = \"\";\n  \
    \  for(long i = 0; i < n; ++i)\n        s += to_string(i, base, digits, pad, width,\
    \ precision);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbvc_pkq.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbvc_pkq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i)\
    \ + sep + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string sep2,\
    \ string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep + sep2 + sep3;\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2f1ce7mh.d(101): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2f1ce7mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\tlong i;\n\t\n\tfor(i = 0L; i <= n; i++) \n\t{\n\t\ts\
    \ += to_string(i);\n\t\ts += \" \";\n\t}\n\t\n\treturn s;\n}\nunittest\n{\n  \
    \  alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9mbig8vc.d(17): Error: undefined identifier `to_string`

    /tmp/tmp9mbig8vc.d(18): Error: slice `s` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9mbig8vc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, char sep) \n{\n    string result = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        result += to_string(i) + sep;\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep) \n\
    {\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n        result\
    \ += to_string(i) + sep;\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, char sep, string sep2) \n{\n    string result = \"\"\
    ;\n    for(long i = 0; i < n; ++i)\n        result += to_string(i) + sep + sep2;\n\
    \    return result;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string result = \"\";\n    for(long i =\
    \ 0; i < n; ++i)\n        result += to_string(i) + sep + sep2;\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ sep2, string sep3) \n{\n    string result = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n        result += to_string(i) + sep + sep2 + sep3;\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ sep2, string \nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdnkjn4dk.d(101): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdnkjn4dk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, int digits) \n{\n    string s = \"\";\n  \
    \  for(long i = 0; i < n; ++i)\n        s += to_string(i, base, digits);\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i, base, digits, precision);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int sci) \n{\n    string s = \"\";\n    for(long i = 0; i < n;\
    \ ++i)\n        s += to_string(i, base, digits, precision, sci);\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int sci, int exp) \n{\n    string s = \"\";\n    for(long i =\
    \ 0; i < n; ++i)\n        s += to_string(i, base, digits, precision, sci, exp);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5\n\
    unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20_utik8.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20_utik8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1ueku75.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ueku75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, char sep) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep;\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i) + sep;\n    return s;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char sep, string sep2)\
    \ \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s += to_string(i)\
    \ + sep + sep2;\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, string sep2) \n{\n    string s = \"\";\n    for(long i = 0; i\
    \ < n; ++i)\n        s += to_string(i) + sep + sep2;\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string sep2,\
    \ string sep3) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i) + sep + sep2 + sep3;\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string \nunittest\n{\n\
    \    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n\
    \    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1\
    \ 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2f1ce7mh.d(101): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2f1ce7mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(int i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1ueku75.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ueku75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n    \
    \    s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9irpdiz.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9irpdiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++) s += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeim0_dgz.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeim0_dgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char delim) \n\
    {\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i, delim);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string delim) \n\
    {\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i, delim);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char delim, string\
    \ delim2) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ delim, delim2);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string delim, string delim2) \n{\n    string s;\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i, delim, delim2);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char delim, string delim,\
    \ string delim2) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n       \
    \ s += to_string(i, delim, delim, delim2);\n    return s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4\
    \ 5\"\n    \n*/\nstring string_\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjbwb8olz.d(101): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjbwb8olz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for (i = 0; i <= n; ++i)\n  \
    \      s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkofx0h6.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkofx0h6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    long i;\n    \n    for (i = 0; i <= n; i++) {\n \
    \       s = s + to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias\
    \ candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpay3tnysw.d(16): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpay3tnysw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n    \
    \    s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9irpdiz.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9irpdiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51vl9qcy.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51vl9qcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    long i;\n    for(i = 0; i < n; ++i)\n    \
    \    s += to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9irpdiz.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9irpdiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n       \
    \ result += to_string(i);\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, string sep) \n{\n    string result = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        result += to_string(i) + sep;\n    return result;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n     \
    \   result += to_string(i) + sep + pad;\n    return result;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        result += to_string(i) + sep + pad + pad2;\n    return result;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string pad,\
    \ string pad2, string pad3) \n{\n    string result = \"\";\n    for(long i = 0;\
    \ i < n; ++i)\n        result += to_string(i) + sep + pad + pad2 + pad3;\n   \
    \ return result;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, string\
    \ pad, string pad2, string pad3, string pad4) \n{\n    string result = \"\";\n\
    \    for(long i = 0; i < n; ++i)\n        result += to_string(i) + sep + pad +\
    \ pad2 + pad3 + pad4;\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvn45bju.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvn45bju.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n     \
    \   s += to_string(i);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L)\
    \ == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2emlnzu.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2emlnzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base) \n{\n\
    \    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i, base);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits)\
    \ \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n        s += to_string(i,\
    \ base, digits);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base, int digits, int precision) \n{\n    string s;\n    for(long i =\
    \ 0; i < n; ++i)\n        s += to_string(i, base, digits, precision);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int width) \n{\n    string s;\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i, base, digits, precision, width);\n    return s;\n}\n\
    /*\n Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int width, int fill) \n{\n    string s;\n    for(long i = 0;\
    \ i < n; ++i)\n        s += to_string(i, base, digits, precision, width, fill);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 \nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2t9xsec1.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t9xsec1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n\
    \    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n   \
    \ assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxs9cu8g.d(13): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxs9cu8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s;\n\t\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \t\n\treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n  \
    \  assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n\
    \    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5s3_5_12.d(15): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5s3_5_12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n   \
    \ \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, int base) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n  \
    \      s += to_string(i, base);\n    return s;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long n, int base, int digits) \n{\n    string s = \"\";\n  \
    \  for(long i = 0; i < n; ++i)\n        s += to_string(i, base, digits);\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \        s += to_string(i, base, digits, precision);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int width) \n{\n    string s = \"\";\n    for(long i = 0; i <\
    \ n; ++i)\n        s += to_string(i, base, digits, precision, width);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, int base, int digits,\
    \ int precision, int width, int fill) \n{\n    string s = \"\";\n    for(long\
    \ i = 0; i < n; ++i)\n        s += to_string(i, base, digits, precision, width,\
    \ fill);\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppm0losa1.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppm0losa1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ca67waz.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ca67waz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5bh84n3.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5bh84n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51vl9qcy.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51vl9qcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    string s = \"\";\n    for(long i = 0; i < n; ++i)\n        s +=\
    \ to_string(i);\n    return s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\
    \n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\"\
    );\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0wtfo99.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0wtfo99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor(long i = 0; i < n; ++i)\n\t\ts += to_string(i);\n\
    \treturn s;\n}\nunittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
    \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yzv1mgf.d(14): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yzv1mgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
