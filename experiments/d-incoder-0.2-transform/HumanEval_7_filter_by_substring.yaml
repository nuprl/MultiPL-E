name: HumanEval_7_filter_by_substring
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
  \ only for ones that contain given substring\n    >>> filter_by_substring([], \"\
  a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
  ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \n*/\nstring[] filter_by_substring(string[]\
  \ strings, string substring) \n"
tests: "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a dscore=0 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=arrays,string,c# dscore=0\
    \ |>\n<| a tags=arrays,string,c# |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| a d", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nI didn't downvote, but I suspect it's because you didn't explain how this\
    \ works. You didn't explain how it works. You didn't explain why you think it\
    \ works. You didn't explain why you think it works. You didn't explain why you\
    \ think it works. You didn't explain why you think it works. You didn't explain\
    \ why you think it works. You didn't explain why you think it works. You didn't\
    \ explain why you think it works. You didn't explain why you think it works. You\
    \ didn't explain why you think it works. You didn't explain why you think it works.\
    \ You didn't explain why you think it works. You didn't explain why you think\
    \ it works. You didn't explain why you think it works. You didn't explain why\
    \ you think it works. You didn't explain why you think it works. You didn't explain\
    \ why you think it works. You didn't explain why you think it works. You didn't\
    \ explain why you think it works. You didn't explain why you think it works. You\
    \ didn't explain why you think it works. You didn't explain why you think it works.\
    \ You didn't explain why you think it works. You didn't explain why you think\
    \ it works. You didn't explain why you think it works. You didn't explain why\
    \ you think it works. You didn't explain why you think it works. You didn't explain\
    \ why you think it works. You didn't explain why you think it works. You didn't\
    \ explain why you think it works. You didn't explain why you think it works. You\
    \ didn't explain why you think it works. You didn't explain why you think it works.\
    \ You didn't explain why you think it works. You didn't explain why you think\
    \ it works. You didn't explain why you think it works. You didn't explain why\
    \ you think it works. You didn't explain why you think it works. You didn't explain\
    \ why you think it works. You didn't explain why you think it works. You didn't\
    \ explain why you think it works. You didn't explain why you think it works. You\
    \ didn't explain why you think it works. You didn't explain why you think it work",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\npublic static string[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like this solution, however it would be better to\
    \ use a `HashSet<string>` instead of a `List<string>` since `Contains` has `O(n)`\
    \ complexity and `HashSet` has `O(1)` complexity.\n<|/ c |>\n<| c |>\n: Yes, I\
    \ agree. HashSet is better. Thanks.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] filterBySubstring(string[] strings, string substring)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nstring[] filterBySubstring(string[] strings, string substring)\n{\n  \
    \  List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<|\
    \ a tags=string,c#,arrays |>\n<code>\nstring[] filterBySubstring(string[] strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n\
    \        if (s.Contains(substring)) {\n            result[i++] = s;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `string[] result = new string[strings.length];` should be `string[] result\
    \ = new string[strings.length - 1];`\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n\
    <|/ c |>\n<| c |>\n: I added a version that uses `List<T>` instead of `T[]`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[] strings,\
    \ string substring) \n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings) {\n        if (s.Contains(substring)) {\n            result.Add(s);\n\
    \        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work. `string[] result = new string[strings.length];`\
    \ should be `string[] result = new string[strings.length - 1];`\n<|/ c |>\n<|\
    \ c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filter_by_substring(string[] strings, string substring) \n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings) {\n        if\
    \ (s.Contains(substring)) {\n            result.Add(s);\n        }\n    }\n  \
    \  return result.ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `string[] result = new string[strings.length];` should be `string[] result\
    \ = new string[strings.length - 1];`\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings) {\n        if (s.Contains(substring)) {\n \
    \           result.Add(s);\n        }\n    }\n    return result.ToArray();\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `string[] result = new\
    \ string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n", "{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    for (string s : strings) {\n        if (s.Contains(substring)) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\npublic\
    \ static string[] FilterBySubstring(string[] strings, string substring)\n{\n \
    \   string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] filterBySubstring(string[] strings,\
    \ string substring)\n{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach (string s\
    \ in strings)\n    {\n        if (s.Contains(substring))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] filterBySubstring(string[] strings, string substring)\n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach (string s\
    \ in strings)\n    {\n        if (s.Contains(substring))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] filterBySubstring(string[]\
    \ strings, string substring)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nI didn't downvote, but I suspect it's\
    \ because you didn't explain what your code does, and why it works.\n<|/ c |>\n\
    <| c |>\nI added some explanation to the answer. Thanks for your feedback.\n<|/\
    \ c |>\n<| c |>\nI didn't downvote either, but this doesn't answer the question.\
    \ OP asked for help with his code, not for someone to write it for him. Also,\
    \ your code is inefficient, since it creates a new array for every string in the\
    \ input array. Also, your code is unnecessarily verbose. `string[] result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();` is enough.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote either, but this doesn't answer the question. OP asked for help with\
    \ his code, not for someone to write it for him. Also, your code is inefficient,\
    \ since it creates a new array for every string in the input array. Also, your\
    \ code is unnecessarily verbose. `string[] result = strings.Where(s => s.Contains(substring)).ToArray();`\
    \ is enough.\n<|/ c |>\n<| c |>\nI didn't downvote either, but this doesn't answer\
    \ the question. OP asked for help with his code, not for someone to write it for\
    \ him. Also, your code is inefficient, since it creates a new array for every\
    \ string in the input array. Also, your code is unnecessarily verbose. `string[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();` is enough.\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI didn't\
    \ downvote, but I suspect it's because you didn't explain what your code does,\
    \ and why it works.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\
    \ Thanks for your feedback.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = ", "{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,list |>\n<| a tags=string,c#,arrays,list\
    \ |>\n<code>\nstring[] result = new string[strings.length];", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abcabc\" where you\
    \ only want to match the first \"abc\"\n<|/ c |>\n<| c |>\n: Yes, it does. I tested\
    \ it before posting.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns\
    \ `[\"abc\", \"bacd\", \"array\"]` for `\"abcabc\"`.\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it yourself. It returns `[\"abc\", \"bacd\", \"array\"]` for\
    \ `\"abcabc\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns\
    \ `[\"abc\", \"bacd\", \"array\"]` for `\"abcabc\"`.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n    if\
    \ (strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] ",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays,search\
    \ |>\n<| a |>\n<code>\npublic static string[] FindStringInArray(string[] array,\
    \ string searchString)\n{\n    List<string> found = new List<string>();\n    foreach\
    \ (string s in array)\n    {\n        if (s.Contains(searchString))\n        {\n\
    \            found.Add(s);\n        }\n    }\n    return found.ToArray();\n}\n\
    </code>\n<|/ a tags=string,c#,arrays,search dscore=2 |>\n<| a |>\n<code>\npublic\
    \ static string[] FindStringInArray(string[] array, string searchString)\n{\n\
    \    List<string> found = new List<string>();\n    foreach (string s in array)\n\
    \    {\n        if (s.Contains(searchString))\n        {\n            found.Add(s);\n\
    \        }\n    }\n    return found.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays,search\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic static string[] FindStringInArray(string[]\
    \ array, string searchString)\n{\n    List<string> found = new List<string>();\n\
    \    foreach (string s in array)\n    {\n        if (s.Contains(searchString))\n\
    \        {\n            found.Add(s);\n        }\n    }\n    return found.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,search |>\n<| a dscore=2 |>\n<code>\n\
    public static string[] FindStringInArray(string[] array, string searchString)\n\
    {\n    List<string> found = new List<string>();\n    foreach (string s in array)\n\
    \    {\n        if (s.Contains(searchString))\n        {\n            found.Add(s);\n\
    \        }\n    }\n    return found.ToArray();\n}\n</code>\n<|/ a tags=string,c#,arrays,search\
    \ |>\n<| a tags=string,c#,arrays,search |>\n<code>\npublic static string[] FindStringInArray(string[]\
    \ array, string searchString)\n{\n    List<string> found = new List<string>();\n\
    \    foreach (string s in array)\n    {\n        if (s.Contains(searchString))\n\
    \        {\n            found.Add(s);\n        }\n    }\n    return found.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays,search |>\n<code>\n\
    public static string[] FindStringInArray(string[] array, string search", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ i++)\n{\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n\
    {\n    if(strings[i].Contains(substring))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; i++)\n{\n    if(strings[i].Contains(substring))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,list |>\n<| a tags=string,c#,list |>\n<code>\npublic static\
    \ List<string> FilterBySubstring(List<string> strings, string substring)\n{\n\
    \    return strings.Where(s => s.Contains(substring)).ToList();\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic static List<string> FilterBySubstring(List<string>\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,list\
    \ |>\n<| a |>\n<code>\npublic static List<string> FilterBySubstring(List<string>\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ tags=string,c#,list |>\n<| a dscore=0 |>\n<code>\npublic static List<string>\
    \ FilterBySubstring(List<string> strings, string substring)\n{\n    List<string>\
    \ result = new List<string>();\n    foreach (string s in strings)\n    {\n   \
    \     if (s.Contains(substring))\n            result.Add(s);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=string,c#,list |>\n<| a dscore=0 |>\n<code>\n\
    public static List<string> FilterBySubstring(List<string> strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=string,c#,list |>\n<| a tags=string,c#,list\
    \ |>\n<code>\npublic static List<string> FilterBySubstring(List<string> strings,\
    \ string substring)\n{\n    List<string> result = new List<string>();\n    foreach\
    \ (string s in strings)\n    {\n        if (s.Contains(substring))\n         \
    \   result.Add(s);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\npublic static List<string> Filter", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].contains(substring)) {\n            result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThanks so much for this! I ended up using your first solution and\
    \ it worked perfectly. Thanks again!\n<|/ c |>\n<| a tags=string,c#,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i) {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstring[] result = new\
    \ string[strings.length];\nfor (int i = 0; i < strings.length; ++i) {\n    if\
    \ (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n    }\n\
    }\n</code>\n<|/ a tags=string,c#,arrays dscore=1 |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\
    \ {\n    if (strings[i].Contains(substring)) {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a dscore=1 tags=string,c#,arrays |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i\
    \ < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n      \
    \  result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i) {\n    if (strings[i].Contains(substring))\
    \ {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\nstring[] result = new string[strings.length];\nfor (int i = 0;\
    \ i < strings.length; ++i) {\n    if (strings[i].Contains(substring)) {\n    \
    \    result[i] = string", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,substring |>\n<| c |>\nI like this solution. Easy to read,\
    \ easy to understand, and easy to implement. Thanks.\n<|/ c |>\n<| a tags=string,c#,substring\
    \ |>\n<code>\nstring s = \"Hello World\";\nstring sub = \"World\";", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays,substring\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static string[] FilterBySubstring(string[]\
    \ strings, string substring)\n{\n    List<string> result = new List<string>();\n\
    \    foreach (string s in strings)\n    {\n        if (s.Contains(substring))\n\
    \            result.Add(s);\n    }\n    return result.ToArray();\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,substring |>\n<| a tags=c#,string,arrays,substring\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string\
    \ s in strings)\n    {\n        if (s.Contains(substring))\n            result.Add(s);\n\
    \    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,string,arrays,substring\
    \ |>\n<| a tags=c#,string,arrays,substring |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static string[]\
    \ FilterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string,arrays,substring |>\n<| a tags=c#,string,arrays,substring\
    \ |>\n<code>\npublic static string[] FilterBySubstring(string[] strings, string\
    \ substring)\n{\n    List<string> result = new List<string>();\n    foreach (string ",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see if it\
    \ works. I appreciate your help and will let you know if it works.\n<|/ c |>\n\
    <| c |>\nI added a test case to my question to show that it doesn't work. Thanks\
    \ again for your help.\n<|/ c |>\n<| c |>\nI added a test case to my question\
    \ to show that it doesn't work. Thanks again for your help.\n<|/ c |>\n<| c |>\n\
    I added a test case to my question to show that it doesn't work. Thanks again\
    \ for your help.\n<|/ c |>\n<| c |>\nI added a test case to my question to show\
    \ that it doesn't work. Thanks again for your help.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] filterBySubstring(string[] strings, string substring)\n\
    {\n    List<string> result = new List<string>();\n    foreach (string s in strings)\n\
    \    {\n        if (s.Contains(substring))\n            result.Add(s);\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I'm going to try this out and see if it works. I appreciate\
    \ your help and will let you know if it works.\n<|/ c |>\n<| c |>\nI added a test\
    \ case to my question to show that it doesn't work. Thanks again for your help.\n\
    <|/ c |>\n<| c |>\nI added a test case to my question to show that it doesn't\
    \ work. Thanks again for your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ filterBySubstring(string[] strings, string substring)\n{\n    List<string> result\
    \ = new List<string>();\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Contains(substring))\n            result.Add(s);\n    }\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. I'm\
    \ going to try this out and see if it works. I appreciate your help and will let\
    \ you know if it works.\n<|/ c |>\n<| c |>\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks, this was very helpful. I'm new to C# and didn't\
    \ know about `contains()`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Text.RegularExpressions;", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings) {\n        if(s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"]\n    \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], \"a\")\n    []\n    >>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code doesn't compile. `string[]\
    \ result = new string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| c |>\nThis code\
    \ doesn't compile. `string[] result = new string[strings.length];` should be `string[]\
    \ result = new string[strings.length - 1];`\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length returns the number of elements in\
    \ the array, but you want the number of elements in the array minus one. Change\
    \ it to:\n<code>\nstring[] result = new string[strings.length - 1];\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is wrong. strings.length\
    \ returns the number of elements in the array, but you want the number of elements\
    \ in the array minus one. Change it to:\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is wrong. strings.length\
    \ returns the number of elements in the array, but you want the number of elements\
    \ in the array minus one. Change it to:\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is wrong. strings.length returns\
    \ the number of elements in the array, but you want the number of elements in\
    \ the array minus one. Change it to:\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=2 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line is wrong. strings.length\
    \ returns the number of elements in the array, but you want the number of elements\
    \ in the array "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
