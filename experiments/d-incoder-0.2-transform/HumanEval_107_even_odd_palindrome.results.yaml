language: d
name: HumanEval_107_even_odd_palindrome
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0;\n    long\
    \ odd = 0;\n    for(long i = 1; i < n; i = i + 2)\n    {\n        long temp =\
    \ 0;\n        for(long j = i; j < n; j++)\n        {\n            temp = temp\
    \ * 10 + j % 10;\n        }\n        if(temp == i)\n        {\n            even\
    \ = even + 1;\n        }\n        else\n        {\n            odd = odd + 1;\n\
    \        }\n    }\n    return Tuple!(long, long)(even, odd);\n}\nunittest\n{\n\
    \    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L,\
    \ 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpni0orswn.d(53): unittest failure\n----------------\n??:?
    _d_unittestp [0x428bcd]\n??:? void tmpni0orswn.__unittest_L49_C1() [0x428077]\n??:?
    void tmpni0orswn.__modtest() [0x428638]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d4fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c40a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430d31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4311e0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430cbd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42c3e1]\n??:? runModuleUnitTests [0x42d2d1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42901c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428fa3]\n??:? _d_run_main [0x428f0e]\n??:? main [0x42864b]\n??:?
    __libc_start_main [0x8e66d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even = 0;\n    long odd = 0;\n    long palindrome = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long oddEven = 0;\n    long evenOdd = 0;\n    long evenOddEven\
    \ = 0;\n    long oddEvenOdd = 0;\n    long evenOddEvenOdd = 0;\n    long oddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long\
    \ oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\nunittest\n{\n\
    \    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L,\
    \ 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqtz2uku.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmpjqtz2uku.d(62):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpjqtz2uku.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0;\n    long\
    \ odd = 0;\n    long palindrome = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long oddEven\
    \ = 0;\n    long evenOdd = 0;\n    long evenPalindrome = 0;\n    long oddPalindrome\
    \ = 0;\n    long palindromeEven = 0;\n    long palindromeOdd = 0;\n    long evenEven\
    \ = 0;\n    long evenOdd = 0;\n    long oddOdd = 0;\n    long evenPalindromeEven\
    \ = 0;\n    long evenPalindromeOdd = 0;\n    long oddPalindromeEven = 0;\n   \
    \ long oddPalindromeOdd = 0;\n    long evenEven = 0;\n    long evenOdd = 0;\n\
    \    long oddOdd = 0;\n    long evenPalindromeEven = 0;\n    long evenPalindromeOdd\
    \ = 0;\n    long oddPalindromeEven = 0;\n    long oddPalindromeOdd = 0;\n    long\
    \ evenEven = 0;\n    long evenOdd = 0;\n    long oddOdd = 0;\n    long evenPalindromeEven\
    \ = 0;\n    long evenPalindromeOdd = 0;\n    long oddPalindromeEven = 0;\n   \
    \ long oddPalindromeOdd = 0;\n    long evenEven = 0;\n    long evenOdd = 0;\n\
    \    long oddOdd = 0;\n    long evenPalindromeEven = 0;\n    long evenPalindromeOdd\
    \ = 0;\n    long oddPalindromeEven = 0;\n    long oddPalindromeOdd = 0;\n    long\
    \ evenEven = 0;\n    long evenOdd = 0;\n    long oddOdd = 0;\n    long evenPalindromeEven\
    \ = 0;\n    long evenPalindromeOdd = 0;\n    long oddPalindromeEven = 0;\n   \
    \ long oddPalindromeOdd = 0;\n    long evenEven = 0;\n    long evenOdd = 0;\n\
    \    long oddOdd = 0;\n    long evenPalindromeEven = 0;\n    long evenPalindromeOdd\
    \ = 0;\n    long oddPalindromeEven = 0;\n    long oddPalindromeOdd = 0;\n    long\
    \ evenEven = 0;\n    long evenOdd = 0;\n    long oddOdd = 0;\n    long evenPalindromeEven\
    \ = 0;\n    long evenPalindromeOdd = 0;\n\nunittest\n{\n    alias candidate =\
    \ even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L, 13L));\n   \
    \ assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L,\
    \ 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv4awnboa.d(92): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4awnboa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0;\n    long\
    \ odd = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        long reverse = 0;\n\
    \        for(long j = i; j > 0; j--)\n        {\n            reverse = reverse\
    \ * 10 + j % 10;\n        }\n        if(reverse == i)\n        {\n           \
    \ even++;\n        }\n        else\n        {\n            odd++;\n        }\n\
    \    }\n    return Tuple!(long, long)(even, odd);\n}\n/*\nunittest\n{\n    alias\
    \ candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L,\
    \ 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkxv26oqk.d(49): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkxv26oqk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even = 0, odd = 0;\n    for(long i = 2; i <= n; i++)\n    {\n      \
    \  long temp;\n        temp = i;\n        while(temp > 0)\n        {\n       \
    \     long digit = temp % 10;\n            if(digit % 2 == 0)\n            {\n\
    \                even++;\n            }\n            else\n            {\n   \
    \             odd++;\n            }\n            temp /= 10;\n        }\n    }\n\
    \    result = (even, odd);\n    return result;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L,\
    \ 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzdu094fs.d(52): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzdu094fs.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even = 0;\n    long odd = 0;\n    long palindrome = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long oddEven = 0;\n    long evenOdd = 0;\n    long evenPalindrome\
    \ = 0;\n    long oddPalindrome = 0;\n    long palindromeEven = 0;\n    long palindromeOdd\
    \ = 0;\n    long evenPalindromeEven = 0;\n    long evenPalindromeOdd = 0;\n  \
    \  long oddPalindromeEven = 0;\n    long oddPalindromeOdd = 0;\n    long evenEven\
    \ = 0;\n    long evenOdd = 0;\n    long oddEven = 0;\n    long oddOdd = 0;\n \
    \   long evenPalindromeEven = 0;\n    long evenPalindromeOdd = 0;\n    long oddPalindromeEven\
    \ = 0;\n    long oddPalindromeOdd = 0;\n    long evenEven = 0;\n    long evenOdd\
    \ = 0;\n    long oddEven = 0;\n    long oddOdd = 0;\n    long evenPalindromeEven\
    \ = 0;\n    long evenPalindromeOdd = 0;\n    long oddPalindromeEven = 0;\n   \
    \ long oddPalindromeOdd = 0;\n    long evenEven = 0;\n    long evenOdd = 0;\n\
    \    long oddEven = 0;\n    long oddOdd = 0;\n    long evenPalindromeEven = 0;\n\
    \    long evenPalindromeOdd = 0;\n    long oddPalindromeEven = 0;\n    long oddPalindromeOdd\
    \ = 0;\n    long evenEven = 0;\n    long evenOdd = 0;\n    long oddEven = 0;\n\
    \    long oddOdd = 0;\n    long evenPalindromeEven = 0;\n    long evenPalindromeOdd\
    \ = 0;\n    long oddPalindromeEven = 0;\n    long oddPalindromeOdd = 0;\n    long\
    \ evenEven = 0;\n    long evenOdd = 0;\n    long oddEven = 0;\n    long oddOdd\
    \ = 0;\n    long evenPalindromeEven = 0;\n    long evenPalindromeOdd = 0;\n  \
    \  long oddPalindromeEven = 0;\n    long oddPalindromeOdd = 0;\n    long evenEven\
    \ = 0;\n    long evenOdd = 0;\n    long oddEven = 0;\n    long oddO\nunittest\n\
    {\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) ==\
    \ tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq0ny3gba.d(93): Error: semicolon expected, not `unittest`\n/tmp/tmpq0ny3gba.d(93):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq0ny3gba.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even_palindromes\
    \ = 0;\n    long odd_palindromes = 0;\n    long i;\n    for(i = 1; i <= n; i++)\n\
    \    {\n        long temp;\n        temp = i;\n        while(temp > 0)\n     \
    \   {\n            long remainder = temp % 10;\n            temp = temp / 10;\n\
    \            if(remainder % 2 == 0)\n            {\n                even_palindromes++;\n\
    \            }\n            else\n            {\n                odd_palindromes++;\n\
    \            }\n        }\n    }\n    return Tuple!(even_palindromes, odd_palindromes);\n\
    }\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L)\
    \ == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(even_palindromes, odd_palindromes)` cannot
    use local `even_palindromes` as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(even_palindromes, odd_palindromes)` cannot
    use local `odd_palindromes` as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmpqqetbxyj.d(50):
    Error: template instance `tmpqqetbxyj.even_odd_palindrome.Tuple!(even_palindromes,
    odd_palindromes)` error instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqqetbxyj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0;\n    long\
    \ odd = 0;\n    long palindrome = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long oddEven\
    \ = 0;\n    long evenOdd = 0;\n    long evenOddEven = 0;\n    long oddEvenOdd\
    \ = 0;\n    long evenOddEvenOdd = 0;\n    long oddEvenOddEvenOdd = 0;\n    long\
    \ evenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOdd = 0;\n    long\
    \ evenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long\
    \ oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    unittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L)\
    \ == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpljgl7rhp.d(61): Error: semicolon expected, not `unittest`\n/tmp/tmpljgl7rhp.d(61):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpljgl7rhp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0, odd = 0;\n\
    \    for(long i = 1; i <= n; i++){\n        long reverse = reverse(i);\n     \
    \   if(i % 2 == 0){\n            if(reverse % 2 == 0){\n                even++;\n\
    \            }\n            else{\n                odd++;\n            }\n   \
    \     }\n        else{\n            if(reverse % 2 == 1){\n                even++;\n\
    \            }\n            else{\n                odd++;\n            }\n   \
    \     }\n    }\n    return Tuple!(long, long)((even, odd));\n}\n/*\nunittest\n\
    {\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) ==\
    \ tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7aloyfof.d(51): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7aloyfof.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0;\n    long\
    \ odd = 0;\n    long palindrome = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = n;\n    while(l > 0)\n    {\n        even = even + 1;\n\
    \        odd = odd + 1;\n        l = l / 2;\n    }\n    while(l > 0)\n    {\n\
    \        palindrome = palindrome + 1;\n        l = l / 2;\n    }\n    while(i\
    \ < n)\n    {\n        j = i;\n        while(j < n)\n        {\n            k\
    \ = j;\n            while(k <= j)\n            {\n                l = k + 1;\n\
    \                while(l <= j)\n                {\n                    if(std.string.palindrome(std.int.to_string(k))\
    \ && std.string.palindrome(std.int.to_string(l)))\n                    {\n   \
    \                     palindrome = palindrome + 1;\n                        l\
    \ = l / 2;\n                    }\n                    l = l / 2;\n          \
    \      }\n                l = k + 1;\n            }\n            k = j;\n    \
    \        j = j + 1;\n        }\n        i = i + 1;\n    }\n    return Tuple!(long,\
    \ long)(even, odd, palindrome);\n}\n/*\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\
    \n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) ==\
    \ tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L)\
    \ == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L)\
    \ == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L)\
    \ == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsjd9lyg2.d(58): Error: identifier expected following `.`, not
    `int`\n/tmp/tmpsjd9lyg2.d(58): Error: identifier expected following `.`, not `int`\n/tmp/tmpsjd9lyg2.d(74):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjd9lyg2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even = 0;\n    long odd = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    long count = 0;\n    long temp = 0;\n    long temp2 = 0;\n\
    \    \n    while (i < n) {\n        temp = i;\n        \n        while (temp >\
    \ 0) {\n            temp = temp / 10;\n            count++;\n        }\n     \
    \   \n        if (temp % 2 == 0) {\n            even++;\n        } else {\n  \
    \          odd++;\n        }\n        \n        i++;\n    }\n    \n    i = 1;\n\
    \    j = 1;\n    \n    while (j < n) {\n        temp = j;\n        \n        while\
    \ (temp > 0) {\n            temp = temp / 10;\n            count++;\n        }\n\
    \        \n        if (temp % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        \n        j++;\n    }\n    \n    i = 1;\n\
    \    j = 1;\n    \n    while (j < n) {\n        temp = j;\n        \n        while\
    \ (temp > 0) {\n            temp = temp / 10;\n            count++;\n        }\n\
    \        \n        if (temp % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        \n        j++;\n    }\n    \n    i = 1;\n\
    \    j = 1;\n    \n    while (j < n) {\n        temp = j;\n        \n        while\
    \ (temp > 0) {\n            temp = temp / 10;\n            count++;\n        }\n\
    \        \n        if (temp % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        \n        j++;\n    }\n    \n    i = 1;\n\
    \    j = 1;\n    \n    while (j < n) {\n        temp = j;\n        \n        while\
    \ (temp > 0) {\n            temp = temp / 10;\n            count++;\n        }\n\
    \        \n        if (temp % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        \n        j++;\n    }\n    \n    i = 1;\n\
    \    j = 1;\n    \n    while (j < n) {\n        temp = j;\n        \n        while\
    \ (temp > 0) {\n            temp = temp / 10;\n            count++;\n        }\n\
    \        \n        if (temp % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        \n        j++;\n    }\n    \n    i = 1;\n\
    \    j = 1;\n    \n    while (j < n) {\n        temp = j;\n        \n        while\
    \ (temp > 0) {\n            temp = temp / 10;\n            count++;\n        }\n\
    \        \n        if (temp % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        \n        j++;\n    }\n    \n    i = 1;\n\
    \    j = 1;\n    \n\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\
    \n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) ==\
    \ tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L)\
    \ == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L)\
    \ == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L)\
    \ == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3bn62t7e.d(180): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3bn62t7e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) even_palindrome\
    \ = Tuple!(long, long);\n    Tuple!(long, long) odd_palindrome = Tuple!(long,\
    \ long);\n    \n    for(long i = 1; i < n; i++)\n    {\n        long even_palindrome_sum\
    \ = 0;\n        long odd_palindrome_sum = 0;\n        \n        for(long j = i;\
    \ j < n; j++)\n        {\n            long even_palindrome_temp = even_odd_palindrome(j);\n\
    \            long odd_palindrome_temp = even_odd_palindrome(j + 1);\n        \
    \    \n            even_palindrome_sum += even_palindrome_temp.Item1;\n      \
    \      odd_palindrome_sum += odd_palindrome_temp.Item1;\n        }\n        \n\
    \        even_palindrome.Item1 = even_palindrome_sum;\n        odd_palindrome.Item1\
    \ = odd_palindrome_sum;\n    }\n    \n    return even_palindrome;\n}\nunittest\n\
    {\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) ==\
    \ tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuixz94z9.d(29): Error: need `this` for `__expand_field_0` of
    type `long`\n/tmp/tmpuixz94z9.d(29): Error: need `this` for `__expand_field_1`
    of type `long`\n/tmp/tmpuixz94z9.d(30): Error: need `this` for `__expand_field_0`
    of type `long`\n/tmp/tmpuixz94z9.d(30): Error: need `this` for `__expand_field_1`
    of type `long`\n/tmp/tmpuixz94z9.d(39): Error: cannot implicitly convert expression
    `even_odd_palindrome(j)` of type `Tuple!(long, long)` to `long`\n/tmp/tmpuixz94z9.d(40):
    Error: cannot implicitly convert expression `even_odd_palindrome(j + 1L)` of type
    `Tuple!(long, long)` to `long`\n/tmp/tmpuixz94z9.d(42): Error: no property `Item1`
    for type `long`\n/tmp/tmpuixz94z9.d(43): Error: no property `Item1` for type `long`\n/tmp/tmpuixz94z9.d(46):
    Error: no property `Item1` for type `Tuple!(long, long)`\n/tmp/tmpuixz94z9.d(47):
    Error: no property `Item1` for type `Tuple!(long, long)`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpuixz94z9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even_palindromes\
    \ = 0;\n    long odd_palindromes = 0;\n    long palindromes = 0;\n    long max_palindromes\
    \ = 0;\n    long max_even_palindromes = 0;\n    long max_odd_palindromes = 0;\n\
    \    long max_palindromes_even = 0;\n    long max_palindromes_odd = 0;\n    long\
    \ max_even_palindromes_even = 0;\n    long max_even_palindromes_odd = 0;\n   \
    \ long max_odd_palindromes_even = 0;\n    long max_odd_palindromes_odd = 0;\n\
    \    long max_palindromes_even_even = 0;\n    long max_palindromes_even_odd =\
    \ 0;\n    long max_palindromes_odd_even = 0;\n    long max_palindromes_odd_odd\
    \ = 0;\n    long max_even_palindromes_even_even = 0;\n    long max_even_palindromes_even_odd\
    \ = 0;\n    long max_even_palindromes_odd_even = 0;\n    long max_even_palindromes_odd_odd\
    \ = 0;\n    long max_odd_palindromes_even_even = 0;\n    long max_odd_palindromes_even_odd\
    \ = 0;\n    long max_odd_palindromes_odd_even = 0;\n    long max_odd_palindromes_odd_odd\
    \ = 0;\n    long max_even_palindromes_even_even_even = 0;\n    long max_even_palindromes_even_even_odd\
    \ = 0;\n    long max_even_palindromes_even_odd_even = 0;\n    long max_even_palindromes_even_odd_odd\
    \ = 0;\n    long max_even_palindromes_odd_even_even = 0;\n    long max_even_palindromes_odd_even_odd\
    \ = 0;\n    long max_even_palindromes_odd_odd_even = 0;\n    long max_even_palindromes_odd_odd_odd\
    \ = 0;\n    long max_odd_palindromes_even_even_even_even = 0;\n    long max_odd_palindromes_even_even_even_odd\
    \ = 0;\n    long max_odd_palindromes_even_even_odd_even = 0;\n    long max_odd_palindromes_even_even_odd_odd\
    \ = 0;\n    long max_odd_palindrome\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\
    \n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) ==\
    \ tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L)\
    \ == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L)\
    \ == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L)\
    \ == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp5bm9x7s.d(66): Error: semicolon expected, not `unittest`\n/tmp/tmpp5bm9x7s.d(66):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp5bm9x7s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0, odd = 0;\n\
    \    for(long i = 2; i <= n; i++)\n    {\n        if(isPalindrome(i))\n      \
    \  {\n            even++;\n        }\n        else\n        {\n            odd++;\n\
    \        }\n    }\n    return Tuple!(long, long)(even, odd);\n}\nunittest\n{\n\
    \    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L,\
    \ 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7h1ly7wk.d(32): Error: undefined identifier `isPalindrome`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h1ly7wk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0, odd = 0;\n\
    \    for(long i = 1; i <= n; i++)\n    {\n        long reverse = 0;\n        for(long\
    \ j = i; j > 0; j--)\n        {\n            reverse = reverse * 10 + j % 10;\n\
    \        }\n        if(reverse == i)\n        {\n            even++;\n       \
    \ }\n        else\n        {\n            odd++;\n        }\n    }\n    return\
    \ Tuple!(long, long)(even, odd);\n}\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\
    \n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) ==\
    \ tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L)\
    \ == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L)\
    \ == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L)\
    \ == tuple(0L, 1L));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpry704g69.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x428bad]\n??:? void tmpry704g69.__unittest_L48_C1() [0x428053]\n??:?
    void tmpry704g69.__modtest() [0x428614]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d4db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430d11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4311c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430c9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42c3c1]\n??:? runModuleUnitTests [0x42d2b1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ffc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428f83]\n??:? _d_run_main [0x428eee]\n??:? main [0x428627]\n??:?
    __libc_start_main [0x72e0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    long even = 0;\n    long\
    \ odd = 0;\n    long palindrome = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long oddEven\
    \ = 0;\n    long evenOdd = 0;\n    long evenOddEven = 0;\n    long oddEvenOdd\
    \ = 0;\n    long evenOddEvenOdd = 0;\n    long oddEvenOddEvenOdd = 0;\n    long\
    \ evenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOdd = 0;\n    long\
    \ evenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long\
    \ oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long oddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n    long evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    unittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L)\
    \ == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L)\
    \ == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpljgl7rhp.d(61): Error: semicolon expected, not `unittest`\n/tmp/tmpljgl7rhp.d(61):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpljgl7rhp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even, odd;\n    long palindrome;\n    even = odd = palindrome = 0;\n\
    \    \n    for(long i = 1; i <= n; i++)\n    {\n        long temp;\n        temp\
    \ = i;\n        while(temp != 0)\n        {\n            temp = temp / 10;\n \
    \           even++;\n        }\n        temp = i;\n        while(temp != 0)\n\
    \        {\n            temp = temp % 10;\n            odd++;\n        }\n   \
    \     if(even > odd)\n        {\n            palindrome++;\n        }\n    }\n\
    \    result.first = even;\n    result.second = odd;\n    result.third = palindrome;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\
    \n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) ==\
    \ tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L)\
    \ == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L)\
    \ == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L)\
    \ == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptvscq09x.d(54): Error: no property `first` for type `Tuple!(long,
    long)`\n/tmp/tmptvscq09x.d(55): Error: no property `second` for type `Tuple!(long,
    long)`\n/tmp/tmptvscq09x.d(56): Error: no property `third` for type `Tuple!(long,
    long)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptvscq09x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even = 0;\n    long odd = 0;\n    long palindrome = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i; j < n; j++)\n        {\n            if(std.math.isEven(i) && std.math.isEven(j))\n\
    \            {\n                even++;\n            }\n            else if(std.math.isEven(i)\
    \ && std.math.isOdd(j))\n            {\n                odd++;\n            }\n\
    \            else if(std.math.isOdd(i) && std.math.isEven(j))\n            {\n\
    \                odd++;\n            }\n            else if(std.math.isOdd(i)\
    \ && std.math.isOdd(j))\n            {\n                palindrome++;\n      \
    \      }\n        }\n    }\n    \n    result.0 = even;\n    result.1 = odd;\n\
    \    result.2 = palindrome;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L, 13L));\n \
    \   assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L,\
    \ 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L)\
    \ == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L)\
    \ == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxdvxj6sc.d(59): Error: found `0.00000` when expecting `;` following
    statement\n/tmp/tmpxdvxj6sc.d(59): Error: found `=` instead of statement\n/tmp/tmpxdvxj6sc.d(60):
    Error: found `0.1` when expecting `;` following statement\n/tmp/tmpxdvxj6sc.d(60):
    Error: found `=` instead of statement\n/tmp/tmpxdvxj6sc.d(61): Error: found `0.2`
    when expecting `;` following statement\n/tmp/tmpxdvxj6sc.d(61): Error: found `=`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdvxj6sc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even = 0;\n    long odd = 0;\n    long palindrome = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long oddEven = 0;\n    long oddEvenCount = 0;\n    long oddEvenCount2\
    \ = 0;\n    long oddEvenCount3 = 0;\n    long oddEvenCount4 = 0;\n    long oddEvenCount5\
    \ = 0;\n    long oddEvenCount6 = 0;\n    long oddEvenCount7 = 0;\n    long oddEvenCount8\
    \ = 0;\n    long oddEvenCount9 = 0;\n    long oddEvenCount10 = 0;\n    long oddEvenCount11\
    \ = 0;\n    long oddEvenCount12 = 0;\n    long oddEvenCount13 = 0;\n    long oddEvenCount14\
    \ = 0;\n    long oddEvenCount15 = 0;\n    long oddEvenCount16 = 0;\n    long oddEvenCount17\
    \ = 0;\n    long oddEvenCount18 = 0;\n    long oddEvenCount19 = 0;\n    long oddEvenCount20\
    \ = 0;\n    long oddEvenCount21 = 0;\n    long oddEvenCount22 = 0;\n    long oddEvenCount23\
    \ = 0;\n    long oddEvenCount24 = 0;\n    long oddEvenCount25 = 0;\n    long oddEvenCount26\
    \ = 0;\n    long oddEvenCount27 = 0;\n    long oddEvenCount28 = 0;\n    long oddEvenCount29\
    \ = 0;\n    long oddEvenCount30 = 0;\n    long oddEvenCount31 = 0;\n    long oddEvenCount32\
    \ = 0;\n    long oddEvenCount33 = 0;\n    long oddEvenCount34 = 0;\n    long oddEvenCount35\
    \ = 0;\n    long oddEvenCount36 = 0;\n    long oddEvenCount37 = 0;\n    long oddEvenCount38\
    \ = 0;\n    long oddEvenCount39 = 0;\n    long oddEvenCount40 = 0;\n    long oddEvenCount41\
    \ = 0;\n    long oddEvenCount42 = 0;\n    long oddEvenCount43 = 0;\n    long oddEvenCount44\
    \ = 0;\n    long oddEvenCount45 = 0;\n    long oddEvenCount46 = 0;\n    long oddEvenCount47\
    \ = 0;\n    long oddEvenCount48 = 0;\n    long oddEvenCount49 = 0;\n    long oddEvenCount50\
    \ = 0;\n    long oddEvenCount51 = 0;\n    long oddEvenCount52 = 0;\n    long oddEvenCount53\
    \ = 0;\n    long oddEvenCount54 = 0;\n    long oddEvenCount55 = 0;\n    long oddEvenCount56\
    \ = 0;\n    long oddEvenCount57\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\
    \n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) ==\
    \ tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L)\
    \ == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L)\
    \ == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L)\
    \ == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr806860s.d(97): Error: semicolon expected, not `unittest`\n/tmp/tmpr806860s.d(97):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr806860s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a positive integer\
    \ n, return a tuple that has the number of even and odd\n    integer palindromes\
    \ that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n    >>> even_odd_palindrome(3L)\n\
    \    tuple(1L, 2L)\n        Explanation:\n        Integer palindrome are 1, 2,\
    \ 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n    >>>\
    \ even_odd_palindrome(12L)\n    tuple(4L, 6L)\n        Explanation:\n        Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n    \n*/\n\
    Tuple!(long, long) even_odd_palindrome(long n) \n{\n    Tuple!(long, long) result;\n\
    \    long even = 0;\n    long odd = 0;\n    for(long i = 1; i <= n; i++){\n  \
    \      long temp = i;\n        while(temp > 0){\n            long remainder =\
    \ temp % 10;\n            if(remainder == 0){\n                even++;\n     \
    \           temp/=10;\n            }else{\n                odd++;\n          \
    \      temp/=10;\n            }\n        }\n    }\n    result = (even, odd);\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = even_odd_palindrome;\n\
    \n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) ==\
    \ tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L)\
    \ == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L)\
    \ == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L)\
    \ == tuple(0L, 1L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphjrezkmv.d(48): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphjrezkmv.d", "-I/tmp"]\n'''
  stdout: b''
