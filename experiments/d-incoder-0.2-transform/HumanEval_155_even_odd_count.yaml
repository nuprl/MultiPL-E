name: HumanEval_155_even_odd_count
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple\
  \ that has the number of even and odd digits respectively.\n\n     Example:\n  \
  \  >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n \
  \   tuple(1L, 2L)\n    \n*/\nTuple!(long, long) even_odd_count(long num) \n"
tests: "unittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L)\
  \ == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L)\
  \ == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L)\
  \ == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L)\
  \ == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}"
completions: ["{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit\
    \ = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even,\
    \ odd);\n}", "{\n    long even, odd;\n    even = num / 10;\n    odd = num % 10;\n\
    \    return Tuple!(even, odd);\n}", "{\n\tlong even = 0;\n\tlong odd = 0;\n\t\
    while(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tif(digit % 2 == 0)\n\t\t\
    {\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\
    \t}\n\treturn Tuple!(long, long) odd, even;\n}", "{\n\tlong even = 0, odd = 0;\n\
    \twhile (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit\
    \ % 2 == 0) {\n\t\t\teven++;\n\t\t} else {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn\
    \ Tuple!(long, long) even, odd;\n}", "{\n\tlong even = 0, odd = 0;\n\twhile(num\
    \ > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\
    \t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long,\
    \ long) even, odd;\n}\n/*\nGiven an integer. return a tuple that has the number\
    \ of even and odd digits respectively.", "{\n\tlong even = 0, odd = 0;\n\twhile\
    \ (num > 0) {\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 ==\
    \ 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn\
    \ Tuple!(long, long) odd, even;\n}", "{\n\tlong even = 0;\n\tlong odd = 0;\n\t\
    while(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit\
    \ % 2 == 0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\t\t\
    }\n\t}\n\treturn Tuple!(long, long) odd, even;\n}", "{\n    long even = 0;\n \
    \   long odd = 0;\n    while(num > 0) {\n        long digit = num % 10;\n    \
    \    num /= 10;\n        if(digit % 2 == 0) {\n            even++;\n        }\
    \ else {\n            odd++;\n        }\n    }\n    return Tuple!(long, long)\
    \ odd, even;\n}", "{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile(num > 0) {\n\t\
    \tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0) {\n\t\t\teven\
    \ += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)\
    \ even_odd_count(even), even_odd_count(odd);\n}", "{\n    long even = 0;\n   \
    \ long odd = 0;\n    while(num > 0)\n    {\n        long digit = num % 10;\n \
    \       if(digit % 2 == 0)\n        {\n            even++;\n        }\n      \
    \  else\n        {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return Tuple!(long, long) odd, even;\n}\n/*\nGiven a positive integer. return\
    \ a tuple that has the number of even and odd digits respectively.", "{\n    long\
    \ even = 0;\n    long odd = 0;\n    while(num > 0) {\n        long digit = num\
    \ % 10;\n        if(digit % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long,\
    \ long) odd, even;\n}", "{\n\tlong even = 0, odd = 0;\n\twhile (num > 0) {\n\t\
    \tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven\
    \ += 1;\n\t\t} else {\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)!(even,\
    \ odd);\n}", "{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit\
    \ = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)\
    \ odd, even;\n}", "{\n    long even = 0;\n    long odd = 0;\n    while(num > 0)\n\
    \    {\n        long digit = num % 10;\n        num /= 10;\n        if(digit %\
    \ 2 == 0)\n        {\n            even++;\n        }\n        else\n        {\n\
    \            odd++;\n        }\n    }\n    return Tuple!(long, long) odd, even;\n\
    }", "{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit = num\
    \ % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\t\t\
    }\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long) odd,\
    \ even;\n}", "{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\t\tlong digit\
    \ = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\teven += 1;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long, long)\
    \ even_odd_count(even), even_odd_count(odd);\n}", "{\n\tlong even = 0, odd = 0;\n\
    \twhile(num > 0)\n\t{\n\t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit\
    \ % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn Tuple!(long,\
    \ long) odd, even;\n}", "{\n\tlong even = 0, odd = 0;\n\twhile(num > 0)\n\t{\n\
    \t\tlong digit = num % 10;\n\t\tnum /= 10;\n\t\tif(digit % 2 == 0)\n\t\t{\n\t\t\
    \teven += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd += 1;\n\t\t}\n\t}\n\treturn Tuple!(long,\
    \ long) odd, even;\n}", "{\n\tlong even = 0;\n\tlong odd = 0;\n\twhile (num >\
    \ 0) {\n\t\tlong digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\
    \t\t} else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn Tuple!(long,\
    \ long) even, odd;\n}", "{\n    long even = 0;\n    long odd = 0;\n    while(num\
    \ > 0)\n    {\n        long digit = num % 10;\n        if(digit % 2 == 0)\n  \
    \      {\n            even++;\n        }\n        else\n        {\n          \
    \  odd++;\n        }\n        num /= 10;\n    }\n    return Tuple!(long, long)\
    \ odd, even;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
