name: HumanEval_108_count_nums
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function count_nums\
  \ which takes an array of integers and returns\n    the number of elements which\
  \ has a sum of digits > 0.\n    If a number is negative, then its first signed digit\
  \ will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n\
  \    0L\n    >>> count_nums([-1L, 11L, -11L])\n    1L\n    >>> count_nums([1L, 1L,\
  \ 2L])\n    3L\n    \n*/\nlong count_nums(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
  \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
  \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
  \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
  \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
  \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n   \
    \ {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=algorithm,arrays,java\
    \ |>\n<| c |>\nThanks for your answer. I'm a beginner at programming and I didn't\
    \ know that I can use \"long\" instead of \"int\". Thanks for your help!\n<|/\
    \ c |>\n<| c |>\n`long` is 64 bits and `int` is 32 bits. So `long` should be used\
    \ instead of `int` when dealing with large numbers.\n<|/ c |>\n<| a tags=algorithm,arrays,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = { 1, -2,\
    \ 3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19,\
    \ -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,\
    \ -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51,\
    \ -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67,\
    \ -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83,\
    \ -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99,\
    \ -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112,\
    \ -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125,\
    \ -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138,\
    \ -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151,\
    \ -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164,\
    \ -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177,\
    \ -178, -179, -180, -181, -182, -183, -184, -18", "{\n    long result = 0;\n \
    \   for(long i : arr)\n    {\n        if(i >= 0)\n        {\n            result\
    \ += i;\n        }\n        else\n        {\n            result += i * 10;\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this\
    \ solution, though I wonder if it can be done without looping through the array\
    \ twice. I'm thinking there might be a way to do it with recursion, but I'm not\
    \ familiar enough with it to know how.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution to my answer.\n<|/ c |>\n<| c |>\nThanks so much! I appreciate it!\n\
    <|/ c |>\n<| a tags=java,arrays |>\n<code>\npublic int countNums(int[] arr) {\n\
    \    int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            count += Math.abs(arr[i]);\n        } else {\n         \
    \   count += arr[i];\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the array is negative.\n<|/ c |>\n<| c |>\n\
    It does work. `countNums([-123, -456, -7, -9, -10, -12, -13, -14, -15, -16, -17,\
    \ -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33,\
    \ -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45])` returns `3`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the array is negative. Try it with `countNums([-123,\
    \ -456, -7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23,\
    \ -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39,\
    \ -40, -41, -42, -43, -44, -45])`\n<|/ c |>\n<| c |>\nIt does work. `countNums([-123,\
    \ -456, -7, -9, -10, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23,\
    \ -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36", "{\n    long\
    \ sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a tags=arrays,algorithm,c# |>\n<| c |>\nThis code doesn't work. `count_nums([-1L,\
    \ 11L, -11L])` returns `3L` instead of `1L`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've fixed the code now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int CountDigits(int number)\n{\n    int count = 0;\n    while (number > 0)\n\
    \    {\n        number /= 10;\n        count++;\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=arrays,algorithm,c# |>\n<| a tags=arrays,algorithm,c# |>\n\
    <code>\npublic int CountDigits(int number)\n{\n    int count = 0;\n    while (number\
    \ > 0)\n    {\n        number /= 10;\n        count++;\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,c# |>\n<code>\npublic\
    \ int CountDigits(int number)\n{\n    int count = 0;\n    while (number > 0)\n\
    \    {\n        number /= 10;\n        count++;\n    }\n    return count;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int CountDigits(int number)\n{\n    int count = 0;\n    while (number > 0)\n\
    \    {\n        number /= 10;\n        count++;\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=arrays,algorithm,c# |>\n<| a |>\n<code>\npublic int CountDigits(int\
    \ number)\n{\n    int count = 0;\n    while (number > 0)\n    {\n        number\
    \ /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ tags=arrays,algorithm,c# |>\n<| a dscore=0 |>\n<code>\npublic int CountDigits(int\
    \ number)\n{\n    int count = 0;\n    while (number > 0)\n    {\n        number\
    \ /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n<|/ a tags=arrays,algorithm,c#\
    \ |>\n<| a tags=arrays,algorithm,c# |>\n<code>\npublic int CountDigits(int number)\n\
    {", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum\
    \ += arr[i];\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that case. Thanks for pointing it out. I've updated the answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npublic static int count_nums(int[] arr) {\n    int sum\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\n\
    <code>\npublic static int count_nums(int[] arr) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays |>\n<code>\npublic\
    \ static int count_nums(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i\
    \ < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\n\
    public static int count_nums(int[] arr) {\n    int sum = 0;\n    for (int i =\
    \ 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic static int count_nums(int[]\
    \ arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n     \
    \   sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int count_nums(int[] arr) {\n  \
    \  int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static int count_nums(int[] arr) {\n    int sum = 0;\n  \
    \  for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=", "{\n    long result = 0;\n    for(long\
    \ i : arr) \n    {\n        if(i >= 0) \n        {\n            result += i;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `3L`\
    \ instead of `1L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int countDigits(int\
    \ n) {\n    int count = 0;\n    while (n > 0) {\n        count += n % 10;\n  \
    \      n /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `countDigits(-1L)` returns `0L` instead of `1L`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n<|/ c |>\n<| c |>\n\
    It doesn't work. `countDigits(-1L)` returns `0L` instead of `1L`.\n<|/ c |>\n\
    <| c |>\nIt does work. `countDigits(-1L)` returns `1L`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work. `countDigits(-1L)` returns `0L` instead of `1L`.\n<|/ c |>\n<|\
    \ a tags=java,arrays,algorithm |>\n<code>\npublic int countDigits(int n) {\n \
    \   int count = 0;\n    while (n > 0) {\n        count += n % 10;\n        n /=\
    \ 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `countDigits(-1L)` returns `0L` instead of `1L`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. `countDigits(-1L)` returns `1L`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work. `countDigits(-1L)` returns `0L` instead of `1L`.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n\
    \    while (n > 0) {\n        count += n % 10;\n        n /= 10;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n\
    \        {\n            result += arr[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this answer helped you, please\
    \ consider accepting it by clicking the check mark next to it. This will help\
    \ future visitors who may have a similar question in the future find the answer\
    \ more easily.\n<|/ c |>\n<| c |>\nI did but my reputation is too low for it to\
    \ show publicly.\n<|/ c |>\n<| c |>\nNo worries, glad I could help!\n<|/ c |>\n\
    <| a tags=java,arrays,sum,algorithm |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long count = 0;\n\
    \    for(long i : arr) \n    {\n        if(i >= 0) \n        {\n            count\
    \ += i;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| c |>\nI appreciate your efforts, but I already know how to use loops\
    \ and arrays. I wanted to know if there is a way to do this without using loops.\n\
    <|/ c |>\n<| c |>\nI understand. My answer was meant to help you understand how\
    \ it can be done without loops. I didn't want to give a complete solution. Just\
    \ a hint on how to solve the problem without loops. I hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your efforts. I appreciate it. I will try it out and let you\
    \ know if it works.\n<|/ c |>\n<| c |>\nI tested it and it works. Thanks a lot.\
    \ :)\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {-1, 11, -12, 1, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7,\
    \ -8, 9, -10};\n    System.out.println(count_nums(arr));\n}", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum += arr[i];\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c\
    \ |>\nI missed that requirement. Updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic int countNums(int[] arr) {\n    int sum = 0;\n    for (int i =\
    \ 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis doesn't work. `countNums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int countNums(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| c |>\nThis doesn't work. `countNums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\npublic int countNums(int[]\
    \ arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n     \
    \   sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `countNums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\npublic int countNums(int[]\
    \ arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n     \
    \   sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. `countNums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int countNums(int[] arr)\
    \ {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum\
    \ += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays |>\n\
    <| a tag", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n \
    \       sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\nIt does work. `count_nums([-1L, 11L, -11L])`\
    \ returns `3L` as expected.\n<|/ c |>\n<| c |>\nIt doesn't work. `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `count_nums([-1L, 11L, -11L])` returns `3L` as expected.\n<|/ c |>\n<| c |>\n\
    It doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {-1L, 11L, -11L};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    long digit = 0;\n    long count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        digit = arr[i];\n        if(digit\
    \ > 0)\n        {\n            sum += digit;\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;", "{\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis\
    \ solution does not work for negative numbers. For example, `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nThe question\
    \ states that negative numbers are to be counted. `count_nums([-1L, 11L, -11L])`\
    \ returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nYes, but your solution does\
    \ not count negative numbers. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/\
    \ c |>\n<| c |>\nThe question states that negative numbers are to be counted.\
    \ `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c\
    \ |>\nYes, but your solution does not count negative numbers. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include\
    \ <iterator>", "{\n    long sum = 0;\n    long digit = 0;\n    for(int i = 0;\
    \ i < arr.length; i++){\n        digit = arr[i];\n        if(digit > 0){\n   \
    \         sum += digit;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=algorithm,arrays,c++ |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    long digit = 0;\n    long count = 0;\n    for(long i : arr)\n    {\n\
    \        sum += i;\n        if(sum > 0)\n        {\n            digit = sum %\
    \ 10;\n            sum += digit > 0 ? 1 : 0;\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,arrays,java |>\n<|\
    \ c |>\nI like your solution. However I believe it can be optimized a little bit.\
    \ Instead of iterating over each element in the array, we can iterate over the\
    \ array in reverse order and keep track of the sum of the digits in the array.\
    \ After the loop terminates, we can just return the count of elements which has\
    \ sum > 0.\n<|/ c |>\n<| c |>\nYes, that would work as well. Thanks for the suggestion.\n\
    <|/ c |>\n<| c |>\nI believe that your solution will run into problems when the\
    \ array is very large. For example, if you have an array with 1000000 elements,\
    \ it will take more than 1 second to finish.\n<|/ c |>\n<| c |>\nYes, I agree\
    \ with you. However I believe that in most cases the array will be small enough\
    \ to not cause any performance issues. I believe that in most cases the array\
    \ will be small enough to not cause any performance issues. I believe that in\
    \ most cases the array will be small enough to not cause any performance issues.\
    \ I believe that in most cases the array will be small enough to not cause any\
    \ performance issues. I believe that in most cases the array will be small enough\
    \ to not cause any performance issues. I believe that in most cases the array\
    \ will be small enough to not cause any performance issues. I believe that in\
    \ most cases the array will be small enough to not cause any performance issues.\
    \ I believe that in most cases the array will be small enough to not cause any\
    \ performance issues. I believe that in most cases the array will be small enough\
    \ to not cause any performance issues. I believe that in most cases the array\
    \ will be small enough to not cause any performance issues. I believe that in\
    \ most cases the array will be small enough to not cause any performance issues.\
    \ I believe that in most cases the array will be small enough to not cause any\
    \ performance issues. I believe that in most cases the array will be small enough\
    \ to not cause any performance issues. I believe that in most cases the array\
    \ will be small enough to not cause any performance issues. I believe that in\
    \ most cases the array will be small enough to not cause any performance issues.\
    \ I believe that in most cases the array will be small enough to not cause any\
    \ performance issue", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        sum += arr[i];\n    }\n    return sum;\n}", "{\n    long\
    \ sum = 0;\n    long digit = 0;\n    for(long i : arr)\n    {\n        sum +=\
    \ i;\n        digit += i % 10;\n    }\n    if(sum < 0)\n    {\n        sum +=\
    \ -digit;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. What do you mean\
    \ by \"doesn't work\"? It returns 3 for that input.\n<|/ c |>\n<| c |>\nIt returns\
    \ 3 because `count_nums([-1L, 11L, -11L])` returns `3L` instead of `2L`.\n<|/\
    \ c |>\n<| c |>\nOh, I see. Thanks for pointing that out. I've fixed the answer.\n\
    <|/ c |>\n<| a tags=java,arrays,algorithm |>\nI wrote this in C#. Hope it helps.\n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long result = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n    \
    \    {\n            result += arr[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,algorithm,arrays |>\n<| c |>\nThis doesn't work. Try\
    \ it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nYes, I missed that\
    \ case. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n\
    This doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. Please check my updated answer.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. Please check my updated answer.\n<|/ c |>\n\
    <| a tags=c#,algorithm,arrays |>\n<code>\npublic long count_nums(long[] arr)\n\
    {\n    long result = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n    \
    \    if(arr[i] > 0)\n        {\n            result += arr[i];\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. Please check my updated answer.\n<|/ c |>\n<| a |>\n<code>\n\
    public long count_nums(long[] arr)\n{\n    long result = 0;\n    for(int i = 0;\
    \ i < arr.Length; i++)\n    {\n        if(arr[i] > 0)\n        {\n           \
    \ result += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L,\
    \ -11L])`\n<|/ c |>\n<| c |>\nI tested it and it works. Please check my updated\
    \ answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic long count_nums(long[] arr)\n\
    {\n    long result = 0;\n    for(int i = 0; i < arr.Length; i++)\n    {\n    \
    \    if(arr[i] > 0)\n        {\n            result += arr[i];\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,arrays |>\n<| c |>\n\
    This doesn't work. Try it with `count_nums([-1L, 11", "{\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        sum += arr[i];\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,arrays,algorithm |>\n<| c |>\n\
    I like your solution, however, I do not understand why you used a long instead\
    \ of an int. Could you please explain why you did that?\n<|/ c |>\n<| c |>\nI\
    \ used long because I wanted to avoid overflow. An int would overflow for numbers\
    \ larger than 2^31-1. For example, 2^31-1 is 2,147,483,647. An int would overflow\
    \ for numbers larger than 2^31-1. For example, 2^31-1 is 2,147,483,647. An int\
    \ would overflow for numbers larger than 2^31-1. For example, 2^31-1 is 2,147,483,647.\
    \ An int would overflow for numbers larger than 2^31-1. For example, 2^31-1 is\
    \ 2,147,483,647. An int would overflow for numbers larger than 2^31-1. For example,\
    \ 2^31-1 is 2,147,483,647. An int would overflow for numbers larger than 2^31-1.\
    \ For example, 2^31-1 is 2,147,483,647. An int would overflow for numbers larger\
    \ than 2^31-1. For example, 2^31-1 is 2,147,483,647. An int would overflow for\
    \ numbers larger than 2^31-1. For example, 2^31-1 is 2,147,483,647. An int would\
    \ overflow for numbers larger than 2^31-1. For example, 2^31-1 is 2,147,483,647.\
    \ An int would overflow for numbers larger than 2^31-1. For example, 2^31-1 is\
    \ 2,147,483,647. An int would overflow for numbers larger than 2^31-1. For example,\
    \ 2^31-1 is 2,147,483,647. An int would overflow for numbers larger than 2^31-1.\
    \ For example, 2^31-1 is 2,147,483,647. An int would overflow for numbers larger\
    \ than 2^31-1. For example, 2^31-1 is 2,147,483,647. An int would overflow for\
    \ numbers larger than 2^31-1. For example, 2^31-1 is 2,147,483,647. An int would\
    \ overflow for numbers larger than 2^31-1. For example, 2^31-1 is 2,147,483,647.\
    \ An int would overflow for numbers larger than 2^31-1. For example, 2^31-1 is\
    \ 2,147,483,647. An int would overflow for numbers larger than 2^31-1. For example,\
    \ 2^31-1 is 2,147,483,647. An int would overflow for numbers larger than 2^31-1.\
    \ For example, 2^31-1 is 2,147,483,647. An ", "{\n    long sum = 0;\n    long\
    \ count = 0;\n    \n    for(long i : arr)\n    {\n        sum += i;\n        if(sum\
    \ > 0)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis doesn't work. `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `2L`.\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it before posting. Did you test it before posting?\n<|/ c |>\n<| c |>\nYes,\
    \ I tested it before posting. Your code returns `1L` instead of `2L`.\n<|/ c |>\n\
    <| c |>\nI tested it before posting. My code returns 2L. Are you sure you tested\
    \ it before posting?\n<|/ c |>\n<| c |>\nI tested it before posting. My code returns\
    \ 2L. Are you sure you tested it before posting?\n<|/ c |>\n<| a tags=c++,algorithm,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include\
    \ <numeric>\nusing namespace std;", "{\n    long sum = 0;\n    long count = 0;\n\
    \    for(long i : arr) \n    {\n        sum += i;\n        if(sum > 0) \n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,arrays,java |>\n<| c |>\nThe question was to find the number\
    \ of positive integers whose sum of digits is greater than 0\n<|/ c |>\n<| c |>\n\
    Yes, I missed that part. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis\
    \ code doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a tags=algorithm,arrays,java |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] arr = {-1, 11, -11 };\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    for(long i : arr) \n    {\n        sum += i;\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI dont think\
    \ this works. Try it for [1,2,-3,-4,5,6,-7,8,-9,-10,-11,-12,13,14]\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\nIt works. I tested it before posting. Try it yourself. I tested it before\
    \ posting. Try it yourself. I tested it before posting. Try it yourself. I tested\
    \ it before posting. Try it yourself. I tested it before posting. Try it yourself.\
    \ I tested it before posting. Try it yourself. I tested it before posting. Try\
    \ it yourself. I tested it before posting. Try it yourself. I tested it before\
    \ posting. Try it yourself. I tested it before posting. Try it yourself. I tested\
    \ it before posting. Try it yourself. I tested it before posting. Try it yourself.\
    \ I tested it before posting. Try it yourself. I tested it before posting. Try\
    \ it yourself. I tested it before posting. Try it yourself. I tested it before\
    \ posting. Try it yourself. I tested it before posting. Try it yourself. I tested\
    \ it before posting. Try it yourself. I tested it before posting. Try it yourself.\
    \ I tested it before posting. Try it yourself. I tested it before posting. Try\
    \ it yourself. I tested it before posting. Try it yourself. I tested it before\
    \ posting. Try it yourself. I tested it before posting. Try it yourself. I tested\
    \ it before posting. Try it yourself. I tested it before posting. Try it yourself.\
    \ I tested it before posting. Try it yourself. I tested it before posting. Try\
    \ it yourself. I tested it before posting. Try it yourself. I tested it before\
    \ posting. Try it yourself. I tested it before posting. Try it yourself. I tested\
    \ it before posting. Try it yourself. I tested it before posting. Try it yourself.\
    \ I tested it before posting. Try it yourself. I tested it before posting. Try\
    \ it yourself. I tested it before posting. Try it yourself. I tested it ", "{\n\
    \    long sum = 0;\n    long digit = 0;\n    long count = 0;\n    for(int i =\
    \ 0; i < arr.length; i++){\n        digit = arr[i] % 10;\n        sum += digit;\n\
    \        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=c++,arrays |>\n<| c |>\nThanks for your answer. Can you\
    \ please explain how you did this and why you did it? I'm new to programming and\
    \ I'm just trying to understand how it works.\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how you did this and why you did it? I'm new to programming\
    \ and I'm just trying to understand how it works.\n<|/ c |>\n<| c |>\nI added\
    \ some comments to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long count = 0;\n    for(long\
    \ i : arr) \n    {\n        if(i >= 0) \n        {\n            count += i;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| a |>\n<code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n    for(long\
    \ i = 0; i < arr.length; i++){\n        sum += arr[i];\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=arrays,c++,algorithm,c |>\n<| c |>\nThe question was tagged\
    \ `C`, not `C++`\n<|/ c |>\n<| c |>\nI know, I wrote the code in C and then translated\
    \ it to C++. My mistake.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain what was wrong with OP's code. Also, your code\
    \ is O(n^2) (quadratic time), while OP's is O(n) (linear time).\n<|/ c |>\n<|\
    \ c |>\nI added a description of my solution. Thanks for your feedback.\n<|/ c\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code. Also, your code is O(n^2) (quadratic time), while\
    \ OP's is O(n) (linear time).\n<|/ c |>\n<| a tags=arrays,c++,algorithm,c |>\n\
    <code>\n#include <iostream>\n#include <algorithm>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    for(long i : arr) \n    {\n        sum += i;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n\
    \    long count = 0;\n    for(long i : arr) \n    {\n        if(i >= 0) \n   \
    \     {\n            count += i;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nI added a solution for\
    \ negative numbers. I hope this helps.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. Try `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nI added\
    \ a solution for negative numbers. I hope this helps.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `count_nums([-1L, 11L, -11L])`\n<|/ c\
    \ |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static int count_nums(int[]\
    \ arr) {\n    int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n   \
    \     if (arr[i] > 0) {\n            count += arr[i];\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. Try `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic static int count_nums(int[] arr) {\n    int count = 0;\n\
    \    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       count += arr[i];\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work for negative numbers. Try `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try\
    \ `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| a |>\n<code>\npublic static int\
    \ count_nums(int[] arr) {\n    int count = 0;\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            count += arr[i];\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int count_nums(int[] arr) {\n  \
    \  int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            count += arr[i];\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a ", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        sum += arr[i];\n    }\n    return sum;\n}", "{\n    long\
    \ sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] > 0) \n        {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,arrays,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. `count_nums([-1L, 11L, -11L])` returns\
    \ `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI missed that case. Thanks for pointing\
    \ it out. Updated the answer.\n<|/ c |>\n<| c |>\nThe code still doesn't work.\
    \ `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c\
    \ |>\nI missed that case. Thanks for pointing it out. Updated the answer.\n<|/\
    \ c |>\n<| c |>\nThe code still doesn't work. `count_nums([-1L, 11L, -11L])` returns\
    \ `1L` instead of `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long sum = 0;\n    for(long i : arr) \n    {\n\
    \        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it on `[-1L, 11L, -11L]`.\n<|/ c |>\n<|\
    \ c |>\nIt works. I tested it on `[-1L, 11L, -11L]`. `count_nums([-1L, 11L, -11L])`\
    \ returns `1L`.\n<|/ c |>\n<| c |>\nIt doesn't work for `[-1L, 11L, -11L]`. `count_nums([-1L,\
    \ 11L, -11L])` returns `3L`.\n<|/ c |>\n<| c |>\nIt doesn't work for `[-1L, 11L,\
    \ -11L]`. `count_nums([-1L, 11L, -11L])` returns `3L`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work for `[-1L, 11L, -11L]`. `count_nums([-1L, 11L, -11L])` returns\
    \ `3L`.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = {-1, 11, -11 };\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long count = 0;\n    for(long i : arr) \n    {\n        count += std.math.count_digits(i);\n\
    \    }\n    return count;\n}", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try it on `[-1,11,-11]`.\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it on [-1,11,-11]\n<|/ c |>\n<| c |>\nIt doesn't work. Try it on `[-1,11,-11]`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it on [-1,11,-11]\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work. Try it on `[-1,11,-11]`.\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {-1, 11,\
    \ -11};\n    System.out.println(count_nums(arr));\n}", "{\n    long sum = 0;\n\
    \    for(long i : arr) \n    {\n        if(i >= 0) \n        {\n            sum\
    \ += i;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, but I believe that `count_nums` should return `long` instead\
    \ of `int`.\n<|/ c |>\n<| c |>\nYes, you're right. I'll edit my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI believe that `count_nums` should return `long` instead of\
    \ `int`.\n<|/ c |>\n<| c |>\nI believe that `count_nums` should return `long`\
    \ instead of `int`.\n<|/ c |>\n<| c |>\nI believe that `count_nums` should return\
    \ `long` instead of `int`.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {-1, 11, -12, -13, -14,\
    \ -15, -16, -17, -18, 19};\n    System.out.println(count_nums(arr));\n}", "{\n\
    \    long result = 0;\n    for(long i : arr)\n    {\n        if(i >= 0)\n    \
    \    {\n            result += i;\n        }\n        else\n        {\n       \
    \     result -= i;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `2L`\
    \ instead of `1L`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have made a mistake\
    \ when I first tested it.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I must have made a mistake when I first tested it.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works. I must have made a mistake when I first tested it.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n\
    using namespace std;", "{\n    long sum = 0;\n    for(long i : arr)\n    {\n \
    \       sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nThanks for pointing it out. I've updated the\
    \ answer.\n<|/ c |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = {-1, 11, -11 };\n    System.out.println(count_nums(arr));\n}",
  "{\n    long sum = 0;\n    long digit;\n    for(int i = 0; i < arr.length; i++){\n\
    \        digit = arr[i];\n        sum += digit;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't work if you have a\
    \ negative number with more than 1 digit.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I believe that OP wants to count only positive numbers. I believe that my\
    \ code will work fine for OP's case. Can you please clarify your comment?\n<|/\
    \ c |>\n<| c |>\nThe OP wants to count only positive numbers. Your code will count\
    \ all numbers, including negative numbers. For example, `count_nums([-1L, 11L,\
    \ -11L])` returns `3L`, not `2L`.\n<|/ c |>\n<| c |>\nI believe that OP wants\
    \ to count only positive numbers. I believe that my code will work fine for OP's\
    \ case. Can you please clarify your comment?\n<|/ c |>\n<| c |>\nI believe that\
    \ OP wants to count only positive numbers. I believe that my code will work fine\
    \ for OP's case. Can you please clarify your comment?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = new int[]\
    \ {-12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,\
    \ -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42,\
    \ -43, -44, -45, -46, -47, -48, -49, -50};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum\
    \ += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays |>\n\
    <| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out.\
    \ I edited my answer to fix it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] arr = {-1L, 11L, -11L};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    long count = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] > 0) \n        {\n            sum += arr[i];\n\
    \            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\n\
    import java.io.*;", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `3L` instead\
    \ of `1L`.\n<|/ c |>\n<| c |>\nI didn't realize that negative numbers were considered\
    \ as positive. Thanks for pointing that out. I've edited my answer to fix the\
    \ problem.\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>", "{\n    long\
    \ count = 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n  \
    \      sum += arr[i];\n        if(sum > 0){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does\
    \ not work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing out. Updated the answer\n<|/ c |>\n<| a tags=arrays,java |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {-1L, 11L, -11L};\n\
    \    System.out.println(count_nums(arr));\n}", "{\n    long sum = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n    \
    \        sum += arr[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L,\
    \ -11L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll edit my answer to fix\
    \ it.\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug that I mentioned in\
    \ my comment.\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug that I mentioned\
    \ in my comment.\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug that I\
    \ mentioned in my comment.\n<|/ c |>\n<| a |>\n<code>\nlong count_nums(long[]\
    \ arr) \n{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] > 0)\n        {\n            sum += arr[i];\n        }\n  \
    \  }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I'll edit my answer to fix it.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nlong count_nums(long[] arr) \n{\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n    \
    \    {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll edit my answer to\
    \ fix it.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static\
    \ void main(String[] args) {\n    long[] arr = new long[]{-1L, 11L, -11L};\n \
    \   System.out.println(count_nums(arr));\n}", "{\n    long sum = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis is not\
    \ the correct solution. `count_nums([-1L, 11L, -11L])` returns `1L` instead of\
    \ `3L`.\n<|/ c |>\n<| c |>\nI agree, my mistake. I'll fix it.\n<|/ c |>\n<| c\
    \ |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic static void main(String[] args) {\n    int[] arr = {-1L, 11L, -11L};\n\
    \    System.out.println(count_nums(arr));\n}", "{\n    long result = 0;\n    long\
    \ sum = 0;\n    for(long i : arr) \n    {\n        sum += i;\n        if(sum >\
    \ 0) \n        {\n            result += 1;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis solution doesn't\
    \ work for negative numbers. For example, `count_nums([-1L, 11L, -11L])` returns\
    \ `1L` instead of `2L`.\n<|/ c |>\n<| c |>\nI edited the answer to include a solution\
    \ for negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = new int[]\
    \ {-12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26,\
    \ -27, -28, -29, -30};\n    System.out.println(count_nums(arr));\n}", "{\n   \
    \ long sum = 0;\n    for(long i : arr) \n    {\n        sum += i;\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about\
    \ a specific programming language (Java), not about a general programming language.\
    \ Your answer does not address the question at all.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a specific programming language (Java), not about a general programming\
    \ language. Your answer does not address the question at all.\n<|/ c |>\n<| c\
    \ |>\nThe question was about a specific programming language (Java), not about\
    \ a general programming language. Your answer does not address the question at\
    \ all.\n<|/ c |>\n<| c |>\nThe question was about a specific programming language\
    \ (Java), not about a general programming language. Your answer does not address\
    \ the question at all.\n<|/ c |>\n<| c |>\nThe question was about a specific programming\
    \ language (Java), not about a general programming language. Your answer does\
    \ not address the question at all.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            count +=\
    \ arr[i];\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum +=\
    \ arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI appreciate\
    \ your efforts, but I really don't understand how this works. Can you please explain\
    \ it a little bit more?\n<|/ c |>\n<| c |>\nI added some comments to explain what\
    \ each line does. I hope this helps.\n<|/ c |>\n<| c |>\nThank you very much!\
    \ I really appreciate your efforts, but I really don't understand how this works.\
    \ Can you please explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to explain what each line does. I hope this helps.\n<|/ c |>\n<| c\
    \ |>\nThank you very much! I really appreciate your efforts, but I really don't\
    \ understand how this works. Can you please explain it a little bit more?\n<|/\
    \ c |>\n<| a tags=java,arrays |>\n<code>\nimport java.util.Arrays;", "{\n    long\
    \ sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c\
    \ |>\nThis is not the best solution. `count_nums` should return `size_t` instead\
    \ of `long`.\n<|/ c |>\n<| c |>\nI agree, thank you for pointing that out. I was\
    \ just trying to solve the problem as stated.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n    \
    \        result += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,arrays,algorithm |>\n<| c |>\nI like the idea of using an array,\
    \ but I believe this would take O(n^2) time complexity, which is too slow for\
    \ my purposes.\n<|/ c |>\n<| c |>\nI believe this would take O(n) time complexity,\
    \ which is much faster than O(n^2). Since you only need to count the numbers with\
    \ sum > 0, the complexity is O(n).\n<|/ c |>\n<| c |>\nI believe this would take\
    \ O(n) time complexity, which is much faster than O(n^2). Since you only need\
    \ to count the numbers with sum > 0, the complexity is O(n).\n<|/ c |>\n<| c |>\n\
    I believe this would take O(n) time complexity, which is much faster than O(n^2).\
    \ Since you only need to count the numbers with sum > 0, the complexity is O(n).\n\
    <|/ c |>\n<| c |>\nI believe this would take O(n) time complexity, which is much\
    \ faster than O(n^2). Since you only need to count the numbers with sum > 0, the\
    \ complexity is O(n).\n<|/ c |>\n<| a |>\nI believe this would take O(n) time\
    \ complexity, which is much faster than O(n^2). Since you only need to count the\
    \ numbers with sum > 0, the complexity is O(n).\n<code>\npublic int CountNumbersWithSumGreaterThan0(long[]\
    \ numbers)\n{\n    int count = 0;\n    long sum = 0;\n    foreach (var number\
    \ in numbers)\n    {\n        sum += number;\n        if (sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ dscore=0 tags=c#,arrays,algorithm |>\n<| c |>\nI believe this would take O(n)\
    \ time complexity, which is much faster than O(n^2). Since you only need to count\
    \ the numbers with sum > 0, the complexity is O(n).\n<|/ c |>\n<| c |>\nI believe\
    \ this would take O(n) time complexity, which is much faster than O(n^2). Since\
    \ you only need to count the numbers with sum > 0, the complexity is O(n).\n<|/\
    \ c |>", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n   \
    \     sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,arrays\
    \ |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nI didn't\
    \ see that he was using c++. My bad.\n<|/ c |>\n<| c |>\nI edited the answer to\
    \ include a c++ solution\n<|/ c |>\n<| c |>\nI edited the answer to include a\
    \ c++ solution\n<|/ c |>\n<| c |>\nI edited the answer to include a c++ solution\n\
    <|/ c |>\n<| a tags=c++,arrays |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        long num = arr[i];\n        long\
    \ sum = 0;\n        while(num > 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        if(sum > 0)\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long sum = 0;\n    long digit = 0;\n  \
    \  for(long i : arr) \n    {\n        sum += i;\n        digit += i % 10;\n  \
    \  }\n    return sum > 0 ? sum : -sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work. `count_nums([-1L, 11L, -11L])` returns `3L` instead of `1L`.\n\
    <|/ c |>\n<| c |>\nI believe that `count_nums([-1L, 11L, -11L])` returns `3L`\
    \ because `-1L` has `-1` digit, `11L` has `1` digit, and `-11L` has `-1` digit.\n\
    <|/ c |>\n<| c |>\nYes, but `-1L` has `-1` digit, `11L` has `1` digit, and `-11L`\
    \ has `-1` digit.\n<|/ c |>\n<| c |>\nI believe that `count_nums([-1L, 11L, -11L])`\
    \ returns `3L` because `-1L` has `-1` digit, `11L` has `1` digit, and `-11L` has\
    \ `-1` digit.\n<|/ c |>\n<| c |>\nYes, but `-1L` has `-1` digit, `11L` has `1`\
    \ digit, and `-11L` has `-1` digit.\n<|/ c |>\n<| a tags=algorithm,arrays,java\
    \ |>\n<code>\npublic static int count_nums(int[] arr) {\n    int sum = 0;\n  \
    \  int digit = 0;\n    for (int i : arr) {\n        sum += i;\n        digit +=\
    \ i % 10;\n    }\n    return sum > 0 ? sum : -sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `3L`\
    \ instead of `1L`.\n<|/ c |>\n<| c |>\nI believe that `count_nums([-1L, 11L, -11L])`\
    \ returns `3L` because `-1L` has `-1` digit, `11L` has `1` digit, and `-11L` has\
    \ `-1` digit.\n<|/ c |>\n<| c |>\nI believe that `count_nums([-1L, 11L, -11L])`\
    \ returns `3L` because `-1L` has `-1` digit, `", "{\n    long sum = 0;\n    for(int\
    \ i = 0; i < arr.length; i++){\n        sum += arr[i];\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a negative\
    \ number in the array. e.g. `count_nums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| c |>\nI didn't see that requirement. I've updated my\
    \ answer to include a solution for that case.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public int countDigits(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i <\
    \ arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=1 |>\n<code>\npublic int countDigits(int[]\
    \ arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n     \
    \   sum += Math.abs(arr[i]);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\npublic int countDigits(int[] arr) {\n    int sum\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic int countDigits(int[] arr) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays |>\n<code>\n\
    public int countDigits(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i <\
    \ arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic int countDigits(int[] arr)\
    \ {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum\
    \ += Math.abs(arr[i]);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 tags=java,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\npublic int countDigits(int[] arr) {\n    int sum\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| a dscore=1\
    \ |>\n<code>\npublic int countDigits(int[] arr) {\n    int sum = 0;", "{\n   \
    \ long count = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] > 0)\n        {\n            count += arr[i];\n        }\n    }\n  \
    \  return count;\n}", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] > 0)\n        {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| c\
    \ |>\nThanks for your answer. I am not allowed to use any library functions. I\
    \ guess I should use some kind of loop to go through the array and count the numbers.\
    \ But I am not able to figure out how to do that.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that does not use any library functions. I hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks a lot. Your solution works perfectly. I am still trying\
    \ to understand how it works. But thanks a lot for your help.\n<|/ c |>\n<| c\
    \ |>\nI added some comments to my solution. Hope it helps.\n<|/ c |>\n<| a tags=c++,arrays\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum\
    \ += arr[i];\n        if(sum > 0){\n            count++;\n        }\n    }\n \
    \   return count;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\nThis\
    \ doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nI didn't notice that requirement. Thanks for pointing it out.\
    \ I've updated the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <vector>\nusing namespace std;", "{\n    long result = 0;\n    for(long\
    \ i : arr) \n    {\n        if(i >= 0) \n        {\n            result += i;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ > 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,algorithm |>\n<| a dscore=0 |>\n<code>\npublic int countDigits(int\
    \ n) {\n    int count = 0;\n    while (n > 0) {\n        n /= 10;\n        count++;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ > 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=java,algorithm |>\n<code>\npublic int countDigits(int\
    \ n) {\n    int count = 0;\n    while (n > 0) {\n        n /= 10;\n        count++;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ > 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int countDigits(int n) {\n\
    \    int count = 0;\n    while (n > 0) {\n        n /= 10;\n        count++;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ > 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\npublic int countDigits(int n) {\n    int count\
    \ = 0;\n    while (n > 0) {\n        n /= 10;\n        count++;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,algorithm dscore=0 |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ > 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=java,algorithm |>", "{\n    long result = 0;\n  \
    \  for(long i : arr) \n    {\n        if(i >= 0) \n        {\n            result\
    \ += i;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the array. For\
    \ example, `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c\
    \ |>\n<| c |>\nI added a solution for negative numbers. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nThis doesn't work if there are negative numbers in\
    \ the array. For example, `count_nums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int countNumbers(int[]\
    \ arr) {\n    int count = 0;\n    for(int i = 0; i < arr.length; i++) {\n    \
    \    if(arr[i] > 0) {\n            count += arr[i];\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic int countNumbers(int[] arr) {\n    int count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n            count +=\
    \ arr[i];\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\npublic int countNumbers(int[] arr) {\n    int count\
    \ = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n\
    \            count += arr[i];\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,arrays,algorithm |>\n<| a |>\n<code>\npublic int countNumbers(int[]\
    \ arr) {\n    int count = 0;\n    for(int i = 0; i < arr.length; i++) {\n    \
    \    if(arr[i] > 0) {\n            count += arr[i];\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic int countNumbers(int[] arr) {\n    int count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++) {\n        if(arr[i] > 0) {\n            count +=\
    \ arr[i];\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic int countNumbers(int[]\
    \ arr) {\n    int count = 0;\n    for(int i = 0; i < arr.length; i++) {\n    \
    \    if(arr[i] > 0) {\n            count += arr[i];", "{\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        sum += arr[i];\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ effort but this doesn't solve the problem as stated in the question. Your solution\
    \ doesn't take into account negative numbers. I believe that my solution does\
    \ take into account negative numbers. Please correct me if I am wrong.\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. I missed that part. Sorry about that. I'll\
    \ try to fix it.\n<|/ c |>\n<| c |>\nI added a solution that takes negative numbers\
    \ into account.\n<|/ c |>\n<| c |>\nI appreciate your effort but this doesn't\
    \ solve the problem as stated in the question. Your solution doesn't take into\
    \ account negative numbers. I believe that my solution does take into account\
    \ negative numbers. Please correct me if I am wrong.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that takes negative numbers into account.\n<|/ c |>\n<| a |>\n<code>\n\
    public static int countDigits(int n) {\n    int count = 0;\n    while (n != 0)\
    \ {\n        n /= 10;\n        count++;\n    }\n    return count;\n}", "{\n  \
    \  long count = 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        sum += arr[i];\n        if(sum > 0)\n            count++;\n  \
    \  }\n    return count;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c\
    \ |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. What do you mean by \"doesn't work\"\
    ? It returns `1` for `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt returns\
    \ `1` for `count_nums([-1L, 11L, -11L])` because `sum` is `-11L`, which is `-1L`\
    \ when converted to `long`.\n<|/ c |>\n<| c |>\nI see. Thanks for pointing that\
    \ out. I fixed the answer.\n<|/ c |>\n<| c |>\nI fixed the answer again. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=arrays,c++,algorithm |>\n<code>",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n       \
    \ sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays |>\n\
    <| c |>\nThis code does not work. `count_nums([-1L, 11L, -11L])` returns `3L`\
    \ instead of `1L`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n    int[] arr\
    \ = {-1L, 11L, -11L};\n    System.out.println(count_nums(arr));\n}", "{\n    long\
    \ sum = 0;\n    for(long i : arr) \n    {\n        if(i >= 0) \n        {\n  \
    \          sum += i;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| c |>\nThis is not the correct solution. `count_nums([-1L, 11L, -11L])`\
    \ returns `1L`, not `3L`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] > 0) \n  \
    \      {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I believe it can be simplified a\
    \ bit. `count_nums` can be simplified to `return arr.filter(x -> x > 0).count();`\n\
    <|/ c |>\n<| c |>\nYes, that is a better solution. Thanks.\n<|/ c |>\n<| a tags=arrays,java\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {-1, 11,\
    \ -12, 1, -2, 3, -4, 5};\n    System.out.println(count_nums(arr));\n}", "{\n \
    \   long sum = 0;\n    long digit = 0;\n    for(int i = 0; i < arr.length; i++){\n\
    \        digit = arr[i];\n        if(digit > 0){\n            sum += digit;\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks for pointing\
    \ out. I've edited my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long\
    \ sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        sum += arr[i];\n\
    \    }\n    return sum;\n}", "{\n    long sum = 0;\n    long digit = 0;\n    for(int\
    \ i = 0; i < arr.length; i++){\n        digit = arr[i] % 10;\n        sum += digit;\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c\
    \ |>\nThis code doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/\
    \ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/\
    \ c |>\n<| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/\
    \ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = new int[]{-1L, 11L, -11L};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long count = 0;\n    for(long i : arr) \n    {\n        if(i>0) \n\
    \        {\n            count += std.math.mod(i, 10);\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    for(int i = 0; i < arr.length; i++){\n\
    \        if(arr[i] > 0){\n            count += arr[i];\n        }\n    }\n   \
    \ return count;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c |>\nI appreciate\
    \ your efforts, but I already solved it myself and posted my solution. Thanks\
    \ anyway!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] >= 0)\n        {\n   \
    \         count += arr[i];\n        }\n        else\n        {\n            count\
    \ += arr[i] * -10;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I believe it can be done without using\
    \ any loops. I believe it can be done using recursion.\n<|/ c |>\n<| c |>\nYes,\
    \ it can be done using recursion. I will post the solution shortly.\n<|/ c |>\n\
    <| c |>\nI posted my solution. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\nI believe\
    \ this can be done using recursion.\n<code>\npublic long countNums(int[] arr)\
    \ {\n    if (arr.length == 0)\n        return 0;\n    if (arr[0] < 0)\n      \
    \  return countNums(Arrays.copyOfRange(arr, 1, arr.length));\n    return countNums(Arrays.copyOfRange(arr,\
    \ 1, arr.length - 1)) + arr[arr.length - 1];\n}\n</code>\n<|/ a tags=algorithm,java,recursion\
    \ |>\n<| a dscore=1 |>\n<code>\npublic long countNums(int[] arr) {\n    if (arr.length\
    \ == 0)\n        return 0;\n    if (arr[0] < 0)\n        return countNums(Arrays.copyOfRange(arr,\
    \ 1, arr.length));\n    return countNums(Arrays.copyOfRange(arr, 1, arr.length\
    \ - 1)) + arr[arr.length - 1];\n}\n</code>\n<|/ a tags=algorithm,java,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\npublic long countNums(int[] arr) {\n    if (arr.length\
    \ == 0)\n        return 0;\n    if (arr[0] < 0)\n        return countNums(Arrays.copyOfRange(arr,\
    \ 1, arr.length));\n    return countNums(Arrays.copyOfRange(arr, 1, arr.length\
    \ - 1)) + arr[arr.length - 1];\n}\n</code>\n<|/ a tags=algorithm,java,recursion\
    \ |>\n<| a tags=algorithm,java,recursion |>\n<code>\npublic long countNums(int[]\
    \ arr) {\n    if (arr.length == 0)\n        return 0;\n    if (arr[0] < 0)\n \
    \       return countNums(Arrays.copyOfRange(arr, 1, arr.length));\n    return\
    \ countNums(Arrays.copyOfRange(arr, 1, arr.length - 1)) + arr[arr.length - 1];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c ", "{\n    long sum = 0;\n    long digit = 0;\n    long num = 0;\n    for(long\
    \ i = 0; i < arr.length; i++) \n    {\n        digit = arr[i];\n        num =\
    \ num * 10 + digit;\n        sum += num;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis code does not work. `count_nums([-1L, 11L, -11L])`\
    \ returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used `count_nums([-1L, 11L, -11L])` as input and it returned `3L`\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I used `count_nums([-1L, 11L, -11L])`\
    \ as input and it returned `3L`\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I used `count_nums([-1L, 11L, -11L])` as input and it returned `3L`\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I used `count_nums([-1L, 11L, -11L])`\
    \ as input and it returned `3L`\n<|/ c |>\n<| a dscore=1 |>\n<code>\npublic int\
    \ countDigits(int n) {\n    int count = 0;\n    while (n > 0) {\n        count\
    \ += n % 10;\n        n /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,algorithm\
    \ |>\n<| a tags=java,algorithm |>\n<code>\npublic int countDigits(int n) {\n \
    \   int count = 0;\n    while (n > 0) {\n        count += n % 10;\n        n /=\
    \ 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding how\
    \ and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a tags=java,algorithm |>\n<code>\npublic int countDigits(int n) {\n\
    \    int count = 0;\n    while (n > 0) {\n        count += n % 10;\n        n\
    \ /= 10;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ > 0) {\n        count += n % 10;\n        n /= 10;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tag", "{\n    long sum = 0;\n    long sign = 1;\n    for (long\
    \ i : arr) {\n        if (i < 0) {\n            sign = -sign;\n            i =\
    \ -i;\n        }\n        sum += sign * i;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not correct. `count_nums([-1L, 11L, -11L])`\
    \ returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nThe question says \"Write\
    \ a function count_nums which takes an array of integers and returns the number\
    \ of elements which has a sum of digits > 0.\" This solution returns `1L` for\
    \ `count_nums([-1L, 11L, -11L])` instead of `3L`.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. My bad.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        sum\
    \ += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This does not answer the question. He wants to count the numbers that have a sum\
    \ of digits > 0.\n<|/ c |>\n<| c |>\nI misunderstood the question. I've edited\
    \ my answer to reflect that.\n<|/ c |>\n<| a tags=algorithm,c++,c |>\n<code>\n\
    #include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\
    #include <stdint.h>\n#include <inttypes.h>", "{\n    long count = 0;\n    for(long\
    \ i : arr) \n    {\n        if(i == 0) \n        {\n            count++;\n   \
    \     }\n        else \n        {\n            long digit = i % 10;\n        \
    \    if((digit > 0) && (digit < 9)) \n            {\n                count +=\
    \ digit - 1;\n            }\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI guess you meant `count_nums([-1L, 11L, -11L])` returns\
    \ `1L` instead of `3L`?\n<|/ c |>\n<| c |>\nYes, I meant that. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=algorithm,c++ |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\n#include <numeric>\nusing namespace std;",
  "{\n    long count = 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n\
    \        sum += arr[i];\n        if(sum > 0){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your efforts, but I believe this solution is too slow. My solution takes about\
    \ 3 seconds to run on my machine.\n<|/ c |>\n<| c |>\nI agree with you, my solution\
    \ is too slow. My solution takes about 3 seconds to run on my machine.\n<|/ c\
    \ |>\n<| c |>\nI believe this solution is too slow. My solution takes about 3\
    \ seconds to run on my machine.\n<|/ c |>\n<| c |>\nI believe this solution is\
    \ too slow. My solution takes about 3 seconds to run on my machine.\n<|/ c |>\n\
    <| c |>\nI believe this solution is too slow. My solution takes about 3 seconds\
    \ to run on my machine.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          sum += arr[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a tags=arrays,algorithm,java |>\n<| a tags=arrays,algorithm,java |>\n<code>\n\
    public class Solution {\n    public int countNums(int[] nums) {\n        int count\
    \ = 0;\n        for(int i = 0; i < nums.length; i++) {\n            int digit\
    \ = nums[i] % 10;\n            if(digit > 0) {\n                count += 1;\n\
    \            }\n        }\n        return count;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\npublic class Solution {\n    public int countNums(int[]\
    \ nums) {\n        int count = 0;\n        for(int i = 0; i < nums.length; i++)\
    \ {\n            int digit = nums[i] % 10;\n            if(digit > 0) {\n    \
    \            count += 1;\n            }\n        }\n        return count;\n  \
    \  }\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic int countNums(int[] nums) {\n    int count = 0;\n    for(int\
    \ i = 0; i < nums.length; i++) {\n        int digit = nums[i] % 10;\n        if(digit\
    \ > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\npublic int countNums(int[] nums) {\n    int count\
    \ = 0;\n    for(int i = 0; i < nums.length; i++) {\n        int digit = nums[i]\
    \ % 10;\n        if(digit > 0) {\n            count += 1;\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\npublic int countNums(int[] nums) {\n    int count = 0;\n    for(int\
    \ i = 0; i < nums.length; i++) {\n        int digit = nums[i] % 10;\n        if(digit\
    \ > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,algorithm,java |>\n<code>\npublic int countNums(int[]\
    \ nums) {\n    int count = 0;\n    for(int i = 0; i < nums.length; i++) {\n  \
    \      int digit = nums[i] % 10;\n        if(digit > 0) {\n            count +=\
    \ 1;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=arrays,algorithm,java |>\n<code>\npublic int countNums(int[] nums) {",
  "{\n    long result = 0;\n    for(int i = 0; i < arr.length; i++){\n        result\
    \ += arr[i]%10;\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThis is not correct. `count_nums([-1L, 11L, -11L])` returns `1L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it\
    \ out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long sum = 0;\n    long count\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n\
    \        if(sum > 0)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nI understand your solution,\
    \ but I wanted to solve it without using any loops. Thanks for your answer though.\n\
    <|/ c |>\n<| c |>\nI understand your solution, but I wanted to solve it without\
    \ using any loops. Thanks for your answer though.\n<|/ c |>\n<| c |>\nI understand\
    \ your solution, but I wanted to solve it without using any loops. Thanks for\
    \ your answer though.\n<|/ c |>\n<| c |>\nI understand your solution, but I wanted\
    \ to solve it without using any loops. Thanks for your answer though.\n<|/ c |>\n\
    <| c |>\nI understand your solution, but I wanted to solve it without using any\
    \ loops. Thanks for your answer though.\n<|/ c |>\n<| a tags=java,arrays |>\n\
    <code>\npublic class Solution {\n    public int countNums(int[] nums) {\n    \
    \    int count = 0;\n        for(int i = 0; i < nums.length; i++) {\n        \
    \    int sum = 0;\n            for(int j = 0; j < nums.length; j++) {\n      \
    \          sum += nums[j];\n            }\n            if(sum > 0) {\n       \
    \         count++;\n            }\n        }\n        return count;\n    }\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI understand your solution, but I wanted\
    \ to solve it without using any loops. Thanks for your answer though.\n<|/ c |>\n\
    <| a tags=java,arrays |>\n<code>\npublic int countNums(int[] nums) {\n    int\
    \ count = 0;\n    for(int i = 0; i < nums.length; i++) {\n        int sum = 0;\n\
    \        for(int j = 0; j < nums.length; j++) {\n            sum += nums[j];\n\
    \        }\n        if(sum > 0) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI understand your solution,\
    \ but I wanted to solve it without using any loops. Thanks for your answer though.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic class Solution {\n    public int countNums(int[]\
    \ nums) {\n        int count = 0;\n        for(int i = 0; i < nums.length; i++)\
    \ {\n            int sum = 0;\n            for(int j = 0; j < nums.length; j++)\
    \ {\n                sum += nums[j];\n            }\n            if(sum > 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n</code>\n<|/ a tag", "{\n    long count = 0;\n    long sum = 0;\n  \
    \  for(int i = 0; i < arr.length; i++){\n        sum += arr[i];\n        if(sum\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| a tags=algorithm,c++,arrays |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long sum = 0;\n    long digit = 0;\n\
    \    for(long i : arr) {\n        sum += i;\n        digit += i % 10;\n    }\n\
    \    return sum > 0 ? sum : -sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've updated the answer to account for negative numbers.\
    \ Thanks.\n<|/ c |>\n<| c |>\nThe question was about a function that counts the\
    \ number of positive integers. Your answer doesn't do that.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've updated the answer to account for negative numbers.\
    \ Thanks.\n<|/ c |>\n<| a |>\n<code>\npublic int countPositives(int[] arr) {\n\
    \    int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,arrays dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `countPositives([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| a |>\n<code>\npublic int countPositives(int[] arr)\
    \ {\n    int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=java,arrays dscore=0 |>\n<| c |>\nThis doesn't work. Try\
    \ it with `countPositives([-1L, 11L, -11L])`.\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ int countPositives(int[] arr) {\n    int count = 0;\n    for (int i = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] > 0) {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `countPositives([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic int countPositives(int[] arr) {\n \
    \   int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,arrays |>\n<| c |>\nThis doesn't work. Try it with `countPositives([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<|", "{\n    long sum = 0;\n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work if you have a negative number in the array. Try it\
    \ with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nYes, I see that now.\
    \ Thanks for pointing that out. I've updated my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ != 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=java,algorithm |>\n<| a dscore=1 |>\n<code>\npublic int countDigits(int\
    \ n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        count++;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ != 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\npublic int countDigits(int n) {\n    int count\
    \ = 0;\n    while (n != 0) {\n        n /= 10;\n        count++;\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,algorithm dscore=1 |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n\
    \ != 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=java,algorithm |>\n<code>\npublic int countDigits(int\
    \ n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        count++;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public int countDigits(int n) {\n    int count = 0;\n    while (n != 0) {\n  \
    \      n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ tags=java,algorithm |>\n<| a |>\n<code>\npublic int countDigits(int n) {\n \
    \   int count = 0;\n    while (n != 0) {\n        n /= 10;\n        count++;\n\
    \    }\n    return count;\n", "{\n    long result = 0;\n    long sum = 0;\n  \
    \  for(int i = 0; i < arr.length; i++){\n        sum += arr[i];\n        if(sum\
    \ > 0){\n            result++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,c |>\n<| c |>\nThis code doesn't work if you input negative\
    \ numbers. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer to include a check for negative\
    \ numbers.\n<|/ c |>\n<| a tags=algorithm,c++,c |>\n<code>\n#include <stdio.h>\n\
    #include <stdlib.h>\n#include <string.h>", "{\n    long sum = 0;\n    long digit\
    \ = 0;\n    for(long i : arr)\n    {\n        sum += i;\n        digit += i %\
    \ 10;\n    }\n    if(sum > 0)\n    {\n        sum += digit;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,c++ |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++){\n        sum += arr[i];\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c++,c |>\n<code>\n\
    #include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\
    #include <stdint.h>\n#include <inttypes.h>", "{\n    long sum = 0;\n    for(int\
    \ i = 0; i < arr.length; i++){\n        sum += arr[i];\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\nThis does not answer\
    \ the question. OP wants to count the number of positive numbers, not the number\
    \ of positive digits. Your code counts number of positive digits, not number of\
    \ positive numbers.\n<|/ c |>\n<| c |>\nI misread the question, sorry. I'll leave\
    \ this here for future readers who may want to count the number of positive numbers,\
    \ not the number of positive digits.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution that counts the number of positive numbers. I hope this helps.\n\
    <|/ c |>\n<| c |>\nThis does not answer the question. OP wants to count the number\
    \ of positive numbers, not the number of positive digits. Your code counts number\
    \ of positive digits, not number of positive numbers.\n<|/ c |>\n<| c |>\nI misread\
    \ the question, sorry. I'll leave this here for future readers who may want to\
    \ count the number of positive numbers, not the number of positive digits.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\n#include <iterator>\n#include <numeric>\n#include <functional>\n\
    #include <cmath>\n#include <cstdlib>", "{\n    long sum = 0;\n    long count =\
    \ 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        sum += arr[i];\n\
    \        if(sum > 0) \n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis code does\
    \ not work. `count_nums([-1L, 11L, -11L])` returns `3` instead of `2`.\n<|/ c\
    \ |>\n<| c |>\nYes, I forgot to add `if(sum > 0)` condition. Now it works.\n<|/\
    \ c |>\n<| c |>\nThis code does not work. `count_nums([-1L, 11L, -11L])` returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Can\
    \ you please check it?\n<|/ c |>\n<| c |>\nI added a test case to my answer. Can\
    \ you please check it?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long sum\
    \ = 0;\n    long digit = 0;\n    for(long i : arr) {\n        sum += i;\n    \
    \    digit += i % 10;\n    }\n    return sum > 0 ? sum : -sum;\n}\n</code>\n<|/\
    \ a tags=java,arrays,algorithm |>\n<| a tags=java,arrays,algorithm |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {-12, -10, -9, -8, -7,\
    \ -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    long digit = 0;\n    long count = 0;\n    for(long\
    \ i : arr) \n    {\n        sum += i;\n        digit += i % 10;\n        if(digit\
    \ > 0) \n        {\n            count++;\n            digit = 0;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code does not work\
    \ if you have a negative number with more than 1 digit.\n<|/ c |>\n<| c |>\nIt\
    \ works fine for me. Can you give an example where it fails?\n<|/ c |>\n<| c |>\n\
    It fails when the array contains negative numbers with more than 1 digit.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine for me. Can you give an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can\
    \ you give an example where it fails?\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ int countDigits(int n) {\n    int count = 0;\n    while (n > 0) {\n        n\
    \ /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis code does not work if you have a negative number with more\
    \ than 1 digit.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nIt fails when the array contains negative\
    \ numbers with more than 1 digit.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n\
    <code>\npublic int countDigits(int n) {\n    int count = 0;\n    while (n > 0)\
    \ {\n        n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis code does not work if you have a negative number\
    \ with more than 1 digit.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give\
    \ an example where it fails?\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int countDigits(int\
    \ n) {\n    int count = 0;\n    while (n > 0) {\n        n /= 10;\n        count++;\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<|\
    \ c |>\nThis code does not work if you have a negative number with more than 1\
    \ digit.\n<|/ c |>\n<| a d", "{\n    long result = 0;\n    for(int i = 0; i <\
    \ arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long sum =\
    \ 0;\n    long digit = 0;\n    for(long i : arr)\n    {\n        sum += i;\n \
    \       digit += i % 10;\n    }\n    if(sum < 0)\n    {\n        sum *= -1;\n\
    \        digit *= -1;\n    }\n    return sum + digit;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number with more than\
    \ 1 digit.\n<|/ c |>\n<| c |>\nI believe it does. I tested it on `[-1L, 11L, -11L]`\
    \ and it returned `1L`.\n<|/ c |>\n<| c |>\nIt doesn't work for `[-1L, 11L, -11L,\
    \ -2L, -2L]` which should return `3L`\n<|/ c |>\n<| c |>\nI believe it does. I\
    \ tested it on `[-1L, 11L, -11L, -2L, -2L]` and it returned `3L`.\n<|/ c |>\n\
    <| c |>\nI believe it does. I tested it on `[-1L, 11L, -11L, -2L, -2L]` and it\
    \ returned `3L`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long count =\
    \ 0;\n    for(long i : arr)\n    {\n        if(i >= 0)\n        {\n          \
    \  count += std.math.count_digits(i);\n        }\n        else\n        {\n  \
    \          count += std.math.count_digits(-i) + 1;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it\
    \ on `count_nums([-1L, 11L, -11L])` which returns `3L`\n<|/ c |>\n<| c |>\nOh,\
    \ I see. You're right. My bad. Sorry. I'll delete my comment. :)\n<|/ c |>\n<|\
    \ c |>\nI deleted my comment. :)\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] > 0)\
    \ \n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long sum = 0;\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| c |>\nThis doesn't work. `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI tested it on\
    \ ideone and it works. I edited the answer to include the test cases. I tested\
    \ it on ideone and on ideone it returns 3L\n<|/ c |>\n<| c |>\nI tested it on\
    \ ideone and it works. I edited the answer to include the test cases. I tested\
    \ it on ideone and on ideone it returns 3L\n<|/ c |>\n<| c |>\nI tested it on\
    \ ideone and it works. I edited the answer to include the test cases. I tested\
    \ it on ideone and on ideone it returns 3L\n<|/ c |>\n<| c |>\nI tested it on\
    \ ideone and it works. I edited the answer to include the test cases. I tested\
    \ it on ideone and on ideone it returns 3L\n<|/ c |>\n<| a tags=c++,arrays |>\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long result = 0;\n    for(long i : arr) \n    {\n        if(i\
    \ >= 0) \n        {\n            result += i;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    for(long i : arr) \n    {\n        sum += i;\n    }\n    return sum;\n\
    }", "{\n    long sum = 0;\n    long count = 0;\n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > 0){\n            sum += arr[i];\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<|\
    \ c |>\nThis code does not work. `count_nums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out.\n<|/\
    \ c |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long\
    \ sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ > 0) \n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because you didn't explain what was wrong with OP's code. Also, your solution\
    \ doesn't work for negative numbers, which is what the OP asked for.\n<|/ c |>\n\
    <| c |>\nI didn't downvote either, but your solution doesn't work for negative\
    \ numbers. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nI didn't\
    \ downvote either, but your solution doesn't work for negative numbers. Try it\
    \ with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nI didn't downvote either,\
    \ but your solution doesn't work for negative numbers. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nI didn't downvote either, but your solution\
    \ doesn't work for negative numbers. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long count = 0;\n    long sum = 0;\n    for(long i : arr)\n    {\n\
    \        sum += i;\n        if(sum > 0)\n        {\n            count++;\n   \
    \         sum = 0;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n   \
    \ int[] arr = new int[]{1, 2, 3, -4, -5, -6, -7, -8, -9, -10};\n    System.out.println(getSum(arr));\n\
    }", "{\n    long result = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] > 0)\n        {\n            result += arr[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n\
    \    long count = 0;\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            count += arr[i];\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26899463)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He wants to count the number of positive\
    \ numbers that have a sum of digits > 0.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ But the OP has already posted an answer that does not provide an answer to the\
    \ question. He wants to know if he can improve his answer or if he should post\
    \ a new answer. He has already posted an answer that does not provide an answer\
    \ to the question. He wants to know if he can improve his answer or if he should\
    \ post a new answer. He has already posted an answer that does not provide an\
    \ answer to the question. He wants to know if he can improve his answer or if\
    \ he should post a new answer. He has already posted an answer that does not provide\
    \ an answer to the question. He wants to know if he can improve his answer or\
    \ if he should post a new answer. He has already posted an answer that does not\
    \ provide an answer to the question. He wants to know if he can improve his answer\
    \ or if he should post a new answer. He has already posted an answer that does\
    \ not provide an answer to the question. He wants to know if he can improve his\
    \ answer or if he should post a new answer.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ But the OP has already posted an answer that does not provide an answer to the\
    \ question. He wants to know if he can improve his answer or if he should post\
    \ a new answer. He has already posted an answer that does not provide an answer\
    \ to the question. He wants to know if he can improve his answer or if he should\
    \ post a new answer. He has already posted an answer that does not provide an\
    \ answer to the question. He wants to know if he can improve his answer or if\
    \ he should post a new answer. He has already posted an answer that does not provide\
    \ an answer to the question. He wants to know if he can improve his answer or\
    \ if he should post a new ", "{\n    long sum = 0;\n    long sign = 1;\n    for(long\
    \ i : arr)\n    {\n        sum += sign * i;\n        sign *= -1;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThis code doesn't work.\
    \ `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug. Thanks for pointing it out\n<|/ c |>\n<| c |>\nThis code\
    \ doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out\n<|/ c |>\n<| c\
    \ |>\nThis code doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| a tags=java,algorithm |>\n<code>\nimport java.util.Arrays;",
  "{\n    long count = 0;\n    for(long i : arr)\n    {\n        if(i >= 0)\n    \
    \    {\n            count += std.math.remainder(i, 10);\n        }\n        else\n\
    \        {\n            count += std.math.remainder(-i, 10);\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long result = 0;\n    for(int i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > 0){\n            result += arr[i];\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,java |>\n<| c |>\n\
    I like the idea of using an array to store the digits. I didn't think of that.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI added a solution that uses arrays, too.\n<|/ c\
    \ |>\n<| a tags=algorithm,java |>\nI wrote a solution that uses arrays. I hope\
    \ it helps.\n<code>\npublic static void main(String[] args) {\n    int[] arr =\
    \ {-1, 11, -12, -13, -14, -15, -16, -17, -18, 19};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n \
    \       sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    long digit;\n    for(long i = 0; i < arr.length; i++)\
    \ \n    {\n        digit = arr[i];\n        if(digit < 0) \n        {\n      \
    \      digit = -digit;\n        }\n        sum += digit;\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code does not work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the\
    \ code accordingly.\n<|/ c |>\n<| a tags=algorithm,c++,c |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>", "{\n    long sum = 0;\n    for(long i : arr)\
    \ \n    {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't seem to work. `count_nums([-1L, 11L, -11L])` returns\
    \ `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nIt does work. `count_nums([-1L, 11L,\
    \ -11L])` returns `3L`.\n<|/ c |>\n<| c |>\nOh, I missed the fact that `count_nums`\
    \ was supposed to return the number of positive integers. I thought it was supposed\
    \ to return the number of positive integers whose sum is greater than 0.\n<|/\
    \ c |>\n<| c |>\nYeah, I missed that too. Thanks for pointing it out. :)\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L`\
    \ instead of `3L`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n       \
    \ sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\nimport java.util.*;\npublic class CountDigits {\n    public\
    \ static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\
    \        System.out.println(\"Enter the number\");\n        int n = sc.nextInt();\n\
    \        System.out.println(\"The count of digits is: \"+countDigits(n));\n  \
    \  }\n    public static int countDigits(int n) {\n        int count = 0;\n   \
    \     while(n > 0) {\n            n = n/10;\n            count++;\n        }\n\
    \        return count;\n    }\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n\
    <| a |>\n<code>\nimport java.util.*;\npublic class CountDigits {\n    public static\
    \ void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \
    \       System.out.println(\"Enter the number\");\n        int n = sc.nextInt();\n\
    \        System.out.println(\"The count of digits is: \"+countDigits(n));\n  \
    \  }\n    public static int countDigits(int n) {\n        int count = 0;\n   \
    \     while(n > 0) {\n            n = n/10;\n            count++;\n        }\n\
    \        return count;\n    }\n}\n</code>\n<|/ a dscore=1 tags=java,arrays,algorithm\
    \ |>\n<| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.*;\npublic\
    \ class CountDigits {\n    public static void main(String[] args) {\n        Scanner\
    \ sc = new Scanner(System.in);\n        System.out.println(\"Enter the number\"\
    );\n        int n = sc.nextInt();\n        System.out.println(\"The count of digits\
    \ is: \"+countDigits(n));\n    }\n    public static int countDigits(int n) {\n\
    \        int count = 0;\n        while(n > 0) {\n            n = n/10;\n     \
    \       count++;\n        }\n        return count;\n    }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.*;\npublic\
    \ class CountDigits {\n    public static void main(String[] args) {\n        Scanner\
    \ sc = new Scanner(System.in);\n        System.out.println(\"Enter the number\"\
    );\n        int n = sc.nextInt();\n        System.out.println(\"The count of digits\
    \ is: \"+countDigits(n));\n    }\n    public static int countDigits(int n) {\n\
    \        int count = 0;\n        while(n > 0) {\n            n = n/10;\n     \
    \       count++;\n        }\n        return count;\n    }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,arrays,", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] > 0) \n        {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| a tags=c#,algorithm |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i]\
    \ > 0) \n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26859423)\n<|/ c\
    \ |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859423)\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859423)\n\
    <|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    long digit = 0;\n    long count = 0;\n    for(long i\
    \ = 0; i < arr.length; i++) \n    {\n        digit = arr[i];\n        if(digit\
    \ > 0) \n        {\n            sum += digit;\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++ |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI guess you meant `return sum;` instead of `return arr.length;`\n\
    <|/ c |>\n<| c |>\nYes, I meant `return sum;` instead of `return arr.length;`\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long result = 0;\n    for(int i\
    \ = 0; i < arr.length; i++) \n    {\n        if(arr[i] > 0) \n        {\n    \
    \        result += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/15670408)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question, since it provides the solution to the\
    \ problem stated in the question. How does it not answer the question?\n<|/ c\
    \ |>\n<| c |>\nThe question was \"Write a function count_nums which takes an array\
    \ of integers and returns the number of elements which has a sum of digits > 0.\"\
    \ The solution provides the solution to the problem stated in the question. How\
    \ does it not answer the question?\n<|/ c |>\n<| c |>\nThe question was \"Write\
    \ a function count_nums which takes an array of integers and returns the number\
    \ of elements which has a sum of digits > 0.\" The solution provides the solution\
    \ to the problem stated in the question. How does it not answer the question?\n\
    <|/ c |>\n<| c |>\nThe question was \"Write a function count_nums which takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ > 0.\" The solution provides the solution to the problem stated in the question.\
    \ How does it not answer the question?\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\
    import java.util.stream.IntStream;", "{\n    long count = 0;\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        sum += arr[i];\n   \
    \     if(sum > 0) \n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,algorithm,arrays,sum |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `count_nums([-1L, 11L, -11L])`. It returns `1`.\n<|/ c |>\n<| c |>\n\
    It works for me. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\n\
    It works for me too. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n    int[] arr\
    \ = {1, -2, 3, -4, 5};\n    int sum = 0;\n    int count = 0;\n    for(int i =\
    \ 0; i < arr.length; i++){\n        sum += arr[i];\n        if(sum > 0){\n   \
    \         count++;\n        }\n    }\n    System.out.println(count);\n}\n</code>\n\
    <|/ a tags=java,algorithm,arrays,sum |>\n<| c |>\nThis doesn't work. Try it with\
    \ `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt doesn't work for `count_nums([-1L,\
    \ 11L, -11L])`. It returns `1`.\n<|/ c |>\n<| c |>\nIt works for me. Try it with\
    \ `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| a tags=java,algorithm,arrays,sum\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {1, -2,\
    \ 3, -4, 5};\n    int sum = 0;\n    int count = 0;\n    for(int i = 0; i < arr.length;\
    \ i++){\n        sum += arr[i];\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    System.out.println(count);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, ", "{\n    long\
    \ sum = 0;\n    long count = 0;\n    for(int i = 0; i < arr.length; i++){\n  \
    \      if(arr[i] > 0){\n            sum += arr[i];\n            count++;\n   \
    \     }\n    }\n    return count;\n}", "{\n    long result = 0;\n    for(int i\
    \ = 0; i < arr.length; i++)\n    {\n        long num = arr[i];\n        if(num\
    \ < 0)\n        {\n            num = -num;\n        }\n        result += num %\
    \ 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\npublic class Solution {\n    public int countDigits(int n) {\n \
    \       int count = 0;\n        while (n != 0) {\n            n = n / 10;\n  \
    \          count++;\n        }\n        return count;\n    }\n}\n</code>\n<|/\
    \ a tags=algorithm,java |>\n<| c |>\nThis does not provide an answer to the question.\
    \ Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26009447)\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have\
    \ sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you\
    \ will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have\
    \ sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you\
    \ will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n       \
    \ if(arr[i] > 0) \n        {\n            sum += arr[i];\n        }\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the array. For example, the array\
    \ [-1L, 11L, -11L] returns 1 instead of 3.\n<|/ c |>\n<| c |>\nYes, it does. I\
    \ tested it before posting it. I will edit my post to include a test case.\n<|/\
    \ c |>\n<| c |>\nI tested it again. My bad. Sorry.\n<|/ c |>\n<| c |>\nI edited\
    \ my post to include a test case and to fix the bug that I pointed out in my previous\
    \ comment.\n<|/ c |>\n<| c |>\nI tested it again. My bad. Sorry.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to include a solution\
    \ that works with negative numbers. Thanks for pointing that out.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I've edited my answer to include a solution\
    \ that works with negative numbers. Thanks for pointing that out.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\nimport java.util.*;\npublic class CountDigits\n\
    {\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n\
    \        System.out.println(\"Enter the number\");\n        int n=sc.nextInt();\n\
    \        int sum=0;\n        while(n>0)\n        {\n            sum+=n%10;\n \
    \           n/=10;\n        }\n        System.out.println(\"Sum of digits=\"+sum);\n\
    \    }\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\n<code>\nimport java.util.*;\npublic class CountDigits\n{\n    public static\
    \ void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n\
    \        System.out.println(\"Enter the number\");\n        int n=sc.nextInt();\n\
    \        int sum=0;\n        while(n>0)\n        {\n            sum+=n%10;\n \
    \           n/=10;\n        }\n        System.out.println(\"Sum of digits=\"+sum);\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `count_num", "{\n    long result = 0;\n    for(long i : arr) \n    {\n     \
    \   if(i >= 0) \n        {\n            result += i;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nI believe\
    \ this solution will fail for negative numbers. Try `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nYes, I believe it will. I'll edit my answer to include a solution\
    \ that will work for negative numbers.\n<|/ c |>\n<| c |>\nI believe this solution\
    \ will fail for negative numbers. Try `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n\
    <| c |>\nI believe this solution will fail for negative numbers. Try `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nI believe this solution will fail for negative\
    \ numbers. Try `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = new int[]{-1, -2, 3,\
    \ -4, -5, -6, -7, -8, -9, -10};\n    System.out.println(count_nums(arr));\n}",
  "{\n    long sum = 0;\n    long digit = 0;\n    long count = 0;\n    for(long i\
    \ : arr) {\n        sum += i;\n        digit += i % 10;\n        if(sum > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ tags=algorithm,java |>\n<| a tags=algorithm,java |>\n<code>\npublic static void\
    \ main(String[] args) {\n    int[] arr = {-12, 3, -4, -5, -6, -7, -8, -9, 10,\
    \ -10, 11, -12, -13, -14, -15, -16, -17, 18, -18};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long count = 0;\n    long sum = 0;\n    for(long i : arr) \n    {\n\
    \        sum += i;\n        if(sum > 0) \n        {\n            count++;\n  \
    \          sum -= i;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis solution does not work if there are negative numbers in the\
    \ array. For example, `count_nums([-1L, 11L, -11L])` returns `2L` instead of `1L`.\n\
    <|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThe `count_nums` function can be simplified to\
    \ `return std::count_if(std::begin(arr), std::end(arr), [](long i) { return i\
    \ >= 0; });`\n<|/ c |>\n<| c |>\nThanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI tested it before posting. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\nI tested it before posting. Try it yourself.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum = 0;\n\
    \    long count = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n      \
    \  sum += arr[i];\n        if(sum > 0) \n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| c |>\nI like your solution, but I believe that your solution will fail\
    \ for negative numbers. For example: count_nums([-1L, 11L, -11L]) will return\
    \ 3 instead of 2.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing\
    \ it out. I've updated my answer.\n<|/ c |>\n<| c |>\nI believe that your solution\
    \ will fail for negative numbers. For example: count_nums([-1L, 11L, -11L]) will\
    \ return 3 instead of 2.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for\
    \ pointing it out. I've updated my answer.\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ int countDigits(int[] arr) {\n    int count = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) {\n        if(arr[i] >= 0) {\n            count += Math.abs(arr[i]);\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=2 tags=java,algorithm,arrays\
    \ |>\n<| c |>\nI believe that your solution will fail for negative numbers. For\
    \ example: count_nums([-1L, 11L, -11L]) will return 3 instead of 2.\n<|/ c |>\n\
    <| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated my\
    \ answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic int countDigits(int[] arr)\
    \ {\n    int count = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ >= 0) {\n            count += Math.abs(arr[i]);\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,algorithm,arrays |>\n<| a tags=java,algorithm,arrays\
    \ |>\n<code>\npublic int countDigits(int[] arr) {\n    int count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++) {\n        if(arr[i] >= 0) {\n            count\
    \ += Math.abs(arr[i]);\n        }\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\npublic int countDigits(int[] arr) {\n\
    \    int count = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ >= 0) {\n            count += Math.abs(arr[i]);\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a ", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a tags=c++,arrays |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't use any loops.\n<|/ c |>\n<|\
    \ c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| a tags=c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include\
    \ <numeric>\n#include <iterator>", "{\n    long result = 0;\n    for(long i =\
    \ 0; i < arr.length; ++i)\n    {\n        if(arr[i] > 0)\n        {\n        \
    \    result += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=algorithm,arrays,c++ |>\n<| c |>\nThis doesn't work if the array is all\
    \ negative numbers. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I even tested it with `count_nums([-1L, 11L,\
    \ -11L])` and it returned `1L`. What do you mean by \"doesn't work\"? It returns\
    \ `1L` as expected.\n<|/ c |>\n<| c |>\nI meant that it doesn't work if you try\
    \ it with `count_nums([-1L, 11L, -11L])`. Try it with `count_nums([-1L, 11L, -11L,\
    \ -1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nI tested it with `count_nums([-1L, 11L,\
    \ -11L, -1L, 11L, -11L])` and it returned `3L`. What do you mean by \"doesn't\
    \ work\"? It returns `3L` as expected.\n<|/ c |>\n<| c |>\nI meant that it doesn't\
    \ work if you try it with `count_nums([-1L, 11L, -11L, -1L, 11L, -11L])`. Try\
    \ it with `count_nums([-1L, 11L, -11L, -1L, 11L, -11L, -1L, 11L, -11L])`.\n<|/\
    \ c |>\n<| a tags=algorithm,arrays,c++ |>\n<code>\n#include <iostream>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\
    \ \n    {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,arrays\
    \ |>\n<| c |>\nThis is not an answer to the question. He is asking how to solve\
    \ the problem with his code. Your answer is just an alternative way of doing it.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I thought that my answer was more helpful\
    \ to him than an alternative way of doing it.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought that my answer was more helpful to him than an alternative\
    \ way of doing it.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that my\
    \ answer was more helpful to him than an alternative way of doing it.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I thought that my answer was more helpful to him\
    \ than an alternative way of doing it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long sum = 0;\n    for(long i = 0;\
    \ i < arr.length; i++) \n    {\n        sum += arr[i];\n    }\n    return sum;\n\
    }", "{\n    long sum = 0;\n    long digit = 0;\n    for(long i : arr) \n    {\n\
    \        digit = i % 10;\n        if(digit > 0) \n        {\n            sum +=\
    \ digit;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Scanner;", "{\n   \
    \ long sum = 0;\n    long digit = 0;\n    for(long i : arr) \n    {\n        sum\
    \ += i;\n        digit += i % 10;\n    }\n    return sum > 0 ? sum : -sum;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;", "{\n    long count = 0;\n \
    \   for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] > 0) \n   \
    \     {\n            count += arr[i] % 10;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nI believe this answer\
    \ is not correct. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nI believe this answer is not correct. `count_nums([-1L, 11L,\
    \ -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI believe this answer\
    \ is not correct. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nI believe this answer is not correct. `count_nums([-1L, 11L,\
    \ -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI believe this answer\
    \ is not correct. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {-1L, 11L, -11L};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      if(arr[i] > 0)\n        {\n            sum += arr[i];\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI didn't test\
    \ the code but I think it works. I tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| c |>\nI tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| c |>\nI tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| c |>\nI tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| a |>\n<code>\npublic int countNums(int[] arr) {\n\
    \    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ > 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 tags=java,arrays |>\n<| c |>\nThis doesn't work. `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI didn't test\
    \ the code but I think it works. I tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| c |>\nI tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| c |>\nI tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| c |>\nI tested it on `count_nums([-1L, 11L, -11L])`\
    \ returns `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic int countNums(int[]\
    \ arr) {\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n      \
    \  if(arr[i] > 0) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] > 0) \n        {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis doesn't work for negative numbers. `count_nums([-1L, 11L, -11L])`\
    \ returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI didn't notice that. Thanks\
    \ for pointing that out. I'll fix it now.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Can you please explain how you came up with the solution? I understand\
    \ that you are trying to solve the problem by counting the number of positive\
    \ numbers, but I don't understand how you came up with the solution. Thanks.\n\
    <|/ c |>\n<| c |>\nI used a brute force approach to solve the problem. First I\
    \ tried to solve it by counting the number of positive numbers. Then I tried to\
    \ solve it by counting the number of negative numbers. Then I tried to solve it\
    \ by counting the number of positive and negative numbers. Then I tried to solve\
    \ it by counting the number of positive and negative numbers and then combining\
    \ them all together. After that I tried to solve it by counting the number of\
    \ positive and negative numbers and then combining them all together. After that\
    \ I tried to solve it by counting the number of positive and negative numbers\
    \ and then combining them all together. After that I tried to solve it by counting\
    \ the number of positive and negative numbers and then combining them all together.\
    \ After that I tried to solve it by counting the number of positive and negative\
    \ numbers and then combining them all together. After that I tried to solve it\
    \ by counting the number of positive and negative numbers and then combining them\
    \ all together. After that I tried to solve it by counting the number of positive\
    \ and negative numbers and then combining them all together. After that I tried\
    \ to solve it by counting the number of positive and negative numbers and then\
    \ combining them all together.\n<|/ c |>\n<| c |>\nAfter that I tried to solve\
    \ it by counting the number of positive and negative numbers and then combining\
    \ them all together. After that I tried to solve it by counting the number of\
    \ positive and negative numbers and then combining them all together. After that\
    \ I tried to solve it by counting the number of positive and negative numbers\
    \ and then combining them all together. After that I tried to solve it by counting\
    \ the number of positive and negative numbers and then combining them all together.\
    \ After that I tried to solve it by counting the number of positive and negative\
    \ numbers and then combining them all together. After that I ", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. I tested it before posting. What is wrong with it?\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\n\
    Oh, I see what you mean. Yes, I see what you're saying now. I'll edit my answer\
    \ to fix it.\n<|/ c |>\n<| c |>\nI edited my answer to fix the problem. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long sum\
    \ = 0;\n    for(long i : arr)\n    {\n        sum += i;\n    }\n    return sum;\n\
    }", "{\n    long result = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n\
    \        if(arr[i] > 0) \n        {\n            result += arr[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c++,arrays,algorithm |>\n<|\
    \ c |>\nI didn't downvote, but this doesn't work. `count_nums([-1L, 11L, -11L])`\
    \ returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I fixed the code in the answer.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I tried your code, but I got wrong answer for `count_nums([-1L, 11L, -11L])`\
    \ which is `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI fixed the code in the answer.\
    \ Now it works.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code,\
    \ but I got wrong answer for `count_nums([-1L, 11L, -11L])` which is `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\nusing namespace std;", "{\n    long count = 0;\n    for(int i = 0;\
    \ i < arr.length; i++) \n    {\n        if(arr[i] > 0) \n        {\n         \
    \   count += arr[i] % 10;\n        }\n    }\n    return count;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Arrays;\nimport java.util.List;", "{\n    long count = 0;\n    for(int\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            count +=\
    \ arr[i] % 10;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nI missed that case. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nThe OP wants to count the numbers which have at least one digit greater\
    \ than zero. Your code doesn't do that. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nI missed that case too. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| c |>\nI missed that case too. Thanks for pointing it out.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\
    #include <iterator>\n#include <numeric>\n#include <iomanip>", "{\n    long sum\
    \ = 0;\n    long digit = 0;\n    for(long i : arr) {\n        sum += i;\n    \
    \    digit = i % 10;\n        if(digit < 0) {\n            sum += (-1L * digit);\n\
    \        }\n    }\n    return sum;\n}", "{\n    long result = 0;\n    for(long\
    \ i = 0; i < arr.length; ++i)\n    {\n        long num = arr[i];\n        if(num\
    \ < 0)\n        {\n            num = -num;\n            result -= num;\n     \
    \   }\n        else\n        {\n            result += num;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very similar to mine, but I wanted to know why my code didn't\
    \ work. Your solution works fine, but I wanted to know why my code didn't work.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation. I understand now why my code didn't\
    \ work. Your solution works fine, but I wanted to know why my code didn't work.\
    \ Thanks again.\n<|/ c |>\n<| a tags=arrays,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long count = 0;\n    long sum = 0;\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n    \
    \    if(sum > 0)\n        {\n            count++;\n            sum = 0;\n    \
    \    }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ code doesn't work. `count_nums([-1L, 11L, -11L])` returns `2` instead of `1`.\n\
    <|/ c |>\n<| c |>\nI tested it and it returns 1 as expected. Are you sure you\
    \ copied the code correctly?\n<|/ c |>\n<| c |>\nI tested it again and it returns\
    \ `1` as expected. Are you sure you copied the code correctly?\n<|/ c |>\n<| c\
    \ |>\nI tested it again and it returns `1` as expected. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nI tested it again and it returns `1`\
    \ as expected. Are you sure you copied the code correctly?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n       \
    \ sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm\
    \ |>\n<| c |>\nThe question was about C++, not C. `std::array` isn't a standard\
    \ C++ type.\n<|/ c |>\n<| c |>\nI know, but I thought it would be easier to understand\
    \ this way than using C arrays. I guess it would be better to use a vector instead\
    \ of an array. I'll edit my answer.\n<|/ c |>\n<| c |>\nI agree that using a vector\
    \ would be better, but this isn't a C++ question. It's a C question. `std::array`\
    \ isn't a standard C++ type.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted\
    \ to give an alternative to C arrays. I guess it would be better to use a vector\
    \ instead of an array. I'll edit my answer.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I just wanted to give an alternative to C arrays. I guess it would be better\
    \ to use a vector instead of an array. I'll edit my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L`\
    \ instead of `3L`.\n<|/ c |>\n<| c |>\nI missed that requirement. Thanks for pointing\
    \ it out. I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n \
    \   long sum = 0;\n    for(long i : arr) {\n        sum += i;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't\
    \ work. `count_nums([-1L, 11L, -11L])` returns `3L` instead of `2L`.\n<|/ c |>\n\
    <| c |>\nYes, I missed that case. Thanks for pointing it out. Updated the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;", "{\n    long sum = 0;\n    for(long i : arr)\n    {\n\
    \        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| a tags=java,algorithm,arrays |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {-1, 11, -12, -13, -14, -15, -16, -17, -18, -19, -20,\
    \ -21, -22, -23, -24, -25, -26, -27, -28, -29, -30};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum\
    \ += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n    for(long i\
    \ : arr) \n    {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26839527)\n<|/ c |>\n<| c |>\nI believe\
    \ it does answer the question, since it provides the solution to the problem and\
    \ also provides the explanation for the solution. Not sure why you think it doesn't.\n\
    <|/ c |>\n<| c |>\nIt does answer the question, because it provides the solution\
    \ to the problem and also provides the explanation for the solution. Not sure\
    \ why you think it doesn't.\n<|/ c |>\n<| c |>\nI believe it does answer the question,\
    \ since it provides the solution to the problem and also provides the explanation\
    \ for the solution. Not sure why you think it doesn't.\n<|/ c |>\n<| c |>\nI believe\
    \ it does answer the question, since it provides the solution to the problem and\
    \ also provides the explanation for the solution. Not sure why you think it doesn't.\n\
    <|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {-12, -13, -14, -15, -16, -17, -18, -19, -20, -21,\
    \ -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37,\
    \ -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53,\
    \ -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69,\
    \ -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85,\
    \ -86, -87, -88, -89, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -80, -81,\
    \ -82, -83, -84, -85, -86, -87, -88, -89, -80, -81, -82, -83, -84, -85, -86, -",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L,\
    \ -11L])` returns `1L`, not `3L`.\n<|/ c |>\n<| c |>\nI tested it and it returns\
    \ 3L. Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it exactly. Maybe I misunderstood your question. Do you want the number of positive\
    \ integers whose digits sum to more than 0?\n<|/ c |>\n<| c |>\nYes, that's exactly\
    \ what I'm looking for. Thanks for your help!\n<|/ c |>\n<| c |>\nI added a solution\
    \ that should work for you.\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    for(long i : arr) \n    {\n        sum +=\
    \ i;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long sum = 0;\n    for(int i = 0;\
    \ i < arr.length; i++)\n    {\n        long num = arr[i];\n        sum += num;\n\
    \        if(num < 0)\n        {\n            int sign = num < 0 ? -1 : 1;\n  \
    \          num = -num;\n            sum += sign * num;\n        }\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long sum = 0;\n    for(long\
    \ i : arr) {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI appreciate your effort but this does not answer the question.\
    \ I am not asking for the solution, I am asking for a way to solve the problem\
    \ without using loops.\n<|/ c |>\n<| c |>\nI added a solution that does not use\
    \ loops. I hope it helps.\n<|/ c |>\n<| c |>\nThank you for your effort, but this\
    \ does not solve the problem. I am not asking for the solution, I am asking for\
    \ a way to solve the problem without using loops.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that does not use loops. I hope it helps.\n<|/ c |>\n<| c |>\nThank\
    \ you for your effort, but this does not solve the problem. I am not asking for\
    \ the solution, I am asking for a way to solve the problem without using loops.\n\
    <|/ c |>\n<| a tags=java,algorithm |>\nI believe that you can solve this problem\
    \ using recursion. \n<code>\npublic int countDigits(int n) {\n    if (n == 0)\
    \ return 0;\n    if (n < 0) return countDigits(-n);\n    return 1 + countDigits(n\
    \ / 10);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your effort, but\
    \ this does not solve the problem. I am not asking for the solution, I am asking\
    \ for a way to solve the problem without using loops.\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    if (n == 0) return 0;\n   \
    \ if (n < 0) return countDigits(-n);\n    return 1 + countDigits(n / 10);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your effort, but this does\
    \ not solve the problem. I am not asking for the solution, I am asking for a way\
    \ to solve the problem without using loops.\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\n<code>\npublic int countDigits(int n) {\n    if (n == 0) return 0;\n   \
    \ if (n < 0) return countDigits(-n);\n    return 1 + countDigits(n / 10);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your effort, but this does\
    \ not solve the problem. I am not asking for the solution, I am asking for a way\
    \ to ", "{\n    long result = 0;\n    for(long i = 0; i < arr.length; ++i)\n \
    \   {\n        if(arr[i] > 0)\n        {\n            result += arr[i];\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code now.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code now.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    for(long i : arr) \n    {\n        sum += i;\n    }\n    return sum;\n}",
  "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n       \
    \ sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=arrays,algorithm,c++\
    \ |>\n<| c |>\nThis solution doesn't work for negative numbers. `count_nums([-1L,\
    \ 11L, -11L])` returns `3L` instead of `1L`.\n<|/ c |>\n<| c |>\nThe question\
    \ was about positive numbers. I added a solution for negative numbers as well.\n\
    <|/ c |>\n<| c |>\nThe question was about positive numbers. I added a solution\
    \ for negative numbers as well.\n<|/ c |>\n<| c |>\nThe question was about positive\
    \ numbers. I added a solution for negative numbers as well.\n<|/ c |>\n<| a tags=arrays,algorithm,c++\
    \ |>\n<code>", "{\n    long result = 0;\n    for(long i = 0; i < arr.length; i++)\n\
    \    {\n        if(arr[i] > 0)\n        {\n            result += arr[i];\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThe question was about C++, not C. Also, `std::count_if` doesn't seem\
    \ to be a standard C++ function.\n<|/ c |>\n<| c |>\nI missed the C++ tag. Thanks\
    \ for pointing that out. I will update the answer.\n<|/ c |>\n<| c |>\nI believe\
    \ that `std::count_if` was introduced in C++11. Also, the OP wants to count the\
    \ numbers, not just count the number of positive ones.\n<|/ c |>\n<| c |>\n`std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if`\
    \ was introduced in C++11. `std::count_if` was introduced in C++11. `std::count_if` ",
  "{\n    long sum = 0;\n    for(long i : arr) \n    {\n        sum += i;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis\
    \ code doesn't work. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\
    \ Can you please tell me what is the test case that you are referring to?\n<|/\
    \ c |>\n<| c |>\nI tested it again and it works. I added the test case in the\
    \ answer. Can you please tell me what is the test case that you are referring\
    \ to?\n<|/ c |>\n<| c |>\nI tested it again and it works. I added the test case\
    \ in the answer. Can you please tell me what is the test case that you are referring\
    \ to?\n<|/ c |>\n<| c |>\nI tested it again and it works. I added the test case\
    \ in the answer. Can you please tell me what is the test case that you are referring\
    \ to?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n   \
    \ long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        long\
    \ num = arr[i];\n        if(num > 0) \n        {\n            sum += num;\n  \
    \      }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long result = 0;\n    for(long i : arr) \n    {\n \
    \       if(i >= 0) \n        {\n            result += i;\n        }\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\n\
    I believe this would fail for `count_nums([-1L, 11L, -11L])` which should return\
    \ `1L` but returns `3L`.\n<|/ c |>\n<| c |>\nI believe this would fail for `count_nums([-1L,\
    \ 11L, -11L])` which should return `1L` but returns `3L`.\n<|/ c |>\n<| c |>\n\
    I believe this would fail for `count_nums([-1L, 11L, -11L])` which should return\
    \ `1L` but returns `3L`.\n<|/ c |>\n<| c |>\nI believe this would fail for `count_nums([-1L,\
    \ 11L, -11L])` which should return `1L` but returns `3L`.\n<|/ c |>\n<| c |>\n\
    I believe this would fail for `count_nums([-1L, 11L, -11L])` which should return\
    \ `1L` but returns `3L`.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\n\
    public static int count_nums(int[] arr) {\n    int sum = 0;\n    for(int i = 0;\
    \ i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis would fail for `count_nums([-1L, 11L,\
    \ -11L])` which should return `1L` but returns `3L`.\n<|/ c |>\n<| c |>\nThis\
    \ would fail for `count_nums([-1L, 11L, -11L])` which should return `1L` but returns\
    \ `3L`.\n<|/ c |>\n<| c |>\nThis would fail for `count_nums([-1L, 11L, -11L])`\
    \ which should return `1L` but returns `3L`.\n<|/ c |>\n<| c |>\nThis would fail\
    \ for `count_nums([-1L, 11L, -11L])` which should return `1L` but returns `3L`.\n\
    <|/ c |>\n<| c |>\nThis would fail for `count_nums([-1L, 11L, -11L])` which should\
    \ return `1L` but returns `3L`.\n<|/ c ", "{\n    long sum = 0;\n    for(long\
    \ i : arr) \n    {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns\
    \ `3L` instead of `1L`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for\
    \ pointing it out. Updated the answer.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\
    import java.util.stream.IntStream;", "{\n    long result = 0;\n    for(int i =\
    \ 0; i < arr.length; i++) \n    {\n        result += arr[i] % 10;\n        arr[i]\
    \ /= 10;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I even tested it on `count_nums([-1L, 11L, -11L])`\
    \ which returns `1L` as expected. Are you sure you tested it correctly?\n<|/ c\
    \ |>\n<| c |>\nYes, I tested it on `count_nums([-1L, 11L, -11L])` which returns\
    \ `1L` as expected. Are you sure you tested it correctly?\n<|/ c |>\n<| c |>\n\
    I tested it on `count_nums([-1L, 11L, -11L])` which returns `1L` as expected.\
    \ Are you sure you tested it correctly?\n<|/ c |>\n<| c |>\nI tested it on `count_nums([-1L,\
    \ 11L, -11L])` which returns `1L` as expected. Are you sure you tested it correctly?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic long count_nums(long[] arr) {\n   \
    \ long result = 0;\n    for(int i = 0; i < arr.length; i++) {\n        result\
    \ += arr[i] % 10;\n        arr[i] /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm |>\n<| c |>\nPlease add some explanation to your answer\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I even tested it on `count_nums([-1L,\
    \ 11L, -11L])` which returns `1L` as expected. Are you sure you tested it correctly?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic long count_nums(long[] arr) {\n   \
    \ long result = 0;\n    for(int i = 0; i < arr.length; i++) {\n        result\
    \ += arr[i] % 10;\n        arr[i] /= 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java,algorithm |>\n<| c |>\nPlease add some explanation to your answer\n\
    <|/ c |>\n<| a |>\n<code>\npublic long count_nums(long[] arr) {\n    long result",
  "{\n    long result = 0;\n    for(long i = 0; i < arr.length; ++i)\n    {\n    \
    \    if(arr[i] > 0)\n        {\n            result += arr[i];\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays |>\n<| c\
    \ |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated the answer to account for negative\
    \ numbers.\n<|/ c |>\n<| c |>\nThis doesn't work either. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer\
    \ to account for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't work either.\
    \ Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| a tags=c++,algorithm,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        sum += arr[i];\n    }\n    return sum;\n}", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        long num = arr[i];\n\
    \        if(num < 0) \n        {\n            num = -num;\n        }\n       \
    \ long sum = 0;\n        while(num > 0) \n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        if(sum > 0) \n        {\n  \
    \          result++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=algorithm,c++,arrays |>\n<| c |>\nI like your solution, however it fails\
    \ for `count_nums([-1L, 11L, -11L])` which should return `1L` but returns `2L`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the bug and added a test\
    \ case.\n<|/ c |>\n<| c |>\nI like your solution, however it fails for `count_nums([-1L,\
    \ 11L, -11L])` which should return `1L` but returns `2L`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug and added a test case.\n<|/ c |>\n<| a |>\n<code>", "{\n    long\
    \ sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,algorithm,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long count = 0;\n    long sum = 0;\n    for(int i =\
    \ 0; i < arr.length; i++){\n        sum += arr[i];\n        if(sum > 0){\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long result = 0;\n    for(long i : arr) \n    {\n        if(i\
    \ > 0) \n        {\n            result += i;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis doesn't seem to work. `count_nums([-1L,\
    \ 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I edited my answer to include a test case. Can you try it again?\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I edited my answer to include\
    \ a test case. Can you try it again?\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works. I edited my answer to include a test case. Can you try it again?\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I edited my answer to include\
    \ a test case. Can you try it again?\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {-1, 11, -11 };\n  \
    \  System.out.println(count_nums(arr));\n}", "{\n    long count = 0;\n    long\
    \ sum = 0;\n    for(long i : arr) {\n        sum += i;\n        if (sum > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ tags=java,arrays |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long count =\
    \ 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++){\n        sum\
    \ += arr[i];\n        if(sum > 0){\n            count++;\n        }\n    }\n \
    \   return count;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<| c |>\nI believe this\
    \ solution will fail for negative numbers. Try `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| c |>\nYes, I believe it will. Thanks for pointing that out. I've\
    \ edited my answer to include a solution that doesn't require negative numbers.\n\
    <|/ c |>\n<| a tags=c++,arrays |>\n<code>", "{\n    long sum = 0;\n    for(int\
    \ i = 0; i < arr.length; i++)\n    {\n        if(arr[i] >= 0)\n        {\n   \
    \         sum += arr[i];\n        }\n        else\n        {\n            sum\
    \ += arr[i] * -1;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to include a solution\
    \ that should work now.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer\
    \ to include a solution that should work now.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic static int count_nums(int[] arr) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] >= 0) {\n            sum +=\
    \ arr[i];\n        } else {\n            sum += arr[i] * -1;\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic static int count_nums(int[] arr) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] >= 0) {\n            sum +=\
    \ arr[i];\n        } else {\n            sum += arr[i] * -1;\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npublic static int count_nums(int[] arr) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] >= 0) {\n            sum +=\
    \ arr[i];\n        } else {\n            sum += arr[i] * -1;\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| a d", "{\n \
    \   long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        sum\
    \ += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n    for(long i : arr)\
    \ \n    {\n        if(i >= 0) \n        {\n            sum += i;\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;", "{\n    long sum = 0;\n\
    \    long digit = 0;\n    for(int i = 0; i < arr.length; i++){\n        digit\
    \ = arr[i] % 10;\n        sum += digit;\n        if(sum > 0){\n            sum\
    \ += digit * pow(10, arr.length - i - 1);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=algorithm,arrays,java |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static void main(String[] args) {\n    int[] arr = {-12, -10, -9, -8, -7, -6,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    long digit = 0;\n    for(long i = 0; i < arr.length;\
    \ i++) \n    {\n        digit = arr[i];\n        if(digit < 0) \n        {\n \
    \           digit = -digit;\n        }\n        sum += digit;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| c |>\nThis doesn't\
    \ work. `count_nums([-1L, 11L, -11L])` returns `1L` instead of `3L`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used the example you provided. Can you please\
    \ provide an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I used the example you provided. Can you please provide an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the example you provided. Can you please provide an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example you provided.\
    \ Can you please provide an example where it doesn't work?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic int countNums(int[] arr) {\n    int sum = 0;\n    int count\
    \ = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n \
    \       if (sum > 0) {\n            count++;\n            sum -= arr[i];\n   \
    \     }\n    }\n    return count;\n}\n</code>\n<|/ a tags=arrays,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work. `countNums([-1L, 11L, -11L])` returns `1L` instead\
    \ of `3L`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the example you\
    \ provided. Can you please provide an example where it doesn't work?\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used the example you provided. Can you please\
    \ provide an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I used the example you provided. Can you please provide an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the example you provided. Can you please provide an example where it doesn't\
    \ work?\n<|/ c |>\n<| a tags=arrays,algorithm,java |>\n<code>\npublic int countNums(int[]\
    \ arr) {\n", "{\n    long count = 0;\n    long sum = 0;\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        sum += arr[i];\n        if(sum > 0)\n   \
    \     {\n            count++;\n            sum -= arr[i];\n        }\n    }\n\
    \    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,arrays |>\n\
    <code>\npublic static void main(String[] args) {\n    int[] arr = {-12, -10, -9,\
    \ -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n \
    \       if(arr[i] > 0) \n        {\n            sum += arr[i];\n        }\n  \
    \  }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Your solution works perfectly for positive numbers. But for negative numbers,\
    \ it returns wrong result. For example, for -123, it returns -2 instead of -1.\
    \ Do you know why it happens?\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution for negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Your solution works perfectly for positive numbers. But\
    \ for negative numbers, it returns wrong result. For example, for -123, it returns\
    \ -2 instead of -1. Do you know why it happens?\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a solution for negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for positive\
    \ numbers. But for negative numbers, it returns wrong result. For example, for\
    \ -123, it returns -2 instead of -1. Do you know why it happens?\n<|/ c |>\n<|\
    \ a tags=arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;", "{\n   \
    \ long count = 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n\
    \    {\n        sum += arr[i];\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis doesn't work. `count_nums([-1L, 11L, -11L])` returns `2L` instead\
    \ of `1L`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. I'll\
    \ edit my answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works. I must have missed something when I first tested it.\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I must have missed something when I first\
    \ tested it.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have missed\
    \ something when I first tested it.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;", "{\n    long count\
    \ = 0;\n    for(int i = 0; i < arr.length; i++) \n    {\n        if(arr[i] > 0)\
    \ \n        {\n            count += arr[i] % 10;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer to account for negative numbers.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer to account\
    \ for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] arr = {-12, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9};\n    System.out.println(count_nums(arr));\n}", "{\n\
    \    long result = 0;\n    for(long i = 0; i < arr.length; ++i)\n    {\n     \
    \   long num = arr[i];\n        if(num < 0)\n        {\n            num = -num;\n\
    \            result -= num;\n        }\n        else\n        {\n            result\
    \ += num;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,c++,arrays\
    \ |>\n<| c |>\nI like your solution, but I believe it can be optimized a bit.\
    \ For example, you can stop iterating once you encounter a negative number in\
    \ the array. Also, you don't need to iterate over the array twice, you can do\
    \ it just once.\n<|/ c |>\n<| c |>\nI agree, thank you. I was trying to keep it\
    \ simple and clear.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require\
    \ iterating twice over the array. Hope it helps.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that doesn't require iterating twice over the array. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require iterating twice over\
    \ the array. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    long result = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] > 0) \n        {\n            result += arr[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThanks for your answer. Your code works but i think it can be done\
    \ in O(n) time complexity with O(1) space complexity. Can you please help me with\
    \ that?\n<|/ c |>\n<| c |>\nYes, it can be done in O(n) time complexity with O(1)\
    \ space complexity. I'll post the code in a few minutes.\n<|/ c |>\n<| c |>\n\
    Thanks for your help. I appreciate it.\n<|/ c |>\n<| c |>\nI posted my solution\
    \ in O(n) time complexity and O(1) space complexity. Hope it helps.\n<|/ c |>\n\
    <| a tags=c++,algorithm,arrays |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        sum += arr[i];\n        if(sum > 0)\n        {\n            sum -= arr[i]\
    \ % 10;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe question was about C++, not C. Also, the code you posted is\
    \ wrong.\n<|/ c |>\n<| c |>\nThe code I posted is correct in C++. `std::count_if`\
    \ was added in C++11. Also, the code I posted is correct in C. `count_nums` is\
    \ an algorithm that counts the number of positive integers whose digits are greater\
    \ than 0. The code I posted is correct in C. `std::count_if` was added in C++11.\
    \ Also, the code I posted is correct in C. `count_nums` is an algorithm that counts\
    \ the number of positive integers whose digits are greater than 0. The code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `std::count_if` was added in C++11. Also, the code I\
    \ posted is correct in C. `", "{\n    long result = 0;\n    for(int i = 0; i <\
    \ arr.length; i++){\n        result += arr[i];\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26867039)\n<|/ c |>\n<| c |>\n\
    This does provide an answer to the question. He asked how to count the numbers\
    \ with sum greater than 0. I provided a solution that does exactly that. He did\
    \ not ask for an explanation of why his solution does not work. He asked how to\
    \ fix his solution and I provided a solution that does exactly that. He did not\
    \ ask for an explanation of why his solution does not work. He asked how to fix\
    \ his solution and I provided a solution that does exactly that. He did not ask\
    \ for an explanation of why his solution does not work. He asked how to fix his\
    \ solution and I provided a solution that does exactly that. He did not ask for\
    \ an explanation of why his solution does not work. He asked how to fix his solution\
    \ and I provided a solution that does exactly that. He did not ask for an explanation\
    \ of why his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. He did not ask for an explanation of why\
    \ his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. He did not ask for an explanation of why\
    \ his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. He did not ask for an explanation of why\
    \ his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. He did not ask for an explanation of why\
    \ his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. He did not ask for an explanation of why\
    \ his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. He did not ask for an explanation of why\
    \ his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. He did not ask for an explanation of why\
    \ his solution does not work. He asked how to fix his solution and I provided\
    \ a solution that does exactly that. ", "{\n    long count = 0;\n    for(int i\
    \ = 0; i < arr.length; i++){\n        long sum = 0;\n        for(int j = 0; j\
    \ < arr[i].length(); j++){\n            sum += arr[i][j];\n        }\n       \
    \ if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\
    </code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt works, I tested it before posting. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`.\n<|/ c |>\n<| c |>\nIt works. Try it yourself. It returns `1`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[] args) {\n\
    \    int[] arr = new int[]{-12, -13, -14, -15, -16, -17, 18, 19, 20};\n    System.out.println(count_nums(arr));\n\
    }", "{\n    long sum = 0;\n    for(long i : arr) {\n        sum += i;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI ran the code and it works perfectly. Thank you so much!\n<|/ c |>\n\
    <| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport\
    \ java.util.List;", "{\n    long sum = 0;\n    for(long i : arr) \n    {\n   \
    \     sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,java,arrays\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] arr = {-12,\
    \ -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n  \
    \  System.out.println(count_nums(arr));\n}", "{\n    long result = 0;\n    for(long\
    \ i : arr) \n    {\n        if(i >= 0) \n        {\n            result += i;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added the test case to the answer.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added the test case to the answer.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n\
    <|/ c |>\n<| a |>\n<code>\npublic int countDigits(int n) {\n    int count = 0;\n\
    \    while (n > 0) {\n        n /= 10;\n        count++;\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=algorithm,java dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `countDigits(-1L)`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it\
    \ with `countDigits(-1L)`.\n<|/ c |>\n<| a tags=algorithm,java |>\n<code>\npublic\
    \ int countDigits(int n) {\n    int count = 0;\n    while (n > 0) {\n        n\
    \ /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `countDigits(-1L)`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `countDigits(-1L)`.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with `countDigits(-1L)`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `countDigits(-1L)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public int countDigits(int n) {\n    int count = 0;\n    while (n > 0) {\n   \
    \     n /= 10;\n        count++;\n    }\n    return count;\n}\n</code>\n<|/ a\
    \ tags=algorithm,java |>\n<| c |>\nThis doesn't work. Try it with `countDigits(-1L)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic ", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < arr.length; i++) \n    {\n        if(arr[i] > 0)\n        {\n   \
    \         result += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L,\
    \ -11L])`\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to include\
    \ a solution that works.\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with\
    \ `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ edited my answer to include a solution that works.\n<|/ c |>\n<| c |>\nThis\
    \ still doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<|\
    \ a |>\n<code>\npublic int count_nums(int[] arr) {\n    int result = 0;\n    for\
    \ (int i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L,\
    \ -11L])`\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| a |>\n<code>\npublic int count_nums(int[] arr) {\n\
    \    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            result += arr[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 tags=java |>\n<| c |>\nThis doesn't work. Try it with\
    \ `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nThis doesn't work. Try it\
    \ with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| a |>\n<code>\npublic int count_nums(int[]\
    \ arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] > 0) {\n            result += arr[i];\n        }\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a dscore=0 tags=java |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nThis ",
  "{\n    long sum = 0;\n    for(long i : arr)\n    {\n        if(i >= 0)\n      \
    \  {\n            sum += i;\n        }\n        else\n        {\n            sum\
    \ += (-1L) * i;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| c |>\nThe question was about Java, not C#.\n<|/ c |>\n<| c |>\nI didn't\
    \ know that Java had a foreach loop. Thanks for pointing that out.\n<|/ c |>\n\
    <| c |>\nI didn't know that Java had a foreach loop. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nI didn't know that Java had a foreach loop. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nI didn't know that Java had a foreach\
    \ loop. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic\
    \ static void main(String[] args) {\n    int[] arr = {-1, 11, -12, 1, 2, 3};\n\
    \    System.out.println(count_nums(arr));\n}", "{\n    long sum = 0;\n    for(long\
    \ i : arr) \n    {\n        if(i >= 0) \n        {\n            sum += i;\n  \
    \      }\n    }\n    return sum;\n}", "{\n    long count = 0;\n    long sum =\
    \ 0;\n    for(long i : arr) {\n        sum += i;\n        if(sum > 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    long sum =\
    \ 0;\n    for(long i : arr) \n    {\n        sum += i;\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nIt does work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `count_nums([-1L,\
    \ 11L, -11L])`\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static\
    \ int count_nums(int[] arr) {\n    int sum = 0;\n    for(int i : arr) {\n    \
    \    sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\npublic static int count_nums(int[] arr) {\n    int sum\
    \ = 0;\n    for(int i : arr) {\n        sum += i;\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't work. Try\
    \ it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `count_nums([-1L, 11L, -11L])`\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic static int count_nums(int[] arr) {\n    int sum = 0;\n  \
    \  for(int i : arr) {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `count_nums([-1L, 11L,\
    \ -11L])`\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\npublic static\
    \ int ", "{\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        sum += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nI appreciate your effort, but this doesn't answer the question. OP wants\
    \ to count the numbers which have at least one digit greater than zero. Your code\
    \ returns `1` for input `[-1L, 11L, -11L]`.\n<|/ c |>\n<| c |>\nI misunderstood\
    \ the question. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>", "{\n\
    \    long result = 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\
    \ \n    {\n        sum += arr[i];\n        if(sum > 0) \n        {\n         \
    \   result++;\n            sum = 0;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=algorithm,c++,arrays,sum |>\n<| c |>\nThis doesn't work. Try\
    \ it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've updated the answer accordingly.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer accordingly.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work. Try it with `count_nums([-1L, 11L, -11L])`.\n<|/ c |>\n\
    <| a tags=algorithm,c++,arrays,sum |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    for(long\
    \ i : arr) \n    {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work if you have a negative number with more than\
    \ 1 digit.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers with more\
    \ than 1 digit.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers with\
    \ more than 1 digit.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers\
    \ with more than 1 digit.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers\
    \ with more than 1 digit.\n<|/ c |>\n<| a tags=algorithm,c#,java,c++ |>\n<code>\n\
    public long count_nums(int[] arr) {\n    long sum = 0;\n    for(int i : arr) {\n\
    \        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=algorithm,c#,java,c++ |>\n<code>\npublic long count_nums(int[] arr) {\n\
    \    long sum = 0;\n    for(int i : arr) {\n        sum += i;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npublic long count_nums(int[]\
    \ arr) {\n    long sum = 0;\n    for(int i : arr) {\n        sum += i;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=2 tags=algorithm,c#,java,c++ |>\n<|\
    \ a |>\n<code>\npublic long count_nums(int[] arr) {\n    long sum = 0;\n    for(int\
    \ i : arr) {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2\
    \ tags=algorithm,c#,java,c++ |>\n<| a tags=algorithm,c#,java,c++ |>\n<code>\n\
    public long count_nums(int[] arr) {\n    long sum = 0;\n    for(int i : arr) {\n\
    \        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\npublic long count_nums(int[] arr) {\n    long sum = 0;\n\
    \    for(int i : arr) {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=algorithm,c#,java,c++ |>\n<| a tag", "{\n    long sum = 0;\n    for(long\
    \ i : arr)\n    {\n        sum += i;\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a tags=java,arrays,algorithm |>\n<| c |>\nThis is not an answer to the question.\
    \ OP wants to count the number of positive integers whose digits sum to more than\
    \ 0.\n<|/ c |>\n<| c |>\nI believe this answer is correct. OP wants to count the\
    \ number of positive integers whose digits sum to more than 0.\n<|/ c |>\n<| c\
    \ |>\nThis is not an answer to the question. OP wants to count the number of positive\
    \ integers whose digits sum to more than 0.\n<|/ c |>\n<| c |>\nI believe this\
    \ answer is correct. OP wants to count the number of positive integers whose digits\
    \ sum to more than 0.\n<|/ c |>\n<| c |>\nThis is not an answer to the question.\
    \ OP wants to count the number of positive integers whose digits sum to more than\
    \ 0.\n<|/ c |>\n<| a tags=java,arrays,algorithm |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(long i : arr) \n    {\n        if(i >= 0) \n    \
    \    {\n            sum += i;\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,arrays,algorithm |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long count = 0;\n    for(long i : arr) \n    {\n        if(i >= 0) \n  \
    \      {\n            count += std.math.mod(i, 10);\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Scanner;", "{\n    long count\
    \ = 0;\n    long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n  \
    \      sum += arr[i];\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10175470)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer to the question. He asked how to\
    \ count the numbers that have a sum of digits > 0, and I provided a solution.\
    \ He also asked how to count the numbers that have a sum of digits > 0, and I\
    \ provided a solution. He also asked how to count the numbers that have a sum\
    \ of digits > 0, and I provided a solution. He also asked how to count the numbers\
    \ that have a sum of digits > 0, and I provided a solution. He also asked how\
    \ to count the numbers that have a sum of digits > 0, and I provided a solution.\
    \ He also asked how to count the numbers that have a sum of digits > 0, and I\
    \ provided a solution. He also asked how to count the numbers that have a sum\
    \ of digits > 0, and I provided a solution. He also asked how to count the numbers\
    \ that have a sum of digits > 0, and I provided a solution. He also asked how\
    \ to count the numbers that have a sum of digits > 0, and I provided a solution.\
    \ He also asked how to count the numbers that have a sum of digits > 0, and I\
    \ provided a solution. He also asked how to count the numbers that have a sum\
    \ of digits > 0, and I provided a solution. He also asked how to count the numbers\
    \ that have a sum of digits > 0, and I provided a solution. He also asked how\
    \ to count the numbers that have a sum of digits > 0, and I provided a solution.\
    \ He also asked how to count the numbers that have a sum of digits > 0, and I\
    \ provided a solution. He also asked how to count the numbers that have a sum\
    \ of digits > 0, and I provided a solution. He also asked how to count the numbers\
    \ that have a sum of digits > 0, and I provided a solution. He also asked how\
    \ to count the numbers that have a sum of digits > 0, and I provided a solution.\
    \ He also asked how to count the numbers that have a sum of digits > 0, and I\
    \ provided a solution. He also asked how to count the numbers that ", "{\n   \
    \ long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        if(arr[i]\
    \ > 0)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=algorithm,c++,arrays |>\n<| c |>\nThanks so much! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nI tried to run your code, but I got this\
    \ error: \n`error: invalid conversion from 'int' to 'long int' [-fpermissive]\n\
    \    long count_nums(long[] arr) \n    ^\n`\n<|/ c |>\n<| c |>\nI fixed the error,\
    \ but now I got this error: `error: invalid conversion from 'int' to 'long int'\
    \ [-fpermissive]\n    long count_nums(long[] arr) \n    ^\n`\n<|/ c |>\n<| c |>\n\
    I fixed the error, but now I got this error: `error: invalid conversion from 'int'\
    \ to 'long int' [-fpermissive]\n    long count_nums(long[] arr) \n    ^\n`\n<|/\
    \ c |>\n<| c |>\nI fixed the error, but now I got this error: `error: invalid\
    \ conversion from 'int' to 'long int' [-fpermissive]\n    long count_nums(long[]\
    \ arr) \n    ^\n`\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 0;\n    for(int i = 0; i < arr.length;\
    \ i++) \n    {\n        if(arr[i] > 0) \n        {\n            result += arr[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,arrays\
    \ |>\n<| c |>\nThis doesn't work. Try it on `[-1L, 11L, -11L]`.\n<|/ c |>\n<|\
    \ c |>\nThanks for pointing out. I've fixed it.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try it on `[-1L, 11L, -11L]`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ out. I've fixed it.\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;", "{\n    long result = 0;\n    for(int i =\
    \ 0; i < arr.length; i++) \n    {\n        if(arr[i] > 0) \n        {\n      \
    \      result += arr[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThe question states that \"the array is sorted\
    \ in ascending order\".  Your code doesn't handle negative numbers correctly.\n\
    <|/ c |>\n<| c |>\nI added a solution that handles negative numbers. I hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThe question states that \"the array is sorted in\
    \ ascending order\".  Your code doesn't handle negative numbers correctly.\n<|/\
    \ c |>\n<| c |>\nI added a solution that handles negative numbers. I hope it helps.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\n#include <numeric>\n#include <iomanip>", "{\n    long count\
    \ = 0;\n    for(int i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          count += arr[i];\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,arrays |>\n<| c |>\nThis code does not work. `count_nums([-1L,\
    \ 11L, -11L])` returns `3L` instead of `1L`.\n<|/ c |>\n<| c |>\nI didn't test\
    \ it but I think it should work. Can you please give me a test case where it fails?\n\
    <|/ c |>\n<| c |>\n`count_nums([-1L, 11L, -11L])` returns `3L` instead of `1L`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case to the answer.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <vector>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    long digit;\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        digit = arr[i];\n        if(digit > 0)\n        {\n   \
    \         sum += digit;\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\n<code>\npublic static void main(String[] args) {\n   \
    \ int[] arr = new int[]{-12, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9};\n    System.out.println(count_nums(arr));\n}", "{\n  \
    \  long sum = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        sum\
    \ += arr[i];\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your\
    \ solution, but I wonder why you chose to return `long` instead of `int`? I guess\
    \ it just makes the code more readable and less prone to overflows.\n<|/ c |>\n\
    <| c |>\nI chose long because I thought it would be more efficient to return an\
    \ int and cast it back to a long at the end. Since I didn't know if there would\
    \ be overflows or not, I chose long.\n<|/ c |>\n<| c |>\nI guess it depends on\
    \ the size of the numbers. If the numbers are small enough to fit into an int,\
    \ then it would be more efficient to return an int and cast it back to a long\
    \ at the end. Otherwise, I would return long.\n<|/ c |>\n<| c |>\nI guess it depends\
    \ on the size of the numbers. If the numbers are small enough to fit into an int,\
    \ then it would be more efficient to return an int and cast it back to a long\
    \ at the end. Otherwise, I would return long.\n<|/ c |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic int count_nums(int[] arr) {\n    int sum = 0;\n    for(int\
    \ i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `int` cannot hold negative\
    \ numbers. `int` can hold up to `2147483647` which is `2^31 - 1` which is `2147483647\
    \ - 1` which is `2147483647`. So this solution will always return `2147483647`.\n\
    <|/ c |>\n<| c |>\nI didn't downvote you, but I guess it's because you didn't\
    \ explain why you chose this solution. Also, `int` cannot hold negative numbers.\
    \ `int` can hold up to `2147483647` which is `2^31 - 1` which is `2147483647 -\
    \ 1` which is `2147483647`. So this solution will always return `2147483647`.\n\
    <|/ c |>\n<| c |>\nI didn't downvote you, but I guess it's because you didn't\
    \ explain why you chose this solution. Also, `int` cannot hold negative numbers.\
    \ `int` can hold up to `2147483647` which is `2^31 - 1` which is `2147483647 -\
    \ 1` which is `", "{\n    long sum = 0;\n    long count = 0;\n    for(int i =\
    \ 0; i < arr.length; i++){\n        sum += arr[i];\n        if(sum > 0){\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=java,algorithm,arrays\
    \ |>\n<| c |>\nI believe this solution will fail for `count_nums([-1L, 11L, -11L])`\
    \ which should return `1L`, but returns `0L`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = new int[]{1, 2, -3,\
    \ 4, -5, 6, -7, 8, -9};\n    System.out.println(count_nums(arr));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
