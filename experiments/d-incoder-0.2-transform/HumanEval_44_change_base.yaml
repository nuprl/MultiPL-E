name: HumanEval_44_change_base
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input\
  \ number x to base.\n    return string representation after the conversion.\n  \
  \  base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n   \
  \ >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\
  \n    \n*/\nstring change_base(long x, long base) \n"
tests: "unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L,\
  \ 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L,\
  \ 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L,\
  \ 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L,\
  \ 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L,\
  \ 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L,\
  \ 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    long temp = x;\n    while(temp >\
    \ 0)\n    {\n        int digit = temp % base;\n        temp = temp / base;\n \
    \       result = to_string(digit) + result;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result += to_string(temp);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n \
    \       temp = x % base;\n        result += to_string(temp);\n        x = x /\
    \ base;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp\
    \ = temp / base;\n        result = to_string(temp) + result;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   temp = x;\n    while (temp != 0) {\n        temp = temp / base;\n        result\
    \ += to_string(temp % base);\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}\n/*\n    Convert decimal number to binary number.\n    \n    Input\
    \ numbers are less than 10.\n    \n    Output numbers are less than 10.\n    \n\
    \    Output numbers are in reverse order.\n    \n    >>> to_binary(8L)\n    \"\
    1000\"\n    >>> to_binary(7L)\n    \"111\"\n    >>> to_binary(6L)\n    \"110\"\
    \n    >>> to_binary(5L)\n    \"101\"\n    >>> to_binary(4L)\n    \"100\"\n   \
    \ >>> to_binary(3L)\n    \"10\"\n    >>> to_binary(2L)\n    \"1\"\n    >>> to_binary(1L)\n\
    \    \"0\"\n    \n*/\nstring to_binary(long x) \n{\n    string result = \"\";\n\
    \    long temp;\n    \n    while (x != 0) {\n        temp = x % 2;\n        result\
    \ += to_string(temp);\n        x /= 2;\n    }\n    \n    return result;\n}\n/*\n\
    \    Convert binary number to decimal number.\n    \n    Input numbers are less\
    \ than 10.\n    \n    Output numbers are less than 10.\n    \n    Output numbers\
    \ are in reverse order.\n    \n    >>> to_decimal(\"1000\")\n    8L\n    >>> to_decimal(\"\
    111\")\n    7L\n    >>> to_decimal(\"110\")\n    6L\n    >>> to_decimal(\"101\"\
    )\n    5L\n    >>> to_decimal(\"100\")\n    4L\n    >>> to_decimal(\"10\")\n \
    \   3L\n    >>> to_decimal(\"1\")\n    2L\n    >>> to_decimal(\"0\")\n    1L\n\
    \    \n*/\nlong to_decimal(string x) \n{\n    long result = 0;\n    \n    for\
    \ (auto it = x.rbegin(); it != x.rend(); ++it) {\n        result *= 2;\n     \
    \   result += *it - '0';\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ decimal number to hexadecimal number.\n    \n    Input numbers are less than\
    \ 10.\n    \n    Output numbers are less than 10.\n    \n    Output numbers are\
    \ in reverse order.\n    \n    >>> to_hex(8L)\n    \"0x1000\"\n    >>> to_hex(7L)\n\
    \    \"0x111\"\n    >>> to_hex(6L)\n    \"0x110\"\n    >>> to_hex(5L)\n    \"\
    0x101\"\n    >>> to_hex(4L)\n    \"0x100\"\n    >>> to_hex(3L)\n    \"0x10", "{\n\
    \    long temp;\n    string result = \"\";\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ long remainder = temp % base;\n        temp = temp / base;\n        result =\
    \ to_string(remainder) + result;\n    }\n    \n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        long remainder = temp % base;\n        temp = temp / base;\n \
    \       result = to_string(remainder) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        long remainder = temp % base;\n        temp = temp / base;\n\
    \        result = to_string(remainder) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        long remainder = temp % base;\n        temp = temp / base;\n \
    \       result = to_string(remainder) + result;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"", "{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x > 0)\n    {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp\
    \ = x;\n    \n    while (temp > 0) {\n        long r = temp % base;\n        temp\
    \ = temp / base;\n        result = char(r) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        long digit = temp % base;\n      \
    \  temp = temp / base;\n        result = digit.to_string() + result;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    while (temp > 0) {\n        temp = temp / base;\n  \
    \      result = to_string(temp) + result;\n    }\n    \n    return result;\n}",
  "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\twhile(x != 0)\n\t{\n\t\ttemp =\
    \ x % base;\n\t\tresult = to_string(temp) + result;\n\t\tx = x / base;\n\t}\n\t\
    \n\treturn result;\n}", "{\n    long xx = x;\n    string result = \"\";\n    while(base\
    \ > 0)\n    {\n        long r = xx % base;\n        xx = xx / base;\n        result\
    \ = char(r) + result;\n        base--;\n    }\n    while(base < 0)\n    {\n  \
    \      long r = xx % base;\n        xx = xx / base;\n        result = char(r)\
    \ + result;\n        base++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include\
    \ <string.h>\n#include <math.h>\n#include <stdbool.h>", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n\
    \        temp = temp / base;\n        result += to_string(temp);\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n\
    \    temp = x;\n    \n    while (temp > 0) {\n        long rem = temp % base;\n\
    \        temp = temp / base;\n        \n        if (rem != 0) {\n            result\
    \ += char(rem);\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0)\n    {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        int digit\
    \ = temp % base;\n        \n        if (digit > 0)\n        {\n            result\
    \ += digit;\n        }\n        \n        temp /= base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while\
    \ (x != 0) {\n        remainder = x % base;\n        result += char(remainder);\n\
    \        x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\n/*\n \
    \   Convert binary number to decimal number.\n    \n    Input binary number is\
    \ represented as a string.\n    \n    Output decimal number is represented as\
    \ a string.\n    \n    Input binary number is represented as a string.\n    \n\
    \    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented as a string.\n    \n    Output decimal number is represented\
    \ as a string.\n    \n    Input binary number is represented as a string.\n  \
    \  \n    Output decimal number is represented as a string.\n    \n    Input binary\
    \ number is represented ", "{\n    string result = \"\";\n    long temp;\n   \
    \ \n    while (x != 0) {\n        temp = x % base;\n        result += (char)('0'\
    \ + temp);\n        x /= base;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0)\n    {\n        result = to_string(temp % base) + result;\n     \
    \   temp = temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x > 0)\n    {\n        temp\
    \ = x % base;\n        result += to_string(temp);\n        x = x / base;\n   \
    \ }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tlong rem = temp % base;\n\t\ttemp =\
    \ temp / base;\n\t\tresult = to_string(base) + result;\n\t\tif (rem != 0) {\n\t\
    \t\tresult = to_string(base) + result;\n\t\t}\n\t}\n\treturn result;\n}", "{\n\
    \    long temp;\n    string result;\n    \n    temp = x;\n    \n    while (temp\
    \ > 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ tmp = x;\n    long rem = tmp % base;\n    string tmpstr = to_string(tmp);\n\
    \    string rem = to_string(rem);\n    string tmpstr2 = \"\";\n    string rem\
    \ = \"\";\n    \n    for(int i = 0; i < tmpstr.length(); i++)\n    {\n       \
    \ if(tmpstr[i] >= '0' && tmpstr[i] <= '9')\n        {\n            tmpstr2 +=\
    \ tmpstr[i];\n        }\n    }\n    \n    for(int i = 0; i < rem.length(); i++)\n\
    \    {\n        if(rem[i] >= '0' && rem[i] <= '9')\n        {\n            rem\
    \ += rem[i];\n        }\n    }\n    \n    if(tmpstr2 == rem)\n    {\n        result\
    \ += \"0\";\n    }\n    else\n    {\n        result += tmpstr2;\n    }\n    \n\
    \    return result;\n}", "{\n    long temp = x;\n    string result = \"\";\n \
    \   while(temp > 0)\n    {\n        int digit = temp % base;\n        result +=\
    \ digit;\n        temp /= base;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=c++,algorithm,c |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x / base;\n    \n    while (temp > 0) {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp\
    \ != 0)\n\t{\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp = temp /\
    \ base;\n\t}\n\t\n\treturn result;\n}", "{\n    long temp;\n    string result\
    \ = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        long remainder = temp % base;\n  \
    \      temp = temp / base;\n        \n        if (remainder > 0) {\n         \
    \   result += char(remainder);\n        }\n    }\n    \n    return result;\n}",
  "{\n    long result = x;\n    long remainder;\n    \n    while (result > base) {\n\
    \        remainder = result % base;\n        result = base;\n        base = remainder;\n\
    \    }\n    \n    while (result < base) {\n        remainder = result % base;\n\
    \        result = base;\n        base = remainder;\n    }\n    \n    return to_string(result);\n\
    }", "{\n    string result = \"\";\n    long temp = x;\n    while(temp > 0)\n \
    \   {\n        int digit = temp % base;\n        temp = temp / base;\n       \
    \ if(digit > 0)\n        {\n            result += digit;\n        }\n    }\n \
    \   return result;\n}", "{\n    long temp;\n    string result = \"\";\n    \n\
    \    temp = x;\n    \n    while (temp != 0)\n    {\n        long rem = temp %\
    \ base;\n        temp = temp / base;\n        result = to_string(base) + to_string(rem)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long tmp = x;\n    long rem = tmp % base;\n    tmp = tmp / base;\n    while(!(tmp\
    \ == 0))\n    {\n        result = to_string(tmp) + result;\n        tmp = tmp\
    \ / base;\n    }\n    result = to_string(tmp) + result;\n    if(rem != 0)\n  \
    \  {\n        result = to_string(tmp) + result;\n    }\n    return result;\n}",
  "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp !=\
    \ 0) {\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\
    \t\n\treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n\
    \    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp\
    \ > 0)\n    {\n        result = to_string(temp);\n    }\n    \n    while (temp\
    \ > 0)\n    {\n        temp = temp / base;\n        \n        if (temp > 0)\n\
    \        {\n            result = to_string(temp) + result;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp =\
    \ x;\n    while(temp > 0) {\n        long digit = temp % base;\n        result\
    \ += digit;\n        temp /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n        temp\
    \ = temp / base;\n        result = to_string(temp) + result;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   while (x > 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    while (x < 0) {\n        temp = abs(x)\
    \ % base;\n        result += to_string(temp);\n        x = abs(x) / base;\n  \
    \  }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp\
    \ = x;\n    while(temp > 0)\n    {\n        long rem = temp % base;\n        temp\
    \ = temp / base;\n        if(rem > 0)\n        {\n            result += char(rem);\n\
    \        }\n    }\n    return result;\n}\n/*\n    Convert number x to string representation\
    \ in base base using radix base.\n    base numbers are less than 10.\n    >>>\
    \ to_string(8L, 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n   \
    \ >>> to_string(7L, 2L)\n    \"111\"\n    \n*/\nstring to_string(long x, long\
    \ base) \n{\n    string result = \"\";\n    long temp = x;\n    while(temp > 0)\n\
    \    {\n        long rem = temp % base;\n        temp = temp / base;\n       \
    \ if(rem > 0)\n        {\n            result += char(rem);\n        }\n    }\n\
    \    return result;\n}\n/*\n    Convert number x to string representation in base\
    \ base using radix base.\n    base numbers are less than 10.\n    >>> to_string(8L,\
    \ 3L)\n    \"22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring to_string(long x, int base) \n{\n    string\
    \ result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long\
    \ rem = temp % base;\n        temp = temp / base;\n        if(rem > 0)\n     \
    \   {\n            result += char(rem);\n        }\n    }\n    return result;\n\
    }\n/*\n    Convert number x to string representation in base base using radix\
    \ base.\n    base numbers are less than 10.\n    >>> to_string(8L, 3L)\n    \"\
    22\"\n    >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n   \
    \ \"111\"\n    \n*/\nstring to_string(long x, int radix) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        long rem =\
    \ temp % radix;\n        temp = temp / radix;\n        if(rem > 0)\n        {\n\
    \            result += char(rem);\n        }\n    }\n    return result;\n}\n/*\n\
    \    Convert number x to string representation in base base using radix base.\n\
    \    base numbers are less than 10.\n    >>> to_string(8L, 3L)\n    \"22\"\n \
    \   >>> to_string(8L, 2L)\n    \"1000\"\n    >>> to_string(7L, 2L)\n    \"111\"\
    \n    \n*/\nstring ", "{\n    string result = \"\";\n    long tmp = x;\n    long\
    \ tmp2 = base;\n    \n    while (true)\n    {\n        if (tmp2 > 10)\n      \
    \  {\n            tmp2 /= 10;\n            tmp += tmp2;\n        }\n        else\n\
    \        {\n            result += (char)(tmp % base);\n            break;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    while (temp != 0)\n    {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n\tstring\
    \ result = \"\";\n\t\n\twhile (x > 0) {\n\t\tlong r = x % base;\n\t\tresult =\
    \ to_string(base) + result;\n\t\tx = x / base;\n\t\tbase = base;\n\t}\n\t\n\t\
    return result;\n}", "{\n    string result = \"\";\n    long tmp = x;\n    \n \
    \   while(tmp != 0)\n    {\n        long r = tmp % base;\n        tmp = tmp /\
    \ base;\n        result = to_string(base) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long d = base;\n    long\
    \ r = 1;\n    \n    while (n >= base) {\n        r = r * d;\n        n = n / base;\n\
    \    }\n    \n    r = r * d;\n    \n    while (n > 0) {\n        result = char(r\
    \ % 10) + result;\n        r = r / 10;\n        n = n - 1;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0) {\n        result = to_string(temp % base) + result;\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n\tstring result = \"\
    \";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp != 0) {\n\t\tresult = to_string(temp\
    \ % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n  \
    \  string result = \"\";\n    long temp;\n    \n    while (x != 0)\n    {\n  \
    \      temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\
    \t\n\ttemp = x;\n\t\n\twhile (temp > 0)\n\t{\n\t\tresult = to_string(temp % base)\
    \ + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    long temp;\n\
    \    string result = \"\";\n    \n    temp = x / base;\n    \n    while (temp\
    \ > 0)\n    {\n        result = to_string(temp % base) + result;\n        temp\
    \ = temp / base;\n    }\n    \n    if (temp == 0)\n    {\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    long temp;\n    string\
    \ result = \"\";\n    \n    while (x != 0)\n    {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x = x / base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    while\
    \ (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n \
    \       x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}", "{\n    long temp;\n    string result = \"\";\n    \n    while\
    \ (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n \
    \       x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        \n    \
    \    if (rem != 0) {\n            result += char(rem);\n        }\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n  \
    \  \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    return result;\n}", "{\n    long temp;\n  \
    \  string result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}", "{\n\tstring\
    \ result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tresult\
    \ = to_string(temp % base) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n    long r = x;\n    string s = \"\";\n    while(base>0)\n    {\n    \
    \    r = r*base;\n        base = base-1;\n    }\n    while(base<0)\n    {\n  \
    \      r = r / base;\n        base = base+1;\n    }\n    while(base>0)\n    {\n\
    \        s = to_string(base)+s;\n        base = base-1;\n    }\n    while(base<0)\n\
    \    {\n        s = to_string(abs(base))+s;\n        base = base+1;\n    }\n \
    \   while(base>0)\n    {\n        s = to_string(abs(base))+s;\n        base =\
    \ base-1;\n    }\n    return s;\n}\n/*\n    Convert a string to integer.\n   \
    \ base numbers are less than 10.\n    >>> to_int(\"22\")\n    22\n    >>> to_int(\"\
    1000\")\n    1000\n    >>> to_int(\"111\")\n    111\n    \n*/\nlong to_int(string\
    \ s) \n{\n    long r = 0;\n    for(int i=0; i<s.length(); i++)\n    {\n      \
    \  r = r*10 + s[i] - '0';\n    }\n    return r;\n}\n/*\n    Convert a string to\
    \ double.\n    base numbers are less than 10.\n    >>> to_double(\"22\")\n   \
    \ 22\n    >>> to_double(\"1000\")\n    1000\n    >>> to_double(\"111\")\n    111\n\
    \    \n*/\ndouble to_double(string s) \n{\n    double r = 0;\n    for(int i=0;\
    \ i<s.length(); i++)\n    {\n        r = r*10 + s[i] - '0';\n    }\n    return\
    \ r;\n}\n/*\n    Convert a string to bool.\n    base numbers are less than 10.\n\
    \    >>> to_bool(\"22\")\n    True\n    >>> to_bool(\"1000\")\n    False\n   \
    \ >>> to_bool(\"111\")\n    False\n    \n*/", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x;\n    while (temp != 0) {\n        temp =\
    \ temp / base;\n        result += to_string(temp);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0)\n    {\n        temp = temp / base;\n        \n        if\
    \ (temp == 0)\n        {\n            result = result + \"0\";\n        }\n  \
    \      else\n        {\n            result = result + \"1\";\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    long temp;\n    string result = \"\";\n\
    \    \n    temp = x / base;\n    \n    while (temp > 0) {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    if (temp ==\
    \ 0)\n        result = to_string(temp % base) + result;\n    \n    return result;\n\
    }", "{\n    long temp;\n    string result = \"\";\n    \n    temp = x / base;\n\
    \    \n    while (temp > 0) {\n        result = to_string(temp % base) + result;\n\
    \        temp = temp / base;\n    }\n    \n    if (temp == 0)\n        result\
    \ = to_string(temp % base) + result;\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x / base;\n    \n    while\
    \ (temp > 0) {\n        result = to_string(temp % base) + result;\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n\tstring result = \"\
    \";\n\t\n\twhile (x != 0)\n\t{\n\t\tlong r = x % base;\n\t\t\n\t\tif (r > 0)\n\
    \t\t\tresult = char(r + 48) + result;\n\t\t\n\t\tx = x / base;\n\t}\n\t\n\treturn\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp != 0)\n    {\n        temp = temp / base;\n      \
    \  \n        if (temp == 0)\n        {\n            result += \"0\";\n       \
    \ }\n        else\n        {\n            result += to_string(temp % base);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0)\n  \
    \  {\n        result = to_string(temp % base) + result;\n        temp = temp /\
    \ base;\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x / base;\n    \n    while (temp > 0) {\n  \
    \      result = to_string(temp % base) + result;\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    long r = x;\n    string result = \"\";\n    \n    while\
    \ (base > 0)\n    {\n        r = r / base;\n        result = to_string(base) +\
    \ result;\n        base = base * 10;\n    }\n    \n    if (r > 0)\n    {\n   \
    \     result = to_string(base) + result;\n    }\n    \n    return result;\n}",
  "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp >\
    \ 0) {\n\t\tlong rem = temp % base;\n\t\tresult = char(rem) + result;\n\t\ttemp\
    \ /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n   \
    \ long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp\
    \ = temp / base;\n        result = to_string(temp) + result;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n   \
    \     result += to_string(temp);\n    }\n    \n    return result;\n}", "{\n  \
    \  string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n        temp =\
    \ temp / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n        result\
    \ = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        temp = temp / base;\n        result = to_string(temp) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x > 0) {\n        temp = x % base;\n        result +=\
    \ to_string(temp);\n        x = x / base;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n    \
    \    long mod = temp % base;\n        temp = temp / base;\n        result = to_string(mod)\
    \ + result;\n    }\n    return result;\n}\n/*\nChange numerical base of input\
    \ number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, int base) \n{\n    string result =\
    \ \"\";\n    long temp = x;\n    while (temp > 0) {\n        long mod = temp %\
    \ base;\n        temp = temp / base;\n        result = to_string(mod) + result;\n\
    \    }\n    return result;\n}\n/*\nChange numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, short base) \n{\n    string result = \"\";\n    long temp\
    \ = x;\n    while (temp > 0) {\n        long mod = temp % base;\n        temp\
    \ = temp / base;\n        result = to_string(mod) + result;\n    }\n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n\
    \    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring change_base(long\
    \ x, char base) \n{\n    string result = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        long mod = temp % base;\n        temp = temp / base;\n\
    \        result = to_string(mod) + result;\n    }\n    return result;\n}\n/*\n\
    Change numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, double base) \n{\n  \
    \  string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n       \
    \ long mod = temp % base;\n        temp = temp / base;\n", "{\n    long temp;\n\
    \    string result = \"\";\n    \n    while (x != 0) {\n        temp = x % base;\n\
    \        result += to_string(temp);\n        x /= base;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long n = x;\n    long m = base;\n\
    \    \n    while (n > 0)\n    {\n        long r = n % m;\n        n /= m;\n  \
    \      result += char(r + '0');\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ binary number to decimal number.\n    \n    Input binary number is a string\
    \ containing only '0' and '1'.\n    \n    Output decimal number is a string containing\
    \ only '0' and '1'.\n    \n    Input binary number is a string containing only\
    \ '0' and '1'.\n    \n    Output decimal number is a string containing only '0'\
    \ and '1'.\n    \n    Input binary number is a string containing only '0' and\
    \ '1'.\n    \n    Output decimal number is a string containing only '0' and '1'.\n\
    \    \n    Input binary number is a string containing only '0' and '1'.\n    \n\
    \    Output decimal number is a string containing only '0' and '1'.\n    \n  \
    \  Input binary number is a string containing only '0' and '1'.\n    \n    Output\
    \ decimal number is a string containing only '0' and '1'.\n    \n    Input binary\
    \ number is a string containing only '0' and '1'.\n    \n    Output decimal number\
    \ is a string containing only '0' and '1'.\n    \n    Input binary number is a\
    \ string containing only '0' and '1'.\n    \n    Output decimal number is a string\
    \ containing only '0' and '1'.\n    \n    Input binary number is a string containing\
    \ only '0' and '1'.\n    \n    Output decimal number is a string containing only\
    \ '0' and '1'.\n    \n    Input binary number is a string containing only '0'\
    \ and '1'.\n    \n    Output decimal number is a string containing only '0' and\
    \ '1'.\n    \n    Input binary number is a string containing only '0' and '1'.\n\
    \    \n    Output decimal number is a string containing only '0' and '1'.\n  \
    \  \n    Input binary number is a string containing only '0' and '1'.\n    \n\
    \    Output decimal number is a string containing only '0' and '1'.\n    \n  \
    \  Input binary number is a string containing only '0' and '1'.\n    \n    Output\
    \ decimal number is a string containing only '0' and '1'.\n    \n    Input binary\
    \ number is a string containing only '0' and '1'.\n    \n    Output decimal number\
    \ is a string containing only '0' and '1'.\n    \n    Input binary number is a\
    \ string containing only '0' and '1'.\n    \n    Output decimal number is a string\
    \ containing only '0' and '1'.\n    \n", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result += to_string(temp);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x > 0) {\n\
    \        temp = x % base;\n        result += std.string.format(std.string.format(\"\
    %0\" + std.string.format(base) + \"d\", temp));\n        x /= base;\n    }\n \
    \   \n    return result;\n}", "{\n\tstring result = \"\";\n\tlong temp = x;\n\t\
    while(temp > 0) {\n\t\tlong mod = temp % base;\n\t\tresult += char(mod);\n\t\t\
    temp /= base;\n\t}\n\treturn result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result += to_string(temp);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x > 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp\
    \ / base;\n        result += to_string(temp);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x = x / base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(rem) + result;\n    }\n    \n    return result;\n}", "{\n\tstring\
    \ result = \"\";\n\t\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\
    \t\tlong mod = temp % base;\n\t\t\n\t\tif (mod != 0) {\n\t\t\tresult += char(mod);\n\
    \t\t}\n\t\t\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n\tstring result\
    \ = \"\";\n\t\n\twhile (x > 0)\n\t{\n\t\tlong r = x % base;\n\t\tresult = char(r\
    \ + 48) + result;\n\t\tx = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x\
    \ % base;\n        result += to_string(temp);\n        x = x / base;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x / base;\n    result += (temp % base) + \"\";\n    \n    temp\
    \ = x % base;\n    result += (temp / base) + \"\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp != 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\
    \tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\ttemp = temp / base;\n\
    \t\tresult = to_string(temp) + result;\n\t}\n\t\n\treturn result;\n}", "{\n  \
    \  string result = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp\
    \ > 0) {\n        temp = temp / base;\n        result += to_string(temp);\n  \
    \  }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        if (temp % base ==\
    \ 0) {\n            result += to_string(temp / base);\n        }\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n    long res = 0;\n\
    \    string str = \"\";\n    while(x != 0)\n    {\n        res = (res * base)\
    \ + x % base;\n        x /= base;\n    }\n    str = to_string(res);\n    return\
    \ str;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    while(temp > 0)\n    {\n        int digit = temp % base;\n  \
    \      result += digit;\n        temp /= base;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nThis doesn't work. Try `change_base(8L,\
    \ 3L)`.\n<|/ c |>\n<| c |>\n: It works for me. `change_base(8L, 3L)` returns `\"\
    22\"`.\n<|/ c |>\n<| c |>\n: It works for me too. `change_base(8L, 3L)` returns\
    \ `\"22\"`.\n<|/ c |>\n<| c |>\n: It works for me too. `change_base(8L, 3L)` returns\
    \ `\"22\"`.\n<|/ c |>\n<| c |>\n: It works for me too. `change_base(8L, 3L)` returns\
    \ `\"22\"`.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <sstream>\n#include <iomanip>\nusing namespace std;",
  "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n    \
    \    temp = x % base;\n        result += to_string(temp);\n        x = x / base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp\
    \ / base;\n        result += to_string(temp % base);\n    }\n    \n    return\
    \ result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\
    \twhile (temp != 0)\n\t{\n\t\tresult = to_string(temp % base) + result;\n\t\t\
    temp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        long\
    \ rem = temp % base;\n        temp = temp / base;\n        result = to_string(base)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n       \
    \ temp = temp / base;\n        \n        if (temp > 0) {\n            result +=\
    \ to_string(temp);\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long tmp = x;\n    while(!(tmp >> base))\n    {\n      \
    \  result += (char)(tmp % base);\n        tmp /= base;\n    }\n    result += (char)(tmp\
    \ % base);\n    return result;\n}", "{\n    string result = \"\";\n    long tmp\
    \ = x;\n    long tmp2 = base;\n    while(true)\n    {\n        if(tmp2 > 10)\n\
    \        {\n            tmp2 /= 10;\n            result += (char)(tmp + '0');\n\
    \            tmp = 0;\n        }\n        else\n        {\n            result\
    \ += (char)(tmp + '0');\n            break;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(x != 0)\n\
    \    {\n        remainder = x % base;\n        result += char(remainder);\n  \
    \      x /= base;\n    }\n    \n    return result;\n}", "{\n\tstring result =\
    \ \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tint digit =\
    \ temp % base;\n\t\tresult = digits[digit] + result;\n\t\ttemp /= base;\n\t}\n\
    \t\n\treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n\
    \    temp = x;\n    \n    while (temp > 0) {\n        if (temp % base == 0) {\n\
    \            result += to_string(temp % base);\n        }\n        temp = temp\
    \ / base;\n    }\n    \n    return result;\n}", "{\n    long temp;\n    string\
    \ result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp\
    \ = temp / base;\n        result = to_string(temp) + result;\n    }\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n \
    \   temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n   \
    \     result = to_string(temp) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n    \
    \    int digit = temp % base;\n        temp = temp / base;\n        result = to_string(digit)\
    \ + result;\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long temp;\n    \n    temp = x;\n    \n    while (temp != 0)\n    {\n     \
    \   temp = temp / base;\n        result += to_string(temp);\n    }\n    \n   \
    \ return result;\n}", "{\n    string result = \"\";\n    long temp = x;\n    while(temp\
    \ > 0)\n    {\n        long rem = temp % base;\n        if(rem > 0)\n        {\n\
    \            result += char(rem);\n        }\n        temp /= base;\n    }\n \
    \   return result;\n}", "{\n\tstring result = \"\";\n\t\n\twhile(x != 0)\n\t{\n\
    \t\tlong temp = x % base;\n\t\tresult = to_string(temp) + result;\n\t\tx = x /\
    \ base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long\
    \ temp = x;\n    while(temp > 0)\n    {\n        int digit = temp % base;\n  \
    \      result += digit;\n        temp /= base;\n    }\n    return result;\n}",
  "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\tif (temp\
    \ > 0)\n\t{\n\t\tresult += temp.to_string();\n\t\t\n\t\twhile (temp > 0)\n\t\t\
    {\n\t\t\ttemp = temp / base;\n\t\t\tresult += base.to_string();\n\t\t}\n\t}\n\t\
    else\n\t{\n\t\tresult += temp.to_string();\n\t\t\n\t\twhile (temp < 0)\n\t\t{\n\
    \t\t\ttemp = temp * base;\n\t\t\tresult += base.to_string();\n\t\t}\n\t}\n\t\n\
    \treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n  \
    \  temp = x / base;\n    \n    while (temp > 0) {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    if (x < base)\
    \ {\n        result = to_string(x - base) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp != 0) {\n        long rem = temp % base;\n        temp = temp\
    \ / base;\n        result = to_string(base) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\
    while (temp > 0) {\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp /=\
    \ base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long\
    \ tmp = x;\n    long rem = tmp % base;\n    tmp = tmp / base;\n    while(!(tmp\
    \ == 0))\n    {\n        result = to_string(tmp) + result;\n        tmp /= base;\n\
    \    }\n    result = to_string(tmp) + result;\n    if(rem != 0)\n    {\n     \
    \   result = to_string(tmp) + result;\n    }\n    return result;\n}", "{\n   \
    \ string result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n    \
    \    int digit = temp % base;\n        temp = temp / base;\n        if(digit >\
    \ 0)\n        {\n            result += digit;\n        }\n    }\n    return result;\n\
    }\n/*\n    Convert binary number to decimal number.\n    \n    Input binary number\
    \ x is represented as a string.\n    \n    Output decimal number y is represented\
    \ as a string.\n    \n    Each character in x represents one digit in y.\n   \
    \ \n    Each digit in x is either 0 or 1.\n    \n    Output decimal number y is\
    \ represented as a string.\n    \n    Each character in x represents one digit\
    \ in y.\n    \n    Each digit in x is either 0 or 1.\n    \n    Output decimal\
    \ number y is represented as a string.\n    \n    Each character in x represents\
    \ one digit in y.\n    \n    Each digit in x is either 0 or 1.\n    \n    Output\
    \ decimal number y is represented as a string.\n    \n    Each character in x\
    \ represents one digit in y.\n    \n    Each digit in x is either 0 or 1.\n  \
    \  \n    Output decimal number y is represented as a string.\n    \n    Each character\
    \ in x represents one digit in y.\n    \n    Each digit in x is either 0 or 1.\n\
    \    \n    Output decimal number y is represented as a string.\n    \n    Each\
    \ character in x represents one digit in y.\n    \n    Each digit in x is either\
    \ 0 or 1.\n    \n    Output decimal number y is represented as a string.\n   \
    \ \n    Each character in x represents one digit in y.\n    \n    Each digit in\
    \ x is either 0 or 1.\n    \n    Output decimal number y is represented as a string.\n\
    \    \n    Each character in x represents one digit in y.\n    \n    Each digit\
    \ in x is either 0 or 1.\n    \n    Output decimal number y is represented as\
    \ a string.\n    \n    Each character in x represents one digit in y.\n    \n\
    \    Each digit in x is either 0 or 1.\n    \n    Output decimal number y is represented\
    \ as a string.\n    \n    Each character in x represents one digit in y.\n   \
    \ \n    Each digit in x is either 0 or 1.\n    \n    Output decimal number y is\
    \ represented as a string.\n    \n    Each character in x represents one digit\
    \ in y.\n    \n    Each digit in x is either 0 or 1.\n    \n    Output decimal\
    \ number y is represented as a string.\n    \n    Each character in x represents\
    \ one digit in y.\n    \n    ", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x / base;\n    \n    while (temp > 0) {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    if (temp ==\
    \ 0)\n        result = to_string(temp % base) + result;\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        result += to_string(temp);\n\
    \    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\t\n\twhile(x\
    \ != 0)\n\t{\n\t\tlong r = x / base;\n\t\tresult = to_string(r) + result;\n\t\t\
    x = x % base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n\
    \    long temp;\n    \n    while (x > 0) {\n        temp = x % base;\n       \
    \ result += (char)('0' + temp);\n        x /= base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while\
    \ (temp > 0) {\n        result = to_string(temp % base) + result;\n        temp\
    \ = temp / base;\n    }\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n \
    \       temp = temp / base;\n        result += (char)('0' + temp % base);\n  \
    \  }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp\
    \ = x;\n    while(temp > 0)\n    {\n        long mod = temp % base;\n        temp\
    \ = temp / base;\n        if(mod != 0)\n        {\n            result += char(mod);\n\
    \        }\n    }\n    return result;\n}\n/*\n    Convert string to integer.\n\
    \    \n    input string must be in base 10.\n    \n    return integer value.\n\
    \    \n    exceptions:\n    \n    exception if input string is not in base 10.\n\
    \    exception if input string contains non-numeric characters.\n    exception\
    \ if input string contains non-numeric characters.\n    exception if input string\
    \ contains non-numeric characters.\n    \n*/\nlong string_to_int(string str)\n\
    {\n    long result = 0;\n    for(auto c : str)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n        {\n            result += c - '0';\n        }\n        else\n\
    \        {\n            throw runtime_error(\"string_to_int: input string contains\
    \ non-numeric characters.\");\n        }\n    }\n    return result;\n}\n/*\n \
    \   Convert integer to string.\n    \n    input integer must be in base 10.\n\
    \    \n    return string value.\n    \n    exceptions:\n    \n    exception if\
    \ input integer is not in base 10.\n    exception if input integer is 0.\n   \
    \ exception if input integer is negative.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    exception\
    \ if input integer is greater than base 10.\n    exception if input integer is\
    \ less than 0.\n    exception if input integer is greater than base 10.\n    exception\
    \ if input integer is less than 0.\n    exception if input integer is greater\
    \ than base 10.\n    exception if input integer is less than 0.\n    ", "{\n \
    \   string result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n  \
    \      int digit = temp % base;\n        temp = temp / base;\n        if(digit\
    \ > 0)\n        {\n            result += digit;\n        }\n    }\n    return\
    \ result;\n}\n/*\nChange numerical base of input number x to base.\n    return\
    \ string representation after the conversion.\n    base numbers are less than\
    \ 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n\
    \    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring change_base(long\
    \ x, int base) \n{\n    string result = \"\";\n    long temp = x;\n    while(temp\
    \ > 0)\n    {\n        int digit = temp % base;\n        temp = temp / base;\n\
    \        if(digit > 0)\n        {\n            result += digit;\n        }\n \
    \   }\n    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, short base) \n{\n    string result = \"\";\n    long temp\
    \ = x;\n    while(temp > 0)\n    {\n        int digit = temp % base;\n       \
    \ temp = temp / base;\n        if(digit > 0)\n        {\n            result +=\
    \ digit;\n        }\n    }\n    return result;\n}\n/*\nChange numerical base of\
    \ input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n\
    \    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"\
    111\"\n    \n*/\nstring change_base(long x, char base) \n{\n    string result\
    \ = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n        int digit =\
    \ temp % base;\n        temp = temp / base;\n        if(digit > 0)\n        {\n\
    \            result += digit;\n        }\n    }\n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring ", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x / base;\n    \n    if (temp > 0)\n    {\n        result\
    \ += (temp % base) + \"\";\n    }\n    \n    temp = x % base;\n    \n    if (temp\
    \ > 0)\n    {\n        result += (temp % base) + \"\";\n    }\n    \n    return\
    \ result;\n}", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\
    while (temp > 0) {\n\t\ttemp = temp / base;\n\t\tresult = to_string(temp) + result;\n\
    \t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long tmp = x;\n\
    \    while(base > 0)\n    {\n        if(tmp % base == 0)\n        {\n        \
    \    result += (char)('0' + base);\n            tmp /= base;\n        }\n    \
    \    else\n        {\n            result += (char)('0' + base - tmp % base);\n\
    \            tmp /= base;\n        }\n        base--;\n    }\n    while(base <\
    \ 0)\n    {\n        if(tmp % base == 0)\n        {\n            result += (char)('0'\
    \ + base);\n            tmp /= base;\n        }\n        else\n        {\n   \
    \         result += (char)('0' + base + tmp % base);\n            tmp /= base;\n\
    \        }\n        base++;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        temp = temp / base;\n        result = to_string(temp) + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    long temp;\n    string result = \"\";\n    \n    temp = x;\n    \n\
    \    while (temp != 0)\n    {\n        if (temp % base == 0)\n        {\n    \
    \        result += to_string(temp / base);\n        }\n        temp = temp / base;\n\
    \    }\n    \n    return result;\n}\n/*\nChange numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>>\
    \ change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n\
    \    \n*/\nstring change_base(long x, int base) \n{\n    long temp;\n    string\
    \ result = \"\";\n    \n    temp = x;\n    \n    while (temp != 0)\n    {\n  \
    \      if (temp % base == 0)\n        {\n            result += to_string(temp\
    \ / base);\n        }\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }\n/*\nChange numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> change_base(8L, 2L)\n    \"1000\"\n    >>> change_base(7L,\
    \ 2L)\n    \"111\"\n    \n*/\nstring change_base(long x, short base) \n{\n   \
    \ long temp;\n    string result = \"\";\n    \n    temp = x;\n    \n    while\
    \ (temp != 0)\n    {\n        if (temp % base == 0)\n        {\n            result\
    \ += to_string(temp / base);\n        }\n        temp = temp / base;\n    }\n\
    \    \n    return result;\n}\n/*\nChange numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8L, 3L)\n    \"22\"\n    >>> change_base(8L,\
    \ 2L)\n    \"1000\"\n    >>> change_base(7L, 2L)\n    \"111\"\n    \n*/\nstring\
    \ change_base(long x, char base) \n{\n    long temp;\n    string result = \"\"\
    ;\n    \n    temp = x;\n    \n    while (temp != 0)\n    {\n        if (temp %\
    \ base == 0)\n        {\n            result += to_string(temp / base);\n     \
    \   }\n        temp = temp / base;\n    }\n    \n    return result;\n}\n/*\nChange\
    \ numerical base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8L,\
    \ 3L)\n    \"22\"\n    >>> ", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x / base;\n    \n    while (temp > 0)\n    {\n        result\
    \ = to_string(temp % base) + result;\n        temp = temp / base;\n    }\n   \
    \ \n    if (x < base)\n    {\n        result = to_string(x - base) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp\
    \ / base;\n        result = to_string(temp) + result;\n    }\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp =\
    \ x;\n    \n    while (temp != 0)\n    {\n        temp = temp / base;\n      \
    \  result = to_string(temp) + result;\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp = x;\n    while(temp > 0)\n    {\n \
    \       int digit = temp % base;\n        result += char((digit < 10) ? digit\
    \ + '0' : digit + 'a' - 10);\n        temp /= base;\n    }\n    return result;\n\
    }", "{\n    long tmp = x;\n    string res = \"\";\n    \n    while (tmp > 0) {\n\
    \        long r = tmp % base;\n        tmp = tmp / base;\n        res = char(r)\
    \ + res;\n    }\n    \n    return res;\n}", "{\n    string result = \"\";\n  \
    \  long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x = x / base;\n    }\n    \n    return result;\n\
    }", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\t\n\t\
    while (temp > 0) {\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp =\
    \ temp / base;\n\t}\n\t\n\twhile (result != \"0\" && result != \"1\") {\n\t\t\
    result = to_string(x - temp * base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\
    \n\treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n\
    \    temp = x / base;\n    \n    while (temp > 0)\n    {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }", "{\n\tstring result = \"\";\n\tlong temp;\n\t\n\ttemp = x;\n\t\n\twhile (temp\
    \ != 0)\n\t{\n\t\tresult = to_string(temp % base) + result;\n\t\ttemp /= base;\n\
    \t}\n\t\n\treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        temp = temp / base;\n\
    \        result += to_string(temp);\n    }\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n     \
    \   temp = x % base;\n        result += (char)('0' + temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\t\n\twhile\
    \ (x != 0)\n\t{\n\t\tlong r = x % base;\n\t\tresult = char(r + 48) + result;\n\
    \t\tx = x / base;\n\t}\n\t\n\treturn result;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp == 0)\n    {\n\
    \        result = \"0\";\n    }\n    else\n    {\n        result = to_string(temp);\n\
    \    }\n    \n    temp = x % base;\n    \n    if (temp > 0)\n    {\n        result\
    \ += \"0\";\n    }\n    \n    result += \"0\";\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while\
    \ (temp > 0) {\n        long mod = temp % base;\n        temp = temp / base;\n\
    \        result = to_string(mod) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp = x;\n    while (temp > 0) {\n    \
    \    long r = temp % base;\n        temp = temp / base;\n        result = to_string(r)\
    \ + result;\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long temp;\n    \n    while (x != 0) {\n        temp = x % base;\n        result\
    \ += (char)('0' + temp);\n        x = x / base;\n    }\n    return result;\n}",
  "{\n\tstring result = \"\";\n\tlong temp = x;\n\twhile (temp > 0) {\n\t\tlong r\
    \ = temp % base;\n\t\ttemp = temp / base;\n\t\tresult = to_string(r) + result;\n\
    \t}\n\treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n   \
    \ \n    while (x != 0) {\n        temp = x % base;\n        result += to_string(temp);\n\
    \        x /= base;\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n\
    \        long rem = temp % base;\n        temp = temp / base;\n        result\
    \ = to_string(base) + result;\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long tmp = x;\n    long rem = tmp % base;\n    long quotient\
    \ = tmp / base;\n    \n    while(quotient != 0)\n    {\n        if(rem < base)\n\
    \        {\n            result += (char)(quotient + '0');\n            rem = rem\
    \ + base;\n        }\n        else\n        {\n            result += (char)(quotient\
    \ + 'A' - '0');\n            rem = rem - base;\n        }\n        quotient =\
    \ quotient / base;\n    }\n    \n    if(rem > 0)\n    {\n        result += (char)(rem\
    \ + '0');\n    }\n    \n    return result;\n}", "{\n    long temp;\n    string\
    \ result = \"\";\n    \n    temp = x;\n    \n    while (temp > 0)\n    {\n   \
    \     temp = temp / base;\n        result += char(temp % base);\n    }\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n\
    \    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n  \
    \      result = to_string(temp) + result;\n    }\n    \n    return result;\n}",
  "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while (temp\
    \ > 0) {\n        if (temp % base == 0) {\n            result += to_string(temp\
    \ / base);\n        }\n        temp = temp / base;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    while (x != 0)\n    {\n        temp = x % base;\n        result\
    \ += to_string(temp);\n        x = x / base;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x /= base;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ temp;\n    \n    temp = x;\n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    \n\
    \    while (temp > 0)\n    {\n        temp = temp / base;\n        \n        if\
    \ (temp == 0)\n        {\n            result += \"0\";\n        }\n        else\n\
    \        {\n            result += to_string(temp % base);\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp =\
    \ x;\n    long temp2 = base;\n    while(temp > 0)\n    {\n        temp = temp\
    \ % base;\n        result = to_string(temp) + result;\n        temp2 = temp2;\n\
    \    }\n    while(temp2 > 0)\n    {\n        temp2 = temp2 % base;\n        result\
    \ = to_string(temp2) + result;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x != 0) {\n        temp = x\
    \ % base;\n        result += to_string(temp);\n        x = x / base;\n    }\n\
    \    \n    return result;\n}", "{\n\tstring result = \"\";\n\t\n\tlong temp;\n\
    \t\n\ttemp = x;\n\t\n\twhile (temp > 0) {\n\t\tresult = to_string(temp % base)\
    \ + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    temp = x;\n    \n    while (temp >\
    \ 0) {\n        if (temp % base == 0) {\n            result += to_string(temp\
    \ / base);\n        }\n        temp = temp / base;\n    }\n    \n    return result;\n\
    }\n/*\n    Convert string to integer.\n    \n    input string must be in base\
    \ 10.\n    \n    return integer number.\n    \n    exception:\n        when input\
    \ string is not in base 10.\n    \n*/\nlong to_int(string str) \n{\n    long result\
    \ = 0;\n    \n    foreach (char c in str) {\n        result += to_int(c) * pow(10,\
    \ str.length() - 1 - str.length() % 2);\n    }\n    \n    return result;\n}\n\
    /*\n    Convert integer to string.\n    \n    input integer must be in base 10.\n\
    \    \n    return string in base 10.\n    \n    exception:\n        when input\
    \ integer is not in base 10.\n    \n*/\nstring to_string(long x) \n{\n    string\
    \ result = \"\";\n    \n    while (x > 0) {\n        result += to_string(x%10);\n\
    \        x /= 10;\n    }\n    \n    return result;\n}\n/*\n    Convert integer\
    \ to string.\n    \n    input integer must be in base 10.\n    \n    return string\
    \ in base 10.\n    \n    exception:\n        when input integer is not in base\
    \ 10.\n    \n*/\nstring to_string(long x, int base) \n{\n    string result = \"\
    \";\n    \n    while (x > 0) {\n        result += to_string(x%base, base);\n \
    \       x /= base;\n    }\n    \n    return result;\n}\n/*\n    Convert integer\
    \ to string.\n    \n    input integer must be in base 10.\n    \n    return string\
    \ in base 10.\n    \n    exception:\n        when input integer is not in base\
    \ 10.\n    \n*/\nstring to_string(long x, int base, int digits) \n{\n    string\
    \ result = \"\";\n    \n    while (x > 0) {\n        result += to_string(x%base,\
    \ base, digits);\n        x /= base;\n    }\n    \n    return result;\n}\n/*\n\
    \    Convert integer to string.\n    \n    input integer must be in base 10.\n\
    \    \n    return string in base 10.\n    \n    exception:\n        when input\
    \ integer is not in base 10.\n    \n*/\nstring to_string(long x, int base, int\
    \ digits, int precision) \n{\n    string result = \"\";\n    \n    while (x >\
    \ 0) {\n        result += to_string(x%base, base, digits, precision);\n      \
    \  x /= base;\n    }\n    \n    return result;\n", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x / base;\n    \n    if (temp == 0)\n    {\n\
    \        result += \"0\";\n    }\n    else\n    {\n        result += (temp % base)\
    \ + \"\";\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long temp = x;\n    while (temp > 0) {\n        long mod = temp % base;\n\
    \        result = to_string(mod) + result;\n        temp = temp / base;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long temp = x;\n \
    \   while(temp > 0)\n    {\n        int digit = temp % base;\n        result +=\
    \ digit;\n        temp /= base;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long temp;\n    \n    while (x > 0) {\n        temp = x\
    \ % base;\n        result += to_string(temp);\n        x = x / base;\n    }\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp != 0) {\n        long rem = temp %\
    \ base;\n        temp = temp / base;\n        result = to_string(base) + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while (x>0)\n    {\n        remainder = x % base;\n  \
    \      x /= base;\n        result += char(remainder);\n    }\n    \n    return\
    \ result;\n}\n/*\n    Convert a string to integer.\n    \n    input string must\
    \ be in base 10 and only contain digits.\n    \n    returns 0 if the string cannot\
    \ be converted to a number.\n    returns -1 if the string is not a valid number.\n\
    \    returns number if the string is a valid number.\n    \n*/\nlong string_to_int(string\
    \ str)\n{\n    long result = 0;\n    \n    foreach(char c in str)\n    {\n   \
    \     result += char_to_int(c);\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ a string to integer.\n    \n    input string must be in base 10 and only contain\
    \ digits.\n    \n    returns 0 if the string cannot be converted to a number.\n\
    \    returns -1 if the string is not a valid number.\n    returns number if the\
    \ string is a valid number.\n    \n*/\nlong string_to_int(string str, int base)\n\
    {\n    long result = 0;\n    \n    foreach(char c in str)\n    {\n        result\
    \ += char_to_int(c, base);\n    }\n    \n    return result;\n}\n/*\n    Convert\
    \ a string to integer.\n    \n    input string must be in base 10 and only contain\
    \ digits.\n    \n    returns 0 if the string cannot be converted to a number.\n\
    \    returns -1 if the string is not a valid number.\n    returns number if the\
    \ string is a valid number.\n    \n*/\nlong string_to_int(string str, int base,\
    \ int radix)\n{\n    long result = 0;\n    \n    foreach(char c in str)\n    {\n\
    \        result += char_to_int(c, base, radix);\n    }\n    \n    return result;\n\
    }\n/*\n    Convert a string to integer.\n    \n    input string must be in base\
    \ 10 and only contain digits.\n    \n    returns 0 if the string cannot be converted\
    \ to a number.\n    returns -1 if the string is not a valid number.\n    returns\
    \ number if the string is a valid number.\n    \n*/\nlong string_to_int(string\
    \ str, int radix)\n{\n    long result = 0;\n    \n    foreach(char c in str)\n\
    \    {\n        result += char_to_int(c, radix);\n    }\n    \n    return result;\n\
    }\n/*\n    Convert a string to integer.\n    \n    input string must be in base\
    \ 10 and only contain digits.\n    \n    returns 0 if the string cannot be converted\
    \ to a number.\n    returns -1 if the string is not a valid number.\n    returns\
    \ number if the string is a valid number.\n    \n*/\nlong string_to_int(string\
    \ str)\n{", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n\
    \    while (temp > 0) {\n        temp = temp / base;\n        result = to_string(temp)\
    \ + result;\n    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\
    \tlong temp;\n\t\n\ttemp = x;\n\twhile (temp > 0) {\n\t\tlong rem = temp % base;\n\
    \t\tresult = char(rem) + result;\n\t\ttemp /= base;\n\t}\n\t\n\treturn result;\n\
    }", "{\n    long temp;\n    string result = \"\";\n    \n    temp = x / base;\n\
    \    \n    while (temp > 0)\n    {\n        result = to_string(temp % base) +\
    \ result;\n        temp = temp / base;\n    }\n    \n    if (temp == 0)\n    {\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x / base;\n\
    \    \n    while (temp > 0)\n    {\n        result = to_string(temp % base) +\
    \ result;\n        temp = temp / base;\n    }\n    \n    if (temp == 0)\n    {\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long n = x;\n    long r = 1;\n    long\
    \ m = 1;\n    long temp;\n    \n    while (n > 0)\n    {\n        temp = n % base;\n\
    \        result += to_string(temp);\n        n = n / base;\n    }\n    \n    while\
    \ (m > 0)\n    {\n        temp = m % base;\n        result += to_string(temp);\n\
    \        m = m / base;\n    }\n    \n    return result;\n}", "{\n\tstring result\
    \ = \"\";\n\tlong temp;\n\t\n\ttemp = x / base;\n\twhile (temp > 0)\n\t{\n\t\t\
    result = to_string(temp % base) + result;\n\t\ttemp = temp / base;\n\t}\n\t\n\t\
    return result;\n}", "{\n    string result = \"\";\n    long temp;\n    \n    temp\
    \ = x / base;\n    \n    if (temp > 0)\n    {\n        result += to_string(temp);\n\
    \    }\n    \n    temp = x % base;\n    \n    if (temp > 0)\n    {\n        result\
    \ += to_string(temp);\n    }\n    \n    return result;\n}\n/*\n    Convert a string\
    \ to a number.\n    \n    Input string must be in decimal or hexadecimal format.\n\
    \    \n    Input string must be in base 10 or 16.\n    \n    Input string must\
    \ be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n   \
    \ \n    Input string must be in base 10 or 16.\n    \n    Input string must be\
    \ in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n\
    \    Input string must be in base 10 or 16.\n    \n    Input string must be in\
    \ base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n   \
    \ Input string must be in base 10 or 16.\n    \n    Input string must be in base\
    \ 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input\
    \ string must be in base 10 or 16.\n    \n    Input string must be in base 10\
    \ or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input string\
    \ must be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n\
    \    \n    Input string must be in base 10 or 16.\n    \n    Input string must\
    \ be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n   \
    \ \n    Input string must be in base 10 or 16.\n    \n    Input string must be\
    \ in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n\
    \    Input string must be in base 10 or 16.\n    \n    Input string must be in\
    \ base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n   \
    \ Input string must be in base 10 or 16.\n    \n    Input string must be in base\
    \ 10 or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input\
    \ string must be in base 10 or 16.\n    \n    Input string must be in base 10\
    \ or 16.\n    \n    Input string must be in base 10 or 16.\n    \n    Input string\
    \ must be in base 10 or 16.\n    \n    Input string must be in base 10 or 16.\n\
    \    \n    Input string must be in base 10 or 16.", "{\n    string result = \"\
    \";\n    long temp;\n    \n    temp = x;\n    \n    while (temp > 0) {\n     \
    \   temp = temp / base;\n        result = to_string(temp) + result;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n\
    \    \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    long temp;\n    string result = \"\";\n    \n    while (x != 0) {\n\
    \        temp = x % base;\n        result += to_string(temp);\n        x = x /\
    \ base;\n    }\n    \n    return result;\n}", "{\n\tstring result = \"\";\n\t\
    long temp = x;\n\twhile (temp > 0) {\n\t\tlong mod = temp % base;\n\t\tresult\
    \ = char((mod < 10 ? mod + '0' : mod + 'A' - 10) + result);\n\t\ttemp /= base;\n\
    \t}\n\treturn result;\n}", "{\n    string result = \"\";\n    long temp;\n   \
    \ \n    temp = x;\n    \n    while (temp > 0) {\n        temp = temp / base;\n\
    \        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    long temp;\n    string res = \"\";\n    \n    temp = x % base;\n \
    \   \n    while (temp != 0) {\n        res = to_string(temp) + res;\n        temp\
    \ = x / base;\n    }\n    \n    return res;\n}", "{\n    string result = \"\"\
    ;\n    long temp;\n    \n    temp = x;\n    while (temp > 0) {\n        result\
    \ = to_string(temp % base) + result;\n        temp = temp / base;\n    }\n   \
    \ \n    return result;\n}", "{\n    string result = \"\";\n    long temp;\n  \
    \  \n    temp = x / base;\n    \n    while (temp > 0) {\n        result = to_string(temp\
    \ % base) + result;\n        temp = temp / base;\n    }\n    \n    if (temp ==\
    \ 0) {\n        result = to_string(temp) + result;\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long temp;\n    \n    temp = x;\n    while\
    \ (temp > 0)\n    {\n        int digit = temp % base;\n        temp = temp / base;\n\
    \        result = digits[digit] + result;\n    }\n    \n    return result;\n}\n\
    /*\n    Convert string representation of number to integer number.\n    \n   \
    \ input string representation must be in base 10.\n    \n    return integer number\
    \ after conversion.\n    \n    Exceptions:\n        Exception if string representation\
    \ is not in base 10.\n        Exception if string representation is empty or contains\
    \ non-numeric characters.\n    \n*/\nlong string_to_int(string str) \n{\n    long\
    \ result = 0;\n    \n    if (str.length() == 0)\n        throw new Exception(\"\
    String representation is empty.\");\n    \n    for (int i = 0; i < str.length();\
    \ i++)\n    {\n        char c = str[i];\n        if (c < '0' || c > '9')\n   \
    \         throw new Exception(\"String representation contains non-numeric characters.\"\
    );\n        \n        result = result * 10 + c - '0';\n    }\n    \n    return\
    \ result;\n}\n/*\n    Convert integer number to string representation.\n    \n\
    \    input integer number must be in base 10.\n    \n    return string representation\
    \ of integer number after conversion.\n    \n    Exceptions:\n        Exception\
    \ if integer number is not in base 10.\n        Exception if integer number is\
    \ 0.\n    \n*/\nstring int_to_string(long x) \n{\n    if (x == 0)\n        throw\
    \ new Exception(\"Integer number is 0.\");\n    \n    string result = \"\";\n\
    \    \n    while (x > 0)\n    {\n        int digit = x % 10;\n        x = x /\
    \ 10;\n        result = digits[digit] + result;\n    }\n    \n    return result;\n\
    }\n/*\n    Convert integer number to string representation.\n    \n    input integer\
    \ number must be in base 10.\n    \n    return string representation of integer\
    \ number after conversion.\n    \n    Exceptions:\n        Exception if integer\
    \ number is not in base 10.\n        Exception if integer number is 0.\n    \n\
    */\nstring int_to_string_base(long x, long base) \n{\n    if (x == 0)\n      \
    \  throw new Exception(\"Integer number is 0.\");\n    \n    string result = \"\
    \";\n    \n    while (x > 0)\n    {\n        int digit = x % base;\n        x\
    \ = x / base;\n        result = digits[digit] + result;\n    }\n    \n    return\
    \ result;\n}\n/*\n    Convert integer number to string representation.\n    \n\
    \    input integer number must be in base 10.\n    \n    return string representation\
    \ of integer number after conversion.\n    \n    Exceptions:\n        Exception\
    \ if integer number is not in base 10.\n        Exception if integer number is\
    \ 0.\n    \n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
