name: HumanEval_66_digitSum
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nTask\n    Write a function that\
  \ takes a string as input and returns the sum of the upper characters only'\n  \
  \  ASCII codes.\n\n    Examples:\n    >>> digitSum(\"\")\n    0L\n    >>> digitSum(\"\
  abAB\")\n    131L\n    >>> digitSum(\"abcCd\")\n    67L\n    >>> digitSum(\"helloE\"\
  )\n    69L\n    >>> digitSum(\"woArBld\")\n    131L\n    >>> digitSum(\"aAaaaXa\"\
  )\n    153L\n    \n*/\nlong digitSum(string s) \n"
tests: "unittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\"\
  ) == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\"\
  ) == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\"\
  ) == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\"\
  \ How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n\
  }\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n            sum += (c - 'A') - 1;\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much\
    \ for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this\
    \ answer helped you, please consider marking it as accepted (by clicking the check\
    \ mark next to it).\n<|/ c |>\n<| c |>\nI tried to upvote your answer but I don't\
    \ have enough reputation to do so. Sorry!\n<|/ c |>\n<| c |>\nNo worries, glad\
    \ I could help! :)\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I'm new to programming and I really appreciate\
    \ your help. I tried to run your code, but I got this error message: \n\"error:\
    \ no matching function for call to 'digitSum(std::string&)'\n     return digitSum(s);\"\
    \n<|/ c |>\n<| c |>\nI added the code I used to test the function in my answer.\
    \ Does that work for you?\n<|/ c |>\n<| c |>\nYes, it works now. Thanks so much!\n\
    <|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ this solution, however it would be better to use a `for` loop and `if` statements\
    \ instead of `foreach`.\n<|/ c |>\n<| c |>\nI agree, however I wanted to keep\
    \ it simple and avoid the foreach loop. Also I wanted to keep it close to the\
    \ original code as much as possible.\n<|/ c |>\n<| c |>\nI agree with you, however\
    \ I wanted to keep it simple and avoid the foreach loop. Also I wanted to keep\
    \ it close to the original code as much as possible.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, however I wanted to keep it simple and avoid the foreach loop. Also\
    \ I wanted to keep it close to the original code as much as possible.\n<|/ c |>\n\
    <| c |>\nI agree with you, however I wanted to keep it simple and avoid the foreach\
    \ loop. Also I wanted to keep it close to the original code as much as possible.\n\
    <|/ c |>\n<| a |>\n<code>", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work. Try\
    \ it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting. What is your input?\n<|/ c |>\n<| c |>\n`digitSum(\"aAaaaXa\")` returns\
    \ `153L`, not `131L`.\n<|/ c |>\n<| c |>\nOh I see what you mean. Yeah I didn't\
    \ test it properly. Thanks for pointing that out. I'll fix it.\n<|/ c |>\n<| c\
    \ |>\nI fixed it now. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum +=\
    \ toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer! I did some research and found out that `toupper` returns\
    \ a `char` and not a `long`. So I changed it to `sum += toupper(c);` and it worked.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nYes, I forgot that `toupper` returns a `char`.\
    \ Thanks for pointing that out. I've updated my answer.\n<|/ c |>\n<| a tags=c++,string,ascii,char\
    \ |>\nYou can use the ASCII table to find the sum of all characters in your string.\
    \ \n<code>\n#include <iostream>\n#include <string>", "{\n    long sum = 0;\n \
    \   foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| c |>\nI like this solution,\
    \ although it would be better to use a `for` loop instead of a `foreach` loop.\
    \ `foreach` is more of a \"foreach\" than a \"for\" loop. `for` loops are more\
    \ of a \"for\" than a \"foreach\" loop. `foreach` loops are more of a \"foreach\"\
    \ than a \"for\" loop. `foreach` loops are more of a \"foreach\" than a \"for\"\
    \ loop. `foreach` loops are more of a \"foreach\" than a \"for\" loop. `foreach`\
    \ loops are more of a \"foreach\" than a \"for\" loop. `foreach` loops are more\
    \ of a \"foreach\" than a \"for\" loop. `foreach` loops are more of a \"foreach\"\
    \ than a \"for\" loop. `foreach` loops are more of a \"foreach\" than a \"for\"\
    \ loop. `foreach` loops are more of a \"foreach\" than a \"for\" loop. `foreach`\
    \ loops are more of a \"foreach\" than a \"for\" loop. `foreach` loops are more\
    \ of a \"foreach\" than a \"for\" loop. `foreach` loops are more of a \"foreach\"\
    \ than a \"for\" loop. `foreach` loops are more of a \"foreach\" than a \"for\"\
    \ loop. `foreach` loops are more of a \"foreach\" than a \"for\" loop. `foreach`\
    \ loops are more of a \"foreach\" than a \"for\" loop. `foreach` loops are more\
    \ of a \"foreach\" than a \"for\" loop. `foreach` loops are more of a \"foreach\"\
    \ than a \"for\" loop. `foreach` loops are more of a \"foreach\" than a \"for\"\
    \ loop. `foreach` loops are more of a \"foreach\" than a \"for\" loop. `foreach`\
    \ loops are more of a \"foreach\" than a \"for\" loop. `foreach` loops are more\
    \ of a \"foreach\" than a \"for\" loop. `foreach` loops are more of a \"foreach\"\
    \ than a \"for\" loop. `foreach` loops are more of a \"foreach\" than a \"for\"\
    \ loop. `foreach` loops are more of a \"foreach\" than a \"for\" loop. `foreach`\
    \ loops are more of a \"foreach\" than a \"for\" loop. `foreach` loops are more\
    \ of a \"foreach\" than a \"for\" loop. `foreach` loops are more of a \"foreach\"\
    \ than a \"for", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n    \
    \    if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThe OP specifically asked for a\
    \ solution that doesn't use any standard library functions. Your solution uses\
    \ `std::toUpper`, which is not part of the standard.\n<|/ c |>\n<| c |>\nThe OP\
    \ specifically asked for a solution that doesn't use any standard library functions.\
    \ Your solution uses `std::toUpper`, which is not part of the standard.\n<|/ c\
    \ |>\n<| c |>\nI didn't say that my solution uses `std::toUpper`. But it uses\
    \ `std::toUpper` because he didn't know about `std::toUpper`. And he didn't know\
    \ about `std::toUpper` because he didn't know about `std::toUpper`. And he didn't\
    \ know about `std::toUpper` because he didn't know about `std::toUpper`. And he\
    \ didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::toUpper` because he didn't know about `std::toUpper`.\
    \ And he didn't know about `std::", "{\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++)\n    {\n        if(s[i] == 'A' || s[i] == 'a' || s[i] ==\
    \ 'B' || s[i] == 'b' || s[i] == 'C' || s[i] == 'c' || s[i] == 'D' || s[i] == 'd'\
    \ || s[i] == 'E' || s[i] == 'e' || s[i] == 'F' || s[i] == 'f' || s[i] == 'G' ||\
    \ s[i] == 'g' || s[i] == 'H' || s[i] == 'h' || s[i] == 'I' || s[i] == 'i' || s[i]\
    \ == 'J' || s[i] == 'j' || s[i] == 'K' || s[i] == 'k' || s[i] == 'L' || s[i] ==\
    \ 'l' || s[i] == 'M' || s[i] == 'm' || s[i] == 'N' || s[i] == 'n' || s[i] == 'O'\
    \ || s[i] == 'o' || s[i] == 'P' || s[i] == 'p' || s[i] == 'Q' || s[i] == 'q' ||\
    \ s[i] == 'R' || s[i] == 'r' || s[i] == 'S' || s[i] == 's' || s[i] == 'T' || s[i]\
    \ == 't' || s[i] == 'U' || s[i] == 'u' || s[i] == 'V' || s[i] == 'v' || s[i] ==\
    \ 'W' || s[i] == 'w' || s[i] == 'X' || s[i] == 'x' || s[i] == 'Y' || s[i] == 'y'\
    \ || s[i] == 'Z' || s[i] == 'z')\n        {\n            sum += (s[i]-'A');\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis code doesn't work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n`toupper` returns\
    \ a `char`, not a `long`.\n<|/ c |>\n<| c |>\nI know, but I thought it would be\
    \ easier to understand this way than to convert it to `int` first. I'll edit my\
    \ answer to make it clearer.\n<|/ c |>\n<| c |>\n`toupper` returns a `char`, not\
    \ a `long`. `toupper` returns a `char`, not a `long`. `toupper` returns a `char`,\
    \ not a `long`. `toupper` returns a `char`, not a `long`. `toupper` returns a\
    \ `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper` returns\
    \ a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a `char`, not a `long`. `toupper`\
    \ returns a `char`, not a `long`. `toupper` returns a ", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThanks for your answer! I didn't know that `toUpper` existed in\
    \ C++. I'm still a beginner at C++, so I didn't know that `toUpper` was a function.\
    \ Thanks for your help!\n<|/ c |>\n<| c |>\n`toUpper` exists in C and C++, not\
    \ in Java.\n<|/ c |>\n<| c |>\nOh I see, thanks for pointing that out! I guess\
    \ I should learn more about C and C++ before I start using Java.\n<|/ c |>\n<|\
    \ c |>\n`toUpper` exists in C++, not in Java.\n<|/ c |>\n<| c |>\n`toUpper` exists\
    \ in C++, not in Java.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum = 0;\n \
    \   foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nThank you so much! This\
    \ was very helpful!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n \
    \           sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm new to programming\
    \ and I didn't know about that function. I will try to understand it better. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nI added some comments to help you understand how\
    \ it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String s)\
    \ {\n    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        sum\
    \ += s.charAt(i) - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,java,ascii\
    \ |>\n<| c |>\nThanks for your answer. I'm new to programming and I didn't know\
    \ about that function. I will try to understand it better. Thanks again!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        sum += s.charAt(i)\
    \ - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,java,ascii\
    \ |>\n<| c |>\nThanks for your answer. I'm new to programming and I didn't know\
    \ about that function. I will try to understand it better. Thanks again!\n<|/\
    \ c |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        sum += s.charAt(i) - 'A'\
    \ + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,java,ascii dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I'm new to programming and I didn't know\
    \ about that function. I will try to understand it better. Thanks again!\n<|/\
    \ c |>\n<| c |>\nPlease don't post only code as an answer, but also provide an\
    \ explanation of what your code does and how it solves the problem of the question.\
    \ Answers with an explanation are usually more helpful and of better quality,\
    \ and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThanks for your\
    \ comment. I will keep that in mind.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        sum += s.charAt(i) - 'A", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n            sum\
    \ += (c - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThe `digitSum` function doesn't work for the empty string. `digitSum(\"\
    \")` returns `0L`, not `1L`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've fixed the code accordingly.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        sum\
    \ += toupper(s[i]);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nI like this solution, but I feel like it could be improved a bit. For\
    \ example, `digitSum(\"aAaaaXa\")` returns `153L`, but `digitSum(\"aAaaaXA\")`\
    \ returns `153L`.\n<|/ c |>\n<| c |>\nI agree, that is a good point. I will edit\
    \ my answer to fix that issue. Thanks!\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to fix that issue. Thanks!\n<|/ c |>\n<| a |>\n<code>\npublic int digitSum(String\
    \ s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ sum += s.charAt(i) - 'A' + 1;\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii\
    \ dscore=1 |>\n<| c |>\nThis solution does not work if you pass \"aAaaaXa\" as\
    \ input. It returns 153 instead of 154.\n<|/ c |>\n<| c |>\nIt works. I tested\
    \ it. `digitSum(\"aAaaaXa\")` returns `154`.\n<|/ c |>\n<| c |>\nI tested it too.\
    \ `digitSum(\"aAaaaXa\")` returns `154`.\n<|/ c |>\n<| c |>\nI tested it too.\
    \ `digitSum(\"aAaaaXa\")` returns `154`.\n<|/ c |>\n<| c |>\nI tested it too.\
    \ `digitSum(\"aAaaaXa\")` returns `154`.\n<|/ c |>\n<| a tags=java,string,ascii\
    \ |>\n<code>\npublic int digitSum(String s) {\n    int sum = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        sum += s.charAt(i) - 'A' + 1;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis solution does not\
    \ work if you pass \"aAaaaXa\" as input. It returns 153 instead of 154.\n<|/ c\
    \ |>\n<| c |>\nI tested it too. `digitSum(\"aAaaaXa\")` returns `154`.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n`isUpper` doesn't take a\
    \ `char` as its argument. `isupper` does.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've fixed the code accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI guess you meant\
    \ `isUpper` instead of `isUppercase`\n<|/ c |>\n<| c |>\nYes, I meant `isUpper`\
    \ instead of `isUppercase`. Thanks for noticing!\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i]\
    \ == 'A' || s[i] == 'a')\n            sum += 32;\n        else if(s[i] == 'B'\
    \ || s[i] == 'b')\n            sum += 9;\n        else if(s[i] == 'C' || s[i]\
    \ == 'c')\n            sum += 7;\n        else if(s[i] == 'D' || s[i] == 'd')\n\
    \            sum += 6;\n        else if(s[i] == 'E' || s[i] == 'e')\n        \
    \    sum += 5;\n        else if(s[i] == 'F' || s[i] == 'f')\n            sum +=\
    \ 4;\n        else if(s[i] == 'G' || s[i] == 'g')\n            sum += 3;\n   \
    \     else if(s[i] == 'H' || s[i] == 'h')\n            sum += 2;\n        else\
    \ if(s[i] == 'I' || s[i] == 'i')\n            sum += 1;\n        else if(s[i]\
    \ == 'J' || s[i] == 'j')\n            sum++;\n        else if(s[i] == 'K' || s[i]\
    \ == 'k')\n            sum += 10;\n        else if(s[i] == 'L' || s[i] == 'l')\n\
    \            sum += 9;\n        else if(s[i] == 'M' || s[i] == 'm')\n        \
    \    sum += 8;\n        else if(s[i] == 'N' || s[i] == 'n')\n            sum +=\
    \ 7;\n        else if(s[i] == 'O' || s[i] == 'o')\n            sum += 6;\n   \
    \     else if(s[i] == 'P' || s[i] == 'p')\n            sum += 5;\n        else\
    \ if(s[i] == 'Q' || s[i] == 'q')\n            sum += 4;\n        else if(s[i]\
    \ == 'R' || s[i] == 'r')\n            sum += 3;\n        else if(s[i] == 'S' ||\
    \ s[i] == 's')\n            sum += 2;\n        else if(s[i] == 'T' || s[i] ==\
    \ 't')\n            sum++;\n        else if(s[i] == 'U' || s[i] == 'u')\n    \
    \        sum += 10;\n        else if(s[i] == 'V' || s[i] == 'v')\n           \
    \ sum += 9;\n        else if(s[i] == 'W' || s[i] == 'w')\n            sum += 8;\n\
    \        else if(s[i] == 'X' || s[i] == 'x')\n            sum += 7;\n        else\
    \ if(s[i] == 'Y' || s[i] == 'y')\n            sum += 6;\n        else if(s[i]\
    \ == 'Z' || s[i] == 'z')\n            sum += 5;\n        else if(s[i] == 'a' ||\
    \ s[i] == 'A')\n            sum += 32;\n        else if(s[i] == 'b' || s[i] ==\
    \ 'B')\n            sum += 9;\n        else if(s[i] == 'c' || s[i] == 'C')\n \
    \           sum += 7;\n        else if(s[i] == 'd' || s[i] == 'D')\n         \
    \   sum += 6;\n        else if(s[i] == 'e' || s[i] == 'E')\n            sum +=\
    \ 5;\n        else if(s[i] == 'f' || s[i] == 'F')\n            sum += 4;\n   \
    \     else if(s[i] == 'g' || s[i] == 'G')\n            sum += 3;\n        else\
    \ if(s[i] == 'h' || s[i] == 'H')\n            ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| c |>\nThanks so much! This was very helpful!\n\
    <|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153L` instead of `153`.\n<|/ c |>\n<| c |>\nI missed that one. Thanks\
    \ for pointing it out. I've updated the answer.\n<|/ c |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThanks for your answer. I'm still trying to understand how this\
    \ works. I understand that `isUpper` checks if the character is uppercase and\
    \ `toUpper` converts the character to uppercase. But what exactly is happening\
    \ in the `foreach` loop? I understand that `foreach` loops through each character\
    \ in the string and assigns it to the variable `c`, but how does it know to only\
    \ add `toUpper` if the character is uppercase? Also, what exactly is happening\
    \ in the `if` statement? I understand that `isUpper` checks if the character is\
    \ uppercase, but what exactly is happening in the `if` statement? Thanks again\
    \ for your help.\n<|/ c |>\n<| c |>\n`foreach` loops through each character in\
    \ the string and assigns it to the variable `c`. `foreach` loops through each\
    \ character in the string and assigns it to the variable `c`. `foreach` loops\
    \ through each character in the string and assigns it to the variable `c`. `foreach`\
    \ loops through each character in the string and assigns it to the variable `c`.\
    \ `foreach` loops through each character in the string and assigns it to the variable\
    \ `c`. `foreach` loops through each character in the string and assigns it to\
    \ the variable `c`. `foreach` loops through each character in the string and assigns\
    \ it to the variable `c`. `foreach` loops through each character in the string\
    \ and assigns it to the variable `c`. `foreach` loops through each character in\
    \ the string and assigns it to the variable `c`. `foreach` loops through each\
    \ character in the string and assigns it to the variable `c`. `foreach` loops\
    \ through each character in the string and assigns it to the variable `c`. `foreach`\
    \ loops through each character in the string and assigns it to the variable `c`.\
    \ `foreach` loops through each character in the string and assigns it to the variable\
    \ `c`. `foreach` loops through each character in the string and assigns it to\
    \ the variable `c`. `foreach` loops through each character in the string and assigns\
    \ it to the variable `c`. `foreach` loops through each character in the string\
    \ and assigns it to the variable `c`. `foreach` loops through each character in\
    \ the string and assigns it to the variable `c`. `foreach` loops through each\
    \ character in the string and assigns it to the ", "{\n    long sum = 0;\n   \
    \ foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI didn't downvote,\
    \ but I suspect it's because you didn't explain what was wrong with OP's code.\
    \ Also, your solution doesn't seem to take into account the fact that `digitSum(\"\
    aAaaaXa\")` returns `153L`, which is not the sum of `'A'`, `'a'`, `'X'` and `'a'`.\n\
    <|/ c |>\n<| c |>\nI added a comment to the OP's question. Thanks for your feedback.\n\
    <|/ c |>\n<| c |>\nI added a comment to the OP's question. Thanks for your feedback.\n\
    <|/ c |>\n<| c |>\nI added a comment to the OP's question. Thanks for your feedback.\n\
    <|/ c |>\n<| c |>\nI added a comment to the OP's question. Thanks for your feedback.\n\
    <|/ c |>\n<| a tags=c++,string,ascii,uppercase |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThe OP\
    \ asked for a solution in C++.\n<|/ c |>\n<| c |>\nThe OP asked for a solution\
    \ in C++.\n<|/ c |>\n<| c |>\nThe OP asked for a solution in C++.\n<|/ c |>\n\
    <| c |>\nThe OP asked for a solution in C++.\n<|/ c |>\n<| c |>\nThe OP asked\
    \ for a solution in C++.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n        {\n            sum += (c - 'A' + 1);\n        }\n    }\n  \
    \  return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii,algorithm |>\n<| c |>\n\
    The OP wants to count the digits, not sum them.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that detail. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that counts the digits.\n<|/ c |>\n<| c |>\nThe OP wants\
    \ to count the digits, not sum them.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution that counts the digits.\n<|/ c |>\n<| a tags=string,c++,ascii,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n`isUpper` doesn't exist\
    \ in C++.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that out.\
    \ I'll update my answer.\n<|/ c |>\n<| c |>\n`isUpper` doesn't exist in C++, but\
    \ `toUpper` does.\n<|/ c |>\n<| c |>\n`isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `isUpper` doesn't exist in C++, but `toUpper`\
    \ does. `isUpper` doesn't exist in C++, but `toUpper` does. `isUpper` doesn't\
    \ exist in C++, but `toUpper` does. `is", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\n\
    I like your solution, but I believe that `isUpper` should be `isUpperAscii` since\
    \ `isUpper` checks for ASCII uppercase letters while `isUpperAscii` checks for\
    \ Unicode uppercase letters.\n<|/ c |>\n<| c |>\n: You are right. I was thinking\
    \ about `isUpper` from the C standard library, but `isUpperAscii` was a better\
    \ name than `isUpper`.\n<|/ c |>\n<| c |>\n: I added a solution without `isUpper`\
    \ but using `isUpperAscii`.\n<|/ c |>\n<| c |>\n: I added a solution without `isUpper`\
    \ but using `isUpperAscii`.\n<|/ c |>\n<| c |>\n: I added a solution without `isUpper`\
    \ but using `isUpperAscii`.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThanks for\
    \ your answer. I am not allowed to use any libraries other than std.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\n\
    Thanks so much! I really appreciate it!\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like the idea of using foreach to iterate over\
    \ the string. Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if(c >= 'A' && c <= 'Z') {\n            sum +=\
    \ (c - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii\
    \ |>\n<| a tags=java,string,ascii |>\n<code>\npublic long digitSum(String s) {\n\
    \    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c\
    \ = s.charAt(i);\n        if(c >= 'A' && c <= 'Z') {\n            sum += (c -\
    \ 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=java,string,ascii |>\n<code>\npublic long digitSum(String s) {\n   \
    \ long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if(c >= 'A' && c <= 'Z') {\n            sum += (c - 'A' + 1);\n     \
    \   }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,ascii\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(c >=\
    \ 'A' && c <= 'Z') {\n            sum += (c - 'A' + 1);\n        }\n    }\n  \
    \  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,ascii |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(c >= 'A' &&\
    \ c <= 'Z') {\n            sum += (c - 'A' + 1);\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,ascii |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length()",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n        {\n            sum += c - 'A' + 1;\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't answer the question.\
    \ He wants to know how to use `foreach` on a `string`.\n<|/ c |>\n<| c |>\n: I\
    \ see what you mean. I've added a solution that uses `foreach` on a `string`.\n\
    <|/ c |>\n<| c |>\n: I added a solution that uses `foreach` on a `string`.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that uses `foreach` on a `string`.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that uses `foreach` on a `string`.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nstring s = \"abc\";", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThis doesn't work.\
    \ `toupper` returns a `char` not a `long`.\n<|/ c |>\n<| c |>\n: Yes, I know.\
    \ That's why I wrote \"ASCII codes\". My point was that `toupper` returns a `char`\
    \ not a `long`.\n<|/ c |>\n<| c |>\n: I fixed the code so it compiles. I tested\
    \ it before posting.\n<|/ c |>\n<| c |>\n: I fixed the code so it compiles. I\
    \ tested it before posting.\n<|/ c |>\n<| c |>\n: I fixed the code so it compiles.\
    \ I tested it before posting.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I tried your\
    \ code, but I got this error when I tried to run it:\n`digitSum(string s) \n{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }`\n`digitSum(string s) \n{\n    long sum = 0;\n    foreach(char c in s)\n   \
    \ {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n     \
    \   }\n    }\n    return sum;\n}`\n`digitSum(string s) \n{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}`\n`digitSum(string\
    \ s) \n{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }`\n`digitSum(string s) \n{\n    long sum = 0;\n    foreach(char c in s)\n   \
    \ {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n     \
    \   }\n    }\n    return sum;\n}`\n`digitSum(string s) \n{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}`\n`digitSum(string\
    \ s) \n{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }`\n`digitSum(string s) \n{\n    long sum = 0;\n    foreach(char c in s)\n   \
    \ {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n     \
    \   }\n    }\n    return sum;\n}`\n`digitSum(string s) \n{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n        \
    \    sum += toUpper(c);\n        }\n    }\n    return sum;\n}`\n`digitSum(string\
    \ s) \n{\n    long sum = 0;\n    foreach", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii,arrays\
    \ |>\n<| c |>\nThank you very much for your help. I appreciate it.\n<|/ c |>\n\
    <| c |>\nI did some more research and found that you can also use std::accumulate\
    \ to accomplish this task. Thanks again for your help.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n        {\n            sum += (c - 'A' + 1);\n        }\n    }\n  \
    \  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.*;\nimport java.lang.*;\nimport java.io.*;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know how to convert a string to ASCII.\n<|/ c |>\n\
    <| c |>\nThe question was how to convert a string to ASCII. My answer shows how\
    \ to do that. OP can easily adapt it to their needs.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to convert a string to ASCII. My answer shows how to do that. OP can\
    \ easily adapt it to their needs.\n<|/ c |>\n<| c |>\nThe question was how to\
    \ convert a string to ASCII. My answer shows how to do that. OP can easily adapt\
    \ it to their needs.\n<|/ c |>\n<| c |>\nThe question was how to convert a string\
    \ to ASCII. My answer shows how to do that. OP can easily adapt it to their needs.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=string,c++,ascii |>\n<| c |>\nI didn't downvote, but this doesn't answer\
    \ the question. OP wants to know how to convert a character to a number, not how\
    \ to sum up all the ASCII codes.\n<|/ c |>\n<| c |>\nI added a solution that does\
    \ exactly that.\n<|/ c |>\n<| c |>\nI didn't downvote either, but this doesn't\
    \ answer the question. OP wants to know how to convert a character to a number,\
    \ not how to sum up all the ASCII codes.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that does exactly that.\n<|/ c |>\n<| c |>\nI didn't downvote either, but this\
    \ doesn't answer the question. OP wants to know how to convert a character to\
    \ a number, not how to sum up all the ASCII codes.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n        {\n    \
    \        sum += s.charAt(i) - 'A' + 1;\n        }\n    }\n    return sum;\n}",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| c |>\nI like your solution, but I believe that `isUpper` should be `isUpperAscii`\
    \ since `isUpper` doesn't take into account the fact that `'A'` can be represented\
    \ in more than one way in ASCII.\n<|/ c |>\n<| c |>\nYes, you are right. `isUpper`\
    \ doesn't take into account the fact that `'A'` can be represented in more than\
    \ one way in ASCII. I've edited my answer to reflect that.\n<|/ c |>\n<| c |>\n\
    I believe that `isUpper` should be `isUpperAscii` since `isUpper` doesn't take\
    \ into account the fact that `'A'` can be represented in more than one way in\
    \ ASCII.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify\
    \ that I was looking for a solution that doesn't use any libraries. I edited my\
    \ question to reflect that.\n<|/ c |>\n<| c |>\nI believe that `isUpper` should\
    \ be `isUpperAscii` since `isUpper` doesn't take into account the fact that `'A'`\
    \ can be represented in more than one way in ASCII.\n<|/ c |>\n<| a tags=string,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nI didn't know that `toUpper` existed. Thanks for teaching me something\
    \ new!\n<|/ c |>\n<| c |>\n`toUpper` existed in C89 but not in C99. `toupper`\
    \ existed in C99 but not in C89.\n<|/ c |>\n<| c |>\n: I didn't know that either,\
    \ thanks for teaching me something new!\n<|/ c |>\n<| c |>\n: I didn't know that\
    \ either, thanks for teaching me something new!\n<|/ c |>\n<| c |>\n: I didn't\
    \ know that either, thanks for teaching me something new!\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i]\
    \ == 'A' || s[i] == 'a')\n            sum += 32;\n        else\n            sum\
    \ += (s[i] - '0');\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii\
    \ |>\n<| c |>\nThanks, I appreciate it. I was able to get it to work using your\
    \ code. Thanks again!\n<|/ c |>\n<| c |>\nGlad I could help. I added a more efficient\
    \ version to my answer.\n<|/ c |>\n<| a tags=string,c++,char,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;",
  "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        sum\
    \ += toupper(s[i]);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n    long\
    \ sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isUpper(s[i]))\n\
    \            sum += toUpper(s[i]);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=string,c++,algorithm |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153L` instead of `131L`.\n<|/ c |>\n<| c |>\nYeah, I noticed that\
    \ and fixed it.  Thanks for pointing it out.\n<|/ c |>\n<| c |>\n`digitSum(\"\
    aAaaaXa\")` returns `153L` instead of `131L` because `toUpper(s[i])` returns `'X'`\
    \ instead of `'a'`.\n<|/ c |>\n<| c |>\nYeah, I noticed that and fixed it.  Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\n`digitSum(\"aAaaaXa\")` returns `153L`\
    \ instead of `131L` because `toUpper(s[i])` returns `'X'` instead of `'a'`.\n\
    <|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (isUpper(c)) {\n         \
    \   sum += Character.toUpperCase(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=java,string |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  char c = s.charAt(i);\n        if (isUpper(c)) {\n            sum += Character.toUpperCase(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<|\
    \ c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (isUpper(c)) {\n            sum += Character.toUpperCase(c);\n   \
    \     }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 tags=java,string |>\n\
    <| a tags=java,string |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (isUpper(c)) {\n            sum += Character.toUpperCase(c);\n   \
    \     }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (isUpper(c))\
    \ {\n            sum += Character.toUpperCase(c);\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  char c = s.charAt(i);\n        if (isUpper(c)) {\n            sum += Character.toUpperCase(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<|\
    \ a tags=java,string |>\n<code>\npublic long digitSum(String s) {\n    long sum",
  "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s.codePointAt(i)\
    \ > 64)\n        {\n            sum += s.codePointAt(i);\n        }\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThis doesn't\
    \ work if the string contains non-ASCII characters.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. I tested it before posting it. I just added a comment to that effect.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if the string contains non-ASCII characters.\
    \ Try it with `\"aAaaaXa\"`.\n<|/ c |>\n<| c |>\nI tested it before posting it.\
    \ I just added a comment to that effect.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ the string contains non-ASCII characters. Try it with `\"aAaaaXa\"`.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks for your answer. I'm\
    \ a beginner in C++ and I didn't know about `toUpper`. However, I still don't\
    \ understand why my code didn't work. Could you please explain why my code didn't\
    \ work?\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation. I understand now why my code didn't\
    \ work. Your code works perfectly fine.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii,uppercase\
    \ |>\n<| c |>\nThank you for your answer. Your solution works perfectly for me.\
    \ I'm still trying to understand how it works. But I appreciate your help.\n<|/\
    \ c |>\n<| a tags=string,c++,ascii,uppercase |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        sum += std.math.charDigit(c);\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=string,c++,algorithm |>\n<| a tags=string,c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    I believe that `digitSum(\"aAaaaXa\")` should return `153L`, not `153L`\n<|/ c\
    \ |>\n<| c |>\nYes, you're right. I missed that. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nI believe that `digitSum(\"aAaaaXa\")` should return `153L`,\
    \ not `153L`\n<|/ c |>\n<| c |>\nI believe that `digitSum(\"aAaaaXa\")` should\
    \ return `153L`, not `153L`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThe question was about C++, not C. `std::toupper` does not exist\
    \ in C++.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThe question was about C++, not C. `std::toupper` does not\
    \ exist in C++.\n<|/ c |>\n<| c |>\n: It does in C++11. http://en.cppreference.com/w/cpp/string/byte/toupper\n\
    <|/ c |>\n<| c |>\n: I didn't know that. Thanks for pointing that out.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char c in\
    \ s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ tags=string,c++,ascii |>\n<| c |>\nThanks for your answer! I understand your\
    \ solution and it works perfectly. However I cannot use any libraries other than\
    \ std.\n<|/ c |>\n<| c |>\nI added a solution without std.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI believe this solution will fail for input like \"aAaaaXa\".\n\
    <|/ c |>\n<| c |>\nIt will fail for input like \"aAaaaXa\" because \"a\" is not\
    \ an upper case letter. Also, the OP said \"upper characters only\" which means\
    \ \"a\" is not an upper case letter. My solution will work for all inputs. I believe\
    \ that my solution is more elegant than yours.\n<|/ c |>\n<| c |>\nI believe that\
    \ your solution is more elegant than mine. My solution will work for all inputs.\
    \ I believe that my solution is more elegant than yours. I believe that your solution\
    \ is more elegant than mine. My solution will work for all inputs. I believe that\
    \ your solution is more elegant than mine. My solution will work for all inputs.\
    \ I believe that your solution is more elegant than mine. My solution will work\
    \ for all inputs. I believe that your solution is more elegant than mine. My solution\
    \ will work for all inputs. I believe that your solution is more elegant than\
    \ mine. My solution will work for all inputs. I believe that your solution is\
    \ more elegant than mine. My solution will work for all inputs. I believe that\
    \ your solution is more elegant than mine. My solution will work for all inputs.\
    \ I believe that your solution is more elegant than mine. My solution will work\
    \ for all inputs. I believe that your solution is more elegant than mine. My solution\
    \ will work for all inputs. I believe that your solution is more elegant than\
    \ mine. My solution will work for all inputs. I believe that your solution is\
    \ more elegant than mine. My solution will work for all inputs. I believe that\
    \ your solution is more elegant than mine. My solution will work for all inputs.\
    \ I believe that your solution is more elegant than mine. My solution will work\
    \ for all inputs. I believe that your solution is more elegant than mine. My solution\
    \ will work for all inputs. I believe that your solution is more elegant than\
    \ mine. My solution will work for all inputs. I believe that your solution is\
    \ more elegant than mine. My solution will work for all inputs. I believe that\
    \ your ", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n`isUpper` doesn't exist\
    \ in C++.\n<|/ c |>\n<| c |>\n`isUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n`isUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n`isUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n`isUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum +=\
    \ toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i\
    \ < s.length(); i++)\n    {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        \
    \    sum += (s[i]-'A');\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n\
    The question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about\
    \ C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c\
    \ |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question\
    \ was about C++, not C#.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        sum += std.math.max(std.math.digit(c));\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n`std.math.max(std.math.digit(c))`\
    \ can be replaced with `std::toupper(c)`\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| a\
    \ tags=string,c++,char,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s) {\n      \
    \  sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question, which is about how to do this in O(n)\
    \ time.\n<|/ c |>\n<| c |>\nI believe it does. He wants to know how he can do\
    \ this in O(n) time.\n<|/ c |>\n<| c |>\nThe question asks how to do this in O(n)\
    \ time. Your answer doesn't do that.\n<|/ c |>\n<| c |>\nI believe it does. He\
    \ wants to know how he can do this in O(n) time. He wants to know how he can do\
    \ this in O(n) time.\n<|/ c |>\n<| c |>\nThe question asks how to do this in O(n)\
    \ time. Your answer doesn't do that.\n<|/ c |>\n<| a tags=string,algorithm,c++,time-complexity\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\n#include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        if(isUpper(c)) {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you for your answer! I appreciate it. I will try it out and let you know if\
    \ it works. I do have one question. Why did you use \"long\" instead of \"int\"\
    ? I thought \"int\" was the correct data type for ASCII codes.\n<|/ c |>\n<| c\
    \ |>\n`int` can only hold values up to `2147483647`, while `long` can hold values\
    \ up to `9223372036854775807`. `int` can hold values up to `2147483647` while\
    \ `long` can hold values up to `9223372036854775807`. `int` can hold values up\
    \ to `2147483647` while `long` can hold values up to `9223372036854775807`. `int`\
    \ can hold values up to `2147483647` while `long` can hold values up to `9223372036854775807`.\
    \ `int` can hold values up to `2147483647` while `long` can hold values up to\
    \ `9223372036854775807`. `int` can hold values up to `2147483647` while `long`\
    \ can hold values up to `9223372036854775807`. `int` can hold values up to `2147483647`\
    \ while `long` can hold values up to `9223372036854775807`. `int` can hold values\
    \ up to `2147483647` while `long` can hold values up to `9223372036854775807`.\
    \ `int` can hold values up to `2147483647` while `long` can hold values up to\
    \ `9223372036854775807`. `int` can hold values up to `2147483647` while `long`\
    \ can hold values up to `9223372036854775807`. `int` can hold values up to `2147483647`\
    \ while `long` can hold values up to `9223372036854775807`. `int` can hold values\
    \ up to `2147483647` while `long` can hold values up to `9223372036854775807`.\
    \ `int` can hold values up to `2147483647` ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        if(isUpper(c)) {\n            sum += toUpper(c);\n      \
    \  }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<|\
    \ a tags=string,c++,arrays |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThe OP\
    \ wants to count the digits, not sum them.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that counts the digits.\n<|/ c |>\n<| c |>\nThe OP wants to count the digits,\
    \ not sum them.\n<|/ c |>\n<| c |>\nI added a solution that counts the digits.\n\
    <|/ c |>\n<| c |>\nThe OP wants to count the digits, not sum them.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI guess you meant `isUpper` instead of `isLower`\n<|/ c |>\n<| c |>\n\
    Yes, I meant `isUpper`. Thanks for noticing!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        sum += s.codePointAt(i);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n\
    This doesn't answer the question. OP wants to know how to get the sum of all ASCII\
    \ characters in a string.\n<|/ c |>\n<| c |>\nI believe this answers the question\
    \ as stated. OP wants to know how to get the sum of all ASCII characters in a\
    \ string. My answer does exactly that. OP also stated that he was able to get\
    \ the sum of all ASCII characters in a string and he was looking for a way to\
    \ do it without using loops.\n<|/ c |>\n<| c |>\nThe OP stated that he was able\
    \ to get the sum of all ASCII characters in a string and he was looking for a\
    \ way to do it without using loops. Your answer doesn't do that. OP wants to know\
    \ how to get the sum of all ASCII characters in a string.\n<|/ c |>\n<| c |>\n\
    I believe my answer does exactly that. OP also stated that he was able to get\
    \ the sum of all ASCII characters in a string and he was looking for a way to\
    \ do it without using loops. My answer does exactly that. OP also stated that\
    \ he was able to get the sum of all ASCII characters in a string and he was looking\
    \ for a way to do it without using loops. My answer does exactly that. OP also\
    \ stated that he was able to get the sum of all ASCII characters in a string and\
    \ he was looking for a way to do it without using loops. My answer does exactly\
    \ that. OP also stated that he was able to get the sum of all ASCII characters\
    \ in a string and he was looking for a way to do it without using loops. My answer\
    \ does exactly that. OP also stated that he was able to get the sum of all ASCII\
    \ characters in a string and he was looking for a way to do it without using loops.\
    \ My answer does exactly that. OP also stated that he was able to get the sum\
    \ of all ASCII characters in a string and he was looking for a way to do it without\
    \ using loops. My answer does exactly that.\n<|/ c |>\n<| c |>\nOP also stated\
    \ that he was able to get the sum of all ASCII characters in a string and he was\
    \ looking for a way to do it without using loops. My answer does exactly that.\
    \ OP also stated that he was able to get the sum of all ASCII characters in a\
    \ string and he was looking for a way to do it without using loops. My answer\
    \ does exactly that. OP also stated that he was able to get the sum of all ASCII\
    \ characters in a string and he was looking for a way to do it without using loops.\
    \ My ", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution but I think it would be better\
    \ to use a `for` loop and `if` statements instead of `foreach`\n<|/ c |>\n<| c\
    \ |>\nI agree, `foreach` is more readable than `for` loop with `if` statements.\
    \ I added a solution using `foreach`.\n<|/ c |>\n<| c |>\nI agree that `foreach`\
    \ is more readable, but I find it more confusing to read than a `for` loop with\
    \ `if` statements.\n<|/ c |>\n<| c |>\nI agree that `foreach` is more readable,\
    \ but I find it more confusing to read than a `for` loop with `if` statements.\n\
    <|/ c |>\n<| c |>\nI agree that `foreach` is more readable, but I find it more\
    \ confusing to read than a `for` loop with `if` statements.\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThanks so much! I appreciate\
    \ it!\n<|/ c |>\n<| c |>\nThis code doesn't work. `toUpper` returns a `char`,\
    \ not a `char32_t`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the answer to reflect this.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nI like\
    \ your solution but I think it would be better to use a `std::map<char, int>`\
    \ instead of an `std::unordered_map<char, int>` because `std::unordered_map` has\
    \ `O(log(n))` complexity while `std::map` has `O(1)` complexity.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. But the OP asked for a solution without using any library\
    \ functions. I believe that `std::unordered_map` has `O(1)` complexity because\
    \ it is implemented as a hash table. Hash table has `O(1)` complexity because\
    \ it is implemented as a hash table. `std::map` has `O(log(n))` complexity because\
    \ it is implemented as a binary search tree. Binary search tree has `O(log(n))`\
    \ complexity because it is implemented as a binary search tree. So, the complexity\
    \ of `std::unordered_map` is `O(1)` while `std::map` is `O(log(n))`.\n<|/ c |>\n\
    <| c |>\nI agree with you that `std::unordered_map` has `O(1)` complexity because\
    \ it is implemented as a hash table. But the OP asked for a solution without using\
    \ any library functions. I believe that `std::unordered_map` has `O(1)` complexity\
    \ because it is implemented as a hash table. Hash table has `O(1)` complexity\
    \ because it is implemented as a hash table. `std::map` has `O(log(n))` complexity\
    \ because it is implemented as a binary search tree. Binary search tree has `O(log(n))`\
    \ complexity because it is implemented as a binary search tree. So, the complexity\
    \ of `std::unordered_map` is `O(1)` while `std::map` is `O(log(n))`.\n<|/ c |>\n\
    <| c |>\nI agree with you that `std::unordered_map` has `O(1)` complexity because\
    \ it is implemented as a hash table. But the OP asked for a solution without using\
    \ any library functions. I believe that `std::unordered_map` has `O(1)` complexity\
    \ because it is implemented as a hash table. Hash table has `O(1)` complexity\
    \ because it is implemented as a hash table. `std::map` has `O(log(n))` complexity\
    \ because ", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer! I tried to run your code, but I got\
    \ this error message: \n`digitSum(string s) in digitSum.d cannot be compiled because\
    \ it uses unsupported syntax\ndigitSum(string s) in digitSum.d cannot be compiled\
    \ because it uses unsupported syntax\ndigitSum(string s) in digitSum.d cannot\
    \ be compiled because it uses unsupported syntax\ndigitSum(string s) in digitSum.d\
    \ cannot be compiled because it uses unsupported syntax\ndigitSum(string s) in\
    \ digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be compiled because it uses unsupported syntax\ndigitSum(string\
    \ s) in digitSum.d cannot be ", "{\n    long sum = 0;\n    foreach(char c in s)\
    \ {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n \
    \   for(int i = 0; i < s.length(); i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        sum += s.charAt(i) - '0';\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii |>\n<| c |>\n\
    This doesn't work if you have a string like \"0123\".\n<|/ c |>\n<| c |>\nIt does\
    \ work. `s.charAt(i)` returns `char` which is an integral type. `'0'` returns\
    \ `int` which is an integral type. `'0' - '0'` returns `int` which is an integral\
    \ type. `'0' - '0' - '0'` returns `int` which is an integral type. `'0' - '0'\
    \ - '0' - '0'` returns `int` which is an integral type. `'0' - '0' - '0' - '0'\
    \ - '0'` returns `int` which is an integral type. `'0' - '0' - '0' - '0' - '0'\
    \ - '0'` returns `int` which is an integral type. `'0' - '0' - '0' - '0' - '0'\
    \ - '0' - '0'` returns `int` which is an integral type. `'0' - '0' - '0' - '0'\
    \ - '0' - '0' - '0' - '0'` returns `int` which is an integral type. `'0' - '0'\
    \ - '0' - '0' - '0' - '0' - '0' - '0' - '0'` returns `int` which is an integral\
    \ type. `'0' - '0' - '0' - '0' - '0' - '0' - '0' - '0' - '0' - '0'` returns `int`\
    \ which is an integral type. `'0' - '0' - '0' - '0' - '0' - '0' - '0' - '0' -\
    \ '0' - '0' - '0'` returns `int` which is an ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        if(isUpper(c)) {\n            sum += toUpper(c);\n      \
    \  }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char\
    \ c = s[i];\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work for the input `\"aAaaaXa\"`\n<|/ c |>\n<| c |>\nIt does. I tested it before\
    \ posting it.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\n\
    <|/ c |>\n<| c |>\nI tested it before posting it. What do you mean by \"doesn't\
    \ work\"? It returns 153L for that input. Are you sure you tested it before posting\
    \ it?\n<|/ c |>\n<| c |>\nI tested it before posting it. What do you mean by \"\
    doesn't work\"? It returns 153L for that input. Are you sure you tested it before\
    \ posting it?\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if(c >= 'A' && c <= 'Z') {\n            sum +=\
    \ (c - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string\
    \ |>\n<| c |>\nThis doesn't work for the input `\"aAaaaXa\"`\n<|/ c |>\n<| c |>\n\
    It does. I tested it before posting it.\n<|/ c |>\n<| c |>\nI tested it before\
    \ posting it. What do you mean by \"doesn't work\"? It returns 153L for that input.\
    \ Are you sure you tested it before posting it?\n<|/ c |>\n<| c |>\nI tested it\
    \ before posting it. What do you mean by \"doesn't work\"? It returns 153L for\
    \ that input. Are you sure you tested it before posting it?\n<|/ c |>\n<| c |>\n\
    I tested it before posting it. What do you mean by \"doesn't work\"? It returns\
    \ 153L for that input. Are you sure you tested it before posting it?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        char ", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What do\
    \ you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt works. I tested it before posting.\
    \ What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n\
    This code does not compile. `toUpper` does not exist in C++.\n<|/ c |>\n<| c |>\n\
    The code compiles fine for me in Visual Studio. Are you using an older version\
    \ of Visual Studio?\n<|/ c |>\n<| c |>\nI am using Visual Studio 2013. Maybe the\
    \ problem is that I am using an older version of Visual Studio?\n<|/ c |>\n<|\
    \ c |>\nYes, it looks like the problem was with my version of Visual Studio. I\
    \ tried your code and it compiles fine in Visual Studio 2013. Thanks for your\
    \ help.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| c |>\nThanks, this was very helpful.\n<|/ c\
    \ |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. I am not allowed to use any libraries other than std.\n<|/ c |>\n<|\
    \ c |>\nI added a solution that does not use any libraries.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. I am not allowed to use any libraries other than std.\n\
    <|/ c |>\n<| a |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.conv;\n\
    import std.algorithm;\nimport std.array;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.", "{\n    long sum = 0;\n    foreach(char c\
    \ in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nstring str = \"Hello World\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) {\n           \
    \ sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nI like your solution, but\
    \ I believe that `isUpper` should be `isUpperAscii`\n<|/ c |>\n<| c |>\nYes, I\
    \ agree with you. Thanks for pointing it out.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThis doesn't work. Try it\
    \ with `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require a loop\n<|/ c |>\n<| c |>\nI added a solution that doesn't require a\
    \ loop\n<|/ c |>\n<| c |>\nI added a solution that doesn't require a loop\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't require a loop\n<|/ c |>\n<|\
    \ a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>", "{\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(s.codePointAt(i) > 64)\n        {\n            sum +=\
    \ s.codePointAt(i);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Scanner;", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n        if(isUpper(c))\
    \ sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char\
    \ |>\n<| a tags=string,c++,char |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 10);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n       \
    \ sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        sum += toupper(s[i]);\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I am not allowed to use\
    \ any libraries. I should use only std.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without std.\n<|/ c |>\n<| c |>\nThank you for your answer. I am not allowed\
    \ to use any libraries. I should use only std.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without std.\n<|/ c |>\n<| c |>\nThank you for your answer. I am not allowed\
    \ to use any libraries. I should use only std.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I'm a beginner at programming and I haven't\
    \ learned about foreach yet. Could you explain how this works?\n<|/ c |>\n<| c\
    \ |>\nforeach is just a for loop that iterates over an iterable (in this case\
    \ a string). In this case it iterates over each character in the string and adds\
    \ them to the sum.\n<|/ c |>\n<| c |>\nThanks again. I'm still trying to understand\
    \ how this works. Could you explain how it works?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code so hopefully it makes more sense. Let me know if you\
    \ have any questions.\n<|/ c |>\n<| c |>\nThanks so much! I really appreciate\
    \ it.\n<|/ c |>\n<| a tags=c#,string,ascii |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <=\
    \ 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += std.toInt(c);\n    }\n\
    \    return sum;\n}", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your help but I am not allowed\
    \ to use any libraries. I should only use std.\n<|/ c |>\n<| c |>\nI updated my\
    \ answer to include a solution that does not use any libraries.\n<|/ c |>\n<|\
    \ c |>\nThank you so much! I appreciate it!\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\n`toUpper` doesn't exist in C++.\n<|/ c |>\n<| c |>\n`toUpper` was\
    \ added in C++11. http://en.cppreference.com/w/cpp/string/byte/toupper\n<|/ c\
    \ |>\n<| c |>\n`toUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/toupper\n\
    <|/ c |>\n<| c |>\n`toUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/toupper\n\
    <|/ c |>\n<| c |>\n`toUpper` was added in C++11. http://en.cppreference.com/w/cpp/string/byte/toupper\n\
    <|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cctype>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThis is not an answer\
    \ to the question. He wants to know how to convert a string to a number, not how\
    \ to sum up ASCII codes.\n<|/ c |>\n<| c |>\nI agree with you, my answer is not\
    \ an answer to his question, but a way to solve his problem in a more efficient\
    \ way. He can easily adapt it to his needs.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my answer is not an answer to his question, but a way to solve his problem in\
    \ a more efficient way. He can easily adapt it to his needs.\n<|/ c |>\n<| c |>\n\
    I agree with you, my answer is not an answer to his question, but a way to solve\
    \ his problem in a more efficient way. He can easily adapt it to his needs.\n\
    <|/ c |>\n<| c |>\nI agree with you, my answer is not an answer to his question,\
    \ but a way to solve his problem in a more efficient way. He can easily adapt\
    \ it to his needs.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any library\
    \ functions. I should only use standard library functions. I should also not use\
    \ any loops. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I should only use standard library functions.\
    \ I should only use standard library functions. I should only use standard library\
    \ functions. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I should only use standard library functions.\
    \ I should only use standard library functions. I should only use standard library\
    \ functions. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I should only use standard library functions.\
    \ I should only use standard library functions. I should only use standard library\
    \ functions. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I should only use standard library functions.\
    \ I should only use standard library functions. I should only use standard library\
    \ functions. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I should only use standard library functions.\
    \ I should only use standard library functions. I should only use standard library\
    \ functions. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I should only use standard library functions.\
    \ I should only use standard library functions. I should only use standard library\
    \ functions. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I should only use standard library functions.\
    \ I should only use standard library functions. I should only use standard library\
    \ functions. I should only use standard library functions. I should only use standard\
    \ library functions. I should only use standard library functions. I should only\
    \ use standard library functions. I ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question, which is about how\
    \ to do this in C++.\n<|/ c |>\n<| c |>\nI added a C++ solution\n<|/ c |>\n<|\
    \ c |>\nThe question was about how to do this in C++, not C#.\n<|/ c |>\n<| c\
    \ |>\nI added a C++ solution\n<|/ c |>\n<| c |>\nI added a C++ solution\n<|/ c\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isUpper(s[i]))\n        {\n            sum += toUpper(s[i]);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for your answer. I tried your solution and it works. But I still don't understand\
    \ why my code doesn't work. Could you please explain to me why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nYour code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. Your code doesn't work because you didn't implement\
    \ the algorithm correctly. ", "{\n    long sum = 0;\n    foreach(char c in s)\n\
    \    {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n`std::toUpper` doesn't\
    \ exist in C++.\n<|/ c |>\n<| c |>\n: It does in C++11 and later.\n<|/ c |>\n\
    <| c |>\n: It does in C++14 and later.\n<|/ c |>\n<| c |>\n: It does in C++17\
    \ and later.\n<|/ c |>\n<| c |>\n: It does in C++20 and later.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThis code does not compile.\
    \ `isUpper` does not exist in C++.\n<|/ c |>\n<| c |>\n`isUpper` is in C++11 and\
    \ later. `toUpper` is in C++98 and earlier.\n<|/ c |>\n<| c |>\nThe question was\
    \ tagged C++, not C. `isUpper` is in C++11 and later. `toUpper` is in C++98 and\
    \ earlier.\n<|/ c |>\n<| c |>\nThe question was tagged C++, not C. `isUpper` is\
    \ in C++11 and later. `toUpper` is in C++98 and earlier.\n<|/ c |>\n<| c |>\n\
    The question was tagged C++, not C. `isUpper` is in C++11 and later. `toUpper`\
    \ is in C++98 and earlier.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n \
    \           sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nI like your solution, but I believe that `std::accumulate`\
    \ would be more appropriate than `std::for_each`.\n<|/ c |>\n<| c |>\nI agree,\
    \ `std::accumulate` would be more appropriate in this case. `std::for_each` would\
    \ also work, but I find it more readable in this case. `std::for_each` also has\
    \ the advantage of being able to use lambdas in C++11.\n<|/ c |>\n<| c |>\nI agree\
    \ that `std::for_each` is more readable, but I find it less readable. `std::for_each`\
    \ also has the advantage of being able to use lambdas in C++11.\n<|/ c |>\n<|\
    \ c |>\nI agree that `std::for_each` is more readable, but I find it less readable.\
    \ `std::for_each` also has the advantage of being able to use lambdas in C++11.\n\
    <|/ c |>\n<| c |>\nI agree that `std::for_each` is more readable, but I find it\
    \ less readable. `std::for_each` also has the advantage of being able to use lambdas\
    \ in C++11.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        if(isUpper(c)) {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n\
    <| c |>\nThis doesn't work if you have a string like \"AaBbCcDdEeFfGgHhIjJkKlLmMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    \n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: I\
    \ see what you mean. Yes, it does work. Try it yourself.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Yes, it does work. Try it yourself.\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Yes, it does work. Try it yourself.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum +=\
    \ toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c\
    \ |>\nIt does work, try it yourself. It returns 153L. Are you sure you tried it\
    \ correctly?\n<|/ c |>\n<| c |>\nYes, I did. Try it yourself. It returns 153L.\
    \ Are you sure you tried it correctly?\n<|/ c |>\n<| c |>\nI did. Try it yourself.\
    \ It returns 153L. Are you sure you tried it correctly?\n<|/ c |>\n<| c |>\nI\
    \ did try it myself. It returns 153L. Are you sure you tried it correctly?\n<|/\
    \ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThe `isUpper` function doesn't exist in C++.\n<|/ c |>\n<| c |>\n\
    : I know, but I didn't want to assume that he was using C++.\n<|/ c |>\n<| c |>\n\
    : I added a solution that uses `isUpper`.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that uses `isUpper`.\n<|/ c |>\n<| c |>\n: I added a solution that uses `isUpper`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI guess you meant `toUpper`\
    \ instead of `toLower`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed\
    \ it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nlong digitSum(string s) \n{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| c |>\nThe `toupper` function isn't guaranteed\
    \ to return an ASCII code for the character in question, so this won't work if\
    \ you try to use it on characters that aren't in the ASCII character set.\n<|/\
    \ c |>\n<| c |>\n: Yes, I know. I was just pointing out that `toupper` isn't guaranteed\
    \ to work. I'll edit my answer to include a note about that.\n<|/ c |>\n<| c |>\n\
    I added a note about that in my answer.\n<|/ c |>\n<| c |>\n: Thanks. I added\
    \ a note about that.\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum = 0;\n \
    \   foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't work. Try\
    \ `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that doesn't require any additional libraries.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require any additional libraries.\n\
    <|/ c |>\n<| c |>\n: I added a solution that doesn't require any additional libraries.\n\
    <|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThank you for your answer. I tried your code, but I got this error \"Error:\
    \ line 4: error: expected ';' after top level declarator\" on the line \"import\
    \ std.array;\"\n<|/ c |>\n<| c |>\nI added the import statement for you. Can you\
    \ try again?\n<|/ c |>\n<| c |>\nI added the import statement for you. Can you\
    \ try again?\n<|/ c |>\n<| c |>\nI added the import statement for you. Can you\
    \ try again?\n<|/ c |>\n<| c |>\nI added the import statement for you. Can you\
    \ try again?\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n  \
    \          sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work. Try `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it yourself. It returns 153L\n<|/ c |>\n<| c |>\nI did. `digitSum(\"\
    aAaaaXa\")` returns 153L\n<|/ c |>\n<| c |>\nI see. My mistake. Thanks for pointing\
    \ that out. I've updated my answer.\n<|/ c |>\n<| c |>\nI see your point. I've\
    \ updated my answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring s\
    \ = \"aAaaaXa\";", "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(s.codePointAt(i) > 64)\n        {\n            sum += s.codePointAt(i);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i\
    \ < s.length(); i++)\n    {\n        sum += std.math.max(s.codePointAt(i));\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii,arrays |>\n<|\
    \ c |>\nI like this solution, but I wonder if it can be done without using std.math\
    \ library.\n<|/ c |>\n<| c |>\nYes, it can be done without using std.math library.\
    \ I've edited my answer to include a solution that doesn't use std.math library.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(char.IsUpper(s[i]))\n        {\n            sum += char.GetNumericValue(s[i]);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c\
    \ |>\nYes, I forgot about that. Thanks for pointing it out. I've updated the answer.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try `digitSum(\"aAaaaXa\")`\n<|/ c |>\n\
    <| c |>\nYes, I forgot about that. Thanks for pointing it out. I've updated the\
    \ answer.\n<|/ c |>\n<| c |>\nThis doesn't work. Try `digitSum(\"aAaaaXa\")`\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring input = \"aAaaaXa\";", "{\n    long\
    \ sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        \
    \    sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\n`isUpper` isn't a standard function in C++.\n<|/ c |>\n<| c |>\n\
    : It is a standard function in C++11. http://en.cppreference.com/w/cpp/string/byte/isupper\n\
    <|/ c |>\n<| c |>\n: I didn't know that. Thanks for pointing that out.\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that uses `std::isupper` from C++11.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that uses `std::isupper` from C++11.\n<|/\
    \ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `toupper` returns a `char`, not\
    \ a `long`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed it.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum\
    \ += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks for your answer! I\
    \ appreciate it!\n<|/ c |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <cctype>", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n \
    \           sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,algorithm |>\n<| a tags=string,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I tried your solution and it works fine.\
    \ But the problem is that it takes too much time for larger inputs. I used a recursive\
    \ function and it is working fine for smaller inputs. But for larger inputs it\
    \ is taking too much time. Can you please help me to optimize this code?\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution to my answer. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I tried your solution and it works fine.\
    \ But the problem is that it takes too much time for larger inputs. I used a recursive\
    \ function and it is working fine for smaller inputs. But for larger inputs it\
    \ is taking too much time. Can you please help me to optimize this code?\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution to my answer. Hope it helps.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport\
    \ java.io.*;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n      \
    \  if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=string,c++,char |>\n<| a tags=string,c++,char |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it.\n\
    <|/ c |>\n<| c |>\n: I tested it before posting it. I also tested it after posting\
    \ it. I also tested it after posting it. I also tested it after posting it. I\
    \ also tested it after posting it. I also tested it after posting it. I also tested\
    \ it after posting it. I also tested it after posting it. I also tested it after\
    \ posting it. I also tested it after posting it. I also tested it after posting\
    \ it. I also tested it after posting it. I also tested it after posting it. I\
    \ also tested it after posting it. I also tested it after posting it. I also tested\
    \ it after posting it. I also tested it after posting it. I also tested it after\
    \ posting it. I also tested it after posting it. I also tested it after posting\
    \ it. I also tested it after posting it. I also tested it after posting it. I\
    \ also tested it after posting it. I also tested it after posting it. I also tested\
    \ it after posting it. I also tested it after posting it. I also tested it after\
    \ posting it. I also tested it after posting it. I also tested it after posting\
    \ it. I also tested it after posting it. I also tested it after posting it. I\
    \ also tested it after posting it. I also tested it after posting it. I also tested\
    \ it after posting it. I also tested it after posting it. I also tested it after\
    \ posting it. I also tested it after posting it. I also tested it after posting\
    \ it. I also tested it after posting it. I also tested it after posting it. I\
    \ also tested it after posting it. I also tested it after posting it. I also tested\
    \ it after posting it. I also tested it after posting it. I also tested it after\
    \ posting it. I also tested it after posting it. I also tested it after posting\
    \ it. I also tested it after posting it. I also tested it after posting it. I\
    \ also tested it ", "{\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(s[i] == 'A' || s[i] == 'a') sum += (long)'A';\n    \
    \    if(s[i] == 'B' || s[i] == 'b') sum += (long)'B';\n        if(s[i] == 'C'\
    \ || s[i] == 'c') sum += (long)'C';\n        if(s[i] == 'D' || s[i] == 'd') sum\
    \ += (long)'D';\n        if(s[i] == 'E' || s[i] == 'e') sum += (long)'E';\n  \
    \      if(s[i] == 'F' || s[i] == 'f') sum += (long)'F';\n        if(s[i] == 'G'\
    \ || s[i] == 'g') sum += (long)'G';\n        if(s[i] == 'H' || s[i] == 'h') sum\
    \ += (long)'H';\n        if(s[i] == 'I' || s[i] == 'i') sum += (long)'I';\n  \
    \      if(s[i] == 'J' || s[i] == 'j') sum += (long)'J';\n        if(s[i] == 'K'\
    \ || s[i] == 'k') sum += (long)'K';\n        if(s[i] == 'L' || s[i] == 'l') sum\
    \ += (long)'L';\n        if(s[i] == 'M' || s[i] == 'm') sum += (long)'M';\n  \
    \      if(s[i] == 'N' || s[i] == 'n') sum += (long)'N';\n        if(s[i] == 'O'\
    \ || s[i] == 'o') sum += (long)'O';\n        if(s[i] == 'P' || s[i] == 'p') sum\
    \ += (long)'P';\n        if(s[i] == 'Q' || s[i] == 'q') sum += (long)'Q';\n  \
    \      if(s[i] == 'R' || s[i] == 'r') sum += (long)'R';\n        if(s[i] == 'S'\
    \ || s[i] == 's') sum += (long)'S';\n        if(s[i] == 'T' || s[i] == 't') sum\
    \ += (long)'T';\n        if(s[i] == 'U' || s[i] == 'u') sum += (long)'U';\n  \
    \      if(s[i] == 'V' || s[i] == 'v') sum += (long)'V';\n        if(s[i] == 'W'\
    \ || s[i] == 'w') sum += (long)'W';\n        if(s[i] == 'X' || s[i] == 'x') sum\
    \ += (long)'X';\n        if(s[i] == 'Y' || s[i] == 'y') sum += (long)'Y';\n  \
    \      if(s[i] == 'Z' || s[i] == 'z') sum += (long)'Z';\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 10);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThis doesn't\
    \ answer the question at all. OP wants to know how to convert a string to ASCII\
    \ codes.\n<|/ c |>\n<| c |>\nI added a solution that does that\n<|/ c |>\n<| c\
    \ |>\nThis doesn't answer the question at all. OP wants to know how to convert\
    \ a string to ASCII codes.\n<|/ c |>\n<| c |>\nI added a solution that does that\n\
    <|/ c |>\n<| c |>\nI added a solution that does that\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n       \
    \ sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,ascii |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\n\
    Thanks so much! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii,uppercase |>\n<| c |>\nThank you for taking\
    \ the time to write this answer. I'm going to try this out and see how it works.\
    \ I appreciate it.\n<|/ c |>\n<| c |>\nI tested this and it worked perfectly.\
    \ Thank you so much!\n<|/ c |>\n<| c |>\nI added a more efficient version that\
    \ uses `std::accumulate` instead of `std::for_each`.\n<|/ c |>\n<| c |>\nI tested\
    \ this and it worked perfectly. Thank you so much!\n<|/ c |>\n<| a tags=string,c++,ascii,uppercase\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A') - 1;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but I already know how\
    \ to use foreach loops and I already know how to use if statements. I asked for\
    \ help on how to do it with foreach loops.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ efforts, but I already know how to use foreach loops and I already know how\
    \ to use if statements. I asked for help on how to do it with foreach loops.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but I already know how to use foreach\
    \ loops and I already know how to use if statements. I asked for help on how to\
    \ do it with foreach loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but\
    \ I already know how to use foreach loops and I already know how to use if statements.\
    \ I asked for help on how to do it with foreach loops.\n<|/ c |>\n<| c |>\nI appreciate\
    \ your efforts, but I already know how to use foreach loops and I already know\
    \ how to use if statements. I asked for help on how to do it with foreach loops.\n\
    <|/ c |>\n<| a tags=c++,foreach,if-statement |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s) {\n        if(isUpper(c)) sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'A' && c\
    \ <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,arrays |>\n<| c |>\nThank you so much! I really appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n        {\n            sum += toUpper(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c\
    \ |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153L` instead of `153L`.\n\
    <|/ c |>\n<| c |>\n: I fixed the bug, thanks for pointing it out. :)\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n \
    \       sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii\
    \ |>\n<| c |>\nThanks for your answer. I was trying to solve this problem using\
    \ recursion and I couldn't figure out how to do it. I will try your solution and\
    \ see if it works.\n<|/ c |>\n<| c |>\nI added a recursive solution to my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I was trying to solve this problem\
    \ using recursion and I couldn't figure out how to do it. I will try your solution\
    \ and see if it works.\n<|/ c |>\n<| c |>\nI added a recursive solution to my\
    \ answer.\n<|/ c |>\n<| c |>\nThanks for your answer. I was trying to solve this\
    \ problem using recursion and I couldn't figure out how to do it. I will try your\
    \ solution and see if it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isDigit(s.charAt(i))) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,sum,char\
    \ |>\n<| a tags=string,c#,sum,char |>\n<code>\npublic long digitSum(String s)\
    \ {\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n \
    \   foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,sum,char dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a tags=string,c#,sum,char\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,sum,char\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,sum,char\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c#,sum,char\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I am not allowed\
    \ to use any libraries. I only have to use std.string and std.math\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. I tried it and it worked. I am still trying to understand\
    \ how it works. I understand that foreach loops through each character in the\
    \ string and that isUpper checks if the character is an uppercase letter. I am\
    \ still confused on how toUpper works. I understand that toUpper converts a character\
    \ to an uppercase letter, but how does it know which character it is? I thought\
    \ it would be the character that was being looped through. Can you please explain\
    \ how it knows which character it is and how it converts it?\n<|/ c |>\n<| c |>\n\
    `foreach` loops through each character in the string and `isUpper` checks if the\
    \ character is an uppercase letter. `toUpper` converts a character to an uppercase\
    \ letter, but how does it know which character it is? I thought it would be the\
    \ character that was being looped through. Can you please explain how it knows\
    \ which character it is and how it converts it?\n<|/ c |>\n<| c |>\n`foreach`\
    \ loops through each character in the string and `isUpper` checks if the character\
    \ is an uppercase letter. `toUpper` converts a character to an uppercase letter,\
    \ but how does it know which character it is? I thought it would be the character\
    \ that was being looped through. Can you please explain how it knows which character\
    \ it is and how it converts it?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring digitSum(string\
    \ s)\n{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThank you for your answer. I am not allowed to use any libraries.\
    \ I only have to use std.string and std.math\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any libraries.\n<|/ c |>\n<| a ", "{\n    long sum = 0;\n \
    \   foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\nThis code doesn't\
    \ work. `digitSum(\"aAaaaXa\")` returns `153L` instead of `153`.\n<|/ c |>\n<|\
    \ c |>\nIt works fine for me. Are you sure you copied it correctly?\n<|/ c |>\n\
    <| c |>\nYes, I copied it correctly. I'm running it on ideone.com.\n<|/ c |>\n\
    <| c |>\nI tested it on ideone.com. Works fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on ideone.com. Works fine.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\n`std::toupper`\
    \ doesn't exist in C++.\n<|/ c |>\n<| c |>\nI know, but I thought it would be\
    \ easier to understand than a switch statement. I'll edit my answer.\n<|/ c |>\n\
    <| c |>\n`std::toupper` exists in C++11 and later.\n<|/ c |>\n<| c |>\nI know,\
    \ but I thought it would be easier to understand than a switch statement. I'll\
    \ edit my answer.\n<|/ c |>\n<| c |>\n`std::toupper` exists in C++11 and later.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char c in\
    \ s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n            sum += (c\
    \ - 'A');\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii,uppercase |>\n<|\
    \ c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nIt does.\
    \ I tested it before posting it.\n<|/ c |>\n<| c |>\nI tested it on ideone and\
    \ it doesn't work. http://ideone.com/4H3yq\n<|/ c |>\n<| c |>\nIt does work. http://ideone.com/4H3yq\n\
    <|/ c |>\n<| c |>\nIt does work. http://ideone.com/4H3yq\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain me why you used `toUpper` instead of `toLower`?\n<|/\
    \ c |>\n<| c |>\nBecause `toUpper` converts lowercase letters to uppercase letters.\
    \ `toLower` converts uppercase letters to lowercase letters.\n<|/ c |>\n<| c |>\n\
    I see. Thanks again!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}", "{\n    long sum = 0;\n    foreach(char c in s)\n  \
    \  {\n        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for taking the\
    \ time to write this up. I'm going to try this out and see how it goes. I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any external libraries.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long\
    \ sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=string,c#,sum |>\n<| c |>\nThanks\
    \ so much for taking the time to write this up. I'm going to try this out and\
    \ see how it goes. I appreciate it.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't use any external libraries.\n<|/ c |>\n<| a tags=string,c#,sum |>\n\
    <code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n \
    \           sum += Character.getNumericValue(s.charAt(i));\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for taking\
    \ the time to write this up. I'm going to try this out and see how it goes. I\
    \ appreciate it.\n<|/ c |>\n<| a tags=string,c#,sum |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(Character.isUpperCase(s.charAt(i))) {\n            sum += Character.getNumericValue(s.charAt(i));\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ so much for taking the time to write this up. I'm going to try this out and\
    \ see how it goes. I appreciate it.\n<|/ c |>\n<| a tags=string,c#,sum |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe that\
    \ `isUpper` will fail on non-ASCII characters. `toUpper` will work though.\n<|/\
    \ c |>\n<| c |>\nI believe that `isUpper` will fail on non-ASCII characters. `toUpper`\
    \ will work though.\n<|/ c |>\n<| c |>\n: I believe that `isUpper` will fail on\
    \ non-ASCII characters. `toUpper` will work though.\n<|/ c |>\n<| c |>\n: I believe\
    \ that `isUpper` will fail on non-ASCII characters. `toUpper` will work though.\n\
    <|/ c |>\n<| c |>\n: I believe that `isUpper` will fail on non-ASCII characters.\
    \ `toUpper` will work though.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>", "{\n    long sum =\
    \ 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThanks for your\
    \ answer. Your solution works perfectly but i was looking for a solution without\
    \ using any loops. I guess i have to learn more about algorithms :)\n<|/ c |>\n\
    <| c |>\n: I added a solution without loops.\n<|/ c |>\n<| c |>\nThanks again\
    \ for your answer. Your solution is very elegant and i will definitely use it\
    \ in my future projects. But i was looking for a solution without using any loops.\
    \ I guess i have to learn more about algorithms :)\n<|/ c |>\n<| c |>\n: I added\
    \ a solution without loops.\n<|/ c |>\n<| c |>\nThanks again for your answer.\
    \ Your solution is very elegant and i will definitely use it in my future projects.\
    \ But i was looking for a solution without using any loops. I guess i have to\
    \ learn more about algorithms :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>", "{\n    long sum = 0;\n\
    \    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    public static void main(String[] args) {\n    System.out.println(digitSum(\"aAaaaXa\"\
    ));\n}", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I was wondering if there is a way to do\
    \ this without using foreach and if statements.\n<|/ c |>\n<| c |>\nI added a\
    \ solution without foreach and if statements.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I was wondering if there is a way to do this without using foreach and\
    \ if statements.\n<|/ c |>\n<| c |>\nI added a solution without foreach and if\
    \ statements.\n<|/ c |>\n<| a tags=c++,string,ascii |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,algorithm\
    \ |>\n<| c |>\nThanks for the answer. I'm a beginner in C++, can you please explain\
    \ me the code you wrote? I mean the function you wrote, what does it do? and what\
    \ does it return?\n<|/ c |>\n<| c |>\nThe function you wrote is called a lambda\
    \ function. It is a function that is defined inside another function, but is called\
    \ without being defined inside that function. The lambda function takes one parameter\
    \ (the string `s`) and returns a `long` value. The `foreach` loop iterates over\
    \ each character in the string `s` and checks if the character is an uppercase\
    \ letter. If it is, then it adds the ASCII code of the character to the `sum`\
    \ variable. Finally, the function returns the `sum` variable.\n<|/ c |>\n<| c\
    \ |>\nI understand now. Thanks a lot!\n<|/ c |>\n<| c |>\n`isUpper` should be\
    \ `isupper`\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n            sum\
    \ += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n        {\n            sum += toUpper(c);\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any libraries. I should\
    \ use only std libraries.\n<|/ c |>\n<| c |>\nI added a solution without using\
    \ any libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works perfectly. Thanks again!\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n        {\n            sum\
    \ += (c - 'A' + 1);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your effort, but this doesn't answer the question.\
    \ Your solution doesn't use any built-in functions. Also, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution doesn't use any built-in functions. Finally, your solution doesn't\
    \ use any built-in functions. Finally, your solution doesn't use any built-in\
    \ functions. Finally, your solution doesn't use any built-in functions. Finally,\
    \ your solution ", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. The\
    \ OP wants to know how to use `foreach` without using it.\n<|/ c |>\n<| c |>\n\
    I guess I misunderstood the question. I'll leave this here anyway in case it helps\
    \ someone else who stumbles across this question.\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood the question. I'll leave this here anyway in case it helps someone\
    \ else who stumbles across this question.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string,char,arrays |>\n<|\
    \ c |>\nThanks for your help. I did try this but for some reason it didn't work.\
    \ I'm still getting a segmentation fault when I try to run it.\n<|/ c |>\n<| c\
    \ |>\nI added the code I used to test it and it worked fine. Can you post the\
    \ code you tried and what error you got?\n<|/ c |>\n<| c |>\nI added the code\
    \ I used to test it and it worked fine. Can you post the code you tried and what\
    \ error you got?\n<|/ c |>\n<| c |>\nI added the code I used to test it and it\
    \ worked fine. Can you post the code you tried and what error you got?\n<|/ c\
    \ |>\n<| c |>\nI added the code I used to test it and it worked fine. Can you\
    \ post the code you tried and what error you got?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n  \
    \  long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n  \
    \          sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThe `isUpper` function doesn't exist in C++.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. It's in the `<cctype>` header.\n<|/ c |>\n<| c |>\n: It does,\
    \ but it's not in `<string>`.\n<|/ c |>\n<| c |>\n: Yes, it does. It's in the\
    \ `<cctype>` header.\n<|/ c |>\n<| c |>\n: Yes, it does. It's in the `<cctype>`\
    \ header.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A'\
    \ + 10);\n        else\n            sum += c;\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, however it only works for uppercase\
    \ letters. I added a solution that works for lowercase letters as well.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if(Character.isUpperCase(c)) {\n            sum += c - 'A' + 10;\n  \
    \      } else {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=java,string,ascii |>\n<| a dscore=1 |>\n<code>\npublic long\
    \ digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if(Character.isUpperCase(c))\
    \ {\n            sum += c - 'A' + 10;\n        } else {\n            sum += c;\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii |>\n\
    <| a tags=java,string,ascii |>\n<code>\npublic long digitSum(String s) {\n   \
    \ long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if(Character.isUpperCase(c)) {\n            sum += c - 'A' + 10;\n  \
    \      } else {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ char c = s.charAt(i);\n        if(Character.isUpperCase(c)) {\n            sum\
    \ += c - 'A' + 10;\n        } else {\n            sum += c;\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=java,string,ascii |>\n<| a tags=java,string,ascii\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(Character.isUpperCase(c))\
    \ {\n            sum += c - 'A' + 10;\n        } else {\n            sum += c;\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for\
    \ your answer. I tried your solution and it works perfectly. However I do not\
    \ understand why my code does not work. Could you please explain to me why my\
    \ code does not work?\n<|/ c |>\n<| c |>\nThe `foreach` loop iterates over each\
    \ character in the string. `toupper` converts the character to upper case. `sum`\
    \ starts at 0, and each time `toupper` converts a character, it adds its ASCII\
    \ code to the current value of `sum`. So `sum` will always equal the sum of the\
    \ ASCII codes of the characters in the string.\n<|/ c |>\n<| c |>\nThank you for\
    \ your explanation. Now I understand why my code does not work. Thank you very\
    \ much!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        sum += toupper(s[i]);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=c++,string,ascii |>\n<| c |>\nThanks so much! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nNo problem! Glad to help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <cctype>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \        {\n            sum += toUpper(c);\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI guess you meant `isUpper` instead of `isLower`\n\
    <|/ c |>\n<| c |>\nYes, thank you, fixed\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        sum += Character.getNumericValue(s.charAt(i));\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=string,c++,java,algorithm |>\n<| a tags=string,c++,java,algorithm\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        sum += s.charAt(i) - '0';\n    }\n  \
    \  return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ sum += s.charAt(i) - '0';\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,java,algorithm\
    \ dscore=1 |>\n<| a tags=string,c++,java,algorithm |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ sum += s.charAt(i) - '0';\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,c++,java,algorithm |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ sum += s.charAt(i) - '0';\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++) {\n        sum += s.charAt(i)\
    \ - '0';\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,java,algorithm\
    \ |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++) {\n        sum += s.charAt(i)\
    \ - '0';\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,java,algorithm\
    \ |>\n<| a tags=string,c++,java,algorithm |>\n<code>\npublic long digitSum(String\
    \ s) {\n    long sum = 0;\n    for(int ", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks\
    \ for your answer! I actually tried this before and got stuck on how to get the\
    \ sum of all upper case letters. I guess I didn't think of using toUpper to convert\
    \ each letter to its ASCII value.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ uses `toUpper` to get the sum of the upper case letters.\n<|/ c |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153L` instead\
    \ of `153L`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What is\
    \ your input?\n<|/ c |>\n<| c |>\nI tested it on `digitSum(\"aAaaaXa\")` which\
    \ returns `153L`. What input are you using?\n<|/ c |>\n<| c |>\nI tested it on\
    \ `digitSum(\"aAaaaXa\")` which returns `153L`. What input are you using?\n<|/\
    \ c |>\n<| c |>\nI tested it on `digitSum(\"aAaaaXa\")` which returns `153L`.\
    \ What input are you using?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\n\
    import java.lang.*;\nimport java.io.*;", "{\n    long sum = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(isUpper(c))\n            sum += toUpper(c);\n   \
    \ }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n  \
    \      if(isUpper(c))\n        {\n            sum += toUpper(c);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| a tags=string,c++,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c >= 'a' && c\
    \ <= 'z')\n            sum += (c - 'a' + 1);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=string,c++,ascii |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153L` instead of `153L`.\n<|/ c |>\n<| c |>\nYes, I noticed that and\
    \ fixed it right after I posted it.  I didn't realize that he was trying to find\
    \ the sum of all uppercase letters.  I thought he was trying to find the sum of\
    \ all uppercase letters within a string.  I guess I misunderstood the question.\
    \  I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that finds the sum of all uppercase letters within a string.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153L` instead of `153L`.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that finds the sum\
    \ of all uppercase letters within a string.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code. Maybe you could add some explanation as to why\
    \ your code is better than the OP's?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Thanks for your feedback.\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ either, but I think it's because you didn't explain what was wrong with OP's\
    \ code. Maybe you could add some explanation as to why your code is better than\
    \ the OP's?\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Thanks\
    \ for your feedback.\n<|/ c |>\n<| c |>\nI didn't downvote either, but I think\
    \ it's because you didn't explain what was wrong with OP's code. Maybe you could\
    \ add some explanation as to why your code is better than the OP's?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to know how to do this in Haskell, not C++.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll leave this here\
    \ in case it helps someone else who comes across this question.\n<|/ c |>\n<|\
    \ a tags=c++,haskell,functional-programming |>\n<code>\nimport Data.Char\nimport\
    \ Data.List", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n       \
    \ if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n    return\
    \ sum;\n}", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            sum += (c - 'A' + 1);\n        }\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI appreciate your efforts,\
    \ but I believe that your solution does not solve the problem as stated in the\
    \ question. Your solution does not take into account the fact that `digitSum(\"\
    aAaaaXa\")` should return `153L`, not `131L`.\n<|/ c |>\n<| c |>\nI believe that\
    \ your solution does not take into account the fact that `digitSum(\"aAaaaXa\"\
    )` should return `153L`, not `131L`. Your solution does not take into account\
    \ the fact that `digitSum(\"aAaaaXa\")` should return `153L`, not `131L`. Your\
    \ solution does not take into account the fact that `digitSum(\"aAaaaXa\")` should\
    \ return `153L`, not `131L`. Your solution does not take into account the fact\
    \ that `digitSum(\"aAaaaXa\")` should return `153L`, not `131L`. Your solution\
    \ does not take into account the fact that `digitSum(\"aAaaaXa\")` should return\
    \ `153L`, not `131L`.\n<|/ c |>\n<| c |>\nI believe that your solution does not\
    \ take into account the fact that `digitSum(\"aAaaaXa\")` should return `153L`,\
    \ not `131L`. Your solution does not take into account the fact that `digitSum(\"\
    aAaaaXa\")` should return `153L`, not `131L`. Your solution does not take into\
    \ account the fact that `digitSum(\"aAaaaXa\")` should return `153L`, not `131L`.\
    \ Your solution does not take into account the fact that `digitSum(\"aAaaaXa\"\
    )` should return `153L`, not `131L`. Your solution does not take into account\
    \ the fact that `digitSum(\"aAaaaXa\")` should return `153L`, not `131L`.\n<|/\
    \ c |>\n<| c |>\nI believe that your solution does not take into account the fact\
    \ that `digitSum(\"aAaaaXa\")` should return `153", "{\n    long sum = 0;\n  \
    \  foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n          \
    \  sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI appreciate your efforts, but I already know how to use `foreach`.\
    \ My question is how to do it without it.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without `foreach`. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your efforts,\
    \ but I already know how to use `foreach`. My question is how to do it without\
    \ it.\n<|/ c |>\n<| c |>\nI added a solution without `foreach`. Hope it helps.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long sum = 0;\n    foreach(char c\
    \ in s)\n    {\n        if(c >= 'a' && c <= 'z')\n            sum += (c - 'a'\
    \ + 1);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work.\
    \ `digitSum(\"aAaaaXa\")` returns `153L` instead of `153L`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added a test case to my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c\
    \ >= 'a' && c <= 'z') {\n            sum += (c - 'a' + 1);\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\nThis\
    \ doesn't work. `digitSum(\"aAaaaXa\")` returns `153L` instead of `153L`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long\
    \ sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\
    \        if (c >= 'a' && c <= 'z') {\n            sum += (c - 'a' + 1);\n    \
    \    }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n\
    <| a dscore=1 |>\n<code>\npublic long digitSum(String s) {\n    long sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n \
    \       if (c >= 'a' && c <= 'z') {\n            sum += (c - 'a' + 1);\n     \
    \   }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=c#", "{\n    long sum =\
    \ 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this answer is\
    \ not correct. `toupper` converts the character to its uppercase ASCII value,\
    \ not the character itself. So `toupper('a')` returns `97` not `65`.\n<|/ c |>\n\
    <| c |>\nThe question asks for the sum of the upper characters only, so `toupper`\
    \ does exactly that. `toupper` converts the character to its uppercase ASCII value,\
    \ not the character itself. So `toupper('a')` returns `97` not `65`.\n<|/ c |>\n\
    <| c |>\nI believe you are mistaken. `toupper` converts the character to its uppercase\
    \ ASCII value, not the character itself. So `toupper('a')` returns `97` not `65`.\n\
    <|/ c |>\n<| c |>\nI believe you are mistaken. `toupper` converts the character\
    \ to its uppercase ASCII value, not the character itself. So `toupper('a')` returns\
    \ `97` not `65`.\n<|/ c |>\n<| c |>\nI believe you are mistaken. `toupper` converts\
    \ the character to its uppercase ASCII value, not the character itself. So `toupper('a')`\
    \ returns `97` not `65`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    foreach(char c in s)\n    {\n        sum += toupper(c);\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\n\
    Thanks for the help! I really appreciate it!\n<|/ c |>\n<| a tags=string,c++,arrays\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii\
    \ |>\n<| c |>\nThis answer doesn't explain why you think it works.\n<|/ c |>\n\
    <| c |>\nI added some explanation to the answer\n<|/ c |>\n<| c |>\nI added some\
    \ explanation to the answer\n<|/ c |>\n<| c |>\nThe OP asked for \"the sum of\
    \ the upper characters only\", not \"the sum of the ASCII codes\". Your code doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n\
    <| a tags=string,c++,ascii |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c ==\
    \ 'A' || c == 'a') sum += 26 - 'A';\n        else sum += c - '0';\n    }\n   \
    \ return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii |>\n<| c |>\nThe OP wants\
    \ to count the digits, not sum them.\n<|/ c |>\n<| c |>\nYes, I know. My solution\
    \ was to show that he can count the digits by subtracting the ASCII codes.\n<|/\
    \ c |>\n<| c |>\nThe OP wants to count the digits, not sum them.\n<|/ c |>\n<|\
    \ c |>\nYes, I know. My solution was to show that he can count the digits by subtracting\
    \ the ASCII codes.\n<|/ c |>\n<| c |>\nI guess you meant `if(c == 'A' || c ==\
    \ 'a')` instead of `if(c == 'A' || c == 'a')`\n<|/ c |>\n<| a tags=c++,string,ascii\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,char,ascii |>\n<| c\
    \ |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n\
    \        if(c >= 'A' && c <= 'Z')\n            sum += (c - 'A' + 1);\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=c++,string,ascii,char |>\n<| c |>\nThis\
    \ code does not work if there are more than 26 uppercase letters in the string.\
    \ For example, `digitSum(\"aAaaaXa\")` returns `153L` instead of `153L`. See [my\
    \ answer](https://stackoverflow.com/a/52479859/912144) for the correct solution.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\n#include <cctype>", "{\n    long sum = 0;\n    for(int i = 0; i\
    \ < s.length(); i++)\n    {\n        char c = s[i];\n        if(c == 'A' || c\
    \ == 'a')\n            sum += 26L;\n        else if(c == 'B' || c == 'b')\n  \
    \          sum += 27L;\n        else if(c == 'C' || c == 'c')\n            sum\
    \ += 28L;\n        else if(c == 'D' || c == 'd')\n            sum += 29L;\n  \
    \      else if(c == 'E' || c == 'e')\n            sum += 30L;\n        else if(c\
    \ == 'F' || c == 'f')\n            sum += 31L;\n        else if(c == 'G' || c\
    \ == 'g')\n            sum += 32L;\n        else if(c == 'H' || c == 'h')\n  \
    \          sum += 33L;\n        else if(c == 'I' || c == 'i')\n            sum\
    \ += 34L;\n        else if(c == 'J' || c == 'j')\n            sum += 35L;\n  \
    \      else if(c == 'K' || c == 'k')\n            sum += 36L;\n        else if(c\
    \ == 'L' || c == 'l')\n            sum += 37L;\n        else if(c == 'M' || c\
    \ == 'm')\n            sum += 38L;\n        else if(c == 'N' || c == 'n')\n  \
    \          sum += 39L;\n        else if(c == 'O' || c == 'o')\n            sum\
    \ += 40L;\n        else if(c == 'P' || c == 'p')\n            sum += 41L;\n  \
    \      else if(c == 'Q' || c == 'q')\n            sum += 42L;\n        else if(c\
    \ == 'R' || c == 'r')\n            sum += 43L;\n        else if(c == 'S' || c\
    \ == 's')\n            sum += 44L;\n        else if(c == 'T' || c == 't')\n  \
    \          sum += 45L;\n        else if(c == 'U' || c == 'u')\n            sum\
    \ += 46L;\n        else if(c == 'V' || c == 'v')\n            sum += 47L;\n  \
    \      else if(c == 'W' || c == 'w')\n            sum += 48L;\n        else if(c\
    \ == 'X' || c == 'x')\n            sum += 49L;\n        else if(c == 'Y' || c\
    \ == 'y')\n            sum += 50L;\n        else if(c == 'Z' || c == 'z')\n  \
    \          sum += 51L;\n        else if(c == 'a' || c == 'A')\n            sum\
    \ += 52L;\n        else if(c == 'b' || c == 'B')\n            sum += 53L;\n  \
    \      else if(c == 'c' || c == 'C')\n            sum += 54L;\n        else if(c\
    \ == 'd' || c == 'D", "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n\
    \        if(isUpper(c))\n            sum += toUpper(c);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThanks for your answer. I'm\
    \ a beginner at C++ and I didn't know about this function. I will definitely look\
    \ into it more thoroughly in the future. Thanks again!\n<|/ c |>\n<| c |>\nNo\
    \ problem. I'm glad you found it helpful. Good luck with your coding!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <cctype>",
  "{\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s.codePointAt(i)\
    \ > 64)\n        {\n            sum += s.codePointAt(i);\n        }\n    }\n \
    \   return sum;\n}\n</code>\n<|/ a tags=string,c++,ascii |>\n<| c |>\nThis doesn't\
    \ work if you have a string with non-ASCII characters. For example, `digitSum(\"\
    aAaaaXa\")` returns `153L`, but should be `163L`.\n<|/ c |>\n<| c |>\nYes, I know.\
    \ That's why I wrote \"ASCII codes\". ASCII codes don't include non-ASCII characters.\
    \ I assumed that OP was only interested in ASCII characters. I edited my answer\
    \ to include a solution for non-ASCII characters.\n<|/ c |>\n<| c |>\nI see your\
    \ point, but I still think it's better to include a solution for non-ASCII characters,\
    \ since that would make it more useful to future readers.\n<|/ c |>\n<| c |>\n\
    I agree. I edited my answer to include a solution for non-ASCII characters.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a string with non-ASCII characters.\
    \ For example, `digitSum(\"aAaaaXa\")` returns `153L`, but should be `163L`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <cctype>\nusing namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i\
    \ < s.length(); i++)\n    {\n        if(s.at(i) >= 'a' && s.at(i) <= 'z')\n  \
    \      {\n            sum += s.at(i) - 'a' + 10;\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does not compile. `string\
    \ s` should be `string s`. Also `s.at(i)` should be `s[i]`. Also `s.at(i) - 'a'`\
    \ should be `s[i]-'a'`. Also `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also\
    \ `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should\
    \ be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also\
    \ `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should\
    \ be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also\
    \ `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should\
    \ be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also\
    \ `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should\
    \ be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also\
    \ `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should\
    \ be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also\
    \ `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should\
    \ be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also\
    \ `s.at(i) - 'a' + 10` should be `s[i]-'a' + 10`. Also `s.at(i) - 'a' + 10` should\
    \ be `s[i]-'a' + 10`. Also `s.at(i", "{\n    long sum = 0;\n    foreach(char c\
    \ in s) {\n        sum += toupper(c);\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThe question was about C#, not C++.\n<|/ c |>\n<| c\
    \ |>\nI didn't realize that C# was the only language tagged on this question.\
    \ I've edited my answer to include a C# solution. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThe question was about C#, not C++.\n<|/ c |>\n<| a tags=c#,string,algorithm\
    \ |>\n<code>\nstring input = \"hello\";\nstring output = \"\";\nfor (int i = 0;\
    \ i < input.Length; i++)\n{\n    if (char.IsUpper(input[i]))\n    {\n        output\
    \ += input[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was\
    \ about C#, not C++.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring input = \"hello\"\
    ;\nstring output = \"\";\nfor (int i = 0; i < input.Length; i++)\n{\n    if (char.IsUpper(input[i]))\n\
    \    {\n        output += input[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ |>\n<| c |>\nThe question was about C#, not C++.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nstring input = \"hello\";\nstring output = \"\";\nfor (int i = 0; i <\
    \ input.Length; i++)\n{\n    if (char.IsUpper(input[i]))\n    {\n        output\
    \ += input[i];\n    }\n}\n</code>\n<|/ a tags=c#,string,algorithm |>\n<| c |>\n\
    The question was about C#, not C++.\n<|/ c |>\n<| a tags=c#,string,algorithm |>\n\
    <code>\nstring input = \"hello\";\nstring output = \"\";\nfor (int i = 0; i <\
    \ input.Length; i++)\n{\n    if (char.IsUpper(input[i]))\n    {\n        output\
    \ += input[i];\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nstring\
    \ input = \"hello\";\nstring output = \"\";\nfor (int i = 0; i < input.Length;\
    \ i++)\n{\n    if (char.IsUpper(input[i]))\n    {\n        output += input[i];\n\
    \    }\n}\n</code>\n<|/ a tags=c#,string,algorithm dscore=0 |>\n<| c |>\nThe question\
    \ was about C#, not C++.\n<|/ c |>\n<| a tags=c#,", "{\n    long sum = 0;\n  \
    \  foreach(char c in s)\n    {\n        if(isUpper(c))\n        {\n          \
    \  sum += toUpper(c);\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for this. I understand it better now. I'm still\
    \ trying to learn the language and I'm still struggling with some things. I appreciate\
    \ your help.\n<|/ c |>\n<| c |>\nNo problem. I'm glad I could help. I hope you\
    \ enjoy learning more about functional programming. It's a very powerful tool.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic long digitSum(String s) {\n    long\
    \ sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a tags=java,string |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/\
    \ c |>\n<| a tags=java,string |>\n<code>\npublic long digitSum(String s) {\n \
    \   long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(Character.isUpperCase(s.charAt(i)))\
    \ {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n \
    \   }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    public long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n            sum +=\
    \ Character.getNumericValue(s.charAt(i));\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,string |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ long digitSum(String s) {\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(Character.isUpperCase(s.charAt(i))) {\n            sum +=\
    \ Character.getNumericValue(s.charAt(i));\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=java,string dscore=0 |>\n<| a tags=java,string |>\n<code>\n",
  "{\n    long sum = 0;\n    foreach(char c in s)\n    {\n        if(isUpper(c))\n\
    \            sum += toUpper(c);\n    }\n    return sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like your solution, however I do not understand how it works. Can you\
    \ please explain how it works?\n<|/ c |>\n<| c |>\nI added some comments to the\
    \ code. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring s = \"hello\"\
    ;", "{\n    long sum = 0;\n    foreach(char c in s) {\n        sum += toupper(c);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\n\
    `std::accumulate` would be a better choice than a manual loop.\n<|/ c |>\n<| c\
    \ |>\nI agree, `std::accumulate` would be a better choice. I'll update my answer.\n\
    <|/ c |>\n<| c |>\nI agree with you, `std::accumulate` is more elegant and more\
    \ efficient.\n<|/ c |>\n<| c |>\nI agree, `std::accumulate` is more elegant and\
    \ more efficient.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z')\n        {\n            sum += s.charAt(i) - 'A' + 1;\n\
    \        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for the answer. Can you please explain me how this works?\n<|/ c |>\n<| c |>\n\
    I added some comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for the explanation. Can you please tell me why you used `long` instead of `int`?\n\
    <|/ c |>\n<| c |>\nBecause the ASCII codes for letters are between 65 and 90 (inclusive).\
    \ So the maximum value you can store in a long is 90.\n<|/ c |>\n<| c |>\nThanks.\
    \ Can you please tell me why you used `long` instead of `int`?\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    import java.util.Scanner;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
