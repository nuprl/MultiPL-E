name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative\
  \ or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2L,\
  \ 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n    >>> largest_smallest_integers([])\n\
  \    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n    tuple(None,\
  \ None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n   \
    \ foreach(i : lst, \n        \n        foreach(j : lst, \n            \n     \
    \       if(j > i) \n            {\n                result := Tuple!(Nullable!(long),\
    \ Nullable!(long));\n                result := Tuple!(result.0, result.1);\n \
    \               result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool neg = false;\n    long max = 0;\n    long min = 0;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            neg = true;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n        if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    if (neg) {\n        result.a\
    \ = Nullable!(long);\n        result.b = Nullable!(long);\n    } else {\n    \
    \    result.a = Nullable!(long);\n        result.b = Nullable!(long);\n      \
    \  result.a.value = max;\n        result.b.value = min;\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largest = Long.min;\n  \
    \  long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            foundNegative = true;\n        } else if (i >= 0) {\n           \
    \ foundPositive = true;\n        }\n        if (foundNegative && foundPositive)\
    \ {\n            break;\n        }\n        if (foundNegative) {\n           \
    \ largest = i;\n        } else if (foundPositive) {\n            smallest = i;\n\
    \        }\n    }\n    if (foundNegative && foundPositive) {\n        result =\
    \ Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = largest;\n   \
    \     result.1 = smallest;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = null;\n        result.1 = null;\n    }\n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool neg = false;\n    long max = 0;\n    long min = 0;\n    for (long i\
    \ : lst)\n    {\n        if (i < 0)\n        {\n            neg = true;\n    \
    \    }\n        if (i > 0)\n        {\n            if (neg)\n            {\n \
    \               if (max < 0)\n                {\n                    max = i;\n\
    \                }\n                else\n                {\n                \
    \    min = i;\n                }\n            }\n            else\n          \
    \  {\n                if (max < 0)\n                {\n                    max\
    \ = i;\n                }\n                else\n                {\n         \
    \           min = i;\n                }\n            }\n        }\n    }\n   \
    \ if (neg)\n    {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(long);\n        result.b\
    \ = Nullable!(long);\n    }\n    if (max > 0)\n    {\n        result.a = max;\n\
    \    }\n    if (min < 0)\n    {\n        result.b = min;\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool positive\
    \ = true;\n    long largest = -(2L);\n    long smallest = (2L);\n    foreach (long\
    \ i in lst) {\n        if (i < 0) {\n            positive = false;\n        }\n\
    \        if (largest < i) {\n            largest = i;\n        }\n        if (smallest\
    \ > i) {\n            smallest = i;\n        }\n    }\n    if (positive && smallest\
    \ < largest) {\n        result.a = smallest;\n        result.b = largest;\n  \
    \  } else {\n        result.a = null;\n        result.b = null;\n    }\n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach (long i in lst) {\n        if (i < 0) {\n            result.a = i;\n\
    \        } else {\n            result.b = i;\n        }\n    }\n    \n    if (result.a\
    \ == null) {\n        result.a = result.b = None;\n    }\n    \n    return result;\n\
    }", "{\n    long a = null;\n    long b = null;\n    foreach(long x, lst)\n   \
    \ {\n        if (x < 0)\n        {\n            if (a < 0)\n                a\
    \ = x;\n        }\n        else\n        {\n            if (b < 0)\n         \
    \       b = x;\n        }\n    }\n    return Tuple!(a, b);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool has_negative = false;\n    bool has_positive\
    \ = false;\n    foreach (long x in lst) {\n        if (x < 0) {\n            has_negative\
    \ = true;\n        }\n        if (x > 0) {\n            has_positive = true;\n\
    \        }\n    }\n    if (has_negative && has_positive) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = Nullable!(long);\n        result.1 = Nullable!(long);\n\
    \    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n  \
    \      result.0 = Nullable!(long);\n        result.1 = Nullable!(long);\n    }\n\
    \    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    bool isNegative = false;\n    long max = 0;\n    long min\
    \ = 0;\n    \n    foreach(long x, lst)\n    {\n        if(x < 0)\n        {\n\
    \            isNegative = true;\n        }\n        \n        if(x > max)\n  \
    \      {\n            max = x;\n        }\n        \n        if(x < min)\n   \
    \     {\n            min = x;\n        }\n    }\n    \n    if(isNegative)\n  \
    \  {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(long);\n        result.b\
    \ = Nullable!(long);\n    }\n    \n    if(max > 0)\n    {\n        result.a.value\
    \ = max;\n    }\n    \n    if(min < 0)\n    {\n        result.b.value = min;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestPositive = 0;\n    long largestNegative = 0;\n    long smallestPositive\
    \ = 0;\n    long smallestNegative = 0;\n    foreach(long x in lst)\n    {\n  \
    \      if (x < 0)\n        {\n            foundNegative = true;\n            largestNegative\
    \ = x;\n        }\n        else\n        {\n            foundPositive = true;\n\
    \            largestPositive = x;\n        }\n    }\n    if (foundNegative &&\
    \ foundPositive)\n    {\n        if (largestPositive > largestNegative)\n    \
    \    {\n            result.Item1 = largestPositive;\n            result.Item2\
    \ = smallestPositive;\n        }\n        else\n        {\n            result.Item1\
    \ = largestNegative;\n            result.Item2 = smallestNegative;\n        }\n\
    \    }\n    else if (foundNegative)\n    {\n        result.Item1 = largestNegative;\n\
    \        result.Item2 = None;\n    }\n    else if (foundPositive)\n    {\n   \
    \     result.Item1 = largestPositive;\n        result.Item2 = None;\n    }\n \
    \   else\n    {\n        result.Item1 = None;\n        result.Item2 = None;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,c++,c++-cli,.net,c# |>\n\
    <| c |>\nI like your solution, however it seems that it only works with arrays\
    \ of integers. I need a solution that works with arrays of any type.\n<|/ c |>\n\
    <| c |>\n: I added a solution that works for any type.\n<|/ c |>\n<| c |>\n: I\
    \ added a solution that works for any type.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works for any type.\n<|/ c |>\n<| c |>\n: I added a solution that works\
    \ for any type.\n<|/ c |>\n<| a tags=c#,c++,c++-cli,.net,c# |>\nI believe this\
    \ should work:\n<code>\npublic static Tuple<Nullable<long>, Nullable<long>> GetLargestAndSmallestIntegers(long[]\
    \ array)\n{\n    Nullable<long> largest = null;\n    Nullable<long> smallest =\
    \ null;", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n   \
    \ foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) t = \n \
    \           Tuple!(Nullable!(long), Nullable!(long)) (\n                if(i<0L)\
    \ None else Some(i),\n                if(i>0L) None else Some(i)\n           \
    \ )\n    )\n    \n    foreach(t : result, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n             \
    \   if((t.f0.isSome) && (t.f1.isSome)) \n                    Some((t.f0.get().max(),\
    \ t.f1.get().min()))\n                else None\n            )\n    )\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           {\n               if (i < 0) \n     \
    \              result = Tuple!(Nullable!(long), Nullable!(long));\n          \
    \     else\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largestPositive = 0;\n    long largestNegative = 0;\n   \
    \ long smallestPositive = 0;\n    long smallestNegative = 0;\n    for (long i\
    \ : lst)\n    {\n        if (i < 0)\n        {\n            foundNegative = true;\n\
    \            largestNegative = i;\n        }\n        else if (i > 0)\n      \
    \  {\n            foundPositive = true;\n            largestPositive = i;\n  \
    \      }\n    }\n    if (foundNegative && foundPositive)\n    {\n        if (largestNegative\
    \ > largestPositive)\n        {\n            result.a = largestNegative;\n   \
    \         result.b = largestPositive;\n        }\n        else\n        {\n  \
    \          result.a = largestPositive;\n            result.b = largestNegative;\n\
    \        }\n    }\n    else if (foundNegative)\n    {\n        result.a = largestNegative;\n\
    \        result.b = None;\n    }\n    else if (foundPositive)\n    {\n       \
    \ result.a = largestPositive;\n        result.b = None;\n    }\n    else\n   \
    \ {\n        result.a = None;\n        result.b = None;\n    }\n    return result;\n\
    }\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           {\n               if (i < 0L) \n                   {\n \
    \                      result = Tuple!(Nullable!(long), Nullable!(long));\n  \
    \                     break;\n                   }\n               else\n    \
    \               {\n                       result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                       break;\n                   }\n           });\n    \n \
    \   return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst) {\n        if (i < 0) {\n            result.a = i;\n\
    \        } else if (i > 0){\n            result.b = i;\n        } else {\n   \
    \         result.a = null;\n            result.b = null;\n        }\n    }\n \
    \   \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = 0;\n    long smallest\
    \ = 0;\n    foreach(long i in lst)\n    {\n        if (i < 0)\n        {\n   \
    \         negative = true;\n        }\n        if (i > largest)\n        {\n \
    \           largest = i;\n        }\n        if (i < smallest)\n        {\n  \
    \          smallest = i;\n        }\n    }\n    if (negative == false)\n    {\n\
    \        result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long) largest,\
    \ Nullable!(long) smallest);\n    }\n    else\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) ", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = -(2L);\n\
    \    long smallest = (2L);\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           positive = false;\n        }\n        if (i > largest) {\n       \
    \     largest = i;\n        }\n        if (i < smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    if (positive && smallest > largest) {\n        smallest\
    \ = None;\n    }\n    if (!positive && smallest < largest) {\n        largest\
    \ = None;\n    }\n    result = Tuple!(Nullable!(long), Nullable!(long));\n   \
    \ result.0 = largest;\n    result.1 = smallest;\n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \    {\n        return result;\n    }\n    \n    long max;\n    long min;\n  \
    \  \n    foreach (long i in lst)\n    {\n        if (i < 0)\n        {\n     \
    \       max = i;\n        }\n        else\n        {\n            min = i;\n \
    \       }\n    }\n    \n    if (max == min)\n    {\n        return result;\n \
    \   }\n    \n    result.0 = max;\n    result.1 = min;\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst)\n    {\n        if (i < 0L)\n        {\n            result.a = Nullable!(long);\n\
    \            result.b = i;\n        }\n        else if (i > 0L)\n        {\n \
    \           result.a = i;\n            result.b = Nullable!(long);\n        }\n\
    \        else\n        {\n            result.a = Nullable!(long);\n          \
    \  result.b = Nullable!(long);\n        }\n    }\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n           if(i<0) result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \           else result = Tuple!(Nullable!(long), Nullable!(long));\n        \
    \   );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (long i; lst) {\n        if (i < 0) {\n         \
    \   result.a = i;\n        } else {\n            result.b = i;\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else {\n            result.b = x;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        \n        foreach(j : lst, \n\
    \            \n            if(i<j)\n            {\n                if(i>result.a)\n\
    \                {\n                    result.a = i;\n                }\n   \
    \             \n                if(j<result.b)\n                {\n          \
    \          result.b = j;\n                }\n            }\n            \n   \
    \         else\n            {\n                if(i>result.a)\n              \
    \  {\n                    result.a = i;\n                }\n                \n\
    \                if(j<result.b)\n                {\n                    result.b\
    \ = j;\n                }\n            }\n            \n        )\n    );\n  \
    \  \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long max = 0;\n    long min = 0;\n    foreach(long x, lst) {\n        if\
    \ (x < 0) {\n            foundNegative = true;\n            max = x;\n       \
    \ } else {\n            foundPositive = true;\n            min = x;\n        }\n\
    \    }\n    if (foundNegative && foundPositive) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.a = max;\n        result.b = min;\n    } else\
    \ if (foundNegative) {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.a = max;\n        result.b = null;\n    } else if (foundPositive)\
    \ {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a\
    \ = null;\n        result.b = min;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.a = null;\n        result.b = null;\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = Long.min;\n    long\
    \ smallest = Long.max;\n    foreach(long x, lst) {\n        if (x < 0) {\n   \
    \         negative = true;\n            largest = x;\n        } else {\n     \
    \       smallest = x;\n        }\n    }\n    if (negative == false) {\n      \
    \  result.a = Nullable!(largest);\n        result.b = Nullable!(smallest);\n \
    \   } else {\n        result.a = Nullable!(null);\n        result.b = Nullable!(null);\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i, e) in lst {\n        if (e < 0L) {\n        \
    \    result.a = e;\n            result.b = i;\n            break;\n        }\n\
    \    }\n    \n    if (result.a == 0L) {\n        result.a = null;\n        result.b\
    \ = null;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty())\n    {\n        result.first\
    \ = null;\n        result.second = null;\n    }\n    else\n    {\n        long\
    \ max = 0;\n        long min = 0;\n        \n        for (long i : lst)\n    \
    \    {\n            if (i < 0)\n            {\n                max = i;\n    \
    \        }\n            else\n            {\n                min = i;\n      \
    \      }\n        }\n        \n        result.first = max;\n        result.second\
    \ = min;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst)\n    {\n        if (i <\
    \ 0)\n        {\n            result.a = i;\n        }\n        else if (i > 0)\n\
    \        {\n            result.b = i;\n        }\n        else\n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           {\n               if (i < 0L)\
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n               else if (i\
    \ > 0L) result = Tuple!(Nullable!(long), Nullable!(long));\n               else\
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n           });\n    \n \
    \   return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool negative = false;\n    long largest = Long.min;\n    long smallest =\
    \ Long.max;\n    foreach(long i, lst)\n    {\n        if (i < 0)\n        {\n\
    \            negative = true;\n        }\n        if (i > 0)\n        {\n    \
    \        if (largest < i)\n            {\n                largest = i;\n     \
    \       }\n            if (smallest > i)\n            {\n                smallest\
    \ = i;\n            }\n        }\n    }\n    if (negative == false)\n    {\n \
    \       result.a = largest;\n        result.b = smallest;\n    }\n    else\n \
    \   {\n        result.a = null;\n        result.b = null;\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(x\
    \ :: lst)\n    {\n        if (x < 0)\n        {\n            result.a = x;\n \
    \       }\n        else if (x > 0)\n        {\n            result.b = x;\n   \
    \     }\n        else\n        {\n            result.a = null;\n            result.b\
    \ = null;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, e) in lst {\n        if (e <\
    \ 0L) {\n            result.a = e;\n            result.b = e;\n        } else\
    \ {\n            result.a = e;\n            result.b = e;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    var largest = Nullable!(long);\n    var\
    \ smallest = Nullable!(long);\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var n = lst.Length;\n    while (i < n) {\n        if (lst[i] < 0) {\n   \
    \         if (largest == Nullable!(long)) {\n                largest = Nullable!(long);\n\
    \                smallest = Nullable!(long);\n                largest.Value =\
    \ 0;\n                smallest.Value = 0;\n            }\n            largest.Value\
    \ = largest.Value + lst[i];\n        }\n        else {\n            if (smallest\
    \ == Nullable!(long)) {\n                smallest = Nullable!(long);\n       \
    \         largest = Nullable!(long);\n                smallest.Value = 0;\n  \
    \              largest.Value = 0;\n            }\n            smallest.Value =\
    \ smallest.Value + lst[i];\n        }\n        i += 1;\n    }\n    if (smallest\
    \ == Nullable!(long)) {\n        smallest = Nullable!(long);\n        largest\
    \ = Nullable!(long);\n        smallest.Value = 0;\n        largest.Value = 0;\n\
    \    }\n    return Tuple!(largest, smallest);\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(x :: lst) {\n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = Tuple!(Nullable!(long), Nullable!(long));\n       \
    \ \n        if (x < 0) {\n            tuple.a = null;\n            tuple.b = x;\n\
    \        } else {\n            tuple.a = x;\n            tuple.b = null;\n   \
    \     }\n        \n        result = Tuple!(Nullable!(long), Nullable!(long));\
    \ \n        result = tuple;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    bool negative = true;\n\
    \    long largest = -100L;\n    long smallest = 100L;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            negative = false;\n        } else if (i\
    \ > 0) {\n            positive = false;\n        }\n        if (positive && negative\
    \ && largest < i) {\n            largest = i;\n        } else if (positive &&\
    \ largest < i) {\n            largest = i;\n        } else if (negative && smallest\
    \ > i) {\n            smallest = i;\n        } else if (negative && smallest >\
    \ i) {\n            smallest = i;\n        }\n    }\n    if (positive && negative\
    \ && largest < smallest) {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.a = largest;\n        result.b = smallest;\n    } else {\n   \
    \     result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = null;\n\
    \        result.b = null;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n    \n    foreach(j :\
    \ lst, \n    \n    foreach(k :lst, \n    \n    foreach(l : lst, \n    \n    foreach(m\
    \ : lst, \n    \n    foreach(n : lst, \n    \n    foreach(o : lst, \n    \n  \
    \  foreach(p : lst, \n    \n    foreach(q : lst, \n    \n    foreach(r : lst,\
    \ \n    \n    foreach(s : lst, \n    \n    foreach(t : lst, \n    \n    foreach(u\
    \ : lst, \n    \n    foreach(v : lst, \n    \n    foreach(w : lst, \n    \n  \
    \  foreach(x : lst, \n    \n    foreach(y : lst, \n    \n    foreach(z : lst,\
    \ \n    \n    foreach(a : lst, \n    \n    foreach(b : lst, \n    \n    foreach(c\
    \ : lst, \n    \n    foreach(d : lst, \n    \n    foreach(e : lst, \n    \n  \
    \  foreach(f : lst, \n    \n    foreach(g : lst, \n    \n    foreach(h : lst,\
    \ \n    \n    foreach(i : lst, \n    \n    foreach(j : lst, \n    \n    foreach(k\
    \ : lst, \n    \n    foreach(l : lst, \n    \n    foreach(m : lst, \n    \n  \
    \  foreach(n : lst, \n    \n    foreach(o : lst, \n    \n    foreach(p : lst,\
    \ \n    \n    foreach(q : lst, \n    \n    foreach(r : lst, \n    \n    foreach(s\
    \ : lst, \n    \n    foreach(t : lst, \n    \n    foreach(u : lst, \n    \n  \
    \  foreach(v : lst, \n    \n    foreach(w : lst, \n    \n    foreach(x : lst,\
    \ \n    \n    foreach(y : lst, \n    \n    foreach(z : lst, \n    \n    foreach(a\
    \ : lst, \n    \n    foreach(b : lst, \n    \n    foreach(c : lst, \n    \n  \
    \  foreach(d : lst, \n    \n    foreach(e : lst, \n    \n    foreach(f : lst,\
    \ \n    \n    foreach(g : lst, \n    \n    foreach(h : l", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        \n        foreach(j\
    \ : lst, \n            \n            if(i<j)\n            {\n                if(i>result.0)\n\
    \                {\n                    result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                }\n                else\n                {\n                \
    \    result = Tuple!(Nullable!(long), Nullable!(long));\n                }\n \
    \           }\n            else\n            {\n                if(i<result.0)\n\
    \                {\n                    result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                }\n                else\n                {\n                \
    \    result = Tuple!(Nullable!(long), Nullable!(long));\n                }\n \
    \           }\n        )\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, e) in lst {\n        if (e <\
    \ 0L) {\n            result.a = e;\n        } else {\n            result.b = e;\n\
    \        }\n    }\n    \n    if (result.a == result.b) {\n        result.a = result.a\
    \ as Nullable!(long);\n        result.b = result.b as Nullable!(long);\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(x :: lst) {\n        if ((x < 0L) || (x > 0L)) {\n\
    \            result.a = x;\n            result.b = x;\n        } else {\n    \
    \        result.a = null;\n            result.b = x;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    if (lst.is_empty())\n    {\n        return result;\n    }\n    \n \
    \   long max = 0;\n    long min = 0;\n    \n    for (long i : lst)\n    {\n  \
    \      if (i < 0)\n        {\n            max = i;\n        }\n        else if\
    \ (i > 0)\n        {\n            min = i;\n        }\n    }\n    \n    if (max\
    \ > min)\n    {\n        return result;\n    }\n    \n    result.a = max;\n  \
    \  result.b = min;\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, x) in zip(lst, lst[1..])\n \
    \       if (x < 0) then\n            result.0 = x;\n        else\n           \
    \ result.1 = x;\n            \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool negative = false;\n    long largest = -100L;\n\
    \    long smallest = 100L;\n    foreach(long i, lst)\n    {\n        if (i < 0)\n\
    \        {\n            negative = true;\n        }\n        if (i > largest)\n\
    \        {\n            largest = i;\n        }\n        if (i < smallest)\n \
    \       {\n            smallest = i;\n        }\n    }\n    if (negative == false)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(largest, smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long))(null,\
    \ null);\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i, e) in lst {\n        if (e < 0L) {\n        \
    \    result.a = e;\n            result.b = e;\n        } else {\n            result.a\
    \ = e;\n            result.b = e;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(x\
    \ :: lst) {\n        Tuple!(Nullable!(long), Nullable!(long)) tuple = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        \n        if (x < 0) {\n            tuple.a = null;\n\
    \            tuple.b = x;\n        } else {\n            tuple.a = x;\n      \
    \      tuple.b = null;\n        }\n        \n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)); \n        result = tuple;\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach\
    \ (i, x) in lst {\n        if x < 0 {\n            result.a = x;\n        } else\
    \ {\n            result.b = x;\n        }\n    }\n    \n    if result.a == result.b\
    \ {\n        result.a = null;\n        result.b = null;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    if (lst.is_empty())\n    {\n        return result;\n    }\n    \n    long\
    \ largest = std.math.max(lst);\n    long smallest = std.math.min(lst);\n    \n\
    \    if (largest < 0)\n    {\n        result.first = null;\n        result.second\
    \ = smallest;\n    }\n    else\n    {\n        result.first = largest;\n     \
    \   result.second = smallest;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        \n        //\
    \ If i is negative, set result to (None, None)\n        \n        if(i.signum\
    \ < 0)\n        {\n            result.a = result.b = null;\n        }\n      \
    \  \n        // If i is positive, set result to (i, None)\n        \n        else\n\
    \        {\n            result.a = i;\n            result.b = null;\n        }\n\
    \    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestNegative = 0;\n    long largestPositive = 0;\n    long smallestNegative\
    \ = 0;\n    long smallestPositive = 0;\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            foundNegative = true;\n            largestNegative = i;\n\
    \        } else if (i > 0){\n            foundPositive = true;\n            largestPositive\
    \ = i;\n        }\n    }\n    if (foundNegative && foundPositive) {\n        if\
    \ (largestNegative > largestPositive) {\n            smallestNegative = largestNegative;\n\
    \            smallestPositive = largestPositive;\n        } else {\n         \
    \   smallestNegative = largestPositive;\n            smallestPositive = largestNegative;\n\
    \        }\n        result = Tuple!(Nullable!(long), Nullable!(long)) (smallestNegative,\
    \ smallestPositive);\n    } else if (foundNegative) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (largestNegative, null);\n    } else if (foundPositive) {\n\
    \        result = Tuple!(Nullable!(long), Nullable!(long)) (null, smallestPositive);\n\
    \    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long)) (null,\
    \ null);\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i : lst) {\n        if (i < 0) {\n            result.a\
    \ = i;\n        } else {\n            result.b = i;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(long x, lst) {\n        if (x < 0) {\n            result.a\
    \ = x;\n        } else {\n            result.b = x;\n        }\n    }\n    \n\
    \    if (result.a == null) {\n        result.a = result.b = None;\n    }\n   \
    \ \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    if (lst.is_empty())\n    {\n        result.first = null;\n        result.second\
    \ = null;\n        return result;\n    }\n    \n    long largest = lst[0];\n \
    \   long smallest = lst[0];\n    \n    for (long i : lst)\n    {\n        if (i\
    \ < largest)\n        {\n            largest = i;\n        }\n        else if\
    \ (i > smallest)\n        {\n            smallest = i;\n        }\n    }\n   \
    \ \n    result.first = largest;\n    result.second = smallest;\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ negative = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            negative = true;\n\
    \        }\n        if (i > largest) {\n            largest = i;\n        }\n\
    \        if (i < smallest) {\n            smallest = i;\n        }\n    }\n  \
    \  if (negative == false) {\n        result.a = largest;\n        result.b = smallest;\n\
    \    } else {\n        result.a = null;\n        result.b = null;\n    }\n   \
    \ return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach (i, e) in lst {\n        if (e < 0L) {\n            result.a\
    \ = e;\n            result.b = e;\n        } else {\n            result.a = e;\n\
    \            result.b = e;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach (i, x)\
    \ in lst {\n        if x < 0 {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    if result.a == result.b\
    \ {\n        result.a = null;\n        result.b = null;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        ",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach (i,\
    \ x) in lst {\n        if (x < 0) {\n            result.a = x;\n        } else\
    \ {\n            result.b = x;\n        }\n    }\n    \n    if (result.a == null)\
    \ {\n        result.a = result.b = None;\n    }\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \    {\n        return result;\n    }\n    \n    long largest = lst.max();\n \
    \   long smallest = lst.min();\n    \n    if (largest < 0)\n    {\n        result.first\
    \ = null;\n        result.second = smallest;\n    }\n    else if (smallest > 0)\n\
    \    {\n        result.first = largest;\n        result.second = null;\n    }\n\
    \    else\n    {\n        result.first = null;\n        result.second = null;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool found = false;\n    foreach (long i in lst) {\n        if\
    \ (i < 0) {\n            found = true;\n            result.a = i;\n        } else\
    \ if (i > 0 && found) {\n            result.b = i;\n            break;\n     \
    \   }\n    }\n    if (result.a == null && result.b == null) {\n        return\
    \ result;\n    }\n    return Tuple!(Nullable!(long), Nullable!(long));\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    bool neg = false;\n\
    \    long max = 0;\n    long min = 0;\n    \n    for (long i : lst) {\n      \
    \  if (i < 0) {\n            neg = true;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n        if (i < min) {\n            min = i;\n\
    \        }\n    }\n    \n    if (neg) {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    } else {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    }\n    \n    if (max > min) {\n    \
    \    result.a = max;\n        result.b = min;\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool positive\
    \ = true;\n    long largest = Long.min;\n    long smallest = Long.max;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            positive = false;\n    \
    \    }\n        if (i > largest) {\n            largest = i;\n        }\n    \
    \    if (i < smallest) {\n            smallest = i;\n        }\n    }\n    if\
    \ (positive && largest == Long.min) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    } else if (positive && smallest == Long.max) {\n    \
    \    result = Tuple!(Nullable!(long), Nullable!(long));\n    } else {\n      \
    \  result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool positive\
    \ = true;\n    bool negative = true;\n    long largest = -(long)0;\n    long smallest\
    \ = (long)0;\n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n \
    \           negative = false;\n        }\n        else if (i > 0)\n        {\n\
    \            positive = false;\n        }\n        else\n        {\n         \
    \   if (positive && negative && largest < i)\n            {\n                largest\
    \ = i;\n            }\n            else if (positive && largest > i)\n       \
    \     {\n                largest = i;\n            }\n            else if (negative\
    \ && smallest < i)\n            {\n                smallest = i;\n           \
    \ }\n            else if (negative && smallest > i)\n            {\n         \
    \       smallest = i;\n            }\n        }\n    }\n    if (positive && negative\
    \ && largest < smallest)\n    {\n        largest = smallest;\n    }\n    else\
    \ if (positive && largest > smallest)\n    {\n        largest = smallest;\n  \
    \  }\n    else if (negative && smallest < smallest)\n    {\n        smallest =\
    \ smallest;\n    }\n    else if (negative && smallest > smallest)\n    {\n   \
    \     smallest = smallest;\n    }\n    result.a = largest;\n    result.b = smallest;\n\
    \    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long max = 0;\n    long min = 0;\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            foundNegative = true;\n        }\n        if (i > 0) {\n\
    \            foundPositive = true;\n        }\n        if (foundNegative && foundPositive)\
    \ {\n            break;\n        }\n        if (foundNegative) {\n           \
    \ max = i;\n        }\n        if (foundPositive) {\n            min = i;\n  \
    \      }\n    }\n    if (foundNegative && foundPositive) {\n        result.first\
    \ = null;\n        result.second = min;\n    } else {\n        result.first =\
    \ null;\n        result.second = null;\n    }\n    return result;\n}", "{\n  \
    \  long a = null;\n    long b = null;\n    foreach(long x, lst) {\n        if\
    \ (x < 0) {\n            a = x;\n        } else if (x > 0) {\n            b =\
    \ x;\n        }\n    }\n    return Tuple!(a, b);\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        function(int\
    \ i) -> \n            if(i<0) then\n                result := (Nullable!(long),\
    \ Nullable!(long))(Nullable!(i), Nullable!(Nullable!(i)));\n            else\n\
    \                result := (Nullable!(long), Nullable!(long))(Nullable!(Nullable!(i)),\
    \ Nullable!(Nullable!(i)));\n        end);\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(x ::\
    \ lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    if (result.a == null)\
    \ {\n        result.a = result.b;\n    }\n    \n    return result;\n}", "{\n \
    \   Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        \n        foreach(j : lst, \n            \n            if(i == j)\
    \ \n                result := (Nullable!(long), Nullable!(long))(Nullable!(i),\
    \ Nullable!(j));\n            else\n                result := (Nullable!(long),\
    \ Nullable!(long))(Nullable!(i), Nullable!(j));\n            \n        )\n   \
    \ );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestNegative = 0;\n    long largestPositive = 0;\n    long smallestNegative\
    \ = 0;\n    long smallestPositive = 0;\n    for (long i : lst)\n    {\n      \
    \  if (i < 0)\n        {\n            foundNegative = true;\n            largestNegative\
    \ = i;\n        }\n        else\n        {\n            foundPositive = true;\n\
    \            largestPositive = i;\n        }\n    }\n    if (foundNegative &&\
    \ foundPositive)\n    {\n        if (largestNegative > largestPositive)\n    \
    \    {\n            result.a = largestNegative;\n            result.b = largestPositive;\n\
    \        }\n        else\n        {\n            result.a = largestPositive;\n\
    \            result.b = largestNegative;\n        }\n    }\n    else if (foundNegative)\n\
    \    {\n        result.a = largestNegative;\n        result.b = largestPositive;\n\
    \    }\n    else if (foundPositive)\n    {\n        result.a = largestPositive;\n\
    \        result.b = largestNegative;\n    }\n    else\n    {\n        result.a\
    \ = null;\n        result.b = null;\n    }\n    return result;\n}\n/*", "{\n \
    \   Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \        return result;\n    \n    long max;\n    long min;\n    \n    foreach\
    \ (long i; lst)\n    {\n        if (i < 0)\n        {\n            if (max < 0)\n\
    \                max = i;\n        }\n        else\n        {\n            if\
    \ (min > 0)\n                min = i;\n        }\n    }\n    \n    if (max < min)\n\
    \    {\n        result.a = null;\n        result.b = min;\n    }\n    else\n \
    \   {\n        result.a = max;\n        result.b = min;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    if (result.a\
    \ == null) {\n        result.a = result.b = None;\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n        Tuple!(Nullable!(long), Nullable!(long)) tmp = \n\
    \            Tuple!(Nullable!(long), Nullable!(long)) (\n                if(i<0L)\
    \ \n                    Tuple!(Nullable!(long), Nullable!(long)) (None, None)\
    \ \n                else \n                    Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                        if(i>0L) \n                            Tuple!(Nullable!(long),\
    \ Nullable!(long)) (None, None) \n                        else \n            \
    \                Tuple!(Nullable!(long), Nullable!(long)) (i, None) \n       \
    \             ) \n            );\n        \n        result = max(result, tmp);\n\
    \    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        \n        foreach(j : lst, \n\
    \            \n            if(i < j) \n            {\n                result.a\
    \ = i;\n                result.b = j;\n                break;\n            }\n\
    \            \n        ));\n    \n    return result;\n}", "{\n    long a = null;\n\
    \    long b = null;\n    foreach(long x, lst) {\n        if (x < 0) {\n      \
    \      if (a != null)\n                a = null;\n        } else {\n         \
    \   if (b != null)\n                b = null;\n        }\n    }\n    if (a !=\
    \ null)\n        return Tuple!(a, null);\n    if (b != null)\n        return Tuple!(null,\
    \ b);\n    return Tuple!(null, null);\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool is_negative = false;\n    long max_negative = Long.min;\n\
    \    long min_positive = Long.max;\n    foreach(long i, lst)\n    {\n        if\
    \ (i < 0)\n        {\n            is_negative = true;\n        }\n        else\
    \ if (i > 0)\n        {\n            if (is_negative)\n            {\n       \
    \         if (i > max_negative)\n                {\n                    max_negative\
    \ = i;\n                }\n            }\n            else\n            {\n  \
    \              if (i < min_positive)\n                {\n                    min_positive\
    \ = i;\n                }\n            }\n        }\n    }\n    if (is_negative)\n\
    \    {\n        result.a = max_negative;\n        result.b = min_positive;\n \
    \   }\n    else\n    {\n        result.a = Nullable!(long);\n        result.b\
    \ = Nullable!(long);\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largestPositive = Long.MinValue;\n    long largestNegative\
    \ = Long.MaxValue;\n    foreach(long x, lst)\n    {\n        if (x < 0)\n    \
    \    {\n            foundNegative = true;\n            largestNegative = x;\n\
    \        }\n        else\n        {\n            foundPositive = true;\n     \
    \       largestPositive = x;\n        }\n    }\n    if (foundNegative && foundPositive)\n\
    \    {\n        result.a = largestNegative;\n        result.b = largestPositive;\n\
    \    }\n    else if (foundNegative)\n    {\n        result.a = largestNegative;\n\
    \        result.b = Nullable!(long);\n    }\n    else if (foundPositive)\n   \
    \ {\n        result.a = Nullable!(long);\n        result.b = largestPositive;\n\
    \    }\n    else\n    {\n        result.a = Nullable!(long);\n        result.b\
    \ = Nullable!(long);\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0L) \n               {\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n                   break;\n               }\n           \
    \    else if (i > 0L) \n               {\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n                   break;\n               }\n           });\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool neg = false;\n    long max = 0;\n    long min = 0;\n    for\
    \ (long i : lst)\n    {\n        if (i < 0)\n        {\n            neg = true;\n\
    \        }\n        if (i > 0)\n        {\n            if (neg)\n            {\n\
    \                if (max < 0)\n                {\n                    max = i;\n\
    \                }\n                else\n                {\n                \
    \    min = i;\n                }\n            }\n            else\n          \
    \  {\n                if (max < 0)\n                {\n                    max\
    \ = i;\n                }\n                else\n                {\n         \
    \           min = i;\n                }\n            }\n        }\n    }\n   \
    \ if (neg)\n    {\n        result.a = max;\n        result.b = min;\n    }\n \
    \   else\n    {\n        result.a = max;\n        result.b = min;\n    }\n   \
    \ return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    if (lst.is_empty())\n        return result;\n    \n    long smallest\
    \ = lst.min();\n    long largest = lst.max();\n    \n    if (smallest < 0)\n \
    \   {\n        result.a = null;\n        result.b = smallest;\n    }\n    else\
    \ if (largest > 0)\n    {\n        result.a = largest;\n        result.b = null;\n\
    \    }\n    else\n    {\n        result.a = null;\n        result.b = null;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst)\n    {\n        if (i < 0L)\n        {\n\
    \            result.a = Nullable!(0L);\n            result.b = Nullable!(1L);\n\
    \        }\n        else if (i > 0L)\n        {\n            result.a = Nullable!(1L);\n\
    \            result.b = Nullable!(0L);\n        }\n        else\n        {\n \
    \           result.a = Nullable!(1L);\n            result.b = Nullable!(1L);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool negative = false;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    foreach(long x, lst)\n    {\n        if (x\
    \ < 0)\n        {\n            negative = true;\n        }\n        if (x > largest)\n\
    \        {\n            largest = x;\n        }\n        if (x < smallest)\n \
    \       {\n            smallest = x;\n        }\n    }\n    if (negative == false)\n\
    \    {\n        result.first = null;\n        result.second = largest;\n    }\n\
    \    else\n    {\n        result.first = null;\n        result.second = smallest;\n\
    \    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool positive = true;\n    long largest = -(2L);\n    long smallest\
    \ = (2L);\n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n    \
    \        positive = false;\n        }\n        if (i > largest)\n        {\n \
    \           largest = i;\n        }\n        if (i < smallest)\n        {\n  \
    \          smallest = i;\n        }\n    }\n    if (positive && smallest < largest)\n\
    \    {\n        result.a = smallest;\n        result.b = largest;\n    }\n   \
    \ else\n    {\n        result.a = null;\n        result.b = null;\n    }\n   \
    \ return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           {\n               if (i < 0L) \n    \
    \               result = Tuple!(Nullable!(long), Nullable!(long));\n         \
    \      else if (i > 0L)\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \               else\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)); \n           else result = Tuple!(Nullable!(long),\
    \ Nullable!(long))) \n        \n    return result;\n}", "{\n    var largest: Nullable!(long)\
    \ = Nullable!(long);\n    var smallest: Nullable!(long) = Nullable!(long);\n \
    \   var i: long;\n    var j: long;\n    var k: long;\n    var found: boolean;\n\
    \    \n    for (i = 0; i < lst.Length; i++) {\n        found = false;\n      \
    \  for (j = 0; j < i; j++) {\n            if (lst[j] < lst[i]) {\n           \
    \     found = true;\n                break;\n            }\n        }\n      \
    \  if (!found) {\n            largest = lst[i];\n            break;\n        }\n\
    \    }\n    \n    for (i = lst.Length - 1; i >= 0; i--) {\n        found = false;\n\
    \        for (j = 0; j < i; j++) {\n            if (lst[j] > lst[i]) {\n     \
    \           found = true;\n                break;\n            }\n        }\n\
    \        if (!found) {\n            smallest = lst[i];\n            break;\n \
    \       }\n    }\n    \n    return Tuple!(largest, smallest);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty())\n        return result;\n\
    \    \n    long largest = lst.max();\n    long smallest = lst.min();\n    \n \
    \   if (largest < 0)\n    {\n        result.first = null;\n        result.second\
    \ = smallest;\n    }\n    else\n    {\n        result.first = largest;\n     \
    \   result.second = smallest;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.MinValue;\n\
    \    long smallest = Long.MaxValue;\n    foreach(long x, lst) {\n        if (x\
    \ < 0) {\n            positive = false;\n            largest = x;\n        } else\
    \ {\n            smallest = x;\n        }\n    }\n    if (positive && smallest\
    \ < Long.MaxValue) {\n        result.a = Nullable!(largest);\n        result.b\
    \ = Nullable!(smallest);\n    } else {\n        result.a = Nullable!(null);\n\
    \        result.b = Nullable!(null);\n    }\n    return result;\n}\n/*", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                if(i<0L) None else Some(i),\n          \
    \      if(i>0L) None else Some(i)\n            )\n    )\n    \n    foreach(tuple,\n\
    \        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                if((tuple._1<0L) and (tuple._2<0L)) None\
    \ else tuple._1,\n                if((tuple._1>0L) and (tuple._2>0L)) None else\
    \ tuple._2\n            )\n    )\n    \n    result = tuple;\n    \n    return\
    \ result;\n}", "{\n    long a = null;\n    long b = null;\n    foreach(long x,\
    \ lst) {\n        if (x < 0) {\n            a = x;\n        } else if (x > 0)\
    \ {\n            b = x;\n        }\n    }\n    return Tuple!(a, b);\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           if(i<0L) result = Tuple!(Nullable!(long), Nullable!(long)); \n\
    \           else result = Tuple!(Nullable!(long), Nullable!(long));\n        \
    \   );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = Long.min;\n    long\
    \ smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n     \
    \       negative = true;\n        }\n        if (largest < i) {\n            largest\
    \ = i;\n        }\n        if (smallest > i) {\n            smallest = i;\n  \
    \      }\n    }\n    if (negative == false) {\n        result.a = largest;\n \
    \       result.b = smallest;\n    } else {\n        result.a = null;\n       \
    \ result.b = null;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            foundNegative = true;\n\
    \        } else if (i > 0){\n            foundPositive = true;\n        }\n  \
    \      if (foundNegative && foundPositive) {\n            break;\n        }\n\
    \        if (foundNegative) {\n            largest = i;\n        } else if (foundPositive)\
    \ {\n            smallest = i;\n        }\n    }\n    if (foundNegative && foundPositive)\
    \ {\n        result.a = largest;\n        result.b = smallest;\n    } else {\n\
    \        result.a = null;\n        result.b = null;\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) t = \n           \
    \ Tuple!(Nullable!(long), Nullable!(long)) (\n                ifelse(i < 0L, Tuple!(Nullable!(long),\
    \ Nullable!(long)) (None, None), \n                    Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                        ifelse(i >= 0L, Tuple!(Nullable!(long),\
    \ Nullable!(long)) (None, None), \n                            Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                                ifelse(i < 0L, \n      \
    \                              Tuple!(Nullable!(long), Nullable!(long)) (None,\
    \ None), \n                                    Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                                        ifelse(i >= 0L, \n              \
    \                              Tuple!(Nullable!(long), Nullable!(long)) (None,\
    \ None), \n                                            Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                                                ifelse(i\
    \ < 0L, \n                                                    Tuple!(Nullable!(long),\
    \ Nullable!(long)) (None, None), \n                                          \
    \          Tuple!(Nullable!(long), Nullable!(long)) (\n                      \
    \                                  ifelse(i >= 0L, \n                        \
    \                                    Tuple!(Nullable!(long), Nullable!(long))\
    \ (None, None), \n                                                           \
    \ Tuple!(Nullable!(long), Nullable!(long)) (\n                               \
    \                                 ifelse(i < 0L, \n                          \
    \                                          Tuple!(Nullable!(long), Nullable!(long))\
    \ (None, None), \n                                                           \
    \         Tuple!(Nullable!(long), Nullable!(long)) (\n                       \
    \                                                 ifelse(i >= 0L, \n         \
    \                                                                   Tuple!(Nullable!(long),\
    \ Nullable!(long)) (None, None), \n                                          \
    \                                  Tuple!(Nullable!(long), Nullable!(long)) (\n\
    \                                                                            \
    \    ifelse(i < 0L, \n                                                       \
    \                             Tuple!(Nullable!(long), Nullable!(long)) (None,\
    \ None), \n                                                                  \
    \                  Tuple!(Nullable!(long), Nullable!(long)) (\n              \
    \                                                                          ifelse(i\
    \ >= 0L, \n                                                                  \
    \                          Tuple!(Nullable!(long), Nullable!(long)) (None, None),\
    \ \n                                                                         \
    \                   Tuple!(Nullable!(long), Nullable!(long)) (\n             \
    \                                                                            \
    \       ifelse(i < 0L, \n                                                    \
    \                                                Tuple!(Nullable!(long), Nullable!(long))\
    \ (None, None), \n                                                           \
    \                                         Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                                                                        \
    \                                ifelse(", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else if (x > 0) {\n            result.b = x;\n   \
    \     } else {\n            result.a = null;\n            result.b = null;\n \
    \       }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0L) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)); \n           else result = Tuple!(Nullable!(long),\
    \ Nullable!(long))); \n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0L) {\n                   result.a = Nullable!(null);\n    \
    \               result.b = i;\n               } else {\n                   result.a\
    \ = i;\n                   result.b = Nullable!(null);\n               }\n   \
    \        });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i : lst) {\n        if (i < 0L) {\n            result.a\
    \ = i;\n        } else {\n            result.b = i;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool foundNegative = false;\n    bool foundPositive = false;\n    long largestPositive\
    \ = 0;\n    long largestNegative = 0;\n    long smallestPositive = 0;\n    long\
    \ smallestNegative = 0;\n    for (long i : lst)\n    {\n        if (i < 0)\n \
    \       {\n            foundNegative = true;\n            largestNegative = i;\n\
    \        }\n        else if (i > 0)\n        {\n            foundPositive = true;\n\
    \            largestPositive = i;\n        }\n    }\n    if (foundNegative &&\
    \ foundPositive)\n    {\n        if (largestNegative > largestPositive)\n    \
    \    {\n            smallestNegative = largestNegative;\n            smallestPositive\
    \ = largestPositive;\n        }\n        else\n        {\n            smallestNegative\
    \ = largestPositive;\n            smallestPositive = largestNegative;\n      \
    \  }\n    }\n    else if (foundNegative)\n    {\n        smallestNegative = largestNegative;\n\
    \    }\n    else if (foundPositive)\n    {\n        smallestPositive = largestPositive;\n\
    \    }\n    else\n    {\n        smallestPositive = 0;\n        smallestNegative\
    \ = 0;\n    }\n    result.a = smallestPositive;\n    result.b = smallestNegative;\n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tmp = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n           \
    \     if(i<0L) \n                    Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                        Nullable!(long) null,\n                        Nullable!(long)\
    \ i\n                    )\n                else\n                    Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                        Nullable!(long) i,\n           \
    \             Nullable!(long) null\n                    )\n            );\n  \
    \      \n        result = max(result, tmp);\n    );\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative\
    \ = false;\n    long max = 0;\n    long min = 0;\n    foreach (long i in lst)\
    \ {\n        if (i < 0) {\n            negative = true;\n        }\n        if\
    \ (i > max) {\n            max = i;\n        }\n        if (i < min) {\n     \
    \       min = i;\n        }\n    }\n    if (max == 0) {\n        result.a = null;\n\
    \        result.b = null;\n    } else if (min < 0) {\n        result.a = null;\n\
    \        result.b = min;\n    } else if (max > 0) {\n        result.a = max;\n\
    \        result.b = null;\n    } else {\n        result.a = null;\n        result.b\
    \ = null;\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long max = 0;\n    long min = 0;\n    foreach(long x, lst) {\n\
    \        if (x < 0) {\n            foundNegative = true;\n            max = x;\n\
    \        }\n        else {\n            foundPositive = true;\n            min\
    \ = x;\n        }\n    }\n    if (foundNegative && foundPositive) {\n        result.a\
    \ = max;\n        result.b = min;\n    }\n    else if (foundNegative) {\n    \
    \    result.a = max;\n        result.b = null;\n    }\n    else if (foundPositive)\
    \ {\n        result.a = null;\n        result.b = min;\n    }\n    else {\n  \
    \      result.a = null;\n        result.b = null;\n    }\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool neg = false;\n\
    \    long max = 0;\n    long min = 0;\n    foreach(long i in lst) {\n        if\
    \ (i < 0) {\n            neg = true;\n        }\n        if (i > max) {\n    \
    \        max = i;\n        }\n        if (i < min) {\n            min = i;\n \
    \       }\n    }\n    if (neg) {\n        result.a = Nullable!(long);\n      \
    \  result.b = Nullable!(long);\n    } else {\n        result.a = max;\n      \
    \  result.b = min;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool neg = false;\n    long max = 0;\n    long\
    \ min = 0;\n    foreach(long i in lst)\n    {\n        if (i < 0)\n        {\n\
    \            neg = true;\n        }\n        if (i > 0)\n        {\n         \
    \   if (neg)\n            {\n                max = i;\n            }\n       \
    \     else\n            {\n                min = i;\n            }\n        }\n\
    \    }\n    if (neg)\n    {\n        result.a = null;\n        result.b = min;\n\
    \    }\n    else\n    {\n        result.a = max;\n        result.b = min;\n  \
    \  }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i : lst) {\n        if (i < 0L) {\n            result.a\
    \ = i;\n        } else {\n            result.b = i;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach (i, el) in zip(lst, lst[1..])\n    {\n        if (el < 0)\n\
    \        {\n            result.a = el;\n            result.b = i;\n          \
    \  break;\n        }\n    }\n    \n    if (result.a == null)\n    {\n        result.a\
    \ = null;\n        result.b = null;\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach (i, e)\
    \ in lst {\n        if (e < 0L) {\n            result.a = e;\n        } else {\n\
    \            result.b = e;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \    {\n        result.first = null;\n        result.second = null;\n    }\n \
    \   else\n    {\n        long max_negative = lst.max_by_key(|x| x < 0);\n    \
    \    long min_positive = lst.min_by_key(|x| x > 0);\n        \n        if (max_negative\
    \ < 0)\n        {\n            result.first = null;\n            result.second\
    \ = max_negative;\n        }\n        else if (min_positive > 0)\n        {\n\
    \            result.first = min_positive;\n            result.second = null;\n\
    \        }\n        else\n        {\n            result.first = max_negative;\n\
    \            result.second = min_positive;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ negative = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            negative = true;\n\
    \        }\n        if (i > largest) {\n            largest = i;\n        }\n\
    \        if (i < smallest) {\n            smallest = i;\n        }\n    }\n  \
    \  if (negative == false) {\n        result = Tuple!(Nullable!(long), Nullable!(long))(largest,\
    \ smallest);\n    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long))(None,\
    \ None);\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0L) \n               {\n                   result.a = Nullable!(null);\n\
    \                   result.b = i;\n               }\n               else if (i\
    \ > 0L)\n               {\n                   result.a = i;\n                \
    \   result.b = Nullable!(null);\n               }\n               else \n    \
    \           {\n                   result.a = Nullable!(null);\n              \
    \     result.b = Nullable!(null);\n               }\n           });\n    \n  \
    \  return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           {\n               if (i < 0L) \n    \
    \               result = Tuple!(Nullable!(long), Nullable!(long));\n         \
    \      else\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = -(2L);\n\
    \    long smallest = (2L);\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           positive = false;\n        }\n        if (i > largest) {\n       \
    \     largest = i;\n        }\n        if (i < smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    if (positive && smallest > largest) {\n        result.a\
    \ = smallest;\n        result.b = largest;\n    } else {\n        result.a = null;\n\
    \        result.b = null;\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largestPositive = Long.MinValue;\n    long largestNegative\
    \ = Long.MaxValue;\n    foreach(long x, lst)\n    {\n        if (x < 0)\n    \
    \    {\n            foundNegative = true;\n            largestNegative = x;\n\
    \        }\n        else\n        {\n            foundPositive = true;\n     \
    \       largestPositive = x;\n        }\n    }\n    if (foundNegative && foundPositive)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = largestNegative;\n        result.1 = largestPositive;\n    }\n    else if\
    \ (foundNegative)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = largestNegative;\n        result.1 = Nullable!(long);\n  \
    \  }\n    else if (foundPositive)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = Nullable!(long);\n        result.1 = largestPositive;\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = Nullable!(long);\n        result.1 = Nullable!(long);\n  \
    \  }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i, x) in zip(lst, lst.tail) {\n        if ((x <\
    \ 0L) && (x > -1L)) {\n            result ~= Tuple!(Nullable!(long), Nullable!(long));\n\
    \        }\n    }\n    \n    result ~= Tuple!(Nullable!(long), Nullable!(long));\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool positive = true;\n    bool negative = true;\n    long largest\
    \ = Long.min;\n    long smallest = Long.max;\n    for (long i : lst)\n    {\n\
    \        if (i < 0)\n        {\n            negative = false;\n        }\n   \
    \     else\n        {\n            positive = true;\n        }\n        if (largest\
    \ < i)\n        {\n            largest = i;\n        }\n        if (smallest >\
    \ i)\n        {\n            smallest = i;\n        }\n    }\n    if (negative\
    \ == true)\n    {\n        result.first = null;\n        result.second = smallest;\n\
    \    }\n    else\n    {\n        result.first = largest;\n        result.second\
    \ = smallest;\n    }\n    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    foreach(long x, lst) {\n        if (x < 0)\
    \ {\n            positive = false;\n            largest = Long.min;\n        }\n\
    \        if (x > largest) {\n            largest = x;\n        }\n        if (x\
    \ < smallest) {\n            smallest = x;\n        }\n    }\n    if (positive\
    \ == true) {\n        result = Tuple!(Nullable!(long), Nullable!(long))(largest,\
    \ smallest);\n    } else {\n        result = Tuple!(Nullable!(long), Nullable!(long))(None,\
    \ None);\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst)\n    {\n        if (i <\
    \ 0L)\n        {\n            result.a = Nullable!(long);\n            result.b\
    \ = i;\n        }\n        else if (i > 0L)\n        {\n            result.a =\
    \ i;\n            result.b = Nullable!(long);\n        }\n        else\n     \
    \   {\n            result.a = Nullable!(long);\n            result.b = Nullable!(long);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (None,None)\
    \ \n                else Tuple!(Nullable!(long), Nullable!(long)) (\n        \
    \            if(i>0L) Tuple!(Nullable!(long), Nullable!(long)) (None,None) \n\
    \                    else Tuple!(Nullable!(long), Nullable!(long)) (\n       \
    \                 if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (None,None)\
    \ \n                        else Tuple!(Nullable!(long), Nullable!(long)) (\n\
    \                            if(i>0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (None,None) \n                            else Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                                if(i<0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (None,None) \n                                else Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                                    if(i>0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (None,None) \n                                    else Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                                        if(i<0L) Tuple!(Nullable!(long),\
    \ Nullable!(long)) (None,None) \n                                        else\
    \ Tuple!(Nullable!(long), Nullable!(long)) (\n                               \
    \             if(i>0L) Tuple!(Nullable!(long), Nullable!(long)) (None,None) \n\
    \                                            else Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                                                if(i<0L) Tuple!(Nullable!(long),\
    \ Nullable!(long)) (None,None) \n                                            \
    \    else Tuple!(Nullable!(long), Nullable!(long)) (\n                       \
    \                             if(i>0L) Tuple!(Nullable!(long), Nullable!(long))\
    \ (None,None) \n                                                    else Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                                                       \
    \ if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (None,None) \n           \
    \                                             else Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                                                            if(i>0L) Tuple!(Nullable!(long), ",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n           if(i<0) result = Tuple!(Nullable!(long), Nullable!(long));\
    \ \n           else result = Tuple!(Nullable!(long), Nullable!(long))) \n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool neg = false;\n    long max = 0;\n    long min = 0;\n    foreach(long\
    \ i, lst) {\n        if (i < 0) {\n            neg = true;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n        if (i < min) {\n \
    \           min = i;\n        }\n    }\n    if (neg) {\n        result.a = null;\n\
    \        result.b = min;\n    } else {\n        result.a = max;\n        result.b\
    \ = min;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i : lst) {\n        if (i < 0) {\n            result.a\
    \ = i;\n        } else if (i > 0) {\n            result.b = i;\n        }\n  \
    \  }\n    \n    if (result.a == null) {\n        result.a = result.b = None;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool neg = false;\n    long max = 0;\n    long min = 0;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            neg = true;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n        if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    if (neg) {\n        result.first\
    \ = null;\n        result.second = min;\n    } else {\n        result.first =\
    \ max;\n        result.second = min;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0L) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(0L), Nullable!(i));\n\
    \           else if(i>0L) result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(i),\
    \ Nullable!(0L));\n           else result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (Nullable!(0L), Nullable!(0L));\n           );\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n            if(i<0) result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long));\n   \
    \         if(i>0) result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long));\n    );\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(x -> \n        foreach(y -> \n            if((x < 0L) && (y > 0L))\n\
    \            {\n                result.a = x;\n                result.b = y;\n\
    \            }\n            else\n            {\n                result.a = null;\n\
    \                result.b = null;\n            }\n        )\n    );\n    \n  \
    \  return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tmp = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n           \
    \     if(i<0) Tuple!(Nullable!(long), Nullable!(long)) (None, None) \n       \
    \         else Tuple!(Nullable!(long), Nullable!(long)) (\n                  \
    \  if(i>0) Tuple!(Nullable!(long), Nullable!(long)) (None, None) \n          \
    \          else Tuple!(Nullable!(long), Nullable!(long)) (i, None) \n        \
    \        )\n            )\n    )\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tmp = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                if(i<0) Tuple!(Nullable!(long), Nullable!(long)) (None, None)\
    \ \n                else Tuple!(Nullable!(long), Nullable!(long)) (\n        \
    \            if(i>0) Tuple!(Nullable!(long), Nullable!(long)) (None, None) \n\
    \                    else Tuple!(Nullable!(long), Nullable!(long)) (None, i) \n\
    \                )\n            )\n    )\n    \n    foreach(i : lst, \n      \
    \  Tuple!(Nullable!(long), Nullable!(long)) tmp = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                if(i<0) Tuple!(Nullable!(long), Nullable!(long))\
    \ (None, None) \n                else Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                    if(i>0) Tuple!(Nullable!(long), Nullable!(long)) (None,\
    \ None) \n                    else Tuple!(Nullable!(long), Nullable!(long)) (None,\
    \ i) \n                )\n            )\n    )\n    \n    foreach(i : lst, \n\
    \        Tuple!(Nullable!(long), Nullable!(long)) tmp = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) (\n                if(i<0) Tuple!(Nullable!(long), Nullable!(long))\
    \ (None, None) \n                else Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                    if(i>0) Tuple!(Nullable!(long), Nullable!(long)) (None,\
    \ None) \n                    else Tuple!(Nullable!(long), Nullable!(long)) (i,\
    \ None) \n                )\n            )\n    )\n    \n    foreach(i : lst,\
    \ \n        Tuple!(", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        function(long x, long y)\n        {\n  \
    \          if (x < 0)\n            {\n                result.a = x;\n        \
    \        result.b = y;\n            }\n            else if (x > 0)\n         \
    \   {\n                result.a = y;\n                result.b = x;\n        \
    \    }\n            else\n            {\n                result.a = null;\n  \
    \              result.b = null;\n            }\n        });\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    if (result.a\
    \ == null) {\n        result.a = result.b = None;\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "{\n    var\
    \ largest = Nullable!(long);\n    var smallest = Nullable!(long);\n    var i =\
    \ 0;\n    var j = 0;\n    var k = 0;\n    var n = lst.Length;\n    while (i <\
    \ n) {\n        if (lst[i] < smallest) {\n            smallest = Nullable!(long);\n\
    \        }\n        if (lst[i] > largest) {\n            largest = Nullable!(long);\n\
    \        }\n        if (lst[i] < 0) {\n            largest = Nullable!(long);\n\
    \        }\n        if (lst[i] > 0) {\n            smallest = Nullable!(long);\n\
    \        }\n        i += 1;\n    }\n    if (smallest == Nullable!(long)) {\n \
    \       smallest = Nullable!(long);\n    }\n    if (largest == Nullable!(long))\
    \ {\n        largest = Nullable!(long);\n    }\n    return Tuple!(largest, smallest);\n\
    }\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n        foreach(j : lst, \n            \n            if(i<j)\n\
    \            {\n                if(i>result.a)\n                {\n          \
    \          result.a = i;\n                    result.b = j;\n                }\n\
    \            }\n            \n            else\n            {\n              \
    \  if(i<result.b)\n                {\n                    result.b = i;\n    \
    \                result.a = j;\n                }\n            }\n           \
    \ \n        )\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else {\n            result.b = x;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst)\n    {\n        if (i <\
    \ 0L)\n        {\n            result.a = Nullable!(long);\n            result.b\
    \ = i;\n        }\n        else if (i > 0L)\n        {\n            result.a =\
    \ i;\n            result.b = Nullable!(long);\n        }\n        else\n     \
    \   {\n            result.a = Nullable!(long);\n            result.b = Nullable!(long);\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                if(i<0L) Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(0L),\
    \ Nullable!(i)) \n                else Tuple!(Nullable!(long), Nullable!(long))\
    \ (Nullable!(i), Nullable!(0L))\n            );\n        result = ifelse(t.f0.f0\
    \ > t.f0.f1, t, result);\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(x | lst)\n    {\n        if(x <\
    \ 0L)\n        {\n            result.a = x;\n            result.b = null;\n  \
    \      }\n        else if(x > 0L)\n        {\n            result.a = null;\n \
    \           result.b = x;\n        }\n        else\n        {\n            result.a\
    \ = null;\n            result.b = null;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long max = 0;\n    long min =\
    \ 0;\n    foreach(long x, lst) {\n        if (x < 0) {\n            foundNegative\
    \ = true;\n        } else if (x > 0) {\n            foundPositive = true;\n  \
    \      }\n        if (foundNegative && foundPositive) {\n            if (x > max)\
    \ {\n                max = x;\n            } else if (x < min) {\n           \
    \     min = x;\n            }\n        } else if (foundNegative) {\n         \
    \   max = x;\n        } else if (foundPositive) {\n            min = x;\n    \
    \    }\n    }\n    if (foundNegative && foundPositive) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long), Nullable!(long))(Nullable!(long),\
    \ Nullable!(long))(Nullable!(long), Nullable!(long))", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0L) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)); \n           else result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else if (x > 0) {\n            result.b\
    \ = x;\n        } else {\n            result.a = null;\n            result.b =\
    \ null;\n        }\n    }\n    \n    return result;\n}", "{\n    var largest =\
    \ Nullable!(long);\n    var smallest = Nullable!(long);\n    foreach(i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else {\n      \
    \      smallest = i;\n        }\n    }\n    return Tuple!(largest, smallest);\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n        // If i is negative, set result to None\n       \
    \ if(i.signum <= 0)\n        {\n            result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        }\n        // If i is positive, set result to i\n        else\n     \
    \   {\n            result = Tuple!(i, i);\n        }\n    );\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n           {\n               if (i < 0L) \n          \
    \         result = Tuple!(Nullable!(long), Nullable!(long));\n               else\n\
    \                   result = Tuple!(Nullable!(long), Nullable!(long));\n     \
    \      });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    bool has_negative = false;\n    bool has_positive = false;\n\
    \    \n    for (long i : lst) {\n        if (i < 0) {\n            has_negative\
    \ = true;\n        } else if (i > 0) {\n            has_positive = true;\n   \
    \     }\n    }\n    \n    if (has_negative && has_positive) {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = Nullable!(long);\n\
    \        result.1 = Nullable!(long);\n    } else if (has_negative) {\n       \
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = Nullable!(long);\n\
    \        result.1 = Nullable!(long);\n    } else if (has_positive) {\n       \
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = Nullable!(long);\n\
    \        result.1 = Nullable!(long);\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = Nullable!(long);\n        result.1 = Nullable!(long);\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else if (x > 0) {\n            result.b = x;\n   \
    \     }\n    }\n    \n    if (result.a == null) {\n        result.a = result.b\
    \ = None;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            positive = false;\n        }\n        if (i > largest) {\n      \
    \      largest = i;\n        }\n        if (i < smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    if (positive && largest > Long.max) {\n        result.a\
    \ = null;\n        result.b = Long.max;\n    } else if (positive && smallest <\
    \ Long.min) {\n        result.a = null;\n        result.b = Long.min;\n    } else\
    \ {\n        result.a = largest;\n        result.b = smallest;\n    }\n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach (i : lst) {\n        if (i < 0L) {\n            result.a = i;\n \
    \       } else {\n            result.b = i;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else if (x > 0) {\n            result.b = x;\n        }\n    }\n  \
    \  \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst)\n    {\n        if (x < 0)\n       \
    \ {\n            result.a = x;\n        }\n        else\n        {\n         \
    \   result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool foundNegative = false;\n    bool foundPositive\
    \ = false;\n    long largest = Long.min;\n    long smallest = Long.max;\n    foreach(long\
    \ i, lst) {\n        if (i < 0) {\n            foundNegative = true;\n       \
    \     largest = i;\n        } else if (i > 0){\n            foundPositive = true;\n\
    \            smallest = i;\n        }\n    }\n    if (foundNegative && foundPositive)\
    \ {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = largest;\n        result.1 = smallest;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = null;\n        result.1 = null;\n    }\n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(x :: lst) {\n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = Tuple!(Nullable!(long), Nullable!(long));\n        \n        tuple.a\
    \ = x;\n        tuple.b = x;\n        \n        if (x < 0) {\n            tuple.a\
    \ = null;\n        }\n        if (x > 0) {\n            tuple.b = null;\n    \
    \    }\n        \n        result = tuple;\n    }\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n           {\n               if (i < 0L) \n                   result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n               else\n         \
    \          result = Tuple!(Nullable!(long), Nullable!(long));\n           });\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    long largestNegative = 0;\n    long largestPositive = 0;\n    long smallestNegative\
    \ = 0;\n    long smallestPositive = 0;\n    for (long i : lst)\n    {\n      \
    \  if (i < 0)\n        {\n            foundNegative = true;\n            largestNegative\
    \ = i;\n        }\n        else if (i > 0)\n        {\n            foundPositive\
    \ = true;\n            largestPositive = i;\n        }\n    }\n    if (foundNegative\
    \ && foundPositive)\n    {\n        if (largestNegative > largestPositive)\n \
    \       {\n            result.a = largestNegative;\n            result.b = largestPositive;\n\
    \        }\n        else\n        {\n            result.a = largestPositive;\n\
    \            result.b = largestNegative;\n        }\n    }\n    else if (foundNegative)\n\
    \    {\n        result.a = largestNegative;\n        result.b = None;\n    }\n\
    \    else if (foundPositive)\n    {\n        result.a = largestPositive;\n   \
    \     result.b = None;\n    }\n    else\n    {\n        result.a = None;\n   \
    \     result.b = None;\n    }\n    return result;\n}", "{\n    var largest = Nullable!(long);\n\
    \    var smallest = Nullable!(long);\n    foreach(i : lst, \n        largest =\
    \ i; \n        smallest = i;\n        largest = largest.signum() < smallest.signum()\
    \ ? largest.signum() : largest;\n        smallest = smallest.signum() < largest.signum()\
    \ ? smallest.signum() : smallest;\n    );\n    return Tuple!(largest, smallest);\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(x\
    \ | lst) {\n        if (x < 0) {\n            result.a = x;\n        } else if\
    \ (x > 0) {\n            result.b = x;\n        } else {\n            result.a\
    \ = null;\n            result.b = null;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool positive\
    \ = true;\n    long largest = Long.min;\n    long smallest = Long.max;\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            positive = false;\n    \
    \    }\n        if (i > largest) {\n            largest = i;\n        }\n    \
    \    if (i < smallest) {\n            smallest = i;\n        }\n    }\n    if\
    \ (positive && largest < Long.max) {\n        result.a = largest;\n        result.b\
    \ = smallest;\n    } else {\n        result.a = null;\n        result.b = null;\n\
    \    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(x :: lst) {\n        if (x < 0) {\n            result.a\
    \ = x;\n        } else {\n            result.b = x;\n        }\n    }\n    \n\
    \    if (result.a == null) {\n        result.a = result.b = None;\n    }\n   \
    \ \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if\
    \ (lst.is_empty())\n    {\n        result.first = null;\n        result.second\
    \ = null;\n    }\n    else\n    {\n        long max = 0;\n        long min = 0;\n\
    \        \n        for (int i = 0; i < lst.size(); ++i)\n        {\n         \
    \   long val = lst[i];\n            \n            if (val < 0)\n            {\n\
    \                max = -val;\n            }\n            else\n            {\n\
    \                min = val;\n            }\n        }\n        \n        result.first\
    \ = max;\n        result.second = min;\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool neg = false;\n\
    \    bool pos = false;\n    foreach (long x in lst) {\n        if (x < 0) {\n\
    \            neg = true;\n        } else if (x > 0) {\n            pos = true;\n\
    \        }\n    }\n    if (neg && pos) {\n        result.a = null;\n        result.b\
    \ = null;\n    } else if (neg) {\n        result.a = null;\n        result.b =\
    \ x;\n    } else if (pos) {\n        result.a = x;\n        result.b = null;\n\
    \    } else {\n        result.a = null;\n        result.b = null;\n    }\n   \
    \ \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(long x, lst) {\n        if (x < 0) {\n            result.a\
    \ = x;\n        } else {\n            result.b = x;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    bool foundNegative = false;\n    bool foundPositive = false;\n    long largestPositive\
    \ = 0;\n    long largestNegative = 0;\n    long smallestPositive = 0;\n    long\
    \ smallestNegative = 0;\n    for (long i : lst) {\n        if (i < 0) {\n    \
    \        foundNegative = true;\n            largestNegative = i;\n        } else\
    \ {\n            foundPositive = true;\n            largestPositive = i;\n   \
    \     }\n    }\n    if (foundNegative && foundPositive) {\n        if (largestNegative\
    \ > largestPositive) {\n            smallestNegative = largestNegative;\n    \
    \        smallestPositive = largestPositive;\n        } else {\n            smallestNegative\
    \ = largestPositive;\n            smallestPositive = largestNegative;\n      \
    \  }\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = smallestNegative;\n        result.1 = smallestPositive;\n    } else {\n  \
    \      result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 =\
    \ Nullable!(long);\n        result.1 = Nullable!(long);\n    }\n    return result;\n\
    }\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if\
    \ (lst.is_empty())\n        return result;\n    \n    long largest = lst[0];\n\
    \    long smallest = lst[0];\n    \n    for (long i : lst)\n    {\n        if\
    \ (i < 0)\n        {\n            if (largest < 0)\n                largest =\
    \ i;\n        }\n        else\n        {\n            if (smallest > 0)\n    \
    \            smallest = i;\n        }\n    }\n    \n    result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    result.0 = largest;\n    result.1 = smallest;\n    \n\
    \    return result;\n}", "{\n    long a = null; // largest of negative integers\n\
    \    long b = null; // smallest of positive integers\n    foreach (long i in lst)\
    \ {\n        if (i < 0) {\n            a = i;\n        } else {\n            b\
    \ = i;\n        }\n    }\n    return Tuple!(a, b);\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool neg = false;\n    long max = 0;\n    long\
    \ min = 0;\n    for (long i : lst) {\n        if (i < 0) {\n            neg =\
    \ true;\n        }\n        if (i > max) {\n            max = i;\n        }\n\
    \        if (i < min) {\n            min = i;\n        }\n    }\n    if (neg)\
    \ {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    } else {\n        result.a = max;\n        result.b = min;\n    }\n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool\
    \ negative = false;\n    long largest = -100000000000L;\n    long smallest = 100000000000L;\n\
    \    foreach(long i, lst) {\n        if (i < 0) {\n            negative = true;\n\
    \        }\n        if (i > largest) {\n            largest = i;\n        }\n\
    \        if (i < smallest) {\n            smallest = i;\n        }\n    }\n  \
    \  if (negative == false) {\n        result.first = null;\n        result.second\
    \ = largest;\n    } else {\n        result.first = null;\n        result.second\
    \ = smallest;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    long largest = Long.min;\n\
    \    long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            positive = false;\n        }\n        if (i > largest) {\n      \
    \      largest = i;\n        }\n        if (i < smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    if (positive && largest < Long.max) {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = largest;\n \
    \       result.1 = smallest;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = null;\n        result.1 = null;\n    }\n\
    \    return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long max = 0;\n    long min = 0;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            negative = true;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n        if\
    \ (i < min) {\n            min = i;\n        }\n    }\n    if (max == min) {\n\
    \        return Tuple!(Nullable!(long), Nullable!(long));\n    }\n    if (max\
    \ == 0) {\n        return Tuple!(Nullable!(long), Nullable!(long));\n    }\n \
    \   if (min == 0) {\n        return Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    if (max == min) {\n        return Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    if (negative) {\n        max = -max;\n    }\n    result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    result.0 = max;\n    result.1 = min;\n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largest = Long.min;\n  \
    \  long smallest = Long.max;\n    foreach(long i, lst) {\n        if (i < 0) {\n\
    \            foundNegative = true;\n        } else if (i >= 0) {\n           \
    \ foundPositive = true;\n        }\n        if (foundNegative && foundPositive)\
    \ {\n            break;\n        }\n        if (foundNegative) {\n           \
    \ largest = i;\n        } else if (foundPositive) {\n            smallest = i;\n\
    \        }\n    }\n    if (foundNegative) {\n        result.first = null;\n  \
    \      result.second = largest;\n    } else if (foundPositive) {\n        result.first\
    \ = smallest;\n        result.second = largest;\n    } else {\n        result.first\
    \ = null;\n        result.second = null;\n    }\n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \    {\n        result.first = null;\n        result.second = null;\n    }\n \
    \   else\n    {\n        long largest = lst.iter().max().unwrap();\n        long\
    \ smallest = lst.iter().min().unwrap();\n        result.first = largest;\n   \
    \     result.second = smallest;\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        \n        foreach(j : lst, \n            \n            if(j > i)\n\
    \            {\n                result := (Nullable!(long), Nullable!(long));\n\
    \                break;\n            }\n            \n            result := (Nullable!(long),\
    \ Nullable!(long));\n        )\n    );\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long x,\
    \ lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    if (result.a == result.b)\
    \ {\n        result.a = null;\n        result.b = null;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    bool neg = false;\n    long max = 0;\n    long min = 0;\n    \n    for (long\
    \ i : lst)\n    {\n        if (i < 0)\n        {\n            neg = true;\n  \
    \      }\n        if (i > 0)\n        {\n            if (neg)\n            {\n\
    \                if (max < 0)\n                {\n                    max = i;\n\
    \                }\n                else\n                {\n                \
    \    min = i;\n                }\n            }\n            else\n          \
    \  {\n                if (max < 0)\n                {\n                    max\
    \ = i;\n                }\n                else\n                {\n         \
    \           if (min > 0)\n                    {\n                        min =\
    \ i;\n                    }\n                    else\n                    {\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    \n    if (neg)\n    {\n        result.a =\
    \ Nullable!(long);\n        result.b = Nullable!(long);\n    }\n    else\n   \
    \ {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \        if (max > 0)\n        {\n            result.a = max;\n        }\n   \
    \     if (min < 0)\n        {\n            result.b = min;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else {\n            result.b = x;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool positive = true;\n    long largest = Long.min;\n    long smallest\
    \ = Long.max;\n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n\
    \            positive = false;\n        }\n        if (i > largest)\n        {\n\
    \            largest = i;\n        }\n        if (i < smallest)\n        {\n \
    \           smallest = i;\n        }\n    }\n    if (positive && largest < Long.max)\n\
    \    {\n        result.a = largest;\n        result.b = smallest;\n    }\n   \
    \ else if (positive && smallest > Long.min)\n    {\n        result.a = smallest;\n\
    \        result.b = largest;\n    }\n    else\n    {\n        result.a = null;\n\
    \        result.b = null;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool neg = false;\n    bool pos = false;\n   \
    \ long max = 0;\n    long min = 0;\n    foreach(long x, lst) {\n        if (x\
    \ < 0) {\n            neg = true;\n        } else if (x > 0) {\n            pos\
    \ = true;\n        }\n        if (neg && pos) {\n            max = x;\n      \
    \      min = x;\n        } else if (neg) {\n            max = x;\n        } else\
    \ if (pos) {\n            min = x;\n        }\n    }\n    if (neg) {\n       \
    \ result.a = Nullable!(long);\n        result.b = Nullable!(long);\n    } else\
    \ if (pos) {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    } else {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    result.a = max;\n    result.b = min;\n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        \n        // If i is negative, set result to (null, i).\n        //\
    \ If i is positive, set result to (i, null).\n        // Otherwise, set result\
    \ to (i, i).\n        \n        if(i.signum == -1)\n        {\n            result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        }\n        else if(i.signum\
    \ == 1)\n        {\n            result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        }\n        else\n        {\n            result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        }\n    );\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool positive = true;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            positive = false;\n        }\n \
    \       if (i > largest) {\n            largest = i;\n        }\n        if (i\
    \ < smallest) {\n            smallest = i;\n        }\n    }\n    if (positive\
    \ == true) {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n   \
    \     result.a = largest;\n        result.b = smallest;\n    } else {\n      \
    \  result = Tuple!(Nullable!(long), Nullable!(long));\n        result.a = null;\n\
    \        result.b = null;\n    }\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(x :: lst) {\n        if (x < 0)\
    \ {\n            result.a = x;\n        } else {\n            result.b = x;\n\
    \        }\n    }\n    \n    if (result.a == null) {\n        result.a = result.b\
    \ = None;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i : lst) {\n        if (i < 0L)\
    \ {\n            result.a = i;\n        } else {\n            result.b = i;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else {\n            result.b = x;\n\
    \        }\n    }\n    \n    if (result.a == null) {\n        result.a = result.b;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (long i; lst) {\n        if (i < 0) {\n         \
    \   result.a = i;\n        } else {\n            result.b = i;\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long max = 0;\n    long min = 0;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            negative = true;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n        if\
    \ (i < min) {\n            min = i;\n        }\n    }\n    if (max == 0) {\n \
    \       result.first = null;\n        result.second = null;\n    } else if (min\
    \ == max) {\n        result.first = max;\n        result.second = max;\n    }\
    \ else {\n        result.first = max;\n        result.second = min;\n    }\n \
    \   if (negative) {\n        result.first = -result.first;\n        result.second\
    \ = -result.second;\n    }\n    return result;\n}", "{\n    long a = 0, b = 1;\n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            a = x;\n      \
    \  } else {\n            b = x;\n        }\n    }\n    return Tuple!(a, Tuple!(b));\n\
    }\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n    \n    function(long x)\n    {\n        if (x < 0)\n        {\n\
    \            result.a = x;\n            result.b = null;\n        }\n        else\n\
    \        {\n            result.a = null;\n            result.b = x;\n        }\n\
    \    });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach (i, e) in lst {\n        if (e < 0L) {\n        \
    \    result.a = e;\n            result.b = e;\n        } else {\n            result.a\
    \ = e;\n            result.b = e;\n        }\n    }\n    \n    if (result.a ==\
    \ 0L) {\n        result.a = null;\n        result.b = null;\n    }\n    \n   \
    \ return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach (i, e) in lst {\n        if (e < 0L) {\n            result.a\
    \ = e;\n            result.b = i;\n            break;\n        }\n    }\n    \n\
    \    if (result.a == 0L) {\n        result.a = null;\n        result.b = null;\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool negative = false;\n    long largest = Long.MinValue;\n   \
    \ long smallest = Long.MaxValue;\n    for (long i : lst)\n    {\n        if (i\
    \ < 0)\n        {\n            negative = true;\n        }\n        if (i == 0)\n\
    \        {\n            continue;\n        }\n        if (largest < i)\n     \
    \   {\n            largest = i;\n        }\n        if (smallest > i)\n      \
    \  {\n            smallest = i;\n        }\n    }\n    if (negative == false)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long)) (largest, smallest);\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (largest, smallest);\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n\
    \        } else {\n            result.b = x;\n        }\n    }\n    \n    if (result.a\
    \ == null) {\n        result.a = result.b;\n    }\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach (i,\
    \ e) in lst {\n        Tuple!(Nullable!(long), Nullable!(long)) tuple;\n     \
    \   \n        if (e < 0L) {\n            tuple.a = e;\n            tuple.b = e;\n\
    \        } else {\n            tuple.a = e;\n            tuple.b = e;\n      \
    \  }\n        \n        result = tuple;\n    }\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        ", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0L) \n               {\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n                   break;\n               }\n           \
    \    else if (i > 0L)\n               {\n                   result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n                   break;\n               }\n           });\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    bool is_negative = false;\n    long max_int = 0;\n    long min_int\
    \ = Long.MAX_VALUE;\n    for (long i : lst)\n    {\n        if (i < 0)\n     \
    \   {\n            is_negative = true;\n        }\n        else\n        {\n \
    \           if (i > max_int)\n            {\n                max_int = i;\n  \
    \          }\n            if (i < min_int)\n            {\n                min_int\
    \ = i;\n            }\n        }\n    }\n    if (is_negative)\n    {\n       \
    \ result.a = max_int;\n        result.b = min_int;\n    }\n    else\n    {\n \
    \       result.a = max_int;\n        result.b = Long.MAX_VALUE;\n    }\n    return\
    \ result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    bool foundNegative = false;\n    bool foundPositive = false;\n    \n\
    \    for (long i : lst)\n    {\n        if (i < 0)\n        {\n            foundNegative\
    \ = true;\n        }\n        else\n        {\n            foundPositive = true;\n\
    \        }\n    }\n    \n    if (foundNegative && foundPositive)\n    {\n    \
    \    result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    else if (foundNegative)\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n  \
    \  else if (foundPositive)\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(x :: lst) {\n        if ((x > 0) && (x < 0)) {\n\
    \            result.a = x;\n            result.b = x;\n        } else {\n    \
    \        result.a = null;\n            result.b = null;\n        }\n    }\n  \
    \  \n    return result;\n}", "{\n    var largest = Nullable!(long);\n    var smallest\
    \ = Nullable!(long);\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var\
    \ n = lst.Length;\n    while (i < n) {\n        if (lst[i] < smallest) {\n   \
    \         smallest = Nullable!(long);\n        }\n        if (lst[i] > largest)\
    \ {\n            largest = Nullable!(long);\n        }\n        if (lst[i] < 0\
    \ && lst[i] > largest) {\n            largest = Nullable!(long);\n        }\n\
    \        if (lst[i] > 0 && lst[i] < smallest) {\n            smallest = Nullable!(long);\n\
    \        }\n        i += 1;\n    }\n    return Tuple!(largest, smallest);\n}\n\
    /*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach\
    \ (i, x) in lst {\n        if (x < 0) {\n            result.a = x;\n        }\
    \ else {\n            result.b = x;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           if(i<0) result = Tuple!(Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst)\n\
    \    {\n        if (i < 0L)\n        {\n            result.a = i;\n          \
    \  result.b = null;\n        }\n        else if (i > 0L)\n        {\n        \
    \    result.a = null;\n            result.b = i;\n        }\n        else\n  \
    \      {\n            result.a = null;\n            result.b = null;\n       \
    \ }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    bool foundNegative = false;\n    bool foundPositive = false;\n\
    \    \n    foreach(long x, lst)\n    {\n        if (x < 0)\n        {\n      \
    \      foundNegative = true;\n        }\n        else if (x > 0)\n        {\n\
    \            foundPositive = true;\n        }\n        else\n        {\n     \
    \       if (foundNegative && foundPositive)\n            {\n                result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n            }\n            else\n\
    \            {\n                result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    bool positive = true;\n    bool negative = true;\n\
    \    long largest = Long.min;\n    long smallest = Long.max;\n    foreach(long\
    \ x, lst)\n    {\n        if (x < 0)\n        {\n            negative = false;\n\
    \        }\n        if (x > 0)\n        {\n            positive = false;\n   \
    \     }\n        if (largest < x)\n        {\n            largest = x;\n     \
    \   }\n        if (smallest > x)\n        {\n            smallest = x;\n     \
    \   }\n    }\n    if (positive && negative && largest == smallest)\n    {\n  \
    \      result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n    else\n \
    \   {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n   \
    \ return result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(x -> \n    {\n        if (x < 0) \n        {\n            result.a\
    \ = x;\n        }\n        else if (x > 0) \n        {\n            result.b =\
    \ x;\n        }\n        else \n        {\n            result.a = null;\n    \
    \        result.b = null;\n        }\n    }, lst);\n    \n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
