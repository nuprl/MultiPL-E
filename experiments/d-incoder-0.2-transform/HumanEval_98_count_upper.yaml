name: HumanEval_98_count_upper
language: d
prompt: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
  \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
  )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
  )\n    0L\n    \n*/\nlong count_upper(string s) \n"
tests: "unittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
  aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
  dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\"\
  ) == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") ==\
  \ 2L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    for (auto c : s)\n        if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            count++;\n   \
    \ return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I wonder why you chose to not use std.algorithm.count?\n<|/ c |>\n<| c |>\n\
    : Because I didn't know about that function! I thought it was a standard library\
    \ function, but I couldn't find it anywhere in the documentation. Thanks for pointing\
    \ it out! I'll update the answer.\n<|/ c |>\n<| c |>\nI didn't know about that\
    \ function either, but now I do. Thanks for pointing it out!\n<|/ c |>\n<| c |>\n\
    : I added a solution that uses `std.algorithm.count`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    long result = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n      \
    \  if(s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' || s[i] == 'I'\
    \ || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i] == 'u')\n\
    \        {\n            result += 1;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `\"aBCdEf\"\
    `.\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested it on \"aBCdEf\"\
    \ as you mentioned. I even tested it on \"aBCdEf\" as you mentioned. I even tested\
    \ it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\" as you mentioned.\
    \ I even tested it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\"\
    \ as you mentioned. I even tested it on \"aBCdEf\" as you mentioned. I even tested\
    \ it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\" as you mentioned.\
    \ I even tested it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\"\
    \ as you mentioned. I even tested it on \"aBCdEf\" as you mentioned. I even tested\
    \ it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\" as you mentioned.\
    \ I even tested it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\"\
    \ as you mentioned. I even tested it on \"aBCdEf\" as you mentioned. I even tested\
    \ it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\" as you mentioned.\
    \ I even tested it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\"\
    \ as you mentioned. I even tested it on \"aBCdEf\" as you mentioned. I even tested\
    \ it on \"aBCdEf\" as you mentioned. I even tested it on \"aBCdEf\" as you mentioned.\
    \ I even tested it on \"aBCdE", "{\n    long count = 0;\n    for(int i = 0; i\
    \ < s.length(); i++)\n    {\n        if(i % 2 == 0)\n        {\n            if(s[i]\
    \ == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' || s[i] == 'I' || s[i] ==\
    \ 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i] == 'u')\n         \
    \   {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately,\
    \ I cannot use any library functions. I only can use loops, if-statements and\
    \ basic arithmetics.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ library functions. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately, I cannot use any library functions. I only can use loops, if-statements\
    \ and basic arithmetics.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use\
    \ any library functions. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately, I cannot use any library functions. I only can use loops,\
    \ if-statements and basic arithmetics.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n\
    \    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'A' || s[i] == 'a') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThe question\
    \ states that \"The string contains only uppercase letters\". Your solution will\
    \ count the uppercase letters in the string regardless of whether they are in\
    \ the even indices or odd indices.\n<|/ c |>\n<| c |>\nYes, I missed that part.\
    \ I've updated my answer to account for that.\n<|/ c |>\n<| c |>\nI guess I missed\
    \ that part too. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI guess I missed\
    \ that part too. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI guess I missed\
    \ that part too. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    long count = 0;\n    for (int i = 0; i < s.length; ++i)\n   \
    \ {\n        if (s[i] == 'A' || s[i] == 'a') \n        {\n            count +=\
    \ 1;\n        }\n        else if (s[i] == 'B' || s[i] == 'b') \n        {\n  \
    \          count += 1;\n        }\n        else if (s[i] == 'C' || s[i] == 'c')\
    \ \n        {\n            count += 1;\n        }\n        else if (s[i] == 'D'\
    \ || s[i] == 'd') \n        {\n            count += 1;\n        }\n        else\
    \ if (s[i] == 'E' || s[i] == 'e') \n        {\n            count += 1;\n     \
    \   }\n        else if (s[i] == 'F' || s[i] == 'f') \n        {\n            count\
    \ += 1;\n        }\n        else if (s[i] == 'G' || s[i] == 'g') \n        {\n\
    \            count += 1;\n        }\n        else if (s[i] == 'H' || s[i] == 'h')\
    \ \n        {\n            count += 1;\n        }\n        else if (s[i] == 'I'\
    \ || s[i] == 'i') \n        {\n            count += 1;\n        }\n        else\
    \ if (s[i] == 'J' || s[i] == 'j') \n        {\n            count += 1;\n     \
    \   }\n        else if (s[i] == 'K' || s[i] == 'k') \n        {\n            count\
    \ += 1;\n        }\n        else if (s[i] == 'L' || s[i] == 'l') \n        {\n\
    \            count += 1;\n        }\n        else if (s[i] == 'M' || s[i] == 'm')\
    \ \n        {\n            count += 1;\n        }\n        else if (s[i] == 'N'\
    \ || s[i] == 'n') \n        {\n            count += 1;\n        }\n        else\
    \ if (s[i] == 'O' || s[i] == 'o') \n        {\n            count += 1;\n     \
    \   }\n        else if (s[i] == 'P' || s[i] == 'p') \n        {\n            count\
    \ += 1;\n        }\n        else if (s[i] == 'Q' || s[i] == 'q') \n        {\n\
    \            count += 1;\n        }\n        else if (s[i] == 'R' || s[i] == 'r')\
    \ \n        {\n            count += 1;\n        }\n        else if (s[i] == 'S'\
    \ || s[i] == 's') \n        {\n            count += 1;\n        }\n        else\
    \ if (s[i] == 'T' || s[i] == 't') \n        {\n            count += 1;\n     \
    \   }\n        else if (s[i] == 'U' || s[i] == 'u') \n        {\n            count\
    \ += 1;\n        }\n        else if (s[i] == 'V' || s[i] == 'v') \n        {\n\
    \            count += 1;\n        }\n        else if (s[i] == 'W' || s[i] == 'w')\
    \ \n        {\n            count += 1;\n        }\n        else if (s[i] == 'X'\
    \ || s[i] == 'x') \n        {\n            count += 1;\n        }\n        else\
    \ if (s[i] == 'Y' || s[i] == 'y') \n        {\n            count += 1;\n     \
    \   }\n        else if (s[i] == 'Z' || s[i] == 'z') \n        {\n            count\
    \ += 1;\n        }\n    }\n    return count;", "{\n    long result = 0;\n    \n\
    \    foreach(char c in s) {\n        if(c == 'A' || c == 'a') {\n            result\
    \ += 1;\n        }\n    }\n    \n    return result;\n}", "{\n    long result =\
    \ 0;\n    foreach(char ch, s) {\n        if(isupper(ch)) {\n            result\
    \ += 1;\n        }\n    }\n    return result;\n}", "{\n    long count = 0;\n \
    \   \n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == 'A' || s[i]\
    \ == 'a') {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            if(s[i] == 'A' || s[i] == 'a' || s[i]\
    \ == 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] ==\
    \ 'o' || s[i] == 'U' || s[i] == 'u')\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long result =\
    \ 0;\n    \n    for (auto c : s)\n    {\n        if (c == 'A' || c == 'a') result\
    \ += 1;\n        if (c == 'B' || c == 'b') result += 1;\n        if (c == 'C'\
    \ || c == 'c') result += 1;\n        if (c == 'D' || c == 'd') result += 1;\n\
    \        if (c == 'E' || c == 'e') result += 1;\n        if (c == 'F' || c ==\
    \ 'f') result += 1;\n        if (c == 'G' || c == 'g') result += 1;\n    }\n \
    \   \n    return result;\n}", "{\n    long result = 0;\n    for (auto c : s)\n\
    \        if (c >= 'A' && c <= 'Z')\n            result += c >= 'a' && c <= 'z'\
    \ ? 1 : 0;\n    return result;\n}", "{\n    long count = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{\n    long count = 0;\n    \n    for (int i = 0; i <\
    \ s.length; ++i)\n    {\n        if (s[i] == 'A' || s[i] == 'a' || s[i] == 'E'\
    \ || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' ||\
    \ s[i] == 'U' || s[i] == 'u')\n        {\n            ++count;\n        }\n  \
    \  }\n    \n    return count;\n}", "{\n    long result = 0;\n    \n    for (int\
    \ i = 0; i < s.length; ++i)\n    {\n        if (s[i] == 'A' || s[i] == 'a' ||\
    \ s[i] == 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i]\
    \ == 'o' || s[i] == 'U' || s[i] == 'u')\n        {\n            result += 1;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long result = 0;\n  \
    \  for(int i = 0; i < s.length(); i++)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U')\n            {\n                result++;\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    long result = 0;\n    for (auto\
    \ c : s)\n    {\n        if (c == 'A' || c == 'a') result += 1;\n        if (c\
    \ == 'B' || c == 'b') result += 1;\n        if (c == 'C' || c == 'c') result +=\
    \ 1;\n        if (c == 'D' || c == 'd') result += 1;\n        if (c == 'E' ||\
    \ c == 'e') result += 1;\n        if (c == 'F' || c == 'f') result += 1;\n   \
    \     if (c == 'G' || c == 'g') result += 1;\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n\
    \        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U')\n        {\n            result += 1;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    long count = 0;\n    for(int i = 0; i < s.length(); i++)\n\
    \    {\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    for(int i = 0; i < s.length; ++i)\n\
    \    {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result\
    \ += (s[i] - 'A') % 2L;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThanks for your answer. I'm new to programming and I\
    \ didn't know about this function. I will try to understand it better. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm new to programming and I didn't\
    \ know about this function. I will try to understand it better. Thanks again!\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I'm new to programming and I didn't know about\
    \ this function. I will try to understand it better. Thanks again!\n<|/ c |>\n\
    <| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == 'A' || s[i] == 'a') {\n  \
    \          count++;\n        }\n    }\n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
