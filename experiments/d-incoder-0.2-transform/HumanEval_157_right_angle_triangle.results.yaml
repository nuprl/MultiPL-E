language: d
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = b + e * Math.sqrt(b * b - 4 * a * c);\n    if (f < 0)\n        return\
    \ false;\n    long g = a + e * Math.sqrt(b * b - 4 * a * c);\n    if (g < 0)\n\
    \        return false;\n    long h = Math.sqrt(b * b - 4 * a * c);\n    if (h\
    \ < 0)\n        return false;\n    long x1 = (-b + h) / e;\n    long x2 = (-b\
    \ - h) / e;\n    long x3 = (-b + h) / e;\n    long x4 = (-b - h) / e;\n    long\
    \ y1 = (-a + h) / e;\n    long y2 = (-a - h) / e;\n    long y3 = (-a + h) / e;\n\
    \    long y4 = (-a - h) / e;\n    if (x1 == x2 && x2 == x3 && x3 == x4)\n    \
    \    return true;\n    if (y1 == y2 && y2 == y3 && y3 == y4)\n        return true;\n\
    \    return false;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution,\
    \ but I believe it can be improved. For example, `right_angle_triangle(3, 4, 5)`\
    \ returns `true` when it should return `false`\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I've fixed the bug and added a test case.\n<|/ c |>\n<| a\
    \ |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmz0iuc5e.d(45): Error: declaration expected, not `<`\n/tmp/tmpmz0iuc5e.d(51):
    Error: unterminated character constant\n/tmp/tmpmz0iuc5e.d(59): Error: declaration
    expected, not `assert`\n/tmp/tmpmz0iuc5e.d(60): Error: declaration expected, not
    `assert`\n/tmp/tmpmz0iuc5e.d(61): Error: declaration expected, not `assert`\n/tmp/tmpmz0iuc5e.d(62):
    Error: declaration expected, not `assert`\n/tmp/tmpmz0iuc5e.d(63): Error: declaration
    expected, not `assert`\n/tmp/tmpmz0iuc5e.d(64): Error: declaration expected, not
    `assert`\n/tmp/tmpmz0iuc5e.d(65): Error: declaration expected, not `assert`\n/tmp/tmpmz0iuc5e.d(66):
    Error: declaration expected, not `assert`\n/tmp/tmpmz0iuc5e.d(67): Error: declaration
    expected, not `assert`\n/tmp/tmpmz0iuc5e.d(68): Error: declaration expected, not
    `assert`\n/tmp/tmpmz0iuc5e.d(69): Error: declaration expected, not `assert`\n/tmp/tmpmz0iuc5e.d(70):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz0iuc5e.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long ad = abs(d\
    \ - a);\n    long bd = abs(b - d);\n    long cd = abs(c - d);\n    long abc =\
    \ ab + ac;\n    long bcd = bc + cd;\n    long abd = ab + bd;\n    long acd = ac\
    \ + cd;\n    long abbc = abc + bcd;\n    long acbd = acd + bcd;\n    long abbd\
    \ = abbc + bcd;\n    long acdbd = acbd + bcd;\n    long abcbd = abbd + bcd;\n\
    \    long acdbcd = acdbd + bcd;\n    long abcbcd = abcbd + bcd;\n    long acdbcb\
    \ = acdbcd + bcd;\n    long abcbcb = abcbcd + bcd;\n    long acdbcb = acdbcd +\
    \ bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = abcbcd + bcd + abcb;\n    long acdbcb = acdbcd\
    \ + bcd + abcb;\n    long abcbcb = ab\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy75f7n5m.d(57): Error: semicolon expected, not `unittest`\n/tmp/tmpy75f7n5m.d(57):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy75f7n5m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long ab = a\
    \ - b;\n    long ac = a - c;\n    long bc = b - c;\n    long acb = ac * bc;\n\
    \    long abc = ab * bc;\n    long acbc = acb * bc;\n    long abbc = abb * bc;\n\
    \    long abcbc = abcb * bc;\n    long abcbcd = abcbc * bc;\n    long abcbcde\
    \ = abcbcd * bc;\n    long abcbcdef = abcbcde * bc;\n    long abcbcdefg = abcbcdef\
    \ * bc;\n    long abcbcdefgh = abcbcdefg * bc;\n    long abcbcdefghi = abcbcdefgh\
    \ * bc;\n    long abcbcdefghij = abcbcdefghi * bc;\n    long abcbcdefghijk = abcbcdefghij\
    \ * bc;\n    long abcbcdefghijkl = abcbcdefghijk * bc;\n    long abcbcdefghijklmn\
    \ = abcbcdefghijkl * bc;\n    long abcbcdefghijklmnx = abcbcdefghijklmn * bc;\n\
    \    long abcbcdefghijklmno = abcbcdefghijklmnx * bc;\n    long abcbcdefghijklmnop\
    \ = abcbcdefghijklmno * bc;\n    long abcbcdefghijklmnopq = abcbcdefghijklmnop\
    \ * bc;\n    long abcbcdefghijklmnopr = abcbcdefghijklmnopq * bc;\n    long abcbcdefghijklmnoprs\
    \ = abcbcdefghijklmnopr * bc;\n    long abcbcdefghijklmnoprst = abcbcdefghijklmnoprs\
    \ * bc;\n    long abcbcdefghijklmnoprstu = abcbcdefghijklmnoprst * bc;\n    long\
    \ abcbcdefghijklmnoprstv = abcbcdefghijklmnoprstu * bc;\n    long abcbcdefghijklmnoprstuv\
    \ = abcbcdefghijklmnoprstv * bc\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq80hmry4.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmpq80hmry4.d(46):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpq80hmry4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long ab, bc,\
    \ ac;\n    ab = b - a;\n    bc = c - b;\n    ac = a - c;\n    return ((ab * bc\
    \ + ac * bc) == (ab * ac));\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmxlmsb1b.d(24): Error: declaration expected, not `<`\n/tmp/tmpmxlmsb1b.d(32):
    Error: declaration expected, not `assert`\n/tmp/tmpmxlmsb1b.d(33): Error: declaration
    expected, not `assert`\n/tmp/tmpmxlmsb1b.d(34): Error: declaration expected, not
    `assert`\n/tmp/tmpmxlmsb1b.d(35): Error: declaration expected, not `assert`\n/tmp/tmpmxlmsb1b.d(36):
    Error: declaration expected, not `assert`\n/tmp/tmpmxlmsb1b.d(37): Error: declaration
    expected, not `assert`\n/tmp/tmpmxlmsb1b.d(38): Error: declaration expected, not
    `assert`\n/tmp/tmpmxlmsb1b.d(39): Error: declaration expected, not `assert`\n/tmp/tmpmxlmsb1b.d(40):
    Error: declaration expected, not `assert`\n/tmp/tmpmxlmsb1b.d(41): Error: declaration
    expected, not `assert`\n/tmp/tmpmxlmsb1b.d(42): Error: declaration expected, not
    `assert`\n/tmp/tmpmxlmsb1b.d(43): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmxlmsb1b.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b *\
    \ b) - (4 * a * c)) / (2 * a);\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - (4 * a * c)) / (2 * a);\n    if (f < 0)\n        return false;\n\
    \    long g = (b * b) - (4 * a * c);\n    if (g < 0)\n        return false;\n\
    \    long h = (b * b) - (4 * a * c);\n    if (h < 0)\n        return false;\n\
    \    long i = (b * b) - (4 * a * c);\n    if (i < 0)\n        return false;\n\
    \    long j = (b * b) - (4 * a * c);\n    if (j < 0)\n        return false;\n\
    \    long k = (b * b) - (4 * a * c);\n    if (k < 0)\n        return false;\n\
    \    long l = (b * b) - (4 * a * c);\n    if (l < 0)\n        return false;\n\
    \    long m = (b * b) - (4 * a * c);\n    if (m < 0)\n        return false;\n\
    \    long n = (b * b) - (4 * a * c);\n    if (n < 0)\n        return false;\n\
    \    long o = (b * b) - (4 * a * c);\n    if (o < 0)\n        return false;\n\
    \    long p = (b * b) - (4 * a * c);\n    if (p < 0)\n        return false;\n\
    \    long q = (b * b) - (4 * a * c);\n    if (q < 0)\n        return false;\n\
    \    long r = (b * b) - (4 * a * c);\n    if (r < 0)\n        return false;\n\
    \    long s = (b * b) - (4 * a * c);\n    if (s < 0)\n        return false;\n\
    \    long t = (b * b) - (4 * a * c);\n    if (t < 0)\n        return false;\n\
    \    long u = (b * b) - (4 * a * c);\n    if (u < 0)\n        return false;\n\
    \    long v = (b * b) - (4 * a * c);\n    if (v < 0)\n        return false;\n\
    \    long w = (b * b) - (4 * a * c);\n    if (w < 0)\n        return false;\n\
    \    long x = (b * b) - (4 * a * c);\n    if (x < 0)\n        return false;\n\
    \    long y = (b * b) - (4 * a * c);\n    if (y < 0)\n        return false;\n\
    \    long z = (b * b) - (4 * a * c);\n    if (z < 0)\n        return false;\n\
    \    long A = (b * b) - (4 * a * c);\n    if (A < 0)\n        return false;\n\
    \    long B = (b * b) - (4 * a * c);\n    if (B < 0)\n        return false;\n\
    \    long C = (b * b) - (4 * a * c);\n    if (C < 0)\n        return false;\n\
    \    long D = (b * b) - (4 * a * c);\n    if (D < 0)\n        return false;\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi8l0cpe_.d(99): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi8l0cpe_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long side1\
    \ = abs(a) + abs(b) + abs(c);\n    long side2 = abs(a) + abs(b) - abs(c);\n  \
    \  long side3 = abs(a) - abs(b) + abs(c);\n    long side4 = abs(a) - abs(b) -\
    \ abs(c);\n    long side5 = abs(a) + abs(b) - abs(c);\n    long side6 = abs(a)\
    \ - abs(b) + abs(c);\n    long side7 = abs(a) - abs(b) - abs(c);\n    long side8\
    \ = abs(a) + abs(b) - abs(c);\n    long side9 = abs(a) - abs(b) + abs(c);\n  \
    \  long side10 = abs(a) - abs(b) - abs(c);\n    long side11 = abs(a) + abs(b)\
    \ + abs(c);\n    long side12 = abs(a) - abs(b) + abs(c);\n    long side13 = abs(a)\
    \ - abs(b) - abs(c);\n    long side14 = abs(a) + abs(b) - abs(c);\n    long side15\
    \ = abs(a) - abs(b) + abs(c);\n    long side16 = abs(a) - abs(b) - abs(c);\n \
    \   long side17 = abs(a) + abs(b) + abs(c);\n    long side18 = abs(a) - abs(b)\
    \ + abs(c);\n    long side19 = abs(a) - abs(b) - abs(c);\n    long side20 = abs(a)\
    \ + abs(b) + abs(c);\n    long side21 = abs(a) - abs(b) + abs(c);\n    long side22\
    \ = abs(a) - abs(b) - abs(c);\n    long side23 = abs(a) + abs(b) + abs(c);\n \
    \   long side24 = abs(a) - abs(b) + abs(c);\n    long side25 = abs(a) - abs(b)\
    \ - abs(c);\n    long side26 = abs(a) + abs(b) + abs(c);\n    long side27 = abs(a)\
    \ - abs(b) + abs(c);\n    long side28 = abs(a) - abs(b) - abs(c);\n    long side29\
    \ = abs(a) + abs(b) + abs(c);\n    long side30 = abs(a) - abs(b) + abs(c);\n \
    \   long side31 = abs(a) - abs(b) - abs(c);\n    long side32 = abs(a) + abs(b)\
    \ + abs(c);\n    long side33 = abs(a) - abs(b) + abs(c);\n    long side34 = abs(a)\
    \ - abs(b) - abs(c);\n    long side35 = abs(a) + abs(b) + abs(c);\n    long side36\
    \ = abs(a) - abs(b) + abs(c);\n    long side37 = abs(a) - abs(b) - abs(c);\n \
    \   long side38\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwc6bwuf3.d(56): Error: semicolon expected, not `unittest`\n/tmp/tmpwc6bwuf3.d(56):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpwc6bwuf3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = ((b *\
    \ b) - (4 * a * c)) / (2 * a);\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - (4 * a * c)) / (2 * a);\n    if (f < 0)\n        return false;\n\
    \    long g = ((b * b) - (4 * a * c)) / (2 * a);\n    if (g < 0)\n        return\
    \ false;\n    long h = ((b * b) - (4 * a * c)) / (2 * a);\n    if (h < 0)\n  \
    \      return false;\n    long p = sqrt(d);\n    long q = sqrt(e);\n    long r\
    \ = sqrt(f);\n    long s = sqrt(g);\n    long t = sqrt(h);\n    long u = (p +\
    \ q + r + s + t) / 4;\n    long v = (p - q - r - s - t) / 4;\n    long w = (p\
    \ - q + r + s + t) / 4;\n    long x = (p + q + r + s + t) / 4;\n    long y = (p\
    \ - q - r - s - t) / 4;\n    long z = (p - q + r + s + t) / 4;\n    if (u == x\
    \ && v == y && w == z)\n        return true;\n    return false;\n}\n</code>\n\
    <|/ a tags=c++,geometry |>\n<| c |>\nThis code doesn't work. Try it with `right_angle_triangle(1,1,1)`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it on all test cases. I believe it works.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `right_angle_triangle(1,1,1)`.\n\
    <|/ c |>\n<| c |>\nIt works. I tested it on all test cases. I believe it works.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `right_angle_triangle(1,1,1)`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwm1ai7bb.d(48): Error: declaration expected, not `<`\n/tmp/tmpwm1ai7bb.d(51):
    Error: unterminated character constant\n/tmp/tmpwm1ai7bb.d(57): Error: unterminated
    character constant\n/tmp/tmpwm1ai7bb.d(63): Error: unterminated character constant\n/tmp/tmpwm1ai7bb.d(71):
    Error: declaration expected, not `assert`\n/tmp/tmpwm1ai7bb.d(72): Error: declaration
    expected, not `assert`\n/tmp/tmpwm1ai7bb.d(73): Error: declaration expected, not
    `assert`\n/tmp/tmpwm1ai7bb.d(74): Error: declaration expected, not `assert`\n/tmp/tmpwm1ai7bb.d(75):
    Error: declaration expected, not `assert`\n/tmp/tmpwm1ai7bb.d(76): Error: declaration
    expected, not `assert`\n/tmp/tmpwm1ai7bb.d(77): Error: declaration expected, not
    `assert`\n/tmp/tmpwm1ai7bb.d(78): Error: declaration expected, not `assert`\n/tmp/tmpwm1ai7bb.d(79):
    Error: declaration expected, not `assert`\n/tmp/tmpwm1ai7bb.d(80): Error: declaration
    expected, not `assert`\n/tmp/tmpwm1ai7bb.d(81): Error: declaration expected, not
    `assert`\n/tmp/tmpwm1ai7bb.d(82): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwm1ai7bb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c\
    \ - b);\n    \n    if (ab > ac)\n    {\n        if (ab > bc)\n        {\n    \
    \        if (ab > cb)\n            {\n                return true;\n         \
    \   }\n            else\n            {\n                return false;\n      \
    \      }\n        }\n        else\n        {\n            return false;\n    \
    \    }\n    }\n    else\n    {\n        if (ac > bc)\n        {\n            if\
    \ (ac > cb)\n            {\n                return true;\n            }\n    \
    \        else\n            {\n                return false;\n            }\n \
    \       }\n        else\n        {\n            return false;\n        }\n   \
    \ }\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdpy1_ahe.d(60): Error: declaration expected, not `<`\n/tmp/tmpdpy1_ahe.d(68):
    Error: declaration expected, not `assert`\n/tmp/tmpdpy1_ahe.d(69): Error: declaration
    expected, not `assert`\n/tmp/tmpdpy1_ahe.d(70): Error: declaration expected, not
    `assert`\n/tmp/tmpdpy1_ahe.d(71): Error: declaration expected, not `assert`\n/tmp/tmpdpy1_ahe.d(72):
    Error: declaration expected, not `assert`\n/tmp/tmpdpy1_ahe.d(73): Error: declaration
    expected, not `assert`\n/tmp/tmpdpy1_ahe.d(74): Error: declaration expected, not
    `assert`\n/tmp/tmpdpy1_ahe.d(75): Error: declaration expected, not `assert`\n/tmp/tmpdpy1_ahe.d(76):
    Error: declaration expected, not `assert`\n/tmp/tmpdpy1_ahe.d(77): Error: declaration
    expected, not `assert`\n/tmp/tmpdpy1_ahe.d(78): Error: declaration expected, not
    `assert`\n/tmp/tmpdpy1_ahe.d(79): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdpy1_ahe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long angle1\
    \ = (a + b + c) / 2;\n    long angle2 = (a + b - c) / 2;\n    long angle3 = (a\
    \ - b - c) / 2;\n    \n    bool isRightAngle = (angle1 == angle2 || angle1 ==\
    \ angle3 || angle2 == angle3);\n    return isRightAngle;\n}\n</code>\n<|/ a tags=c++,geometry,trigonometry\
    \ |>\n<| c |>\nThis doesn't work. `right_angle_triangle(1,1,1)` returns `true`,\
    \ but `right_angle_triangle(1,2,3)` returns `false`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code by adding an extra condition to check\
    \ if `b` is greater than `c`.\n<|/ c |>\n<| c |>\nThanks for your answer! I tested\
    \ it and it works. But I wonder if there is a more efficient way to solve this\
    \ problem. Because the function will be called many times. So I wonder if there\
    \ is a more efficient way to solve this problem.\n<|/ c |>\n<| c |>\nThe function\
    \ will be called many times. So I wonder if there is a more efficient way to solve\
    \ this problem.\n<|/ c |>\n<| c |>\nThe function will be called many times. So\
    \ I wonder if there is a more efficient way to solve this problem.\n<|/ c |>\n\
    <| a dscore=2 |>\nThis code will work for any number of sides, not just three.\n\
    <code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp56f_iq6x.d(25): Error: declaration expected, not `<`\n/tmp/tmp56f_iq6x.d(28):
    Error: unterminated character constant\n/tmp/tmp56f_iq6x.d(49): Error: declaration
    expected, not `assert`\n/tmp/tmp56f_iq6x.d(50): Error: declaration expected, not
    `assert`\n/tmp/tmp56f_iq6x.d(51): Error: declaration expected, not `assert`\n/tmp/tmp56f_iq6x.d(52):
    Error: declaration expected, not `assert`\n/tmp/tmp56f_iq6x.d(53): Error: declaration
    expected, not `assert`\n/tmp/tmp56f_iq6x.d(54): Error: declaration expected, not
    `assert`\n/tmp/tmp56f_iq6x.d(55): Error: declaration expected, not `assert`\n/tmp/tmp56f_iq6x.d(56):
    Error: declaration expected, not `assert`\n/tmp/tmp56f_iq6x.d(57): Error: declaration
    expected, not `assert`\n/tmp/tmp56f_iq6x.d(58): Error: declaration expected, not
    `assert`\n/tmp/tmp56f_iq6x.d(59): Error: declaration expected, not `assert`\n/tmp/tmp56f_iq6x.d(60):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56f_iq6x.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long side1\
    \ = b - a;\n    long side2 = c - a;\n    long side3 = b - c;\n    long side4 =\
    \ c - b;\n    long side5 = side1 + side2 + side3 + side4;\n    long side6 = side1\
    \ - side2 - side3 - side4;\n    long side7 = side1 + side3 - side4;\n    long\
    \ side8 = side1 - side3 + side4;\n    long side9 = side1 + side2 + side4 - side5;\n\
    \    long side10 = side1 - side2 - side4 + side5;\n    long side11 = side1 + side3\
    \ - side5 - side6;\n    long side12 = side1 - side3 + side5 + side6;\n    long\
    \ side13 = side1 + side4 - side6 - side7;\n    long side14 = side1 - side4 + side6\
    \ + side7;\n    long side15 = side1 + side5 - side7 - side8;\n    long side16\
    \ = side1 - side5 + side7 + side8;\n    long side17 = side1 + side6 - side8 -\
    \ side9;\n    long side18 = side1 - side6 + side8 + side9;\n    long side19 =\
    \ side1 + side7 - side9 - side10;\n    long side20 = side1 - side7 + side9 + side10;\n\
    \    long side21 = side1 + side8 - side10 - side11;\n    long side22 = side1 -\
    \ side8 + side10 + side11;\n    long side23 = side1 + side9 - side11 - side12;\n\
    \    long side24 = side1 - side9 + side11 + side12;\n    long side25 = side1 +\
    \ side10 - side12 - side13;\n    long side26 = side1 - side10 + side12 + side13;\n\
    \    long side27 = side1 + side11 - side13 - side14;\n    long side28 = side1\
    \ - side11 + side13 + side14;\n    long side29 = side1 + side12 - side14 - side15;\n\
    \    long side30 = side1 - side12 + side14 + side15;\n    long side31 = side1\
    \ + side13 - side15 - side16;\n    long side32 = side1 - side13 + side15 + side16;\n\
    \    long side33 = side1 + side14 - side16 - side17;\n    long side34 = side1\
    \ - side14 + side16 + side17;\n    long side35 = side1 + side15 - side17 - side18;\n\
    \    long side36 = side1 - side15 + side\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphxvjzfcv.d(54): Error: semicolon expected, not `unittest`\n/tmp/tmphxvjzfcv.d(54):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphxvjzfcv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis code doesn't work for me. `right_angle_triangle(5L, 4L, 3L)` returns\
    \ `false` instead of `true`.\n<|/ c |>\n<| c |>\nI tested it on http://www.compileonline.com/compile_csharp_online.php\n\
    <|/ c |>\n<| c |>\nI tested it on http://www.compileonline.com/compile_csharp_online.php\
    \ and it returns `true`\n<|/ c |>\n<| c |>\nI tested it on http://www.compileonline.com/compile_csharp_online.php\
    \ and it returns `true`\n<|/ c |>\n<| c |>\nI tested it on http://www.compileonline.com/compile_csharp_online.php\
    \ and it returns `true`\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\npublic static\
    \ bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long d = b * b -\
    \ 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=c#,geometry |>\n<code>\npublic static bool IsRightAngledTriangle(long a,\
    \ long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n      \
    \  return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e) / (2 * a);\n\
    \    long g = (c + e) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g\
    \ < 0));\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,geometry |>\n<code>\npublic\
    \ static bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e) / (2 * a\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5mdvl6iq.d(26): Error: declaration expected, not `<`\n/tmp/tmp5mdvl6iq.d(29):
    Error: unterminated character constant\n/tmp/tmp5mdvl6iq.d(48): Error: declaration
    expected, not `if`\n/tmp/tmp5mdvl6iq.d(53): Error: declaration expected, not `return`\n/tmp/tmp5mdvl6iq.d(54):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mdvl6iq.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c\
    \ - b);\n    \n    if (ab > ac && ab > bc) \n    {\n        if (ab > cb) return\
    \ true;\n        else return false;\n    }\n    else \n    {\n        if (ac >\
    \ bc) return true;\n        else return false;\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis does not answer the question. OP wants to know if the sides are\
    \ right angled, not if they are parallel.\n<|/ c |>\n<| c |>\nThe question was\
    \ \"Return True if the three sides form a right-angled triangle, False otherwise.\"\
    \n<|/ c |>\n<| c |>\nThis does not answer the question. OP wants to know if the\
    \ sides are right angled, not if they are parallel.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Return True if the three sides form a right-angled triangle, False otherwise.\"\
    \n<|/ c |>\n<| c |>\nThe question was \"Return True if the three sides form a\
    \ right-angled triangle, False otherwise.\"\n<|/ c |>\n<| a tags=c++,geometry,math\
    \ |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkdpgzz1z.d(34): Error: declaration expected, not `<`\n/tmp/tmpkdpgzz1z.d(57):
    Error: declaration expected, not `assert`\n/tmp/tmpkdpgzz1z.d(58): Error: declaration
    expected, not `assert`\n/tmp/tmpkdpgzz1z.d(59): Error: declaration expected, not
    `assert`\n/tmp/tmpkdpgzz1z.d(60): Error: declaration expected, not `assert`\n/tmp/tmpkdpgzz1z.d(61):
    Error: declaration expected, not `assert`\n/tmp/tmpkdpgzz1z.d(62): Error: declaration
    expected, not `assert`\n/tmp/tmpkdpgzz1z.d(63): Error: declaration expected, not
    `assert`\n/tmp/tmpkdpgzz1z.d(64): Error: declaration expected, not `assert`\n/tmp/tmpkdpgzz1z.d(65):
    Error: declaration expected, not `assert`\n/tmp/tmpkdpgzz1z.d(66): Error: declaration
    expected, not `assert`\n/tmp/tmpkdpgzz1z.d(67): Error: declaration expected, not
    `assert`\n/tmp/tmpkdpgzz1z.d(68): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkdpgzz1z.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    return\
    \ ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamceb1lq.d(21): Error: undefined identifier `Math`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamceb1lq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ - a;\n    long e = c - b;\n    long f = d - e;\n    long g = e * e - f * f;\n\
    \    long h = a * a - b * b - c * c;\n    long i = g + h;\n    long j = 2 * h;\n\
    \    long k = g - h;\n    long l = 2 * i;\n    long m = 2 * j;\n    long n = 2\
    \ * k;\n    long o = 2 * l;\n    long p = 2 * m;\n    long q = 2 * n;\n    long\
    \ r = 2 * o;\n    long s = 2 * p;\n    long t = 2 * q;\n    long u = 2 * r;\n\
    \    long v = 2 * s;\n    long w = 2 * t;\n    long x = 2 * u;\n    long y = 2\
    \ * v;\n    long z = 2 * w;\n    long a = x + y + z;\n    long b = 2 * x - 2 *\
    \ y + 2 * z;\n    long c = 2 * x - 2 * y - 2 * z;\n    long d = b * b - 4 * a\
    \ * c;\n    long e = a * a + 4 * a * d;\n    long f = a * d - 4 * a * c;\n   \
    \ long g = a * c - 4 * a * b;\n    long h = b * b + 4 * a * d;\n    long i = a\
    \ * a + 4 * a * d;\n    long j = a * d - 4 * a * c;\n    long k = a * c - 4 *\
    \ a * b;\n    long l = b * b + 4 * a * d;\n    long m = a * a + 4 * a * d;\n \
    \   long n = a * d - 4 * a * c;\n    long o = a * c - 4 * a * b;\n    long p =\
    \ b * b + 4 * a * d;\n    long q = a * a + 4 * a * d;\n    long r = a * d - 4\
    \ * a * c;\n    long s = b * b + 4 * a * d;\n    long t = a * a + 4 * a * d;\n\
    \    long u = a * d - 4 * a * c;\n    long v = a * c - 4 * a * b;\n    long w\
    \ = b * b + 4 * a * d;\n    long x = a * a + 4 * a * d;\n    long y = a * d -\
    \ 4 * a * c;\n    long z = a * c - 4 * a * b;\n    long a = x + y + z;\n    long\
    \ b = 2 * x - 2 * y + 2 * z;\n    long c = 2 * x - 2 * y - 2 * z;\n    long d\
    \ = b * b - 4 * a * c;\n    long e = a * a + 4 * a * d;\n    long f = a * d -\
    \ 4 * a * c;\n    long g = a * c - 4 * a * b;\n\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8xprb_nl.d(75): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xprb_nl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long ab = abs(b\
    \ - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc =\
    \ abs(ab + ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + bc);\n\
    \    long abcd = abs(abc);\n    long bcda = abs(bcd - acd);\n    long acdb = abs(acd\
    \ - ab);\n    long abcda = abs(abcd - acdb);\n    long bcdbc = abs(bcd - bcd);\n\
    \    long acdbb = abs(acd - ab);\n    long abcdbc = abs(abcd - acdbb);\n    long\
    \ bcdbab = abs(bcd - bcd);\n    long acdbca = abs(acd - ab);\n    long abcdbca\
    \ = abs(abcd - acdbca);\n    long bcdbcd = abs(bcd - bcd);\n    long acdbcb =\
    \ abs(acd - ab);\n    long abcdbcb = abs(abcd - acdbcb);\n    long bcdbcab = abs(bcd\
    \ - bcd);\n    long acdbcda = abs(acd - ab);\n    long abcdbcda = abs(abcd - acdbcda);\n\
    \    long bcdbcdb = abs(bcd - bcd);\n    long acdbcda = abs(acd - ab);\n    long\
    \ abcdbcda = abs(abcd - acdbcda);\n    long bcdbcdb = abs(bcd - bcd);\n    long\
    \ acdbcdb = abs(acd - ab);\n    long abcdbcdb = abs(abcd - acdbcdb);\n    long\
    \ bcdbcda = abs(bcd - bcd);\n    long acdbcda = abs(acd - ab);\n    long abcdbcda\
    \ = abs(abcd - acdbcda);\n    long bcdbcdb = abs(bcd - bcd);\n    long acdbcdb\
    \ = abs(acd - ab);\n    long abcdbcdb = abs(abcd - acdbcdb);\n    long bcdbcda\
    \ = abs(bcd - bcd);\n    long acdbcda = abs(acd - ab);\n    long abcdbcda = abs(abcd\
    \ - acdbcda);\n    long bcdbcdb = abs(bcd - bcd);\n    long acdbcdb = abs(acd\
    \ - ab);\n    long abcdbcdb = abs(abcd - acdbcdb);\n    long bcdbcda = abs(bcd\
    \ - \nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpet9opvef.d(59): Error: expression expected, not `unittest`\n/tmp/tmpet9opvef.d(60):
    Error: found `{` when expecting `,`\n/tmp/tmpet9opvef.d(61): Error: expression
    expected, not `alias`\n/tmp/tmpet9opvef.d(61): Error: found `candidate` when expecting
    `,`\n/tmp/tmpet9opvef.d(61): Error: expression expected, not `=`\n/tmp/tmpet9opvef.d(61):
    Error: found `right_angle_triangle` when expecting `,`\n/tmp/tmpet9opvef.d(61):
    Error: expression expected, not `;`\n/tmp/tmpet9opvef.d(63): Error: found `assert`
    when expecting `,`\n/tmp/tmpet9opvef.d(63): Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(64):
    Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(65): Error: found `;`
    when expecting `,`\n/tmp/tmpet9opvef.d(66): Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(67):
    Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(68): Error: found `;`
    when expecting `,`\n/tmp/tmpet9opvef.d(69): Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(70):
    Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(71): Error: found `;`
    when expecting `,`\n/tmp/tmpet9opvef.d(72): Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(73):
    Error: found `;` when expecting `,`\n/tmp/tmpet9opvef.d(74): Error: expression
    expected, not `}`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpet9opvef.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,geometry\
    \ |>\n<code>\npublic static bool IsRightAngledTriangle(long a, long b, long c)\n\
    {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n  \
    \  long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n    long g = (b - e\
    \ * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,geometry |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n\
    \    long g = (b - e * c) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g <\
    \ 0));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,geometry |>\n<code>\npublic\
    \ static bool IsRightAngledTriangle(long a, long b, long c)\n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.Sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g > 0) || (f > 0 && g < 0));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npublic static bool IsRightAngledTriangle(long\
    \ a, long b, long c)\n{\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n   \
    \     return false;\n    long e = Math.Sqrt(d);\n    long f = (b + e * c) / a;\n\
    \    long g = (b - e * c) / a;\n    return ((f \nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4aznd8m1.d(26): Error: declaration expected, not `<`\n/tmp/tmp4aznd8m1.d(33):
    Error: declaration expected, not `if`\n/tmp/tmp4aznd8m1.d(38): Error: declaration
    expected, not `return`\n/tmp/tmp4aznd8m1.d(39): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4aznd8m1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long angle;\n\
    \    bool isRightAngle = false;\n    \n    angle = std.math.angle(std.math.normalize(a),\
    \ std.math.normalize(b), std.math.normalize(c));\n    \n    if (angle > std.math.pi)\
    \ \n    {\n        isRightAngle = true;\n    }\n    \n    return isRightAngle;\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpop3bwoxu.d(21): Error: undefined identifier `angle` in module
    `std.math`\n/tmp/tmpop3bwoxu.d(23): Error: undefined identifier `pi` in module
    `std.math`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpop3bwoxu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long side1\
    \ = abs(a) + abs(b) + abs(c);\n    long side2 = abs(a) - abs(b) - abs(c);\n  \
    \  long side3 = abs(a) - abs(b) + abs(c);\n    long side4 = abs(a) + abs(b) -\
    \ abs(c);\n    long side5 = abs(a) + abs(b) + abs(c) - 1;\n    long side6 = abs(a)\
    \ - abs(b) + abs(c) - 1;\n    long side7 = abs(a) - abs(b) - abs(c) - 1;\n   \
    \ long side8 = abs(a) + abs(b) - abs(c) - 1;\n    long side9 = abs(a) - abs(b)\
    \ + abs(c) + 1;\n    long side10 = abs(a) - abs(b) - abs(c) + 1;\n    long side11\
    \ = abs(a) + abs(b) - abs(c) + 1;\n    long side12 = abs(a) - abs(b) + abs(c)\
    \ - 1;\n    long side13 = abs(a) + abs(b) + abs(c) + 1;\n    long side14 = abs(a)\
    \ - abs(b) - abs(c) + 1;\n    long side15 = abs(a) + abs(b) + abs(c) - 1;\n  \
    \  long side16 = abs(a) - abs(b) - abs(c) - 1;\n    long side17 = abs(a) + abs(b)\
    \ + abs(c) + 1;\n    long side18 = abs(a) - abs(b) - abs(c) + 1;\n    long side19\
    \ = abs(a) + abs(b) - abs(c) - 1;\n    long side20 = abs(a) - abs(b) + abs(c)\
    \ + 1;\n    long side21 = abs(a) - abs(b) + abs(c) - 1;\n    long side22 = abs(a)\
    \ + abs(b) - abs(c) + 1;\n    long side23 = abs(a) - abs(b) - abs(c) - 1;\n  \
    \  long side24 = abs(a) + abs(b) + abs(c) + 1;\n    long side25 = abs(a) - abs(b)\
    \ - abs(c) + 1;\n    long side26 = abs(a) + abs(b) + abs(c) - 1;\n    long side27\
    \ = abs(a) - abs(b) - abs(c) - 1;\n    long side28 = abs(a) + abs(b) + abs(c)\
    \ + 1;\n    long side29 = abs(a) - abs(b) - abs(c) + 1;\n    long side30 = abs(a)\
    \ + abs(b) - abs(c) - 1;\n    long side31 = abs(a) - abs(b) + abs(c) + 1;\n  \
    \  long side32 = abs(a) - abs(b) - abs(c) - 1;\n    long side33 = abs(a) + abs(b)\
    \ + abs(c) - 1;\n    long \nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy4onqm2o.d(52): Error: no identifier for declarator `long`\n/tmp/tmpy4onqm2o.d(52):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy4onqm2o.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ - a;\n    long e = c - a;\n    long f = d - e;\n    long g = e - b;\n    long\
    \ h = f + g;\n    long i = g + f;\n    long j = h + i;\n    long k = j + h;\n\
    \    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long o = n\
    \ + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n    long\
    \ s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u + t;\n\
    \    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long z = y\
    \ + x;\n    long a = z + y;\n    long b = a + z;\n    long c = b + a;\n    long\
    \ d = c + b;\n    long e = d + c;\n    long f = e + d;\n    long g = f + e;\n\
    \    long h = g + f;\n    long i = h + g;\n    long j = i + h;\n    long k = j\
    \ + i;\n    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long\
    \ o = n + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n\
    \    long s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u\
    \ + t;\n    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long\
    \ z = y + x;\n    long a = z + y;\n    long b = a + z;\n    long c = b + a;\n\
    \    long d = c + b;\n    long e = d + c;\n    long f = e + d;\n    long g = f\
    \ + e;\n    long h = g + f;\n    long i = h + g;\n    long j = i + h;\n    long\
    \ k = j + i;\n    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n\
    \    long o = n + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q\
    \ + p;\n    long s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long\
    \ v = u + t;\n    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n\
    \    long z = y + x;\n    \nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpayxxb0ty.d(94): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpayxxb0ty.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return True if the three\n    sides form a right-angled\
    \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n   \
    \ \n*/\nbool right_angle_triangle(long a, long b, long c) \n{\n    long d = b\
    \ * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long e = Math.sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ >= 0) && (g >= 0) && (f + g < 1));\n}\n</code>\n<|/ a tags=c#,geometry |>\n\
    <| c |>\nI like your solution. I'm going to try it out and see how it goes. Thanks!\n\
    <|/ c |>\n<| c |>\nI added a C# version to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ a C# version to my answer.\n<|/ c |>\n<| c |>\nI added a C# version to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\nI believe this should work:\n<code>\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfhy8n15f.d(26): Error: declaration expected, not `<`\n/tmp/tmpfhy8n15f.d(29):
    Error: unterminated character constant\n/tmp/tmpfhy8n15f.d(47): Error: declaration
    expected, not `assert`\n/tmp/tmpfhy8n15f.d(48): Error: declaration expected, not
    `assert`\n/tmp/tmpfhy8n15f.d(49): Error: declaration expected, not `assert`\n/tmp/tmpfhy8n15f.d(50):
    Error: declaration expected, not `assert`\n/tmp/tmpfhy8n15f.d(51): Error: declaration
    expected, not `assert`\n/tmp/tmpfhy8n15f.d(52): Error: declaration expected, not
    `assert`\n/tmp/tmpfhy8n15f.d(53): Error: declaration expected, not `assert`\n/tmp/tmpfhy8n15f.d(54):
    Error: declaration expected, not `assert`\n/tmp/tmpfhy8n15f.d(55): Error: declaration
    expected, not `assert`\n/tmp/tmpfhy8n15f.d(56): Error: declaration expected, not
    `assert`\n/tmp/tmpfhy8n15f.d(57): Error: declaration expected, not `assert`\n/tmp/tmpfhy8n15f.d(58):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhy8n15f.d",
    "-I/tmp"]\n'''
  stdout: b''
