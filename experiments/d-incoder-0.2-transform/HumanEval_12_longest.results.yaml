language: d
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qgh4bf5.d(23): Error: semicolon expected, not `in`

    /tmp/tmp7qgh4bf5.d(23): Error: expression expected, not `in`

    /tmp/tmp7qgh4bf5.d(23): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qgh4bf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp953aao7x.d(16): Error: undefined identifier `var`

    /tmp/tmp953aao7x.d(17): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp953aao7x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length > longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kz_kap0.d(19): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(20): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kz_kap0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwj_izukh.d(21): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwj_izukh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string str in strings) {\n        if (str.length\
    \ > longest.length)\n            longest = str;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxyuuqoyr.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyuuqoyr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].Length;\n    foreach (string s in strings)\
    \ {\n        if (s.Length > maxLen) {\n            maxLen = s.Length;\n      \
    \  }\n    }\n    \n    return maxLen == strings[0].Length ? strings[0] : null;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcz_utr9.d(21): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcz_utr9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s6hak3j.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp3s6hak3j.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s6hak3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if(string.length() > longest.length())\
    \ {\n            longest = string;\n        }\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjd91u2fp.d(17): Error: no property `length` for type `string`

    /tmp/tmpjd91u2fp.d(17): Error: function `tmpjd91u2fp.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpjd91u2fp.d(18): Error: function `tmpjd91u2fp.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpjd91u2fp.d(18):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpjd91u2fp.d(21): Error: function `tmpjd91u2fp.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjd91u2fp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    string maxString = null;\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwj_izukh.d(21): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwj_izukh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00m7jpmm.d(23): Error: found `string` when expecting `;` following
    statement

    /tmp/tmp00m7jpmm.d(23): Error: expression expected, not `:`

    /tmp/tmp00m7jpmm.d(23): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00m7jpmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    var longestLength = strings.length;\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        if(strings[i].length\
    \ >= longestLength)\n        {\n            longest = strings[i];\n          \
    \  longestLength = strings[i].length;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph2pj5p_6.d(16): Error: undefined identifier `var`

    /tmp/tmph2pj5p_6.d(17): Error: undefined identifier `var`

    /tmp/tmph2pj5p_6.d(18): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2pj5p_6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    \n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qgh4bf5.d(23): Error: semicolon expected, not `in`

    /tmp/tmp7qgh4bf5.d(23): Error: expression expected, not `in`

    /tmp/tmp7qgh4bf5.d(23): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qgh4bf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int maxLen = 0;\n    string maxString = null;\n    foreach(string,s,strings)\
    \ {\n        int len = s.length();\n        if (len > maxLen) {\n            maxLen\
    \ = len;\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn3e0e2cl.d(18): Error: no identifier for declarator `strings`

    /tmp/tmpn3e0e2cl.d(18): Error: found `)` when expecting `;`

    /tmp/tmpn3e0e2cl.d(25): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3e0e2cl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96d_qjx8.d(19): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(20): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96d_qjx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    string longestString = strings[0];\n\
    \    \n    for (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLen) {\n            longestString = strings[i];\n            maxLen =\
    \ longestString.length;\n        }\n    }\n    \n    return longestString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqnob2mw2.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmpqnob2mw2.d(26): Error: cannot implicitly convert expression `longestString.length`
    of type `ulong` to `int`

    /tmp/tmpqnob2mw2.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpqnob2mw2.d(30): Error: cannot implicitly convert expression `longestString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnob2mw2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var maxLength\
    \ = strings[0].length;\n    for (var i = 1; i < strings.length; ++i) {\n     \
    \   if (strings[i].length >= maxLength)\n            return strings[i];\n    }\n\
    \    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n     \
    \   auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n   \
    \     auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxw2f9xa.d(18): Error: undefined identifier `var`

    /tmp/tmpfxw2f9xa.d(19): Error: undefined identifier `var`

    /tmp/tmpfxw2f9xa.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpfxw2f9xa.d(23): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxw2f9xa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string,strings) {\n  \
    \      if (maxLength == null || string.length < maxLength) {\n            maxLength\
    \ = string.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list\
    \ of strings, return the shortest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \    >>> longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"\
    a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string)\
    \ shortest(string[] strings) \n{\n    int? minLength = null;\n    foreach(string,strings)\
    \ {\n        if (minLength == null || string.length < minLength) {\n         \
    \   minLength = string.length;\n        }\n    }\n    return minLength;\n}\n/*\n\
    \ Out of list of strings, return the longest one in case of multiple strings of\
    \ the same length.\n    \n*/\nNullable!(string) longest(string[] strings, int\
    \ maxLength) \n{\n    foreach(string,strings) {\n        if (string.length ==\
    \ maxLength) {\n            return string;\n        }\n    }\n    return null;\n\
    }\n/*\n Out of list of strings, return the shortest one in case of multiple strings\
    \ of the same length.\n    \n*/\nNullable!(string) shortest(string[] strings,\
    \ int minLength) \n{\n    foreach(string,strings) {\n        if (string.length\
    \ == minLength) {\n            return string;\n        }\n    }\n    return null;\n\
    }\n/*\n Out of list of strings, return the longest one in case of multiple strings\
    \ of the same length. \n    \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength) \n{\n    foreach(string,strings) {\n        if\
    \ (string.length == maxLength && string.length == minLength) {\n            return\
    \ string;\n        }\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the shortest one in case of multiple strings of the same length. \n \
    \   \n*/\nNullable!(string) shortest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach(string,strings) {\n        if (string.length == maxLength &&\
    \ string.length == minLength) {\n            return string;\n        }\n    }\n\
    \    return null;\n}\n/*\n Out of list of strings, return the longest one in case\
    \ of multiple strings of the same length. \n    \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength, int maxLength) \n{\n    foreach(string,strings)\
    \ {\n        if (string.length == maxLength && \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj8xdyxai.d(16): Error: no identifier for declarator `int`

    /tmp/tmpj8xdyxai.d(16): Error: found `?` instead of statement

    /tmp/tmpj8xdyxai.d(17): Error: no identifier for declarator `strings`

    /tmp/tmpj8xdyxai.d(17): Error: found `)` when expecting `;`

    /tmp/tmpj8xdyxai.d(22): Error: found `return` when expecting `)`

    /tmp/tmpj8xdyxai.d(37): Error: no identifier for declarator `int`

    /tmp/tmpj8xdyxai.d(37): Error: found `?` instead of statement

    /tmp/tmpj8xdyxai.d(38): Error: no identifier for declarator `strings`

    /tmp/tmpj8xdyxai.d(38): Error: found `)` when expecting `;`

    /tmp/tmpj8xdyxai.d(43): Error: found `return` when expecting `)`

    /tmp/tmpj8xdyxai.d(51): Error: no identifier for declarator `strings`

    /tmp/tmpj8xdyxai.d(51): Error: found `)` when expecting `;`

    /tmp/tmpj8xdyxai.d(56): Error: found `return` when expecting `)`

    /tmp/tmpj8xdyxai.d(64): Error: no identifier for declarator `strings`

    /tmp/tmpj8xdyxai.d(64): Error: found `)` when expecting `;`

    /tmp/tmpj8xdyxai.d(69): Error: found `return` when ex'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofuxhk5p.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofuxhk5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length() >\
    \ longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadtd0s0o.d(17): Error: no property `length` for type `string`

    /tmp/tmpadtd0s0o.d(17): Error: function `tmpadtd0s0o.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpadtd0s0o.d(18): Error: function `tmpadtd0s0o.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpadtd0s0o.d(18):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpadtd0s0o.d(20): Error: function `tmpadtd0s0o.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadtd0s0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96d_qjx8.d(19): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(20): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96d_qjx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var maxLength = strings[0];\n    \n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLength) {\n            maxLength\
    \ = strings[i].length;\n        }\n    }\n    \n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe8menbv7.d(20): Error: undefined identifier `var`

    /tmp/tmpe8menbv7.d(22): Error: undefined identifier `var`

    /tmp/tmpe8menbv7.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8menbv7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings) {\n\t\
    \tif (maxLength == null || s.length() > maxLength.Value()) {\n\t\t\tmaxLength\
    \ = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0lkd4e7.d(16): Error: no identifier for declarator `int`

    /tmp/tmpu0lkd4e7.d(16): Error: found `?` instead of statement

    /tmp/tmpu0lkd4e7.d(17): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0lkd4e7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpim_r7coz.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpim_r7coz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpall4bb8z.d(21): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpall4bb8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length > longest.length)\
    \ longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_cy99iur.d(17): Error: function `tmp_cy99iur.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmp_cy99iur.d(17): Error: function `tmp_cy99iur.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmp_cy99iur.d(17):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmp_cy99iur.d(19): Error: function `tmp_cy99iur.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cy99iur.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length < longest.length)\n        \
    \    longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphglfrbjj.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x455539]

    ??:? void tmphglfrbjj.__unittest_L23_C1() [0x4414a3]

    ??:? void tmphglfrbjj.__modtest() [0x453048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45e3af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x454b66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x459d59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x459de8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x459ce5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x454b3d]

    ??:? runModuleUnitTests [0x45e185]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4564c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\t\tint\
    \ length = string.length;\n\t\tif (maxLength == null || length > maxLength.value)\n\
    \t\t\tmaxLength = length;\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2m4d9ydj.d(16): Error: no identifier for declarator `int`

    /tmp/tmp2m4d9ydj.d(16): Error: found `?` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2m4d9ydj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96d_qjx8.d(19): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(20): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96d_qjx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    var longestLength = strings[0].Length;\n\
    \    foreach (var s in strings)\n    {\n        if (s.Length > longestLength)\n\
    \        {\n            longest = s;\n            longestLength = s.Length;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nI like this solution, but I wonder why you used `Nullable!(string)`\
    \ instead of `string?`\n<|/ c |>\n<| c |>\n: Because `string?` doesn't have a\
    \ `Length` property. `Nullable<T>` does.\n<|/ c |>\n<| c |>\n: I didn't know that.\
    \ Thanks.\n<|/ c |>\n<| c |>\n: I added a version that uses `Nullable<T>`.\n<|/\
    \ c |>\n<| c |>\n: I added a version that uses `Nullable<T>`.\n<|/ c |>\n<| a\
    \ tags=c#,linq,.net,string |>\n<code>\nstring longest = string.Empty;\nstring\
    \ longestLength = string.Empty;\nforeach (string s in strings)\n{\n    if (s.Length\
    \ > longestLength)\n    {\n        longest = s;\n        longestLength = s.Length;\n\
    \    }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if there are\
    \ multiple strings with the same length.\n<|/ c |>\n<| c |>\n: It does work. `longestLength`\
    \ is initialized to `string.Empty` before the loop, so it will never be set to\
    \ anything other than `string.Empty`.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that uses `Nullable<T>`.\n<|/ c |>\n<| c |>\n: I added a version that uses `Nullable<T>`.\n\
    <|/ c |>\n<| c |>\n: I added a version that uses `Nullable<T>`.\n<|/ c |>\n<|\
    \ a dscore=3 |>\n<code>\nstring longest = strings.OrderByDescending(s => s.Length).First();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nThis doesn't work if there\
    \ are multiple strings with the same length.\n<|/ c |>\n<| c |>\n: It does work.\
    \ `longestLength` is initialized to `string.Empty` before the loop, so it will\
    \ never be set to anything other than `string.Empty`.\n<|/ c |>\n<|\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsm0qrlx2.d(18): Error: found `in` when expecting `;`

    /tmp/tmpsm0qrlx2.d(28): Error: declaration expected, not `<`

    /tmp/tmpsm0qrlx2.d(34): Error: unterminated character constant

    /tmp/tmpsm0qrlx2.d(37): Error: unterminated character constant

    /tmp/tmpsm0qrlx2.d(49): Error: declaration expected, not `foreach`

    /tmp/tmpsm0qrlx2.d(54): Error: no identifier for declarator `longestLength`

    /tmp/tmpsm0qrlx2.d(54): Error: declaration expected, not `=`

    /tmp/tmpsm0qrlx2.d(55): Error: unrecognized declaration

    /tmp/tmpsm0qrlx2.d(60): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsm0qrlx2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; ++i) {\n        var s = strings[i];\n        if (s.length &gt;\
    \ maxLength) {\n            maxLength = s.length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\n</pre>\n</div>\n</div>\n<div class=\"\
    literalblock\">\n<div class=\"content\">\n<pre>\nimport std.stdio;\nimport std.string;\n\
    import std.array;\nimport std.conv;\nimport std.math;\nimport std.typecons;\n\
    import std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport\
    \ std.math;\nimport std.typecons;\nimport std.conv;\nimport std.math;\nimport\
    \ std.typecons;\nimport std.conv;\nimport std.math;\nimport std.typecons;\nimport\
    \ std.conv;\nimport std.math;\nimport std.type\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph1gejnnk.d(21): Error: found `;` when expecting `)`

    /tmp/tmph1gejnnk.d(21): Error: found `)` when expecting `;` following statement

    /tmp/tmph1gejnnk.d(23): Error: found `;` when expecting `)`

    /tmp/tmph1gejnnk.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmph1gejnnk.d(30): Error: declaration expected, not `<`

    /tmp/tmph1gejnnk.d(105): Error: `;` expected

    /tmp/tmph1gejnnk.d(106): Error: declaration expected, not `{`

    /tmp/tmph1gejnnk.d(109): Error: declaration expected, not `{`

    /tmp/tmph1gejnnk.d(111): Error: declaration expected, not `assert`

    /tmp/tmph1gejnnk.d(112): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph1gejnnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length < longest.length)\n        \
    \    longest = string;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphglfrbjj.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x455539]

    ??:? void tmphglfrbjj.__unittest_L23_C1() [0x4414a3]

    ??:? void tmphglfrbjj.__modtest() [0x453048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45e3af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x454b66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x459d59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x459de8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x459ce5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x454b3d]

    ??:? runModuleUnitTests [0x45e185]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4564c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int len = strings[i].length;\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxIndex = i;\n        }\n    }\n    return\
    \ strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm90pzpgt.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpm90pzpgt.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpm90pzpgt.d(28): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm90pzpgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s6hak3j.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp3s6hak3j.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s6hak3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen)\n            continue;\n  \
    \      \n        maxLen = strings[i].length;\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_30vs4f.d(19): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmpt_30vs4f.d(25): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpt_30vs4f.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpt_30vs4f.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_30vs4f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    string longest = strings[0];\n\
    \    \n    for (int i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ >= maxLen) {\n            longest = strings[i];\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvv49b240.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmpvv49b240.d(26): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpvv49b240.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpvv49b240.d(30): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv49b240.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLen) {\n            maxLen = s.length;\n        }\n\
    \    }\n    return maxLen > 0 ? strings[strings.length - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyrk0rmd.d(20): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyrk0rmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        var length = strings[i].length;\n        if (length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqem_076m.d(19): Error: undefined identifier `var`

    /tmp/tmpqem_076m.d(20): Error: undefined identifier `var`

    /tmp/tmpqem_076m.d(21): Error: undefined identifier `var`

    /tmp/tmpqem_076m.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqem_076m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = Nullable!(string);\n    foreach(string;\
    \ strings) {\n        if (longest == null || string.length < longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zquup8e.d(16): Error: type `inout(string)` has no value

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zquup8e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyd23398.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyd23398.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vfnf2hw.d(18): Error: undefined identifier `var`

    /tmp/tmp2vfnf2hw.d(19): Error: undefined identifier `var`

    /tmp/tmp2vfnf2hw.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vfnf2hw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzthlpvuk.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpzthlpvuk.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpzthlpvuk.d(30): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzthlpvuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var maxLength = 0;\n    var maxString = \"\";\n    \n    for (var i\
    \ = 0; i &lt; strings.length; ++i) {\n        var str = strings[i];\n        var\
    \ length = str.length;\n        \n        if (length &gt; maxLength) {\n     \
    \       maxLength = length;\n            maxString = str;\n        }\n    }\n\
    \    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptjjxwtj6.d(23): Error: found `;` when expecting `)`

    /tmp/tmptjjxwtj6.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmptjjxwtj6.d(27): Error: found `;` when expecting `)`

    /tmp/tmptjjxwtj6.d(27): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptjjxwtj6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var maxLength = 0;\n    var maxString = \"\";\n    \n    for (var i\
    \ = 0; i &lt; strings.length; ++i) {\n        var s = strings[i];\n        if\
    \ (s.length &gt; maxLength) {\n            maxLength = s.length;\n           \
    \ maxString = s;\n        }\n    }\n    \n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_poto6xh.d(23): Error: found `;` when expecting `)`

    /tmp/tmp_poto6xh.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmp_poto6xh.d(25): Error: found `;` when expecting `)`

    /tmp/tmp_poto6xh.d(25): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_poto6xh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpim_r7coz.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpim_r7coz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings)\n    {\n        if (s.length()\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n/*\n In list of strings, return the longest one in case\
    \ of multiple strings of the same length.\n    Otherwise return the first one\
    \ in case of multiple strings of the same length. Return None in\n    case the\
    \ input list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\"\
    , \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"\
    ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings)\n    {\n        if (s.length() > longest.length)\n   \
    \     {\n            longest = s;\n        }\n    }\n    return longest;\n}\n\
    /*\n In list of strings, return the longest one in case of multiple strings of\
    \ the same length.\n    Otherwise return the first one in case of multiple strings\
    \ of the same length. Return None in\n    case the input list is empty.\n    >>>\
    \ longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n \
    \   >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach (string s in strings)\n    {\n  \
    \      if (s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n In list of strings, return the\
    \ longest one in case of multiple strings of the same length.\n    Otherwise return\
    \ the first one in case of multiple strings of the same length. Return None in\n\
    \    case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach\
    \ (string s in strings)\n    {\n        if (s.length() > longest.length)\n   \
    \     {\n            longest = s;\n        }\n    }\n    return longest;\n}\n\
    /*\n In list of strings, return the longest one in case of multiple strings of\
    \ the same length.\n    Otherwise return the first one in case of multiple strings\
    \ of the same length. Return None in\n    case the input list is empty.\n    >>>\
    \ longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n \
    \   >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach (string s in strings)\n    {\n  \
    \      if (s.length() > longest.length\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp259qhlpa.d(16): Error: found `in` when expecting `;`

    /tmp/tmp259qhlpa.d(39): Error: found `in` when expecting `;`

    /tmp/tmp259qhlpa.d(62): Error: found `in` when expecting `;`

    /tmp/tmp259qhlpa.d(85): Error: found `in` when expecting `;`

    /tmp/tmp259qhlpa.d(108): Error: found `in` when expecting `;`

    /tmp/tmp259qhlpa.d(111): Error: found `unittest` when expecting `)`

    /tmp/tmp259qhlpa.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp259qhlpa.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp259qhlpa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt32anefc.d(16): Error: undefined identifier `var`

    /tmp/tmpt32anefc.d(17): Error: undefined identifier `var`

    /tmp/tmpt32anefc.d(19): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt32anefc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96d_qjx8.d(19): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(20): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96d_qjx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\tif (strings.length == 0) {\n\t\treturn None;\n\t}\n\t\n\t\
    string longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length; ++i) {\n\
    \t\tif (strings[i].length() > longest.length()) {\n\t\t\tlongest = strings[i];\n\
    \t\t}\n\t}\n\t\n\treturn longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpztzpvcj_.d(18): Error: undefined identifier `None`, did you mean
    struct `No`?

    /tmp/tmpztzpvcj_.d(24): Error: no property `length` for type `string`

    /tmp/tmpztzpvcj_.d(24): Error: no property `length` for type `string`

    /tmp/tmpztzpvcj_.d(29): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpztzpvcj_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s6hak3j.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp3s6hak3j.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s6hak3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    foreach(string; strings)\n\
    \    {\n        if (string.length >= longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2jqnnz5.d(16): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2jqnnz5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLen) {\n            maxLen = s.length;\n        }\n\
    \    }\n    return maxLen > 0 ? strings[strings.length - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyrk0rmd.d(20): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyrk0rmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        var s = strings[i];\n        if (std.string.length(longest) > std.string.length(s))\
    \ {\n            longest = s;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fsub7ei.d(19): Error: undefined identifier `var`

    /tmp/tmp3fsub7ei.d(20): Error: undefined identifier `var`

    /tmp/tmp3fsub7ei.d(21): Error: undefined identifier `var`

    /tmp/tmp3fsub7ei.d(22): Error: undefined identifier `string` in package `std`

    /tmp/tmp3fsub7ei.d(22): Error: undefined identifier `string` in package `std`

    /tmp/tmp3fsub7ei.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fsub7ei.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    var longestLength = 0;\n  \
    \  foreach(string; strings)\n    {\n        if (string.length > longestLength)\n\
    \        {\n            longest = string;\n            longestLength = string.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2bc8w___.d(16): Error: undefined identifier `var`

    /tmp/tmp2bc8w___.d(17): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2bc8w___.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        var len = strings[i].length;\n        if (len > longest.length) {\n \
    \           longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjg4tl7ig.d(19): Error: undefined identifier `var`

    /tmp/tmpjg4tl7ig.d(20): Error: undefined identifier `var`

    /tmp/tmpjg4tl7ig.d(21): Error: undefined identifier `var`

    /tmp/tmpjg4tl7ig.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjg4tl7ig.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n</code>\n<|/ a\
    \ tags=string,list,c#,longest-substring,algorithm |>\n<| a |>\n<code>\npublic\
    \ static string LongestSubstring(string[] strings)\n{\n    string longest = \"\
    \";\n    foreach (string s in strings)\n    {\n        if (s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=1 tags=string,list,c#,longest-substring,algorithm |>\n\
    <| a dscore=1 |>\n<code>\npublic string LongestSubstring(string[] strings)\n{\n\
    \    string longest = \"\";\n    foreach (string s in strings)\n    {\n      \
    \  if (s.Length > longest.Length)\n        {\n            longest = s;\n     \
    \   }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<| a tags=string,list,c#,longest-substring,algorithm |>\n<code>\npublic\
    \ static string LongestSubstring(string[] strings)\n{\n    string longest = \"\
    \";\n    foreach (string s in strings)\n    {\n        if (s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<code>\npublic static string LongestSubstring(string[] strings)\n{\n   \
    \ string longest = \"\";\n    foreach (string s in strings)\n    {\n        if\
    \ (s.Length > longest.Length)\n        {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\npublic static string LongestSubstring(string[] strings)\n{\n    string\
    \ longest = \"\";\n    foreach (string s in strings)\n    {\n        if (s.Length\
    \ > longest.Length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n</code>\n<|/ a tags=string,list,c#,longest-substring,algorithm\
    \ |>\n<| a tags=string,list,c#,longest-substring,algorithm |>\n<code>\npublic\
    \ static string LongestSubstring(string[] strings)\n{\n    string longest = \"\
    \";\n    foreach (string s in strings)\n    {\n        if (s.Length > longest.Length)\n\
    \        {\n            longest = s;\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5jfn5xt5.d(22): Error: declaration expected, not `<`

    /tmp/tmp5jfn5xt5.d(29): Error: declaration expected, not `foreach`

    /tmp/tmp5jfn5xt5.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jfn5xt5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00m7jpmm.d(23): Error: found `string` when expecting `;` following
    statement

    /tmp/tmp00m7jpmm.d(23): Error: expression expected, not `:`

    /tmp/tmp00m7jpmm.d(23): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00m7jpmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length > longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kz_kap0.d(19): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(20): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kz_kap0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].length >= maxLen)\n        {\n         \
    \   maxLen = strings[i].length;\n        }\n    }\n    \n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdi_qaoib.d(19): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmpdi_qaoib.d(25): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpdi_qaoib.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpdi_qaoib.d(29): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdi_qaoib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length() > longest.length()) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2hx1x3x.d(23): Error: no property `length` for type `string`

    /tmp/tmpa2hx1x3x.d(23): Error: no property `length` for type `string`

    /tmp/tmpa2hx1x3x.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpa2hx1x3x.d(28): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2hx1x3x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        var len\
    \ = strings[i].length;\n        if (len > longest.length)\n            longest\
    \ = strings[i];\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdto9zhqe.d(18): Error: undefined identifier `var`

    /tmp/tmpdto9zhqe.d(19): Error: undefined identifier `var`

    /tmp/tmpdto9zhqe.d(20): Error: undefined identifier `var`

    /tmp/tmpdto9zhqe.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdto9zhqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt32anefc.d(16): Error: undefined identifier `var`

    /tmp/tmpt32anefc.d(17): Error: undefined identifier `var`

    /tmp/tmpt32anefc.d(19): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt32anefc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzthlpvuk.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpzthlpvuk.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpzthlpvuk.d(30): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzthlpvuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    string maxString = null;\n    foreach (string s in\
    \ strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9swosl_u.d(21): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9swosl_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var longest = strings[0];\n    \n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrydpjmg.d(20): Error: undefined identifier `var`

    /tmp/tmpfrydpjmg.d(22): Error: undefined identifier `var`

    /tmp/tmpfrydpjmg.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrydpjmg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    var longest = strings[0];\n    var longestLength = longest.length;\n\
    \    \n    for (var i = 1; i < strings.length; i++) {\n        var s = strings[i];\n\
    \        if (s.length != longestLength) {\n            return longest;\n     \
    \   }\n        \n        if (s.indexOf(longest) == 0) {\n            longest =\
    \ s;\n            longestLength = longest.length;\n        }\n    }\n    \n  \
    \  return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4iigocgs.d(20): Error: undefined identifier `var`

    /tmp/tmp4iigocgs.d(21): Error: undefined identifier `var`

    /tmp/tmp4iigocgs.d(23): Error: undefined identifier `var`

    /tmp/tmp4iigocgs.d(24): Error: undefined identifier `var`

    /tmp/tmp4iigocgs.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4iigocgs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var maxLength\
    \ = 0;\n    var maxString = null;\n    for (var i = 0; i <strings.length; ++i)\
    \ {\n        var s = strings[i];\n        if (s.length == maxLength) {\n     \
    \       maxString = s;\n        }\n        else if (s.length > maxLength) {\n\
    \            maxLength = s.length;\n            maxString = s;\n        }\n  \
    \  }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr8ecy13t.d(18): Error: undefined identifier `var`

    /tmp/tmpr8ecy13t.d(19): Error: undefined identifier `var`

    /tmp/tmpr8ecy13t.d(20): Error: undefined identifier `var`

    /tmp/tmpr8ecy13t.d(21): Error: undefined identifier `var`

    /tmp/tmpr8ecy13t.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8ecy13t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = strings[0].length;\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLength) {\n            return strings[i];\n\
    \        }\n    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsw1o73n5.d(19): Error: undefined identifier `var`

    /tmp/tmpsw1o73n5.d(20): Error: undefined identifier `var`

    /tmp/tmpsw1o73n5.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpsw1o73n5.d(25): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsw1o73n5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length() >\
    \ longest.length()) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxptpvkj0.d(17): Error: no property `length` for type `string`

    /tmp/tmpxptpvkj0.d(17): Error: function `tmpxptpvkj0.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpxptpvkj0.d(18): Error: function `tmpxptpvkj0.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpxptpvkj0.d(18):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpxptpvkj0.d(21): Error: function `tmpxptpvkj0.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxptpvkj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\n/*\n\
    \ Out of list of strings, return the shortest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n    >>> shortest([])\n    None\n    >>> shortest([\"a\", \"b\", \"\
    c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n\
    */\nNullable!(string) shortest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() < shortest.length)\n            shortest\
    \ = s;\n    }\n    return shortest;\n}\n/*\n Out of list of strings, return the\
    \ longest string in case of multiple strings of the same length.\n    Otherwise\
    \ return the first string in case of multiple strings of the same length. Return\
    \ None \n    in case the input list is empty.\n    >>> longest([])\n    None\n\
    \    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"\
    bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the shortest string in case of multiple strings of the same\
    \ length.\n    Otherwise return the first string in case of multiple strings of\
    \ the same length. Return None \n    in case the input list is empty.\n    >>>\
    \ shortest([])\n    None\n    >>> shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n\
    \    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string)\
    \ shortest(string[] strings) \n{\n    foreach (string s in strings) {\n      \
    \  if (s.length() < shortest.length)\n            shortest = s;\n    }\n    return\
    \ shortest;\n}\n/*\n Out of list of strings, return the longest string in case\
    \ of multiple strings of the same length.\n    Otherwise return the first string\
    \ in case of multiple strings of the same length. Return None \n    in case the\
    \ input list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"a\"\
    , \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"\
    a\"\n    \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ shortest string in case of multiple strings of the same length.\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30zd30so.d(16): Error: found `in` when expecting `;`

    /tmp/tmp30zd30so.d(35): Error: found `in` when expecting `;`

    /tmp/tmp30zd30so.d(55): Error: found `in` when expecting `;`

    /tmp/tmp30zd30so.d(75): Error: found `in` when expecting `;`

    /tmp/tmp30zd30so.d(95): Error: found `in` when expecting `;`

    /tmp/tmp30zd30so.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30zd30so.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest:string = Null!(string);\n    var i:int = 0;\n\
    \    var len:int = 0;\n    \n    while(i < strings.length)\n    {\n        len\
    \ = strings[i].length;\n        if(len > len)\n        {\n            longest\
    \ = strings[i];\n        }\n        i++;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5__ibjr.d(16): Error: found `longest` when expecting `;` following
    statement

    /tmp/tmpi5__ibjr.d(16): Error: found `:` instead of statement

    /tmp/tmpi5__ibjr.d(17): Error: found `i` when expecting `;` following statement

    /tmp/tmpi5__ibjr.d(17): Error: found `:` instead of statement

    /tmp/tmpi5__ibjr.d(18): Error: found `len` when expecting `;` following statement

    /tmp/tmpi5__ibjr.d(18): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5__ibjr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length() > longest.length()) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2hx1x3x.d(23): Error: no property `length` for type `string`

    /tmp/tmpa2hx1x3x.d(23): Error: no property `length` for type `string`

    /tmp/tmpa2hx1x3x.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpa2hx1x3x.d(28): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2hx1x3x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s6hak3j.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp3s6hak3j.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s6hak3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tstring longest = strings[0];\n\tfor (int i = 1; i < strings.size();\
    \ ++i)\n\t{\n\t\tif (strings[i].length() > longest.length())\n\t\t\tlongest =\
    \ strings[i];\n\t}\n\treturn longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxuep1hy2.d(17): Error: no property `size` for type `string[]`

    /tmp/tmpxuep1hy2.d(19): Error: no property `length` for type `string`

    /tmp/tmpxuep1hy2.d(19): Error: no property `length` for type `string`

    /tmp/tmpxuep1hy2.d(22): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuep1hy2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i <strings.length;\
    \ ++i) {\n        var length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = strings[i];\n  \
    \      }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2kf20z44.d(19): Error: undefined identifier `var`

    /tmp/tmp2kf20z44.d(20): Error: undefined identifier `var`

    /tmp/tmp2kf20z44.d(21): Error: undefined identifier `var`

    /tmp/tmp2kf20z44.d(22): Error: undefined identifier `var`

    /tmp/tmp2kf20z44.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kf20z44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    return strings[strings.length - 1];\n}\n/*\n In list of\
    \ strings, return the shortest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \    >>> shortest([\"\"])\n    None\n    >>> shortest([\"a\", \"b\", \"c\"])\n\
    \    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\n\
    Nullable!(string) shortest(string[] strings) \n{\n    if (strings.length == 0)\
    \ {\n        return null;\n    }\n    int minLen = strings[0].length;\n    for\
    \ (int i = 1; i < strings.length; ++i) {\n        if (strings[i].length < minLen)\
    \ {\n            minLen = strings[i].length;\n        }\n    }\n    return strings[0];\n\
    }\n/*\n In list of strings, return the longest one that starts with the given\
    \ prefix. Return None \n    in case the input list is empty.\n    >>> longestStartsWith([\"\
    a\", \"b\", \"c\"], \"b\")\n    \"b\"\n    >>> longestStartsWith([\"a\", \"bb\"\
    , \"ccc\"], \"b\")\n    \"bb\"\n    \n*/\nNullable!(string) longestStartsWith(string[]\
    \ strings, string prefix) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    int maxLen = strings[0].length;\n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen && strings[i].substring(0, maxLen).equals(prefix))\
    \ {\n            maxLen = strings[i].length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\n/*\n In list of strings, return the shortest one that starts with\
    \ the given prefix. Return None \n    in case the input list is empty.\n    >>>\
    \ shortestStartsWith([\"a\", \"b\", \"c\"], \"b\")\n    \"a\"\n    >>> shortestStartsWith([\"\
    a\", \"bb\", \"ccc\"], \"b\")\n    \"a\"\n    \n*/\nNullable!(string) shortestStartsWith(string[]\
    \ strings, string prefix) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    int minLen = strings[0].length;\n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length < minLen && strings[i].substring(0, minLen).equals(prefix))\
    \ {\n            minLen = strings[i].length;\n        }\n    }\n    return strings[0];\n\
    }\n/*\n In list of strings, return the longest one that ends with the given suffix.\
    \ Return None \n    in case the input list is empty.\n    >>> longestEndsWith([\"\
    a\", \"b\", \"c\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppiy_yh02.d(95): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppiy_yh02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].Length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].Length > maxLen) {\n            maxLen = strings[i].Length;\n\
    \        }\n    }\n    \n    return maxLen > 0 ? strings[strings.length - 1] :\
    \ null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptrena82d.d(20): Error: no property `Length` for type `string`

    /tmp/tmptrena82d.d(23): Error: no property `Length` for type `string`

    /tmp/tmptrena82d.d(24): Error: no property `Length` for type `string`

    /tmp/tmptrena82d.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmptrena82d.d(28): Error: cannot implicitly convert expression `maxLen >
    0 ? strings[strings.length - 1LU] : null` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrena82d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpim_r7coz.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpim_r7coz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings)\n    {\n        if (s.length()\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsudlz2us.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsudlz2us.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    foreach(string; strings) {\n\
    \        if (string.length > longest.length) longest = string;\n    }\n    return\
    \ longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9l426ydd.d(16): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9l426ydd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int length = strings[i].length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxIndex = i;\n        }\n \
    \   }\n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_gouwm0.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpy_gouwm0.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpy_gouwm0.d(28): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_gouwm0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\n/*\n\
    \ Out of list of strings, return the shortest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n    >>> shortest([])\n    None\n    >>> shortest([\"a\", \"b\", \"\
    c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n\
    */\nNullable!(string) shortest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() < shortest.length)\n            shortest\
    \ = s;\n    }\n    return shortest;\n}\n/*\n Out of list of strings, return the\
    \ longest one that starts with the given prefix. Return the\n    first one in\
    \ case of multiple strings of the same length. Return None in case the input list\n\
    \    is empty.\n    >>> longestStartsWith([])\n    None\n    >>> longestStartsWith([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longestStartsWith([\"a\", \"bb\", \"ccc\"\
    ])\n    \"a\"\n    \n*/\nNullable!(string) longestStartsWith(string[] strings,\
    \ string prefix) \n{\n    foreach (string s in strings) {\n        if (s.startsWith(prefix))\n\
    \            return s;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the shortest one that starts with the given prefix. Return the\n    first\
    \ one in case of multiple strings of the same length. Return None in case the\
    \ input list\n    is empty.\n    >>> shortestStartsWith([])\n    None\n    >>>\
    \ shortestStartsWith([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortestStartsWith([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortestStartsWith(string[]\
    \ strings, string prefix) \n{\n    foreach (string s in strings) {\n        if\
    \ (s.startsWith(prefix))\n            return s;\n    }\n    return shortest;\n\
    }\n/*\n Out of list of strings, return the longest one that ends with the given\
    \ suffix. Return the\n    first one in case of multiple strings of the same length.\
    \ Return None in case the input list\n    is empty.\n    >>> longestEndsWith([])\n\
    \    None\n    >>> longestEndsWith([\"a\", \"b\", \"c\"])\n    \"c\"\n    >>>\
    \ longestEndsWith([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string)\
    \ longestEndsWith(string[] strings, string suffix) \n{\n    foreach (string s\
    \ in strings) {\n        if (s.endsWith(\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyjrjc4v1.d(16): Error: found `in` when expecting `;`

    /tmp/tmpyjrjc4v1.d(35): Error: found `in` when expecting `;`

    /tmp/tmpyjrjc4v1.d(55): Error: found `in` when expecting `;`

    /tmp/tmpyjrjc4v1.d(75): Error: found `in` when expecting `;`

    /tmp/tmpyjrjc4v1.d(95): Error: found `in` when expecting `;`

    /tmp/tmpyjrjc4v1.d(97): Error: expression expected, not `unittest`

    /tmp/tmpyjrjc4v1.d(98): Error: found `{` when expecting `,`

    /tmp/tmpyjrjc4v1.d(99): Error: expression expected, not `alias`

    /tmp/tmpyjrjc4v1.d(99): Error: found `candidate` when expecting `,`

    /tmp/tmpyjrjc4v1.d(99): Error: expression expected, not `=`

    /tmp/tmpyjrjc4v1.d(99): Error: found `longest` when expecting `,`

    /tmp/tmpyjrjc4v1.d(99): Error: expression expected, not `;`

    /tmp/tmpyjrjc4v1.d(101): Error: found `{` when expecting `,`

    /tmp/tmpyjrjc4v1.d(102): Error: expression expected, not `auto`

    /tmp/tmpyjrjc4v1.d(102): Error: found `result` when expecting `,`

    /tmp/tmpyjrjc4v1.d(102): Error: expression expected, not `=`

    /tmp/tmpyjrjc4v1.d(102'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLen) {\n            maxLen = s.length;\n        }\n\
    \    }\n    return maxLen > 0 ? strings[strings.length - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyrk0rmd.d(20): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyrk0rmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen\
    \ = strings[0].length;\n    for (int i = 1; i < strings.length; ++i) {\n     \
    \   if (strings[i].length >= maxLen)\n            maxLen = strings[i].length;\n\
    \    }\n    return strings[strings.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxpkw5pwl.d(18): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmpxpkw5pwl.d(21): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpxpkw5pwl.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpxpkw5pwl.d(23): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxpkw5pwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLen) {\n            maxLen = s.length;\n        }\n\
    \    }\n    return maxLen > 0 ? strings[strings.length - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyrk0rmd.d(20): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyrk0rmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length() > longest.length()) {\n            longest\
    \ = strings[i];\n        }\n    }\n    \n    return longest;\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2hx1x3x.d(23): Error: no property `length` for type `string`

    /tmp/tmpa2hx1x3x.d(23): Error: no property `length` for type `string`

    /tmp/tmpa2hx1x3x.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpa2hx1x3x.d(28): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2hx1x3x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyd23398.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyd23398.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var maxLength\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= maxLength.length)\n            maxLength = strings[i];\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8lvpe9mo.d(18): Error: undefined identifier `var`

    /tmp/tmp8lvpe9mo.d(19): Error: undefined identifier `var`

    /tmp/tmp8lvpe9mo.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8lvpe9mo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].Length;\n    string longest = strings[0];\n\
    \    \n    for (int i = 1; i < strings.length; i++) {\n        if (strings[i].Length\
    \ > maxLen) {\n            maxLen = strings[i].Length;\n            longest =\
    \ strings[i];\n        }\n    }\n    \n    return longest;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41amr0xl.d(20): Error: no property `Length` for type `string`

    /tmp/tmp41amr0xl.d(24): Error: no property `Length` for type `string`

    /tmp/tmp41amr0xl.d(25): Error: no property `Length` for type `string`

    /tmp/tmp41amr0xl.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp41amr0xl.d(30): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41amr0xl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length() > longest.length()) {\n  \
    \          longest = string;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7thqjw_c.d(18): Error: no property `length` for type `string`

    /tmp/tmp7thqjw_c.d(18): Error: function expected before `()`, not `longest.get().length`
    of type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7thqjw_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length() >\
    \ longest.length())\n            longest = string;\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,algorithm |>\n<code>\nstring\
    \ longest(string [] strings)\n{\n    string longest = string.Empty;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.Length > longest.Length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=string,c#,algorithm |>\n<code>\nstring longest(string\
    \ [] strings)\n{\n    string longest = string.Empty;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Length > longest.Length)\n        {\n        \
    \    longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,c#,algorithm |>\n<code>\nstring longest(string [] strings)\n\
    {\n    string longest = string.Empty;\n    foreach(string s in strings)\n    {\n\
    \        if(s.Length > longest.Length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#,algorithm\
    \ |>\n<code>\nstring longest(string [] strings)\n{\n    string longest = string.Empty;\n\
    \    foreach(string s in strings)\n    {\n        if(s.Length > longest.Length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring longest(string\
    \ [] strings)\n{\n    string longest = string.Empty;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.Length > longest.Length)\n        {\n        \
    \    longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n<|/ a tags=string,c#,algorithm\
    \ |>\n<| a |>\n<code>\nstring longest(string [] strings)\n{\n    string longest\
    \ = string.Empty;\n    foreach(string s in strings)\n    {\n        if(s.Length\
    \ > longest.Length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n</code>\n<|/ a tags=string,c#,algorithm dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghi9dg7b.d(22): Error: declaration expected, not `<`

    /tmp/tmpghi9dg7b.d(29): Error: declaration expected, not `foreach`

    /tmp/tmpghi9dg7b.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghi9dg7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}\n/*\n Out of list of strings, return the shortest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"a\"\n    \n*/\nNullable!(string) shortest(string[] strings) \n{\n    var\
    \ minLength = 0;\n    var minString = \"\";\n    foreach (string s in strings)\
    \ {\n        if (s.length() < minLength) {\n            minLength = s.length();\n\
    \            minString = s;\n        }\n    }\n    return minString;\n}\n/*\n\
    \ Out of list of strings, return the longest one in case of multiple strings of\
    \ the same length.\n    Return None in case the input list is empty.\n    >>>\
    \ longest([])\n    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n \
    \   >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    var maxString = \"\";\n  \
    \  foreach (string s in strings) {\n        if (s.length() > maxLength) {\n  \
    \          maxString = s;\n        }\n    }\n    return maxString;\n}\n/*\n Out\
    \ of list of strings, return the shortest one in case of multiple strings of the\
    \ same length.\n    Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n    \n*/\nNullable!(string) shortest(string[]\
    \ strings, int minLength) \n{\n    var minString = \"\";\n    foreach (string\
    \ s in strings) {\n        if (s.length() < minLength) {\n            minString\
    \ = s;\n        }\n    }\n    return minString;\n}\n/*\n Out of list of strings,\
    \ return the longest one in case of multiple strings of the same length.\n   \
    \ Return None in case the input list is empty.\n    >>> longest([])\n    None\n\
    \    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"\
    bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength) \n{\n    var maxString = \"\";\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxString\
    \ = s;\n        }\n        if (s.length() < minLength) {\n            \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppbjxaqmm.d(18): Error: found `in` when expecting `;`

    /tmp/tmppbjxaqmm.d(41): Error: found `in` when expecting `;`

    /tmp/tmppbjxaqmm.d(63): Error: found `in` when expecting `;`

    /tmp/tmppbjxaqmm.d(84): Error: found `in` when expecting `;`

    /tmp/tmppbjxaqmm.d(105): Error: found `in` when expecting `;`

    /tmp/tmppbjxaqmm.d(111): Error: found `unittest` instead of statement

    /tmp/tmppbjxaqmm.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmppbjxaqmm.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbjxaqmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach (string s in strings) {\n\t\
    \tif (maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength = s.length;\n\
    \t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4pzszqrf.d(16): Error: no identifier for declarator `int`

    /tmp/tmp4pzszqrf.d(16): Error: found `?` instead of statement

    /tmp/tmp4pzszqrf.d(17): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4pzszqrf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppo_lwrp6.d(111): Error: template argument expected following `!`

    /tmp/tmppo_lwrp6.d(111): Error: no identifier for declarator `Nullable!()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppo_lwrp6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        if(string.length > maxLength) {\n            maxLength =\
    \ string.length;\n            maxString = string;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxs_p10n.d(16): Error: undefined identifier `var`

    /tmp/tmpmxs_p10n.d(17): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxs_p10n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vsx7__j.d(18): Error: undefined identifier `var`

    /tmp/tmp3vsx7__j.d(19): Error: undefined identifier `var`

    /tmp/tmp3vsx7__j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vsx7__j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcpq_981b.d(17): Error: function `tmpcpq_981b.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpcpq_981b.d(18): Error: function `tmpcpq_981b.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpcpq_981b.d(18):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpcpq_981b.d(20): Error: function `tmpcpq_981b.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpq_981b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int len = strings[i].length;\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxIndex = i;\n        }\n    }\n    return\
    \ strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm90pzpgt.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpm90pzpgt.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpm90pzpgt.d(28): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm90pzpgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s6hak3j.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp3s6hak3j.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s6hak3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgt7t3y_5.d(17): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgt7t3y_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length) longest = s;\n    }\n    return longest;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2a1b3k3.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2a1b3k3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00m7jpmm.d(23): Error: found `string` when expecting `;` following
    statement

    /tmp/tmp00m7jpmm.d(23): Error: expression expected, not `:`

    /tmp/tmp00m7jpmm.d(23): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00m7jpmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i <strings.length;\
    \ ++i) {\n        var s = strings[i];\n        if (s.length >= maxLength) {\n\
    \            maxString = s;\n            maxLength = s.length;\n        }\n  \
    \  }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpom1tf14x.d(19): Error: undefined identifier `var`

    /tmp/tmpom1tf14x.d(20): Error: undefined identifier `var`

    /tmp/tmpom1tf14x.d(21): Error: undefined identifier `var`

    /tmp/tmpom1tf14x.d(22): Error: undefined identifier `var`

    /tmp/tmpom1tf14x.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom1tf14x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var maxLength\
    \ = strings[0].length;\n    for (var i = 1; i < strings.length; ++i)\n       \
    \ if (strings[i].length >= maxLength)\n            maxLength = strings[i].length;\n\
    \    return maxLength > 0 ? strings[strings.length - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwk64ck05.d(18): Error: undefined identifier `var`

    /tmp/tmpwk64ck05.d(19): Error: undefined identifier `var`

    /tmp/tmpwk64ck05.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwk64ck05.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLen) {\n            maxLen = s.length;\n        }\n\
    \    }\n    return strings[strings.length - 1];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6omrnwt4.d(20): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6omrnwt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96d_qjx8.d(19): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(20): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96d_qjx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tif(maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength =\
    \ s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2sj2r7dy.d(16): Error: no identifier for declarator `int`

    /tmp/tmp2sj2r7dy.d(16): Error: found `?` instead of statement

    /tmp/tmp2sj2r7dy.d(18): Error: no identifier for declarator `strings`

    /tmp/tmp2sj2r7dy.d(18): Error: found `)` when expecting `;`

    /tmp/tmp2sj2r7dy.d(24): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2sj2r7dy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\n</code>\n\
    <|/ a tags=string,c#,longest-substring,algorithm |>\n<| c |>\nThis doesn't work\
    \ if you have multiple strings of the same length. For example, `longest([\"a\"\
    , \"bb\", \"ccc\"])` returns `\"ccc\"` instead of `\"a\"`.\n<|/ c |>\n<| c |>\n\
    : Yes, I realized that after I posted it. I edited my answer to fix it.\n<|/ c\
    \ |>\n<| c |>\nI believe this algorithm is O(n^2) in the worst case. Since it\
    \ iterates over the entire string for each character in the string, it would be\
    \ better to iterate over the string once and find the longest substring in O(n).\n\
    <|/ c |>\n<| c |>\n: Yes, that's true. I was trying to keep it simple, but I guess\
    \ I should have made it more efficient.\n<|/ c |>\n<| a dscore=4 |>\nHere's a\
    \ solution that uses LINQ:\n<code>\nstring longest = strings.OrderByDescending(s\
    \ => s.Length).First();\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ For example, `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"` instead of\
    \ `\"a\"`.\n<|/ c |>\n<| c |>\n: I believe this algorithm is O(n^2) in the worst\
    \ case. Since it iterates over the entire string for each character in the string,\
    \ it would be better to iterate over the string once and find the longest substring\
    \ in O(n).\n<|/ c |>\n<| c |>\n: Yes, that's true. I was trying to keep it simple,\
    \ but I guess I should have made it more efficient.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nstring longest = strings.OrderByDescending(s => s.Length).First();\n</code>\n\
    <|/ a tags=string,c#,longest-substring,algorithm |>\n<| c |>\nThis doesn't work\
    \ if you have multiple strings of the same length. For example, `longest([\"a\"\
    , \"bb\", \"ccc\"])` returns `\"ccc\"` instead of `\"a\"`.\n<|/ c |>\n<| c |>\n\
    : I believe this algorithm is O(n^2) in the worst case. Since it iterates over\
    \ the entire string for each character in the string, it would be better to iterate\
    \ \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa05ft9_w.d(16): Error: found `in` when expecting `;`

    /tmp/tmpa05ft9_w.d(22): Error: declaration expected, not `<`

    /tmp/tmpa05ft9_w.d(25): Error: unterminated character constant

    /tmp/tmpa05ft9_w.d(34): Error: unterminated character constant

    /tmp/tmpa05ft9_w.d(37): Error: unterminated character constant

    /tmp/tmpa05ft9_w.d(40): Error: declaration expected, not `<`

    /tmp/tmpa05ft9_w.d(43): Error: unterminated character constant

    /tmp/tmpa05ft9_w.d(49): Error: unterminated character constant

    /tmp/tmpa05ft9_w.d(54): Error: declaration expected, not `<`

    /tmp/tmpa05ft9_w.d(57): Error: unterminated character constant

    /tmp/tmpa05ft9_w.d(65): Error: declaration expected, not `{`

    /tmp/tmpa05ft9_w.d(67): Error: declaration expected, not `assert`

    /tmp/tmpa05ft9_w.d(68): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa05ft9_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen\
    \ = strings[0].length;\n    foreach (string s in strings)\n        if (s.length()\
    \ > maxLen)\n            maxLen = s.length;\n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjpjkozfu.d(19): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpjkozfu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96d_qjx8.d(19): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(20): Error: undefined identifier `var`

    /tmp/tmp96d_qjx8.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96d_qjx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach(string; strings) {\n        if (string.length() >\
    \ longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadtd0s0o.d(17): Error: no property `length` for type `string`

    /tmp/tmpadtd0s0o.d(17): Error: function `tmpadtd0s0o.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpadtd0s0o.d(18): Error: function `tmpadtd0s0o.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpadtd0s0o.d(18):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpadtd0s0o.d(20): Error: function `tmpadtd0s0o.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadtd0s0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; i++) {\n        var s = strings[i];\n        if (s.length &gt;\
    \ maxLength) {\n            maxLength = s.length;\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\n</pre>\n</div>\n</div>\n<div class=\"\
    cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\"\
    >\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<p>The <code>longest</code> function above is called from\
    \ <code>longest</code> below. <code>longest</code> is called from <code>longest</code>\
    \ and <code>longest</code> is called from <code>longest</code>.</p>\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkhhmy2vi.d(21): Error: found `;` when expecting `)`

    /tmp/tmpkhhmy2vi.d(21): Error: found `)` when expecting `;` following statement

    /tmp/tmpkhhmy2vi.d(23): Error: found `;` when expecting `)`

    /tmp/tmpkhhmy2vi.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmpkhhmy2vi.d(30): Error: declaration expected, not `<`

    /tmp/tmpkhhmy2vi.d(41): Error: declaration expected, not `{`

    /tmp/tmpkhhmy2vi.d(43): Error: declaration expected, not `assert`

    /tmp/tmpkhhmy2vi.d(44): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkhhmy2vi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = strings[0].length;\n    foreach (string s in strings) {\n  \
    \      if (s.length() > maxLen) {\n            maxLen = s.length;\n        }\n\
    \    }\n    return maxLen > 0 ? strings[strings.length - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyrk0rmd.d(20): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyrk0rmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = strings[0].length;\n    for (var i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length >= maxLength) {\n            maxLength\
    \ = strings[i].length;\n        }\n    }\n    return maxLength == strings[0].length\
    \ ? strings[0] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu447uvxl.d(19): Error: undefined identifier `var`

    /tmp/tmpu447uvxl.d(20): Error: undefined identifier `var`

    /tmp/tmpu447uvxl.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu447uvxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyd23398.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyd23398.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0;\
    \ i < strings.length; ++i) {\n        int length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd75o681g.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpd75o681g.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpd75o681g.d(31): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd75o681g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ maxLength = s.length();\n            maxString = s;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofuxhk5p.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofuxhk5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    var longestLength = 0;\n  \
    \  foreach(string; strings) {\n        if (string.length > longestLength) {\n\
    \            longest = string;\n            longestLength = string.length;\n \
    \       }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq0plbitf.d(16): Error: undefined identifier `var`

    /tmp/tmpq0plbitf.d(17): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0plbitf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length > longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kz_kap0.d(19): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(20): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kz_kap0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = s;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngxp1yl5.d(23): Error: semicolon expected, not `in`

    /tmp/tmpngxp1yl5.d(23): Error: expression expected, not `in`

    /tmp/tmpngxp1yl5.d(23): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngxp1yl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; ++i) {\n        var s = strings[i];\n        var length = s.length();\n\
    \        if (length &gt; maxLength) {\n            maxLength = length;\n     \
    \       maxString = s;\n        }\n    }\n    return maxString;\n}\n</pre>\n</div>\n\
    </div>\n<div class=\"paragraph\">\n<p>The <code>std.string</code> module also\
    \ provides functions to manipulate strings:</p>\n</div>\n<div class=\"listingblock\"\
    >\n<div class=\"content\">\n<pre class=\"CodeRay highlight\"><code data-lang=\"\
    clojure\">(<span class=\"keyword\">ns</span> <span class=\"namespace\">std</span>)\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaairx_cu.d(21): Error: found `;` when expecting `)`

    /tmp/tmpaairx_cu.d(21): Error: found `)` when expecting `;` following statement

    /tmp/tmpaairx_cu.d(24): Error: found `;` when expecting `)`

    /tmp/tmpaairx_cu.d(24): Error: found `)` when expecting `;` following statement

    /tmp/tmpaairx_cu.d(31): Error: declaration expected, not `<`

    /tmp/tmpaairx_cu.d(44): Error: declaration expected, not `{`

    /tmp/tmpaairx_cu.d(46): Error: declaration expected, not `assert`

    /tmp/tmpaairx_cu.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaairx_cu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length() > longest.length()) {\n  \
    \          longest = string;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7thqjw_c.d(18): Error: no property `length` for type `string`

    /tmp/tmp7thqjw_c.d(18): Error: function expected before `()`, not `longest.get().length`
    of type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7thqjw_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s6hak3j.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp3s6hak3j.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s6hak3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ >= longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vfnf2hw.d(18): Error: undefined identifier `var`

    /tmp/tmp2vfnf2hw.d(19): Error: undefined identifier `var`

    /tmp/tmp2vfnf2hw.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vfnf2hw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        if (strings[i].length > maxLength) {\n            maxLength\
    \ = strings[i].length;\n            maxIndex = i;\n        }\n    }\n    return\
    \ strings[maxIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy3ws59ud.d(23): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpy3ws59ud.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpy3ws59ud.d(27): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy3ws59ud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0; i &lt;\
    \ strings.length; ++i) {\n        var len = strings[i].length;\n        if (len\
    \ > maxLength) {\n            maxLength = len;\n            maxString = strings[i];\n\
    \        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvw89ts1.d(21): Error: found `;` when expecting `)`

    /tmp/tmpbvw89ts1.d(21): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvw89ts1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var maxLength = 0;\n    var maxString = \"\";\n    foreach(string;\
    \ strings) {\n        var length = string.length;\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxString = string;\n      \
    \  }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt32anefc.d(16): Error: undefined identifier `var`

    /tmp/tmpt32anefc.d(17): Error: undefined identifier `var`

    /tmp/tmpt32anefc.d(19): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt32anefc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings)\n    {\n        if (s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0knav45d.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0knav45d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].Length;\n    foreach (string s in strings)\
    \ {\n        if (s.Length > maxLen) {\n            maxLen = s.Length;\n      \
    \  }\n    }\n    return maxLen == strings[0].Length ? strings[0] : null;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydsdf8w2.d(21): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydsdf8w2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (int\
    \ i = 0; i < strings.length; ++i) {\n        int length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    \n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqyjgo5b.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpbqyjgo5b.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpbqyjgo5b.d(31): Error: cannot implicitly convert expression `maxString`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqyjgo5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        var length = strings[i].length;\n        if (length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hirfk6z.d(19): Error: undefined identifier `var`

    /tmp/tmp1hirfk6z.d(20): Error: undefined identifier `var`

    /tmp/tmp1hirfk6z.d(21): Error: undefined identifier `var`

    /tmp/tmp1hirfk6z.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hirfk6z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tforeach(string,strings) {\n\t\tint?\
    \ length = string.length;\n\t\tif(maxLength == null || length > maxLength) {\n\
    \t\t\tmaxLength = length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqql93k_d.d(16): Error: no identifier for declarator `int`

    /tmp/tmpqql93k_d.d(16): Error: found `?` instead of statement

    /tmp/tmpqql93k_d.d(17): Error: no identifier for declarator `strings`

    /tmp/tmpqql93k_d.d(17): Error: found `)` when expecting `;`

    /tmp/tmpqql93k_d.d(18): Error: no identifier for declarator `int`

    /tmp/tmpqql93k_d.d(18): Error: found `?` instead of statement

    /tmp/tmpqql93k_d.d(23): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqql93k_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLength = 0;\n    string maxString = null;\n    for (string string\
    \ : strings) {\n        if (string.length > maxLength) {\n            maxLength\
    \ = string.length;\n            maxString = string;\n        }\n    }\n    return\
    \ maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbq7ugs37.d(21): Error: found `string` when expecting `;` following
    statement

    /tmp/tmpbq7ugs37.d(21): Error: expression expected, not `:`

    /tmp/tmpbq7ugs37.d(21): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbq7ugs37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    foreach(string; strings)\n\
    \    {\n        if (string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp838say3y.d(16): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp838say3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            maxLen = strings[i].length;\n\
    \        }\n    }\n    \n    return strings[strings.length - 1];\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s6hak3j.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp3s6hak3j.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp3s6hak3j.d(28): Error: cannot implicitly convert expression `strings[strings.length
    - 1LU]` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s6hak3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    int? maxLength = null;\n    foreach(string; strings) {\n \
    \       if (maxLength == null || string.length >= maxLength) {\n            maxLength\
    \ = string.length;\n        }\n    }\n    return maxLength;\n}\n</code>\n<|/ a\
    \ tags=string,c#,longest-substring,algorithm |>\n<| c |>\nThe question is tagged\
    \ C#, so why are you using an `int?` instead of an `int`?\n<|/ c |>\n<| c |>\n\
    : Because the question was tagged C#, and C# has `int?` type. C# also has `Nullable<T>`\
    \ type, which can be used for `T` types. So I used `int?` type instead of `int`\
    \ type to make the code more readable.\n<|/ c |>\n<| c |>\n: I didn't know that\
    \ C# has `Nullable<T>` type. Thanks for pointing out.\n<|/ c |>\n<| c |>\n: I\
    \ added a C# version that uses `Nullable<T>` type.\n<|/ c |>\n<| c |>\n: I added\
    \ a C# version that uses `Nullable<T>` type.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    string longest(string s) {\n    string longest = string.Empty;\n    foreach(char\
    \ c in s) {\n        longest = string.Concat(longest, c, longest);\n    }\n  \
    \  return longest;\n}\n</code>\n<|/ a tags=string,c#,longest-substring,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple strings of the same length.\
    \ Try it with `longest(\"abcabc\")`.\n<|/ c |>\n<| c |>\n: It doesn't work if\
    \ there are multiple strings of the same length. Try it with `longest(\"abcabc\"\
    )`.\n<|/ c |>\n<| c |>\n: It doesn't work if there are multiple strings of the\
    \ same length. Try it with `longest(\"abcabc\")`.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if there are multiple strings of the same length. Try it with `longest(\"\
    abcabc\")`.\n<|/ c |>\n<| c |>\n: It doesn't work if there are multiple strings\
    \ of the same length. Try it with `longest(\"abcabc\")`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\npublic static string LongestSubstring(string s)\n{\n    string longest\
    \ = string.Empty;\n    foreach (char c in s)\n    {\n        longest = string.Concat(longest,\
    \ c, \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result =\
    \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpas1yqadu.d(16): Error: no identifier for declarator `int`

    /tmp/tmpas1yqadu.d(16): Error: found `?` instead of statement

    /tmp/tmpas1yqadu.d(24): Error: declaration expected, not `<`

    /tmp/tmpas1yqadu.d(33): Error: unterminated character constant

    /tmp/tmpas1yqadu.d(45): Error: declaration expected, not `foreach`

    /tmp/tmpas1yqadu.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpas1yqadu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyd23398.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyd23398.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    string longest = strings[0];\n    int longestLength = 0;\n    \n  \
    \  for (int i = 1; i < strings.length; ++i) {\n        int thisLength = strings[i].length;\n\
    \        if (thisLength > longestLength) {\n            longest = strings[i];\n\
    \            longestLength = thisLength;\n        }\n    }\n    \n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqx73y_6n.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpqx73y_6n.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpqx73y_6n.d(31): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqx73y_6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawqdum80.d(272): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawqdum80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    Nullable!(string) longest = null;\n    foreach(string; strings)\
    \ {\n        if (longest == null || string.length() > longest.length()) {\n  \
    \          longest = string;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7thqjw_c.d(18): Error: no property `length` for type `string`

    /tmp/tmp7thqjw_c.d(18): Error: function expected before `()`, not `longest.get().length`
    of type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7thqjw_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length > longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kz_kap0.d(19): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(20): Error: undefined identifier `var`

    /tmp/tmp9kz_kap0.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kz_kap0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    int maxLen\
    \ = strings[0].length;\n    foreach (string s in strings)\n        if (s.length()\
    \ > maxLen)\n            maxLen = s.length;\n    return strings[strings.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjpjkozfu.d(19): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpjkozfu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        if (strings[i].length > longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuubg343q.d(19): Error: undefined identifier `var`

    /tmp/tmpuubg343q.d(20): Error: undefined identifier `var`

    /tmp/tmpuubg343q.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuubg343q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = 0;\n    int maxLenIndex = -1;\n    for (int i = 0; i < strings.length;\
    \ ++i) {\n        int len = strings[i].length;\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxLenIndex = i;\n        }\n    }\n \
    \   return strings[maxLenIndex];\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_2sfjpdh.d(22): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp_2sfjpdh.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp_2sfjpdh.d(28): Error: cannot implicitly convert expression `strings[cast(ulong)maxLenIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2sfjpdh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n\tint? maxLength = null;\n\tstring maxString = null;\n\tforeach(string,s,strings)\
    \ {\n\t\tif(maxLength == null || s.length() > maxLength) {\n\t\t\tmaxLength =\
    \ s.length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2sj2r7dy.d(16): Error: no identifier for declarator `int`

    /tmp/tmp2sj2r7dy.d(16): Error: found `?` instead of statement

    /tmp/tmp2sj2r7dy.d(18): Error: no identifier for declarator `strings`

    /tmp/tmp2sj2r7dy.d(18): Error: found `)` when expecting `;`

    /tmp/tmp2sj2r7dy.d(24): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2sj2r7dy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i)\n        if (strings[i].length\
    \ > longest.length)\n            longest = strings[i];\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp455d5v8y.d(18): Error: undefined identifier `var`

    /tmp/tmp455d5v8y.d(19): Error: undefined identifier `var`

    /tmp/tmp455d5v8y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp455d5v8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var maxLength = strings[0].Length;\n    for (var i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].Length > maxLength) {\n            maxLength\
    \ = strings[i].Length;\n        }\n    }\n    return maxLength > 0 ? strings[strings.length\
    \ - 1] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7x9yhqzs.d(19): Error: undefined identifier `var`

    /tmp/tmp7x9yhqzs.d(19): Error: no property `Length` for type `string`

    /tmp/tmp7x9yhqzs.d(20): Error: undefined identifier `var`

    /tmp/tmp7x9yhqzs.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7x9yhqzs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = 0;\n    int maxIndex = 0;\n    \n    for (int i = 0; i\
    \ < strings.length; ++i) {\n        int len = strings[i].length;\n        if (len\
    \ > maxLen) {\n            maxLen = len;\n            maxIndex = i;\n        }\n\
    \    }\n    \n    return strings[maxIndex];\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj6lnqnkw.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpj6lnqnkw.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpj6lnqnkw.d(31): Error: cannot implicitly convert expression `strings[cast(ulong)maxIndex]`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6lnqnkw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    var longest\
    \ = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n        var len\
    \ = strings[i].length;\n        if (len > longest.length)\n            longest\
    \ = strings[i];\n    }\n    return longest;\n}\n/*\n In list of strings, return\
    \ the longest string in case of multiple strings of the same length.\n    Otherwise\
    \ return the string itself.\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\
    \n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nstring longest(string[]\
    \ strings) \n{\n    return longest(strings, s => s.length);\n}\n/*\n In list of\
    \ strings, return the longest string in case of multiple strings of the same length.\n\
    \    Otherwise return the string itself.\n    >>> longest([\"a\", \"b\", \"c\"\
    ])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n\
    */\nNullable!(string) longest(string[] strings, Func<string, int> length) \n{\n\
    \    if (strings.length == 0)\n        return null;\n    var longest = strings[0];\n\
    \    for (var i = 1; i < strings.length; ++i) {\n        var len = length(strings[i]);\n\
    \        if (len > longest.length)\n            longest = strings[i];\n    }\n\
    \    return longest;\n}\n/*\n In list of strings, return the longest string in\
    \ case of multiple strings of the same length.\n    Otherwise return the string\
    \ itself.\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nstring longest(string[] strings,\
    \ Func<string, int> length) \n{\n    return longest(strings, length, s => s.length);\n\
    }\n/*\n In list of strings, return the longest string in case of multiple strings\
    \ of the same length.\n    Otherwise return the string itself.\n    >>> longest([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n  \
    \  \"ccc\"\n    \n*/\nNullable!(string) longest(string[] strings, Func<string,\
    \ int, int> length) \n{\n    if (strings.length == 0)\n        return null;\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; ++i) {\n\
    \        var len = length(strings[i], i);\n        if (len > longest.length)\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\n/*\n In list\
    \ of strings, return the longest string in case of multiple strings of the same\
    \ length.\n    Otherwise return the string itself.\n    >>> longest([\"a\", \"\
    b\", \"c\"])\n    \"a\"\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\
    \n    \n*/\nstring longest(string\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2t73z5i.d(48): Error: found `<` when expecting `)`

    /tmp/tmpv2t73z5i.d(48): Error: semicolon expected following function declaration

    /tmp/tmpv2t73z5i.d(48): Error: no identifier for declarator `string`

    /tmp/tmpv2t73z5i.d(48): Error: declaration expected, not `,`

    /tmp/tmpv2t73z5i.d(53): Error: declaration expected, not `for`

    /tmp/tmpv2t73z5i.d(53): Error: no identifier for declarator `i`

    /tmp/tmpv2t73z5i.d(53): Error: declaration expected, not `<`

    /tmp/tmpv2t73z5i.d(53): Error: declaration expected, not `++`

    /tmp/tmpv2t73z5i.d(55): Error: declaration expected, not `if`

    /tmp/tmpv2t73z5i.d(57): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2t73z5i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i) {\n        if (strings[i].length >= maxLen) {\n            return strings[i];\n\
    \        }\n    }\n    \n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxzltg2p.d(20): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmpfxzltg2p.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpfxzltg2p.d(24): Error: cannot implicitly convert expression `strings[cast(ulong)i]`
    of type `string` to `Nullable!string`

    /tmp/tmpfxzltg2p.d(28): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxzltg2p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79qib5rt.d(16): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79qib5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    var longest = strings[0];\n    foreach(string; strings)\n\
    \    {\n        if (string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp838say3y.d(16): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp838say3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLen = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        int len = s.length();\n        if (len > maxLen) {\n\
    \            maxLen = len;\n            maxString = s;\n        }\n    }\n   \
    \ return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ld7vr5o.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ld7vr5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0)\n        return null;\n    \n   \
    \ int maxLen = strings[0].length;\n    \n    for (int i = 1; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].length >= maxLen)\n        {\n         \
    \   maxLen = strings[i].length;\n        }\n    }\n    \n    return maxLen > 0\
    \ ? strings[strings.length - 1] : null;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7tzy7hm4.d(19): Error: cannot implicitly convert expression `strings[0].length`
    of type `ulong` to `int`

    /tmp/tmp7tzy7hm4.d(25): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmp7tzy7hm4.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp7tzy7hm4.d(29): Error: cannot implicitly convert expression `maxLen >
    0 ? strings[strings.length - 1LU] : null` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7tzy7hm4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    \n    for (string\
    \ string : strings) {\n        int length = string.length;\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n            maxString = string;\n\
    \        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00m7jpmm.d(23): Error: found `string` when expecting `;` following
    statement

    /tmp/tmp00m7jpmm.d(23): Error: expression expected, not `:`

    /tmp/tmp00m7jpmm.d(23): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00m7jpmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    var longest = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length >= longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3nbr_y.d(19): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(20): Error: undefined identifier `var`

    /tmp/tmp2s3nbr_y.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3nbr_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n    >>> longest([])\n\
    \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
    \ strings) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    \n    int maxLength = 0;\n    string maxString = null;\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            maxLength\
    \ = s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyd23398.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyd23398.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
