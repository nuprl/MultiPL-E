{
  "language": "d",
  "name": "HumanEval_16_count_distinct_characters",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string)\n    {\n        result += tolower(c) - 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu4r7etey.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4r7etey.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string)\n    {\n        result += tolower(c) - tolower(string[0]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvcgy0zdq.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcgy0zdq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_71qa23o.d(15): Error: no identifier for declarator `char`\n/tmp/tmp_71qa23o.d(15): Error: no identifier for declarator `string`\n/tmp/tmp_71qa23o.d(15): Error: found `)` when expecting `;`\n/tmp/tmp_71qa23o.d(18): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_71qa23o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n        }\n        count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n        }\n        count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n        }\n        count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n        }\n        count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpux51zy4c.d(119): Error: no identifier for declarator `int`\n/tmp/tmpux51zy4c.d(119): Error: expression expected, not `unittest`\n/tmp/tmpux51zy4c.d(120): Error: found `{` when expecting `;` following `for` condition\n/tmp/tmpux51zy4c.d(121): Error: expression expected, not `alias`\n/tmp/tmpux51zy4c.d(121): Error: found `candidate` when expecting `)`\n/tmp/tmpux51zy4c.d(121): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpux51zy4c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    for(auto c : string) \n    {\n        distinct += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n    return distinct;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string like \"abA\"\n<|/ c |>\n<| c |>\nIt does. I tested it before posting it. What do you mean by \"doesn't work\"? It returns 3 for \"abA\".\n<|/ c |>\n<| c |>\nI mean it returns 3 instead of 4\n<|/ c |>\n<| c |>\nI tested it again and it returns 4 for \"abA\". Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running it on ideone.com\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzh6lao7j.d(14): Error: no identifier for declarator `c`\n/tmp/tmpzh6lao7j.d(14): Error: expression expected, not `:`\n/tmp/tmpzh6lao7j.d(14): Error: found `string` when expecting `;` following `for` condition\n/tmp/tmpzh6lao7j.d(20): Error: declaration expected, not `<`\n/tmp/tmpzh6lao7j.d(23): Error: unterminated character constant\n/tmp/tmpzh6lao7j.d(35): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzh6lao7j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinctCharacters = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        distinctCharacters += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : 1;\n    }\n    return distinctCharacters;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp30jvjwsc.d(14): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30jvjwsc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        if(!islower(char) && !isupper(char)){\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdg1qdp_d.d(15): Error: no identifier for declarator `char`\n/tmp/tmpdg1qdp_d.d(15): Error: no identifier for declarator `string`\n/tmp/tmpdg1qdp_d.d(15): Error: found `)` when expecting `;`\n/tmp/tmpdg1qdp_d.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmpdg1qdp_d.d(16): Error: found `&&` when expecting identifier following `char`.\n/tmp/tmpdg1qdp_d.d(16): Error: found `!` when expecting `,`\n/tmp/tmpdg1qdp_d.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmpdg1qdp_d.d(16): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpdg1qdp_d.d(16): Error: found `{` when expecting `,`\n/tmp/tmpdg1qdp_d.d(17): Error: found `;` when expecting `,`\n/tmp/tmpdg1qdp_d.d(18): Error: expression expected, not `}`\n/tmp/tmpdg1qdp_d.d(19): Error: found `}` when expecting `,`\n/tmp/tmpdg1qdp_d.d(20): Error: expression expected, not `return`\n/tmp/tmpdg1qdp_d.d(20): Error: found `count` when expecting `,`\n/tmp/tmpdg1qdp_d.d(20): Error: expression expected, not `;`\n/tmp/tmpdg1qdp_d.d",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n        }\n        count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpko54_vg6.d(14): Error: no property `length` for type `string`\n/tmp/tmpko54_vg6.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpko54_vg6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char,string){\n        result += char.hashCode();\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int countDistinctChars(String str) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if(str.indexOf(c) == str.lastIndexOf(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,java |>\n<| a tags=string,java |>\n<code>\npublic int countDistinctChars(String str) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if(str.indexOf(c) == str.lastIndexOf(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,java |>\n<code>\npublic int countDistinctChars(String str) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if(str.indexOf(c) == str.lastIndexOf(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npublic int countDistinctChars(String str) {\n    int count = 0;\n    for(int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if(str.indexOf(c) == str.lastIndexOf(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,java |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment); instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead). - [From Review](/review/low-quality-posts/27825814)\n<|/ c |>\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpits950q9.d(14): Error: no identifier for declarator `char`\n/tmp/tmpits950q9.d(14): Error: no identifier for declarator `string`\n/tmp/tmpits950q9.d(14): Error: found `)` when expecting `;`\n/tmp/tmpits950q9.d(17): Error: found `return` when expecting `)`\n/tmp/tmpits950q9.d(19): Error: declaration expected, not `<`\n/tmp/tmpits950q9.d(25): Error: declaration expected, not `for`\n/tmp/tmpits950q9.d(25): Error: no identifier for declarator `i`\n/tmp/tmpits950q9.d(25): Error: declaration expected, not `<`\n/tmp/tmpits950q9.d(25): Error: no identifier for declarator `i`\n/tmp/tmpits950q9.d(25): Error: declaration expected, not `++`\n/tmp/tmpits950q9.d(27): Error: declaration expected, not `if`\n/tmp/tmpits950q9.d(29): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpits950q9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        foreach(char, string) {\n            foreach(char, string) {\n                foreach(char, string) {\n                    foreach(char, string) {\n                        foreach(char, string) {\n                            foreach(char, string) {\n                                foreach(char, string) {\n                                    foreach(char, string) {\n                                        foreach(char, string) {\n                                            foreach(char, string) {\n                                                foreach(char, string) {\n                                                    foreach(char, string) {\n                                                        foreach(char, string) {\n                                                            foreach(char, string) {\n                                                                foreach(char, string) {\n                                                                    foreach(char, string) {\n                                                                        foreach(char, string) {\n                                                                            foreach(char, string) {\n                                                                                foreach(char, string) {\n                                                                                    foreach(char, string) {\n                                                                                        foreach(char, string) {\n                                                                                            foreach(char, string) {\n                                                                                                foreach(char, string) {\n                                                                                                    foreach(char, string) {\n                                                                                                        foreach(char, string) {\n                                                                                                            foreach(char, string) {\n                                                                                                                foreach(char, string) {\n                                                                                                                    foreach(char, string) {\n                                                                                                                        foreach(char, string) {\n                                                                                                                            foreach(char, string) {\n                                                                                                                                foreach(char, string) {\n                                                                                                                                    foreach(char, string) {\n                                                                                                                                        foreach(char, string) {\n                                                                                                                                            foreach(char, string) {\n                                                                                                                                                foreach(char, string) {\n                                                                                                                                                    foreach(char, string) {\n                                                                                                                                                        foreach(char, string) {\n                                                                                                                                                            foreach(char, string) {\n                                                                                                                                                                foreach(char, string) {\n                                                                                                                                                                    foreach(char, string) {\n                                                                                                                                                                        foreach(char, string) {\n                                                                                                                                                                            foreach(char, string) {\n                                                                                                                                                                                foreach(char, string) {\n                                                                                                                                                                                    foreach(char, string) {\n                                                                                                                                                                                        foreach(char, string) {\n                                                                                                                                                                                            foreach(char, string) {\n                                                                                                                                                                                                foreach(char, string) {\n                                                                                                                                                                                                    foreach(char, string) {\n                                                                                                                                                                                                        foreach(char, string) {\n                                                                                                                                                                                                            foreach(char, string) {\n                                                                                                                                                                                                                foreach(char, string) {\n                                                                                                                                                                                                                    foreach(char, string) {\n                                                                                                                                                                                                                        foreach(char, string) {\n                                                                                                                                                                                                                            foreach(char, string) {\n                                                                                                                                                                                                                                foreach(char, string) {\n                                                                                                                                                                                                                                    foreach(char, string) {\n                                                                                                                                                                                                                                        foreach(char, string) {\n                                                                                                                                                                                                                                            foreach(char, string) {\n                                                                                                                                                                                                                                                foreach(char, string) {\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu34gmirk.d(15): Error: no identifier for declarator `char`\n/tmp/tmpu34gmirk.d(15): Error: no identifier for declarator `string`\n/tmp/tmpu34gmirk.d(15): Error: found `)` when expecting `;`\n/tmp/tmpu34gmirk.d(16): Error: no identifier for declarator `char`\n/tmp/tmpu34gmirk.d(16): Error: no identifier for declarator `string`\n/tmp/tmpu34gmirk.d(16): Error: found `)` when expecting `;`\n/tmp/tmpu34gmirk.d(17): Error: no identifier for declarator `char`\n/tmp/tmpu34gmirk.d(17): Error: no identifier for declarator `string`\n/tmp/tmpu34gmirk.d(17): Error: found `)` when expecting `;`\n/tmp/tmpu34gmirk.d(18): Error: no identifier for declarator `char`\n/tmp/tmpu34gmirk.d(18): Error: no identifier for declarator `string`\n/tmp/tmpu34gmirk.d(18): Error: found `)` when expecting `;`\n/tmp/tmpu34gmirk.d(19): Error: no identifier for declarator `char`\n/tmp/tmpu34gmirk.d(19): Error: no identifier for declarator `string`\n/tmp/tmpu34gmirk.d(19): Error: found `)` when expecting `;`\n/tmp/tmpu34gmirk.d(20): Error: no identifier",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz8qmb5qi.d(15): Error: found `in` when expecting `;`\n/tmp/tmpz8qmb5qi.d(17): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpz8qmb5qi.d(17): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8qmb5qi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjkzr9t_2.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkzr9t_2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_count(string.subarray(i, i + 1));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzmedcmqo.d(14): Error: no property `length` for type `string`\n/tmp/tmpzmedcmqo.d(16): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmedcmqo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqyby0ll2.d(14): Error: no property `length` for type `string`\n/tmp/tmpqyby0ll2.d(16): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpqyby0ll2.d(31): Error: no property `length` for type `string`\n/tmp/tmpqyby0ll2.d(33): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpqyby0ll2.d(48): Error: no property `length` for type `string`\n/tmp/tmpqyby0ll2.d(50): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpqyby0ll2.d(65): Error: no property `length` for type `string`\n/tmp/tmpqyby0ll2.d(67): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpqyby0ll2.d(82): Error: no property `length` for type `string`\n/tmp/tmpqyby0ll2.d(84): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpqyby0ll2.d(99): Error: no property `length` for type `string`\n/tmp/tmpqyby0ll2.d(101): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmpqyby0ll2.d(109): Error: `tmpqyby0ll2.count_distinct_characters` called with argument types `(string)` matches",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `char`\n/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `string`\n/tmp/tmp6tq90gos.d(14): Error: found `)` when expecting `;`\n/tmp/tmp6tq90gos.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tq90gos.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplopsetby.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplopsetby.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplopsetby.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplopsetby.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(auto c : string)\n    {\n        result += std.algorithm.count_distinct_characters(c);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo7qixj9k.d(14): Error: no identifier for declarator `c`\n/tmp/tmpo7qixj9k.d(14): Error: expression expected, not `:`\n/tmp/tmpo7qixj9k.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7qixj9k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n            string temp2 = temp.substr(j, 1);\n            count += count_distinct_characters(temp2);\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis is not the right answer. Try `count_distinct_characters(\"abbcccdd\")` with your algorithm.\n<|/ c |>\n<| c |>\nI agree, my algorithm is incorrect. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed the algorithm and added a test case to my answer.\n<|/ c |>\n<| c |>\nI fixed the algorithm and added a test case to my answer.\n<|/ c |>\n<| c |>\nI fixed the algorithm and added a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\nI believe this can be done in O(n) time complexity using hash tables. \n<code>\n#include <iostream>\n#include <string>\n#include <unordered_map>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqnsbz7e_.d(25): Error: declaration expected, not `<`\n/tmp/tmpqnsbz7e_.d(31): Error: unterminated character constant\n/tmp/tmpqnsbz7e_.d(52): Error: declaration expected, not `assert`\n/tmp/tmpqnsbz7e_.d(53): Error: declaration expected, not `assert`\n/tmp/tmpqnsbz7e_.d(54): Error: declaration expected, not `assert`\n/tmp/tmpqnsbz7e_.d(55): Error: declaration expected, not `assert`\n/tmp/tmpqnsbz7e_.d(56): Error: declaration expected, not `assert`\n/tmp/tmpqnsbz7e_.d(57): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnsbz7e_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        distinct += std.algorithm.distinct(c).count;\n    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppu0y8uje.d(14): Error: no property `length` for type `string`\n/tmp/tmppu0y8uje.d(17): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu0y8uje.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n        foreach(char c2 in string)\n        {\n            if (c == c2)\n            {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfdobkem9.d(15): Error: found `in` when expecting `;`\n/tmp/tmpfdobkem9.d(17): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfdobkem9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3eg4lvsw.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3eg4lvsw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw5fvtmhd.d(14): Error: no property `length` for type `string`\n/tmp/tmpw5fvtmhd.d(16): Error: no property `at` for type `string`\n/tmp/tmpw5fvtmhd.d(17): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5fvtmhd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwcece49i.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcece49i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    foreach(char c in string)\n    {\n        distinct += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqmks0fsb.d(14): Error: found `in` when expecting `;`\n/tmp/tmpqmks0fsb.d(16): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpqmks0fsb.d(16): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmks0fsb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyzbav4l1.d(14): Error: no identifier for declarator `char`\n/tmp/tmpyzbav4l1.d(14): Error: no identifier for declarator `string`\n/tmp/tmpyzbav4l1.d(14): Error: found `)` when expecting `;`\n/tmp/tmpyzbav4l1.d(18): Error: found `return` when expecting `)`\n/tmp/tmpyzbav4l1.d(20): Error: declaration expected, not `<`\n/tmp/tmpyzbav4l1.d(32): Error: declaration expected, not `assert`\n/tmp/tmpyzbav4l1.d(33): Error: declaration expected, not `assert`\n/tmp/tmpyzbav4l1.d(34): Error: declaration expected, not `assert`\n/tmp/tmpyzbav4l1.d(35): Error: declaration expected, not `assert`\n/tmp/tmpyzbav4l1.d(36): Error: declaration expected, not `assert`\n/tmp/tmpyzbav4l1.d(37): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzbav4l1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += std.string.count(c);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparj7rurf.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparj7rurf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjkzr9t_2.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkzr9t_2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkfdb51a2.d(14): Error: found `in` when expecting `;`\n/tmp/tmpkfdb51a2.d(16): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpkfdb51a2.d(16): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfdb51a2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n            else\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0e8tz0li.d(14): Error: no property `length` for type `string`\n/tmp/tmp0e8tz0li.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0e8tz0li.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphc4i4vb_.d(14): Error: no identifier for declarator `char`\n/tmp/tmphc4i4vb_.d(14): Error: no identifier for declarator `string`\n/tmp/tmphc4i4vb_.d(14): Error: found `)` when expecting `;`\n/tmp/tmphc4i4vb_.d(18): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphc4i4vb_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `char`\n/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `string`\n/tmp/tmpf4kdjujg.d(15): Error: found `)` when expecting `;`\n/tmp/tmpf4kdjujg.d(20): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kdjujg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplopsetby.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplopsetby.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp23xzlt1t.d(14): Error: no property `length` for type `string`\n/tmp/tmp23xzlt1t.d(17): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23xzlt1t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `char`\n/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `string`\n/tmp/tmp6tq90gos.d(14): Error: found `)` when expecting `;`\n/tmp/tmp6tq90gos.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tq90gos.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string) \n    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp913l_u3r.d(14): Error: no identifier for declarator `c`\n/tmp/tmp913l_u3r.d(14): Error: expression expected, not `:`\n/tmp/tmp913l_u3r.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp913l_u3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.string.get_char_count(string[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd2r9c7vs.d(14): Error: no property `length` for type `string`\n/tmp/tmpd2r9c7vs.d(16): Error: undefined identifier `string` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2r9c7vs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ? 1L : 0L);\n    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprcp4_2hg.d(14): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcp4_2hg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) {\n        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 9 : 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdhamb34f.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhamb34f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += count_distinct_characters(c);\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoftx8sp9.d(14): Error: no identifier for declarator `c`\n/tmp/tmpoftx8sp9.d(14): Error: expression expected, not `:`\n/tmp/tmpoftx8sp9.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoftx8sp9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (c - 'A');\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpptaj9zbb.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptaj9zbb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphc4i4vb_.d(14): Error: no identifier for declarator `char`\n/tmp/tmphc4i4vb_.d(14): Error: no identifier for declarator `string`\n/tmp/tmphc4i4vb_.d(14): Error: found `)` when expecting `;`\n/tmp/tmphc4i4vb_.d(18): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphc4i4vb_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n            string temp2 = temp.substr(j, 1);\n            count += count_distinct_characters(temp2);\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprlauvaxt.d(14): Error: no property `length` for type `string`\n/tmp/tmprlauvaxt.d(16): Error: `string` is used as a type\n/tmp/tmprlauvaxt.d(16): Error: no property `substr` for type `string`\n/tmp/tmprlauvaxt.d(19): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlauvaxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char,string) {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcgbmci50.d(14): Error: no identifier for declarator `char`\n/tmp/tmpcgbmci50.d(14): Error: no identifier for declarator `string`\n/tmp/tmpcgbmci50.d(14): Error: found `)` when expecting `;`\n/tmp/tmpcgbmci50.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgbmci50.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinctCharacters = 0;\n    \n    for (auto c : string)\n    {\n        distinctCharacters += (tolower(c) - 'a');\n    }\n    \n    return distinctCharacters;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpex2yxee1.d(15): Error: no identifier for declarator `c`\n/tmp/tmpex2yxee1.d(15): Error: expression expected, not `:`\n/tmp/tmpex2yxee1.d(15): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex2yxee1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c) && !std.isUpper(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz18zcyew.d(14): Error: no property `length` for type `string`\n/tmp/tmpz18zcyew.d(17): Error: undefined identifier `isLower` in package `std`\n/tmp/tmpz18zcyew.d(17): Error: undefined identifier `isUpper` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz18zcyew.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += (char)toupper(char) - 'A' + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa6_kyfl4.d(14): Error: no identifier for declarator `char`\n/tmp/tmpa6_kyfl4.d(14): Error: no identifier for declarator `string`\n/tmp/tmpa6_kyfl4.d(14): Error: found `)` when expecting `;`\n/tmp/tmpa6_kyfl4.d(15): Error: found `)` when expecting `.` following char\n/tmp/tmpa6_kyfl4.d(15): Error: found `-` when expecting identifier following `char`.\n/tmp/tmpa6_kyfl4.d(15): Error: found `65U` when expecting `,`\n/tmp/tmpa6_kyfl4.d(15): Error: found `;` when expecting `,`\n/tmp/tmpa6_kyfl4.d(16): Error: expression expected, not `}`\n/tmp/tmpa6_kyfl4.d(17): Error: found `return` when expecting `,`\n/tmp/tmpa6_kyfl4.d(17): Error: found `;` when expecting `,`\n/tmp/tmpa6_kyfl4.d(18): Error: expression expected, not `}`\n/tmp/tmpa6_kyfl4.d(19): Error: found `unittest` when expecting `,`\n/tmp/tmpa6_kyfl4.d(29): Error: found `void` when expecting `,`\n/tmp/tmpa6_kyfl4.d(29): Error: found `{` when expecting `,`\n/tmp/tmpa6_kyfl4.d(29): Error: expression expected, not `}`\n/tmp/tmpa6_kyfl4.d(29): Error: found `End of File` ",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpktmgguq9.d(108): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktmgguq9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_71qa23o.d(15): Error: no identifier for declarator `char`\n/tmp/tmp_71qa23o.d(15): Error: no identifier for declarator `string`\n/tmp/tmp_71qa23o.d(15): Error: found `)` when expecting `;`\n/tmp/tmp_71qa23o.d(18): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_71qa23o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!isalpha(c))\n            continue;\n        \n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(isalpha(d))\n            {\n                if(tolower(c) == tolower(d))\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqzyhari7.d(14): Error: no property `length` for type `string`\n/tmp/tmpqzyhari7.d(17): Error: undefined identifier `isalpha`\n/tmp/tmpqzyhari7.d(20): Error: no property `length` for type `string`\n/tmp/tmpqzyhari7.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpqzyhari7.d(25): Error: undefined identifier `tolower`\n/tmp/tmpqzyhari7.d(25): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzyhari7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!isalpha(c))\n        {\n            count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfs6mea2q.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs6mea2q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a string like \"abBcCdD\"\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer accordingly.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated my answer accordingly.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpye8vlnr1.d(14): Error: found `in` when expecting `;`\n/tmp/tmpye8vlnr1.d(16): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpye8vlnr1.d(16): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\n/tmp/tmpye8vlnr1.d(20): Error: declaration expected, not `<`\n/tmp/tmpye8vlnr1.d(23): Error: unterminated character constant\n/tmp/tmpye8vlnr1.d(26): Error: unterminated character constant\n/tmp/tmpye8vlnr1.d(29): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpye8vlnr1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char, string) {\n        result += char.hashCode();\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp70k8tgrz.d(14): Error: no identifier for declarator `char`\n/tmp/tmp70k8tgrz.d(14): Error: no identifier for declarator `string`\n/tmp/tmp70k8tgrz.d(14): Error: found `)` when expecting `;`\n/tmp/tmp70k8tgrz.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70k8tgrz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    for (auto c : string)\n    {\n        auto lower = tolower(c);\n        auto upper = toupper(c);\n        \n        if (lower == upper)\n        {\n            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprmcgehja.d(15): Error: no identifier for declarator `c`\n/tmp/tmprmcgehja.d(15): Error: expression expected, not `:`\n/tmp/tmprmcgehja.d(15): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmcgehja.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string sub = string.substr(i, 1);\n        for(int j = 0; j < sub.length(); j++)\n        {\n            string sub2 = sub.substr(j, 1);\n            count += count_distinct_characters(sub2);\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf5l9lam5.d(14): Error: no property `length` for type `string`\n/tmp/tmpf5l9lam5.d(16): Error: `string` is used as a type\n/tmp/tmpf5l9lam5.d(16): Error: no property `substr` for type `string`\n/tmp/tmpf5l9lam5.d(19): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5l9lam5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong result = 0;\n\tfor (auto c : string)\n\t{\n\t\tresult += std.algorithm.count_distinct_chars(c);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp89de9osg.d(14): Error: no identifier for declarator `c`\n/tmp/tmp89de9osg.d(14): Error: expression expected, not `:`\n/tmp/tmp89de9osg.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89de9osg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n            string temp2 = temp.substr(j, 1);\n            if(!temp2.empty())\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n            string temp2 = temp.substr(j, 1);\n            if(!temp2.empty())\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n            string temp2 = temp.substr(j, 1);\n            if(!temp2.empty())\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n            string temp2 = temp.substr(j, 1);\n            if(!temp2.empty())\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwy30gjil.d(103): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwy30gjil.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) {\n        count += count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpic2u3kb3.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic2u3kb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd3y32yog.d(14): Error: found `in` when expecting `;`\n/tmp/tmpd3y32yog.d(16): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpd3y32yog.d(16): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3y32yog.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgkzl08fu.d(14): Error: found `in` when expecting `;`\n/tmp/tmpgkzl08fu.d(31): Error: found `in` when expecting `;`\n/tmp/tmpgkzl08fu.d(48): Error: found `in` when expecting `;`\n/tmp/tmpgkzl08fu.d(65): Error: found `in` when expecting `;`\n/tmp/tmpgkzl08fu.d(82): Error: found `in` when expecting `;`\n/tmp/tmpgkzl08fu.d(99): Error: found `in` when expecting `;`\n/tmp/tmpgkzl08fu.d(105): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkzl08fu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc_pwci0n.d(14): Error: no property `length` for type `string`\n/tmp/tmpc_pwci0n.d(17): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_pwci0n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `char`\n/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `string`\n/tmp/tmp6tq90gos.d(14): Error: found `)` when expecting `;`\n/tmp/tmp6tq90gos.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tq90gos.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    foreach(char c in string) \n    {\n        distinct += (int)c;\n    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwab_9toy.d(14): Error: found `in` when expecting `;`\n/tmp/tmpwab_9toy.d(16): Error: C style cast illegal, use `cast(int)c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwab_9toy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string) \n    {\n        auto lower = tolower(c);\n        auto upper = toupper(c);\n        if(lower != upper) \n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr76xuedf.d(14): Error: no identifier for declarator `c`\n/tmp/tmpr76xuedf.d(14): Error: expression expected, not `:`\n/tmp/tmpr76xuedf.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr76xuedf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        char c = char;\n        \n        foreach(char, string) {\n            if (c == char) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp025dv_km.d(15): Error: no identifier for declarator `char`\n/tmp/tmp025dv_km.d(15): Error: no identifier for declarator `string`\n/tmp/tmp025dv_km.d(15): Error: found `)` when expecting `;`\n/tmp/tmp025dv_km.d(16): Error: found `;` when expecting `.` following char\n/tmp/tmp025dv_km.d(18): Error: found `foreach` when expecting identifier following `char`.\n/tmp/tmp025dv_km.d(18): Error: found `,` when expecting `.` following char\n/tmp/tmp025dv_km.d(18): Error: semicolon expected, not `{`\n/tmp/tmp025dv_km.d(19): Error: found `)` when expecting `.` following char\n/tmp/tmp025dv_km.d(19): Error: found `{` when expecting identifier following `char`.\n/tmp/tmp025dv_km.d(20): Error: found `count` when expecting `)`\n/tmp/tmp025dv_km.d(20): Error: expression expected, not `;`\n/tmp/tmp025dv_km.d(21): Error: found `}` when expecting `;` following statement\n/tmp/tmp025dv_km.d(25): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp025dv_km.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));\n    }\n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn99hn4h4.d(14): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn99hn4h4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n        if(!std.ctype.isUpper(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy4qabrqj.d(14): Error: no property `length` for type `string`\n/tmp/tmpy4qabrqj.d(16): Error: no property `at` for type `string`\n/tmp/tmpy4qabrqj.d(17): Error: undefined identifier `ctype` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4qabrqj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\t\tauto upper = toupper(c);\n\t\tif (lower != upper) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4rizg55u.d(14): Error: no identifier for declarator `c`\n/tmp/tmp4rizg55u.d(14): Error: expression expected, not `:`\n/tmp/tmp4rizg55u.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rizg55u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwcece49i.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcece49i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string)\n    {\n        auto it = std::find_if(string.begin(), string.end(), [&](char ch){ return std::toupper(ch) == std::toupper(c); });\n        if(it != string.end())\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzexhixqh.d(14): Error: no identifier for declarator `c`\n/tmp/tmpzexhixqh.d(14): Error: expression expected, not `:`\n/tmp/tmpzexhixqh.d(14): Error: found `string` when expecting `;` following `for` condition\n/tmp/tmpzexhixqh.d(16): Error: semicolon expected following auto declaration, not `:`\n/tmp/tmpzexhixqh.d(16): Error: found `:` instead of statement\n/tmp/tmpzexhixqh.d(16): Error: found `)` instead of statement\n/tmp/tmpzexhixqh.d(22): Error: declaration expected, not `return`\n/tmp/tmpzexhixqh.d(23): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzexhixqh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinctCharacters = 0;\n    \n    foreach(char c in string) \n    {\n        distinctCharacters++;\n        \n        if(distinctCharacters > 1) \n        {\n            break;\n        }\n    }\n    \n    return distinctCharacters;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThis code does not work. `count_distinct_characters(\"xyzXYZ\")` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `count_distinct_characters(\"xyzXYZ\")` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `count_distinct_characters(\"xyzXYZ\")` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `count_distinct_characters(\"xyzXYZ\")` returns `3L` instead of `2L`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `count_distinct_characters(\"xyzXYZ\")` returns `3L` instead of `2L`.\n<|/ c |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2xk280p.d(15): Error: found `in` when expecting `;`\n/tmp/tmpw2xk280p.d(27): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2xk280p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string sub = string.substr(i, 1);\n        for(int j = 0; j < sub.length(); j++)\n        {\n            string sub2 = sub.substr(j, 1);\n            count += sub2.length();\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnrldmly8.d(14): Error: no property `length` for type `string`\n/tmp/tmpnrldmly8.d(16): Error: `string` is used as a type\n/tmp/tmpnrldmly8.d(16): Error: no property `substr` for type `string`\n/tmp/tmpnrldmly8.d(19): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrldmly8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_71qa23o.d(15): Error: no identifier for declarator `char`\n/tmp/tmp_71qa23o.d(15): Error: no identifier for declarator `string`\n/tmp/tmp_71qa23o.d(15): Error: found `)` when expecting `;`\n/tmp/tmp_71qa23o.d(18): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_71qa23o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tchar c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++) {\n\t\t\tif (i == j) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tchar d = string[j];\n\t\t\tif (islower(c) && islower(d)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (isupper(c) && isupper(d))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaoyrqda3.d(14): Error: no property `length` for type `string`\n/tmp/tmpaoyrqda3.d(16): Error: no property `length` for type `string`\n/tmp/tmpaoyrqda3.d(21): Error: undefined identifier `islower`\n/tmp/tmpaoyrqda3.d(21): Error: undefined identifier `islower`\n/tmp/tmpaoyrqda3.d(24): Error: undefined identifier `isupper`\n/tmp/tmpaoyrqda3.d(24): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaoyrqda3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkfdb51a2.d(14): Error: found `in` when expecting `;`\n/tmp/tmpkfdb51a2.d(16): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpkfdb51a2.d(16): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfdb51a2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `char`\n/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `string`\n/tmp/tmp6tq90gos.d(14): Error: found `)` when expecting `;`\n/tmp/tmp6tq90gos.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tq90gos.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `char`\n/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `string`\n/tmp/tmpf4kdjujg.d(15): Error: found `)` when expecting `;`\n/tmp/tmpf4kdjujg.d(20): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kdjujg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) \n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphc4i4vb_.d(14): Error: no identifier for declarator `char`\n/tmp/tmphc4i4vb_.d(14): Error: no identifier for declarator `string`\n/tmp/tmphc4i4vb_.d(14): Error: found `)` when expecting `;`\n/tmp/tmphc4i4vb_.d(18): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphc4i4vb_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp111qgczx.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp111qgczx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `char`\n/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `string`\n/tmp/tmpgzfeqm47.d(15): Error: found `)` when expecting `;`\n/tmp/tmpgzfeqm47.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzfeqm47.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    for (auto c : string) \n    {\n        auto lower = tolower(c);\n        auto upper = toupper(c);\n        \n        if (lower == upper) \n        {\n            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgut7_qkx.d(15): Error: no identifier for declarator `c`\n/tmp/tmpgut7_qkx.d(15): Error: expression expected, not `:`\n/tmp/tmpgut7_qkx.d(15): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgut7_qkx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `char`\n/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `string`\n/tmp/tmpgzfeqm47.d(15): Error: found `)` when expecting `;`\n/tmp/tmpgzfeqm47.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzfeqm47.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n        for(int j = 0; j < temp.length(); j++)\n        {\n            if(temp[j] != string[i])\n            {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj0_2o027.d(14): Error: no property `length` for type `string`\n/tmp/tmpj0_2o027.d(16): Error: `string` is used as a type\n/tmp/tmpj0_2o027.d(16): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj0_2o027.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char, string) {\n        result += char.ordinal();\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi5ya8ljd.d(14): Error: no identifier for declarator `char`\n/tmp/tmpi5ya8ljd.d(14): Error: no identifier for declarator `string`\n/tmp/tmpi5ya8ljd.d(14): Error: found `)` when expecting `;`\n/tmp/tmpi5ya8ljd.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5ya8ljd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n            else\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsivgfpf1.d(14): Error: no property `length` for type `string`\n/tmp/tmpsivgfpf1.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsivgfpf1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.algorithm.contains(string.chars, c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptu012emu.d(14): Error: no property `length` for type `string`\n/tmp/tmptu012emu.d(17): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu012emu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `char`\n/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `string`\n/tmp/tmpgzfeqm47.d(15): Error: found `)` when expecting `;`\n/tmp/tmpgzfeqm47.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzfeqm47.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string)\n    {\n        count += std.algorithm.distinct(c).count;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpezugs8nf.d(14): Error: no identifier for declarator `c`\n/tmp/tmpezugs8nf.d(14): Error: expression expected, not `:`\n/tmp/tmpezugs8nf.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezugs8nf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char c in string) \n    {\n        count += count_distinct_characters(c);\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqya0lkkv.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqya0lkkv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n            else\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsivgfpf1.d(14): Error: no property `length` for type `string`\n/tmp/tmpsivgfpf1.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsivgfpf1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (islower(c)) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpul636g3f.d(14): Error: no identifier for declarator `c`\n/tmp/tmpul636g3f.d(14): Error: expression expected, not `:`\n/tmp/tmpul636g3f.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpul636g3f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `char`\n/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `string`\n/tmp/tmpf4kdjujg.d(15): Error: found `)` when expecting `;`\n/tmp/tmpf4kdjujg.d(20): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kdjujg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char, string) {\n        result += char.ordinal();\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi5ya8ljd.d(14): Error: no identifier for declarator `char`\n/tmp/tmpi5ya8ljd.d(14): Error: no identifier for declarator `string`\n/tmp/tmpi5ya8ljd.d(14): Error: found `)` when expecting `;`\n/tmp/tmpi5ya8ljd.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5ya8ljd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!isalpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_dqao34g.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dqao34g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string sub = string.substr(i, 1);\n        count += sub.length();\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_g2g0tk1.d(14): Error: no property `length` for type `string`\n/tmp/tmp_g2g0tk1.d(16): Error: `string` is used as a type\n/tmp/tmp_g2g0tk1.d(16): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_g2g0tk1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\t\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\t\tauto upper = toupper(c);\n\t\t\n\t\tif (lower == upper) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount += 2;\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzffta49e.d(15): Error: no identifier for declarator `c`\n/tmp/tmpzffta49e.d(15): Error: expression expected, not `:`\n/tmp/tmpzffta49e.d(15): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzffta49e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    \n    foreach(char c in string) {\n        distinct++;\n    }\n    \n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplncvtfxc.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplncvtfxc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t\tcount += 2L;\n\t\telse if (islower(c)) \n\t\t\tcount += 2L;\n\t\telse \n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2nl6drb6.d(14): Error: no identifier for declarator `c`\n/tmp/tmp2nl6drb6.d(14): Error: expression expected, not `:`\n/tmp/tmp2nl6drb6.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nl6drb6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\t\tauto upper = toupper(c);\n\t\tif (lower != upper) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4rizg55u.d(14): Error: no identifier for declarator `c`\n/tmp/tmp4rizg55u.d(14): Error: expression expected, not `:`\n/tmp/tmp4rizg55u.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rizg55u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += std.algorithm.distinct_chars(c);\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_ypdkm74.d(14): Error: no identifier for declarator `c`\n/tmp/tmp_ypdkm74.d(14): Error: expression expected, not `:`\n/tmp/tmp_ypdkm74.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ypdkm74.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (char c : string) \n\t{\n\t\tif (islower(c)) \n\t\t\tcount++;\n\t\telse if (isupper(c)) \n\t\t\tcount++;\n\t\telse \n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf96r7n7y.d(14): Error: semicolon expected, not `:`\n/tmp/tmpf96r7n7y.d(14): Error: expression expected, not `:`\n/tmp/tmpf96r7n7y.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf96r7n7y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        foreach(char c2 in string) \n        {\n            if (c == c2) \n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq43u0dp_.d(14): Error: found `in` when expecting `;`\n/tmp/tmpq43u0dp_.d(16): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq43u0dp_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc_pwci0n.d(14): Error: no property `length` for type `string`\n/tmp/tmpc_pwci0n.d(17): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_pwci0n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4d8t_ygu.d(14): Error: no property `length` for type `string`\n/tmp/tmp4d8t_ygu.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d8t_ygu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            if(c == string[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphc2fxkpv.d(14): Error: no property `length` for type `string`\n/tmp/tmphc2fxkpv.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphc2fxkpv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ? 1L : 0L);\n    }\n    return distinct;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `count_distinct_characters(\"Jerry\")`.\n<|/ c |>\n<| c |>\n: I tested it and it works. I even tested it on `count_distinct_characters(\"Jerry\")` before posting my answer. Can you give me an example where it fails?\n<|/ c |>\n<| c |>\n: I tested it on `count_distinct_characters(\"Jerry\")` before posting my answer. Can you give me an example where it fails?\n<|/ c |>\n<| c |>\n: I tested it on `count_distinct_characters(\"Jerry\")` before posting my answer. Can you give me an example where it fails?\n<|/ c |>\n<| c |>\n: I tested it on `count_distinct_characters(\"Jerry\")` before posting my answer. Can you give me an example where it fails?\n<|/ c |>\n<| a dscore=1 |>\n<code>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphhsbit7a.d(21): Error: declaration expected, not `<`\n/tmp/tmphhsbit7a.d(24): Error: unterminated character constant\n/tmp/tmphhsbit7a.d(44): Error: declaration expected, not `assert`\n/tmp/tmphhsbit7a.d(45): Error: declaration expected, not `assert`\n/tmp/tmphhsbit7a.d(46): Error: declaration expected, not `assert`\n/tmp/tmphhsbit7a.d(47): Error: declaration expected, not `assert`\n/tmp/tmphhsbit7a.d(48): Error: declaration expected, not `assert`\n/tmp/tmphhsbit7a.d(49): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhsbit7a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string)\n    {\n        result += tolower(c) - 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu4r7etey.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4r7etey.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += std.algorithm.distinct(c).length;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvcktsgd3.d(14): Error: found `in` when expecting `;`\n/tmp/tmpvcktsgd3.d(31): Error: found `in` when expecting `;`\n/tmp/tmpvcktsgd3.d(48): Error: found `in` when expecting `;`\n/tmp/tmpvcktsgd3.d(65): Error: found `in` when expecting `;`\n/tmp/tmpvcktsgd3.d(82): Error: found `in` when expecting `;`\n/tmp/tmpvcktsgd3.d(99): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcktsgd3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string)\n    {\n        result += (int)c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprh4zrhoq.d(14): Error: found `in` when expecting `;`\n/tmp/tmprh4zrhoq.d(16): Error: C style cast illegal, use `cast(int)c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprh4zrhoq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n        if(!std.isUpper(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_94orym2.d(14): Error: no property `length` for type `string`\n/tmp/tmp_94orym2.d(16): Error: no property `at` for type `string`\n/tmp/tmp_94orym2.d(17): Error: undefined identifier `isUpper` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_94orym2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string)\n    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpex_mx7qm.d(14): Error: no identifier for declarator `c`\n/tmp/tmpex_mx7qm.d(14): Error: expression expected, not `:`\n/tmp/tmpex_mx7qm.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex_mx7qm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `char`\n/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `string`\n/tmp/tmp6tq90gos.d(14): Error: found `)` when expecting `;`\n/tmp/tmp6tq90gos.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tq90gos.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n            count++;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9hkh90i2.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hkh90i2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `char`\n/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `string`\n/tmp/tmpgzfeqm47.d(15): Error: found `)` when expecting `;`\n/tmp/tmpgzfeqm47.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzfeqm47.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmqd1sydw.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqd1sydw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += count_distinct_characters(string);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkix4nfe0.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkix4nfe0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n        char c = char;\n        \n        foreach(char, string) \n        {\n            if (c != char) \n            {\n                count++;\n                break;\n            }\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8mudp8wx.d(15): Error: no identifier for declarator `char`\n/tmp/tmp8mudp8wx.d(15): Error: no identifier for declarator `string`\n/tmp/tmp8mudp8wx.d(15): Error: found `)` when expecting `;`\n/tmp/tmp8mudp8wx.d(17): Error: found `;` when expecting `.` following char\n/tmp/tmp8mudp8wx.d(19): Error: found `foreach` when expecting identifier following `char`.\n/tmp/tmp8mudp8wx.d(19): Error: found `,` when expecting `.` following char\n/tmp/tmp8mudp8wx.d(20): Error: semicolon expected, not `{`\n/tmp/tmp8mudp8wx.d(21): Error: found `)` when expecting `.` following char\n/tmp/tmp8mudp8wx.d(22): Error: found `{` when expecting identifier following `char`.\n/tmp/tmp8mudp8wx.d(23): Error: found `count` when expecting `)`\n/tmp/tmp8mudp8wx.d(23): Error: expression expected, not `;`\n/tmp/tmp8mudp8wx.d(24): Error: found `break` when expecting `;` following statement\n/tmp/tmp8mudp8wx.d(24): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp8mudp8wx.d(27): Error: found `}` when expecting `)`\nFailed: [\"dmd\", \"-uni",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    \n    foreach(char, string) {\n        distinct += (char)toupper(char)-(char) tolower(char);\n    }\n    \n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplcx7ecff.d(15): Error: no identifier for declarator `char`\n/tmp/tmplcx7ecff.d(15): Error: no identifier for declarator `string`\n/tmp/tmplcx7ecff.d(15): Error: found `)` when expecting `;`\n/tmp/tmplcx7ecff.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmplcx7ecff.d(16): Error: found `-` when expecting identifier following `char`.\n/tmp/tmplcx7ecff.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmplcx7ecff.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmplcx7ecff.d(16): Error: found `;` when expecting identifier following `char`.\n/tmp/tmplcx7ecff.d(17): Error: found `}` when expecting `,`\n/tmp/tmplcx7ecff.d(19): Error: expression expected, not `return`\n/tmp/tmplcx7ecff.d(19): Error: found `distinct` when expecting `,`\n/tmp/tmplcx7ecff.d(19): Error: expression expected, not `;`\n/tmp/tmplcx7ecff.d(20): Error: found `}` when expecting `,`\n/tmp/tmplcx7ecff.d(21): Error: expression expected, not `unittest`\n/tmp/tmplcx7ecff.d(22): Error: found `{` when expectin",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0fjtdrdi.d(14): Error: found `in` when expecting `;`\n/tmp/tmp0fjtdrdi.d(20): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0fjtdrdi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    \n    foreach(char, string) {\n        distinct++;\n    }\n    \n    return distinct;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpej2zxzxy.d(15): Error: no identifier for declarator `char`\n/tmp/tmpej2zxzxy.d(15): Error: no identifier for declarator `string`\n/tmp/tmpej2zxzxy.d(15): Error: found `)` when expecting `;`\n/tmp/tmpej2zxzxy.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpej2zxzxy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    foreach(char c in string)\n    {\n        distinct = (distinct + 1) + ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));\n    }\n    return distinct;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| a tags=c++,algorithm,string |>\n<code>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2yphwgl.d(14): Error: found `in` when expecting `;`\n/tmp/tmpw2yphwgl.d(20): Error: declaration expected, not `<`\n/tmp/tmpw2yphwgl.d(43): Error: declaration expected, not `assert`\n/tmp/tmpw2yphwgl.d(44): Error: declaration expected, not `assert`\n/tmp/tmpw2yphwgl.d(45): Error: declaration expected, not `assert`\n/tmp/tmpw2yphwgl.d(46): Error: declaration expected, not `assert`\n/tmp/tmpw2yphwgl.d(47): Error: declaration expected, not `assert`\n/tmp/tmpw2yphwgl.d(48): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2yphwgl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr6k1h73q.d(14): Error: no property `length` for type `string`\n/tmp/tmpr6k1h73q.d(17): Error: undefined identifier `isLower` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6k1h73q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `string` doesn't have a `length` property. `string` doesn't have a `foreach` method.\n<|/ c |>\n<| c |>\nI fixed the code a bit. Sorry about that. My bad.\n<|/ c |>\n<| c |>\nI fixed the code a bit. Sorry about that. My bad.\n<|/ c |>\n<| a tags=string,c# |>\n<code>\nstring s = \"abc\";\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpab14t11s.d(14): Error: no identifier for declarator `char`\n/tmp/tmpab14t11s.d(14): Error: no identifier for declarator `string`\n/tmp/tmpab14t11s.d(14): Error: found `)` when expecting `;`\n/tmp/tmpab14t11s.d(17): Error: found `return` when expecting `)`\n/tmp/tmpab14t11s.d(19): Error: declaration expected, not `<`\n/tmp/tmpab14t11s.d(22): Error: unterminated character constant\n/tmp/tmpab14t11s.d(22): Error: unterminated character constant\n/tmp/tmpab14t11s.d(22): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpab14t11s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\n`string` isn't a standard C++ type. Are you sure this compiles?\n<|/ c |>\n<| c |>\nYes, it compiles just fine. I'm using `g++ -std=c++11 -o test test.cpp`\n<|/ c |>\n<| c |>\nI guess you meant `std::unordered_set<char>` instead of `std::unordered_set<std::string>`?\n<|/ c |>\n<| c |>\nYes, I meant `unordered_set<char>`. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string like \"aba\" and you want the count of distinct characters to return 2.\n<|/ c |>\n<| a dscore=5 tags=string,c++,algorithm |>\nThe most efficient way is to use std::unordered_set<char> and count the occurrences.\n<code>\n#include <unordered_set>\n#include <string>\n#include <iostream>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx_fflsin.d(14): Error: no identifier for declarator `char`\n/tmp/tmpx_fflsin.d(14): Error: no identifier for declarator `string`\n/tmp/tmpx_fflsin.d(14): Error: found `)` when expecting `;`\n/tmp/tmpx_fflsin.d(17): Error: found `return` when expecting `)`\n/tmp/tmpx_fflsin.d(19): Error: declaration expected, not `<`\n/tmp/tmpx_fflsin.d(22): Error: unterminated character constant\n/tmp/tmpx_fflsin.d(25): Error: unterminated character constant\n/tmp/tmpx_fflsin.d(34): Error: unterminated character constant\n/tmp/tmpx_fflsin.d(46): Error: declaration expected, not `assert`\n/tmp/tmpx_fflsin.d(47): Error: declaration expected, not `assert`\n/tmp/tmpx_fflsin.d(48): Error: declaration expected, not `assert`\n/tmp/tmpx_fflsin.d(49): Error: declaration expected, not `assert`\n/tmp/tmpx_fflsin.d(50): Error: declaration expected, not `assert`\n/tmp/tmpx_fflsin.d(51): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_fflsin.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            if(c == string[j])\n            {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmple8aiin1.d(14): Error: no property `length` for type `string`\n/tmp/tmple8aiin1.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmple8aiin1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr6k1h73q.d(14): Error: no property `length` for type `string`\n/tmp/tmpr6k1h73q.d(17): Error: undefined identifier `isLower` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr6k1h73q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.algorithm.contains(string.chars, c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptu012emu.d(14): Error: no property `length` for type `string`\n/tmp/tmptu012emu.d(17): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu012emu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string)\n    {\n        result += std.string.length(string);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj4umsi7s.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4umsi7s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_count_if(string.begin() + i, string.end(), [](char c) { return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); });\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp0uf9cyu.d(16): Error: found `c` when expecting `.` following char\n/tmp/tmpp0uf9cyu.d(16): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpp0uf9cyu.d(16): Error: found `{` when expecting `,`\n/tmp/tmpp0uf9cyu.d(16): Error: expression expected, not `return`\n/tmp/tmpp0uf9cyu.d(16): Error: found `;` when expecting `,`\n/tmp/tmpp0uf9cyu.d(16): Error: expression expected, not `}`\n/tmp/tmpp0uf9cyu.d(16): Error: found `;` when expecting `,`\n/tmp/tmpp0uf9cyu.d(17): Error: expression expected, not `}`\n/tmp/tmpp0uf9cyu.d(18): Error: found `return` when expecting `,`\n/tmp/tmpp0uf9cyu.d(18): Error: found `;` when expecting `,`\n/tmp/tmpp0uf9cyu.d(19): Error: expression expected, not `}`\n/tmp/tmpp0uf9cyu.d(20): Error: found `unittest` when expecting `,`\n/tmp/tmpp0uf9cyu.d(30): Error: found `void` when expecting `,`\n/tmp/tmpp0uf9cyu.d(30): Error: found `{` when expecting `,`\n/tmp/tmpp0uf9cyu.d(30): Error: expression expected, not `}`\n/tmp/tmpp0uf9cyu.d(30): Error: found `End of File` when expectin",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tif (isupper(c)) \n\t\t{\n\t\t\tcount += 2L;\n\t\t}\n\t\telse if (islower(c)) \n\t\t{\n\t\t\tcount += 2L;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1vxc2ef.d(14): Error: no identifier for declarator `c`\n/tmp/tmpw1vxc2ef.d(14): Error: expression expected, not `:`\n/tmp/tmpw1vxc2ef.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1vxc2ef.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char,string){\n        if(!islower(char) && !isupper(char)){\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5e3rwhx4.d(14): Error: no identifier for declarator `char`\n/tmp/tmp5e3rwhx4.d(14): Error: no identifier for declarator `string`\n/tmp/tmp5e3rwhx4.d(14): Error: found `)` when expecting `;`\n/tmp/tmp5e3rwhx4.d(15): Error: found `)` when expecting `.` following char\n/tmp/tmp5e3rwhx4.d(15): Error: found `&&` when expecting identifier following `char`.\n/tmp/tmp5e3rwhx4.d(15): Error: found `!` when expecting `,`\n/tmp/tmp5e3rwhx4.d(15): Error: found `)` when expecting `.` following char\n/tmp/tmp5e3rwhx4.d(15): Error: found `)` when expecting identifier following `char`.\n/tmp/tmp5e3rwhx4.d(15): Error: found `{` when expecting `,`\n/tmp/tmp5e3rwhx4.d(16): Error: found `;` when expecting `,`\n/tmp/tmp5e3rwhx4.d(17): Error: expression expected, not `}`\n/tmp/tmp5e3rwhx4.d(18): Error: found `}` when expecting `,`\n/tmp/tmp5e3rwhx4.d(19): Error: expression expected, not `return`\n/tmp/tmp5e3rwhx4.d(19): Error: found `count` when expecting `,`\n/tmp/tmp5e3rwhx4.d(19): Error: expression expected, not `;`\n/tmp/tmp5e3rwhx4.d",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3eg4lvsw.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3eg4lvsw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                break;\n            }\n            else\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsivgfpf1.d(14): Error: no property `length` for type `string`\n/tmp/tmpsivgfpf1.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsivgfpf1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_336z9q4.d(14): Error: no property `length` for type `string`\n/tmp/tmp_336z9q4.d(17): Error: undefined identifier `isLower` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_336z9q4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjkzr9t_2.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkzr9t_2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string) \n    {\n        result += (int)c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp31vs3ae4.d(14): Error: found `in` when expecting `;`\n/tmp/tmp31vs3ae4.d(16): Error: C style cast illegal, use `cast(int)c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31vs3ae4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp23xzlt1t.d(14): Error: no property `length` for type `string`\n/tmp/tmp23xzlt1t.d(17): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23xzlt1t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `char`\n/tmp/tmp6tq90gos.d(14): Error: no identifier for declarator `string`\n/tmp/tmp6tq90gos.d(14): Error: found `)` when expecting `;`\n/tmp/tmp6tq90gos.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tq90gos.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    for (auto c : string) \n    {\n        auto lower = tolower(c);\n        auto upper = toupper(c);\n        \n        if (lower != upper) \n        {\n            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_rh9b0o4.d(15): Error: no identifier for declarator `c`\n/tmp/tmp_rh9b0o4.d(15): Error: expression expected, not `:`\n/tmp/tmp_rh9b0o4.d(15): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rh9b0o4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(std.isAlpha(d))\n                continue;\n            if(c == d)\n                count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(std.isAlpha(d))\n                continue;\n            if(c == d)\n                count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(std.isAlpha(d))\n                continue;\n            if(c == d)\n                count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(std.isAlpha(d))\n                continue;\n            if\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu_mqn5xe.d(106): Error: found `unittest` when expecting `(`\n/tmp/tmpu_mqn5xe.d(116): Error: found `void` when expecting `)`\n/tmp/tmpu_mqn5xe.d(116): Error: found `{` when expecting `;` following statement\n/tmp/tmpu_mqn5xe.d(116): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu_mqn5xe.d(116): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_mqn5xe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `char`\n/tmp/tmpgzfeqm47.d(15): Error: no identifier for declarator `string`\n/tmp/tmpgzfeqm47.d(15): Error: found `)` when expecting `;`\n/tmp/tmpgzfeqm47.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzfeqm47.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_chars(string[i]);\n    }\n    return result;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzahzizsf.d(102): Error: identifier expected following `.`, not `unittest`\n/tmp/tmpzahzizsf.d(103): Error: found `{` when expecting `;` following statement\n/tmp/tmpzahzizsf.d(112): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzahzizsf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq5x4szei.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5x4szei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1rx740vg.d(98): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1rx740vg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `char`\n/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `string`\n/tmp/tmpf4kdjujg.d(15): Error: found `)` when expecting `;`\n/tmp/tmpf4kdjujg.d(20): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kdjujg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\t\tif (lower != c) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz1v33s86.d(14): Error: no identifier for declarator `c`\n/tmp/tmpz1v33s86.d(14): Error: expression expected, not `:`\n/tmp/tmpz1v33s86.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1v33s86.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinctCount(string[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm8_6pyab.d(14): Error: no property `length` for type `string`\n/tmp/tmpm8_6pyab.d(16): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8_6pyab.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn1y6cxpp.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1y6cxpp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isUpper(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcurxlldd.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcurxlldd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    for (auto c : string) \n    {\n        auto lower = tolower(c);\n        auto upper = toupper(c);\n        if (lower != upper) \n        {\n            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv0ed1g6v.d(15): Error: no identifier for declarator `c`\n/tmp/tmpv0ed1g6v.d(15): Error: expression expected, not `:`\n/tmp/tmpv0ed1g6v.d(15): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0ed1g6v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n        if(!std.isAlpha(c))\n            continue;\n        \n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string.charAt(j);\n            if(std.isAlpha(d))\n            {\n                count += 1;\n                break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnmo04y_3.d(14): Error: no property `length` for type `string`\n/tmp/tmpnmo04y_3.d(16): Error: no property `charAt` for type `string`\n/tmp/tmpnmo04y_3.d(17): Error: undefined identifier `isAlpha` in package `std`\n/tmp/tmpnmo04y_3.d(20): Error: no property `length` for type `string`\n/tmp/tmpnmo04y_3.d(22): Error: no property `charAt` for type `string`\n/tmp/tmpnmo04y_3.d(23): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmo04y_3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char,string){\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk3y7nfo6.d(14): Error: no identifier for declarator `char`\n/tmp/tmpk3y7nfo6.d(14): Error: no identifier for declarator `string`\n/tmp/tmpk3y7nfo6.d(14): Error: found `)` when expecting `;`\n/tmp/tmpk3y7nfo6.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3y7nfo6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n        char c = char;\n        \n        foreach(char, string) \n        {\n            char d = char;\n            \n            if (c == d) \n            {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (long)toupper(c) - tolower(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbiow27j5.d(14): Error: found `in` when expecting `;`\n/tmp/tmpbiow27j5.d(16): Error: C style cast illegal, use `cast(long)toupper(c)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbiow27j5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinct = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        distinct = (distinct + 1) + ((c >= 'A' && c <= 'Z') ? 1L : 0);\n        distinct = (distinct + 1) + ((c >= 'a' && c <= 'z') ? 1L : 0);\n    }\n    return distinct;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"abcABC\"\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"abcABC\"\n<|/ c |>\n<| a tags=string,c++ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yahqgq0.d(22): Error: declaration expected, not `<`\n/tmp/tmp1yahqgq0.d(25): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yahqgq0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplopsetby.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplopsetby.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(c != d)\n            {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4d8t_ygu.d(14): Error: no property `length` for type `string`\n/tmp/tmp4d8t_ygu.d(17): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4d8t_ygu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char, string) {\n        result += char.ordinal();\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi5ya8ljd.d(14): Error: no identifier for declarator `char`\n/tmp/tmpi5ya8ljd.d(14): Error: no identifier for declarator `string`\n/tmp/tmpi5ya8ljd.d(14): Error: found `)` when expecting `;`\n/tmp/tmpi5ya8ljd.d(17): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5ya8ljd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| c |>\nThis solution has a time complexity of O(n^2) which is not very efficient.\n<|/ c |>\n<| c |>\n: I agree with you. But the OP asked for \"efficient\", and I believe that this is an efficient solution. Of course, there are other solutions that may be more efficient.\n<|/ c |>\n<| c |>\n: I believe that this is an efficient solution. Of course, there are other solutions that may be more efficient.\n<|/ c |>\n<| c |>\n: I believe that this is an efficient solution. Of course, there are other solutions that may be more efficient.\n<|/ c |>\n<| c |>\n: I believe that this is an efficient solution. Of course, there are other solutions that may be more efficient.\n<|/ c |>\n<| a tags=string,c++,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjg1pwy30.d(14): Error: found `in` when expecting `;`\n/tmp/tmpjg1pwy30.d(20): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjg1pwy30.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (c >= 'A' && c <= 'Z') ? 26 : (c >= 'a' && c <= 'z') ? 26 : (c >= '0' && c <= '9') ? 10 : 0;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp111qgczx.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp111qgczx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    for (auto c : string) \n    {\n        auto lower = tolower(c);\n        auto upper = toupper(c);\n        \n        if (lower != upper) \n        {\n            count += 1;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5d40hw8_.d(15): Error: no identifier for declarator `c`\n/tmp/tmp5d40hw8_.d(15): Error: expression expected, not `:`\n/tmp/tmp5d40hw8_.d(15): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5d40hw8_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        char c = tolower(char);\n        if(!isalpha(c)) {\n            count += 1;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvdhwnei9.d(15): Error: no identifier for declarator `char`\n/tmp/tmpvdhwnei9.d(15): Error: no identifier for declarator `string`\n/tmp/tmpvdhwnei9.d(15): Error: found `)` when expecting `;`\n/tmp/tmpvdhwnei9.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmpvdhwnei9.d(16): Error: found `;` when expecting identifier following `char`.\n/tmp/tmpvdhwnei9.d(17): Error: found `if` when expecting `,`\n/tmp/tmpvdhwnei9.d(17): Error: basic type expected, not `!`\n/tmp/tmpvdhwnei9.d(17): Error: found `!` when expecting `)`\n/tmp/tmpvdhwnei9.d(17): Error: missing `{ ... }` for function literal\n/tmp/tmpvdhwnei9.d(17): Error: found `isalpha` when expecting `,`\n/tmp/tmpvdhwnei9.d(17): Error: semicolon expected, not `{`\n/tmp/tmpvdhwnei9.d(22): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdhwnei9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += count_distinct_characters(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3eg4lvsw.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3eg4lvsw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string)\n    {\n        result += tolower(c) - 'a';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu4r7etey.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4r7etey.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq5x4szei.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5x4szei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tcount += count_distinct_characters(c);\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoftx8sp9.d(14): Error: no identifier for declarator `c`\n/tmp/tmpoftx8sp9.d(14): Error: expression expected, not `:`\n/tmp/tmpoftx8sp9.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoftx8sp9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char, string) \n    {\n        count += (char)toupper(char)-(char) tolower(char);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxldkiz86.d(14): Error: no identifier for declarator `char`\n/tmp/tmpxldkiz86.d(14): Error: no identifier for declarator `string`\n/tmp/tmpxldkiz86.d(14): Error: found `)` when expecting `;`\n/tmp/tmpxldkiz86.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmpxldkiz86.d(16): Error: found `-` when expecting identifier following `char`.\n/tmp/tmpxldkiz86.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmpxldkiz86.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmpxldkiz86.d(16): Error: found `;` when expecting identifier following `char`.\n/tmp/tmpxldkiz86.d(17): Error: found `}` when expecting `,`\n/tmp/tmpxldkiz86.d(18): Error: expression expected, not `return`\n/tmp/tmpxldkiz86.d(18): Error: found `count` when expecting `,`\n/tmp/tmpxldkiz86.d(18): Error: expression expected, not `;`\n/tmp/tmpxldkiz86.d(19): Error: found `}` when expecting `,`\n/tmp/tmpxldkiz86.d(20): Error: expression expected, not `unittest`\n/tmp/tmpxldkiz86.d(21): Error: found `{` when expecting `",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp23xzlt1t.d(14): Error: no property `length` for type `string`\n/tmp/tmp23xzlt1t.d(17): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23xzlt1t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        result += std.algorithm.distinct_count(string[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv1tlq9bq.d(14): Error: no property `length` for type `string`\n/tmp/tmpv1tlq9bq.d(16): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1tlq9bq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164627
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't work if there are more than 26 distinct characters. For example, `count_distinct_characters(\"ab\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\n: I didn't see that requirement in the question. I'll update my answer to include that requirement.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution that doesn't require a hash table.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution that doesn't require a hash table.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution that doesn't require a hash table.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg82tzk99.d(14): Error: found `in` when expecting `;`\n/tmp/tmpg82tzk99.d(16): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpg82tzk99.d(16): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\n/tmp/tmpg82tzk99.d(20): Error: declaration expected, not `<`\n/tmp/tmpg82tzk99.d(23): Error: unterminated character constant\n/tmp/tmpg82tzk99.d(26): Error: unterminated character constant\n/tmp/tmpg82tzk99.d(26): Error: unterminated character constant\n/tmp/tmpg82tzk99.d(29): Error: unterminated character constant\n/tmp/tmpg82tzk99.d(32): Error: unterminated character constant\n/tmp/tmpg82tzk99.d(35): Error: unterminated character constant\n/tmp/tmpg82tzk99.d(47): Error: declaration expected, not `assert`\n/tmp/tmpg82tzk99.d(48): Error: declaration expected, not `assert`\n/tmp/tmpg82tzk99.d(49): Error: declaration expected, not `assert`\n/tmp/tmpg82tzk99.d(50): Error: declaration expected, not `assert`\n/tmp/tmpg82tzk99.d(51): Error: declaration expected, not `assert`\n/tmp/tmpg82tzk99.d(52): E",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (auto c : string) \n\t{\n\t\tauto lower = tolower(c);\n\t\tauto upper = toupper(c);\n\t\tif (lower == upper) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3sxi7sss.d(14): Error: no identifier for declarator `c`\n/tmp/tmp3sxi7sss.d(14): Error: expression expected, not `:`\n/tmp/tmp3sxi7sss.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3sxi7sss.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long result = 0;\n    foreach(char c in string)\n    {\n        result += std.string.length(string) - std.string.count(string[c]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp021r9uir.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp021r9uir.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    for (auto c : string) \n    {\n        count += std.algorithm.count_if(string.begin(), string.end(), [](char c) { return c == c; });\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphhn576av.d(15): Error: no identifier for declarator `c`\n/tmp/tmphhn576av.d(15): Error: expression expected, not `:`\n/tmp/tmphhn576av.d(15): Error: found `string` when expecting `;` following `for` condition\n/tmp/tmphhn576av.d(17): Error: found `c` when expecting `.` following char\n/tmp/tmphhn576av.d(17): Error: found `)` when expecting identifier following `char`.\n/tmp/tmphhn576av.d(17): Error: found `{` when expecting `,`\n/tmp/tmphhn576av.d(17): Error: expression expected, not `return`\n/tmp/tmphhn576av.d(17): Error: found `c` when expecting `,`\n/tmp/tmphhn576av.d(17): Error: expression expected, not `==`\n/tmp/tmphhn576av.d(17): Error: found `c` when expecting `,`\n/tmp/tmphhn576av.d(17): Error: expression expected, not `;`\n/tmp/tmphhn576av.d(17): Error: found `}` when expecting `,`\n/tmp/tmphhn576av.d(17): Error: found `;` when expecting `,`\n/tmp/tmphhn576av.d(18): Error: expression expected, not `}`\n/tmp/tmphhn576av.d(20): Error: found `return` when expecting `,`\n/tmp/tmphhn576av.d(20): Error: found `",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string)\n    {\n        auto lower = tolower(c);\n        if(lower != c)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvqazugrn.d(14): Error: no identifier for declarator `c`\n/tmp/tmpvqazugrn.d(14): Error: expression expected, not `:`\n/tmp/tmpvqazugrn.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvqazugrn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string)\n    {\n        if(!std.algorithm.contains(string, c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nI believe this solution will fail for strings with repeated characters, e.g. \"aba\".\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis solution doesn't work for strings with repeated characters, e.g. \"aba\".\n<|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI believe this solution will fail for strings with repeated characters, e.g. \"aba\".\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk55pj0h9.d(14): Error: no identifier for declarator `c`\n/tmp/tmpk55pj0h9.d(14): Error: expression expected, not `:`\n/tmp/tmpk55pj0h9.d(14): Error: found `string` when expecting `;` following `for` condition\n/tmp/tmpk55pj0h9.d(23): Error: declaration expected, not `<`\n/tmp/tmpk55pj0h9.d(32): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk55pj0h9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n        if(!std.typecons.isUpper(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxxgm56ky.d(14): Error: no property `length` for type `string`\n/tmp/tmpxxgm56ky.d(16): Error: no property `charAt` for type `string`\n/tmp/tmpxxgm56ky.d(17): Error: undefined identifier `isUpper` in module `std.typecons`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxgm56ky.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinctCharacters = 0;\n    \n    foreach(char in string) \n    {\n        distinctCharacters++;\n    }\n    \n    return distinctCharacters;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmple_zrbzb.d(15): Error: no identifier for declarator `char`\n/tmp/tmple_zrbzb.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmple_zrbzb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) \n    {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `char`\n/tmp/tmpf4kdjujg.d(15): Error: no identifier for declarator `string`\n/tmp/tmpf4kdjujg.d(15): Error: found `)` when expecting `;`\n/tmp/tmpf4kdjujg.d(20): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kdjujg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char,string){\n        count += 1;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq4kahi9i.d(14): Error: no identifier for declarator `char`\n/tmp/tmpq4kahi9i.d(14): Error: no identifier for declarator `string`\n/tmp/tmpq4kahi9i.d(14): Error: found `)` when expecting `;`\n/tmp/tmpq4kahi9i.d(17): Error: found `return` when expecting `)`\n/tmp/tmpq4kahi9i.d(19): Error: declaration expected, not `<`\n/tmp/tmpq4kahi9i.d(24): Error: identifier expected following `package`\n/tmp/tmpq4kahi9i.d(24): Error: `;` expected\n/tmp/tmpq4kahi9i.d(25): Error: identifier expected following `package`\n/tmp/tmpq4kahi9i.d(25): Error: `;` expected\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4kahi9i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc_pwci0n.d(14): Error: no property `length` for type `string`\n/tmp/tmpc_pwci0n.d(17): Error: undefined identifier `isAlpha` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_pwci0n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(!std.isAlpha(d))\n                continue;\n            count += std.toLower(c) == std.toLower(d);\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(!std.isAlpha(d))\n                continue;\n            count += std.toLower(c) == std.toLower(d);\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n            if(!std.isAlpha(d))\n                continue;\n            count += std.toLower(c) == std.toLower(d);\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int j = i+1; j < string.length(); j\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgtx9eqy0.d(98): Error: found `unittest` when expecting `)`\n/tmp/tmpgtx9eqy0.d(108): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgtx9eqy0.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgtx9eqy0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        count += (long)tolower(c) - (long)tolower(toupper(c));\n    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewkndv9l.d(14): Error: found `in` when expecting `;`\n/tmp/tmpewkndv9l.d(16): Error: C style cast illegal, use `cast(long)tolower(c)`\n/tmp/tmpewkndv9l.d(16): Error: C style cast illegal, use `cast(long)tolower(toupper(c))`\n/tmp/tmpewkndv9l.d(20): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewkndv9l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long distinctCharacters = 0;\n    foreach(char c in string) {\n        distinctCharacters++;\n    }\n    return distinctCharacters;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp_3upayt.d(14): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_3upayt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor (char c : string)\n\t{\n\t\tlong value = std.tolower(c) - 'a';\n\t\tif (value == 0) \n\t\t\tvalue = std.toupper(c) - 'A';\n\t\tcount += value;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp24h5v0a7.d(14): Error: semicolon expected, not `:`\n/tmp/tmp24h5v0a7.d(14): Error: expression expected, not `:`\n/tmp/tmp24h5v0a7.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24h5v0a7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char,string){\n        if(!islower(char))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppwj_8x3a.d(15): Error: no identifier for declarator `char`\n/tmp/tmppwj_8x3a.d(15): Error: no identifier for declarator `string`\n/tmp/tmppwj_8x3a.d(15): Error: found `)` when expecting `;`\n/tmp/tmppwj_8x3a.d(16): Error: found `)` when expecting `.` following char\n/tmp/tmppwj_8x3a.d(16): Error: found `)` when expecting identifier following `char`.\n/tmp/tmppwj_8x3a.d(17): Error: found `count` when expecting `,`\n/tmp/tmppwj_8x3a.d(17): Error: expression expected, not `;`\n/tmp/tmppwj_8x3a.d(18): Error: found `}` when expecting `,`\n/tmp/tmppwj_8x3a.d(19): Error: expression expected, not `return`\n/tmp/tmppwj_8x3a.d(19): Error: found `count` when expecting `,`\n/tmp/tmppwj_8x3a.d(19): Error: expression expected, not `;`\n/tmp/tmppwj_8x3a.d(20): Error: found `}` when expecting `,`\n/tmp/tmppwj_8x3a.d(21): Error: expression expected, not `unittest`\n/tmp/tmppwj_8x3a.d(22): Error: found `{` when expecting `,`\n/tmp/tmppwj_8x3a.d(23): Error: expression expected, not `alias`\n/tmp/tmppwj_8x3a.d(23): Error: found `candid",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n        if(!std.isLower(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n        if(!std.isLower(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n        if(!std.isLower(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n        if(!std.isLower(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.charAt(i);\n        if(!std.isLower(c))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplyu350l8.d(108): Error: unterminated /* */ comment\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    \n    foreach(char, string) {\n        count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `char`\n/tmp/tmpw1lsc5j1.d(15): Error: no identifier for declarator `string`\n/tmp/tmpw1lsc5j1.d(15): Error: found `)` when expecting `;`\n/tmp/tmpw1lsc5j1.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1lsc5j1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n    3L\n    >>> count_distinct_characters(\"Jerry\")\n    4L\n    \n*/\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n    for(auto c : string)\n    {\n        auto lower = tolower(c);\n        if(lower != c)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvqazugrn.d(14): Error: no identifier for declarator `c`\n/tmp/tmpvqazugrn.d(14): Error: expression expected, not `:`\n/tmp/tmpvqazugrn.d(14): Error: found `string` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvqazugrn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164626
    }
  ]
}