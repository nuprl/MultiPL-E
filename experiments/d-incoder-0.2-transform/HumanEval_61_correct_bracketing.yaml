name: HumanEval_61_correct_bracketing
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"(\"\
  \ and \")\".\n    return True if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
  ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
  )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n"
tests: "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
  ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
  ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\")\
  \ == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
  )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
  ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
  (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"\
  ()()(()())()))()\") == false);\n}\nvoid main(){}"
completions: ["{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            if(brackets[i+1] != ')')\n                return\
    \ false;\n        }\n        else if(brackets[i] == ')')\n        {\n        \
    \    if(brackets[i-1] != '(')\n                return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    for(int i = 0; i < brackets.length(); i++)\n  \
    \  {\n        if(brackets[i] == '(')\n        {\n            for(int j = i; j\
    \ < brackets.length(); j++)\n            {\n                if(brackets[j] ==\
    \ ')')\n                {\n                    for(int k = j; k < brackets.length();\
    \ k++)\n                    {\n                        if(brackets[k] == '(')\n\
    \                        {\n                            for(int l = k; l < brackets.length();\
    \ l++)\n                            {\n                                if(brackets[l]\
    \ == ')')\n                                {\n                               \
    \     return false;\n                                }\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI believe this would work, but I haven't been able to test it yet.\
    \ I'll let you know if it works.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ Thank you so much!\n<|/ c |>\n<| a dscore=0 |>\nI believe this would work, but\
    \ I haven't been able to test it yet. I'll let you know if it works.", "{\n  \
    \  for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] ==\
    \ '(')\n        {\n            if(brackets[i+1] != ')')\n            {\n     \
    \           return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,string,algorithm |>\n<| c |>\nThis doesn't work if\
    \ the brackets are nested inside each other.\n<|/ c |>\n<| c |>\n: It does work\
    \ if you fix the bugs I pointed out in my answer.\n<|/ c |>\n<| c |>\n: I fixed\
    \ the bugs I pointed out in my answer.\n<|/ c |>\n<| c |>\n: I fixed the bugs\
    \ I pointed out in my answer.\n<|/ c |>\n<| c |>\n: I fixed the bugs I pointed\
    \ out in my answer.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "{\n    size_t bracket_count\
    \ = 0;\n    for (size_t i = 0; i < brackets.length(); ++i)\n    {\n        if\
    \ (brackets[i] == '(')\n            ++bracket_count;\n        else if (brackets[i]\
    \ == ')')\n            --bracket_count;\n        if (bracket_count < 0)\n    \
    \        return false;\n    }\n    return bracket_count == 0;\n}", "{\n    size_t\
    \ brackets_size = brackets.length();\n    size_t opening_brackets_size = 0;\n\
    \    size_t closing_brackets_size = 0;\n    bool result = true;\n    for (size_t\
    \ i = 0; i < brackets_size; ++i)\n    {\n        char c = brackets[i];\n     \
    \   if (c == '(')\n        {\n            ++opening_brackets_size;\n        }\n\
    \        else if (c == ')')\n        {\n            ++closing_brackets_size;\n\
    \        }\n        else\n        {\n            result = false;\n        }\n\
    \    }\n    if (opening_brackets_size == closing_brackets_size)\n    {\n     \
    \   result = true;\n    }\n    return result;\n}", "{\n    size_t open_brackets\
    \ = brackets.length();\n    size_t close_brackets = 0;\n    for (size_t i = 0;\
    \ i < brackets.length(); i++) {\n        if (brackets[i] == '(') {\n         \
    \   open_brackets++;\n        } else if (brackets[i] == ')') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work. Try it with `\"\
    (()())\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `\"(()())\"`.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `\"(()())\"`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    for(int\
    \ i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i] == '(')\n\
    \        {\n            if(brackets[i+1] != '(')\n            {\n            \
    \    return false;\n            }\n        }\n        else if(brackets[i] == ')')\n\
    \        {\n            if(brackets[i-1] != '(')\n            {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}", "{\n\
    \tsize_t len = brackets.length();\n\tsize_t i = 0;\n\twhile (i < len) {\n\t\t\
    char c = brackets[i];\n\t\tif (c == '(') {\n\t\t\tif (brackets[i+1] != ')') return\
    \ false;\n\t\t\ti += 2;\n\t\t} else {\n\t\t\tif (brackets[i+1] != ')') return\
    \ false;\n\t\t\ti += 1;\n\t\t}\n\t}\n\treturn true;\n}", "{\n    size_t len =\
    \ brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n    bool result =\
    \ true;\n    while(i < len) {\n        if(brackets[i] == '(') {\n            j\
    \ = i;\n            while(j < len && brackets[j] != ')') {\n                j++;\n\
    \            }\n            if(j == len) {\n                result = false;\n\
    \                break;\n            }\n            i += j - i;\n        }\n \
    \       i++;\n    }\n    return result;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    bool result = true;\n    \n    while (i<brackets_size)\
    \ {\n        char c = brackets[i];\n        if (c == '(') {\n            opening_brackets++;\n\
    \        } else if (c == ')') {\n            closing_brackets++;\n        } else\
    \ if (c == '(' || c == ')') {\n            result += opening_brackets > closing_brackets;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I wonder if it would be possible to do\
    \ it without using recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "{\n    size_t bracket_count = brackets.length();\n    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < bracket_count;\
    \ ++i)\n    {\n        if (brackets[i] == '(')\n            ++open_brackets;\n\
    \        else if (brackets[i] == ')')\n            ++close_brackets;\n       \
    \ else if (brackets[i] == '[' || brackets[i] == '{' || brackets[i] == '(')\n \
    \           ++open_brackets;\n        else if (brackets[i] == ']' || brackets[i]\
    \ == '}' || brackets[i] == ')')\n            ++close_brackets;\n    }\n    return\
    \ open_brackets == close_brackets;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    size_t opening_brackets_index = 0;\n    size_t closing_brackets_index = 0;\n\
    \    size_t opening_brackets_end = 0;\n    size_t closing_brackets_end = 0;\n\
    \    bool result = true;\n    \n    while(opening_brackets_index < brackets_size)\n\
    \    {\n        opening_brackets_end = brackets.find('(', opening_brackets_index);\n\
    \        closing_brackets_end = brackets.find(')', opening_brackets_end);\n  \
    \      \n        if(opening_brackets_end == string::npos)\n        {\n       \
    \     result = false;\n            break;\n        }\n        \n        if(closing_brackets_end\
    \ == string::npos)\n        {\n            result = false;\n            break;\n\
    \        }\n        \n        opening_brackets_size = opening_brackets_end - opening_brackets_index;\n\
    \        closing_brackets_size = closing_brackets_end - closing_brackets_index;\n\
    \        \n        if(opening_brackets_size != closing_brackets_size)\n      \
    \  {\n            result = false;\n            break;\n        }\n        \n \
    \       opening_brackets_index++;\n        closing_brackets_index++;\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't\
    \ work. Try it with `\"(()())\"`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a tags=c++ |>\nI wrote a solution using std::stack\
    \ and std::vector:\n<code>\n#include <iostream>\n#include <stack>\n#include <vector>",
  "{\n    int brackets_length = brackets.length();\n    for(int i = 0; i < brackets_length;\
    \ ++i)\n    {\n        char c = brackets[i];\n        if(c == '(')\n        {\n\
    \            if(brackets[i+1] != '(')\n            {\n                return false;\n\
    \            }\n        }\n        else if(c == ')')\n        {\n            if(brackets[i-1]\
    \ != '(')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}", "{\n    size_t brackets_size = brackets.length();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    for(size_t i = 0; i < brackets_size; ++i)\n    {\n        if(brackets[i]\
    \ == '(')\n            ++opening_brackets_size;\n        else if(brackets[i] ==\
    \ ')')\n            ++closing_brackets_size;\n    }\n    return opening_brackets_size\
    \ == closing_brackets_size;\n}", "{\n\tsize_t brackets_size = brackets.length();\n\
    \tsize_t opening_brackets = 0;\n\tsize_t closing_brackets = 0;\n\tsize_t i;\n\t\
    for(i = 0; i < brackets_size; ++i)\n\t{\n\t\tchar c = brackets[i];\n\t\tif(c ==\
    \ '(')\n\t\t\t++opening_brackets;\n\t\telse if(c == ')')\n\t\t\t++closing_brackets;\n\
    \t\telse if(c == ',')\n\t\t{\n\t\t\tif(opening_brackets != closing_brackets)\n\
    \t\t\t\treturn false;\n\t\t}\n\t}\n\tif(opening_brackets != closing_brackets)\n\
    \t\treturn false;\n\treturn true;\n}", "{\n    for(int i = 0; i < brackets.length();\
    \ i++)\n    {\n        if(brackets[i] == '(')\n        {\n            if(brackets[i+1]\
    \ != '(')\n            {\n                return false;\n            }\n     \
    \   }\n        else if(brackets[i] == ')')\n        {\n            if(brackets[i-1]\
    \ != '(')\n            {\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,string |>\n\
    <| c |>\nThis doesn't work. Try `correct_bracketing(\"()()\")`\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it yourself. It returns true for me. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it yourself. It returns true for\
    \ me.\n<|/ c |>\n<| c |>\nIt returns true for me. Try it yourself. It returns\
    \ true for me.\n<|/ c |>\n<| c |>\nIt returns true for me. Try it yourself. It\
    \ returns true for me.\n<|/ c |>\n<| a dscore=2 |>\nI wrote this in C#:\n<code>\n\
    public static bool IsBracketsCorrect(string input)\n{\n    bool isCorrect = true;\n\
    \    string openingBrackets = \"()\";\n    string closingBrackets = \"()\";\n\
    \    string openingBracketsArray = openingBrackets.ToCharArray();\n    string\
    \ closingBracketsArray = closingBrackets.ToCharArray();", "{\n    size_t len =\
    \ brackets.length();\n    size_t i = 0;\n    size_t j = 0;\n    bool result =\
    \ true;\n    while(i < len) {\n        char c = brackets[i];\n        if(c ==\
    \ '(') {\n            i++;\n            while(i < len && brackets[i] == ')') {\n\
    \                i++;\n            }\n            if(i == len) {\n           \
    \     result = false;\n                break;\n            }\n            j =\
    \ i;\n            while(j < len && brackets[j] != ')') {\n                j++;\n\
    \            }\n            if(brackets[j] != ')') {\n                result =\
    \ false;\n                break;\n            }\n            i += j - i;\n   \
    \     }\n        else if(c == ')') {\n            i++;\n            while(i <\
    \ len && brackets[i] == '(') {\n                i++;\n            }\n        \
    \    if(i == len) {\n                result = false;\n                break;\n\
    \            }\n            j = i;\n            while(j < len && brackets[j] !=\
    \ ')') {\n                j++;\n            }\n            if(brackets[j] != ')')\
    \ {\n                result = false;\n                break;\n            }\n\
    \            i += j - i;\n        }\n        else {\n            i++;\n      \
    \  }\n    }\n    return result;\n}", "{\n    size_t i = 0;\n    size_t j = 0;\n\
    \    size_t brackets_size = brackets.length();\n    bool result = true;\n    while(brackets_size\
    \ > 0)\n    {\n        char open_bracket = brackets[i];\n        i++;\n      \
    \  char close_bracket = brackets[j];\n        j++;\n        \n        if(open_bracket\
    \ != close_bracket)\n        {\n            result = false;\n            break;\n\
    \        }\n        brackets_size--;\n    }\n    return result;\n}", "{\n    map<string,\
    \ string> opening_brackets;\n    map<string, string> closing_brackets;\n    for(auto\
    \ c : brackets)\n    {\n        auto it = opening_brackets.find(c);\n        if(it\
    \ != opening_brackets.end())\n        {\n            closing_brackets[it->second]\
    \ = c;\n        }\n        else\n        {\n            opening_brackets[c] =\
    \ c;\n        }\n    }\n    for(auto c : brackets)\n    {\n        auto it = closing_brackets.find(c);\n\
    \        if(it != closing_brackets.end())\n        {\n            opening_brackets[it->second]\
    \ = c;\n        }\n        else\n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This doesn't work for `(\"(()())\")`\n<|/ c |>\n<| c |>\n: I fixed the bug, thanks.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't use any maps, just strings\
    \ and loops.\n<|/ c |>\n<| c |>\n: I added a version that doesn't use any maps,\
    \ just strings and loops.\n<|/ c |>\n<| c |>\n: I added a version that doesn't\
    \ use any maps, just strings and loops.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>",
  "{\n    for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '(')\n        {\n            for(int j = i + 1; j < brackets.length(); j++)\n\
    \            {\n                if(brackets[j] == ')')\n                {\n  \
    \                  return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
