language: d
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7dju5cc.d(23): Error: no property `length` for type `string`\n/tmp/tmpv7dju5cc.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpv7dju5cc.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpv7dju5cc.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpv7dju5cc.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpv7dju5cc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result\
    \ += text[i];\n        }\n        else {\n            result += text[i] + \"_\"\
    ;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++) {\n    \
    \    if(text[i] == ' ' && text[i+1] == ' ') {\n            result += text[i];\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3cafbg_q.d(22): Error: no property `length` for type `string`\n/tmp/tmp3cafbg_q.d(24):
    Error: slice `result` is not mutable\n/tmp/tmp3cafbg_q.d(27): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp3cafbg_q.d(31):
    Error: no property `length` for type `string`\n/tmp/tmp3cafbg_q.d(33): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cafbg_q.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j\
    \ = i; j < result.length(); j++)\n            {\n                if(result[j]\
    \ == ' ')\n                {\n                    result[j] = '_';\n         \
    \       }\n            }\n        }\n    }\n    for(int i = 0; i < result.length();\
    \ i++)\n    {\n        if(result[i] == '_')\n        {\n            for(int j\
    \ = i; j < result.length(); j++)\n            {\n                if(result[j]\
    \ == ' ')\n                {\n                    result[j] = '_';\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppmdlabui.d(22): Error: no property `length` for type `string`\n/tmp/tmppmdlabui.d(26):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmppmdlabui.d(29):
    Error: no property `length` for type `string`\n/tmp/tmppmdlabui.d(33): Error:
    no property `length` for type `string`\n/tmp/tmppmdlabui.d(37): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\n/tmp/tmppmdlabui.d(42):
    Error: no property `length` for type `string`\n/tmp/tmppmdlabui.d(46): Error:
    no property `length` for type `string`\n/tmp/tmppmdlabui.d(50): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmppmdlabui.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n \
    \           result += text[i];\n        }\n        else\n        {\n         \
    \   result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp97b80_dc.d(22): Error: no property `length` for type `string`\n/tmp/tmp97b80_dc.d(26):
    Error: slice `result` is not mutable\n/tmp/tmp97b80_dc.d(30): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp97b80_dc.d(34):
    Error: no property `length` for type `string`\n/tmp/tmp97b80_dc.d(38): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b80_dc.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppcc2bcpj.d(23): Error: no property `size` for type `string`\n/tmp/tmppcc2bcpj.d(27):
    Error: slice `result` is not mutable\n/tmp/tmppcc2bcpj.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmppcc2bcpj.d(35):
    Error: no property `size` for type `string`\n/tmp/tmppcc2bcpj.d(39): Error: slice
    `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppcc2bcpj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2m8dxx6_.d(23): Error: no property `size` for type `string`\n/tmp/tmp2m8dxx6_.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp2m8dxx6_.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp2m8dxx6_.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp2m8dxx6_.d(37): Error: no
    property `size` for type `string`\n/tmp/tmp2m8dxx6_.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2m8dxx6_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwy5olq0.d(23): Error: no property `length` for type `string`\n/tmp/tmpcwy5olq0.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpcwy5olq0.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpcwy5olq0.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpcwy5olq0.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwy5olq0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv5at931s.d(23): Error: no property `length` for type `string`\n/tmp/tmpv5at931s.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpv5at931s.d(31): Error: incompatible
    types for `(result) += (cast(int)text[cast(ulong)i] + 45)`: `string` and `int`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5at931s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n        else if(result[i] ==\
    \ ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptomfceab.d(23): Error: no property `length` for type `string`\n/tmp/tmptomfceab.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmptomfceab.d(31):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptomfceab.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size()\
    \ > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2m8dxx6_.d(23): Error: no property `size` for type `string`\n/tmp/tmp2m8dxx6_.d(27):
    Error: slice `result` is not mutable\n/tmp/tmp2m8dxx6_.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp2m8dxx6_.d(35):
    Error: no property `size` for type `string`\n/tmp/tmp2m8dxx6_.d(37): Error: no
    property `size` for type `string`\n/tmp/tmp2m8dxx6_.d(39): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2m8dxx6_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    size_t len\
    \ = result.size();\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n\
    \    \n    while (i < len) {\n        if (result[i] == ' ') {\n            j =\
    \ i;\n            while (j < len && result[j] == ' ') {\n                j++;\n\
    \            }\n            k = j;\n            while (k < len && result[k] ==\
    \ ' ') {\n                k++;\n            }\n            if (k > j) {\n    \
    \            char c = result[k];\n                result[k] = '-';\n         \
    \       result[j+1] = c;\n            }\n            i = j+1;\n        }\n   \
    \     i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps8u1sqwg.d(22): Error: no property `size` for type `string`\n/tmp/tmps8u1sqwg.d(39):
    Error: cannot modify `immutable` expression `result[k]`\n/tmp/tmps8u1sqwg.d(40):
    Error: cannot modify `immutable` expression `result[j + 1LU]`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps8u1sqwg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            text += \"_\";\n  \
    \      }\n        else if(text[i] == ' ')\n        {\n            text += \"-\"\
    ;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\
    \n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"\
    Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow\
    \  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg5k5rsbu.d(21): Error: no property `length` for type `string`\n/tmp/tmpg5k5rsbu.d(25):
    Error: slice `text` is not mutable\n/tmp/tmpg5k5rsbu.d(29): Error: slice `text`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg5k5rsbu.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n        else\n        {\n           \
    \ result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n\
    \    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n      \
    \      result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\"\
    ) == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7b0ub9fz.d(22): Error: no property `size` for type `string`\n/tmp/tmp7b0ub9fz.d(26):
    Error: slice `result` is not mutable\n/tmp/tmp7b0ub9fz.d(30): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmp7b0ub9fz.d(34):
    Error: no property `size` for type `string`\n/tmp/tmp7b0ub9fz.d(36): Error: no
    property `size` for type `string`\n/tmp/tmp7b0ub9fz.d(38): Error: incompatible
    types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b0ub9fz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    size_t len = text.length();\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    string result = \"\";\n    \n    while (i < len)\
    \ {\n        if (text[i] == ' ') {\n            result += text[i];\n         \
    \   i++;\n        } else {\n            result += text[i];\n            while\
    \ (i < len && text[i] == ' ') {\n                result += text[i];\n        \
    \        i++;\n            }\n        }\n    }\n    \n    while (j < len) {\n\
    \        if (text[j] == ' ') {\n            result += text[j];\n            j++;\n\
    \        } else {\n            result += text[j];\n            while (j < len\
    \ && text[j] == ' ') {\n                result += text[j];\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp17l55_db.d(21): Error: no property `length` for type `string`\n/tmp/tmp17l55_db.d(28):
    Error: slice `result` is not mutable\n/tmp/tmp17l55_db.d(31): Error: slice `result`
    is not mutable\n/tmp/tmp17l55_db.d(33): Error: slice `result` is not mutable\n/tmp/tmp17l55_db.d(41):
    Error: slice `result` is not mutable\n/tmp/tmp17l55_db.d(44): Error: slice `result`
    is not mutable\n/tmp/tmp17l55_db.d(46): Error: slice `result` is not mutable\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17l55_db.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                j++;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7dju5cc.d(23): Error: no property `length` for type `string`\n/tmp/tmpv7dju5cc.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpv7dju5cc.d(31):
    Error: no property `length` for type `string`\n/tmp/tmpv7dju5cc.d(36): Error:
    no property `length` for type `string`\n/tmp/tmpv7dju5cc.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpv7dju5cc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i =\
    \ 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n   \
    \         result += text[i];\n        }\n        else\n        {\n           \
    \ result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() >\
    \ 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n\
    \            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
    Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
    );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9c_xokkf.d(26): Error: slice `result` is not mutable\n/tmp/tmp9c_xokkf.d(30):
    Error: incompatible types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)`
    and `string`\n/tmp/tmp9c_xokkf.d(34): Error: no property `length` for type `string`\n/tmp/tmp9c_xokkf.d(36):
    Error: no property `length` for type `string`\n/tmp/tmp9c_xokkf.d(38): Error:
    incompatible types for `(result[cast(ulong)i]) + ("-")`: `immutable(char)` and
    `string`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c_xokkf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    for(int i =\
    \ 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            result[i] = '_';\n        }\n        if(result.length() > 2 && result[i]\
    \ == ' ' && result[i+1] == ' ')\n        {\n            result[i] = '-';\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string,replace,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbb3s5kms.d(35): Error: declaration expected, not `<`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbb3s5kms.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i\
    \ < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwy5olq0.d(23): Error: no property `length` for type `string`\n/tmp/tmpcwy5olq0.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpcwy5olq0.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpcwy5olq0.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpcwy5olq0.d(39): Error:
    slice `result` is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwy5olq0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int\
    \ i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n\
    \            result += text[i];\n        }\n        else\n        {\n        \
    \    result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length()\
    \ > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n \
    \           if(result[i] == ' ')\n            {\n                result += \"\
    -\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"\
    Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n\
    \    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
    );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
    \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmkj_4_9i.d(23): Error: no property `length` for type `string`\n/tmp/tmpmkj_4_9i.d(27):
    Error: slice `result` is not mutable\n/tmp/tmpmkj_4_9i.d(31): Error: incompatible
    types for `(text[cast(ulong)i]) + ("_")`: `immutable(char)` and `string`\n/tmp/tmpmkj_4_9i.d(35):
    Error: no property `length` for type `string`\n/tmp/tmpmkj_4_9i.d(37): Error:
    no property `length` for type `string`\n/tmp/tmpmkj_4_9i.d(41): Error: slice `result`
    is not mutable\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkj_4_9i.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\n\
    string fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int\
    \ i = 0; i < result.length(); ++i)\n    {\n        if(result[i] == ' ')\n    \
    \    {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i =\
    \ 0; i < result.length(); ++i)\n    {\n        if(result[i] == ' ')\n        {\n\
    \            int j = i + 1;\n            while(j < result.length() && result[j]\
    \ == ' ')\n            {\n                result[j] = '_';\n                ++j;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\"\
    );\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"\
    Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"\
    Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") ==\
    \ \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3edrtbz8.d(23): Error: no property `length` for type `string`\n/tmp/tmp3edrtbz8.d(27):
    Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp3edrtbz8.d(31):
    Error: no property `length` for type `string`\n/tmp/tmp3edrtbz8.d(36): Error:
    no property `length` for type `string`\n/tmp/tmp3edrtbz8.d(38): Error: cannot
    modify `immutable` expression `result[cast(ulong)j]`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp3edrtbz8.d", "-I/tmp"]\n'''
  stdout: b''
