name: HumanEval_95_check_dict_case
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary, return\
  \ True if all keys are strings in lower \n    case or all keys are strings in upper\
  \ case, else return False.\n    The function should return False is the given dictionary\
  \ is empty.\n    Examples:\n    >>> check_dict_case([\"a\": \"apple\", \"b\": \"\
  banana\"].nullable)\n    true\n    >>> check_dict_case([\"a\": \"apple\", \"A\"\
  : \"banana\", \"B\": \"banana\"].nullable)\n    false\n    >>> check_dict_case([\"\
  a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\n    false\n    >>>\
  \ check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable)\n\
  \    false\n    >>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable)\n\
  \    true\n    \n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n"
tests: "unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
  p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
  \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
  ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\"\
  , \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\":\
  \ \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
  : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
  \ == false);\n}\nvoid main(){}"
completions: ["{\n    foreach(k, v) in dict \n    {\n        if (!is_string(k) ||\
    \ !is_string(v))\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}", "{\n    foreach(string key in dict) \n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key])) return false;\n    }\n    return true;\n}", "{\n \
    \   foreach(k, v) {\n        if(!is_string(k) || !is_string(v)) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v)\
    \ dict += k + v; \n    return !dict.isEmpty;\n}", "{\n    foreach(k, v) {\n  \
    \      if (is_string(k) && is_string(v)) {\n            return true;\n       \
    \ }\n    }\n    return false;\n}", "{\n    foreach(string key in dict) \n    {\n\
    \        if (!(key is string)) \n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}", "{\n    foreach(k, v) {\n        if (!is_string(k)\
    \ || !is_string(v)) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    foreach(k, v) {\n        if(!is_string(k) || !is_string(v))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}", "{\n \
    \   foreach(k, v) {\n        if (!is_string(k) || !is_string(v)) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict\
    \ += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k,\
    \ v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v) ? k : k;\n\
    \    foreach(k, v) dict += !isNull(v) ? k : k;\n    foreach(k, v) dict += !isNull(v)\
    \ ? k : ", "{\n    foreach(string key in dict) \n    {\n        if(!is_string(key)\
    \ || !is_string(dict[key]))\n            return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.array;\nimport std.conv;", "{\n    foreach(k, v) \n\
    \    {\n        if(!is_string(k) || !is_string(v))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n   \
    \ {\n        if(!is_string(k) || !is_string(v))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v) \n   \
    \ {\n        if(!is_string(k) || !is_string(v))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    foreach(k, v) {\n  \
    \      bool isString = (k as string).isLower();\n        bool isStringUpper =\
    \ (k as string).isUpper();\n        if(!isString && !isStringUpper) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=dictionary,c#,.net |>\n<code>\npublic static bool IsNullableDictionary(this\
    \ IDictionary<string, object> dictionary)\n{\n    if (dictionary == null)\n  \
    \  {\n        return false;\n    }", "{\n    foreach(k, v) in dict \n    {\n \
    \       bool isUpper = isupper(k);\n        bool isLower = islower(k);\n     \
    \   if(isUpper && isLower)\n        {\n            return false;\n        }\n\
    \        if(!isUpper && !isLower)\n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}", "{\n    foreach(k, v) {\n        bool isString\
    \ = (k is string);\n        bool isStringUpper = (k is string) && toupper(k) is\
    \ k;\n        if(isString && isStringUpper) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,string,dictionary |>\n\
    <| c |>\nThis doesn't work if you have non-string keys. For example, `check_dict_case([\"\
    a\": 42, \"b\": 42]).nullable` returns `true`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't have this problem.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ have this problem.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are all\
    \ good, but I thought I'd add my own solution, which is more generic and doesn't\
    \ require you to know all the keys in advance.\n<code>\nimport std.stdio;\nimport\
    \ std.string;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport\
    \ std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    import std.algorithm;\nimport st", "{\n    foreach(k, v) \n    {\n        if (!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(k, v) \n    {\n        if(!is_string(k)\
    \ || !is_string(v))\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    foreach(string k in dict)\n    {\n        if(!is_string(k))\n\
    \        {\n            return false;\n        }\n        if(!is_string(dict[k]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
