name: HumanEval_87_get_row
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a 2 dimensional data, as a nested array lists,\n\
  \    // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the array list,\n    // and return array list of pairs, [(x1, y1),\
  \ (x2, y2) ...] such that\n    // each pair is a coordinate - (row, columns), starting\
  \ with 0.\n    // Sort coordinates initially by rows in ascending order.\n    //\
  \ Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l))\n    // (new ArrayList<Pair<Long,\
  \ Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l,\
  \ 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l),\
  \ (Pair<Long, Long>)Pair.with(2l, 0l))))\n    // >>> getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())),\
  \ (1l))\n    // (new ArrayList<Pair<Long, Long>>(Arrays.asList()))\n    // >>> getRow((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()),\
  \ (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l))\n    //\
  \ (new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l,\
  \ 2l))))\n    public static ArrayList<Pair<Long, Long>> getRow(ArrayList<ArrayList<Long>>\
  \ lst, long x) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(getRow((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long,\
  \ Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l,\
  \ 4l), (Pair<Long, Long>)Pair.with(1l, 0l), (Pair<Long, Long>)Pair.with(2l, 5l),\
  \ (Pair<Long, Long>)Pair.with(2l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))), (2l)).equals((new ArrayList<Pair<Long,\
  \ Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 1l), (Pair<Long, Long>)Pair.with(1l,\
  \ 1l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(3l, 1l),\
  \ (Pair<Long, Long>)Pair.with(4l, 1l), (Pair<Long, Long>)Pair.with(5l, 1l))))));\n\
  \    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)3l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)1l, (long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)1l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))))), (1l)).equals((new ArrayList<Pair<Long,\
  \ Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(0l, 0l), (Pair<Long, Long>)Pair.with(1l,\
  \ 0l), (Pair<Long, Long>)Pair.with(2l, 1l), (Pair<Long, Long>)Pair.with(2l, 0l),\
  \ (Pair<Long, Long>)Pair.with(3l, 2l), (Pair<Long, Long>)Pair.with(3l, 0l), (Pair<Long,\
  \ Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(4l, 0l), (Pair<Long, Long>)Pair.with(5l,\
  \ 4l), (Pair<Long, Long>)Pair.with(5l, 0l), (Pair<Long, Long>)Pair.with(6l, 5l),\
  \ (Pair<Long, Long>)Pair.with(6l, 0l))))));\n    assert(getRow((new ArrayList<ArrayList<Long>>(Arrays.asList())),\
  \ (1l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l))))),\
  \ (2l)).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList()))));\n    assert(getRow((new\
  \ ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList()),\
  \ (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))), (3l)).equals((new\
  \ ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 2l))))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Pair<Long, Long>> answer = new ArrayList<Pair<Long,\
    \ Long>>();\n        // get coordinates in matrix, rows and columns\n        ArrayList<Long>\
    \ row_indices = IntStream.range(0, lst.size()).boxed().map(i -> (long)i).collect(Collectors.toCollection(ArrayList::new));\n\
    \        ArrayList<Long> column_indices = IntStream.range(0, lst.get(0).size()).boxed().map(i\
    \ -> (long)i).collect(Collectors.toCollection(ArrayList::new));\n        // loop\
    \ through rows and columns\n        for (Long row_idx : row_indices) {\n     \
    \       for (Long column_idx : column_indices) {\n                if (lst.get(row_idx.intValue()).get(column_idx.intValue())\
    \ == x) {\n                    answer.add(Pair.with(row_idx, column_idx));\n \
    \               }\n            }\n        }\n        // sort answer\n        return\
    \ answer;", "        int rowNum = 0;\n        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<Pair<Long, Long>>();\n        for (ArrayList<Long> subLst :\
    \ lst) {\n            int colNum = subLst.size() - 1;\n            for (long num\
    \ : subLst) {\n                if (num == x) {\n                    result.add(Pair.with(rowNum,\
    \ colNum));\n                }\n                colNum--;\n            }\n   \
    \         rowNum++;\n        }\n        result.sort((pair1, pair2) -> {\n    \
    \        if (pair1.getValue0().equals(pair2.getValue0())) {\n                return\
    \ pair2.getValue1().compareTo(pair1.getValue1());\n            }\n           \
    \ return pair1.getValue0().compareTo(pair2.getValue0());\n        });\n      \
    \  return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n\
    \                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> x, Pair<Long, Long> y) {\n                if (x.getValue0()\
    \ == y.getValue0()) {\n                    return -Long.compare(x.getValue1(),\
    \ y.getValue1());\n                }\n                return Long.compare(x.getValue0(),\
    \ y.getValue0());\n            }\n        });\n        return result;", "    \
    \    // Write your code here\n        // To print results to the standard output\
    \ you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        long row = 0;\n        while(lst.size() > row) {\n      \
    \      long col = 0;\n            while(lst.get((int)row).size() > col) {\n  \
    \              if(lst.get((int)row).get((int)col) == x) {\n                  \
    \  res.add(Pair.with(row, col));\n                }\n                col++;\n\
    \            }\n            row++;\n        }\n        res.sort((p1, p2) -> {\n\
    \            if(p1.getValue0() == p2.getValue0()) {\n                return (int)(p2.getValue1()\
    \ - p1.getValue1());\n            }\n            return (int)(p1.getValue0() -\
    \ p2.getValue0());\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<Pair<Long, Long>>();\n        ArrayList<Long> index_lst\
    \ = new ArrayList<Long>();\n        ArrayList<Long> col_lst = new ArrayList<Long>();\n\
    \        ArrayList<Long> row_lst = new ArrayList<Long>();\n        long i = 0l;\n\
    \        ArrayList<Long> row = new ArrayList<Long>();\n        while (i < lst.size())\
    \ {\n            row = lst.get((int)i);\n            long j = 0l;\n          \
    \  while (j < row.size()) {\n                if (row.get((int)j) == x) {\n   \
    \                 index_lst.add(j);\n                    col_lst.add(j);\n   \
    \                 row_lst.add(i);\n                }\n                j = j +\
    \ 1l;\n            }\n            i = i + 1l;\n        }\n        ArrayList<Long>\
    \ row_lst_new = new ArrayList<Long>();\n        ArrayList<Long> col_lst_new =\
    \ new ArrayList<Long>();\n        long k = 0l;\n        while (k < index_lst.size())\
    \ {\n            if (!row_lst_new.contains(row_lst.get((int)k))) {\n         \
    \       row_lst_new.add(row_lst.get((int)k));\n            }\n            k =\
    \ k + 1l;\n        }\n        Collections.sort(row_lst_new);\n        i = 0l;\n\
    \        while (i < row_lst_new.size()) {\n            k = 0l;\n            while\
    \ (k < index_lst.size()) {\n                if (row_lst.get((int)k) == row_lst_new.get((int)i))\
    \ {\n                    col_lst_new.add(col_lst.get((int)k));\n             \
    \   }\n                k = k + 1l;\n            }\n            Collections.sort(col_lst_new,\
    \ Collections.reverseOrder());\n            k = 0l;\n            while (k < col_l",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        Pair<Long, Long> p = null;\n        long row = 0, col = 0;\n        for\
    \ (ArrayList<Long> rowList : lst) {\n            col = 0;\n            for (Long\
    \ elem : rowList) {\n                if (elem == x) {\n                    p =\
    \ Pair.with(row, col);\n                    result.add(p);\n                }\n\
    \                col++;\n            }\n            row++;\n        }\n      \
    \  Collections.sort(result, new Comparator<Pair<Long, Long>>() {\n           \
    \ @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long>\
    \ p2) {\n                if (p1.getValue0().equals(p2.getValue0())) {\n      \
    \              return p2.getValue1().compareTo(p1.getValue1());\n            \
    \    }\n                return p1.getValue0().compareTo(p2.getValue0());\n   \
    \         }\n        });\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            ArrayList<Long> cur = lst.get(i);\n        \
    \    for (int j = 0; j < cur.size(); j++) {\n                if (cur.get(j) ==\
    \ x) {\n                    res.add(Pair.with((long)i, (long)j));\n          \
    \      }\n            }\n        }\n        res.sort((x1, x2) -> {\n         \
    \   int comp = (int)(x1.getValue0() - x2.getValue0());\n            if (comp !=\
    \ 0) {\n                return comp;\n            }\n            return (int)(x2.getValue1()\
    \ - x1.getValue1());\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> l = new ArrayList<Pair<Long, Long>>();\n        try {\n            if\
    \ (lst.size() == 0) {\n                return l;\n            }\n            int\
    \ i = 0;\n            for (ArrayList<Long> row : lst) {\n                int j\
    \ = 0;\n                for (Long el : row) {\n                    if (el == x)\
    \ {\n                        l.add(Pair.with(i, j));\n                    }\n\
    \                    j++;\n                }\n                i++;\n         \
    \   }\n            Collections.sort(l, (a, b) -> {\n                long comp\
    \ = a.getValue0() - b.getValue0();\n                if (comp != 0) {\n       \
    \             return (int)comp;\n                }\n                return (int)(b.getValue1()\
    \ - a.getValue1());\n            });\n        } catch (Exception e) {\n      \
    \      return l;\n        }\n        return l;", "        //YOUR CODE HERE\n \
    \       ArrayList<Pair<Long, Long>> array_list = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row\
    \ = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n        \
    \        long e = row.get(j);\n                if (e == x) {\n               \
    \     array_list.add(Pair.with((long)i, (long)j));\n                }\n      \
    \      }\n        }\n        Collections.sort(array_list, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                long l1 = p1.getValue0();\n\
    \                long l2 = p2.getValue0();\n                if (l1 > l2) {\n \
    \                   return 1;\n                } else if (l1 < l2) {\n       \
    \             return -1;\n                } else {\n                    long l3\
    \ = p1.getValue1();\n                    long l4 = p2.getValue1();\n         \
    \           if (l3 > l4) {\n                        return -1;\n             \
    \       } else if (l3 < l4) {\n                        return 1;\n           \
    \         } else {\n                        return 0;\n                    }\n\
    \                }\n            }\n        });\n        return array_list;", " \
    \       ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        long cnt = 0;\n        for (ArrayList<Long> al : lst) {\n           \
    \ int j = 0;\n            for (long i : al) {\n                if (i == x) {\n\
    \                    res.add(Pair.with(cnt, (long)j));\n                }\n  \
    \              j++;\n            }\n            cnt++;\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                if\
    \ (p1.getValue0().equals(p2.getValue0())) {\n                    return p2.getValue1().compareTo(p1.getValue1());\n\
    \                }\n                return p1.getValue0().compareTo(p2.getValue0());\n\
    \            }\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> t1, Pair<Long, Long> t2) {\n                if\
    \ (t1.getValue0() < t2.getValue0()) {\n                    return -1;\n      \
    \          } else if (t1.getValue0() > t2.getValue0()) {\n                   \
    \ return 1;\n                } else {\n                    if (t1.getValue1()\
    \ > t2.getValue1()) {\n                        return -1;\n                  \
    \  } else if (t1.getValue1() < t2.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        // remove below and add your code here\n        return result;",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        ArrayList<Pair<Long, Long>> tmp = new ArrayList<Pair<Long, Long>>();\n\
    \        long row = 0;\n        while (row < lst.size()) {\n            long col\
    \ = 0;\n            while (col < lst.get((int)row).size()) {\n               \
    \ if (lst.get((int)row).get((int)col) == x) {\n                    tmp.add(Pair.with(row,\
    \ col));\n                }\n                col = col + 1;\n            }\n \
    \           row = row + 1;\n        }\n        return tmp;", "        ArrayList<Pair<Long,\
    \ Long>> coord = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i\
    \ < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    coord.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(coord,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                if\
    \ (p1.getValue0() < p2.getValue0()) {\n                    return -1;\n      \
    \          } else if (p1.getValue0() > p2.getValue0()) {\n                   \
    \ return 1;\n                } else {\n                    if (p1.getValue1()\
    \ > p2.getValue1()) {\n                        return -1;\n                  \
    \  } else if (p1.getValue1() < p2.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ coord;", '        throw new RuntimeException("Not Implemented");', '        return
    lst.stream().map(r -> Pair.with(r.indexOf(x), lst.indexOf(r))).filter(p -> p.getValue0()
    >= 0).sorted(new Problem().p0).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        long idx = 0;\n        for (ArrayList<Long> row : lst) {\n          \
    \  long col = 0;\n            for (Long num : row) {\n                if (num\
    \ == x) {\n                    res.add(Pair.with(idx, col));\n               \
    \ }\n                col++;\n            }\n            idx++;\n        }\n  \
    \      res.sort((p1, p2) -> p1.getValue0().compareTo(p2.getValue0()));\n     \
    \   res.sort((p1, p2) -> p2.getValue1().compareTo(p1.getValue1()));\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0l; i < lst.size(); i++) {\n            for\
    \ (long j = 0l; j < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    result.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        result.sort((a, b) -> {\n            if (a.getValue0()\
    \ > b.getValue0()) {\n                return 1;\n            } else if (a.getValue0()\
    \ < b.getValue0()) {\n                return -1;\n            } else {\n     \
    \           if (a.getValue1() > b.getValue1()) {\n                    return -1;\n\
    \                } else if (a.getValue1() < b.getValue1()) {\n               \
    \     return 1;\n                } else {\n                    return 0;\n   \
    \             }\n            }\n        });\n        return result;", '        return
    null;', "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        if (lst == null || lst.size() == 0) {\n            return\
    \ result;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (lst.get(i) == null || lst.get(i).size() == 0) {\n                continue;\n\
    \            }\n            for (int j = 0; j < lst.get(i).size(); j++) {\n  \
    \              if (lst.get(i).get(j) == x) {\n                    result.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                int r\
    \ = a.getValue0().compareTo(b.getValue0());\n                if (r == 0) {\n \
    \                   return b.getValue1().compareTo(a.getValue1());\n         \
    \       }\n                return r;\n            }\n        });\n        return\
    \ result;", "        long n = 0l;\n        long i = 0l;\n        long j = 0l;\n\
    \        long m = 0l;\n        Pair<Long, Long> p = Pair.with(0l, 0l);\n     \
    \   ArrayList<Pair<Long, Long>> l = new ArrayList<Pair<Long, Long>>();\n     \
    \   n = (long)lst.size();\n        for (i = 0l; i < n; i++) {\n            m =\
    \ (long)lst.get((int)i).size();\n            for (j = 0l; j < m; j++) {\n    \
    \            if (lst.get((int)i).get((int)j) == x) {\n                    p =\
    \ Pair.with(i, j);\n                    l.add(p);\n                }\n       \
    \     }\n        }\n        // Sort your coordinates by first by rows in ascending\
    \ order,\n        // and then sort coordinates of the row by columns in descending\
    \ order.\n        // If a row has the same coordinates,\n        // the first\
    \ element of the row should be the last coordinate of the row.\n        l.sort((x1,\
    \ x2) -> {\n            if (x1.getValue0() == x2.getValue0()) {\n            \
    \    return Long.compare(x2.getValue1(), x1.getValue1());\n            }\n   \
    \         return Long.compare(x1.getValue0(), x2.getValue0());\n        });\n\
    \        return l;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        // Nothing to do if lst is empty\n        if (lst.size()\
    \ > 0) {\n            // Convert lst to a multi dimensional array\n          \
    \  long[][] tbl = new long[lst.size()][];\n            for (int i = 0; i < lst.size();\
    \ i++) {\n                tbl[i] = new long[lst.get(i).size()];\n            \
    \    for (int j = 0; j < lst.get(i).size(); j++) {\n                    tbl[i][j]\
    \ = lst.get(i).get(j);\n                }\n            }\n            // Loop\
    \ over array to find x\n            for (int i = 0; i < tbl.length; i++) {\n \
    \               for (int j = 0; j < tbl[i].length; j++) {\n                  \
    \  if (tbl[i][j] == x) {\n                        result.add(Pair.with(new Long(i),\
    \ new Long(j)));\n                    }\n                }\n            }\n  \
    \          // Sort the array list by row and then by column\n            result.sort(new\
    \ Comparator<Pair<Long, Long>>() {\n                @Override\n              \
    \  public int compare(Pair<Long, Long> l, Pair<Long, Long> r) {\n            \
    \        if (l.getValue0().equals(r.getValue0())) {\n                        return\
    \ r.getValue1().compareTo(l.getValue1());\n                    } else {\n    \
    \                    return l.getValue0().compareTo(r.getValue0());\n        \
    \            }\n                }\n            });\n        }\n        return\
    \ result;", '        return new ArrayList<Pair<Long, Long>>(Stream.iterate(0l,
    n -> n + 1l).limit(lst.size()).flatMap(n -> lst.get((int)n).stream().map(m ->
    Pair.with(n, m)).filter(m -> m.getValue1() == x)).sorted((a, b) -> a.getValue0().compareTo(b.getValue0())).collect(Collectors.toList()));',
  "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long, Long>>();\n\
    \        long i = 0;\n        for (ArrayList<Long> row : lst) {\n            long\
    \ j = 0;\n            for (Long col : row) {\n                if (col == x) {\n\
    \                    ans.add(Pair.with(i, j));\n                }\n          \
    \      j++;\n            }\n            i++;\n        }\n        return ans;",
  '        return null;', "        return new ArrayList<Pair<Long, Long>>(Stream.of(\n\
    \            Stream.iterate(0l, i -> i + 1l)\n                .limit(Stream.of(lst).mapToLong(r\
    \ -> r.size()).sum())\n                .mapToObj(i -> lst)\n                .flatMap(r\
    \ -> Stream.iterate(0l, i -> i + 1l)\n                    .limit(r.size())\n \
    \                   .flatMap(j -> Stream.of(\n                        r.get((int)j).contains(x)\
    \ ? Stream.of(Pair.with(j, r.get((int)j).indexOf(x))) : Stream.of(Stream.empty())\n\
    \                    ))\n                )\n                .flatMap(p -> p)\n\
    \                .map(p -> Pair.with(p.getValue0(), p.getValue1()))\n        \
    \        .collect(Collectors.toCollection(ArrayList::new))\n        ).collect(Collectors.toCollection(ArrayList::new)));",
  "        // for each row\n        // for each column\n        // if x matches any\
    \ number, then return row and column\n        ArrayList<Pair<Long, Long>> ans\
    \ = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x) {\n                    ans.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(ans,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                if\
    \ (p1.getValue0() < p2.getValue0()) {\n                    return -1;\n      \
    \          } else if (p1.getValue0() > p2.getValue0()) {\n                   \
    \ return 1;\n                } else {\n                    if (p1.getValue1()\
    \ > p2.getValue1()) {\n                        return -1;\n                  \
    \  } else if (p1.getValue1() < p2.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ ans;", "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long, Long>>();\n\
    \        long row = 0;\n        for (ArrayList<Long> l : lst) {\n            long\
    \ col = 0;\n            for (long i : l) {\n                if (i == x) {\n  \
    \                  ans.add(Pair.with(row, col));\n                }\n        \
    \        col++;\n            }\n            row++;\n        }\n        ans.sort((a,\
    \ b) -> {\n            int compare = Long.compare(a.getValue0(), b.getValue0());\n\
    \            if (compare == 0) {\n                return Long.compare(b.getValue1(),\
    \ a.getValue1());\n            }\n            return compare;\n        });\n \
    \       return ans;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        if (lst.size() == 0) return result;\n        long row = 0l;\n\
    \        long col = 0l;\n        long rowSize = 0l;\n        Iterator<ArrayList<Long>>\
    \ rows = lst.iterator();\n        for (ArrayList<Long> rowData : lst) {\n    \
    \        rowSize = rowData.size();\n            for (long i = 0l; i < rowSize;\
    \ i++) {\n                if (rowData.get((int)i) == x) {\n                  \
    \  result.add(Pair.with(row, i));\n                }\n            }\n        \
    \    row++;\n        }\n        Comparator<Pair<Long, Long>> comparator = Comparator.comparing(pair\
    \ -> pair.getValue0());\n        comparator = comparator.thenComparing(pair ->\
    \ -pair.getValue1());\n        Collections.sort(result, comparator);\n       \
    \ return result;", "        // These are the values that you need to return\n\
    \        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row\
    \ = lst.get(i);\n            ArrayList<Long> cols = new ArrayList<Long>();\n \
    \           for (int j = 0; j < row.size(); j++) {\n                long val =\
    \ row.get(j);\n                if (val == x) {\n                    cols.add((long)j);\n\
    \                }\n            }\n            ArrayList<Long> cols_rev = new\
    \ ArrayList<Long>();\n            cols_rev.addAll(cols);\n            Collections.reverse(cols_rev);\n\
    \            for (int j = 0; j < cols_rev.size(); j++) {\n                long\
    \ val = cols_rev.get(j);\n                res.add(Pair.with((long)i, val));\n\
    \            }\n        }\n        return res;", "        int ind = 0;\n     \
    \   Pair<Long, Long> ans[] = new Pair[lst.size()];\n        boolean ou = false;\n\
    \        for (ArrayList<Long> xs : lst) {\n            int i = 0;\n          \
    \  for (Long c : xs) {\n                if (c == x) {\n                    ans[ind]\
    \ = Pair.with(new Long(ind), new Long(i));\n                    ind++;\n     \
    \               ou = true;\n                }\n                i++;\n        \
    \    }\n        }\n        ArrayList<Pair<Long, Long>> fin = new ArrayList<Pair<Long,\
    \ Long>>();\n        int i = 0;\n        if (ou) {\n            Pair<Long, Long>\
    \ p[] = new Pair[ind];\n            for (Pair<Long, Long> a : ans) {\n       \
    \         p[i] = a;\n                i++;\n            }\n            Arrays.sort(p,\
    \ new Comparator<Pair<Long, Long>>() {\n                public int compare(Pair<Long,\
    \ Long> a, Pair<Long, Long> b) {\n                    if (a.getValue0() > b.getValue0())\
    \ {\n                        return 1;\n                    } else if (a.getValue0()\
    \ < b.getValue0()) {\n                        return -1;\n                   \
    \ } else {\n                        if (a.getValue1() > b.getValue1()) {\n   \
    \                         return -1;\n                        } else if (a.getValue1()\
    \ < b.getValue1()) {\n                            return 1;\n                \
    \        } else {\n                            return 0;\n                   \
    \     }\n                    }\n                }\n            });\n         \
    \   for (Pair<Long, Long> a : p) {\n                fin.add(a);\n            }\n\
    \        }\n        return fin;", "        ArrayList<Pair<Long, Long>> rslt =\
    \ new ArrayList<Pair<Long, Long>>();\n        long rownum = 0;\n        for (ArrayList<Long>\
    \ row : lst) {\n            long colnum = 0;\n            for (Long elem : row)\
    \ {\n                if (elem == x) {\n                    rslt.add(Pair.with(rownum,\
    \ colnum));\n                }\n                colnum += 1;\n            }\n\
    \            rownum += 1;\n        }\n        Collections.sort(rslt, (r1, r2)\
    \ -> {\n            if (r1.getValue0() < r2.getValue0()) {\n                return\
    \ -1;\n            } else if (r1.getValue0() > r2.getValue0()) {\n           \
    \     return 1;\n            } else {\n                if (r1.getValue1() > r2.getValue1())\
    \ {\n                    return -1;\n                } else if (r1.getValue1()\
    \ < r2.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return rslt;", "        // Write your code here\n        // To print\
    \ results to the standard output you can use System.out.println()\n        //\
    \ Example: System.out.println(\"Hello world!\");\n        ArrayList<Pair<Long,\
    \ Long>> found = new ArrayList<Pair<Long, Long>>();\n        long row = 0;\n \
    \       for (ArrayList<Long> aLst : lst) {\n            long col = 0;\n      \
    \      for (Long num : aLst) {\n                if (num == x) {\n            \
    \        found.add(Pair.with(row, col));\n                }\n                col\
    \ += 1;\n            }\n            row += 1;\n        }\n        return found;",
  "        ArrayList<Pair<Long, Long>> elem = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row\
    \ = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n        \
    \        if (row.get(j) == x) {\n                    elem.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        elem.sort((e1,\
    \ e2) -> {\n            if (e1.getValue0() == e2.getValue0()) {\n            \
    \    return e2.getValue1().compareTo(e1.getValue1());\n            }\n       \
    \     return e1.getValue0().compareTo(e2.getValue0());\n        });\n        return\
    \ elem;", '        return null;', "        // A lst2 of a list of a tuple of column\
    \ index, row index and value,\n        // create a list of a tuple of column index,\
    \ row index and value\n        // by folding the list of list of values into the\
    \ lst2.\n        ArrayList<Pair<Long, Long>> lst2 = new ArrayList<Pair<Long, Long>>();\n\
    \        lst2 = lst.stream().reduce(lst2, (lst2, lst3) -> {\n            int index\
    \ = 0;\n            // A lst4 of a list of a tuple of column index, row index\
    \ and value,\n            // create a list of a tuple of column index, row index\
    \ and value\n            // by folding the list of values into the lst4.\n   \
    \         ArrayList<Pair<Long, Long>> lst4 = new ArrayList<Pair<Long, Long>>();\n\
    \            lst4 = lst3.stream().reduce(lst4, (lst4, value) -> {\n          \
    \      if (value == x) {\n                    lst4.add(Pair.with(new Long(index),\
    \ new Long(lst.indexOf(lst3))));\n                }\n                index++;\n\
    \                return lst4;\n            }, (lst4, lst5) -> {\n            \
    \    lst4.addAll(lst5);\n                return lst4;\n            });\n     \
    \       lst2.addAll(lst4);\n            return lst2;\n        }, (lst2, lst3)\
    \ -> {\n            lst2.addAll(lst3);\n            return lst2;\n        });\n\
    \        // A lst3 of a list of a tuple of column index, row index and value,\n\
    \        // sort the lst3 by row index and column index in descending order.\n\
    \        Collections.sort(lst2, (tuple1, tuple2) -> {\n            if (tuple1.getValue0().compareTo(tuple2.getValue0())\
    \ == 0) {\n                return tuple2.getValue1().compareTo(tuple1.getValue1());\n\
    \            }\n            return tuple1.getValue0().compareTo(tuple2.getValue",
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        for (long i = 0l; i < lst.size(); i++) {\n            for (long j = 0l;\
    \ j < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    res.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                return (int)(o1.getValue0().compareTo(o2.getValue0()));\n\
    \            }\n        });\n        return res;", "        // fill in\n     \
    \   ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        for (long i = 0; i < lst.size(); i++) {\n            for (long j = 0;\
    \ j < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    result.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        // Collections.sort(result, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n\
    \        // Collections.sort(result, (a, b) -> b.getValue1().compareTo(a.getValue1()));\n\
    \        Collections.sort(result, (a, b) -> {\n            int tmp = a.getValue0().compareTo(b.getValue0());\n\
    \            if (tmp == 0) {\n                return b.getValue1().compareTo(a.getValue1());\n\
    \            }\n            return tmp;\n        });\n        return result;",
  '        return new ArrayList<Pair<Long, Long>>(Stream.iterate(0l, i -> i < (long)lst.size(),
    i -> i + 1l).flatMap(i -> Stream.iterate(0l, j -> j < (long)lst.get((int)i).size(),
    j -> j + 1l).filter(j -> Objects.equals(lst.get((int)i).get((int)j), x)).map(j
    -> Pair.with(i, j))).collect(Collectors.toList()));', "        var inds = IntStream.range(0,\
    \ lst.size()).boxed().collect(Collectors.toList());\n        var ij = inds.stream().flatMap(i\
    \ -> {\n            var inds2 = IntStream.range(0, lst.get(i).size()).boxed().collect(Collectors.toList());\n\
    \            return inds2.stream().map(j -> Pair.with(i, j));\n        }).filter(ijp\
    \ -> lst.get(ijp.getValue0()).get(ijp.getValue1()) == x).collect(Collectors.toList());\n\
    \        return ij.stream().sorted((ij1, ij2) -> {\n            if (ij1.getValue0()\
    \ < ij2.getValue0()) {\n                return -1;\n            } else if (ij1.getValue0()\
    \ > ij2.getValue0()) {\n                return 1;\n            } else {\n    \
    \            if (ij1.getValue1() > ij2.getValue1()) {\n                    return\
    \ -1;\n                } else if (ij1.getValue1() < ij2.getValue1()) {\n     \
    \               return 1;\n                } else {\n                    return\
    \ 0;\n                }\n            }\n        }).map(p -> Pair.with(p.getValue0(),\
    \ p.getValue1())).collect(Collectors.toCollection(ArrayList::new));", '        return
    null;', "        // Write your code here\n        // To print results to the standard\
    \ output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        return new ArrayList<Pair<Long, Long>>();", "      \
    \  ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n    \
    \    long rows = 0;\n        while (rows < lst.size()) {\n            long columns\
    \ = 0;\n            while (columns < lst.get((int)rows).size()) {\n          \
    \      if (lst.get((int)rows).get((int)columns) == x) {\n                    res.add(Pair.with(rows,\
    \ columns));\n                }\n                columns = columns + 1;\n    \
    \        }\n            rows = rows + 1;\n        }\n        ArrayList<Pair<Long,\
    \ Long>> toSort = new ArrayList<Pair<Long, Long>>();\n        long i = 0;\n  \
    \      while (i < res.size()) {\n            toSort.add(res.get((int)i));\n  \
    \          i = i + 1;\n        }\n        res = new ArrayList<Pair<Long, Long>>();\n\
    \        res = new ArrayList<Pair<Long, Long>>(toSort.stream().sorted(new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long>\
    \ p2) {\n                long n1 = p1.getValue0();\n                long n2 =\
    \ p2.getValue0();\n                if (n1 < n2) {\n                    return\
    \ -1;\n                } else if (n1 > n2) {\n                    return 1;\n\
    \                } else {\n                    long n3 = p1.getValue1();\n   \
    \                 long n4 = p2.getValue1();\n                    if (n3 < n4)\
    \ {\n                        return 1;\n                    } else if (n3 > n4)\
    \ {\n                        return -1;\n                    } else {\n      \
    \                  return 0;\n                    }\n                }\n     \
    \       }\n        }).collect(Collectors.toList()));\n        return res;", '        //
    your code here', "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        long row = -1;\n        long column = -1;\n        while\
    \ (++row < lst.size()) {\n            column = -1;\n            while (++column\
    \ < lst.get((int)row).size()) {\n                if (lst.get((int)row).get((int)column)\
    \ == x) {\n                    result.add(Pair.with(row, column));\n         \
    \       }\n            }\n        }\n        Collections.sort(result, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long>\
    \ o2) {\n                if (o1.getValue0() == o2.getValue0()) {\n           \
    \         return (int)(o2.getValue1() - o1.getValue1());\n                }\n\
    \                return (int)(o1.getValue0() - o2.getValue0());\n            }\n\
    \        });\n        return result;", "        // Write your code here\n    \
    \    return null;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        if (lst.size() == 0) {\n            return result;\n    \
    \    }\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j\
    \ = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) ==\
    \ x) {\n                    result.add(Pair.with((long)i, (long)j));\n       \
    \         }\n            }\n        }\n        result.sort(((p1, p2) -> {\n  \
    \          if (p1.getValue0() > p2.getValue0()) {\n                return 1;\n\
    \            } else if (p1.getValue0() < p2.getValue0()) {\n                return\
    \ -1;\n            } else {\n                if (p1.getValue1() > p2.getValue1())\
    \ {\n                    return -1;\n                } else if (p1.getValue1()\
    \ < p2.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        }));\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        long i = 0l;\n        long j = 0l;\n        while (i < lst.size())\
    \ {\n            while (j < lst.get((int)i).size()) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    result.add(Pair.with(i, j));\n                }\n\
    \                j = j + 1l;\n            }\n            j = 0l;\n           \
    \ i = i + 1l;\n        }\n        Collections.sort(result, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long>\
    \ p2) {\n                if (p1.getValue0() > p2.getValue0()) {\n            \
    \        return 1;\n                } else if (p1.getValue0() < p2.getValue0())\
    \ {\n                    return -1;\n                } else {\n              \
    \      if (p1.getValue1() > p2.getValue1()) {\n                        return\
    \ -1;\n                    } else if (p1.getValue1() < p2.getValue1()) {\n   \
    \                     return 1;\n                    } else {\n              \
    \          return 0;\n                    }\n                }\n            }\n\
    \        });\n        return result;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x) {\n                    result.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ (p1, p2) -> {\n            if (p1.getValue0() > p2.getValue0()) {\n        \
    \        return 1;\n            } else if (p1.getValue0() < p2.getValue0()) {\n\
    \                return -1;\n            } else {\n                if (p1.getValue1()\
    \ > p2.getValue1()) {\n                    return -1;\n                } else\
    \ if (p1.getValue1() < p2.getValue1()) {\n                    return 1;\n    \
    \            } else {\n                    return 0;\n                }\n    \
    \        }\n        });\n        return result;", "        // Given data is represented\
    \ as a list of lists,\n        // and each inner list is an array of integers.\n\
    \        // In order to retrieve coordinates of the element,\n        // we need\
    \ to traverse the input data in a nested loop.\n        // In order to represent\
    \ coordinates of the element,\n        // we are going to create a new array of\
    \ pairs,\n        // and each pair will contain a coordinate - (row, columns).\n\
    \        // In order to avoid unnecessary allocations,\n        // we are going\
    \ to create an array of pairs of a fixed size,\n        // which is equal to the\
    \ size of the input list.\n        // Therefore, we are going to perform operations\
    \ over\n        // an array instead of a list, and avoid allocations of\n    \
    \    // data structures.\n        // Implementation of an array of pairs.\n  \
    \      class ArrayOfPairs {\n            // Array of pairs.\n            // Each\
    \ pair is represented as a 2 elements tuple.\n            Pair<Long, Long>[] arr;\n\
    \            // Constructor accepts a size of the array of pairs.\n          \
    \  public ArrayOfPairs(int n) {\n                // Allocate array of pairs.\n\
    \                this.arr = new Pair[n];\n            }\n            // This method\
    \ returns an array of pairs.\n            public Pair<Long, Long>[] getArr() {\n\
    \                // Return array of pairs.\n                return this.arr;\n\
    \            }\n            // This method returns a list of pairs.\n        \
    \    public ArrayList<Pair<Long, Long>> getList() {\n                // Convert\
    \ array of pairs to an array list.\n                // There is no other way of\
    \ creating array list\n                // except converting an array to a list.\n\
    \                return new ArrayList<Pair<Long, Long>>(Arrays.asList(this.arr));\n\
    \            }\n            // This method converts an array of pairs to a list.\n\
    \            public ArrayList<Pair<Long, Long>> toList() {\n                //\
    \ Convert array of pairs to an array list.\n                // There is no other\
    \ way of creating array list\n                // except converting an array to\
    \ a list.\n                return new ArrayList<Pair<Long, Long>>(Arrays.asList(this.arr));\n\
    \            }\n            // This method returns a size of the array of pairs.\n\
    \            public", "        //////////////////////////////////////////////////////////////////////////\n\
    \        // Write your code here, and return the final result.\n        //////////////////////////////////////////////////////////////////////////",
  "        ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    pairs.add(Pair.with((long)i, (long)j));\n               \
    \ }\n            }\n        }\n        Collections.sort(pairs, (Pair<Long, Long>\
    \ p1, Pair<Long, Long> p2) -> {\n            long s1 = p1.getValue0() * 100000\
    \ + p1.getValue1();\n            long s2 = p2.getValue0() * 100000 + p2.getValue1();\n\
    \            return s1 > s2 ? 1 : -1;\n        });\n        return pairs;", " \
    \       ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    ans.add(Pair.with((long)i, (long)j));\n                }\n\
    \            }\n        }\n        Collections.sort(ans, (p1, p2) -> (int)(p1.getValue0()\
    \ - p2.getValue0()));\n        Collections.sort(ans, (p1, p2) -> (int)(p2.getValue1()\
    \ - p1.getValue1()));\n        return ans;", "        ArrayList<Pair<Long, Long>>\
    \ res = new ArrayList<Pair<Long, Long>>();\n        long rowIdx = 0;\n       \
    \ for (ArrayList<Long> row : lst) {\n            long colIdx = 0;\n          \
    \  for (Long val : row) {\n                if (val == x) {\n                 \
    \   res.add(Pair.with(rowIdx, colIdx));\n                }\n                colIdx++;\n\
    \            }\n            rowIdx++;\n        }\n        res.sort(((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> {\n            if (a.getValue0().equals(b.getValue0()))\
    \ {\n                return b.getValue1().compareTo(a.getValue1());\n        \
    \    }\n            return a.getValue0().compareTo(b.getValue0());\n        }));\n\
    \        return res;", "        ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    pairs.add(Pair.with((long)i, (long)j));\n     \
    \           }\n            }\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n\
    \            }\n        });\n        Collections.sort(pairs, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue1().compareTo(p1.getValue1());\n\
    \            }\n        });\n        return pairs;", "        var res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (var i = 0; i < lst.size(); i++) {\n            var row\
    \ = lst.get(i);\n            for (var j = 0; j < row.size(); j++) {\n        \
    \        if (row.get(j) == x) {\n                    res.add(Pair.with(i, j));\n\
    \                }\n            }\n        }\n        res.sort((e1, e2) -> e1.getValue0().equals(e2.getValue0())\
    \ ? e2.getValue1().compareTo(e1.getValue1()) : e1.getValue0().compareTo(e2.getValue0()));\n\
    \        return res;", "    }\n}", "        ArrayList<Pair<Long, Long>> _rt =\
    \ new ArrayList<Pair<Long, Long>>();\n        long rI = 0;\n        long cI =\
    \ 0;\n        long cSize = 0;\n        long cSubSize = 0;\n        for (ArrayList<Long>\
    \ sub : lst) {\n            cI = 0;\n            cSubSize = sub.size();\n    \
    \        for (Long val : sub) {\n                if (x == val) {\n           \
    \         _rt.add(Pair.with(rI, cI));\n                }\n                cI +=\
    \ 1;\n            }\n            rI += 1;\n        }\n        if (_rt.size() >\
    \ 0) {\n            Collections.sort(_rt, new Comparator<Pair<Long, Long>>() {\n\
    \                public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n\
    \                    if (a.getValue0().equals(b.getValue0())) {\n            \
    \            return (int)(b.getValue1() - a.getValue1());\n                  \
    \  } else {\n                        return (int)(a.getValue0() - b.getValue0());\n\
    \                    }\n                }\n            });\n        }\n      \
    \  return _rt;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        long index_row = 0;\n        for (ArrayList<Long> row : lst)\
    \ {\n            long index_column = 0;\n            for (Long value : row) {\n\
    \                if (value == x) {\n                    result.add(Pair.with(index_row,\
    \ index_column));\n                }\n                index_column += 1;\n   \
    \         }\n            index_row += 1;\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                if (a.getValue0().equals(b.getValue0()))\
    \ {\n                    return (int)(b.getValue1() - a.getValue1());\n      \
    \          }\n                return (int)(a.getValue0() - b.getValue0());\n \
    \           }\n        });\n        return result;", '        return new ArrayList<Pair<Long,
    Long>>(Arrays.asList());', "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        ArrayList<ArrayList<Long>> p = lst;\n        for (long i\
    \ = 0; i < p.size(); i++) {\n            for (long j = 0; j < p.get((int)i).size();\
    \ j++) {\n                if (p.get((int)i).get((int)j) == x) {\n            \
    \        res.add(Pair.with(i, j));\n                }\n            }\n       \
    \ }\n        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n    \
    \        public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n      \
    \          if (a.getValue0() < b.getValue0()) {\n                    return -1;\n\
    \                } else if (a.getValue0() > b.getValue0()) {\n               \
    \     return 1;\n                } else {\n                    if (a.getValue1()\
    \ > b.getValue1()) {\n                        return -1;\n                   \
    \ } else if (a.getValue1() < b.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ res;", '        return (ArrayList<Pair<Long, Long>>)null;', "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    res.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if\
    \ (o1.getValue0() == o2.getValue0()) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n\
    \                }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        long y = 0l;\n \
    \       for (ArrayList<Long> row : lst) {\n            long x2 = 0l;\n       \
    \     for (Long column : row) {\n                if (column == x) {\n        \
    \            result.add(Pair.with(y, x2));\n                }\n              \
    \  x2 += 1l;\n            }\n            y += 1l;\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if (o1.getValue0().compareTo(o2.getValue0())\
    \ == 0) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n\
    \                }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<Pair<Long, Long>>();\n        long row = 0l;\n  \
    \      while (lst.size() > row) {\n            ArrayList<Long> row_arr = lst.get((int)row);\n\
    \            long col = 0l;\n            while (row_arr.size() > col) {\n    \
    \            if (x == row_arr.get((int)col)) {\n                    res.add(Pair.with(row,\
    \ col));\n                }\n                col = col + 1l;\n            }\n\
    \            row = row + 1l;\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.sort((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> {\n            if (a.getValue0().compareTo(b.getValue0())\
    \ != 0) {\n                return a.getValue0().compareTo(b.getValue0());\n  \
    \          } else {\n                return -a.getValue1().compareTo(b.getValue1());\n\
    \            }\n        });\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> coordinates = new ArrayList<Pair<Long, Long>>();\n        for (long i\
    \ = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n\
    \            for (long j = 0; j < row.size(); j++) {\n                if (row.get((int)j)\
    \ == x) {\n                    coordinates.add(Pair.with(i, j));\n           \
    \     }\n            }\n        }\n        Collections.sort(coordinates, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> a, Pair<Long, Long> b) {\n                if (a.getValue0() < b.getValue0())\
    \ {\n                    return -1;\n                } else if (a.getValue0()\
    \ > b.getValue0()) {\n                    return 1;\n                } else {\n\
    \                    if (a.getValue1() > b.getValue1()) {\n                  \
    \      return -1;\n                    } else if (a.getValue1() < b.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return coordinates;", "        // Your code is\
    \ here ...\n        ArrayList<Pair<Long, Long>> coordinates = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long row = 0; row < lst.size(); row++) {\n         \
    \   for (long col = 0; col < lst.get((int)row).size(); col++) {\n            \
    \    if (lst.get((int)row).get((int)col) == x) {\n                    coordinates.add(Pair.with(row,\
    \ col));\n                }\n            }\n        }\n        Collections.sort(coordinates,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> pair1, Pair<Long, Long> pair2) {\n            \
    \    if (pair1.getValue0().compareTo(pair2.getValue0()) == 0) {\n            \
    \        return pair2.getValue1().compareTo(pair1.getValue1());\n            \
    \    }\n                return pair1.getValue0().compareTo(pair2.getValue0());\n\
    \            }\n        });\n        return coordinates;", '        // Insert
    code here', '        return null;', '        return lst.stream().map(r -> r.stream().map(c
    -> Pair.with(r.indexOf(c), c.longValue())).collect(Collectors.toList())).flatMap(Collection::stream).filter(a
    -> a.getValue1().equals(x)).sorted(Comparator.comparing(Pair::getValue0)).sorted(Comparator.comparing(Pair::getValue1).reversed()).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Pair<Long, Long>> ret = new ArrayList<Pair<Long, Long>>();\n\
    \        int row = 0;\n        int col = 0;\n        while (row < lst.size())\
    \ {\n            ArrayList<Long> sub = lst.get(row);\n            while (col <\
    \ sub.size()) {\n                if (sub.get(col) == x) {\n                  \
    \  ret.add(Pair.with(row, col));\n                }\n                col += 1;\n\
    \            }\n            col = 0;\n            row += 1;\n        }\n     \
    \   ret.sort((a, b) -> {\n            if (a.getValue0() == b.getValue0()) {\n\
    \                return b.getValue1().compareTo(a.getValue1());\n            }\n\
    \            return a.getValue0().compareTo(b.getValue0());\n        });\n   \
    \     return ret;", "        // write your code here\n        ArrayList<Pair<Long,\
    \ Long>> list = new ArrayList<Pair<Long, Long>>();\n        for (int j = 0; j\
    \ < lst.size(); j++) {\n            for (int i = 0; i < lst.get(j).size(); i++)\
    \ {\n                if (lst.get(j).get(i) == x) {\n                    list.add(Pair.with((long)j,\
    \ (long)i));\n                }\n            }\n        }\n        return list;",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        Pair<Long, Long> coordinate = null;\n        for (long i = 0; i < lst.size();\
    \ i++) {\n            ArrayList<Long> lst2 = lst.get((int)i);\n            for\
    \ (long j = 0; j < lst2.size(); j++) {\n                if (lst2.get((int)j) ==\
    \ x) {\n                    coordinate = Pair.with(i, j);\n                  \
    \  result.add(coordinate);\n                }\n            }\n        }\n    \
    \    Comparator<Pair<Long, Long>> compareRows = (Pair<Long, Long> o1, Pair<Long,\
    \ Long> o2) -> {\n            if (o1.getValue0() == o2.getValue0()) {\n      \
    \          return -1 * o1.getValue1().compareTo(o2.getValue1());\n           \
    \ }\n            return o1.getValue0().compareTo(o2.getValue0());\n        };\n\
    \        result.sort(compareRows);\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            ArrayList<Long> l = lst.get(i);\n      \
    \      for (int j = 0; j < l.size(); j++) {\n                if (l.get(j) == x)\
    \ {\n                    result.add(Pair.with((long)i, (long)j));\n          \
    \      }\n            }\n        }\n        result.sort((a, b) -> {\n        \
    \    if (a.getValue0() == b.getValue0()) {\n                return Long.compare(b.getValue1(),\
    \ a.getValue1());\n            }\n            return Long.compare(a.getValue0(),\
    \ b.getValue0());\n        });\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            ArrayList<Long> arr = lst.get(i);\n    \
    \        for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j)\
    \ == x) {\n                    result.add(Pair.with((long)i, (long)j));\n    \
    \            }\n            }\n        }\n        Collections.sort(result, new\
    \ Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if\
    \ (o1.getValue0() > o2.getValue0()) {\n                    return 1;\n       \
    \         } else if (o1.getValue0() < o2.getValue0()) {\n                    return\
    \ -1;\n                } else {\n                    if (o1.getValue1() > o2.getValue1())\
    \ {\n                        return -1;\n                    } else if (o1.getValue1()\
    \ < o2.getValue1()) {\n                        return 1;\n                   \
    \ } else {\n                        return 0;\n                    }\n       \
    \         }\n            }\n        });\n        return result;", "        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use System.out.println()\n        // Example: System.out.println(\"Hello\
    \ world!\");\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0; i < lst.size(); i++) {\n            for\
    \ (long j = 0; j < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    result.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        for (long i = 0; i < result.size(); i++) {\n\
    \            for (long j = 0; j < result.size() - 1; j++) {\n                if\
    \ (result.get((int)j).getValue0() == result.get((int)j + 1).getValue0()) {\n \
    \                   if (result.get((int)j).getValue1() < result.get((int)j + 1).getValue1())\
    \ {\n                        Pair<Long, Long> tmp = result.get((int)j);\n    \
    \                    result.set((int)j, result.get((int)j + 1));\n           \
    \             result.set((int)j + 1, tmp);\n                    }\n          \
    \      }\n            }\n        }\n        for (long i = 0; i < result.size();\
    \ i++) {\n            for (long j = 0; j < result.size() - 1; j++) {\n       \
    \         if (result.get((int)j).getValue0() > result.get((int)j + 1).getValue0())\
    \ {\n                    Pair<Long, Long> tmp = result.get((int)j);\n        \
    \            result.set((int)j, result.get((int)j + 1));\n                   \
    \ result.set((int)j + 1, tmp);\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> list = new ArrayList<Pair<Long,\
    \ Long>>();\n        long rows = lst.size();\n        for (long row = 0; row <\
    \ rows; row++) {\n            ArrayList<Long> element = lst.get((int)row);\n \
    \           long cols = element.size();\n            for (long col = 0; col <\
    \ cols; col++) {\n                long elementX = element.get((int)col);\n   \
    \             if (elementX == x) {\n                    list.add(Pair.with(row,\
    \ col));\n                }\n            }\n        }\n        Collections.sort(list,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                if\
    \ (p1.getValue0().longValue() < p2.getValue0().longValue()) {\n              \
    \      return -1;\n                } else if (p1.getValue0().longValue() > p2.getValue0().longValue())\
    \ {\n                    return 1;\n                } else {\n               \
    \     if (p1.getValue1().longValue() > p2.getValue1().longValue()) {\n       \
    \                 return -1;\n                    } else if (p1.getValue1().longValue()\
    \ < p2.getValue1().longValue()) {\n                        return 1;\n       \
    \             } else {\n                        return 0;\n                  \
    \  }\n                }\n            }\n        });\n        return list;", " \
    \       ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> xs\
    \ = lst.get(i);\n            for (int j = 0; j < xs.size(); j++) {\n         \
    \       if (xs.get(j) == x) {\n                    res.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(res,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n\
    \            }\n        });\n        Collections.sort(res, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long>\
    \ b) {\n                if (a.getValue0().equals(b.getValue0())) {\n         \
    \           return b.getValue1().compareTo(a.getValue1());\n                }\n\
    \                return 0;\n            }\n        });\n        return res;",
  '        return new ArrayList<Pair<Long, Long>>(Arrays.asList());', "        ArrayList<Pair<Long,\
    \ Long>> listOfCoordinates = new ArrayList<Pair<Long, Long>>();\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size();\
    \ j++) {\n                if (lst.get(i).get(j) == x) {\n                    listOfCoordinates.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(listOfCoordinates,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if\
    \ (o1.getValue0().equals(o2.getValue0())) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n\
    \                }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return listOfCoordinates;", '        // your
    code here', "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            if (row.get(j) == x) {\n                    res.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        res.sort((a,\
    \ b) -> {\n            if (a.getValue0() < b.getValue0()) {\n                return\
    \ -1;\n            } else if (a.getValue0() > b.getValue0()) {\n             \
    \   return 1;\n            } else {\n                if (a.getValue1() > b.getValue1())\
    \ {\n                    return -1;\n                } else if (a.getValue1()\
    \ < b.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return res;", "        ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long,\
    \ Long>>();\n        ArrayList<ArrayList<Long>> rows = lst;\n        for (int\
    \ i = 0; i < rows.size(); i++) {\n            ArrayList<Long> row = rows.get(i);\n\
    \            for (int j = 0; j < row.size(); j++) {\n                long a =\
    \ row.get(j);\n                if (a == x) {\n                    pairs.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(pairs,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if\
    \ (o1.getValue0().equals(o2.getValue0())) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n\
    \                }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return pairs;", '        throw new java.lang.UnsupportedOperationException("Not
    implemented yet.");', "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    res.add(Pair.with((long)i, (long)j));\n       \
    \         }\n            }\n        }\n        res.sort((a, b) -> {\n        \
    \    if (a.getValue0() < b.getValue0()) {\n                return -1;\n      \
    \      } else if (a.getValue0() > b.getValue0()) {\n                return 1;\n\
    \            } else {\n                if (a.getValue1() > b.getValue1()) {\n\
    \                    return -1;\n                } else if (a.getValue1() < b.getValue1())\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    result.add(Pair.with((long)i, (long)j));\n    \
    \            }\n            }\n        }\n        Collections.sort(result, new\
    \ Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if\
    \ (o1.getValue0() < o2.getValue0()) {\n                    return -1;\n      \
    \          } else if (o1.getValue0() > o2.getValue0()) {\n                   \
    \ return 1;\n                } else {\n                    if (o1.getValue1()\
    \ > o2.getValue1()) {\n                        return -1;\n                  \
    \  } else if (o1.getValue1() < o2.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ result;", "        // Good Luck!\n        return null;", "        ArrayList<Pair<Long,\
    \ Long>> ans = new ArrayList<Pair<Long, Long>>();\n        long r = 0;\n     \
    \   for (ArrayList<Long> row : lst) {\n            long c = 0;\n            for\
    \ (Long col : row) {\n                if (col == x)\n                    ans.add(Pair.with(r,\
    \ c));\n                c++;\n            }\n            r++;\n        }\n   \
    \     // comparers to sort array list by row in ascending order first,\n     \
    \   // and then by column in descending order\n        Comparator<Pair<Long, Long>>\
    \ byRowAsc = Comparator.comparingLong(Pair::getValue0);\n        Comparator<Pair<Long,\
    \ Long>> byColDesc = Comparator.comparingLong(Pair::getValue1).reversed();\n \
    \       ans.sort(byRowAsc.thenComparing(byColDesc));\n        return ans;", '        return
    null;', "        if (lst.size() == 0) {\n            return new ArrayList<Pair<Long,\
    \ Long>>();\n        }\n        int i = 0;\n        for (ArrayList<Long> row :\
    \ lst) {\n            int j = 0;\n            for (Long val : row) {\n       \
    \         if (val == x) {\n                    ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<Pair<Long, Long>>();\n                    result.add(Pair.with(Long.valueOf(i),\
    \ Long.valueOf(j)));\n                    return result;\n                }\n\
    \                j++;\n            }\n            i++;\n        }\n        return\
    \ new ArrayList<Pair<Long, Long>>();", "        ArrayList<Pair<Long, Long>> temp\
    \ = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n        \
    \        if (lst.get(i).get(j) == x) {\n                    temp.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        return temp;",
  "        ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long, Long>>();\n\
    \        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n\
    \                if (row.get((int)j) == x) {\n                    pairs.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(pairs,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                if\
    \ (p1.getValue0() < p2.getValue0()) {\n                    return -1;\n      \
    \          } else if (p1.getValue0() > p2.getValue0()) {\n                   \
    \ return 1;\n                } else {\n                    if (p1.getValue1()\
    \ > p2.getValue1()) {\n                        return -1;\n                  \
    \  } else if (p1.getValue1() < p2.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ pairs;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        long row = 0;\n        for (ArrayList<Long> sublist : lst)\
    \ {\n            long col = 0;\n            for (Long cell : sublist) {\n    \
    \            if (cell == x) {\n                    res.add(Pair.with(row, col));\n\
    \                }\n                col += 1;\n            }\n            row\
    \ += 1;\n        }\n        Collections.sort(res, (a, b) -> a.getValue0().compareTo(b.getValue0()));\n\
    \        Collections.sort(res, (a, b) -> (a.getValue0() == b.getValue0()) ? (b.getValue1().compareTo(a.getValue1()))\
    \ : (a.getValue0().compareTo(b.getValue0())));\n        return res;", "      \
    \  ArrayList<Pair<Long, Long>> row = new ArrayList<Pair<Long, Long>>();\n    \
    \    long rowIndex = 0l;\n        for (ArrayList<Long> rowData : lst) {\n    \
    \        long colIndex = 0l;\n            for (Long col : rowData) {\n       \
    \         if (col == x) {\n                    row.add(Pair.with(rowIndex, colIndex));\n\
    \                }\n                colIndex += 1l;\n            }\n         \
    \   rowIndex += 1l;\n        }\n        Comparator<Pair<Long, Long>> comp = Comparator.comparing(tuple\
    \ -> tuple.getValue0());\n        Collections.sort(row, comp);\n        Collections.reverse(row);\n\
    \        return row;", "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long,\
    \ Long>>();\n        ArrayList<Pair<Long, Long>> ans1 = new ArrayList<Pair<Long,\
    \ Long>>();\n        ArrayList<Pair<Long, Long>> ans2 = new ArrayList<Pair<Long,\
    \ Long>>();\n        int l = lst.size();\n        for (int i = 0; i < l; i++)\
    \ {\n            ArrayList<Long> row = lst.get(i);\n            int rl = row.size();\n\
    \            for (int j = 0; j < rl; j++) {\n                if (row.get(j) ==\
    \ x) {\n                    ans.add(Pair.with((long)i, (long)j));\n          \
    \      }\n            }\n        }\n        ans.sort((p1, p2) -> p1.getValue0().compareTo(p2.getValue0()));\n\
    \        ArrayList<Pair<Long, Long>> temp = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < ans.size(); i++) {\n            if (ans.get(i).getValue0()\
    \ == 0l) {\n                temp.add(ans.get(i));\n            }\n        }\n\
    \        ans1.addAll(temp);\n        for (int i = 0; i < ans.size(); i++) {\n\
    \            if (ans.get(i).getValue0() != 0l) {\n                ans1.add(ans.get(i));\n\
    \            }\n        }\n        ans2.addAll(ans1);\n        int it = 0;\n \
    \       while (it < ans1.size()) {\n            temp.clear();\n            Long\
    \ row = ans1.get(it).getValue0();\n            for (int i = it; i < ans1.size();\
    \ i++) {\n                if (ans1.get(i).getValue0() == row) {\n            \
    \        temp.add(ans1.get(i));\n                }\n            }\n          \
    \  temp.sort((p1, p2) -> p2.getValue1().compareTo(p1.getValue1()));", "      \
    \  ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long, Long>>();\n    \
    \    if (lst.size() == 0) {\n            return ans;\n        }\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n\
    \            if (row.size() == 0) {\n                continue;\n            }\n\
    \            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j)\
    \ == x) {\n                    ans.add(Pair.with((long)i, (long)j));\n       \
    \         }\n            }\n        }\n        ans.sort((p1, p2) -> {\n      \
    \      if (p1.getValue0() > p2.getValue0()) {\n                return 1;\n   \
    \         }\n            if (p1.getValue0() < p2.getValue0()) {\n            \
    \    return -1;\n            }\n            if (p1.getValue1() > p2.getValue1())\
    \ {\n                return -1;\n            }\n            if (p1.getValue1()\
    \ < p2.getValue1()) {\n                return 1;\n            }\n            return\
    \ 0;\n        });\n        return ans;", "        ArrayList<Pair<Long, Long>>\
    \ row=new ArrayList<Pair<Long, Long>>();\n        for(long i=0l;i<lst.size();i++)\
    \ {\n            for(long j=0l;j<lst.get((int)i).size();j++) {\n             \
    \   if(lst.get((int)i).get((int)j)==x) {\n                    row.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        return row;", " \
    \       ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    pairs.add(Pair.with((long)i, (long)j));\n               \
    \ }\n            }\n        }\n        Comparator<Pair<Long, Long>> comp1 = new\
    \ Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0()\
    \ - p2.getValue0());\n            }\n        };\n        Comparator<Pair<Long,\
    \ Long>> comp2 = new Comparator<Pair<Long, Long>>() {\n            public int\
    \ compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return\
    \ (int)(p2.getValue1() - p1.getValue1());\n            }\n        };\n       \
    \ pairs.sort(comp1.thenComparing(comp2));\n        return pairs;", "        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        for (long i = 0; i\
    \ < lst.size(); i++) {\n            for (long j = 0; j < lst.get((int)i).size();\
    \ j++) {\n                if (lst.get((int)i).get((int)j) == x) {\n          \
    \          ret.add(Pair.with(i, j));\n                }\n            }\n     \
    \   }\n        ret.sort((Pair<Long, Long> a, Pair<Long, Long> b) -> {\n      \
    \      if (a.getValue0() < b.getValue0()) {\n                return -1;\n    \
    \        } else if (a.getValue0() > b.getValue0()) {\n                return 1;\n\
    \            } else {\n                if (a.getValue1() > b.getValue1()) {\n\
    \                    return -1;\n                } else if (a.getValue1() < b.getValue1())\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        return\
    \ ret;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        int r = 0;\n        for (ArrayList<Long> i : lst) {\n   \
    \         int c = i.size() - 1;\n            for (long j : i) {\n            \
    \    if (j == x) {\n                    result.add(Pair.with(r, c));\n       \
    \         }\n                c--;\n            }\n            r++;\n        }\n\
    \        // sort result by rows, then by columns\n        result.sort((a, b) ->\
    \ {\n            if (a.getValue0() < b.getValue0()) {\n                return\
    \ -1;\n            } else if (a.getValue0() > b.getValue0()) {\n             \
    \   return 1;\n            } else {\n                if (a.getValue1() < b.getValue1())\
    \ {\n                    return 1;\n                } else if (a.getValue1() >\
    \ b.getValue1()) {\n                    return -1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return result;", "    }\n}", "        var ret = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x)\n                    ret.add(Pair.with((long)i, (long)j));\n         \
    \   }\n        }\n        Collections.sort(ret, (e1, e2) -> {\n            int\
    \ cmp = Long.compare(e1.getValue0(), e2.getValue0());\n            if (cmp !=\
    \ 0) return cmp;\n            else return Long.compare(e2.getValue1(), e1.getValue1());\n\
    \        });\n        return ret;", '        return null;', "        if (lst.size()\
    \ == 0) return new ArrayList<Pair<Long, Long>>();\n        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n        \
    \    for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) ==\
    \ x) ret.add(Pair.with((long)i, (long)j));\n            }\n        }\n       \
    \ Collections.sort(ret, (a, b) -> {\n            long aa = a.getValue0(), ab =\
    \ a.getValue1(), ba = b.getValue0(), bb = b.getValue1();\n            if (aa !=\
    \ ba) return aa < ba ? -1 : 1;\n            return ab > bb ? -1 : 1;\n       \
    \ });\n        return ret;", "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long,\
    \ Long>>();\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        long i = 0;\n        for (ArrayList<Long> row : lst)\
    \ {\n            long j = 0;\n            for (Long number : row) {\n        \
    \        if (number == x) {\n                    ans.add(Pair.with(i, j));\n \
    \               }\n                j++;\n            }\n            i++;\n   \
    \     }\n        ans.sort((a, b) -> {\n            if (a.getValue0().equals(b.getValue0()))\
    \ {\n                return -a.getValue1().compareTo(b.getValue1());\n       \
    \     }\n            return a.getValue0().compareTo(b.getValue0());\n        });\n\
    \        return ans;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        int rows = lst.size();\n        for (int i = 0; i < rows;\
    \ i++) {\n            ArrayList<Long> col = lst.get(i);\n            int cols\
    \ = col.size();\n            for (int j = 0; j < cols; j++) {\n              \
    \  long val = col.get(j);\n                if (val == x) {\n                 \
    \   res.add(Pair.with((long)i, (long)j));\n                }\n            }\n\
    \        }\n        Collections.sort(res, (p1, p2) -> {\n            if (p1.getValue0()\
    \ > p2.getValue0()) {\n                return 1;\n            } else if (p1.getValue0()\
    \ < p2.getValue0()) {\n                return -1;\n            } else {\n    \
    \            if (p1.getValue1() > p2.getValue1()) {\n                    return\
    \ -1;\n                } else if (p1.getValue1() < p2.getValue1()) {\n       \
    \             return 1;\n                } else {\n                    return\
    \ 0;\n                }\n            }\n        });\n        return res;", " \
    \       int row = 0;\n        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (ArrayList<Long> xs : lst) {\n            long col =\
    \ 0;\n            for (long y : xs) {\n                if (y == x) {\n       \
    \             res.add(Pair.with(row, col));\n                }\n             \
    \   col++;\n            }\n            row++;\n        }\n        Comparator<Pair<Long,\
    \ Long>> cmp = (a, b) -> {\n            if (a.getValue0().compareTo(b.getValue0())\
    \ == 0) {\n                return b.getValue1().compareTo(a.getValue1());\n  \
    \          }\n            return a.getValue0().compareTo(b.getValue0());\n   \
    \     };\n        Collections.sort(res, cmp);\n        return res;", "       \
    \ ArrayList<Pair<Long, Long>> list1 = new ArrayList<Pair<Long, Long>>();\n   \
    \     for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> list2\
    \ = lst.get(i);\n            for (int j = 0; j < list2.size(); j++) {\n      \
    \          long n = list2.get(j);\n                if (n == x) {\n           \
    \         list1.add(Pair.with((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        Collections.sort(list1, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if (o1.getValue0().compareTo(o2.getValue0())\
    \ == 0) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n\
    \                }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return list1;", "        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        // Keep this function\
    \ call here\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n    \
    \            long item = row.get(j);\n                if (item == x) {\n     \
    \               ret.add(Pair.with((long)i, (long)j));\n                }\n   \
    \         }\n        }\n        Collections.sort(ret, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                if (p1.getValue0().longValue()\
    \ < p2.getValue0().longValue()) {\n                    return -1;\n          \
    \      } else if (p1.getValue0().longValue() > p2.getValue0().longValue()) {\n\
    \                    return 1;\n                } else {\n                   \
    \ if (p1.getValue1().longValue() > p2.getValue1().longValue()) {\n           \
    \             return -1;\n                    } else if (p1.getValue1().longValue()\
    \ < p2.getValue1().longValue()) {\n                        return 1;\n       \
    \             } else {\n                        return 0;\n                  \
    \  }\n                }\n            }\n        });\n        return ret;", " \
    \       class Helper {\n            public void get(ArrayList<ArrayList<Long>>\
    \ lst, long x, int index, ArrayList<Pair<Long, Long>> result) {\n            \
    \    if (index == lst.size()) {\n                    return;\n               \
    \ }\n                ArrayList<Long> row = lst.get(index);\n                for\
    \ (int i = 0; i < row.size(); i++) {\n                    if (row.get(i) == x)\
    \ {\n                        result.add(Pair.with((long)index, (long)i));\n  \
    \                  }\n                }\n                get(lst, x, index + 1,\
    \ result);\n            }\n        }\n        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<Pair<Long, Long>>();\n        new Helper().get(lst, x, 0, result);\n\
    \        Collections.sort(result, new Comparator<Pair<Long, Long>>() {\n     \
    \       public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n       \
    \         if (a.getValue0() < b.getValue0()) {\n                    return -1;\n\
    \                }\n                if (a.getValue0() > b.getValue0()) {\n   \
    \                 return 1;\n                }\n                if (a.getValue1()\
    \ > b.getValue1()) {\n                    return -1;\n                }\n    \
    \            if (a.getValue1() < b.getValue1()) {\n                    return\
    \ 1;\n                }\n                return 0;\n            }\n        });\n\
    \        return result;", "        long index = 0;\n        return getRow(lst,\
    \ x, index);", "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0l; i < (long)lst.size(); i++) {\n        \
    \    for (long j = 0l; j < (long)lst.get((int)i).size(); j++) {\n            \
    \    if (lst.get((int)i).get((int)j) == x) {\n                    ans.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(ans,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> a, Pair<Long, Long> b) {\n                if (a.getValue0() == b.getValue0())\
    \ {\n                    return b.getValue1().compareTo(a.getValue1());\n    \
    \            }\n                return a.getValue0().compareTo(b.getValue0());\n\
    \            }\n        });\n        return ans;", "        // Write your code\
    \ here\n        return null;", '        return null;', "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.sort((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> {\n            if (a.getValue0().equals(b.getValue0()))\
    \ {\n                return b.getValue1().compareTo(a.getValue1());\n        \
    \    }\n            return a.getValue0().compareTo(b.getValue0());\n        });\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long,\
    \ Long>>();\n        long row = 0l;\n        for (long i = 0l; i < lst.size();\
    \ i++) {\n            row = i;\n            for (long j = 0l; j < lst.get((int)i).size();\
    \ j++) {\n                if (lst.get((int)i).get((int)j) == x) {\n          \
    \          ans.add(Pair.with(row, j));\n                }\n            }\n   \
    \     }\n        java.util.Comparator<Pair<Long, Long>> cmp = (Pair<Long, Long>\
    \ a, Pair<Long, Long> b) -> {\n            long v = (long)a.getValue0().compareTo(b.getValue0());\n\
    \            if (v == 0l) {\n                v = (long)(0l - a.getValue1().compareTo(b.getValue1()));\n\
    \            }\n            return (int)v;\n        };\n        ans.sort(cmp);\n\
    \        return ans;", "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    ans.add(Pair.with((long)i, (long)j));\n       \
    \         }\n            }\n        }\n        Collections.sort(ans, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if (o1.getValue0() == o2.getValue0())\
    \ {\n                    return o2.getValue1().compareTo(o1.getValue1());\n  \
    \              }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return ans;", "        // Write your code\
    \ here\n        // To print results to the standard output you can use System.out.println()\n\
    \        // Example: System.out.println(\"Hello world!\");\n        if (lst.size()==0)\
    \ return new ArrayList<Pair<Long, Long>>();\n        ArrayList<Pair<Long, Long>>\
    \ res = new ArrayList<Pair<Long, Long>>();\n        for (int i=0; i<lst.size();\
    \ i++) {\n            ArrayList<Long> row = lst.get(i);\n            for (int\
    \ j=0; j<row.size(); j++) {\n                if (row.get(j)==x) {\n          \
    \          res.add(Pair.with((long)i, (long)j));\n                }\n        \
    \    }\n        }\n        Collections.sort(res, new Comparator<Pair<Long, Long>>()\
    \ {\n            @Override\n            public int compare(Pair<Long, Long> p1,\
    \ Pair<Long, Long> p2) {\n                if (p1.getValue0() > p2.getValue0())\
    \ {\n                    return 1;\n                } else if (p1.getValue0()\
    \ < p2.getValue0()) {\n                    return -1;\n                } else\
    \ {\n                    if (p1.getValue1() > p2.getValue1()) {\n            \
    \            return -1;\n                    } else if (p1.getValue1() < p2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return res;", "        ArrayList<Pair<Long, Long>>\
    \ result = new ArrayList<Pair<Long, Long>>();\n        for (long i = 0; i < lst.size();\
    \ i++) {\n            ArrayList<Long> r = lst.get((int)i);\n            for (long\
    \ j = 0; j < r.size(); j++) {\n                long v = r.get((int)j);\n     \
    \           if (v == x) {\n                    result.add(Pair.with(i, j));\n\
    \                }\n            }\n        }\n        result.sort((Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) -> {\n            long p1r = p1.getValue0();\n\
    \            long p2r = p2.getValue0();\n            if (p1r == p2r) {\n     \
    \           long p1c = p1.getValue1();\n                long p2c = p2.getValue1();\n\
    \                return -1 * Long.compare(p1c, p2c);\n            }\n        \
    \    return Long.compare(p1r, p2r);\n        });\n        return result;", " \
    \       var l = new ArrayList<Pair<Long, Long>>();\n        // your code here\n\
    \        return l;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ rows = lst.get(i);\n            for (int j = 0; j < rows.size(); j++) {\n  \
    \              if (rows.get(j) == x) {\n                    res.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        res.sort((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> {\n            if (a.getValue0() < b.getValue0())\
    \ {\n                return -1;\n            } else if (a.getValue0() > b.getValue0())\
    \ {\n                return 1;\n            } else {\n                if (a.getValue1()\
    \ > b.getValue1()) {\n                    return -1;\n                } else if\
    \ (a.getValue1() < b.getValue1()) {\n                    return 1;\n         \
    \       } else {\n                    return 0;\n                }\n         \
    \   }\n        });\n        return res;", "        // Find x in the array list,\
    \ and return array list of pairs,\n        // [(x1, y1), (x2, y2) ...] such that\
    \ each pair is a coordinate -\n        // (row, columns), starting with 0.\n \
    \       // Sort coordinates initially by rows in ascending order.\n        //\
    \ Also, sort coordinates of the row by columns in descending order.\n        //\
    \ Implement function here.\n        return null;", "        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    ret.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        Collections.sort(ret,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                int cmp\
    \ = Long.compare(a.getValue0(), b.getValue0());\n                if (cmp == 0)\
    \ {\n                    return Long.compare(b.getValue1(), a.getValue1());\n\
    \                }\n                return cmp;\n            }\n        });\n\
    \        return ret;", "        ArrayList<Pair<Long, Long>> out0 = new ArrayList<Pair<Long,\
    \ Long>>();\n        long i = 0;\n        while ((i < lst.size())) {\n       \
    \     long j = 0;\n            while ((j < lst.get((int)i).size())) {\n      \
    \          if ((lst.get((int)i).get((int)j) == x)) {\n                    out0.add(Pair.with(i,\
    \ j));\n                }\n                j = (j + 1);\n            }\n     \
    \       i = (i + 1);\n        }\n        Collections.sort(out0, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long>\
    \ b) {\n                int a1 = a.getValue0().compareTo(b.getValue0());\n   \
    \             if ((a1 != 0)) {\n                    return a1;\n             \
    \   }\n                int a2 = a.getValue1().compareTo(b.getValue1());\n    \
    \            if ((a2 != 0)) {\n                    return a2;\n              \
    \  }\n                return 0;\n            }\n        });\n        return out0;",
  "        ArrayList<Pair<Long, Long>> tmp = new ArrayList<Pair<Long, Long>>();\n\
    \        Long i = 0l;\n        while (i < lst.size()) {\n            Long j =\
    \ 0l;\n            while (j < lst.get((int)(long)i).size()) {\n              \
    \  if (lst.get((int)(long)i).get((int)(long)j) == x) {\n                    tmp.add(Pair.with(i,\
    \ j));\n                }\n                j = j + 1l;\n            }\n      \
    \      i = i + 1l;\n        }\n        final long x1 = x;\n        tmp.sort(((Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) -> {\n            Long i1 = p1.getValue0();\n\
    \            Long i2 = p2.getValue0();\n            if (i1.equals(i2)) {\n   \
    \             return p2.getValue1().compareTo(p1.getValue1());\n            }\
    \ else {\n                return i1.compareTo(i2);\n            }\n        }));\n\
    \        return tmp;", "        ArrayList<Pair<Long, Long>>  result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    result.add(Pair.with((long)i, (long)j));\n    \
    \            }\n            }\n        }\n        result.sort((a, b) -> {\n  \
    \          if (a.getValue0() > b.getValue0()) {\n                return 1;\n \
    \           } else if (a.getValue0() < b.getValue0()) {\n                return\
    \ -1;\n            } else {\n                if (a.getValue1() > b.getValue1())\
    \ {\n                    return -1;\n                } else if (a.getValue1()\
    \ < b.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    result.add(Pair.with((long)i, (long)j));\n    \
    \            }\n            }\n        }\n        Collections.sort(result, (a,\
    \ b) -> {\n            if (a.getValue0() < b.getValue0()) {\n                return\
    \ -1;\n            } else if (a.getValue0() > b.getValue0()) {\n             \
    \   return 1;\n            } else {\n                if (a.getValue1() > b.getValue1())\
    \ {\n                    return -1;\n                } else if (a.getValue1()\
    \ < b.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> answer = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0; i < lst.size(); i++) {\n            for\
    \ (long j = 0; j < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    answer.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        return answer;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (long i = 0;\
    \ i < lst.size(); i++) {\n            ArrayList<Long> arr = lst.get((int)i);\n\
    \            for (long j = 0; j < arr.size(); j++) {\n                if (arr.get((int)j)\
    \ == x) {\n                    result.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        Collections.sort(result, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> pair1, Pair<Long, Long> pair2) {\n                if (pair1.getValue0()\
    \ > pair2.getValue0()) {\n                    return 1;\n                } else\
    \ if (pair1.getValue0() < pair2.getValue0()) {\n                    return -1;\n\
    \                } else {\n                    if (pair1.getValue1() > pair2.getValue1())\
    \ {\n                        return -1;\n                    } else if (pair1.getValue1()\
    \ < pair2.getValue1()) {\n                        return 1;\n                \
    \    } else {\n                        return 0;\n                    }\n    \
    \            }\n            }\n        });\n        return result;", "       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n  \
    \      ArrayList<ArrayList<Long>> alist = new ArrayList<ArrayList<Long>>();\n\
    \        Long row = (long)0;\n        Long col = (long)0;\n        for (ArrayList<Long>\
    \ i : lst) {\n            row = (long)0;\n            col = (long)0;\n       \
    \     for (Long j : i) {\n                if (j == x) {\n                    result.add(Pair.with(row,\
    \ col));\n                }\n                col++;\n            }\n         \
    \   row++;\n        }\n        ArrayList<Pair<Long, Long>> result1 = new ArrayList<Pair<Long,\
    \ Long>>();\n        ArrayList<Pair<Long, Long>> result2 = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (Pair<Long, Long> l : result) {\n            if (l.getValue0()\
    \ == (long)0) {\n                result1.add(l);\n            } else {\n     \
    \           result2.add(l);\n            }\n        }\n        Collections.sort(result1,\
    \ (i, j) -> j.getValue1().compareTo(i.getValue1()));\n        Collections.sort(result2,\
    \ (i, j) -> i.getValue1().compareTo(j.getValue1()));\n        result1.addAll(result2);\n\
    \        return result1;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        if (lst.size() == 0) {\n            return res;\n       \
    \ }\n        int i = 0;\n        for (ArrayList<Long> r : lst) {\n           \
    \ int j = 0;\n            for (Long y : r) {\n                if (y == x) {\n\
    \                    res.add(Pair.with(i, j));\n                }\n          \
    \      j++;\n            }\n            i++;\n        }\n        res.sort((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> {\n            if (a.getValue0() < b.getValue0())\
    \ {\n                return -1;\n            }\n            if (a.getValue0()\
    \ > b.getValue0()) {\n                return 1;\n            }\n            if\
    \ (a.getValue1() > b.getValue1()) {\n                return -1;\n            }\n\
    \            if (a.getValue1() < b.getValue1()) {\n                return 1;\n\
    \            }\n            return 0;\n        });\n        return res;", "  \
    \      // you write code here\n        return null;", "        return new ArrayList<Pair<Long,\
    \ Long>>(\n            IntStream.range(0, lst.size())\n            .boxed()\n\
    \            .flatMap(i ->\n                IntStream.range(0, lst.get(i).size())\n\
    \                .filter(j -> lst.get(i).get(j) == x)\n                .mapToObj(j\
    \ -> Pair.with(i * 1l, j * 1l))\n            )\n            .sorted((a, b) ->\
    \ {\n                if (a.getValue0() > b.getValue0()) {\n                  \
    \  return 1;\n                } else if (a.getValue0() < b.getValue0()) {\n  \
    \                  return -1;\n                } else {\n                    if\
    \ (a.getValue1() > b.getValue1()) {\n                        return -1;\n    \
    \                } else if (a.getValue1() < b.getValue1()) {\n               \
    \         return 1;\n                    } else {\n                        return\
    \ 0;\n                    }\n                }\n            })\n            .collect(Collectors.toList())\n\
    \        );", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        long row = 0l;\n        long column = 0l;\n        long rowCount\
    \ = 0l;\n        long columnCount = 0l;\n        boolean hasValue = false;\n \
    \       for (ArrayList<Long> rowList : lst) {\n            rowCount += 1l;\n \
    \           columnCount = 0l;\n            for (Long value : rowList) {\n    \
    \            columnCount += 1l;\n                if (value == x) {\n         \
    \           result.add(Pair.with(row, column));\n                    hasValue\
    \ = true;\n                }\n                column += 1l;\n            }\n \
    \           row += 1l;\n        }\n        if (hasValue) {\n            Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n                public int compare(Pair<Long,\
    \ Long> left, Pair<Long, Long> right) {\n                    if (left.getValue0().equals(right.getValue0()))\
    \ {\n                        return right.getValue1().compareTo(left.getValue1());\n\
    \                    } else {\n                        return left.getValue0().compareTo(right.getValue0());\n\
    \                    }\n                }\n            });\n        }\n      \
    \  return result;", "        List<List<Long>> ia = new ArrayList<List<Long>>();\n\
    \        for (ArrayList<Long> a : lst) {\n            ia.add(new ArrayList<Long>(a));\n\
    \        }\n        ArrayList<Pair<Long, Long>> ret = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < ia.size(); i++) {\n            for (int\
    \ j = 0; j < ia.get(i).size(); j++) {\n                if (ia.get(i).get(j) ==\
    \ x) {\n                    ret.add(Pair.with((long)i, (long)j));\n          \
    \      }\n            }\n        }\n        ret.sort((l, r) -> {\n           \
    \ if (l.getValue0() < r.getValue0()) {\n                return -1;\n         \
    \   } else if (l.getValue0() > r.getValue0()) {\n                return 1;\n \
    \           } else {\n                if (l.getValue1() > r.getValue1()) {\n \
    \                   return -1;\n                } else if (l.getValue1() < r.getValue1())\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        return\
    \ ret;", '        throw new UnsupportedOperationException("Waiting to be implemented.");',
  '        return null;', "        //start\n    // Implement your solution here",
  "        ArrayList<Pair<Long, Long>> ret = new ArrayList<Pair<Long, Long>>();\n\
    \        ArrayList<ArrayList<Long>> res =\n                (ArrayList<ArrayList<Long>>)\n\
    \                        Arrays.stream(new ArrayList[] { lst })\n            \
    \                    .flatMap(\n                                        (arr)\
    \ ->\n                                                Arrays.stream(arr.toArray())\n\
    \                                                        .flatMap(\n         \
    \                                                       (arrInner) ->\n      \
    \                                                                  Arrays.stream(\n\
    \                                                                            \
    \    ((ArrayList) arrInner)\n                                                \
    \                                        .toArray())))\n                     \
    \           .filter((val) -> (val.equals(x)))\n                              \
    \  .toArray();\n        for (int i = 0; i < res.size(); i++) {\n            Pair<Long,\
    \ Long> pair = Pair.with(new Long(i), new Long(res.get(i).get(0)));\n        \
    \    ret.add(pair);\n        }\n        return ret;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        // your code goes\
    \ here\n        long i = 0l;\n        long j = 0l;\n        long found = 0l;\n\
    \        for (ArrayList<Long> x1 : lst) {\n            i = i + 1l;\n         \
    \   j = 0l;\n            for (Long x2 : x1) {\n                j = j + 1l;\n \
    \               if (x2 == x) {\n                    result.add(Pair.with(i - 1l,\
    \ j - 1l));\n                    found = found + 1l;\n                }\n    \
    \        }\n        }\n        ArrayList<Pair<Long, Long>> result1 = new ArrayList<Pair<Long,\
    \ Long>>();\n        long i1 = 0l;\n        while (i1 < found) {\n           \
    \ long min = (long)Math.pow(2l, 32l);\n            long min_pos = 0l;\n      \
    \      long i2 = 0l;\n            while (i2 < found) {\n                if (result.get((int)(i2)).getValue0()\
    \ < min) {\n                    min = result.get((int)(i2)).getValue0();\n   \
    \                 min_pos = i2;\n                }\n                i2 = i2 +\
    \ 1l;\n            }\n            result1.add(result.get((int)(min_pos)));\n \
    \           result.set((int)(min_pos), Pair.with(Math.pow(2l, 32l), 0l));\n  \
    \          i1 = i1 + 1l;\n        }\n        ArrayList<Pair<Long, Long>> result2\
    \ = new ArrayList<Pair<Long, Long>>();\n        long i3 = 0l;\n        while (i3\
    \ < found) {\n            long min = (long)Math.pow(2l, 32l);\n            long\
    \ min_pos = 0l;\n            long i4 = 0l;\n            while (i4 < found) {\n\
    \                if (result1.get((int)(i4)).getValue1() < min) {\n           \
    \         min = result1.get((int)(i4)).getValue1", "        // This is a placeholder.\n\
    \        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        return result;", "        return new ArrayList<Pair<Long, Long>>(IntStream.range(0,\
    \ lst.size()).mapToObj(i -> {\n            final long a = i;\n            ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>(IntStream.range(0, lst.get((int)a).size()).filter(j\
    \ -> lst.get((int)a).get((int)j) == x).mapToObj(j -> Pair.with(a, j)).collect(Collectors.toList()));\n\
    \            Collections.sort(result, (a$1, b$1) -> {\n                return\
    \ Long.compare(b$1.getValue1(), a$1.getValue1());\n            });\n         \
    \   return result;\n        }).flatMap(y -> y.stream()).collect(Collectors.toList()));",
  "        if(lst == null)\n            return null;\n        if(lst.size() == 0)\n\
    \            return new ArrayList<Pair<Long, Long>>();\n        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        for(int i = 0; i <\
    \ lst.size(); i++) {\n            ArrayList<Long> sub = lst.get(i);\n        \
    \    if(sub == null)\n                continue;\n            for(int j = 0; j\
    \ < sub.size(); j++) {\n                long elem = sub.get(j);\n            \
    \    if(elem == x)\n                    ret.add(Pair.with((long)i, (long)j));\n\
    \            }\n        }\n        Collections.sort(ret, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> pair1, Pair<Long,\
    \ Long> pair2) {\n                if(pair1.getValue0() > pair2.getValue0())\n\
    \                    return 1;\n                if(pair1.getValue0() < pair2.getValue0())\n\
    \                    return -1;\n                return 0;\n            }\n  \
    \      });\n        Collections.sort(ret, new Comparator<Pair<Long, Long>>() {\n\
    \            public int compare(Pair<Long, Long> pair1, Pair<Long, Long> pair2)\
    \ {\n                if(pair1.getValue0() == pair2.getValue0()) {\n          \
    \          if(pair1.getValue1() > pair2.getValue1())\n                       \
    \ return -1;\n                    if(pair1.getValue1() < pair2.getValue1())\n\
    \                        return 1;\n                    return 0;\n          \
    \      }\n                return 0;\n            }\n        });\n        return\
    \ ret;", "        ArrayList<Pair<Long, Long>> out = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row\
    \ = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n        \
    \        if (row.get(j) == x) {\n                    out.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        out.sort((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> a.getValue0().compareTo(b.getValue0()));\n \
    \       out.sort((Pair<Long, Long> a, Pair<Long, Long> b) -> b.getValue1().compareTo(a.getValue1()));\n\
    \        return out;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    result.add(Pair.with((long)i, (long)j));\n    \
    \            }\n            }\n        }\n        result.sort((p1, p2) -> (int)(p1.getValue0()\
    \ - p2.getValue0()));\n        result.sort((p1, p2) -> (int)(p2.getValue1() -\
    \ p1.getValue1()));\n        return result;", "        // Your code goes here...\n\
    \        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long, Long>>();\n\
    \        // (1l, 0l) ... (1l, 4l)\n        // (2l, 0l) ... (2l, 5l)\n        //\
    \ (3l, 0l) ... (3l, 4l)\n        long i = 0;\n        for (ArrayList<Long> row\
    \ : lst) {\n            long j = 0;\n            for (Long val : row) {\n    \
    \            if (val == x) {\n                    ans.add(Pair.with(i, j));\n\
    \                }\n                j++;\n            }\n            i++;\n  \
    \      }\n        ans.sort((Pair<Long, Long> a, Pair<Long, Long> b) -> a.getValue0().compareTo(b.getValue0()));\n\
    \        return ans;", "        ArrayList<Pair<Long, Long>> answer = new ArrayList<Pair<Long,\
    \ Long>>();\n        ArrayList<Pair<Long, Long>> answer2 = new ArrayList<Pair<Long,\
    \ Long>>();\n        if(lst.size() == 0) {\n            return answer;\n     \
    \   }\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i).size()\
    \ == 0) {\n                continue;\n            }\n            for(int j = 0;\
    \ j < lst.get(i).size(); j++) {\n                if(lst.get(i).get(j) == x) {\n\
    \                    answer.add(Pair.with((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        answer.sort((p1, p2) -> {\n          \
    \  if(p1.getValue0() == p2.getValue0()) {\n                return Long.compare(p2.getValue1(),\
    \ p1.getValue1());\n            }\n            return Long.compare(p1.getValue0(),\
    \ p2.getValue0());\n        });\n        for(int i = 0; i < answer.size(); i++)\
    \ {\n            answer2.add(Pair.with(answer.get(i).getValue0(), answer.get(i).getValue1()));\n\
    \        }\n        return answer2;", "        // Your code here...\n        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        long row = 0;\n   \
    \     for (ArrayList<Long> subLst : lst) {\n            long col = 0;\n      \
    \      for (Long y : subLst) {\n                if (y == x) {\n              \
    \      ret.add(Pair.with(row, col));\n                }\n                col++;\n\
    \            }\n            row++;\n        }\n        Collections.sort(ret, new\
    \ Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if\
    \ (o1.getValue0() == o2.getValue0()) {\n                    return o2.getValue1().compareTo(o1.getValue1());\n\
    \                }\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        return ret;", "        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        for (long i = 0; i\
    \ < lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n \
    \           for (long j = 0; j < row.size(); j++) {\n                if (row.get((int)j)\
    \ == x) {\n                    ret.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        ret.sort((Pair<Long, Long> a, Pair<Long, Long>\
    \ b) -> {\n            if (a.getValue0() == b.getValue0()) {\n               \
    \ return Long.compare(b.getValue1(), a.getValue1());\n            }\n        \
    \    return Long.compare(a.getValue0(), b.getValue0());\n        });\n       \
    \ return ret;", "        ArrayList<Pair<Long, Long>> results = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    results.add(Pair.with((long)i, (long)j));\n   \
    \             }\n            }\n        }\n        Collections.sort(results, new\
    \ MyComparator());\n        return results;", "        // Version 1:\n       \
    \ ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n  \
    \      for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row\
    \ = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n        \
    \        long element = row.get(j);\n                if (element == x) {\n   \
    \                 result.add(Pair.with(i, j));\n                }\n          \
    \  }\n        }\n        Collections.sort(result, new Comparator<Pair<Long, Long>>()\
    \ {\n            @Override\n            public int compare(Pair<Long, Long> p1,\
    \ Pair<Long, Long> p2) {\n                if (p1.getValue0() == p2.getValue0())\
    \ {\n                    return p2.getValue1().compareTo(p1.getValue1());\n  \
    \              }\n                return p1.getValue0().compareTo(p2.getValue0());\n\
    \            }\n        });\n        return result;", "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (long i = 0l;\
    \ i < (long)lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n\
    \            for (long j = 0l; j < (long)row.size(); j++) {\n                long\
    \ value = row.get((int)j);\n                if (value == x) {\n              \
    \      result.add(Pair.with(i, j));\n                }\n            }\n      \
    \  }\n        Collections.sort(result, (Pair<Long, Long> a, Pair<Long, Long> b)\
    \ -> {\n            if (a.getValue0().equals(b.getValue0())) {\n             \
    \   return b.getValue1().compareTo(a.getValue1());\n            }\n          \
    \  return a.getValue0().compareTo(b.getValue0());\n        });\n        return\
    \ result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        long y = 0;\n        long w = 0;\n        while (y < lst.size())\
    \ {\n            w = 0;\n            while (w < lst.get((int)y).size()) {\n  \
    \              if (lst.get((int)y).get((int)w) == x) {\n                    result.add(Pair.with(y,\
    \ w));\n                }\n                w = w + 1;\n            }\n       \
    \     y = y + 1;\n        }\n        result.sort((a, b) -> {\n            int\
    \ compare = a.getValue0().compareTo(b.getValue0());\n            if (compare ==\
    \ 0) {\n                return b.getValue1().compareTo(a.getValue1());\n     \
    \       }\n            return compare;\n        });\n        return result;",
  "        // your code here\n        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    res.add(Pair.with((long)i, (long)j));\n       \
    \         }\n            }\n        }\n        Collections.sort(res, (a, b) ->\
    \ {\n            if (a.getValue0() == b.getValue0()) {\n                return\
    \ -(int)(a.getValue1() - b.getValue1());\n            }\n            return (int)(a.getValue0()\
    \ - b.getValue0());\n        });\n        return res;", "        // \n       \
    \ // >>> 3+7\n        // 10\n        // >>> 2+3\n        // 5\n        return\
    \ Problem.getRow(lst, x);", "        ArrayList<Pair<Long, Long>> rows = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0; i < lst.size(); i++) {\n            for\
    \ (long j = 0; j < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    rows.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        Collections.sort(rows, new Comparator<Pair<Long,\
    \ Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long>\
    \ p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n  \
    \          }\n        });\n        ArrayList<Pair<Long, Long>> sortedRows = new\
    \ ArrayList<Pair<Long, Long>>();\n        long prev = 0;\n        for (long i\
    \ = 0; i < rows.size(); i++) {\n            if (i == 0) {\n                prev\
    \ = rows.get((int)i).getValue0();\n                sortedRows.add(rows.get((int)i));\n\
    \            } else {\n                if (rows.get((int)i).getValue0() == prev)\
    \ {\n                    sortedRows.add(rows.get((int)i));\n                }\
    \ else {\n                    Collections.sort(sortedRows, new Comparator<Pair<Long,\
    \ Long>>() {\n                        public int compare(Pair<Long, Long> p1,\
    \ Pair<Long, Long> p2) {\n                            return p2.getValue1().compareTo(p1.getValue1());\n\
    \                        }\n                    });\n                    prev\
    \ = rows.get((int)i).getValue0();\n                    sortedRows.add(rows.get((int)i));\n\
    \                }\n            }\n        }\n        Collections.sort(sortedRows,\
    \ new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long,\
    \ Long> p1, Pair<Long, Long> p2) {\n                return p2.getValue1().compare",
  "        ArrayList<Pair<Long, Long>> ret = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    ret.add(Pair.with((long)i, (long)j));\n                }\n\
    \            }\n        }\n        return ret;", "        final ArrayList<Pair<Long,\
    \ Long>> output = new ArrayList<Pair<Long, Long>>();\n        final long[] pair\
    \ = new long[2];\n        for (int i = 0; i < lst.size(); i++) {\n           \
    \ for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    pair[0] = i;\n                    pair[1] = j;\n\
    \                    output.add(Pair.with(pair[0], pair[1]));\n              \
    \  }\n            }\n        }\n        Collections.sort(output, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return Long.compare(o1.getValue0(),\
    \ o2.getValue0());\n            }\n        });\n        Collections.sort(output,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return\
    \ Long.compare(o2.getValue1(), o1.getValue1());\n            }\n        });\n\
    \        return output;", "        int rows = lst.size();\n        int columns\
    \ = 0;\n        for (ArrayList<Long> row : lst) {\n            columns = Math.max(columns,\
    \ row.size());\n        }\n        ArrayList<Pair<Long, Long>> coordinates = new\
    \ ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < rows; i++) {\n \
    \           ArrayList<Long> row = lst.get(i);\n            for (int j = 0; j <\
    \ row.size(); j++) {\n                if (row.get(j) == x) {\n               \
    \     coordinates.add(Pair.with((long)i, (long)j));\n                }\n     \
    \       }\n        }\n        coordinates.sort((Pair<Long, Long> a, Pair<Long,\
    \ Long> b) -> {\n            if (a.getValue0() == b.getValue0()) {\n         \
    \       return (int)(b.getValue1() - a.getValue1());\n            }\n        \
    \    return (int)(a.getValue0() - b.getValue0());\n        });\n        return\
    \ coordinates;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        ArrayList<Pair<Long, Long>> sorted_res = new ArrayList<Pair<Long,\
    \ Long>>();\n        long row = 0;\n        for (ArrayList<Long> l : lst) {\n\
    \            long col = 0;\n            for (Long ll : l) {\n                if\
    \ (ll == x) {\n                    res.add(Pair.with(row, col));\n           \
    \     }\n                col++;\n            }\n            row++;\n        }\n\
    \        Collections.sort(res, new Comparator<Pair<Long, Long>>() {\n        \
    \    @Override\n            public int compare(Pair<Long, Long> a, Pair<Long,\
    \ Long> b) {\n                return Long.compare(a.getValue0(), b.getValue0());\n\
    \            }\n        });\n        long last_row = 0;\n        ArrayList<Pair<Long,\
    \ Long>> row_res = new ArrayList<Pair<Long, Long>>();\n        for (Pair<Long,\
    \ Long> p : res) {\n            if (p.getValue0() == last_row) {\n           \
    \     row_res.add(p);\n            } else {\n                if (row_res.size()\
    \ > 0) {\n                    Collections.sort(row_res, new Comparator<Pair<Long,\
    \ Long>>() {\n                        @Override\n                        public\
    \ int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                    \
    \        return Long.compare(b.getValue1(), a.getValue1());\n                \
    \        }\n                    });\n                    sorted_res.addAll(row_res);\n\
    \                }\n                row_res = new ArrayList<Pair<Long, Long>>();\n\
    \                row_res.add(p);\n                last_row = p.getValue0();\n\
    \            }\n        }\n        if (row_res.size() > 0) {\n            Collections.sort(row_res,\
    \ new Comparator<Pair<Long, Long>>() {\n                @Override\n          \
    \      public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {", "      \
    \  ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long, Long>>();\n    \
    \    for (long i = 0l; i < lst.size(); i++) {\n            for (long j = 0l; j\
    \ < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    ans.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        return ans;", "        ArrayList<Pair<Long,\
    \ Long>> rst = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    rst.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        for (int i\
    \ = 0; i < rst.size(); i++) {\n            for (int j = 0; j < rst.size() - 1;\
    \ j++) {\n                if (rst.get(j).getValue0() > rst.get(j + 1).getValue0())\
    \ {\n                    Pair<Long, Long> temp = rst.get(j);\n               \
    \     rst.set(j, rst.get(j + 1));\n                    rst.set(j + 1, temp);\n\
    \                }\n            }\n        }\n        for (int i = 0; i < rst.size();\
    \ i++) {\n            for (int j = 0; j < rst.size() - 1; j++) {\n           \
    \     if (rst.get(j).getValue0() == rst.get(j + 1).getValue0()) {\n          \
    \          if (rst.get(j).getValue1() < rst.get(j + 1).getValue1()) {\n      \
    \                  Pair<Long, Long> temp = rst.get(j);\n                     \
    \   rst.set(j, rst.get(j + 1));\n                        rst.set(j + 1, temp);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ rst;", "        int row = 0;\n        int column = 0;\n        ArrayList<Pair<Long,\
    \ Long>> results = new ArrayList<Pair<Long, Long>>();\n        for (ArrayList<Long>\
    \ innerList : lst) {\n            column = 0;\n            for (Long value : innerList)\
    \ {\n                if (value == x) {\n                    results.add(Pair.with(new\
    \ Long(row), new Long(column)));\n                }\n                column++;\n\
    \            }\n            row++;\n        }\n        results.sort((a, b) ->\
    \ {\n            if (a.getValue0().longValue() == b.getValue0().longValue()) {\n\
    \                return b.getValue1().compareTo(a.getValue1());\n            }\n\
    \            return a.getValue0().compareTo(b.getValue0());\n        });\n   \
    \     return results;", '        throw new RuntimeException("Please fill the gap");',
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j\
    \ < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n\
    \                    result.add(Pair.with((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        ArrayList<Pair<Long, Long>> r = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < result.size(); i++) {\n            for\
    \ (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).getValue0()\
    \ > result.get(j).getValue0()) {\n                    r.add(result.get(i));\n\
    \                    result.set(i, result.get(j));\n                    result.set(j,\
    \ r.get(0));\n                    r.clear();\n                }\n            }\n\
    \        }\n        for (int i = 0; i < result.size(); i++) {\n            for\
    \ (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).getValue0()\
    \ == result.get(j).getValue0()) {\n                    if (result.get(i).getValue1()\
    \ < result.get(j).getValue1()) {\n                        r.add(result.get(i));\n\
    \                        result.set(i, result.get(j));\n                     \
    \   result.set(j, r.get(0));\n                        r.clear();\n           \
    \         }\n                }\n            }\n        }\n        return result;",
  '        throw new UnsupportedOperationException("Please implement it.");', "  \
    \      ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        long i = 0;\n        while (i < lst.size()) {\n            long row =\
    \ i;\n            long j = 0;\n            while (j < lst.get((int)i).size())\
    \ {\n                if (lst.get((int)i).get((int)j) == x) {\n               \
    \     res.add(Pair.with(row, j));\n                }\n                j = j +\
    \ 1;\n            }\n            i = i + 1;\n        }\n        res.sort((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> (a.getValue0() - b.getValue0()));\n        return\
    \ res;", "        ArrayList<Pair<Long, Long>> _return = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    _return.add(Pair.with((long)i, (long)j));\n   \
    \             }\n            }\n        }\n        Collections.sort(_return, new\
    \ Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                if\
    \ (p1.getValue0() > p2.getValue0()) {\n                    return 1;\n       \
    \         } else if (p1.getValue0() < p2.getValue0()) {\n                    return\
    \ -1;\n                } else {\n                    if (p1.getValue1() > p2.getValue1())\
    \ {\n                        return -1;\n                    } else if (p1.getValue1()\
    \ < p2.getValue1()) {\n                        return 1;\n                   \
    \ } else {\n                        return 0;\n                    }\n       \
    \         }\n            }\n        });\n        return _return;", '        return
    null;', "        ArrayList<Pair<Long, Long>> coordinates = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int row = 0; row < lst.size(); row++) {\n          \
    \  for (int col = 0; col < lst.get(row).size(); col++) {\n                if (lst.get(row).get(col)\
    \ == x) {\n                    coordinates.add(Pair.with((long)row, (long)col));\n\
    \                }\n            }\n        }\n        coordinates.sort((Pair<Long,\
    \ Long> a, Pair<Long, Long> b) -> (int)(a.getValue0() - b.getValue0()));\n   \
    \     coordinates.sort((Pair<Long, Long> a, Pair<Long, Long> b) -> (int)(b.getValue1()\
    \ - a.getValue1()));\n        return coordinates;", "        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    ret.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        // Implement\
    \ solution below\n        return ret;", "        ArrayList<Pair<Long, Long>> res\
    \ = new ArrayList<Pair<Long, Long>>();\n        try {\n            for (int i\
    \ = 0; i < lst.size(); i++) {\n                for (int j = 0; j < lst.get(i).size();\
    \ j++) {\n                    if (lst.get(i).get(j) == x) {\n                \
    \        res.add(Pair.with((long)i, (long)j));\n                    }\n      \
    \          }\n            }\n            ArrayList<Pair<Long, Long>> sres = new\
    \ ArrayList<Pair<Long, Long>>();\n            for (int i = 0; i < res.size();\
    \ i++) {\n                if (res.get(i).getValue0() > 0) {\n                \
    \    boolean sorted = false;\n                    for (int j = i - 1; j >= 0;\
    \ j--) {\n                        if (res.get(i).getValue0() == res.get(j).getValue0())\
    \ {\n                            if (res.get(i).getValue1() > res.get(j).getValue1())\
    \ {\n                                sorted = true;\n                        \
    \        Pair<Long, Long> tmp = res.get(i);\n                                res.set(i,\
    \ res.get(j));\n                                res.set(j, tmp);\n           \
    \                 }\n                        }\n                    }\n      \
    \              if (!sorted) {\n                        sres.add(res.get(i));\n\
    \                    }\n                } else {\n                    sres.add(res.get(i));\n\
    \                }\n            }\n            res = sres;\n            for (int\
    \ i = 0; i < res.size(); i++) {\n                if (res.get(i).getValue0() >\
    \ 0) {\n                    boolean sorted = false;\n                    for (int\
    \ j = i - 1; j >= 0; j--) {\n                        if (res.get(i).getValue0()\
    \ < res.get(j).getValue0()) {\n                            sorted = true;\n  \
    \                          Pair<Long, Long> tmp = res.get(i);\n              \
    \              res.set(i, res.get(j));\n                            res.set(j",
  "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n\
    \                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ (t0, t1) -> {\n            long row0 = t0.getValue0();\n            long col0\
    \ = t0.getValue1();\n            long row1 = t1.getValue0();\n            long\
    \ col1 = t1.getValue1();\n            if (row0 < row1) {\n                return\
    \ -1;\n            } else if (row0 > row1) {\n                return 1;\n    \
    \        } else {\n                if (col0 > col1) {\n                    return\
    \ -1;\n                } else if (col0 < col1) {\n                    return 1;\n\
    \                } else {\n                    return 0;\n                }\n\
    \            }\n        });\n        return result;", '        return new ArrayList<Pair<Long,
    Long>>(Arrays.asList());', '        return new ArrayList<Pair<Long, Long>>(Arrays.asList());',
  "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long, Long>>();\n\
    \        for (long i = 0; i < lst.size(); i++) {\n            long row = i;\n\
    \            ArrayList<Long> curr = lst.get((int)i);\n            for (long j\
    \ = 0; j < curr.size(); j++) {\n                long col = j;\n              \
    \  if (curr.get((int)j) == x) {\n                    res.add(Pair.with(row, col));\n\
    \                }\n            }\n        }\n        return res;", '        return
    null;', "        final long closureX = x;\n        final ArrayList<Pair<Long,\
    \ Long>> closureLst = new ArrayList<Pair<Long, Long>>();\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get(i);\n \
    \           for (int j = 0; j < row.size(); j++) {\n                long value\
    \ = row.get(j);\n                if (value == closureX) {\n                  \
    \  closureLst.add(Pair.with(i, j));\n                }\n            }\n      \
    \  }\n        closureLst.sort((Pair<Long, Long> a, Pair<Long, Long> b) -> {\n\
    \            if (a.getValue0() > b.getValue0()) {\n                return 1;\n\
    \            } else if (a.getValue0() < b.getValue0()) {\n                return\
    \ -1;\n            } else {\n                if (a.getValue1() > b.getValue1())\
    \ {\n                    return -1;\n                } else if (a.getValue1()\
    \ < b.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return closureLst;", "        // your code\n        return null;", " \
    \       ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        for (long i = 0; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ row = lst.get((int)i);\n            for (long j = 0; j < row.size(); j++) {\n\
    \                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        ArrayList<Pair<Long,\
    \ Long>> sortedResult = new ArrayList<Pair<Long, Long>>();\n        result.stream().sorted((o1,\
    \ o2) -> (o1.getValue0() != o2.getValue0()) ? Long.compare(o1.getValue0(), o2.getValue0())\
    \ : Long.compare(o2.getValue1(), o1.getValue1())).forEach((pair) -> {\n      \
    \      sortedResult.add(pair);\n        });\n        return sortedResult;", " \
    \       ArrayList<Pair<Long, Long>> pairs = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int r = 0; r < lst.size(); r++) {\n            for (int c = 0; c\
    \ < lst.get(r).size(); c++) {\n                if (lst.get(r).get(c) == x) {\n\
    \                    pairs.add(Pair.with((long)r, (long)c));\n               \
    \ }\n            }\n        }\n        Collections.sort(pairs, (p1, p2) -> {\n\
    \            if (p1.getValue0() > p2.getValue0()) {\n                return 1;\n\
    \            } else if (p1.getValue0() < p2.getValue0()) {\n                return\
    \ -1;\n            } else {\n                if (p1.getValue1() > p2.getValue1())\
    \ {\n                    return -1;\n                } else if (p1.getValue1()\
    \ < p2.getValue1()) {\n                    return 1;\n                } else {\n\
    \                    return 0;\n                }\n            }\n        });\n\
    \        return pairs;", "        // Starting with 0\n        ArrayList<Pair<Long,\
    \ Long>> rst = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    rst.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        rst.sort((left,\
    \ right) -> {\n            int r = 0;\n            if (left.getValue0() < right.getValue0())\
    \ {\n                r = -1;\n            } else if (left.getValue0() > right.getValue0())\
    \ {\n                r = 1;\n            } else {\n                if (left.getValue1()\
    \ > right.getValue1()) {\n                    r = -1;\n                } else\
    \ if (left.getValue1() < right.getValue1()) {\n                    r = 1;\n  \
    \              }\n            }\n            return r;\n        });\n        return\
    \ rst;", "        ArrayList<Pair<Long, Long>> ans = new ArrayList<Pair<Long, Long>>();\n\
    \        ArrayList<ArrayList<Long>> input = new ArrayList<ArrayList<Long>>();\n\
    \        ArrayList<ArrayList<Long>> output = new ArrayList<ArrayList<Long>>();\n\
    \        ArrayList<Long> array = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            array = lst.get(i);\n            for\
    \ (int j = 0; j < array.size(); j++) {\n                if (array.get(j) == x)\
    \ {\n                    ans.add(Pair.with(i, j));\n                }\n      \
    \      }\n        }\n        Collections.sort(ans, new Comparator<Pair<Long, Long>>()\
    \ {\n            @Override\n            public int compare(Pair<Long, Long> p1,\
    \ Pair<Long, Long> p2) {\n                if (p1.getValue0() > p2.getValue0())\
    \ {\n                    return 1;\n                } else if (p1.getValue0()\
    \ < p2.getValue0()) {\n                    return -1;\n                } else\
    \ {\n                    if (p1.getValue1() > p2.getValue1()) {\n            \
    \            return -1;\n                    } else if (p1.getValue1() < p2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return ans;", "        // Your code here.\n   \
    \     ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            ArrayList<Long> row\
    \ = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n        \
    \        if (row.get(j) == x) {\n                    result.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.sort((a,\
    \ b) -> {\n            long a0 = a.getValue0();\n            long b0 = b.getValue0();\n\
    \            long a1 = a.getValue1();\n            long b1 = b.getValue1();\n\
    \            if (a0 < b0) {\n                return -1;\n            } else if\
    \ (a0 > b0) {\n                return 1;\n            } else {\n             \
    \   if (a1 < b1) {\n                    return 1;\n                } else if (a1\
    \ > b1) {\n                    return -1;\n                } else {\n        \
    \            return 0;\n                }\n            }\n        });\n      \
    \  return result;", "        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int row = 0; row < lst.size(); row++) {\n          \
    \  ArrayList<Long> rows = lst.get(row);\n            for (int col = 0; col < rows.size();\
    \ col++) {\n                if (rows.get(col) == x) {\n                    result.add(Pair.with((long)row,\
    \ (long)col));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                if\
    \ (p1.getValue0() > p2.getValue0()) {\n                    return 1;\n       \
    \         } else if (p1.getValue0() < p2.getValue0()) {\n                    return\
    \ -1;\n                } else {\n                    if (p1.getValue1() > p2.getValue1())\
    \ {\n                        return -1;\n                    } else if (p1.getValue1()\
    \ < p2.getValue1()) {\n                        return 1;\n                   \
    \ } else {\n                        return 0;\n                    }\n       \
    \         }\n            }\n        });\n        return result;", "        //\
    \ Your code here!\n        ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0l; i < lst.size(); i++) {\n            ArrayList<Long>\
    \ row = lst.get((int)i);\n            for (long j = 0l; j < row.size(); j++) {\n\
    \                if (row.get((int)j) == x) {\n                    result.add(Pair.with(i,\
    \ j));\n                }\n            }\n        }\n        Collections.sort(result,\
    \ new Comparator<Pair<Long, Long>>() {\n            @Override\n            public\
    \ int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                if\
    \ (o1.getValue0() < o2.getValue0()) {\n                    return -1;\n      \
    \          } else if (o1.getValue0() > o2.getValue0()) {\n                   \
    \ return 1;\n                } else {\n                    if (o1.getValue1()\
    \ > o2.getValue1()) {\n                        return -1;\n                  \
    \  } else if (o1.getValue1() < o2.getValue1()) {\n                        return\
    \ 1;\n                    } else {\n                        return 0;\n      \
    \              }\n                }\n            }\n        });\n        return\
    \ result;", "        class Local {}; System.out.println(\">>> \" + Local.class.getEnclosingMethod().getName());\n\
    \        // Write your code here.\n        ArrayList<Pair<Long, Long>> ret = new\
    \ ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            ArrayList<Long> row = lst.get(i);\n            for (int j = 0;\
    \ j < row.size(); j++) {\n                if (row.get(j) == x) {\n           \
    \         ret.add(Pair.with((long)i, (long)j));\n                }\n         \
    \   }\n        }\n        return ret;", "        ArrayList<Pair<Long, Long>> result\
    \ = new ArrayList<Pair<Long, Long>>();\n        for (long i = 0; i < lst.size();\
    \ i++) {\n            ArrayList<Long> curr = lst.get((int)i);\n            for\
    \ (long j = 0; j < curr.size(); j++) {\n                if (curr.get((int)j) ==\
    \ x) {\n                    result.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        result.sort((Pair<Long, Long> a, Pair<Long,\
    \ Long> b) -> {\n            if (a.getValue0() < b.getValue0()) {\n          \
    \      return -1;\n            } else if (a.getValue0() > b.getValue0()) {\n \
    \               return 1;\n            } else {\n                if (a.getValue1()\
    \ > b.getValue1()) {\n                    return -1;\n                } else if\
    \ (a.getValue1() < b.getValue1()) {\n                    return 1;\n         \
    \       } else {\n                    return 0;\n                }\n         \
    \   }\n        });\n        return result;", "        // Code goes here\n    \
    \    ArrayList<Pair<Long, Long>> temp = new ArrayList<Pair<Long, Long>>();\n \
    \       int count = 0;\n        for(ArrayList<Long> i : lst){\n            int\
    \ counter = 0;\n            for(Long j : i){\n                if(j == x){\n  \
    \                  temp.add(Pair.with(count * 1l, counter * 1l));\n          \
    \      }\n                counter++;\n            }\n            count++;\n  \
    \      }\n        Collections.sort(temp, new Comparator<Pair<Long, Long>>(){\n\
    \            public int compare(Pair<Long, Long> pair1, Pair<Long, Long> pair2){\n\
    \                if(pair1.getValue0() < pair2.getValue0()){\n                \
    \    return -1;\n                }else if(pair1.getValue0() > pair2.getValue0()){\n\
    \                    return 1;\n                }else{\n                    if(pair1.getValue1()\
    \ > pair2.getValue1()){\n                        return -1;\n                \
    \    }else if(pair1.getValue1() < pair2.getValue1()){\n                      \
    \  return 1;\n                    }else{\n                        return 0;\n\
    \                    }\n                }\n            }\n        });\n      \
    \  return temp;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long r = 0l; r < lst.size(); r++) {\n            for\
    \ (long c = 0l; c < lst.get((int)r).size(); c++) {\n                if (lst.get((int)r).get((int)c)\
    \ == x) {\n                    res.add(Pair.with(r, c));\n                }\n\
    \            }\n        }\n        Comparator<Pair<Long, Long>> comparator = Comparator.comparing(Pair::getValue0).thenComparing(Pair::getValue1);\n\
    \        res.sort(comparator.reversed());\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> res = new ArrayList<Pair<Long, Long>>();\n        for (int row = 0; row\
    \ < lst.size(); row++) {\n            for (int col = 0; col < lst.get(row).size();\
    \ col++) {\n                if (lst.get(row).get(col) == x) {\n              \
    \      res.add(Pair.with((long)row, (long)col));\n                }\n        \
    \    }\n        }\n        Collections.sort(res, new RowComparator());\n     \
    \   ArrayList<Pair<Long, Long>> resCopy = new ArrayList<Pair<Long, Long>>(res);\n\
    \        for (int i = 0; i < res.size(); i++) {\n            Collections.sort(resCopy,\
    \ new ColumnComparator());\n            int k = i;\n            while (k < res.size()\
    \ && res.get(i).getValue0().equals(res.get(k).getValue0())) {\n              \
    \  res.set(k, resCopy.get(k));\n                k++;\n            }\n        \
    \    i = k - 1;\n        }\n        return res;", "        ArrayList<Pair<Long,\
    \ Long>> ret = new ArrayList<Pair<Long, Long>>();\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++)\
    \ {\n                if (lst.get(i).get(j) == x) {\n                    ret.add(Pair.with((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        // sort by\
    \ rows in ascending order\n        ret.sort((x1, x2) -> {\n            if (x1.getValue0()\
    \ < x2.getValue0()) {\n                return -1;\n            } else if (x1.getValue0()\
    \ > x2.getValue0()) {\n                return 1;\n            } else {\n     \
    \           return 0;\n            }\n        });\n        // sort elements of\
    \ each row in descending order\n        // use a hash map of rows and corresponding\
    \ list of columns\n        HashMap<Long, ArrayList<Long>> hm = new HashMap<Long,\
    \ ArrayList<Long>>();\n        for (int i = 0; i < ret.size(); i++) {\n      \
    \      long row = ret.get(i).getValue0();\n            long col = ret.get(i).getValue1();\n\
    \            if (hm.containsKey(row)) {\n                hm.get(row).add(col);\n\
    \            } else {\n                ArrayList<Long> newList = new ArrayList<Long>();\n\
    \                newList.add(col);\n                hm.put(row, newList);\n  \
    \          }\n        }\n        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        // now iterate over the hash map and sort columns in each\
    \ row\n        for (long key : hm.keySet()) {\n            ArrayList<Long> tmp\
    \ = hm.get(key);\n            tmp.sort((x1, x2) -> {\n                if (x1 >\
    \ x2) {\n                    return -1;\n                } else if (x1 < x2) {\n\
    \                    return 1;\n                } else {\n                   \
    \ return", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int\
    \ j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j)\
    \ == x) {\n                    res.add(Pair.with((long)i, (long)j));\n       \
    \         }\n            }\n        }\n        return res;", "        // Your\
    \ code here\n        return null;", '        return null;', "        ArrayList<Pair<Long,\
    \ Long>> result = new ArrayList<Pair<Long, Long>>();\n        for (long i = 0;\
    \ i < lst.size(); i++) {\n            ArrayList<Long> row = lst.get((int)i);\n\
    \            for (long j = 0; j < row.size(); j++) {\n                if (row.get((int)j)\
    \ == x) {\n                    result.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        result.sort(((a, b) -> {\n            if (a.getValue0()\
    \ > b.getValue0()) {\n                return 1;\n            } else if (a.getValue0()\
    \ < b.getValue0()) {\n                return -1;\n            } else {\n     \
    \           if (a.getValue1() > b.getValue1()) {\n                    return -1;\n\
    \                } else if (a.getValue1() < b.getValue1()) {\n               \
    \     return 1;\n                } else {\n                    return 0;\n   \
    \             }\n            }\n        }));\n        return result;", "     \
    \   ArrayList<Pair<Long, Long>> result = new ArrayList<Pair<Long, Long>>();\n\
    \        return result;", "        ArrayList<Pair<Long, Long>> res = new ArrayList<Pair<Long,\
    \ Long>>();\n        // Write your code here\n        // To print results to the\
    \ standard output you can use System.out.println()\n        // Example: System.out.println(\"\
    Hello world!\");\n        for (int i = 0; i < lst.size(); i++) {\n           \
    \ ArrayList<Long> row = lst.get(i);\n            if (row.contains(x)) {\n    \
    \            for (int j = 0; j < row.size(); j++) {\n                    if (row.get(j)\
    \ == x) {\n                        res.add(Pair.with((long)i, (long)j));\n   \
    \                 }\n                }\n            }\n        }\n        Collections.sort(res,\
    \ (a, b) -> {\n            if (a.getValue0() < b.getValue0()) return -1;\n   \
    \         if (a.getValue0() > b.getValue0()) return 1;\n            if (a.getValue1()\
    \ > b.getValue1()) return -1;\n            if (a.getValue1() < b.getValue1())\
    \ return 1;\n            return 0;\n        });\n        return res;", "     \
    \   // 1. find all pair of (x, n) where n is number of elements in the array list.\n\
    \        // 2. sort x by row, and n by descending order.\n        // 3. return\
    \ [(x1, y1), (x2, y2) ...]\n        ArrayList<Pair<Long, Long>> ret = new ArrayList<Pair<Long,\
    \ Long>>();\n        for (long i = 0; i < lst.size(); i++) {\n            for\
    \ (long j = 0; j < lst.get((int)i).size(); j++) {\n                if (lst.get((int)i).get((int)j)\
    \ == x) {\n                    ret.add(Pair.with(i, j));\n                }\n\
    \            }\n        }\n        Collections.sort(ret, new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                if (o1.getValue0() < o2.getValue0())\
    \ {\n                    return -1;\n                } else if (o1.getValue0()\
    \ > o2.getValue0()) {\n                    return 1;\n                } else {\n\
    \                    if (o1.getValue1() > o2.getValue1()) {\n                \
    \        return -1;\n                    } else if (o1.getValue1() < o2.getValue1())\
    \ {\n                        return 1;\n                    } else {\n       \
    \                 return 0;\n                    }\n                }\n      \
    \      }\n        });\n        return ret;"]
stop_tokens:
- "\n    }\n"
