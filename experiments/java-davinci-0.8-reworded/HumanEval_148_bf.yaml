name: HumanEval_148_bf
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // There are eight planets in our solar system: the closerst\
  \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
  \ names as strings planet1 and planet2. \n    // The function should return a pair\
  \ containing all planets whose orbits are \n    // located between the orbit of\
  \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
  \ \n    // The function should return an empty pair if planet1 or planet2\n    //\
  \ are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"),\
  \ (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
  , (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"\
  Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
  )))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
  ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
  , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
  \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
  ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\",\
  \ (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n\
  \    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\"\
  )))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int planet1Index = planets.indexOf(planet1);\n        int planet2Index\
    \ = planets.indexOf(planet2);\n        if(planet1Index == -1 || planet2Index ==\
    \ -1)\n            return new ArrayList<String>();\n        if(planet1Index <\
    \ planet2Index)\n            return new ArrayList<String>(planets.subList(planet1Index\
    \ + 1, planet2Index));\n        return new ArrayList<String>(planets.subList(planet2Index\
    \ + 1, planet1Index));", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int indexPlanet1 = planets.indexOf(planet1);\n        int indexPlanet2\
    \ = planets.indexOf(planet2);\n        int indexMin = 0;\n        int indexMax\
    \ = 0;\n        if (indexPlanet1 >= 0 && indexPlanet2 >= 0) {\n            if\
    \ (indexPlanet1 < indexPlanet2) {\n                indexMin = indexPlanet1;\n\
    \                indexMax = indexPlanet2;\n            } else {\n            \
    \    indexMin = indexPlanet2;\n                indexMax = indexPlanet1;\n    \
    \        }\n            ArrayList<String> planetsInBetween = new ArrayList<String>();\n\
    \            for (int i = indexMin + 1; i < indexMax; i++) {\n               \
    \ planetsInBetween.add(planets.get(i));\n            }\n            return planetsInBetween;\n\
    \        } else {\n            return new ArrayList<String>();\n        }", " \
    \       ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ all = new ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    , (String)\"Uranus\", (String)\"Neptune\"));\n        int first = all.indexOf(planet1);\n\
    \        int second = all.indexOf(planet2);\n        if (first == -1 || second\
    \ == -1)\n            return result;\n        for (int i = first + 1; i < second;\
    \ i++)\n            result.add(all.get(i));\n        return result;", "      \
    \  ArrayList<String> planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n \
    \       int start = planets.indexOf(planet1);\n        int end = planets.indexOf(planet2);\n\
    \        if (start == -1 || end == -1) return new ArrayList<>();\n        int\
    \ startIndex = Math.min(start, end);\n        int endIndex = Math.max(start, end);\n\
    \        return new ArrayList<>(planets.subList(startIndex + 1, endIndex));",
  "        ArrayList<String> result = new ArrayList<String>();\n        // Write your\
    \ code here\n        return result;", "        ArrayList<String> planets = new\
    \ ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"));\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new ArrayList<>();\n        }\n        ArrayList<String>\
    \ inBetween = new ArrayList<>();\n        for (int i = Math.min(p1, p2) + 1; i\
    \ < Math.max(p1, p2); i++) {\n            inBetween.add(planets.get(i));\n   \
    \     }\n        return inBetween;", "        ArrayList<String> planets = new\
    \ ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        ArrayList<String> answer\
    \ = new ArrayList<String>();\n        if (index1 > index2) {\n            index1\
    \ = index1 + index2;\n            index2 = index1 - index2;\n            index1\
    \ = index1 - index2;\n        }\n        if (index1 >= 0 && index2 >= 0) {\n \
    \           for (int i = index1 + 1; i < index2; i++) {\n                answer.add(planets.get(i));\n\
    \            }\n        }\n        return answer;", "        ArrayList<String>\
    \ p = new ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    , (String)\"Uranus\", (String)\"Neptune\"));\n        int i1 = p.indexOf(planet1);\n\
    \        int i2 = p.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n \
    \           return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ out = new ArrayList<String>();\n        for (int i = Math.min(i1, i2) + 1; i\
    \ < Math.max(i1, i2); i++) {\n            out.add(p.get(i));\n        }\n    \
    \    return out;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> planetsByDistance = new ArrayList<String>();\n\
    \        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        if (index1 >= index2) {\n            int tmp = index1;\n            index1\
    \ = index2;\n            index2 = tmp;\n        }\n        if (index1 == -1 ||\
    \ index2 == -1) {\n            return planetsByDistance;\n        }\n        for\
    \ (int i = index1 + 1; i < index2; i++) {\n            planetsByDistance.add(planets.get(i));\n\
    \        }\n        return planetsByDistance;", "        String[] planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        ArrayList<String> answer = new ArrayList<String>();\n\
    \        int low = Arrays.asList(planets).indexOf(planet1);\n        int high\
    \ = Arrays.asList(planets).indexOf(planet2);\n        if (low == -1 || high ==\
    \ -1) {\n            return answer;\n        }\n        int lowIndex = Math.min(low,\
    \ high);\n        int highIndex = Math.max(low, high);\n        for (int i = lowIndex\
    \ + 1; i < highIndex; i++) {\n            answer.add(planets[i]);\n        }\n\
    \        return answer;", "        HashMap<String, Integer> map = new HashMap<String,\
    \ Integer>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> res = new ArrayList<String>();\n        for (int i =\
    \ 0; i < planets.size(); i++) {\n            map.put(planets.get(i), i);\n   \
    \     }\n        if (map.containsKey(planet1) && map.containsKey(planet2)) {\n\
    \            int l = Math.min(map.get(planet1), map.get(planet2));\n         \
    \   int r = Math.max(map.get(planet1), map.get(planet2));\n            for (int\
    \ i = l + 1; i < r; i++) {\n                res.add(planets.get(i));\n       \
    \     }\n        }\n        return res;", "        String[] l = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n        ArrayList<String> res = new ArrayList<String>();\n        int start,\
    \ end;\n        for (int i = 0; i < l.length; i++) {\n            if (l[i].equals(planet1))\
    \ {\n                start = i;\n            }\n            if (l[i].equals(planet2))\
    \ {\n                end = i;\n            }\n        }\n        for (int i =\
    \ start; i < end; i++) {\n            res.add(l[i]);\n        }\n        return\
    \ res;", "        // To make the benchmarks work, you should NOT use regular loops.\n\
    \        // Replace the code below with your own solution.\n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int planet1_index = planets.indexOf(planet1);\n\
    \        int planet2_index = planets.indexOf(planet2);\n        int min_index\
    \ = Math.min(planet1_index, planet2_index);\n        int max_index = Math.max(planet1_index,\
    \ planet2_index);\n        if (min_index == -1 || max_index == -1) {\n       \
    \     return result;\n        }\n        for (int i = min_index + 1; i < max_index;\
    \ i++) {\n            result.add(planets.get(i));\n        }\n        return result;",
  '        //YOUR CODE GOES HERE', '        return new ArrayList<String>();', "  \
    \      ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        ArrayList<String> result = new ArrayList<String>();\n        if (planets.contains(planet1)\
    \ && planets.contains(planet2)) {\n            int indexOfPlanet1 = planets.indexOf(planet1);\n\
    \            int indexOfPlanet2 = planets.indexOf(planet2);\n            if (indexOfPlanet1\
    \ < indexOfPlanet2) {\n                for (int i = indexOfPlanet1 + 1; i < indexOfPlanet2;\
    \ i++) {\n                    result.add(planets.get(i));\n                }\n\
    \            } else {\n                for (int i = indexOfPlanet2 + 1; i < indexOfPlanet1;\
    \ i++) {\n                    result.add(planets.get(i));\n                }\n\
    \            }\n        }\n        return result;", '        throw new RuntimeException("Not
    implemented");', "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int index1 = planets.indexOf(planet1);\n        int\
    \ index2 = planets.indexOf(planet2);\n        if(index1 > index2) {\n        \
    \    int tmp = index1;\n            index1 = index2;\n            index2 = tmp;\n\
    \        }\n        return new ArrayList<String>(planets.subList(index1+1, index2));",
  "        ArrayList<String> s = new ArrayList<String>();\n        ArrayList<String>\
    \ p = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int a = p.indexOf(planet1);\n\
    \        int b = p.indexOf(planet2);\n        int d = 0;\n        if (a > b) {\n\
    \            int c = a;\n            a = b;\n            b = c;\n        }\n \
    \       if (a != -1 && b != -1) {\n            for (int i = a + 1; i < b; i++)\
    \ {\n                s.add(p.get(i));\n            }\n        }\n        return\
    \ s;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> output = new ArrayList<String>();\n        boolean foundPlanet1\
    \ = false;\n        boolean foundPlanet2 = false;\n        for (int i = 0; i <\
    \ planets.size(); i++) {\n            if (planets.get(i).equals(planet1)) {\n\
    \                foundPlanet1 = true;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                foundPlanet2 = true;\n            }\n            if (foundPlanet1\
    \ && !foundPlanet2) {\n                output.add(planets.get(i));\n         \
    \   }\n        }\n        if (!foundPlanet1 || !foundPlanet2) {\n            return\
    \ new ArrayList<String>();\n        }\n        return output;", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int f = planets.indexOf(planet1);\n            int s = planets.indexOf(planet2);\n\
    \            if (f > s) {\n                for (int i = s; i < f; i++) {\n   \
    \                 ret.add(planets.get(i));\n                }\n            } else\
    \ {\n                for (int i = f; i < s; i++) {\n                    ret.add(planets.get(i));\n\
    \                }\n            }\n        }\n        return ret;", "        String[]\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n        int i1 = -1;\n        int i2 = -1;\n    \
    \    for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                i1 = i;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                i2 = i;\n            }\n        }\n        if (i1 == -1 ||\
    \ i2 == -1) {\n            return new ArrayList<String>();\n        }\n      \
    \  if (i1 < i2) {\n            int first = i1;\n            int last = i2;\n \
    \           ArrayList<String> result = new ArrayList<String>();\n            for\
    \ (int i = first + 1; i < last; i++) {\n                result.add(planets[i]);\n\
    \            }\n            return result;\n        } else {\n            int\
    \ first = i2;\n            int last = i1;\n            ArrayList<String> result\
    \ = new ArrayList<String>();\n            for (int i = first + 1; i < last; i++)\
    \ {\n                result.add(planets[i]);\n            }\n            return\
    \ result;\n        }", "        if (planet1.equals(\"Mercury\")) {\n         \
    \   if (planet2.equals(\"Venus\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\"));\n            } else if (planet2.equals(\"Earth\")) {\n            \
    \    return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"));\n    \
    \        } else if (planet2.equals(\"Mars\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mars\"));\n            } else if (planet2.equals(\"Jupiter\"\
    )) {\n                return new ArrayList<String>(Arrays.asList(\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\"));\n            } else if (planet2.equals(\"Saturn\"\
    )) {\n                return new ArrayList<String>(Arrays.asList(\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n            } else if (planet2.equals(\"\
    Uranus\")) {\n                return new ArrayList<String>(Arrays.asList(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n            } else\
    \ if (planet2.equals(\"Neptune\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n            } else {\n                return new ArrayList<String>();\n \
    \           }\n        } else if (planet1.equals(\"Venus\")) {\n            if\
    \ (planet2.equals(\"Earth\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Earth\"));\n            } else if (planet2.equals(\"Mars\")) {\n             \
    \   return new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\"));\n      \
    \      } else if (planet2.equals(\"Jupiter\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Earth\", \"Mars\", \"Jupiter\"));\n            } else if (planet2.equals(\"Saturn\"\
    )) {\n                return new ArrayList<String>(Arrays.asList(\"Earth\", \"\
    Mars\", \"", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int index1 = planets.indexOf(planet1);\n        int\
    \ index2 = planets.indexOf(planet2);\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (index1 == -1 || index2 == -1)\n            return result;\n     \
    \   if (index1 < index2) {\n            for (int i = index1+1; i < index2; i++)\n\
    \                result.add(planets.get(i));\n        } else {\n            for\
    \ (int i = index2+1; i < index1; i++)\n                result.add(planets.get(i));\n\
    \        }\n        return result;", "        ArrayList<String> planets = new\
    \ ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int planet1Pos\
    \ = planets.indexOf(planet1);\n        int planet2Pos = planets.indexOf(planet2);\n\
    \        ArrayList<String> answer = new ArrayList<String>();\n        if (planet1Pos\
    \ >= 0 && planet2Pos >= 0) {\n            if (planet1Pos < planet2Pos) {\n   \
    \             for (int i = planet1Pos + 1; i < planet2Pos; i++) {\n          \
    \          answer.add(planets.get(i));\n                }\n            } else\
    \ {\n                for (int i = planet2Pos + 1; i < planet1Pos; i++) {\n   \
    \                 answer.add(planets.get(i));\n                }\n           \
    \ }\n        }\n        return answer;", "        ArrayList<String> planets =\
    \ new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int first = 0;\n        int second\
    \ = 0;\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n\
    \            for (int i = 0; i < planets.size(); i++) {\n                if (planets.get(i).equals(planet1))\
    \ {\n                    first = i;\n                }\n                if (planets.get(i).equals(planet2))\
    \ {\n                    second = i;\n                }\n            }\n     \
    \       int begin = first + 1;\n            int end = second;\n            if\
    \ (first > second) {\n                begin = second + 1;\n                end\
    \ = first;\n            }\n            for (int i = begin; i < end; i++) {\n \
    \               result.add(planets.get(i));\n            }\n        }\n      \
    \  return result;", "        // Write your code here.\n        return null;",
  "        String[] planets = new String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        int a = -1, b = -1;\n        for (int\
    \ i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ a = i;\n            if (planets[i].equals(planet2)) b = i;\n        }\n    \
    \    if (a == -1 || b == -1) return res;\n        int start = Math.min(a, b),\
    \ end = Math.max(a, b);\n        for (int i = start + 1; i < end; i++) res.add(planets[i]);\n\
    \        return res;", '        return new ArrayList<String>();', "        String\
    \ solarSystem = String.join(\"_\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(solarSystem.split(\"_\")));\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        int p1 =\
    \ planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n    \
    \    if (p1 != -1 && p2 != -1) {\n            result = new ArrayList<String>(planets.subList(Math.min(p1,\
    \ p2) + 1, Math.max(p1, p2)));\n        }\n        return result;", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int pos1\
    \ = planets.indexOf(planet1);\n        int pos2 = planets.indexOf(planet2);\n\
    \        ArrayList<String> res = new ArrayList<String>();\n        if (pos1 <\
    \ 0 || pos2 < 0) {\n            return res;\n        }\n        if (pos1 > pos2)\
    \ {\n            pos1 = pos1 + pos2;\n            pos2 = pos1 - pos2;\n      \
    \      pos1 = pos1 - pos2;\n        }\n        res = new ArrayList<String>(planets.subList(pos1+1,\
    \ pos2));\n        return res;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> Planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int index1 = Planets.indexOf(planet1);\n        int index2 = Planets.indexOf(planet2);\n\
    \        if(index1 == -1 || index2 == -1){\n            return result;\n     \
    \   }\n        if(index1 < index2){\n            for(int i = index1 + 1; i < index2;\
    \ i++){\n                result.add(Planets.get(i));\n            }\n        }\n\
    \        else{\n            for(int i = index2 + 1; i < index1; i++){\n      \
    \          result.add(Planets.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> result = new ArrayList<String>();\n        String minPlanet\
    \ = (planet1.compareTo(planet2) <= 0) ? planet1 : planet2;\n        String maxPlanet\
    \ = (planet1.compareTo(planet2) > 0) ? planet1 : planet2;\n        int posMinPlanet\
    \ = planets.indexOf(minPlanet);\n        int posMaxPlanet = planets.indexOf(maxPlanet);\n\
    \        if (posMinPlanet == -1 || posMaxPlanet == -1) {\n            return result;\n\
    \        }\n        for (int i = posMinPlanet + 1; i < posMaxPlanet; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;",
  "        ArrayList<String> planetList = new ArrayList<>(Arrays.asList(\n       \
    \         \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"));\n        int i1 = planetList.indexOf(planet1);\n\
    \        int i2 = planetList.indexOf(planet2);\n        if (i1 >= 0 && i2 >= 0)\
    \ {\n            int start = Math.min(i1, i2);\n            int end = Math.max(i1,\
    \ i2);\n            return new ArrayList<String>(planetList.subList(start + 1,\
    \ end));\n        }\n        return new ArrayList<String>();", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1\
    \ = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        if(index1 == -1 || index2 == -1){\n            return new ArrayList<String>();\n\
    \        }\n        else if(index1 < index2){\n            return new ArrayList<String>(planets.subList(index1\
    \ + 1, index2));\n        }\n        else{\n            return new ArrayList<String>(planets.subList(index2\
    \ + 1, index1));\n        }", "        String[] planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \      ArrayList<String> p1 = new ArrayList<String>();\n        for (int i = 0;\
    \ i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n\
    \                ArrayList<String> p2 = new ArrayList<String>();\n           \
    \     for (int j = i + 1; j < planets.length; j++) {\n                    if (planets[j].equals(planet2))\
    \ {\n                        ArrayList<String> p3 = new ArrayList<String>();\n\
    \                        for (int k = i + 1; k < j; k++) {\n                 \
    \           p3.add(planets[k]);\n                        }\n                 \
    \       return p3;\n                    }\n                }\n            }\n\
    \        }\n        return p1;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int planet1Index = planets.indexOf(planet1);\n     \
    \   int planet2Index = planets.indexOf(planet2);\n        if (planet1Index ==\
    \ -1 || planet2Index == -1) {\n            return new ArrayList<String>();\n \
    \       }\n        if (planet1Index < planet2Index) {\n            return new\
    \ ArrayList<String>(planets.subList(planet1Index + 1, planet2Index));\n      \
    \  } else {\n            ArrayList<String> temp = new ArrayList<String>(planets.subList(planet2Index\
    \ + 1, planet1Index));\n            Collections.reverse(temp);\n            return\
    \ temp;\n        }", '        throw new UnsupportedOperationException("Unimplemented");',
  "        // >>>>\n        return null;\n        // <<<<", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1\
    \ = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        if (index1 != -1 && index2 != -1 && index1 != index2) {\n           \
    \ if (index1 < index2) {\n                return new ArrayList<String>(planets.subList(index1\
    \ + 1, index2));\n            } else {\n                return new ArrayList<String>(planets.subList(index2\
    \ + 1, index1));\n            }\n        }\n        return new ArrayList<String>();",
  "        ArrayList<String> ret = new ArrayList<String>();\n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        boolean\
    \ planet1Found = false;\n        boolean planet2Found = false;\n        int planet1Index\
    \ = 0;\n        int planet2Index = 0;\n        for (int i = 0; i < planets.size();\
    \ i++) {\n            if (planets.get(i).equals(planet1)) {\n                planet1Found\
    \ = true;\n                planet1Index = i;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                planet2Found = true;\n                planet2Index = i;\n\
    \            }\n        }\n        if (planet1Found && planet2Found) {\n     \
    \       if (planet1Index < planet2Index) {\n                for (int i = planet1Index\
    \ + 1; i < planet2Index; i++) {\n                    ret.add(planets.get(i));\n\
    \                }\n            } else {\n                for (int i = planet2Index\
    \ + 1; i < planet1Index; i++) {\n                    ret.add(planets.get(i));\n\
    \                }\n            }\n        }\n        return ret;", "        ArrayList<String>\
    \ planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int i1 = planets.indexOf(planet1);\n            int i2 = planets.indexOf(planet2);\n\
    \            int ii1 = Math.min(i1, i2);\n            int ii2 = Math.max(i1, i2);\n\
    \            for (int i = ii1+1; i < ii2; i++) {\n                res.add(planets.get(i));\n\
    \            }\n        }\n        return res;", '        return null;', "   \
    \     String[] planets = new String[] {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int begin = -1;\n\
    \        int end = -1;\n        for (int i = 0; i < planets.length; i++) {\n \
    \           if (planets[i].equals(planet1)) {\n                begin = i;\n  \
    \          }\n            if (planets[i].equals(planet2)) {\n                end\
    \ = i;\n            }\n        }\n        ArrayList<String> output = new ArrayList<String>();\n\
    \        if (begin == -1 || end == -1) {\n            return output;\n       \
    \ }\n        if (begin < end) {\n            for (int i = begin + 1; i < end;\
    \ i++) {\n                output.add(planets[i]);\n            }\n        } else\
    \ {\n            for (int i = end + 1; i < begin; i++) {\n                output.add(planets[i]);\n\
    \            }\n        }\n        return output;", "        // Locate your code\
    \ between here\n        HashMap<String, Integer> planets = new HashMap<String,\
    \ Integer>();\n        planets.put(\"Mercury\", 1);\n        planets.put(\"Venus\"\
    , 2);\n        planets.put(\"Earth\", 3);\n        planets.put(\"Mars\", 4);\n\
    \        planets.put(\"Jupiter\", 5);\n        planets.put(\"Saturn\", 6);\n \
    \       planets.put(\"Uranus\", 7);\n        planets.put(\"Neptune\", 8);\n  \
    \      ArrayList<String> sol = new ArrayList<String>();\n        int pl1 = planets.get(planet1);\n\
    \        int pl2 = planets.get(planet2);\n        if (pl1 == null || pl2 == null)\n\
    \            return sol;\n        for (int i = Math.min(pl1, pl2) + 1; i < Math.max(pl1,\
    \ pl2); i++) {\n            sol.add(planets.entrySet().stream().filter(e -> e.getValue()\
    \ == i).map(e -> e.getKey()).collect(Collectors.toList()).get(0));\n        }\n\
    \        return sol;\n        // and here", "        ArrayList<String> planets\
    \ = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        String firstPlanet = planet1.substring(0,\
    \ 1).toUpperCase() + planet1.substring(1);\n        String secondPlanet = planet2.substring(0,\
    \ 1).toUpperCase() + planet2.substring(1);\n        if (planets.contains(firstPlanet)\
    \ && planets.contains(secondPlanet)) {\n            int firstPlanetIndex = planets.indexOf(firstPlanet);\n\
    \            int secondPlanetIndex = planets.indexOf(secondPlanet);\n        \
    \    int maxIndex = 0;\n            int minIndex = 0;\n            if (firstPlanetIndex\
    \ < secondPlanetIndex) {\n                maxIndex = secondPlanetIndex;\n    \
    \            minIndex = firstPlanetIndex;\n            } else {\n            \
    \    maxIndex = firstPlanetIndex;\n                minIndex = secondPlanetIndex;\n\
    \            }\n            for (int i = minIndex + 1; i < maxIndex; i++) {\n\
    \                ret.add(planets.get(i));\n            }\n        }\n        return\
    \ ret;", "        try {\n            ArrayList<String> planets = (ArrayList<String>)GetPlanets.getPlanets();\n\
    \            int index_planet1 = planets.indexOf(planet1);\n            int index_planet2\
    \ = planets.indexOf(planet2);\n            ArrayList<String> from_index1_to_index2\
    \ = new ArrayList<String>();\n            for (int i = 0; i < planets.size();\
    \ i++) {\n                if (i >= index_planet1 && i <= index_planet2) {\n  \
    \                  from_index1_to_index2.add(planets.get(i));\n              \
    \  }\n            }\n            return from_index1_to_index2;\n        } catch\
    \ (Exception e) {\n            System.out.println(e);\n            return new\
    \ ArrayList<String>();\n        }", "        ArrayList<String> list = new ArrayList<String>();\n\
    \        switch (planet1) {\n            case \"Mercury\":\n                if\
    \ (planet2.equals(\"Uranus\")) {\n                    list.add(\"Venus\");\n \
    \                   list.add(\"Earth\");\n                    list.add(\"Mars\"\
    );\n                    list.add(\"Jupiter\");\n                    list.add(\"\
    Saturn\");\n                } else if (planet2.equals(\"Venus\")) {\n        \
    \            list.add(\"Venus\");\n                }\n                break;\n\
    \            case \"Venus\":\n                if (planet2.equals(\"Uranus\"))\
    \ {\n                    list.add(\"Earth\");\n                    list.add(\"\
    Mars\");\n                    list.add(\"Jupiter\");\n                    list.add(\"\
    Saturn\");\n                } else if (planet2.equals(\"Earth\")) {\n        \
    \            list.add(\"Earth\");\n                }\n                break;\n\
    \            case \"Earth\":\n                if (planet2.equals(\"Uranus\"))\
    \ {\n                    list.add(\"Mars\");\n                    list.add(\"\
    Jupiter\");\n                    list.add(\"Saturn\");\n                } else\
    \ if (planet2.equals(\"Mars\")) {\n                    list.add(\"Mars\");\n \
    \               }\n                break;\n            case \"Mars\":\n      \
    \          if (planet2.equals(\"Uranus\")) {\n                    list.add(\"\
    Jupiter\");\n                    list.add(\"Saturn\");\n                } else\
    \ if (planet2.equals(\"Jupiter\")) {\n                    list.add(\"Jupiter\"\
    );\n                }\n                break;\n            case \"Jupiter\":\n\
    \                if (planet2.equals(\"Uranus\")) {\n                    list.add(\"\
    Saturn\");\n                } else if (planet2.equals(\"Saturn\")) {\n       \
    \             list.add(\"Saturn\");\n                }\n                break;\n\
    \            case \"Saturn\":\n                if (planet2.equals(\"Uranus\"))\
    \ {\n                    list.add(\"Uranus\");\n                } else if (planet2.equals(\"\
    Uranus\")) {\n                    list.add(\"Uranus\");\n                }\n \
    \               break;\n            case \"Uranus\":\n                if (planet2.equals(\"\
    Neptune\")) {\n                    list.add", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int first = 0;\n        int second = 0;\n        for\
    \ (int i = 0; i < planets.size(); i++) {\n            if (planets.get(i).equals(planet1))\
    \ {\n                first = i;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                second = i;\n            }\n        }\n        if (first\
    \ == 0 || second == 0) {\n            return result;\n        }\n        int firstPlanet\
    \ = Math.min(first, second);\n        int secondPlanet = Math.max(first, second);\n\
    \        for (int i = firstPlanet + 1; i < secondPlanet; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;", '        return new ArrayList<String>();',
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> result = new ArrayList<String>();\n        int start\
    \ = planets.indexOf(planet1);\n        int end = planets.indexOf(planet2);\n \
    \       if (start < 0 || end < 0) {\n            return result;\n        }\n \
    \       int min = Math.min(start, end);\n        int max = Math.max(start, end);\n\
    \        for (int i = min + 1; i < max; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;", "        ArrayList<String> planets = new\
    \ ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2))\n            return new ArrayList<String>();\n\
    \        int idx1 = planets.indexOf(planet1);\n        int idx2 = planets.indexOf(planet2);\n\
    \        if (idx1 == idx2)\n            return new ArrayList<String>();\n    \
    \    if (idx1 > idx2) {\n            idx1 = idx1 + idx2;\n            idx2 = idx1\
    \ - idx2;\n            idx1 = idx1 - idx2;\n        }\n        ArrayList<String>\
    \ inBetween = new ArrayList<String>();\n        for (int i = idx1+1; i < idx2;\
    \ i++) {\n            inBetween.add(planets.get(i));\n        }\n        return\
    \ inBetween;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> result = new ArrayList<String>();\n        if(!planets.contains(planet1)\
    \ || !planets.contains(planet2)){\n            return result;\n        }\n   \
    \     int start = planets.indexOf(planet1);\n        int end = planets.indexOf(planet2);\n\
    \        if(start>end){\n            int temp = start;\n            start = end;\n\
    \            end = temp;\n        }\n        for(int i = start+1; i<end; i++){\n\
    \            result.add(planets.get(i));\n        }\n        return result;",
  "        // Planet: name, [0..1] distance from sun\n        ArrayList<Pair<String,Double>>\
    \ planets = new ArrayList<Pair<String,Double>>(\n            Arrays.asList(\n\
    \                new Pair<String,Double>(\"Mercury\", 0.0),\n                new\
    \ Pair<String,Double>(\"Venus\", 0.4),\n                new Pair<String,Double>(\"\
    Earth\", 0.5),\n                new Pair<String,Double>(\"Mars\", 0.6),\n    \
    \            new Pair<String,Double>(\"Jupiter\", 0.8),\n                new Pair<String,Double>(\"\
    Saturn\", 0.9),\n                new Pair<String,Double>(\"Uranus\", 1.0),\n \
    \               new Pair<String,Double>(\"Neptune\", 1.1)\n            )\n   \
    \     );\n        Pair<String,Double> planet1_ = planets.stream().filter(p ->\
    \ p.getValue0().equals(planet1)).findFirst().orElse(null);\n        Pair<String,Double>\
    \ planet2_ = planets.stream().filter(p -> p.getValue0().equals(planet2)).findFirst().orElse(null);\n\
    \        if (planet1_ == null || planet2_ == null) {\n            return new ArrayList<String>();\n\
    \        }\n        boolean reverse_order = planet1_.getValue1() > planet2_.getValue1();\n\
    \        Pair<String,Double> planet1__ = reverse_order ? planet2_ : planet1_;\n\
    \        Pair<String,Double> planet2__ = reverse_order ? planet1_ : planet2_;\n\
    \        return planets.stream()\n            .filter(p -> p.getValue1() > planet1__.getValue1()\
    \ && p.getValue1() < planet2__.getValue1())\n            .map(p -> p.getValue0())\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", "        ArrayList<String>\
    \  planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ ans = new ArrayList<String>();\n        int start = planets.indexOf(planet1);\n\
    \        int end = planets.indexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return ans;\n        }\n        if (start > end) {\n    \
    \        int tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        while (start < end) {\n            ans.add(planets.get(start+1));\n\
    \            start++;\n        }\n        return ans;", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        if (p1 < 0 || p2 < 0) {\n\
    \            return new ArrayList<String>();\n        }\n        if (p1 < p2)\
    \ {\n            return new ArrayList<String>(planets.subList(p1 + 1, p2));\n\
    \        } else {\n            return new ArrayList<String>(planets.subList(p2\
    \ + 1, p1));\n        }", '        return new ArrayList<String>();', "       \
    \ ArrayList<String> list = new ArrayList<String>();\n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1\
    \ = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return list;\n     \
    \   }\n        if (index1 < index2) {\n            for (int i = index1 + 1; i\
    \ < index2; i++) {\n                list.add(planets.get(i));\n            }\n\
    \        } else {\n            for (int i = index2 + 1; i < index1; i++) {\n \
    \               list.add(planets.get(i));\n            }\n        }\n        return\
    \ list;", "        ArrayList<String> orbits = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n \
    \       int p1 = orbits.indexOf(planet1);\n        int p2 = orbits.indexOf(planet2);\n\
    \        int first = Math.min(p1, p2);\n        int last = Math.max(p1, p2);\n\
    \        if(first < 0 || last < 0){\n            return res;\n        }\n    \
    \    for(int i = first + 1; i < last; i++){\n            res.add(orbits.get(i));\n\
    \        }\n        return res;", '        return new ArrayList<String>();', "\t\
    \    ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n\t\
    \    ArrayList<String> planets_between = new ArrayList<String>();\n\t    // get\
    \ the indices of the planets\n\t    int planet1_index = planets.indexOf(planet1);\n\
    \t    int planet2_index = planets.indexOf(planet2);\n\t    if (planet1_index ==\
    \ -1 || planet2_index == -1) {\n\t        return planets_between;\n\t    }\n\t\
    \    if (planet1_index < planet2_index) {\n\t        for (int i = planet1_index\
    \ + 1; i < planet2_index; i++) {\n\t            planets_between.add(planets.get(i));\n\
    \t        }\n\t    } else {\n\t        for (int i = planet2_index + 1; i < planet1_index;\
    \ i++) {\n\t            planets_between.add(planets.get(i));\n\t        }\n\t\
    \    }\n\t    return planets_between;", "        String[] planets = new String[]{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        ArrayList<String> res = new ArrayList<String>();\n  \
    \      if (Arrays.stream(planets).anyMatch(a -> a.equals(planet1)) && Arrays.stream(planets).anyMatch(a\
    \ -> a.equals(planet2))) {\n            for (int i = 0; i < planets.length; i++)\
    \ {\n                if (planets[i].equals(planet1)) {\n                    int\
    \ c1 = i;\n                    for (int j = 0; j < planets.length; j++) {\n  \
    \                      if (planets[j].equals(planet2)) {\n                   \
    \         int c2 = j;\n                            if (c1 > c2) {\n          \
    \                      for (int k = c2 + 1; k < c1; k++) {\n                 \
    \                   res.add(planets[k]);\n                                }\n\
    \                            } else {\n                                for (int\
    \ k = c1 + 1; k < c2; k++) {\n                                    res.add(planets[k]);\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        return res;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int i = planets.indexOf(planet1);\n        int j = planets.indexOf(planet2);\n\
    \        int n = planets.size();\n        if (i < 0 || j < 0) return result;\n\
    \        if (i <= j) {\n            for (int k = i + 1; k < j; k++) {\n      \
    \          result.add(planets.get(k));\n            }\n        } else {\n    \
    \        for (int k = j + 1; k < i; k++) {\n                result.add(planets.get(k));\n\
    \            }\n        }\n        return result;", "        \n        String\
    \ []p={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"\
    ,\"Neptune\"};\n        int i1=-1,i2=-1;\n        for(int i=0;i<p.length;i++){\n\
    \            if(p[i].equals(planet1))\n                i1=i;\n            if(p[i].equals(planet2))\n\
    \                i2=i;\n        }\n        ArrayList<String>ans=new ArrayList<>();\n\
    \        if(i1==-1||i2==-1)\n            return ans;\n        for(int i=i1+1;i<i2;i++)\n\
    \            ans.add(p[i]);\n        return ans;", "        ArrayList<String>\
    \ planets = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1\
    \ = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n\
    \        }\n        ArrayList<String> answer = new ArrayList<>();\n        int\
    \ lower = Math.min(index1, index2);\n        int upper = Math.max(index1, index2);\n\
    \        if (lower < upper) {\n            for (int i = lower + 1; i < upper;\
    \ i++) {\n                answer.add(planets.get(i));\n            }\n       \
    \ } else {\n            for (int i = upper + 1; i < lower; i++) {\n          \
    \      answer.add(planets.get(i));\n            }\n        }\n        return answer;",
  "        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1\
    \ = -1;\n        int index2 = -1;\n        for (int i = 0; i < planets.size();\
    \ i++) {\n            if (planets.get(i).equals(planet1)) {\n                index1\
    \ = i;\n            }\n            if (planets.get(i).equals(planet2)) {\n   \
    \             index2 = i;\n            }\n        }\n        if (index1 != -1\
    \ && index2 != -1) {\n            if (index1 < index2) {\n                for\
    \ (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n\
    \                }\n            } else {\n                for (int i = index2\
    \ + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n \
    \               }\n            }\n        }\n        return result;", "      \
    \  if (planet1.equals(\"\") || planet2.equals(\"\")) {\n            return new\
    \ ArrayList<String>();\n        }\n        HashMap<String, Integer> orderedPlanets\
    \ = new HashMap<String, Integer>();\n        orderedPlanets.put(\"Mercury\", 0);\n\
    \        orderedPlanets.put(\"Venus\", 1);\n        orderedPlanets.put(\"Earth\"\
    , 2);\n        orderedPlanets.put(\"Mars\", 3);\n        orderedPlanets.put(\"\
    Jupiter\", 4);\n        orderedPlanets.put(\"Saturn\", 5);\n        orderedPlanets.put(\"\
    Uranus\", 6);\n        orderedPlanets.put(\"Neptune\", 7);\n        int p1 = orderedPlanets.get(planet1);\n\
    \        int p2 = orderedPlanets.get(planet2);\n        ArrayList<String> res\
    \ = new ArrayList<String>();\n        if (p1 <= p2) {\n            for (int i\
    \ = p1 + 1; i < p2; i++) {\n                for (Map.Entry<String, Integer> entry\
    \ : orderedPlanets.entrySet()) {\n                    if (entry.getValue() ==\
    \ i) {\n                        res.add(entry.getKey());\n                   \
    \ }\n                }\n            }\n        } else {\n            for (int\
    \ i = p2 + 1; i < p1; i++) {\n                for (Map.Entry<String, Integer>\
    \ entry : orderedPlanets.entrySet()) {\n                    if (entry.getValue()\
    \ == i) {\n                        res.add(entry.getKey());\n                \
    \    }\n                }\n            }\n        }\n        return res;", " \
    \       ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int idx1 = planets.indexOf(planet1);\n        int idx2 = planets.indexOf(planet2);\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        if (idx1\
    \ == -1 || idx2 == -1) return result;\n        if (idx1 < idx2) {\n          \
    \  for (int i = idx1+1; i < idx2; i++) result.add(planets.get(i));\n        }\
    \ else {\n            for (int i = idx2+1; i < idx1; i++) result.add(planets.get(i));\n\
    \        }\n        return result;", '        // write your code here', "    \
    \    // write your code here\n        return null;", "        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) return new ArrayList<String>();\n        if (planets.indexOf(planet1)\
    \ > planets.indexOf(planet2)) {\n            ArrayList<String> result = new ArrayList<String>();\n\
    \            for (int i = planets.indexOf(planet2) + 1; i < planets.indexOf(planet1);\
    \ i++) {\n                result.add(planets.get(i));\n            }\n       \
    \     return result;\n        } else {\n            ArrayList<String> result =\
    \ new ArrayList<String>();\n            for (int i = planets.indexOf(planet1)\
    \ + 1; i < planets.indexOf(planet2); i++) {\n                result.add(planets.get(i));\n\
    \            }\n            return result;\n        }", "        Map<String, Integer>\
    \ m = new HashMap<String, Integer>();\n        m.put(\"Mercury\", 0);\n      \
    \  m.put(\"Venus\", 1);\n        m.put(\"Earth\", 2);\n        m.put(\"Mars\"\
    , 3);\n        m.put(\"Jupiter\", 4);\n        m.put(\"Saturn\", 5);\n       \
    \ m.put(\"Uranus\", 6);\n        m.put(\"Neptune\", 7);\n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ ans = new ArrayList<String>();\n        if (m.containsKey(planet1) && m.containsKey(planet2))\
    \ {\n            int a = m.get(planet1);\n            int b = m.get(planet2);\n\
    \            if (a < b) {\n                for (int i = a + 1; i < b; i++) {\n\
    \                    ans.add(planets.get(i));\n                }\n           \
    \ } else {\n                for (int i = b + 1; i < a; i++) {\n              \
    \      ans.add(planets.get(i));\n                }\n            }\n        }\n\
    \        return ans;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2))\
    \ {\n            return new ArrayList<String>();\n        }\n        int p1 =\
    \ planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n    \
    \    return new ArrayList<String>(planets.subList(Math.min(p1, p2) + 1, Math.max(p1,\
    \ p2)));", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        boolean planet1Found = false;\n        boolean planet2Found = false;\n\
    \        for (int i = 0; i < planets.size(); i++) {\n            if (planets.get(i).equals(planet1))\
    \ {\n                planet1Found = true;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                planet2Found = true;\n            }\n            if (planet1Found\
    \ && planet2Found) {\n                result.add(planets.get(i));\n          \
    \  }\n        }\n        Collections.reverse(result);\n        return result;",
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        ArrayList<String> closer = new ArrayList<String>();\n        ArrayList<String>\
    \ farther = new ArrayList<String>();\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (planets.contains(planet1) && planets.contains(planet2)) {\n     \
    \       int i = planets.indexOf(planet1);\n            int j = planets.indexOf(planet2);\n\
    \            if (i < j) {\n                closer = new ArrayList<String>(planets.subList(i,\
    \ j));\n            } else {\n                farther = new ArrayList<String>(planets.subList(j,\
    \ i));\n                closer = new ArrayList<String>(planets.subList(0, j));\n\
    \                closer.addAll(farther);\n            }\n        }\n        return\
    \ new ArrayList<String>(closer);", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int p1 = planets.indexOf(planet1);\n        int p2 =\
    \ planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new ArrayList<String>();\n\
    \        ArrayList<String> between = new ArrayList<String>();\n        if (p1\
    \ < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n                between.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                between.add(planets.get(i));\n            }\n        }\n\
    \        return between;", '        throw new NotImplementedException();', " \
    \       ArrayList<String> solar_system = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        if (!solar_system.contains(planet1) || !solar_system.contains(planet2))\
    \ {\n            return new ArrayList<String>();\n        }\n        int start\
    \ = solar_system.indexOf(planet1);\n        int end = solar_system.indexOf(planet2);\n\
    \        if (start > end) {\n            int temp = start;\n            start\
    \ = end;\n            end = temp;\n        }\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (int i = start + 1; i < end; i++) {\n\
    \            result.add(solar_system.get(i));\n        }\n        return result;",
  "        // Your code here\n        return null;", '        return new ArrayList<String>();',
  "        ArrayList<String> res = new ArrayList<String>();\n        switch (planet1)\
    \ {\n            case \"Mercury\":\n                switch (planet2) {\n     \
    \               case \"Venus\":\n                        res.add(\"Venus\");\n\
    \                        break;\n                    case \"Earth\":\n       \
    \                 res.add(\"Venus\");\n                        res.add(\"Earth\"\
    );\n                        break;\n                    case \"Mars\":\n     \
    \                   res.add(\"Venus\");\n                        res.add(\"Earth\"\
    );\n                        res.add(\"Mars\");\n                        break;\n\
    \                    case \"Jupiter\":\n                        res.add(\"Venus\"\
    );\n                        res.add(\"Earth\");\n                        res.add(\"\
    Mars\");\n                        res.add(\"Jupiter\");\n                    \
    \    break;\n                    case \"Saturn\":\n                        res.add(\"\
    Venus\");\n                        res.add(\"Earth\");\n                     \
    \   res.add(\"Mars\");\n                        res.add(\"Jupiter\");\n      \
    \                  res.add(\"Saturn\");\n                        break;\n    \
    \                case \"Uranus\":\n                        res.add(\"Venus\");\n\
    \                        res.add(\"Earth\");\n                        res.add(\"\
    Mars\");\n                        res.add(\"Jupiter\");\n                    \
    \    res.add(\"Saturn\");\n                        res.add(\"Uranus\");\n    \
    \                    break;\n                    case \"Neptune\":\n         \
    \               res.add(\"Venus\");\n                        res.add(\"Earth\"\
    );\n                        res.add(\"Mars\");\n                        res.add(\"\
    Jupiter\");\n                        res.add(\"Saturn\");\n                  \
    \      res.add(\"Uranus\");\n                        res.add(\"Neptune\");\n \
    \                       break;\n                    default:\n               \
    \         break;\n                }\n                break;\n            case\
    \ \"Venus\":\n                switch (planet2) {\n                    case \"\
    Earth\":\n                        res.add(\"Earth\");\n                      \
    \  break;\n                    case \"Mars\":\n                        res.add(\"\
    Earth\");\n                        res.add(\"Mars\");\n                      \
    \  break;\n                    case \"Jupiter\":\n                        res.add(\"\
    Earth\");\n                        res.add(\"Mars\");\n                      \
    \  res.add(\"Jupiter\");\n                        break;\n                   \
    \ case \"Saturn\":\n                        res.add(\"Earth\");\n            \
    \            res.add(\"Mars\");\n                        res.add(\"Jupiter\");\n\
    \                        res.add(\"Saturn\");\n", "        // Write your code\
    \ here\n        return null;", '        throw new RuntimeException("Not implemented.");',
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> r = new ArrayList<String>();\n        boolean f1 = false;\n\
    \        boolean f2 = false;\n        for (int i = 0; i < planets.size(); i++)\
    \ {\n            if (planets.get(i).equals(planet1)) {\n                f1 = true;\n\
    \            }\n            if (planets.get(i).equals(planet2)) {\n          \
    \      f2 = true;\n            }\n        }\n        if (f1 && f2) {\n       \
    \     ArrayList<String> parts = new ArrayList<String>();\n            parts.addAll(planets.subList(planets.indexOf(planet1),\
    \ planets.indexOf(planet2) + 1));\n            parts.addAll(planets.subList(planets.indexOf(planet2),\
    \ planets.indexOf(planet1) + 1));\n            for (int i = 0; i < parts.size();\
    \ i++) {\n                if (!parts.get(i).equals(planet1) && !parts.get(i).equals(planet2))\
    \ {\n                    r.add(parts.get(i));\n                }\n           \
    \ }\n        }\n        return r;", "        final String[] planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n        int planet1Index = -1;\n        int planet2Index = -1;\n        for\
    \ (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                planet1Index = i;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                planet2Index = i;\n            }\n        }\n        if (planet1Index\
    \ == -1 || planet2Index == -1) {\n            return new ArrayList<String>();\n\
    \        }\n        if (planet1Index < planet2Index) {\n            int temp =\
    \ planet1Index;\n            planet1Index = planet2Index;\n            planet2Index\
    \ = temp;\n        }\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = planet2Index + 1; i < planet1Index; i++) {\n           \
    \ result.add(planets[i]);\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] planets = new String[] {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int start = 0;\n        int end = 0;\n        for (int\
    \ i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                start = i;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                end = i;\n            }\n        }\n        if (start ==\
    \ 0 || end == 0) {\n            return result;\n        }\n        if (start >\
    \ end) {\n            int tmp = start;\n            start = end;\n           \
    \ end = tmp;\n        }\n        for (int i = start + 1; i < end; i++) {\n   \
    \         result.add(planets[i]);\n        }\n        return result;", "     \
    \   ArrayList<String> result = new ArrayList<String>();\n        String[] planets\
    \ = {\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"\n        };\n        int p1 = -1;\n        int\
    \ p2 = -1;\n        for (int i = 0; i < planets.length; i++) {\n            if\
    \ (planets[i].equals(planet1)) {\n                p1 = i;\n            }\n   \
    \         if (planets[i].equals(planet2)) {\n                p2 = i;\n       \
    \     }\n        }\n        if (p1 == -1 || p2 == -1) {\n            return result;\n\
    \        }\n        if (p1 > p2) {\n            int t = p1;\n            p1 =\
    \ p2;\n            p2 = t;\n        }\n        for (int i = p1 + 1; i < p2; i++)\
    \ {\n            result.add(planets[i]);\n        }\n        return result;",
  "        \n        ArrayList<String> planedArray = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (planedArray.contains(planet1) && planedArray.contains(planet2)){\n\
    \            int x1 = planedArray.indexOf(planet1);\n            int x2 = planedArray.indexOf(planet2);\n\
    \            int min = x1 < x2 ? x1 : x2;\n            int max = x1 > x2 ? x1\
    \ : x2;\n            for (int i = min + 1; i < max; i++) {\n                result.add(planedArray.get(i));\n\
    \            }\n        }\n        return result;", '        return null;', " \
    \       ArrayList<String> planet = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet.contains(planet1)\
    \ && planet.contains(planet2)) {\n            if(planet.indexOf(planet1) < planet.indexOf(planet2))\
    \ {\n                result = new ArrayList<String>(planet.subList(planet.indexOf(planet1)\
    \ + 1, planet.indexOf(planet2)));\n            } else {\n                result\
    \ = new ArrayList<String>(planet.subList(planet.indexOf(planet2) + 1, planet.indexOf(planet1)));\n\
    \            }\n        }\n        return result;", "        // TODO: Create the\
    \ return value\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        // TODO: Validate parameters\n        if(!planet1.equals(\"Mercury\"\
    ) && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") &&\n           !planet1.equals(\"\
    Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") &&\n  \
    \         !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")) {\n   \
    \         return result;\n        }\n        if(!planet2.equals(\"Mercury\") &&\
    \ !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") &&\n           !planet2.equals(\"\
    Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") &&\n  \
    \         !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) {\n   \
    \         return result;\n        }\n        // TODO: implement the algorithm\n\
    \        String[] planets = new String[] {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int idx1 =\
    \ -1;\n        int idx2 = -1;\n        for(int i = 0; i < planets.length; i++)\
    \ {\n            if(planets[i].equals(planet1)) {\n                idx1 = i;\n\
    \            }\n            if(planets[i].equals(planet2)) {\n               \
    \ idx2 = i;\n            }\n        }\n        if(idx1 < idx2) {\n           \
    \ for(int i = idx1 + 1; i < idx2; i++) {\n                result.add(planets[i]);\n\
    \            }\n        } else {\n            for(int i = idx2 + 1; i < idx1;\
    \ i++) {\n                result.add(planets[i]);\n            }\n        }\n\
    \        return result;", "        // write your code here\n        return null;",
  "        // IMPLEMENT ME\n        return new ArrayList<String>();", '        //
    Write your code here', "        String[] planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n      \
    \  ArrayList<String> p1 = new ArrayList<>();\n        ArrayList<String> p2 = new\
    \ ArrayList<>();\n        for (int i = 0; i < planets.length; i++) {\n       \
    \     if (planets[i].equals(planet1)) {\n                for (int j = i; j < planets.length;\
    \ j++) {\n                    p1.add(planets[j]);\n                }\n       \
    \     }\n            if (planets[i].equals(planet2)) {\n                for (int\
    \ j = i; j < planets.length; j++) {\n                    p2.add(planets[j]);\n\
    \                }\n            }\n        }\n        return new ArrayList<String>(new\
    \ HashSet<String>(p1).stream().filter(p2::contains).collect(Collectors.toList()));",
  "        String planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"};\n        int planet1Idx = -1;\n      \
    \  int planet2Idx = -1;\n        for (int i = 0; i < planets.length; i++) {\n\
    \            if (planets[i].equals(planet1)) {\n                planet1Idx = i;\n\
    \            }\n            if (planets[i].equals(planet2)) {\n              \
    \  planet2Idx = i;\n            }\n        }\n        if (planet1Idx == -1 ||\
    \ planet2Idx == -1) {\n            return new ArrayList<String>();\n        }\n\
    \        int min = Math.min(planet1Idx, planet2Idx);\n        int max = Math.max(planet1Idx,\
    \ planet2Idx);\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = min+1; i < max; i++) {\n            result.add(planets[i]);\n\
    \        }\n        return result;", "        ArrayList<String> r = new ArrayList<String>();\n\
    \        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      if(!planets.contains(planet1) || !planets.contains(planet2)) return r;\n\
    \        int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n\
    \        if(p1 > p2) {\n            p1 = p1 ^ p2;\n            p2 = p1 ^ p2;\n\
    \            p1 = p1 ^ p2;\n        }\n        for(int i = p1+1; i < p2; i++)\
    \ {\n            r.add(planets.get(i));\n        }\n        return r;", "    \
    \    final String[] planets = new String[]{\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        final\
    \ HashMap<String, Integer> planetIdx = new HashMap<String, Integer>();\n     \
    \   for (int i = 0; i < planets.length; i++) {\n            planetIdx.put(planets[i],\
    \ i);\n        }\n        final Integer idx1 = planetIdx.get(planet1);\n     \
    \   final Integer idx2 = planetIdx.get(planet2);\n        if (idx1 == null ||\
    \ idx2 == null) {\n            return new ArrayList<String>();\n        }\n  \
    \      final Integer start = Math.min(idx1, idx2);\n        final Integer end\
    \ = Math.max(idx1, idx2);\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = start + 1; i < end; i++) {\n            result.add(planets[i]);\n\
    \        }\n        return result;", "        ArrayList<String> planets = new\
    \ ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String> sol = new\
    \ ArrayList<>();\n        int index1 = planets.indexOf(planet1);\n        int\
    \ index2 = planets.indexOf(planet2);\n        if(index1 == -1 || index2 == -1)\
    \ {\n            return sol;\n        }\n        if(index1 > index2) {\n     \
    \       int temp = index1;\n            index1 = index2;\n            index2 =\
    \ temp;\n        }\n        for(int i = index1 + 1; i < index2; i++) {\n     \
    \       sol.add(planets.get(i));\n        }\n        return sol;", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int index1 = planets.indexOf(planet1);\n\
    \        int index2 = planets.indexOf(planet2);\n        if (index1 < 0 || index2\
    \ < 0) {\n            return result;\n        }\n        int min = Math.min(index1,\
    \ index2);\n        int max = Math.max(index1, index2);\n        if (min == max)\
    \ {\n            return result;\n        }\n        for (int i = min + 1; i <\
    \ max; i++) {\n            result.add(planets.get(i));\n        }\n        return\
    \ result;", "        // YOUR CODE HERE\n        // LinkedHashSet maintain insertion\
    \ order and eliminate duplicates\n        LinkedHashSet<String> planets = new\
    \ LinkedHashSet<String>(\n                Arrays.asList(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n \
    \       ArrayList<String> result = new ArrayList<String>();\n        if (planets.contains(planet1)\
    \ && planets.contains(planet2)) {\n            int first = -1;\n            int\
    \ second = -1;\n            List<String> planetList = new ArrayList<String>(planets);\n\
    \            for (int i = 0; i < planetList.size(); i++) {\n                if\
    \ (planetList.get(i).equals(planet1))\n                    first = i;\n      \
    \          if (planetList.get(i).equals(planet2))\n                    second\
    \ = i;\n            }\n            if (first < second) {\n                for\
    \ (int i = first + 1; i < second; i++) {\n                    result.add(planetList.get(i));\n\
    \                }\n            } else {\n                for (int i = second\
    \ + 1; i < first; i++) {\n                    result.add(planetList.get(i));\n\
    \                }\n            }\n        }\n        return result;", '        return
    new ArrayList<String>();', '        return null;', "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        String[] planets = new String[] {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        int i1 = -1;\n        int i2 = -1;\n        for (int\
    \ i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                i1 = i;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                i2 = i;\n            }\n        }\n        if (i1 == -1 ||\
    \ i2 == -1) {\n            return res;\n        }\n        for (int i = i1; i\
    \ < i2; i++) {\n            res.add(planets[i]);\n        }\n        return res;",
  "        List<String> planets = new ArrayList<String>(Arrays.asList(\n         \
    \   \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int idx1 = planets.indexOf(planet1);\n        int idx2\
    \ = planets.indexOf(planet2);\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        if (idx1 == -1 || idx2 == -1) {\n            return res;\n        }\n\
    \        if (idx1 < idx2) {\n            for (int i = idx1 + 1; i < idx2; i++)\
    \ {\n                res.add(planets.get(i));\n            }\n        } else {\n\
    \            for (int i = idx2 + 1; i < idx1; i++) {\n                res.add(planets.get(i));\n\
    \            }\n        }\n        return res;", "        ArrayList<String> ans\
    \ = new ArrayList<String>();\n        // Assume our list of planets is sorted\
    \ with respect to the proximity to the sun\n        String[] planets = new String[]\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        boolean planet1Found = false;\n        for (int i = 0;\
    \ i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n\
    \                planet1Found = true;\n            }\n            if (planet1Found\
    \ && !planets[i].equals(planet2)) {\n                ans.add(planets[i]);\n  \
    \          }\n        }\n        return ans;", "        ArrayList<String> s =\
    \ new ArrayList<String>();\n        for (int i = 0; i < 8; i++) {\n          \
    \  String t = getPlanet(i);\n            if (planet1.equals(t) || planet2.equals(t))\
    \ {\n                s.add(t);\n            }\n        }\n        if (s.size()\
    \ == 2) {\n            s.sort(new CompareString());\n            if (s.get(0).equals(planet1))\
    \ {\n                s.remove(0);\n            } else {\n                s.remove(1);\n\
    \            }\n        } else {\n            s.clear();\n        }\n        return\
    \ s;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> result = new ArrayList<String>();\n        boolean b1\
    \ = planets.contains(planet1);\n        boolean b2 = planets.contains(planet2);\n\
    \        if (b1 && b2) {\n            int idx1 = planets.indexOf(planet1);\n \
    \           int idx2 = planets.indexOf(planet2);\n            for (int i = idx1\
    \ + 1; i < idx2; i++) {\n                result.add(planets.get(i));\n       \
    \     }\n        }\n        return result;", '        return new ArrayList<String>();',
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        ArrayList<String> result = new ArrayList<String>();\n        if (!planets.contains(planet1)\
    \ || !planets.contains(planet2)) {\n            return result;\n        }\n  \
    \      int idx1 = planets.indexOf(planet1);\n        int idx2 = planets.indexOf(planet2);\n\
    \        if (idx1 > idx2) {\n            // swap\n            int tmp = idx1;\n\
    \            idx1 = idx2;\n            idx2 = tmp;\n        }\n        for (int\
    \ i = idx1 + 1; i < idx2; i++) {\n            result.add(planets.get(i));\n  \
    \      }\n        return result;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n \
    \       if (planets.contains(planet1) && planets.contains(planet2)) {\n      \
    \      if (planets.indexOf(planet1) < planets.indexOf(planet2)) {\n          \
    \      for (int i = planets.indexOf(planet1) + 1; i < planets.indexOf(planet2);\
    \ i++) {\n                    res.add(planets.get(i));\n                }\n  \
    \          } else {\n                for (int i = planets.indexOf(planet2) + 1;\
    \ i < planets.indexOf(planet1); i++) {\n                    res.add(planets.get(i));\n\
    \                }\n            }\n        }\n        return res;", "        ArrayList<String>\
    \ planets = new ArrayList<>(Arrays.asList(\n            \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n \
    \       int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if(i1 == -1 || i2 == -1) {\n            return new ArrayList<String>();\n\
    \        }\n        int m = Math.min(i1, i2);\n        int M = Math.max(i1, i2);\n\
    \        return new ArrayList<String>(planets.subList(m+1, M));", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int i1\
    \ = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n  \
    \      ArrayList<String> ans = new ArrayList<String>();\n        if (i1 == -1\
    \ || i2 == -1) return ans;\n        if (i1 <= i2) {\n            for (int i =\
    \ i1 + 1; i < i2; i++) ans.add(planets.get(i));\n        } else {\n          \
    \  for (int i = i2 + 1; i < i1; i++) ans.add(planets.get(i));\n        }\n   \
    \     return ans;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 < 0 || i2 < 0) {\n            return result;\n        }\n    \
    \    if (i1 > i2) {\n            String s = planet1;\n            planet1 = planet2;\n\
    \            planet2 = s;\n        }\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        for (int i = p1 + 1; i <\
    \ p2; i++) {\n            result.add(planets.get(i));\n        }\n        return\
    \ result;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int p1i = planets.indexOf(planet1);\n        int p2i = planets.indexOf(planet2);\n\
    \        if (p1i >= 0 && p2i >= 0) {\n            if (p1i < p2i) {\n         \
    \       for (int i = p1i+1; i < p2i; i++) {\n                    result.add(planets.get(i));\n\
    \                }\n            } else {\n                for (int i = p2i+1;\
    \ i < p1i; i++) {\n                    result.add(planets.get(i));\n         \
    \       }\n            }\n        }\n        return result;", "        if(!(contains(planet1)\
    \ && contains(planet2)))\n            return new ArrayList<String>();\n      \
    \  ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        if(index1<index2)\n\
    \            result.addAll(planets.subList(index1+1, index2));\n        else\n\
    \            result.addAll(planets.subList(index2+1, index1));\n        return\
    \ result;", '        return new ArrayList<String>();', "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        String[] planets = {\n            \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n        };\n        boolean flg = false;\n        boolean flg2\
    \ = false;\n        int a = 0;\n        int b = 0;\n        for (int i = 0; i\
    \ < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n  \
    \              flg = true;\n                a = i;\n            }\n          \
    \  if (planets[i].equals(planet2)) {\n                flg2 = true;\n         \
    \       b = i;\n            }\n        }\n        if (flg && flg2) {\n       \
    \     if (a < b) {\n                for (int i = a + 1; i < b; i++) {\n      \
    \              res.add(planets[i]);\n                }\n            } else {\n\
    \                for (int i = b + 1; i < a; i++) {\n                    res.add(planets[i]);\n\
    \                }\n            }\n        }\n        return res;", "        final\
    \ String[] planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        ArrayList<String> result = new\
    \ ArrayList<String>();\n        int idx1 = -1;\n        int idx2 = -1;\n     \
    \   for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                idx1 = i;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                idx2 = i;\n            }\n        }\n        if (idx1 ==\
    \ -1 || idx2 == -1) {\n            return result;\n        }\n        int start\
    \ = Math.min(idx1, idx2);\n        int end = Math.max(idx1, idx2);\n        for\
    \ (int i = start + 1; i < end; i++) {\n            result.add(planets[i]);\n \
    \       }\n        return result;", "        String[] planets = new String[]{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        Boolean found1 = false;\n        Boolean found2 = false;\n        for\
    \ (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                found1 = true;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                found2 = true;\n            }\n            if (found1 &&\
    \ found2) {\n                break;\n            }\n        }\n        if (found1\
    \ && found2) {\n            int index1 = -1;\n            int index2 = -1;\n \
    \           for (int i = 0; i < planets.length; i++) {\n                if (planets[i].equals(planet1))\
    \ {\n                    index1 = i;\n                }\n                if (planets[i].equals(planet2))\
    \ {\n                    index2 = i;\n                }\n            }\n     \
    \       if (index1 > index2) {\n                for (int i = index2; i < index1;\
    \ i++) {\n                    result.add(planets[i]);\n                }\n   \
    \         } else {\n                for (int i = index1; i < index2; i++) {\n\
    \                    result.add(planets[i]);\n                }\n            }\n\
    \        }\n        return result;", "        ArrayList<String> planets = new\
    \ ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"Venus\", (String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\", (String)\"Neptune\"));\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return result;\n        }\n\
    \        if (p1 > p2) {\n            int temp = p1;\n            p1 = p2;\n  \
    \          p2 = temp;\n        }\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;",
  "        try {\n            ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\n\
    \                \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"));\n            int p1 = planets.indexOf(planet1);\n\
    \            int p2 = planets.indexOf(planet2);\n            if (p1 == -1 || p2\
    \ == -1) {\n                return new ArrayList<String>();\n            }\n \
    \           int min = Math.min(p1, p2);\n            int max = Math.max(p1, p2);\n\
    \            ArrayList<String> list = new ArrayList<String>();\n            for\
    \ (int i = min + 1; i < max; i++) {\n                list.add(planets.get(i));\n\
    \            }\n            return list;\n        } catch (Exception e) {\n  \
    \          return new ArrayList<String>();\n        }", "        // BEGIN\n  \
    \      ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int a = planets.indexOf(planet1);\n        int b = planets.indexOf(planet2);\n\
    \        ArrayList<String> res = new ArrayList<String>();\n        if (a == -1\
    \ || b == -1) {\n            return res;\n        }\n        if (a < b) {\n  \
    \          for (int i = a + 1; i < b; i++) {\n                res.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = b + 1; i < a; i++)\
    \ {\n                res.add(planets.get(i));\n            }\n        }\n    \
    \    return res;\n        // END", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        if (p1 <\
    \ 0 || p2 < 0) {\n            return result;\n        }\n        if (p1 <= p2)\
    \ {\n            for (int i = p1+1; i < p2; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = p2+1; i < p1; i++)\
    \ {\n                result.add(planets.get(i));\n            }\n        }\n \
    \       return result;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> between = new ArrayList<String>();\n\
    \        int ind1 = planets.indexOf(planet1);\n        int ind2 = planets.indexOf(planet2);\n\
    \        if (ind1 == -1 || ind2 == -1) {\n            return between;\n      \
    \  }\n        if (ind1 < ind2) {\n            for (int i = ind1 + 1; i < ind2;\
    \ i++) {\n                between.add(planets.get(i));\n            }\n      \
    \  } else {\n            for (int i = ind2 + 1; i < ind1; i++) {\n           \
    \     between.add(planets.get(i));\n            }\n        }\n        return between;",
  "        ArrayList<String> pls = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n \
    \       ArrayList<String> re = new ArrayList<>();\n        for (int i = pls.indexOf(planet1)\
    \ + 1; i < pls.indexOf(planet2); i++) {\n            re.add(pls.get(i));\n   \
    \     }\n        return re;", "        List<String> planets = Arrays.asList(new\
    \ String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"});\n        int p1 = planets.indexOf(planet1);\n   \
    \     int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n\
    \            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (p1 > p2) {\n            for (int\
    \ i = p2; i < p1; i++) {\n                result.add(planets.get(i));\n      \
    \      }\n        } else {\n            for (int i = p1; i < p2; i++) {\n    \
    \            result.add(planets.get(i));\n            }\n        }\n        return\
    \ result;", "        String[] planets = new String[] { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       ArrayList<String> foundPlanets = new ArrayList<String>();\n        int\
    \ index1 = 0;\n        int index2 = 0;\n        for (int i = 0; i < planets.length;\
    \ i++) {\n            if (planets[i].equals(planet1)) {\n                index1\
    \ = i;\n            }\n            if (planets[i].equals(planet2)) {\n       \
    \         index2 = i;\n            }\n        }\n        if (index1 == 0 || index2\
    \ == 0) {\n            return foundPlanets;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ foundPlanets.add(planets[i]);\n            }\n        } else {\n           \
    \ for (int i = index2 + 1; i < index1; i++) {\n                foundPlanets.add(planets[i]);\n\
    \            }\n        }\n        return foundPlanets;", "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int i1 = planets.indexOf(planet1);\n        int i2 =\
    \ planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n           \
    \ return res;\n        }\n        if (i1 < i2) {\n            for (int i = i1\
    \ + 1; i < i2; i++) {\n                res.add(planets.get(i));\n            }\n\
    \        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n         \
    \       res.add(planets.get(i));\n            }\n        }\n        return res;",
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int first = planets.indexOf(planet1);\n        int second = planets.indexOf(planet2);\n\
    \        if (first == -1 || second == -1) {\n            return new ArrayList<String>();\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    for (int i = Math.min(first, second) + 1; i < Math.max(first, second); i++)\
    \ {\n            result.add(planets.get(i));\n        }\n        return result;",
  "        ArrayList<String> planetList = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        ArrayList<String> result = new ArrayList<String>();\n        int\
    \ planet1Index = planetList.indexOf(planet1);\n        int planet2Index = planetList.indexOf(planet2);\n\
    \        if (planet1Index == -1 || planet2Index == -1) {\n            return result;\n\
    \        }\n        for (int i = planet1Index + 1; i < planet2Index; i++) {\n\
    \            result.add(planetList.get(i));\n        }\n        return result;",
  "        // TODO: Write a correct implementation.\n        return null;", "    \
    \    ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int index1 = -1;\n        int index2 = -1;\n        for (int i = 0; i <\
    \ planets.size(); i++) {\n            if (planets.get(i).equals(planet1)) {\n\
    \                index1 = i;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                index2 = i;\n            }\n        }\n        if (index1\
    \ == -1 || index2 == -1) {\n            return new ArrayList<String>();\n    \
    \    }\n        if (index1 <= index2) {\n            ArrayList<String> res = new\
    \ ArrayList<String>();\n            for (int i = index1; i < index2; i++) {\n\
    \                res.add(planets.get(i));\n            }\n            return res;\n\
    \        } else {\n            ArrayList<String> res = new ArrayList<String>();\n\
    \            for (int i = index1; i > index2; i--) {\n                res.add(planets.get(i));\n\
    \            }\n            return res;\n        }", "        // IMPLEMENT ME\n\
    \        return null;", "        ArrayList<String> ans = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"\
    Venus\")) {\n                ans.add(\"Venus\");\n            } else if (planet2.equals(\"\
    Earth\")) {\n                ans.add(\"Venus\");\n                ans.add(\"Earth\"\
    );\n            } else if (planet2.equals(\"Mars\")) {\n                ans.add(\"\
    Venus\");\n                ans.add(\"Earth\");\n                ans.add(\"Mars\"\
    );\n            } else if (planet2.equals(\"Jupiter\")) {\n                ans.add(\"\
    Venus\");\n                ans.add(\"Earth\");\n                ans.add(\"Mars\"\
    );\n                ans.add(\"Jupiter\");\n            } else if (planet2.equals(\"\
    Saturn\")) {\n                ans.add(\"Venus\");\n                ans.add(\"\
    Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\"\
    );\n                ans.add(\"Saturn\");\n            } else if (planet2.equals(\"\
    Uranus\")) {\n                ans.add(\"Venus\");\n                ans.add(\"\
    Earth\");\n                ans.add(\"Mars\");\n                ans.add(\"Jupiter\"\
    );\n                ans.add(\"Saturn\");\n                ans.add(\"Uranus\");\n\
    \            } else if (planet2.equals(\"Neptune\")) {\n                ans.add(\"\
    Venus\");\n                ans.add(\"Earth\");\n                ans.add(\"Mars\"\
    );\n                ans.add(\"Jupiter\");\n                ans.add(\"Saturn\"\
    );\n                ans.add(\"Uranus\");\n                ans.add(\"Neptune\"\
    );\n            }\n        } else if (planet1.equals(\"Venus\")) {\n         \
    \   if (planet2.equals(\"Earth\")) {\n                ans.add(\"Earth\");\n  \
    \          } else if (planet2.equals(\"Mars\")) {\n                ans.add(\"\
    Earth\");\n                ans.add(\"Mars\");\n            } else if (planet2.equals(\"\
    Jupiter\")) {\n                ans.add(\"Earth\");\n                ans.add(\"\
    Mars\");\n                ans.add(\"Jupiter\");\n            } else if (planet2.equals(\"\
    Saturn\")) {", "        // put your code here\n        return new ArrayList<String>();",
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> result = new ArrayList<String>();\n        boolean found1\
    \ = false;\n        boolean found2 = false;\n        for (int i = 0; i < planets.size();\
    \ i++) {\n            if (planets.get(i).equals(planet1)) {\n                found1\
    \ = true;\n            }\n            if (planets.get(i).equals(planet2)) {\n\
    \                found2 = true;\n            }\n            if (found1) {\n  \
    \              result.add(planets.get(i));\n            }\n            if (found2)\
    \ {\n                break;\n            }\n        }\n        if (found1 && found2)\
    \ {\n            return result;\n        } else {\n            return new ArrayList<String>();\n\
    \        }", "        ArrayList<String> solarSystem = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        boolean valid1 = solarSystem.contains(planet1);\n  \
    \      boolean valid2 = solarSystem.contains(planet2);\n        int firstIndex\
    \ = solarSystem.indexOf(planet1);\n        int secondIndex = solarSystem.indexOf(planet2);\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        if (valid1\
    \ && valid2 && firstIndex < secondIndex) {\n            for (int i = firstIndex\
    \ + 1; i < secondIndex; i++) {\n                result.add(solarSystem.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if(!planets.contains(planet1) ||\
    \ !planets.contains(planet2)) {\n            return result;\n        }\n     \
    \   int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n\
    \        if(p1 > p2) {\n            int temp = p1;\n            p1 = p2;\n   \
    \         p2 = temp;\n        }\n        for(int i = p1 + 1; i < p2; i++) {\n\
    \            result.add(planets.get(i));\n        }\n        return result;",
  "        ArrayList<String> lst=new ArrayList<String>();\n        lst.add(\"Mercury\"\
    );\n        lst.add(\"Venus\");\n        lst.add(\"Earth\");\n        lst.add(\"\
    Mars\");\n        lst.add(\"Jupiter\");\n        lst.add(\"Saturn\");\n      \
    \  lst.add(\"Uranus\");\n        lst.add(\"Neptune\");\n        int pos1=lst.indexOf(planet1);\n\
    \        int pos2=lst.indexOf(planet2);\n        if(pos1==-1||pos2==-1) return\
    \ new ArrayList<String>();\n        ArrayList<String> result=new ArrayList<String>();\n\
    \        if(pos1<pos2){\n            result.addAll(lst.subList(pos1+1, pos2));\n\
    \        }\n        else{\n            result.addAll(lst.subList(pos2+1, pos1));\n\
    \        }\n        return result;", "        ArrayList<String> planets = new\
    \ ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"Venus\", (String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\", (String)\"Neptune\"));\n        int i = 0;\n        while (!(planets.get(i).equals(planet1)))\
    \ {\n            i++;\n        }\n        int j = 0;\n        while (!(planets.get(j).equals(planet2)))\
    \ {\n            j++;\n        }\n        int beg = Math.min(i, j);\n        int\
    \ end = Math.max(i, j);\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int k = beg + 1; k < end; k++) {\n            result.add(planets.get(k));\n\
    \        }\n        return result;", "        String planets = \"Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune\"\
    ;\n        ArrayList<String> p = new ArrayList<String>(Arrays.asList(planets.split(\"\
    ,\")));\n        int i1 = p.indexOf(planet1);\n        int i2 = p.indexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new ArrayList<String>();\n        if\
    \ (i1 > i2) {\n            int t = i1;\n            i1 = i2;\n            i2 =\
    \ t;\n        }\n        return new ArrayList<String>(p.subList(i1 + 1, i2));",
  "        // put your code here\n        ArrayList<String> inBetween = new ArrayList<String>();\n\
    \        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int planet1Index = planets.indexOf(planet1);\n        int planet2Index\
    \ = planets.indexOf(planet2);\n        if (planet1Index == -1 || planet2Index\
    \ == -1) {\n            return inBetween;\n        }\n        if (planet1Index\
    \ < planet2Index) {\n            for (int i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n                inBetween.add(planets.get(i));\n            }\n    \
    \    } else {\n            for (int i = planet2Index + 1; i < planet1Index; i++)\
    \ {\n                inBetween.add(planets.get(i));\n            }\n        }\n\
    \        return inBetween;", '        // Write your code here.', "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (!planets.contains(planet1) ||\
    \ !planets.contains(planet2)) {\n            return result;\n        }\n     \
    \   int startIndex = 0;\n        int endIndex = 0;\n        for (int i = 0; i\
    \ < planets.size(); i++) {\n            if (planets.get(i).equals(planet1)) {\n\
    \                startIndex = i;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                endIndex = i;\n            }\n        }\n        if (startIndex\
    \ > endIndex) {\n            for (int i = startIndex; i >= endIndex; i--) {\n\
    \                result.add(planets.get(i));\n            }\n        } else {\n\
    \            for (int i = startIndex; i <= endIndex; i++) {\n                result.add(planets.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String[] planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n        int index1 = -1;\n        int index2 = -1;\n        for (int i = 0;\
    \ i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n\
    \                index1 = i;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                index2 = i;\n            }\n        }\n        if (index1\
    \ == -1 || index2 == -1) {\n            return result;\n        }\n        if\
    \ (index1 < index2) {\n            for (int i = index1 + 1; i < index2; i++) {\n\
    \                result.add(planets[i]);\n            }\n        } else {\n  \
    \          for (int i = index2 + 1; i < index1; i++) {\n                result.add(planets[i]);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ ans = new ArrayList<String>();\n        int index1 = -1;\n        int index2\
    \ = -1;\n        for (int i = 0; i < planets.size(); i++) {\n            if (planets.get(i).equals(planet1))\
    \ {\n                index1 = i;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                index2 = i;\n            }\n        }\n        if (index1\
    \ == -1 || index2 == -1) {\n            return ans;\n        }\n        for (int\
    \ i = Math.min(index1, index2) + 1; i < Math.max(index1, index2); i++) {\n   \
    \         ans.add(planets.get(i));\n        }\n        return ans;", "       \
    \ ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        ArrayList<String> between = new ArrayList<String>();\n        int\
    \ index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1)\n            return between;\n    \
    \    int start = Math.min(index1, index2);\n        int end = Math.max(index1,\
    \ index2);\n        for (int i = start + 1; i < end; i++)\n            between.add(planets.get(i));\n\
    \        return between;", "        if(!isPlanet(planet1) || !isPlanet(planet2))\
    \ {\n            return new ArrayList<String>();\n        }\n        final int\
    \ i1 = orbit(planet1);\n        final int i2 = orbit(planet2);\n        return\
    \ new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"\
    Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"\
    Neptune\"))\n            .stream()\n            .filter(o -> orbit(o) > i1 &&\
    \ orbit(o) < i2)\n            .collect(Collectors.toCollection(ArrayList::new));",
  "        String[] planets = new String[] {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        ArrayList<String>\
    \ p1 = new ArrayList<String>();\n        ArrayList<String> p2 = new ArrayList<String>();\n\
    \        int f = 0;\n        int c = 0;\n        for (int i = 0; i < planets.length;\
    \ i++) {\n            if (planets[i].equals(planet1)) {\n                f = i;\n\
    \            }\n            if (planets[i].equals(planet2)) {\n              \
    \  c = i;\n            }\n        }\n        for (int i = f; i < c; i++) {\n \
    \           p1.add(planets[i]);\n        }\n        for (int i = c; i < f; i++)\
    \ {\n            p2.add(planets[i]);\n        }\n        if (p1.size() > p2.size())\
    \ {\n            return p2;\n        } else {\n            return p1;\n      \
    \  }", "        ArrayList<String> result = new ArrayList<String>();\n        String[]\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n        for (int i = 0; i < planets.length; i++)\
    \ {\n            if (planets[i].equals(planet1)) {\n                for (int j\
    \ = i + 1; j < planets.length; j++) {\n                    if (planets[j].equals(planet2))\
    \ {\n                        for (int k = i + 1; k < j; k++) {\n             \
    \               result.add(planets[k]);\n                        }\n         \
    \               return result;\n                    }\n                }\n   \
    \         }\n        }\n        return result;", "        ArrayList<String> planets\
    \ = new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int planet1Index\
    \ = planets.indexOf(planet1);\n        int planet2Index = planets.indexOf(planet2);\n\
    \        if (planet1Index == -1 || planet2Index == -1) {\n            return new\
    \ ArrayList<>();\n        }\n        int lowerIndex = Math.min(planet1Index, planet2Index);\n\
    \        int upperIndex = Math.max(planet1Index, planet2Index);\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (int i = lowerIndex; i < upperIndex;\
    \ i++) {\n            result.add(planets.get(i));\n        }\n        return result;",
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 < 0 || i2 < 0) {\n            return new ArrayList<String>();\n\
    \        }\n        if (i1 > i2) {\n            int tmp = i1;\n            i1\
    \ = i2;\n            i2 = tmp;\n        }\n        ArrayList<String> result =\
    \ new ArrayList<String>();\n        while (i1 != i2) {\n            result.add(planets.get(i1));\n\
    \            i1++;\n        }\n        return result;", "        if (planet1.equals(\"\
    Mercury\"))\n            if (planet2.equals(\"Mercury\"))\n                return\
    \ new ArrayList<String>();\n            else if (planet2.equals(\"Venus\"))\n\
    \                return new ArrayList<String>(Arrays.asList(\"Venus\"));\n   \
    \         else if (planet2.equals(\"Earth\"))\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\"));\n            else if (planet2.equals(\"Mars\"))\n      \
    \          return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"\
    Mars\"));\n            else if (planet2.equals(\"Jupiter\"))\n               \
    \ return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\"));\n            else if (planet2.equals(\"Saturn\"))\n             \
    \   return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"));\n            else if (planet2.equals(\"Uranus\"))\n\
    \                return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n            else if (planet2.equals(\"\
    Neptune\"))\n                return new ArrayList<String>(Arrays.asList(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n \
    \           else\n                return new ArrayList<String>();\n        else\
    \ if (planet1.equals(\"Venus\"))\n            if (planet2.equals(\"Venus\"))\n\
    \                return new ArrayList<String>();\n            else if (planet2.equals(\"\
    Earth\"))\n                return new ArrayList<String>(Arrays.asList(\"Earth\"\
    ));\n            else if (planet2.equals(\"Mars\"))\n                return new\
    \ ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\"));\n            else if\
    \ (planet2.equals(\"Jupiter\"))\n                return new ArrayList<String>(Arrays.asList(\"\
    Earth\", \"Mars\", \"Jupiter\"));\n            else if (planet2.equals(\"Saturn\"\
    ))\n", "        if(planet1.equals(\"Mercury\")){\n            if(planet2.equals(\"\
    Mercury\")){\n                return new ArrayList<String>();\n            }\n\
    \            else if(planet2.equals(\"Venus\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\"));\n            }\n            else if(planet2.equals(\"Earth\")){\n \
    \               return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"\
    ));\n            }\n            else if(planet2.equals(\"Mars\")){\n         \
    \       return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\"\
    ));\n            }\n            else if(planet2.equals(\"Jupiter\")){\n      \
    \          return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\"));\n            }\n            else if(planet2.equals(\"Saturn\"\
    )){\n                return new ArrayList<String>(Arrays.asList(\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n            }\n            else\
    \ if(planet2.equals(\"Uranus\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n       \
    \     }\n            else if(planet2.equals(\"Neptune\")){\n                return\
    \ new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"));\n            }\n            else{\n \
    \               return new ArrayList<String>();\n            }\n        }\n  \
    \      else if(planet1.equals(\"Venus\")){\n            if(planet2.equals(\"Mercury\"\
    )){\n                return new ArrayList<String>();\n            }\n        \
    \    else if(planet2.equals(\"Venus\")){\n                return new ArrayList<String>();\n\
    \            }\n            else if(planet2.equals(\"Earth\")){\n            \
    \    return new ArrayList<String>(Arrays.asList(\"Earth\"));\n            }\n\
    \            else if(planet2.equals(\"", "        String planets[] = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n        ArrayList<String> res = new ArrayList<String>();\n        int p1 =\
    \ 0, p2 = 0;\n        for (int i = 0; i < planets.length; i++) {\n           \
    \ if (planets[i].equals(planet1)) {\n                p1 = i;\n            }\n\
    \            if (planets[i].equals(planet2)) {\n                p2 = i;\n    \
    \        }\n        }\n        for (int i = p1; i < p2; i++) {\n            res.add(planets[i]);\n\
    \        }\n        for (int i = p2; i < p1; i++) {\n            res.add(planets[i]);\n\
    \        }\n        return res;", '        return null;', "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ list = new ArrayList<String>();\n        int i1 = planets.indexOf(planet1);\n\
    \        int i2 = planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return list;\n        }\n        if (i1 < i2) {\n           \
    \ for (int i = i1 + 1; i < i2; i++) {\n                list.add(planets.get(i));\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                list.add(planets.get(i));\n            }\n        }\n   \
    \     return list;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            int start = planets.indexOf(planet1);\n            int end =\
    \ planets.indexOf(planet2);\n            if (start > end) {\n                ArrayList<String>\
    \ result = new ArrayList<String>();\n                for (int i = start - 1; i\
    \ > end; i--) {\n                    result.add(planets.get(i));\n           \
    \     }\n                return result;\n            } else {\n              \
    \  ArrayList<String> result = new ArrayList<String>();\n                for (int\
    \ i = start + 1; i < end; i++) {\n                    result.add(planets.get(i));\n\
    \                }\n                return result;\n            }\n        } else\
    \ {\n            return new ArrayList<String>();\n        }", "        // Write\
    \ your code here\n        return new ArrayList<String>();", '        return new
    ArrayList<String>();', "        if (planet1.compareTo(\"Mercury\") < 0 || planet1.compareTo(\"\
    Neptune\") > 0 || planet2.compareTo(\"Mercury\") < 0 || planet2.compareTo(\"Neptune\"\
    ) > 0) {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        if (planet1.compareTo(planet2) > 0)\
    \ {\n            String tmp = planet1;\n            planet1 = planet2;\n     \
    \       planet2 = tmp;\n        }\n        String[] planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n        boolean start = false;\n        for (int i = 0; i < planets.length;\
    \ i++) {\n            if (start && planets[i].compareTo(planet2) == 0) {\n   \
    \             break;\n            }\n            if (start) {\n              \
    \  ret.add(planets[i]);\n            }\n            if (planets[i].compareTo(planet1)\
    \ == 0) {\n                start = true;\n            }\n        }\n        return\
    \ ret;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int p1 = planets.indexOf(planet1);\n        int p2 = planets.indexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new ArrayList<String>();\n\
    \        }\n        int pos = 0;\n        int temp = p1;\n        if (p1 > p2)\
    \ {\n            temp = p2;\n            p2 = p1;\n            p1 = temp;\n  \
    \      }\n        ArrayList<String> ret = new ArrayList<String>();\n        while\
    \ (temp < p2) {\n            ret.add(planets.get(temp));\n            temp++;\n\
    \        }\n        return ret;", "        // write your code here\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> ordem = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      Boolean ordemCrescente = true;\n        if(!ordem.contains(planet1) ||\
    \ !ordem.contains(planet2)){\n            return result;\n        }\n        if(ordem.indexOf(planet1)\
    \ > ordem.indexOf(planet2)){\n            ordemCrescente = false;\n        }\n\
    \        if(ordemCrescente){\n            for(int i = ordem.indexOf(planet1);\
    \ i < ordem.indexOf(planet2); i++){\n                result.add(ordem.get(i));\n\
    \            }\n        }else{\n            for(int i = ordem.indexOf(planet1);\
    \ i > ordem.indexOf(planet2); i--){\n                result.add(ordem.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int index1\
    \ = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\
    \        ArrayList<String> res = new ArrayList<String>();\n        if (index1\
    \ == -1 || index2 == -1 || Math.abs(index1 - index2) == 7) {\n            return\
    \ res;\n        }\n        if (index1 < index2) {\n            for (int i = index1\
    \ + 1; i < index2; i++) {\n                res.add(planets.get(i));\n        \
    \    }\n        } else {\n            for (int i = index2 + 1; i < index1; i++)\
    \ {\n                res.add(planets.get(i));\n            }\n        }\n    \
    \    return res;", "        ArrayList<String> output = new ArrayList<String>();\n\
    \        String[] planets = {\n            \"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n   \
    \     int i1 = Arrays.asList(planets).indexOf(planet1);\n        int i2 = Arrays.asList(planets).indexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return output;\n        }\n\
    \        int min = i1 < i2 ? i1 : i2;\n        int max = i1 > i2 ? i1 : i2;\n\
    \        for (int i = min + 1; i < max; i++) {\n            output.add(planets[i]);\n\
    \        }\n        return output;", "        ArrayList<String> answer = new ArrayList<String>();\n\
    \        ArrayList<String> allPlanets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int index1 = allPlanets.indexOf(planet1);\n        int\
    \ index2 = allPlanets.indexOf(planet2);\n        if (index1 > index2) {\n    \
    \        answer = new ArrayList<String>(allPlanets.subList(index2 + 1, index1));\n\
    \        } else if (index1 < index2) {\n            answer = new ArrayList<String>(allPlanets.subList(index1\
    \ + 1, index2));\n        }\n        return answer;", '        return new ArrayList<String>();',
  "        // Your code goes here\n        return null;", "        String[] planets\
    \ = new String[] {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"};\n        int index1 = Arrays.asList(planets).indexOf(planet1);\n\
    \        int index2 = Arrays.asList(planets).indexOf(planet2);\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if(index1 < 0 || index2 < 0 || index1\
    \ == index2) return result;\n        if(index1 > index2) {\n            index1\
    \ ^= index2;\n            index2 ^= index1;\n            index1 ^= index2;\n \
    \       }\n        for(int i = index1 + 1; i < index2; i++) result.add(planets[i]);\n\
    \        return result;", "        List<String> planets = Arrays.asList(new String[]\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"});\n        int pos1 = planets.indexOf(planet1);\n        int pos2\
    \ = planets.indexOf(planet2);\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        if (pos1 == -1 || pos2 == -1) return res;\n        if (pos1 > pos2) {\n\
    \            int aux = pos1;\n            pos1 = pos2;\n            pos2 = aux;\n\
    \        }\n        for (int i = pos1 + 1; i < pos2; i++) {\n            res.add(planets.get(i));\n\
    \        }\n        return res;", "        String[] planets = new String[]{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n        ArrayList<String> out = new ArrayList<String>();\n  \
    \      int index1 = 0;\n        int index2 = 0;\n        for (int i = 0; i < planets.length;\
    \ i++) {\n            if (planets[i].equals(planet1)) index1 = i;\n          \
    \  if (planets[i].equals(planet2)) index2 = i;\n        }\n        if (index1\
    \ == 0 || index2 == 0) return out;\n        if (index1 < index2) {\n         \
    \   for (int i = index1 + 1; i < index2; i++) {\n                out.add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = index2 + 1; i < index1;\
    \ i++) {\n                out.add(planets[i]);\n            }\n        }\n   \
    \     return out;", "        // 2 <= n <= 30\n        if (planet1.length() ==\
    \ 0 || planet2.length() == 0) {\n            return new ArrayList<String>();\n\
    \        }\n        ArrayList<String> result = new ArrayList<String>();\n    \
    \    String[] planets = new String[]{\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        String[] planetsReversed\
    \ = new String[]{\"Neptune\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Mars\", \"\
    Earth\", \"Venus\", \"Mercury\"};\n        if (Arrays.asList(planets).contains(planet1)\
    \ && Arrays.asList(planets).contains(planet2)) {\n            if (Arrays.asList(planets).indexOf(planet1)\
    \ < Arrays.asList(planets).indexOf(planet2)) {\n                for (int i = Arrays.asList(planets).indexOf(planet1);\
    \ i < Arrays.asList(planets).indexOf(planet2); i++) {\n                    result.add(planets[i]);\n\
    \                }\n            } else {\n                for (int i = Arrays.asList(planetsReversed).indexOf(planet1);\
    \ i < Arrays.asList(planetsReversed).indexOf(planet2); i++) {\n              \
    \      result.add(planetsReversed[i]);\n                }\n            }\n   \
    \     }\n        return result;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        int i1 = planets.indexOf(planet1);\n        int i2 =\
    \ planets.indexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n           \
    \ return new ArrayList<String>();\n        }\n        if (i1 > i2) {\n       \
    \     i1 = i1 ^ i2;\n            i2 = i1 ^ i2;\n            i1 = i1 ^ i2;\n  \
    \      }\n        ArrayList<String> ret = new ArrayList<String>();\n        for\
    \ (int i = i1 + 1; i < i2; i++) {\n            ret.add(planets.get(i));\n    \
    \    }\n        return ret;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        String start = planet1.toLowerCase();\n        String\
    \ end = planet2.toLowerCase();\n        int position1 = -1;\n        int position2\
    \ = -1;\n        for (int i = 0; i < planets.size(); i++) {\n            if (planets.get(i).toLowerCase().equals(start))\
    \ {\n                position1 = i;\n            }\n            if (planets.get(i).toLowerCase().equals(end))\
    \ {\n                position2 = i;\n            }\n        }\n        if (position1\
    \ < 0 || position2 < 0) {\n            return new ArrayList<String>();\n     \
    \   }\n        int min = Math.min(position1, position2);\n        int max = Math.max(position1,\
    \ position2);\n        ArrayList<String> result = new ArrayList<String>();\n \
    \       for (int i = min + 1; i < max; i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;", "        ArrayList<String> outerPlanets =\
    \ new ArrayList<String>(Arrays.asList(\"Jupiter\", \"Saturn\", \"Uranus\", \"\
    Neptune\"));\n        ArrayList<String> innerPlanets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\"));\n        if(outerPlanets.contains(planet1)\
    \ && outerPlanets.contains(planet2)) {\n            return new ArrayList<String>(outerPlanets.subList(outerPlanets.indexOf(planet1),\
    \ outerPlanets.indexOf(planet2)));\n        }\n        if(innerPlanets.contains(planet1)\
    \ && innerPlanets.contains(planet2)) {\n            return new ArrayList<String>(innerPlanets.subList(innerPlanets.indexOf(planet1),\
    \ innerPlanets.indexOf(planet2)));\n        }\n        return new ArrayList<String>();",
  "        // Put your code here\n        return null;", "        ArrayList<String>\
    \ planetList = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n     \
    \   ArrayList<String> result = new ArrayList<String>();\n        int start, end;\n\
    \        if(planetList.contains(planet1) && planetList.contains(planet2)){\n \
    \           start = planetList.indexOf(planet1);\n            end = planetList.indexOf(planet2);\n\
    \            for(int i = Math.min(start, end) + 1; i < Math.max(start, end); i++){\n\
    \                result.add(planetList.get(i));\n            }\n        }\n  \
    \      return result;", "        ArrayList<String> orbits = new ArrayList<>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> orderedOrbits = new ArrayList<>();\n\
    \        if(orbits.contains(planet1) && orbits.contains(planet2)) {\n        \
    \    int firstPlanet = orbits.indexOf(planet1);\n            int secondPlanet\
    \ = orbits.indexOf(planet2);\n            if(firstPlanet < secondPlanet) {\n \
    \               orderedOrbits = new ArrayList<>(orbits.subList(firstPlanet+1,\
    \ secondPlanet));\n            } else {\n                orderedOrbits = new ArrayList<>(orbits.subList(secondPlanet+1,\
    \ firstPlanet));\n            }\n        }\n        return orderedOrbits;", " \
    \       List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (planet1 == \"Mercury\") {\n \
    \           for (int i = 1; i < planets.indexOf(planet2); i++) {\n           \
    \     result.add(planets.get(i));\n            }\n        } else if (planet2 ==\
    \ \"Neptune\") {\n            for (int i = planets.indexOf(planet1) + 1; i < planets.size();\
    \ i++) {\n                result.add(planets.get(i));\n            }\n       \
    \ } else {\n            for (int i = planets.indexOf(planet1) + 1; i < planets.indexOf(planet2);\
    \ i++) {\n                result.add(planets.get(i));\n            }\n       \
    \ }\n        return result;", "        if (planet1.equals(\"Mercury\")) {\n  \
    \          if (planet2.equals(\"Venus\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\"));\n            } else if (planet2.equals(\"Earth\")) {\n            \
    \    return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"));\n    \
    \        } else if (planet2.equals(\"Mars\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mars\"));\n            } else if (planet2.equals(\"Jupiter\"\
    )) {\n                return new ArrayList<String>(Arrays.asList(\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\"));\n            } else if (planet2.equals(\"Saturn\"\
    )) {\n                return new ArrayList<String>(Arrays.asList(\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n            } else if (planet2.equals(\"\
    Uranus\")) {\n                return new ArrayList<String>(Arrays.asList(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n            } else\
    \ if (planet2.equals(\"Neptune\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n            } else {\n                return new ArrayList<String>();\n \
    \           }\n        } else if (planet1.equals(\"Venus\")) {\n            if\
    \ (planet2.equals(\"Earth\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Earth\"));\n            } else if (planet2.equals(\"Mars\")) {\n             \
    \   return new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\"));\n      \
    \      } else if (planet2.equals(\"Jupiter\")) {\n                return new ArrayList<String>(Arrays.asList(\"\
    Earth\", \"Mars\", \"Jupiter\"));\n            } else if (planet2.equals(\"Saturn\"\
    )) {\n                return new ArrayList<String>(Arrays.asList(\"Earth\", \"\
    Mars\", \"", "        // Implement me\n        //\n        // For example,\n \
    \       // return new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\"));\n\
    \        //\n        return null;", "        int p1 = -1;\n        int p2 = -1;\n\
    \        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"};\n        for (int i = 0; i < planets.length;\
    \ i++) {\n            if (planets[i].equals(planet1)) {\n                p1 =\
    \ i;\n            }\n            if (planets[i].equals(planet2)) {\n         \
    \       p2 = i;\n            }\n        }\n        if (p1 < 0 || p2 < 0) {\n \
    \           return new ArrayList<String>();\n        }\n        if (p1 < p2) {\n\
    \            ArrayList<String> answer = new ArrayList<String>();\n           \
    \ for (int i = p1 + 1; i < p2; i++) {\n                answer.add(planets[i]);\n\
    \            }\n            return answer;\n        } else {\n            ArrayList<String>\
    \ answer = new ArrayList<String>();\n            for (int i = p2 + 1; i < p1;\
    \ i++) {\n                answer.add(planets[i]);\n            }\n           \
    \ return answer;\n        }", "        //variables\n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int index1 = 0;\n        int index2\
    \ = 0;\n        boolean contains1 = false;\n        boolean contains2 = false;\n\
    \        //1\n        for (int i = 0; i < planets.size(); i++) {\n           \
    \ if (planets.get(i).equals(planet1)) {\n                index1 = i;\n       \
    \         contains1 = true;\n            }\n            if (planets.get(i).equals(planet2))\
    \ {\n                index2 = i;\n                contains2 = true;\n        \
    \    }\n        }\n        //2\n        if (contains1 == false || contains2 ==\
    \ false) {\n            return result;\n        }\n        //3\n        if (index1\
    \ > index2) {\n            int temp = index1;\n            index1 = index2;\n\
    \            index2 = temp;\n        }\n        //4\n        for (int i = index1\
    \ + 1; i < index2; i++) {\n            result.add(planets.get(i));\n        }\n\
    \        //5\n        return result;", "        ArrayList<String> planets = new\
    \ ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new ArrayList<String>();\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        if (p1 < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n   \
    \             res.add(planets.get(i));\n            }\n        } else {\n    \
    \        for (int i = p2 + 1; i < p1; i++) {\n                res.add(planets.get(i));\n\
    \            }\n        }\n        return res;", '        return new ArrayList<String>();',
  "        HashMap<String, Integer> planets = new HashMap<String, Integer>();\n  \
    \      planets.put(\"Mercury\", 0);\n        planets.put(\"Venus\", 1);\n    \
    \    planets.put(\"Earth\", 2);\n        planets.put(\"Mars\", 3);\n        planets.put(\"\
    Jupiter\", 4);\n        planets.put(\"Saturn\", 5);\n        planets.put(\"Uranus\"\
    , 6);\n        planets.put(\"Neptune\", 7);\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        if (planets.containsKey(planet1) && planets.containsKey(planet2))\
    \ {\n            Integer p1 = planets.get(planet1);\n            Integer p2 =\
    \ planets.get(planet2);\n            if (p1 > p2) {\n                Integer temp\
    \ = p1;\n                p1 = p2;\n                p2 = temp;\n            }\n\
    \            for (int i = p1 + 1; i < p2; i++) {\n                for (Map.Entry<String,\
    \ Integer> planet : planets.entrySet()) {\n                    if (planet.getValue()\
    \ == i) {\n                        result.add(planet.getKey());\n            \
    \        }\n                }\n            }\n        }\n        return result;",
  "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        Integer i1 = planets.indexOf(planet1);\n        Integer i2 = planets.indexOf(planet2);\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        for (int\
    \ i = Math.min(i1, i2) + 1; i < Math.max(i1, i2); i++) {\n            result.add(planets.get(i));\n\
    \        }\n        return result;", "        ArrayList<String> l = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\"))\n            l.add(\"Venus\");\n   \
    \     if (planet1.equals(\"Venus\"))\n            l.add(\"Earth\");\n        if\
    \ (planet1.equals(\"Earth\"))\n            l.add(\"Mars\");\n        if (planet1.equals(\"\
    Mars\"))\n            l.add(\"Jupiter\");\n        if (planet1.equals(\"Jupiter\"\
    ))\n            l.add(\"Saturn\");\n        if (planet1.equals(\"Saturn\"))\n\
    \            l.add(\"Uranus\");\n        if (planet1.equals(\"Uranus\"))\n   \
    \         l.add(\"Neptune\");\n        int i = l.indexOf(planet2);\n        return\
    \ new ArrayList<String>(l.subList(0, i));", "        final String[] planets =\
    \ new String[] {\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n        final int\
    \ i1 = Arrays.asList(planets).indexOf(planet1);\n        final int i2 = Arrays.asList(planets).indexOf(planet2);\n\
    \        ArrayList<String> res = new ArrayList<String>();\n        if (i1 < 0\
    \ || i2 < 0) return res;\n        if (i1 < i2) {\n            for (int i = i1\
    \ + 1; i < i2; i++) {\n                res.add(planets[i]);\n            }\n \
    \       } else {\n            for (int i = i2 + 1; i < i1; i++) {\n          \
    \      res.add(planets[i]);\n            }\n        }\n        return res;", " \
    \       ArrayList<String> planetList = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      int indexPlanet1 = planetList.indexOf(planet1);\n        int indexPlanet2\
    \ = planetList.indexOf(planet2);\n        if (indexPlanet1 == -1 || indexPlanet2\
    \ == -1)\n            return new ArrayList<String>();\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (indexPlanet1 < indexPlanet2)\
    \ {\n            for (int i = indexPlanet1 + 1; i < indexPlanet2; i++) {\n   \
    \             result.add(planetList.get(i));\n            }\n        } else {\n\
    \            for (int i = indexPlanet2 + 1; i < indexPlanet1; i++) {\n       \
    \         result.add(planetList.get(i));\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> planetsList = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> planetsFound = new ArrayList<String>();\n\
    \        int indexPlanet1 = -1;\n        int indexPlanet2 = -1;\n        for (int\
    \ i = 0; i < planetsList.size(); i++) {\n            if (planetsList.get(i).equals(planet1))\
    \ {\n                indexPlanet1 = i;\n            }\n            if (planetsList.get(i).equals(planet2))\
    \ {\n                indexPlanet2 = i;\n            }\n        }\n        if (indexPlanet1\
    \ == -1 || indexPlanet2 == -1) {\n            return planetsFound;\n        }\n\
    \        int startIndex = 0;\n        int endIndex = 0;\n        if (indexPlanet1\
    \ < indexPlanet2) {\n            startIndex = indexPlanet1;\n            endIndex\
    \ = indexPlanet2;\n        } else {\n            startIndex = indexPlanet2;\n\
    \            endIndex = indexPlanet1;\n        }\n        for (int i = startIndex\
    \ + 1; i < endIndex; i++) {\n            planetsFound.add(planetsList.get(i));\n\
    \        }\n        return planetsFound;", "        ArrayList<String> pls = new\
    \ ArrayList<String>(Arrays.asList((String)\"Mercury\", (String)\"Venus\", (String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\", (String)\"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        Integer p1 = pls.indexOf(planet1);\n        Integer p2 = pls.indexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return res;\n        }\n   \
    \     int low = Math.min(p1, p2);\n        int high = Math.max(p1, p2);\n    \
    \    for (int i = low + 1; i < high; i++) {\n            res.add(pls.get(i));\n\
    \        }\n        return res;", "        // YOUR CODE HERE\n        String[]\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n        ArrayList<String> answer = new ArrayList<String>();\n\
    \        boolean flag = false;\n        boolean temp = false;\n        for (int\
    \ i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1))\
    \ {\n                flag = true;\n            }\n            if (planets[i].equals(planet2))\
    \ {\n                temp = true;\n            }\n            if (flag && !planets[i].equals(planet2))\
    \ {\n                answer.add(planets[i]);\n            }\n            if (temp)\
    \ {\n                break;\n            }\n        }\n        return answer;",
  "\tArrayList<String> planets = new ArrayList<String>(Arrays.asList(\n\t\t\t\t\t\t\
    \t\t\t\"Mercury\",\n\t\t\t\t\t\t\t\t\t\"Venus\",\n\t\t\t\t\t\t\t\t\t\"Earth\"\
    ,\n\t\t\t\t\t\t\t\t\t\"Mars\",\n\t\t\t\t\t\t\t\t\t\"Jupiter\",\n\t\t\t\t\t\t\t\
    \t\t\"Saturn\",\n\t\t\t\t\t\t\t\t\t\"Uranus\",\n\t\t\t\t\t\t\t\t\t\"Neptune\"\
    ));\n\tint i = planets.indexOf(planet1);\n\tint j = planets.indexOf(planet2);\n\
    \tif (i == -1 || j == -1) {\n\t    return new ArrayList<String>();\n\t}\n\tint\
    \ lower = Math.min(i, j);\n\tint upper = Math.max(i, j);\n\treturn new ArrayList<String>(planets.subList(lower+1,\
    \ upper));", "        /*\n        *\n        * Function: bf\n        *\n     \
    \   * Solution: \n        *\n        */\n        int p1 = 0;\n        int p2 =\
    \ 0;\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        ArrayList<String>\
    \ value = new ArrayList<String>();\n        for (int i = 0; i < planets.length;\
    \ i++) {\n            if (planets[i].equals(planet1)) {\n                p1 =\
    \ i;\n            }\n            if (planets[i].equals(planet2)) {\n         \
    \       p2 = i;\n            }\n        }\n        if (p1 > p2) {\n          \
    \  int temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n \
    \       for (int i = p1 + 1; i < p2; i++) {\n            value.add(planets[i]);\n\
    \        }\n        return value;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        if (planet1.equals(planet2)) {\n            return new\
    \ ArrayList<String>();\n        }\n        int p1 = planets.indexOf(planet1);\n\
    \        int p2 = planets.indexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new ArrayList<String>();\n        }\n        int j = p1;\n\
    \        int k = p2;\n        int step1 = 1;\n        int step2 = -1;\n      \
    \  if (p1 > p2) {\n            j = p2;\n            k = p1;\n            step1\
    \ = -1;\n            step2 = 1;\n        }\n        ArrayList<String> res = new\
    \ ArrayList<String>();\n        for (int i = j; i != k; i += step1) {\n      \
    \      res.add(planets.get(i));\n        }\n        res.add(planets.get(k));\n\
    \        if (step1 == 1) {\n            Collections.reverse(res);\n        }\n\
    \        return res;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> res = new ArrayList<String>();\n \
    \       int i1 = planets.indexOf(planet1);\n        int i2 = planets.indexOf(planet2);\n\
    \        if (i1 < 0 || i2 < 0) return res;\n        if (i1 > i2) {\n         \
    \   int aux = i1;\n            i1 = i2;\n            i2 = aux;\n        }\n  \
    \      for (int i = i1+1; i < i2; i++) res.add(planets.get(i));\n        return\
    \ res;", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      ArrayList<String> result = new ArrayList<String>();\n        boolean isFirst\
    \ = false;\n        boolean isSecond = false;\n        for (int i = 0; i < planets.size();\
    \ i++) {\n            if (planets.get(i).equals(planet1)) {\n                isFirst\
    \ = true;\n            }\n            if (planets.get(i).equals(planet2)) {\n\
    \                isSecond = true;\n            }\n        }\n        if (isFirst\
    \ && isSecond) {\n            int first = planets.indexOf(planet1);\n        \
    \    int second = planets.indexOf(planet2);\n            if (first < second) {\n\
    \                for (int i = first + 1; i < second; i++) {\n                \
    \    result.add(planets.get(i));\n                }\n            } else {\n  \
    \              for (int i = second + 1; i < first; i++) {\n                  \
    \  result.add(planets.get(i));\n                }\n            }\n        }\n\
    \        return result;", "        String[] planets = { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       ArrayList<String> res = new ArrayList<String>();\n        boolean flag\
    \ = false;\n        for (int i = 0; i < planets.length; i++) {\n            if\
    \ (planets[i].equals(planet1)) {\n                flag = true;\n            }\n\
    \            if (flag) {\n                res.add(planets[i]);\n            }\n\
    \            if (planets[i].equals(planet2)) {\n                break;\n     \
    \       }\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
