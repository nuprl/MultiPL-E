language: java
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                open++;\n            } else {\n\
    \                open--;\n            }\n            if (open < 0) {\n       \
    \         return false;\n            }\n        }\n        return open == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuo65i8ok.java:27)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Deque<String> stack = new ArrayDeque<String>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            String c =\
    \ brackets.substring(i, i + 1);\n            if (c.equals(\"<\")) {\n        \
    \        stack.push(c);\n            } else {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                stack.pop();\n\
    \            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        char[] c = brackets.toCharArray();\n        for (int i = 0; i < c.length;\
    \ i++) {\n            if (c[i] == '<') {\n                stack.push(c[i]);\n\
    \            } else {\n                if (stack.isEmpty()) {\n              \
    \      return false;\n                } else {\n                    stack.pop();\n\
    \                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int left = 0;\n        int right\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                left++;\n            } else {\n\
    \                right++;\n            }\n            if (right > left) {\n  \
    \              return false;\n            }\n        }\n        return left ==\
    \ right;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int x = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<')\
    \ x++;\n            else x--;\n            if (x < 0) return false;\n        }\n\
    \        return x == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tStack<Character> stack = new Stack<Character>();\n\
    \tfor (int i = 0; i < brackets.length(); i++) {\n\t    char bracket = brackets.charAt(i);\n\
    \t    if (bracket == '<') {\n\t\tstack.push(bracket);\n\t    } else {\n\t\tif\
    \ (stack.isEmpty()) {\n\t\t    return false;\n\t\t}\n\t\tstack.pop();\n\t    }\n\
    \t}\n\treturn stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> bracket = new\
    \ Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n\
    \            if (brackets.charAt(i) == '<') {\n                bracket.push('<');\n\
    \            } else {\n                if (bracket.empty()) {\n              \
    \      return false;\n                } else {\n                    bracket.pop();\n\
    \                }\n            }\n        }\n        return bracket.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    correctBracketing not implemented\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: correctBracketing\
    \ not implemented\n\tat Problem.correctBracketing(tmpuzup36so.java:20)\n\tat Problem.main(tmpuzup36so.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int bracketCount = 0;\n      \
    \  for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                bracketCount++;\n            } else {\n         \
    \       bracketCount--;\n            }\n            if (bracketCount < 0) {\n\
    \                return false;\n            }\n        }\n        return bracketCount\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int len = brackets.length();\n\
    \        int count = 0;\n        for (int i = 0; i < len; i++) {\n           \
    \ if (brackets.charAt(i) == '<') {\n                count++;\n            } else\
    \ {\n                count--;\n            }\n            if (count < 0) {\n \
    \               return false;\n            }\n        }\n        return count\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') open++;\n            else open--;\n            if (open < 0) return false;\n\
    \        }\n        return open == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tif (brackets.length() == 0) {\n\t  \
    \  return true;\n\t}\n\tint n = brackets.length();\n\tint cnt = 0;\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t    if (brackets.charAt(i) == '<') {\n\t\tcnt++;\n\t\
    \    } else {\n\t\tcnt--;\n\t    }\n\t    if (cnt < 0) {\n\t\treturn false;\n\t\
    \    }\n\t}\n\treturn cnt == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        boolean\
    \ correct = true;\n        for (int i = 0; i < brackets.length(); i++) {\n   \
    \         char curr = brackets.charAt(i);\n            if (curr == '<') {\n  \
    \              counter++;\n            } else if (curr == '>') {\n           \
    \     counter--;\n            }\n            if (counter < 0) {\n            \
    \    correct = false;\n            }\n        }\n        if (counter != 0) {\n\
    \            correct = false;\n        }\n        return correct;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"<>\"\
    )) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_fmbtsa.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Your code here\n        int\
    \ count = 0;\n        for (int i = 0; i < brackets.length(); i++){\n         \
    \   if (brackets.charAt(i) == '<'){\n                count++;\n            } else\
    \ if (brackets.charAt(i) == '>'){\n                count--;\n            }\n \
    \           if (count < 0){\n                return false;\n            }\n  \
    \      }\n        return count == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if(brackets.length() % 2 != 0)\
    \ return false;\n        int count = 0;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '<') {\n\
    \                count++;\n            } else {\n                count--;\n  \
    \          }\n            if(count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // a stack is a useful way to\
    \ keep track of what you've seen so far.\n        // every time you see an opening\
    \ bracket, add it to the stack.\n        // every time you see a closing bracket,\
    \ remove one from the stack.\n        // if you remove one from an empty stack,\
    \ it's a problem.\n        // if you remove one when you're done, it's a problem.\n\
    \        // otherwise, it's good.\n        Stack<String> goodSoFar = new Stack<String>();\n\
    \        // loop through the string\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            // get the current bracket\n            String bracket =\
    \ brackets.substring(i, i + 1);\n            // if it's a closing bracket, and\
    \ the stack is empty or doesn't match,\n            // then it's wrong\n     \
    \       if (bracket.equals(\">\") && (goodSoFar.isEmpty() || !goodSoFar.pop().equals(\"\
    <\"))) {\n                return false;\n            }\n            // otherwise,\
    \ add it to the stack\n            else {\n                goodSoFar.push(bracket);\n\
    \            }\n        }\n        // if the stack is empty, return true\n   \
    \     // otherwise, it's wrong\n        return goodSoFar.isEmpty();\n    }\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgkuff_q_.java:46)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // this is your job.\n       \
    \ return false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vgec6ej.java:24)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpenBrackets = 0;\n   \
    \     for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                numOpenBrackets++;\n            } else {\n      \
    \          numOpenBrackets--;\n            }\n            if (numOpenBrackets\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ numOpenBrackets == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean retval = true;\n     \
    \   int counter = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n\
    \            if (brackets.charAt(i) == '<') {\n                counter++;\n  \
    \          } else {\n                counter--;\n            }\n            if\
    \ (counter < 0) {\n                retval = false;\n                break;\n \
    \           }\n        }\n        return retval && counter == 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // >>>\n        // True iff the\
    \ number of opening brackets '<' is equal to the number of closing brackets '>'.\n\
    \        // >>>\n        // Define variables.\n        int opening = 0;\n    \
    \    int closing = 0;\n        // >>>\n        // Iterate over every character\
    \ in the string.\n        for (int i = 0; i < brackets.length(); i++) {\n    \
    \        // >>>\n            // Add one to opening if the character is '<'.\n\
    \            if (brackets.charAt(i) == '<') {\n                opening++;\n  \
    \          }\n            // >>>\n            // Add one to closing if the character\
    \ is '>'.\n            if (brackets.charAt(i) == '>') {\n                closing++;\n\
    \            }\n        }\n        // >>>\n        // Return True iff opening\
    \ and closing are equal.\n        return opening == closing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa43l4czm.java:50)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n\
    \            return true;\n        }\n        int n = brackets.length();\n   \
    \     boolean retVal = true;\n        int counter = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            char c = brackets.charAt(i);\n            if (c ==\
    \ '<') {\n                counter += 1;\n            } else {\n              \
    \  counter -= 1;\n            }\n            if (counter < 0) {\n            \
    \    retVal = false;\n                break;\n            }\n        }\n     \
    \   if (counter != 0) {\n            retVal = false;\n        }\n        return\
    \ retVal;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int sum = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                sum += 1;\n            } else {\n                sum\
    \ -= 1;\n            }\n            if (sum < 0) {\n                return false;\n\
    \            }\n        }\n        return sum == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count += 1;\n            } else\
    \ if (c == '>') {\n                count -= 1;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int openCount = 0;\n        int\
    \ closeCount = 0;\n        boolean isCorrect = true;\n        for (int i = 0;\
    \ i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n\
    \                openCount++;\n            } else if (brackets.charAt(i) == '>')\
    \ {\n                closeCount++;\n            }\n            if (closeCount\
    \ > openCount) {\n                isCorrect = false;\n            }\n        }\n\
    \        if (openCount != closeCount) {\n            isCorrect = false;\n    \
    \    }\n        return isCorrect;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // your code here!\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwjxpfurs.java:28)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                depth += 1;\n            } else\
    \ if (c == '>') {\n                depth -= 1;\n            }\n            if\
    \ (depth < 0) {\n                return false;\n            }\n        }\n   \
    \     return depth == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ {\n            return false;\n        }\n        Stack<Character> bracketStack\
    \ = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            if (brackets.charAt(i) == '<') {\n                bracketStack.push('<');\n\
    \            } else {\n                if (bracketStack.empty()) {\n         \
    \           return false;\n                }\n                bracketStack.pop();\n\
    \            }\n        }\n        return bracketStack.empty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count += 1;\n            } else\
    \ if (c == '>') {\n                count -= 1;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int score = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                score++;\n            } else {\n                score--;\n\
    \            }\n            if (score < 0) {\n                return false;\n\
    \            }\n        }\n        return score == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int i = 0;\n        int count\
    \ = 0;\n        while (i < brackets.length()) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n            i++;\n        }\n        return count == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int opening = 0;\n        int\
    \ closing = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n      \
    \      String charac = brackets.substring(i, i + 1);\n            if (charac.equals(\"\
    <\")) {\n                opening++;\n            } else {\n                closing++;\n\
    \            }\n            if (closing > opening) {\n                return false;\n\
    \            }\n        }\n        if (opening == closing) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '<') {\n                count++;\n            } else\
    \ if (bracket == '>') {\n                count--;\n            }\n           \
    \ if (count < 0) {\n                return false;\n            }\n        }\n\
    \        return count == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int total = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                total += 1;\n            } else {\n                total\
    \ -= 1;\n            }\n            if (total < 0) {\n                return false;\n\
    \            }\n        }\n        return total == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuo65i8ok.java:27)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (char bracket : brackets.toCharArray()) {\n            if (bracket\
    \ == '<') {\n                stack.push(bracket);\n            } else {\n    \
    \            if (stack.isEmpty()) {\n                    return false;\n     \
    \           }\n                stack.pop();\n            }\n        }\n      \
    \  return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // this is a stack of \"open\"\
    \ brackets.\n        // in java, stack is one of the classes from java.util\n\
    \        Stack<Character> stk = new Stack<Character>();\n        // use a for-loop\
    \ to go through all the brackets\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            // get the ith bracket\n            char bracket = brackets.charAt(i);\n\
    \            // if it's an open bracket, push it to the stack\n            if\
    \ (bracket == '<') {\n                stk.push(bracket);\n            }\n    \
    \        // otherwise, it's a closing bracket.\n            // if it's a closing\
    \ bracket without any open bracket in the stack,\n            // then we have\
    \ a problem.\n            else if (stk.isEmpty()) {\n                return false;\n\
    \            }\n            // otherwise, we can pop the stack\n            else\
    \ {\n                stk.pop();\n            }\n        }\n        // if the stack\
    \ is empty, then the bracketing is correct.\n        // otherwise, it's not.\n\
    \        return stk.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // YOUR CODE HERE\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuz93ix16.java:24)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\t\t// Start from first bracket\n\t\t\
    int bracketCounter = 0;\n\t\tfor (int i = 0; i < brackets.length(); i++) {\n\t\
    \t\tchar c = brackets.charAt(i);\n\t\t\tif (c == '<') {\n\t\t\t\tbracketCounter++;\n\
    \t\t\t} else if (c == '>') {\n\t\t\t\tbracketCounter--;\n\t\t\t}\n\t\t\tif (bracketCounter\
    \ < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// If open brackets left\n\
    \t\tif (bracketCounter > 0) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // your code here\n        int\
    \ n = brackets.length();\n        int count=0;\n        for(int i=0;i<n;i++){\n\
    \          if(brackets.charAt(i)=='<'){\n            count++;\n          }\n \
    \         else{\n            count--;\n          }\n          if(count<0){\n \
    \           return false;\n          }\n        }\n        if(count!=0){\n   \
    \       return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuva1tn7j.java:28)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int k = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            char current = brackets.charAt(i);\n\
    \            if (current == '<') k++;\n            else k--;\n            if (k\
    \ < 0) return false;\n        }\n        return k == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.contains(\"<\"))\
    \ {\n            int indexOfLastLessThan = brackets.lastIndexOf(\"<\");\n    \
    \        int indexOfNextGreaterThan = brackets.indexOf(\">\", indexOfLastLessThan);\n\
    \            if (indexOfNextGreaterThan == -1) {\n                return false;\n\
    \            }\n            brackets = brackets.substring(0, indexOfLastLessThan)\
    \ + brackets.substring(indexOfNextGreaterThan + 1);\n            return correctBracketing(brackets);\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxqq2zcm8.java:36)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if(brackets.length() % 2 != 0)\
    \ {\n            return false;\n        }\n\n        boolean searchingForMore\
    \ = true;\n        int openCount = 0;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            if(brackets.charAt(i) == '<') {\n                openCount++;\n\
    \            } else {\n                openCount--;\n            }\n\n       \
    \     if(openCount < 0) {\n                return false;\n            }\n\n  \
    \          if(openCount == 0) {\n                searchingForMore = false;\n \
    \           }\n        }\n\n        return openCount == 0 && !searchingForMore;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean firstLeft = false;\n \
    \       boolean lastRight = false;\n        // is it empty?\n        if (brackets.isEmpty())\
    \ {\n            return true;\n        }\n        // does it start with left?\n\
    \        if (brackets.charAt(0) == '<') {\n            firstLeft = true;\n   \
    \     }\n        // does it end with right?\n        if (brackets.charAt(brackets.length()\
    \ - 1) == '>') {\n            lastRight = true;\n        }\n        // only needs\
    \ to check first and last\n        if (firstLeft && lastRight) {\n           \
    \ return true;\n        }\n        else {\n            return false;\n       \
    \ }\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfzxqkc10.java:47)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    Not implemented.\");\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented.\n\
    \tat Problem.correctBracketing(tmpbby9n3t2.java:20)\n\tat Problem.main(tmpbby9n3t2.java:23)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                balance++;\n            } else if\
    \ (c == '>') {\n                balance--;\n            }\n            if (balance\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ balance == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() == 0) return\
    \ true;\n        if (brackets.length() == 1) return false;\n        if (brackets.charAt(0)\
    \ == '>') return false;\n        int n = brackets.length();\n        int count\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i)\
    \ == '<') count++;\n            else if (brackets.charAt(i) == '>') count--;\n\
    \            if (count < 0) return false;\n        }\n        return count ==\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() == 0\
    \ || brackets.length() % 2 == 0 && brackets.replaceAll(\"[<>]\", \"\").length()\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfjj6yqd.java:28)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        //\n        // this function can\
    \ be implemented using a data structure that allows\n        // for constant-time\
    \ removal of the most-recently-added element.\n        // one such data structure\
    \ is a linked list:\n        // https://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html\n\
    \        //\n        // another, easier option is a stack:\n        // https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html\n\
    \        //\n        // a stack is a linked list with two operations, push and\
    \ pop.\n        // push adds an element at the end of the list, and pop removes\
    \ it.\n        // push is like adding to the end of a linked list with addLast.\n\
    \        // pop is like removing the last element with removeLast.\n        //\n\
    \        // if you'd like, you can use a linked list, or any other data structure\n\
    \        // that meets the constant-time requirement.\n        //\n        //\
    \ here are some helper functions:\n        // LinkedList<String> list = new LinkedList<String>();\n\
    \        // list.addLast(\"<\");\n        // String first = list.removeLast();\n\
    \        // String last = list.getLast();\n        // Stack<String> stack = new\
    \ Stack<String>();\n        // stack.push(\"<\");\n        // String first = stack.pop();\n\
    \        // String last = stack.peek();\n        //\n        return false;\n \
    \   }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp67g0eipi.java:50)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // TODO\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84ont1_e.java:24)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyavee9kf.java:24)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpening = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                numOpening += 1;\n            }\
    \ else if (c == '>') {\n                numOpening -= 1;\n            }\n    \
    \        if (numOpening < 0) {\n                return false;\n            }\n\
    \        }\n        return numOpening == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n\
    \            return true;\n        } else if (brackets.charAt(0) == '>') {\n \
    \           return false;\n        } else {\n            int count = 0;\n    \
    \        for (int i = 0; i < brackets.length(); i++) {\n                if (brackets.charAt(i)\
    \ == '<') {\n                    count += 1;\n                } else {\n     \
    \               count -= 1;\n                }\n                if (count < 0)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return count == 0;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Fill in code here\n       \
    \ int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n    \
    \        if (brackets.charAt(i) == '<') {\n                count++;\n        \
    \    } else {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tLinkedList<Character> temp = new LinkedList<Character>();\n\
    \tfor (int i = 0; i < brackets.length(); i++) {\n\t    char c = brackets.charAt(i);\n\
    \t    if (c == '<') {\n\t\ttemp.add(c);\n\t    } else if (c == '>') {\n\t\tif\
    \ (temp.size() == 0) {\n\t\t    return false;\n\t\t} else {\n\t\t    temp.removeLast();\n\
    \t\t}\n\t    }\n\t}\n\treturn temp.size() == 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // try to pop a closing bracket\
    \ off an empty stack.\n        if (brackets.length() == 0) {\n            return\
    \ false;\n        }\n\n        Stack<String> bracketStack = new Stack<String>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            String s =\
    \ Character.toString(brackets.charAt(i));\n            if (s.equals(\"<\")) {\n\
    \                bracketStack.push(s);\n            } else {\n               \
    \ try {\n                    bracketStack.pop();\n                } catch (EmptyStackException\
    \ e) {\n                    return false;\n                }\n            }\n\
    \        }\n        return bracketStack.empty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int bracketSum = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            bracketSum += brackets.charAt(i)\
    \ == '<' ? 1 : -1;\n            if (bracketSum < 0) return false;\n        }\n\
    \        return bracketSum == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // >>> 1. Write your solution\
    \ here.\n        int level = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '<')\
    \ {\n                level++;\n            } else {\n                level--;\n\
    \            }\n            if (level < 0) {\n                return false;\n\
    \            }\n        }\n        return level == 0;\n        // 2. Or call the\
    \ solution from question 1.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        char[] c = brackets.toCharArray();\n        for (int i = 0; i < c.length;\
    \ i++) {\n            if (c[i] == '<') {\n                stack.push(c[i]);\n\
    \            } else {\n                if (stack.empty()) {\n                \
    \    return false;\n                } else {\n                    stack.pop();\n\
    \                }\n            }\n        }\n        return stack.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        char[] arr = brackets.toCharArray();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == '<')\
    \ {\n                boolean found = false;\n                for (int j = i; j\
    \ < arr.length; j++) {\n                    if (arr[j] == '>') {\n           \
    \             found = true;\n                        break;\n                \
    \    }\n                }\n                if (!found) {\n                   \
    \ return false;\n                }\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41jsde2f.java:42)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<')\n                stack.push('<');\n            else {\n            \
    \    if (stack.empty())\n                    return false;\n                if\
    \ (stack.peek() == '<')\n                    stack.pop();\n                else\n\
    \                    return false;\n            }\n        }\n        return stack.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011547
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // test each of these cases.\n\
    \        if (brackets.length() % 2 != 0) return false;\n        String[] open\
    \ = new String[1];\n        String[] close = new String[1];\n        open[0] =\
    \ \"<\";\n        close[0] = \">\";\n        String[] stack = new String[brackets.length()];\n\
    \        int count = 0;\n        for (int i = 0; i < brackets.length(); i++){\n\
    \            if (brackets.substring(i, i + 1).equals(open[0])) {\n           \
    \     stack[count] = open[0];\n                count++;\n            }\n     \
    \       else if (brackets.substring(i, i + 1).equals(close[0])) {\n          \
    \      if (count == 0) return false;\n                if (stack[count - 1].equals(open[0]))\
    \ {\n                    count--;\n                }\n                else return\
    \ false;\n            }\n        }\n        if (count == 0) return true;\n   \
    \     else return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length()%2==0\n\
    \            &&(brackets.length()==0||brackets.charAt(0)=='>')\n            &&\
    \ brackets.chars().filter(c->c=='<').count()==brackets.chars().filter(c->c=='>').count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpav46c4ht.java:25)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // ==> [(\"<\", 1), (\">\", 1),\
    \ (\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n        // ==> [(\"<\", 1),\
    \ (\">\", 1), (\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n        // ==>\
    \ [(\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n \
    \       // ==> [(\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1), (\"<\", 1), (\"\
    >\", 1)]\n        // ==> [(\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1), (\"\
    <\", 1), (\">\", 1)]\n        // ==> [(\"<\", 1), (\">\", 1), (\"<\", 1), (\"\
    >\", 1), (\"<\", 1), (\">\", 1)]\n        // ==> [(\"<\", 1), (\">\", 1), (\"\
    <\", 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n        // ==> [(\"<\", 1), (\"\
    >\", 1), (\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n        // ==> [(\"\
    <\", 1), (\">\", 1), (\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n       \
    \ // ==> [(\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1), (\"<\", 1), (\">\",\
    \ 1)]\n        // ==> [(\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1), (\"<\"\
    , 1), (\">\", 1)]\n        // ==> [(\"<\", 1), (\">\", 1), (\"<\", 1), (\">\"\
    , 1), (\"<\", 1), (\">\", 1)]\n        // ==> [(\"<\", 1), (\">\", 1), (\"<\"\
    , 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n        // ==> [(\"<\", 1), (\">\"\
    , 1), (\"<\", 1), (\">\", 1), (\"<\", 1), (\">\", 1)]\n        // ==> [(\"<\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6rd58r_.java:35: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return\n        true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxaek9uid.java:28)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                open++;\n            } else {\n                open--;\n\
    \            }\n            if (open < 0) {\n                return false;\n \
    \           }\n        }\n        return open == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int openBrackets = 0;\n      \
    \  for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                openBrackets++;\n            } else {\n         \
    \       openBrackets--;\n            }\n            if (openBrackets < 0) {\n\
    \                return false;\n            }\n        }\n        return openBrackets\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        int close\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                open++;\n            } else {\n\
    \                close++;\n            }\n            if (close > open) {\n  \
    \              return false;\n            }\n        }\n        return open ==\
    \ close;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<String> ans = new Stack<String>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                ans.push(\"<\");\n            } else {\n        \
    \        if (ans.isEmpty()) {\n                    return false;\n           \
    \     } else {\n                    ans.pop();\n                }\n          \
    \  }\n        }\n        return ans.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        //int opening = 0;\n        //int\
    \ closing = 0;\n        Stack<String> s = new Stack<String>();\n        // loop\
    \ through the string one character at a time\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            String b = brackets.substring(i, i + 1);\n            if\
    \ (b.equals(\"<\")) {\n                s.push(b);\n            } else {\n    \
    \            if (s.empty()) {\n                    return false;\n           \
    \     } else {\n                    s.pop();\n                }\n            }\n\
    \        }\n        return s.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numberOfLeftBrackets = 0;\n\
    \        int numberOfRightBrackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                numberOfLeftBrackets\
    \ += 1;\n            } else {\n                numberOfRightBrackets += 1;\n \
    \           }\n            if (numberOfRightBrackets > numberOfLeftBrackets) {\n\
    \                return false;\n            }\n        }\n        return numberOfLeftBrackets\
    \ == numberOfRightBrackets;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Make sure the string is a sequence\
    \ of \">\" and \"<\"\n        assert (brackets.matches(\"(<|>)*\"));\n       \
    \ // YOUR CODE HERE\n        int pos = 0;\n        while (pos < brackets.length())\
    \ {\n            char c = brackets.charAt(pos);\n            if (c == '<') {\n\
    \                pos++;\n            } else {\n                if (pos == 0) {\n\
    \                    return false;\n                } else {\n               \
    \     while (brackets.charAt(pos) == '>') {\n                        pos++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 2\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.correctBracketing(tmpnx20nlzp.java:32)\n\
    \tat Problem.main(tmpnx20nlzp.java:41)\n"
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count++;\n            } else {\n\
    \                count--;\n            }\n            if (count < 0) {\n     \
    \           return false;\n            }\n        }\n        return count == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char character = brackets.charAt(i);\n\
    \            if (character == '<') {\n                count++;\n            }\
    \ else if (character == '>') {\n                count--;\n            }\n    \
    \        if (count < 0) {\n                return false;\n            }\n    \
    \    }\n        return count == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // your code here\n        Stack<Character>\
    \ s = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n\
    \            if (c == '<') {\n                s.push(c);\n            } else {\n\
    \                if (s.isEmpty()) {\n                    return false;\n     \
    \           }\n                s.pop();\n            }\n        }\n        return\
    \ s.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                counter++;\n            } else {\n              \
    \  counter--;\n            }\n            if (counter < 0) {\n               \
    \ return false;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                stack.push('<');\n            } else {\n        \
    \        if (stack.isEmpty()) return false;\n                else stack.pop();\n\
    \            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> s = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                s.push(c);\n            } else {\n\
    \                if (s.empty()) {\n                    return false;\n       \
    \         }\n                s.pop();\n            }\n        }\n        return\
    \ s.empty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ {\n            return false;\n        } else {\n            boolean count =\
    \ true;\n            int num = 0;\n            for (int i = 0; i < brackets.length();\
    \ i++) {\n                if (brackets.charAt(i) == '<') {\n                 \
    \   num += 1;\n                } else {\n                    num -= 1;\n     \
    \           }\n                if (num < 0) {\n                    count = false;\n\
    \                }\n            }\n            if (num != 0) {\n             \
    \   count = false;\n            }\n            return count;\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int bracketCount = 0;\n      \
    \  for (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '<') {\n                bracketCount++;\n        \
    \    } else if (bracket == '>') {\n                bracketCount--;\n         \
    \   }\n            if (bracketCount < 0) {\n                return false;\n  \
    \          }\n        }\n        return bracketCount == 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n\
    \            return true;\n        } else if (brackets.length() == 1) {\n    \
    \        return false;\n        } else {\n            int count = 0;\n       \
    \     for (int i = 0; i < brackets.length(); i++) {\n                if (brackets.charAt(i)\
    \ == '<') {\n                    count += 1;\n                } else {\n     \
    \               count -= 1;\n                }\n                if (count < 0)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         return count == 0;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<String> s = new Stack<String>();\n\
    \        for (int i = 0; i < brackets.length(); i++){\n            if (brackets.charAt(i)\
    \ == '<'){\n                s.push(\"<\");\n            }\n            else if\
    \ (brackets.charAt(i) == '>'){\n                if (s.isEmpty()){\n          \
    \          return false;\n                }\n                else{\n         \
    \           s.pop();\n                }\n            }\n        }\n        if\
    \ (s.isEmpty()){\n            return true;\n        }\n        else{\n       \
    \     return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> s = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<')\n                s.push(c);\n            else if (c\
    \ == '>') {\n                if (s.empty())\n                    return false;\n\
    \                else\n                    s.pop();\n            }\n        }\n\
    \        return s.empty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int index = 0;\n        int count\
    \ = 0;\n        while (index < brackets.length()) {\n            char current\
    \ = brackets.charAt(index);\n            if (current == '<') {\n             \
    \   count += 1;\n            } else {\n                count -= 1;\n         \
    \   }\n            if (count < 0) {\n                return false;\n         \
    \   }\n            index += 1;\n        }\n        return count == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // TODO\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84ont1_e.java:24)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                open++;\n            } else {\n                open--;\n\
    \            }\n            if (open < 0) {\n                return false;\n \
    \           }\n        }\n        return open == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '<')\n\
    \                stack.push(c);\n            else {\n                if (stack.isEmpty())\n\
    \                    return false;\n                stack.pop();\n           \
    \ }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ {\n            return false;\n        }\n        int count = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // your code here.\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xx4w_nd.java:24)\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n = brackets.length();\n \
    \       // keep track of how many open brackets there are, as we scan from left\
    \ to right\n        int open = 0;\n        for (int i = 0; i < n; i++) {\n   \
    \         if (brackets.charAt(i) == '<') {\n                open += 1;\n     \
    \       } else {\n                open -= 1;\n            }\n            // if\
    \ the number of open brackets ever becomes negative,\n            // that means\
    \ there was a closing bracket without an opening one\n            if (open < 0)\
    \ {\n                return false;\n            }\n        }\n        // if the\
    \ number of open brackets isn't 0,\n        // that means there was an opening\
    \ bracket without a closing one\n        return open == 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tStack<Character> stack = new Stack<Character>();\n\
    \tfor (int i = 0; i < brackets.length(); i++) {\n\t    char c = brackets.charAt(i);\n\
    \t    if (c == '<') {\n\t\tstack.push(c);\n\t    } else {\n\t\t// c == '>'\n\t\
    \tif (stack.isEmpty()) {\n\t\t    return false;\n\t\t}\n\t\tstack.pop();\n\t \
    \   }\n\t}\n\treturn stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011549
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if(brackets.length()%2!=0) return\
    \ false;\n        int x=0;\n        for(int i=0;i<brackets.length();i++){\n  \
    \          if(brackets.charAt(i)=='<'){\n                x++;\n            }else{\n\
    \                x--;\n            }\n            if(x<0) return false;\n    \
    \    }\n        return x==0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                balance++;\n            } else {\n              \
    \  balance--;\n            }\n            if (balance < 0) {\n               \
    \ return false;\n            }\n        }\n        return balance == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011550
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                open++;\n            } else {\n\
    \                open--;\n            }\n            if (open < 0) {\n       \
    \         return false;\n            }\n        }\n        return open == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    implement me!\");\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: implement me!\n\
    \tat Problem.correctBracketing(tmpsywvz4ai.java:20)\n\tat Problem.main(tmpsywvz4ai.java:23)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int i = 0;\n        boolean result\
    \ = true;\n        while(i < brackets.length() && result) {\n            int first\
    \ = brackets.indexOf(\"<\");\n            int last = brackets.lastIndexOf(\">\"\
    );\n            if(first == -1 || last == -1) {\n                result = false;\n\
    \            } else if(first < last) {\n                brackets = brackets.substring(first+1,\
    \ last);\n            } else {\n                result = false;\n            }\n\
    \            i++;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5lu02n2z.java:41)\n"
  stdout: ''
  timestamp: 1660011550
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '<') count++;\n            else if (bracket == '>')\
    \ count--;\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int left = 0;\n        int right\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char\
    \ a = brackets.charAt(i);\n            if (a == '<') {\n                left +=\
    \ 1;\n            } else {\n                right += 1;\n            }\n     \
    \       if (right > left) {\n                return false;\n            }\n  \
    \      }\n        return left == right;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // this algorithm performs multiple\
    \ passes over the string, each time\n        // removing any brackets which form\
    \ a pair. if there are any brackets\n        // left at the end, then the original\
    \ string was not correctly\n        // bracketed.\n        while (brackets.contains(\"\
    <>\")) {\n            brackets = brackets.replace(\"<>\", \"\");\n        }\n\
    \        return brackets.length() == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // YOUR CODE HERE\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuz93ix16.java:24)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                open++;\n            } else {\n\
    \                open--;\n            }\n            if (open < 0) {\n       \
    \         return false;\n            }\n        }\n        return open == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                depth += 1;\n            } else {\n                depth\
    \ -= 1;\n            }\n            if (depth < 0) {\n                return false;\n\
    \            }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuo65i8ok.java:27)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numC = 0;\n        int numO\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                numO++;\n            } else {\n\
    \                numC++;\n            }\n            if (numC > numO) {\n    \
    \            return false;\n            }\n        }\n        return numC == numO;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int cnt=0;\n        for(int i=0;i<brackets.length();i++){\n\
    \            if(brackets.charAt(i)=='<'){\n                cnt++;\n          \
    \  }\n            else{\n                cnt--;\n            }\n            if(cnt<0){\n\
    \                return false;\n            }\n        }\n        return (cnt==0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean f = true;\n        int\
    \ b = 0;\n        int l = brackets.length();\n        for (int i = 0; i < l; i++){\n\
    \            if (brackets.charAt(i) == '<') {\n                b++;\n        \
    \    } else {\n                b--;\n            }\n            if (b < 0) {\n\
    \                f = false;\n            }\n        }\n        return f && b ==\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '<') {\n                balance += 1;\n          \
    \  } else if (bracket == '>') {\n                balance -= 1;\n            }\n\
    \            if (balance < 0) {\n                return false;\n            }\n\
    \        }\n        return balance == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // if it's empty or length one,\
    \ incorrect bracketing\n        if (brackets.length() <= 1) {\n            return\
    \ false;\n        }\n        // otherwise we have at least 2 characters\n    \
    \    char firstChar = brackets.charAt(0);\n        char lastChar = brackets.charAt(brackets.length()\
    \ - 1);\n        // if they aren't matching, it's incorrect\n        if (firstChar\
    \ == '<' && lastChar == '>') {\n            return correctBracketing(brackets.substring(1,\
    \ brackets.length() - 1));\n        } else {\n            return false;\n    \
    \    }\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp384wqqj9.java:35)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new UnsupportedOperationException(\"\
    Problem.correctBracketing is not written yet!\");\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Problem.correctBracketing\
    \ is not written yet!\n\tat Problem.correctBracketing(tmpp7eivgn_.java:20)\n\t\
    at Problem.main(tmpp7eivgn_.java:23)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return correctBracketing(brackets,\
    \ 0, 0);\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85j_210w.java:20: error: method correctBracketing in class Problem\
    \ cannot be applied to given types;\n        return correctBracketing(brackets,\
    \ 0, 0);\n               ^\n  required: String\n  found:    String,int,int\n \
    \ reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                boolean\
    \ found = false;\n                for (int j = i + 1; j < brackets.length(); j++)\
    \ {\n                    if (brackets.charAt(j) == '>') {\n                  \
    \      found = true;\n                        break;\n                    }\n\
    \                }\n                if (!found) return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1zv69_dj.java:39)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                if (i\
    \ == brackets.length() - 1) {\n                    return false;\n           \
    \     }\n                if (brackets.charAt(i + 1) != '>') {\n              \
    \      return false;\n                }\n                i++;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxn5ir8lw.java:35)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3vxc8td.java:24)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int c = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<')\
    \ {\n                c++;\n            } else {\n                c--;\n      \
    \      }\n            if (c < 0) {\n                return false;\n          \
    \  }\n        }\n        return c == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n\
    \                stack.push(c);\n            } else {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                stack.pop();\n\
    \            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // hint: use a stack\n       \
    \ Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i\
    \ < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '<') {\n                stack.push(bracket);\n   \
    \         } else {\n                if (stack.isEmpty()) {\n                 \
    \   return false;\n                }\n                char popped = stack.pop();\n\
    \                if (popped != '<') {\n                    return false;\n   \
    \             }\n            }\n        }\n        return stack.isEmpty();\n \
    \   }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // a stack is a data structure\
    \ with the following operations:\n        //   push(x) - add x to the top of the\
    \ stack\n        //   pop() - remove the top item from the stack, and return it\n\
    \        //   peek() - return the top item from the stack, without removing it\n\
    \        // The following declarations create a stack, and two empty strings:\n\
    \        Stack<Character> s = new Stack<Character>();\n        int x = 0;\n  \
    \      // For every bracket in brackets, we do something depending on whether\n\
    \        // it is an opening or closing bracket.\n        for (int i = 0; i <\
    \ brackets.length(); i++) {\n            char c = brackets.charAt(i);\n      \
    \      if (c == '<') {\n                // If it is an opening bracket, we push\
    \ it onto the stack.\n                s.push(c);\n            } else {\n     \
    \           // If it is a closing bracket, we check that the stack is not empty,\n\
    \                // and that the last bracket was an opening bracket.\n      \
    \          if (s.empty() || s.peek() != '<') {\n                    return false;\n\
    \                }\n                // Then we pop the opening bracket off the\
    \ stack.\n                s.pop();\n            }\n        }\n        // Finally,\
    \ we check that the stack is empty. If it isn't, we were missing\n        // a\
    \ closing bracket somewhere.\n        return s.empty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    not implemented\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not implemented\n\
    \tat Problem.correctBracketing(tmpabw2zq0d.java:20)\n\tat Problem.main(tmpabw2zq0d.java:23)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int sum = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                sum += 1;\n            } else {\n                sum\
    \ -= 1;\n            }\n            if (sum < 0) {\n                return false;\n\
    \            }\n        }\n        return sum == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int left = 0;\n        int right\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                left++;\n            } else {\n\
    \                right++;\n            }\n            if (right > left) {\n  \
    \              return false;\n            }\n        }\n        return left ==\
    \ right;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.chars().filter(x\
    \ -> x == '<').count() == brackets.chars().filter(x -> x == '>').count();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprgrbwvcv.java:28)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\t\tint n = brackets.length();\n\t\tint\
    \ count = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (brackets.charAt(i)\
    \ == '<') {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\
    \tif (count < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn count ==\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack stack = new Stack();\n \
    \       for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                stack.push(c);\n            } else\
    \ {\n                if (stack.empty()) {\n                    return false;\n\
    \                }\n                stack.pop();\n            }\n        }\n \
    \       return stack.empty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int cnt = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') cnt++;\n            else if (brackets.charAt(i) == '>') cnt--;\n      \
    \      if (cnt < 0) return false;\n        }\n        return cnt == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // The stack will contain either\
    \ \"<\" or \">\".\n        // stack.pop() returns the element popped off the stack.\n\
    \        // stack.push(x) pushes x onto the stack.\n        // stack.empty() checks\
    \ if the stack is empty.\n        Stack<String> stack = new Stack<String>();\n\
    \        // Iterate through the characters of brackets.\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            // First, push on the current\
    \ character if it is an opening bracket.\n            String currentChar = brackets.substring(i,\
    \ i + 1);\n            if (currentChar.equals(\"<\")) {\n                stack.push(currentChar);\n\
    \            }\n            // If the current character is a closing bracket,\
    \ check if it is unmatched.\n            else {\n                // If the stack\
    \ is empty, it is unmatched. Return false.\n                if (stack.empty())\
    \ {\n                    return false;\n                }\n                //\
    \ Otherwise, pop a \"<\" off the stack.\n                else {\n            \
    \        stack.pop();\n                }\n            }\n        }\n        //\
    \ If the stack is empty at the end, we know every opening bracket has a corresponding\
    \ closing bracket.\n        return stack.empty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int length = brackets.length();\n\
    \        int count = 0;\n        for (int i = 0; i < length; i++) {\n        \
    \    if (brackets.charAt(i) == '<') {\n                count++;\n            }\
    \ else {\n                count--;\n            }\n            if (count < 0)\
    \ {\n                return false;\n            }\n        }\n        return count\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char bracket\
    \ = brackets.charAt(i);\n            if (bracket == '<') {\n                stack.push(bracket);\n\
    \            } else {\n                if (stack.isEmpty()) {\n              \
    \      return false;\n                }\n                stack.pop();\n      \
    \      }\n        }\n        return stack.isEmpty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        char[] b = brackets.toCharArray();\n\
    \        int o = 0;\n        for (char c : b) {\n            if (c == '<') {\n\
    \                o++;\n            } else {\n                o--;\n          \
    \  }\n            if (o < 0) {\n                return false;\n            }\n\
    \        }\n        return o == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length()%2 ==\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph076pcr1.java:28)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return Stream.of(brackets.split(\"\
    \")).filter(x -> x.equals(\"<\")).count() == Stream.of(brackets.split(\"\")).filter(x\
    \ -> x.equals(\">\")).count();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw8qaawoc.java:28)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.equals(\"\")) {\n\
    \            return true;\n        }\n        else if (brackets.charAt(0) == '>')\
    \ {\n            return false;\n        }\n        else {\n            int count\
    \ = 0;\n            int i = 0;\n            while (count >= 0 && i < brackets.length())\
    \ {\n                if (brackets.charAt(i) == '<') {\n                    count\
    \ += 1;\n                }\n                else {\n                    count\
    \ -= 1;\n                }\n                i += 1;\n            }\n         \
    \   if (count == 0) {\n                return true;\n            }\n         \
    \   else {\n                return false;\n            }\n        }\n    }\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ {\n            return false;\n        } else {\n            char[] letters =\
    \ brackets.toCharArray();\n            int counter = 0;\n            for (int\
    \ i = 0; i < letters.length; i++) {\n                if (letters[i] == '<') {\n\
    \                    counter += 1;\n                } else {\n               \
    \     counter -= 1;\n                }\n                if (counter < 0) {\n \
    \                   return false;\n                }\n            }\n        \
    \    if (counter != 0) {\n                return false;\n            } else {\n\
    \                return true;\n            }\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            count += (brackets.charAt(i)\
    \ == '<') ? 1 : -1;\n            if (count < 0) return false;\n        }\n   \
    \     return count == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3vxc8td.java:24)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\treturn true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpivqjkk3y.java:27)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Deque<Integer> st = new ArrayDeque<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                st.push(i);\n            } else\
    \ {\n                if (st.isEmpty()) {\n                    return false;\n\
    \                }\n                st.pop();\n            }\n        }\n    \
    \    return st.isEmpty();\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                counter++;\n            } else {\n              \
    \  counter--;\n            }\n            if (counter < 0) {\n               \
    \ return false;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                count += 1;\n            } else\
    \ if (c == '>') {\n                count -= 1;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                balance++;\n            } else {\n              \
    \  balance--;\n            }\n            if (balance < 0) {\n               \
    \ return false;\n            }\n        }\n        return balance == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011550
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char bracket\
    \ = brackets.charAt(i);\n            if (bracket == '<') {\n                stack.push(bracket);\n\
    \            } else {\n                if (stack.isEmpty()) {\n              \
    \      return false;\n                }\n                stack.pop();\n      \
    \      }\n        }\n        return stack.isEmpty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '<') {\n                count++;\n            } else\
    \ if (bracket == '>') {\n                count--;\n            }\n           \
    \ if (count < 0) {\n                return false;\n            }\n        }\n\
    \        return count == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new UnsupportedOperationException(\"\
    TODO\");\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: TODO\n\
    \tat Problem.correctBracketing(tmpy905hqxp.java:20)\n\tat Problem.main(tmpy905hqxp.java:23)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011544
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                stack.push(c);\n            } else\
    \ {\n                if (stack.empty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if\
    \ (top != '<') {\n                    return false;\n                }\n     \
    \       }\n        }\n        return stack.empty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char ch =\
    \ brackets.charAt(i);\n            if (ch == '<') {\n                stack.push(ch);\n\
    \            } else {\n                if (stack.isEmpty()) {\n              \
    \      return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '<') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int cnt = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                cnt++;\n            } else {\n \
    \               cnt--;\n            }\n            if (cnt < 0) {\n          \
    \      return false;\n            }\n        }\n        return cnt == 0;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int lefts = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char ch = brackets.charAt(i);\n\
    \            if (ch == '<') {\n                lefts++;\n            } else {\n\
    \                if (lefts > 0) {\n                    lefts--;\n            \
    \    } else {\n                    return false;\n                }\n        \
    \    }\n        }\n        return lefts == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int bracketCount = 0;\n      \
    \  for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                bracketCount++;\n            } else {\n         \
    \       bracketCount--;\n            }\n            if (bracketCount < 0) {\n\
    \                return false;\n            }\n        }\n        return bracketCount\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char ch =\
    \ brackets.charAt(i);\n            if (ch == '<') {\n                stack.push(ch);\n\
    \            } else {\n                if (stack.isEmpty()) {\n              \
    \      return false;\n                }\n                stack.pop();\n      \
    \      }\n        }\n        return stack.isEmpty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // YOUR CODE HERE\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuz93ix16.java:24)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new UnsupportedOperationException(\"\
    Answer this question.\");\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Answer\
    \ this question.\n\tat Problem.correctBracketing(tmpntyrlis_.java:20)\n\tat Problem.main(tmpntyrlis_.java:23)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                open++;\n            } else {\n                open--;\n\
    \            }\n            if (open < 0) {\n                return false;\n \
    \           }\n        }\n        return open == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpens = 0;\n        int\
    \ numCloses = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n    \
    \        char bracket = brackets.charAt(i);\n            if (bracket == '<') {\n\
    \                numOpens++;\n            } else if (bracket == '>') {\n     \
    \           numCloses++;\n            }\n        }\n        return numOpens ==\
    \ numCloses;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_lwtyqg8.java:38)\n"
  stdout: ''
  timestamp: 1660011554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int o = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<')\
    \ o++;\n            else o--;\n            if (o < 0) return false;\n        }\n\
    \        return o == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // For every opening bracket,\
    \ check whether there is a corresponding closing bracket.\n        int currentOpen\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                currentOpen += 1;\n         \
    \   } else {\n                currentOpen -= 1;\n            }\n            if\
    \ (currentOpen < 0) {\n                return false;\n            }\n        }\n\
    \        // If there is an opening bracket left at the end, there was an unclosed\
    \ opening bracket.\n        if (currentOpen != 0) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuo65i8ok.java:27)\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            balance += brackets.charAt(i)\
    \ == '<' ? 1 : -1;\n            if (balance < 0) return false;\n        }\n  \
    \      return balance == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // return true if all opening\
    \ brackets have corresponding closing brackets\n        int count = 0;\n     \
    \   for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n = brackets.length();\n \
    \       if(n==0) return true;\n        int bal = 0;\n        for(int i=0;i<n;i++)\
    \ {\n            char c = brackets.charAt(i);\n            if(c=='<') bal++;\n\
    \            else if(c=='>') bal--;\n            if(bal < 0) return false;\n \
    \       }\n        return bal == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                counter++;\n            } else {\n              \
    \  counter--;\n            }\n            if (counter < 0) {\n               \
    \ return false;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011548
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                stack.push(c);\n            } else\
    \ {\n                if (stack.empty()) {\n                    return false;\n\
    \                }\n                stack.pop();\n            }\n        }\n \
    \       return stack.empty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return 0 == brackets.chars().filter(x\
    \ -> (x == '<')).count() - brackets.chars().filter(x -> (x == '>')).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjxb50jx.java:28)\n"
  stdout: ''
  timestamp: 1660011554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"\
    <>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n\
    \    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4q1a4viw.java:23)\n"
  stdout: ''
  timestamp: 1660011542
