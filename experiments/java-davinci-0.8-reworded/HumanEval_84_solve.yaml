name: HumanEval_84_solve
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer N, return the total sum of its\
  \ digits in binary.\n    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n\
  \    // >>> solve((150l))\n    // (\"110\")\n    // >>> solve((147l))\n    // (\"\
  1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264\
  \ 10000.\n    // Output:\n    // a string of binary number\n    public static String\
  \ solve(long N) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        // your code here. \n        // write the function solve(long\
    \ N) \n        // return the string of binary number\n        String result =\
    \ \"\";\n        while (N != 0) {\n            long r = N % 2;\n            result\
    \ = r + result;\n            N = N / 2;\n        }\n        return result;", '        return
    Long.toBinaryString(N);', '        return Integer.toBinaryString((int)N);', '        return
    "";', "        String s = \"\";\n        while (N > 0) {\n            s = N %\
    \ 2 + s;\n            N /= 2;\n        }\n        return s;", "        StringBuilder\
    \ sb = new StringBuilder();\n        while (N > 0) {\n            sb.append(N\
    \ % 2);\n            N = N / 2;\n        }\n        return sb.reverse().toString();",
  '        return Long.toBinaryString(N);', "        //Write your code here\n    \
    \    return Long.toBinaryString(N);", "        int c = 0;\n        while (Math.pow(2,\
    \ c) <= N) c++;\n        c--;\n        StringBuilder sb = new StringBuilder();\n\
    \        while (c >= 0) {\n            if (N - Math.pow(2, c) >= 0) {\n      \
    \          sb.append(\"1\");\n                N -= Math.pow(2, c);\n         \
    \   } else {\n                sb.append(\"0\");\n            }\n            c--;\n\
    \        }\n        return sb.toString();", '        return null;', '        return
    Long.toBinaryString(N);', '        throw new UnsupportedOperationException("Method
    solve has not been implemented yet.");', "        // Your code here\n        return\
    \ null;", '        return null;', '        return Long.toBinaryString(N);', " \
    \       // Write your code here.\n        return \"\";", '        return "";',
  "        String a = Long.toBinaryString(N);\n        int sum = 0;\n        for (int\
    \ i = 0; i < a.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(a.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);", "        if (N == 0) {\n   \
    \         return \"0\";\n        }\n        String s = \"\";\n        while (N\
    \ > 0) {\n            s = s + ((N % 2 == 0) ? \"0\" : \"1\");\n            N =\
    \ N / 2;\n        }\n        return new StringBuilder(s).reverse().toString();",
  '        // Your code here!', '        return Long.toBinaryString(N);', '        return
    Long.toBinaryString(N);', '        return Long.toBinaryString(N);', "        String\
    \ binaryString = Long.toBinaryString(N);\n        int sum = 0;\n        for (int\
    \ i = 0; i < binaryString.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(binaryString.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);", "        // Convert to string\
    \ and then to binary\n        String binary = Long.toBinaryString(N);\n      \
    \  long total = 0;\n        for (int i = 0; i < binary.length(); i++) {\n    \
    \        total += Character.getNumericValue(binary.charAt(i));\n        }\n  \
    \      return Long.toString(total);", "        String s = \"\";\n        while\
    \ (N > 0) {\n            s = (N % 2) + s;\n            N /= 2;\n        }\n  \
    \      return s;", "        String result = Long.toBinaryString(N);\n        return\
    \ result;", '        return Long.toBinaryString(N);', "        // First, we create\
    \ a string called output that will build the binary number output.\n        String\
    \ output = \"\";\n        // Create a loop to find the modulo of N and the binary\
    \ number 1, and store the remainder in output.\n        while (N != 0) {\n   \
    \         output = (N % 2) + output;\n            N = N / 2;\n        }\n    \
    \    // Return the output.\n        return output;", "        String binary =\
    \ Long.toBinaryString(N);\n        char[] binaryChars = binary.toCharArray();\n\
    \        int count = 0;\n        for (char c : binaryChars) {\n            if\
    \ (c == '1') {\n                count++;\n            }\n        }\n        return\
    \ Integer.toString(count);", "        // +++ your code here +++\n        return\
    \ null;", "        String result = \"\";\n        while (N > 0) {\n          \
    \  long rem = N % 2;\n            result = rem + result;\n            N = N /\
    \ 2;\n        }\n        return result;", '        return null;', "        String\
    \ n = String.valueOf(N);\n        String y = \"\";\n        for (int i = 0; i\
    \ < n.length(); i++) {\n            y += String.valueOf(Integer.parseInt(String.valueOf(n.charAt(i))));\n\
    \        }\n        return new BigInteger(y).toString(2);", '        return Long.toBinaryString(N);',
  "        String ans = \"\";\n        while (N > 0) {\n            long r = N % 2;\n\
    \            ans = r + ans;\n            N /= 2;\n        }\n        return ans;",
  '        return java.lang.Long.toBinaryString(N);', "        StringBuilder sb =\
    \ new StringBuilder();\n        String s = Long.toBinaryString(N);\n        return\
    \ s;", "        String value = Long.toBinaryString(N);\n        String[] arr =\
    \ value.split(\"\");\n        int result = 0;\n        for (String num : arr)\
    \ {\n            result += Integer.parseInt(num);\n        }\n        return String.valueOf(result);",
  "        String bin = Long.toBinaryString(N);\n        long sum = 0;\n        for\
    \ (char ch : bin.toCharArray()) {\n            sum += Integer.parseInt(String.valueOf(ch));\n\
    \        }\n        return String.valueOf(sum);", "        // Your solution goes\
    \ here.\n        return null;", "        // Your code here\n        return Long.toBinaryString(N);",
  "        StringBuilder sb = new StringBuilder();\n        String binary = Long.toBinaryString(N);\n\
    \        for (int i = 0; i < binary.length(); i++) {\n            sb.append(binary.charAt(i));\n\
    \        }\n        return sb.toString();", "        String binary = \"\";\n \
    \       while (N > 0) {\n            long remainder = N % 2;\n            binary\
    \ = binary + remainder;\n            N = N / 2;\n        }\n        char[] arr\
    \ = binary.toCharArray();\n        String newBinary = \"\";\n        for (int\
    \ i = arr.length - 1; i >= 0; i--) {\n            newBinary = newBinary + arr[i];\n\
    \        }\n        return newBinary;", '        return Long.toBinaryString(N);',
  "        // \u2193\u2193\u2193\u2193 your code goes here \u2193\u2193\u2193\u2193\
    \n        return new BigInteger(String.valueOf(N)).toString(2);\n        // \u2191\
    \u2191\u2191\u2191 end of your code \u2191\u2191\u2191\u2191", '        return
    convertToBinary(N);', "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        String binary = Long.toBinaryString(N);\n\
    \        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n \
    \           sum += Integer.parseInt(String.valueOf(binary.charAt(i)));\n     \
    \   }\n        return String.valueOf(sum);", '        return "";', "      String\
    \ s = Integer.toBinaryString((int)N);\n      String[] a = s.split(\"\");\n   \
    \   int result = 0;\n      for (int i = 0; i < a.length; i++) {\n        result\
    \ += Integer.parseInt(a[i]);\n      }\n      return \"\" + result;", '        return
    solve(N, Long.toBinaryString(N));', "        StringBuilder builder = new StringBuilder();\n\
    \        long quotient = N;\n        long remainder = 0;\n        while (quotient\
    \ != 0) {\n            remainder = quotient % 2;\n            quotient = quotient\
    \ / 2;\n            builder.append(remainder);\n        }\n        return builder.reverse().toString();",
  '        return Long.toBinaryString(N);', '        return Long.toBinaryString(N);',
  "    }\n}\nclass Solution {\n    public static void main(String[] args) {\n    \
    \    Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext())\
    \ {\n            long N = scanner.nextLong();\n            System.out.println(Problem.solve(N));\n\
    \        }", '        return Long.toBinaryString(N);', "        String bin = Long.toBinaryString(N);\n\
    \        String sum = bin.chars().mapToObj(e -> String.valueOf(e))\n        .reduce((acc,\
    \ e) -> String.valueOf(Integer.parseInt(acc) + Integer.parseInt(e))).get();\n\
    \        return sum;", "        // WIP\n        return Long.toBinaryString(N);",
  "        String binary = Long.toBinaryString(N);\n        String result = \"\";\n\
    \        for (int i = 0; i < binary.length(); i++) {\n            result += String.valueOf(binary.charAt(i));\n\
    \        }\n        return result;", "        String s = \"\";\n        while\
    \ (N > 0) {\n            long i = N % 2;\n            s = i + s;\n           \
    \ N = N / 2;\n        }\n        return s;", '        return new BigInteger(String.valueOf(N)).toString(2);',
  "        if (N > 10000 || N < 0) {\n            return null;\n        }\n      \
    \  int sum = 0;\n        // loop through each digit of N\n        for (int i =\
    \ 0; i < Integer.toString(N).length(); i++) {\n            // add the i'th digit\
    \ of N to sum\n            sum += Character.getNumericValue(Integer.toString(N).charAt(i));\n\
    \        }\n        return Integer.toBinaryString(sum);", "        StringBuilder\
    \ sb = new StringBuilder();\n        while (N != 0) {\n            if (N % 2 ==\
    \ 0) {\n                sb.append('0');\n            } else {\n              \
    \  sb.append('1');\n            }\n            N /= 2;\n        }\n        return\
    \ sb.reverse().toString();", "    }\n}\n\npublic class Solution {\n    public\
    \ static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
    \        int N = scanner.nextInt();\n        String result = Problem.solve(N);\n\
    \        System.out.println(result);", "        String s = Long.toBinaryString(N);\n\
    \        return s;", '        return "";', '        return Integer.toBinaryString((int)N);',
  '        return Long.toBinaryString(N);', "        // Your code goes here\n    \
    \    StringBuilder sb = new StringBuilder();\n        while (N != 0) {\n     \
    \       sb.append(N % 2);\n            N /= 2;\n        }\n        sb.reverse();\n\
    \        return sb.toString();", "        String binary = \"\";\n        while\
    \ (N > 0) {\n            binary = Long.toString(N % 2) + binary;\n           \
    \ N = N / 2;\n        }\n        return binary;", '        return Long.toBinaryString(N);',
  '        return "";', '        return Long.toBinaryString(N);', "        String\
    \ bin = \"\";\n        if (N == 0) {\n            return \"0\";\n        }\n \
    \       int power = 0;\n        for (; Math.pow(2, power) <= N; power++)\n   \
    \         ;\n        power--;\n        for (int i = power; i >= 0; i--) {\n  \
    \          if (N >= Math.pow(2, i)) {\n                bin += \"1\";\n       \
    \         N -= Math.pow(2, i);\n            } else {\n                bin += \"\
    0\";\n            }\n        }\n        return bin;", '        return Long.toBinaryString(N);',
  "        //>>> solve((1000l))\n        //(\"1\")\n        System.out.println(\"\
    Input: \" + N);\n        StringBuilder sb = new StringBuilder();\n        long\
    \ n = N;\n        while (n > 0) {\n            long a = n % 2;\n            sb.append(a);\n\
    \            n = n / 2;\n        }\n        String reversed = sb.reverse().toString();\n\
    \        String result = \"\";\n        for (int i = 0; i < reversed.length();\
    \ i++) {\n            if (reversed.charAt(i) == '1') {\n                result\
    \ = reversed.substring(i);\n                break;\n            }\n        }\n\
    \        System.out.println(\"Output: \" + result);\n        return result;",
  "        long tmp = N;\n        StringBuffer sb = new StringBuffer();\n        while\
    \ (tmp > 0) {\n            sb.append(tmp % 2);\n            tmp /= 2;\n      \
    \  }\n        return sb.reverse().toString();", '        return Long.toBinaryString(N);',
  "        // Return result.\n        return Integer.toBinaryString((int)N);", " \
    \       String output = Long.toBinaryString(N);\n        String result = String.valueOf(Arrays.stream(output.split(\"\
    \")).mapToInt(Integer::parseInt).sum());\n        return result;", "        String\
    \ binaryString = Long.toBinaryString(N);\n        long result = 0;\n        for\
    \ (int i = 0; i < binaryString.length(); i++) {\n            result += Integer.parseInt(binaryString.substring(i,\
    \ i + 1));\n        }\n        return Long.toString(result);", "        StringBuilder\
    \ sb = new StringBuilder();\n        long n = N;\n        while (n != 0) {\n \
    \           sb.append(n % 2);\n            n /= 2;\n        }\n        return\
    \ sb.reverse().toString();", "        String s = Long.toBinaryString(N);\n   \
    \     int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      result += s.charAt(i) - '0';\n        }\n        return Integer.toString(result);",
  '        return null;', "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        // https://stackoverflow.com/questions/3236424/java-convert-integer-to-binary-and-binary-to-integer\n\
    \        // https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#toBinaryString-int-\n\
    \        // https://stackoverflow.com/questions/38984006/convert-binary-to-decimal-in-java\n\
    \        String numStr = Integer.toBinaryString((int)N);\n        return numStr;",
  "        // Start coding here\n        // Input (N)\n        // Output a string\
    \ of binary number\n        // Constraints 0 \u2264 N \u2264 10000.\n        //\
    \ Solution\n        // return Long.toBinaryString(N);\n        // End coding here\n\
    \        String binaryString = Long.toBinaryString(N);\n        return binaryString;",
  '        return Long.toBinaryString(N);', "        // System.out.println(String.format(\"\
    N = %d\", N));\n        StringBuilder sb = new StringBuilder();\n        while\
    \ (N > 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n \
    \       return sb.reverse().toString();", '        return Long.toBinaryString(N);',
  "        // Write your code here.\n        return null;", '        return new BigInteger(Long.toBinaryString(N).toString(),
    2).toString();', "        // Write your code here\n        // To print results\
    \ to the standard output you can use System.out.println()\n        // Example:\
    \ System.out.println(\"Hello world!\");\n        String bin = Long.toBinaryString(N);\n\
    \        int sum = bin.chars().map(Character::getNumericValue).sum();\n      \
    \  return String.valueOf(sum);", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < 16; i++) {\n            sb.append(N%2);\n       \
    \     N /= 2;\n        }\n        return sb.reverse().toString();", '        return
    new BigInteger(N + "").toString(2);', "        // Write your code here.\n    \
    \    String converted = Long.toBinaryString(N);\n        // System.out.println(converted);\n\
    \        int sum = 0;\n        for (int i = 0; i < converted.length(); i++) {\n\
    \            sum += Integer.parseInt(String.valueOf(converted.charAt(i)));\n \
    \       }\n        return String.valueOf(sum);", "        String result = \"\"\
    ;\n        String temp = \"\";\n        while (N > 0) {\n            temp = Long.toString(N\
    \ % 2);\n            result = temp + result;\n            N = N / 2;\n       \
    \ }\n        return result;", "    // Solution:\n        StringBuilder result\
    \ = new StringBuilder();\n        int remainder = 0;\n        while (N > 0) {\n\
    \            remainder = (int) (N % 2);\n            N = N / 2;\n            result.append(String.valueOf(remainder));\n\
    \        }\n        return result.reverse().toString();", "        return Arrays.stream(Long.toBinaryString(N).split(\"\
    \"))\n        .reduce(\"\", (acc, cur) -> acc + (Integer.parseInt(cur) % 2));",
  '        return Long.toBinaryString(N);', "        String binary = Long.toBinaryString(N);\n\
    \        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n \
    \           sum += binary.charAt(i) - '0';\n        }\n        return \"\" + sum;",
  '        return Long.toBinaryString(N);', '        return Long.toBinaryString(N);',
  '        return Long.toBinaryString(N);', "        String s = Long.toBinaryString(N);\n\
    \        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      if (s.charAt(i) == '1') {\n                sum++;\n            }\n    \
    \    }\n        return String.valueOf(sum);", '        return Long.toBinaryString(N);',
  "        String sum = \"\";\n        StringBuilder sumBuilder = new StringBuilder(sum);\n\
    \        String binary = Long.toBinaryString(N);\n        for (int i = 0; i <\
    \ binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n      \
    \          sumBuilder.append(1);\n            }\n        }\n        return sumBuilder.toString();",
  "      // Write your code here\n      // To print results to the standard output\
    \ you can use System.out.println()\n      // Example: System.out.println(\"Hello\
    \ world!\");\n        String a = Integer.toBinaryString((int)N);\n        String\
    \ b = \"\";\n        for(int i = a.length()-1; i >= 0; i--){\n            b +=\
    \ a.charAt(i);\n        }\n        return b;", "        return \"\" + Long.toBinaryString(N).chars().map(x\
    \ -> x - '0').sum();", "        String s = Long.toBinaryString(N);\n        return\
    \ String.valueOf(s.chars().map(Character::getNumericValue).sum());", "       \
    \ String s = \"\";\n        for (int i = 0; i < N; i++) {\n            s += \"\
    1\";\n        }\n        return s;", '        return Long.toBinaryString(N);',
  "        String bin = Long.toBinaryString(N);\n        int sum = 0;\n        for\
    \ (int i = 0; i < bin.length(); i++) {\n            sum += Integer.parseInt(String.valueOf(bin.charAt(i)));\n\
    \        }\n        return String.valueOf(sum);", '        return Long.toBinaryString(N);',
  '        return null;', "        String string = Long.toBinaryString(N);\n     \
    \   return string;", "        String binary = Long.toBinaryString(N);\n      \
    \  int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n       \
    \     sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n      \
    \  return String.valueOf(sum);", "        // Your code here\n        return \"\
    \";", "        // Write your code here:\n        return new BigInteger(String.valueOf(N)).toString(2);",
  "        String ret = Long.toBinaryString(N);\n        return ret;", '        return
    Integer.toBinaryString((int)N);', "        String s = Long.toBinaryString(N);\n\
    \        return (s);", '        return Long.toBinaryString(N);', "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ System.out.println()\n        // Example: System.out.println(\"Hello world!\"\
    );\n        String binString = Long.toBinaryString(N);\n        String sum = String.valueOf(Arrays.stream(binString.split(\"\
    \")).filter(x -> !x.equals(\"\")).mapToInt(Integer::parseInt).sum());\n      \
    \  return sum;", "        // Your code here\n        return \"\";", "        String\
    \ res = \"\";\n        for (int i = 0; i < 16; i++) {\n            res = (N %\
    \ 2) + res;\n            N /= 2;\n        }\n        return res;", "        StringBuilder\
    \ sb = new StringBuilder();\n        while (N != 0) {\n            sb.append(N\
    \ % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();",
  '        return java.lang.Long.toBinaryString(N);', "        // fill in your answer\
    \ here\n        return Long.toBinaryString(N);", '        return Long.toBinaryString(N);',
  "        String n = Long.toBinaryString(N);\n        int length = n.length();\n\
    \        int sum = 0;\n        for (int i = 0; i < length; i++) {\n          \
    \  if (n.charAt(i) == '1') {\n                sum += 1;\n            }\n     \
    \   }\n        return (Integer.toString(sum));", "        // Your code here:\n\
    \        // Write your code below this line.\n        List<String> digits = new\
    \ ArrayList<>();\n        if (N == 0) {\n            return \"0\";\n        }\n\
    \        while (N > 0) {\n            digits.add(Long.toString(N % 2));\n    \
    \        N /= 2;\n        }\n        Collections.reverse(digits);\n        return\
    \ String.join(\"\", digits);", '        return Long.toBinaryString(N);', "   \
    \     // Good luck!\n        String ans = \"\";\n        for (int i = 0; i < 100000;\
    \ i++) {\n            if (N == 0) {\n                break;\n            }\n \
    \           if (N % 2 == 0) {\n                ans = \"0\" + ans;\n          \
    \  } else {\n                ans = \"1\" + ans;\n            }\n            N\
    \ /= 2;\n        }\n        return ans;", '        return Long.toBinaryString(N);',
  "        // Write your code here.\n        String s = Long.toBinaryString(N);\n\
    \        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n     \
    \       sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        return\
    \ Long.toString(sum);", "        // Write your code here.\n        return \"\"\
    ;", "        StringBuilder out0 = new StringBuilder();\n        out0.append(Integer.toBinaryString((int)N));\n\
    \        return new String(out0);", "        // Fill this in.\n        return\
    \ Long.toBinaryString(N);", "        long ans = 0l;\n        long i = 0l;\n  \
    \      while (N != 0) {\n            if (N % 2 == 1) {\n                ans +=\
    \ Math.pow(10, i);\n            }\n            N /= 2;\n            i++;\n   \
    \     }\n        return \"\" + ans;", '        return "";', '        throw new
    RuntimeException("Method not yet implemented");', '        return Long.toBinaryString(N);',
  '        return Long.toBinaryString(N);', '        return Long.toBinaryString(N);',
  "        int times = 0;\n        int count = 0;\n        while(N > 0) {\n      \
    \      count += N % 2;\n            N /= 2;\n            times++;\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        while(times > 0) {\n\
    \            if(count > 0) {\n                sb.append(1);\n                count--;\n\
    \            } else {\n                sb.append(0);\n            }\n        \
    \    times--;\n        }\n        return sb.toString();", "        String res\
    \ = \"\";\n        while (N != 0) {\n            res = (N % 2) + res;\n      \
    \      N /= 2;\n        }\n        return res;", '        return Long.toBinaryString(N);',
  "        // Your code here\n        String n = Long.toBinaryString(N);\n       \
    \ String s = String.valueOf(n);\n        String res = \"\";\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            char num = s.charAt(i);\n       \
    \     res += String.valueOf(num);\n        }\n        return res;", "        StringBuilder\
    \ sb = new StringBuilder();\n        int q = (int) (N/2);\n        int r = (int)\
    \ (N%2);\n        sb.append(r);\n        while (q > 0) {\n            r = q%2;\n\
    \            q = q/2;\n            sb.append(r);\n        }\n        return sb.reverse().toString();",
  '        return Long.toBinaryString(N);', "        String res = \"\";\n        while\
    \ (N != 0) {\n            res = N % 2 + res;\n            N /= 2;\n        }\n\
    \        return res;", "        // Initialize a string of binary number\n    \
    \    String binary = \"\";\n        // Initialize a temporary variable\n     \
    \   int temp = 0;\n        // Assign temporary variable to integer N\n       \
    \ temp = (int) N;\n        // While the temporary variable is greater than 0\n\
    \        while (temp > 0) {\n            // Assign the result of the remainder\
    \ of the temporary variable divided by 2 to the string of binary number\n    \
    \        binary = temp % 2 + binary;\n            // Assign the result of the\
    \ division of the temporary variable by 2 to the temporary variable\n        \
    \    temp = temp / 2;\n        }\n        // Return the string of binary number\n\
    \        return binary;", '        return Integer.toBinaryString((int)N);', '        return
    Long.toBinaryString(N);', "        String res = Long.toBinaryString(N);\n    \
    \    return res;", "        BigInteger big = BigInteger.valueOf(N);\n        return\
    \ big.toString(2);", "        String s = new String();\n        for (long i =\
    \ N; i > 0; i /= 2)\n            s = (i % 2) + s;\n        return s;", '        return
    Long.toBinaryString(N);', '        return toBase(N, 2);', "        String b =\
    \ Long.toBinaryString(N);\n        // System.out.println(b);\n        int sum\
    \ = 0;\n        for (int i = 0; i < b.length(); i++) {\n            char c = b.charAt(i);\n\
    \            sum += Integer.parseInt(String.valueOf(c));\n        }\n        return\
    \ String.valueOf(sum);", '        return null;', "        // Write your code here.\n\
    \        String a=\"\";\n        while(N>0){\n            a=(N%2)+a;\n       \
    \     N=N/2;\n        }\n        return a;", '        return Long.toBinaryString(N);',
  "        // Your Solution here\n        return \"\";", "        long M = N;\n  \
    \      StringBuilder result = new StringBuilder();\n        for (int i = 0; i\
    \ < 10000; i++) {\n            long rem = M % 2;\n            result.append(rem);\n\
    \            M = M / 2;\n            if (M == 0) {\n                break;\n \
    \           }\n        }\n        return result.reverse().toString();", "    \
    \    // Binary number representation of N\n        String bin = Long.toBinaryString(N);\n\
    \        // Convert bin to char array\n        char[] binChars = bin.toCharArray();\n\
    \        // Init sum\n        int sum = 0;\n        // Loop over each char in\
    \ binChars and convert to integer\n        for (char c : binChars) {\n       \
    \     // add each integer to sum\n            sum += Integer.parseInt(String.valueOf(c));\n\
    \        }\n        // return sum\n        return String.valueOf(sum);", '        return
    "";', "        // Your code goes here\n        String x = \"\";\n        while\
    \ (N > 0) {\n            if (N % 2 == 0) {\n                x = \"0\" + x;\n \
    \           } else {\n                x = \"1\" + x;\n            }\n        \
    \    N = N / 2;\n        }\n        return x;", "        String x=\"\";\n    \
    \    while(N>0){\n            x=N%2+x;\n            N/=2;\n        }\n       \
    \ return x;", "        // Your implementation goes here.\n        return BigInteger.valueOf(N).toString(2);",
  '        return solve(Long.toBinaryString(N));', '        return Long.toBinaryString(N);',
  "        String binary = Long.toBinaryString(N);\n        int sum = 0;\n       \
    \ for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i)\
    \ == '1') {\n                sum += 1;\n            }\n        }\n        return\
    \ Integer.toString(sum);", '        return (Long.toBinaryString(N));', '        return
    Long.toBinaryString(N);', "        String _return = \"\";\n        String binary\
    \ = Long.toBinaryString(N);\n        String[] binary_array = binary.split(\"\"\
    );\n        int sum = 0;\n        for (int i = 0; i < binary_array.length; i++)\
    \ {\n            int num = Integer.parseInt(binary_array[i]);\n            sum\
    \ += num;\n        }\n        _return = Integer.toString(sum);\n        return\
    \ _return;", '        return Long.toBinaryString(N);', '        return Integer.toBinaryString((int)N);',
  "        String ans = \"\";\n        String m = N + \"\";\n        String[] num\
    \ = m.split(\"\");\n        for (int i = 0; i < num.length; i++) {\n         \
    \   int c = Integer.parseInt(num[i]);\n            ans += binary(c);\n       \
    \ }\n        return ans;", '        return "";', "        int sum = 0;\n     \
    \   StringBuilder out = new StringBuilder();\n        while (N > 0) {\n      \
    \      long rem = N % 2;\n            sum += rem;\n            out.append(rem);\n\
    \            N /= 2;\n        }\n        return out.reverse().toString();", " \
    \       String result = Long.toBinaryString(N);\n        int sum = 0;\n      \
    \  for (int i = 0; i < result.length(); i++) {\n            sum += Integer.parseInt(result.substring(i,\
    \ i + 1));\n        }\n        return sum + \"\";", "        // Your answer is\
    \ judged by the following rules:\n        // 1. If N < 0, the output should be\
    \ -1.\n        // 2. If N = 0, the output should be 0.\n        // 3. If N > 0,\
    \ the output should be the binary of N.\n        // 4. The output should be a\
    \ single line.\n        return \"\";", "        StringBuffer sb = new StringBuffer();\n\
    \        while (N > 0) {\n            sb.append(N % 2);\n            N /= 2;\n\
    \        }\n        return sb.reverse().toString();", '        return Long.toBinaryString(N);',
  '        return Long.toBinaryString(N);', "        String s = \"\";\n        while\
    \ (N != 0) {\n            s = (N % 2) + s;\n            N /= 2;\n        }\n \
    \       return s;", '        return Long.toBinaryString(N);', "        String[]\
    \ binary = new String[(int)N];\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < N; i++) {\n            binary[i] = Long.toBinaryString(i);\n\
    \            if (binary[i].length() < 10) {\n                result.append(\"\
    0\");\n            }\n            result.append(binary[i]);\n        }\n     \
    \   return result.toString();", "        // @add_your_code_here\n        return\
    \ \"\";", '        return "";', '        return Long.toBinaryString(N);', "  \
    \      String ans = \"\";\n        while (N > 0) {\n            ans = String.valueOf(N\
    \ % 2) + ans;\n            N /= 2;\n        }\n        return ans;", "       \
    \ // >>> Write your solution here <<<\n        return null;", "        // Null-check\
    \ / Invalid input check\n        if (N < 0) return \"\";\n        // Return value\n\
    \        String rv = \"\";\n        while (N > 0) {\n            rv = N % 2 +\
    \ rv;\n            N /= 2;\n        }\n        return rv;", '        return "";',
  '        return Long.toBinaryString(N);', "        String binary = Long.toBinaryString(N);\n\
    \        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n \
    \           int val = Character.getNumericValue(binary.charAt(i));\n         \
    \   sum += val;\n        }\n        return Integer.toString(sum);", "        String\
    \ result = \"\";\n        long quotient = N;\n        long remainder = 0;\n  \
    \      while (quotient > 0) {\n            remainder = quotient % 2;\n       \
    \     quotient = quotient / 2;\n            result = String.valueOf(remainder)\
    \ + result;\n        }\n        return result;", "        // Find the decimal\
    \ equivalent of a given binary\n        // A binary number system has only two\
    \ digits 0 and 1.\n        // So, a binary number can be represented as powers\
    \ of base 2.\n        // Number: 1001010\n        // 2^6 2^5 2^4 2^3 2^2 2^1 2^0\n\
    \        // 1 0 0 1 0 1 0\n        // So, equivalent decimal number is:\n    \
    \    // 64 + 8 + 2 = 74\n        // Write a C program to find equivalent decimal\
    \ value of a given binary number.\n        String s = Long.toBinaryString(N);\n\
    \        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      if (s.charAt(i) == '1') {\n                sum += (int) Math.pow(2, s.length()\
    \ - 1 - i);\n            }\n        }\n        return String.valueOf(sum);"]
stop_tokens:
- "\n    }\n"
