name: HumanEval_68_pluck
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"Given an array array list representing a branch of a tree\
  \ that has non-negative integer nodes\n    // your task is to pluck one of the nodes\
  \ and return it.\n    // The plucked node should be the node with the smallest even\
  \ value.\n    // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n    // The plucked node should be returned\
  \ in an array array list, [ smalest_value, its index ],\n    // If there are no\
  \ even values or the given array array list is empty, return [].\n    // Example\
  \ 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
  \    // Example 4:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(pluck((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
  \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        int minIndex = -1;\n        long minValue = -1;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n\
    \                if (minIndex == -1 || arr.get(i) < minValue) {\n            \
    \        minIndex = i;\n                    minValue = arr.get(i);\n         \
    \       }\n            }\n        }\n        ArrayList<Long> newArr = new ArrayList<Long>();\n\
    \        if (minIndex == -1) {\n            return newArr;\n        }\n      \
    \  newArr.add(minValue);\n        newArr.add((long)minIndex);\n        return\
    \ newArr;", "        // Implement this function\n        Long smalestValue = Long.MAX_VALUE;\n\
    \        Long index = null;\n        for (Long i = 0L; i < arr.size(); i++) {\n\
    \            Long value = arr.get(i);\n            if (value % 2 == 0 && value\
    \ < smalestValue) {\n                smalestValue = value;\n                index\
    \ = i;\n            }\n        }\n        if (index == null) {\n            return\
    \ new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(smalestValue,\
    \ index));", "        if (arr.size() == 0) {\n            return arr;\n      \
    \  }\n        return null;", "        ArrayList<Long> r = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) return r;\n        Optional<Long> x = arr.stream().filter(k\
    \ -> k % 2 == 0).min(Long::compare);\n        if (!x.isPresent()) return r;\n\
    \        Long first = x.get();\n        for (int i = 0; i < arr.size(); i++)\n\
    \            if (arr.get(i) == first) {\n                r.add(first);\n     \
    \           r.add((long)i);\n                return r;\n            }\n      \
    \  return r;", '        return null;', "        ArrayList<Long> a = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) return a;\n        long min = -1;\n        int idx\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long x =\
    \ arr.get(i);\n            if (x % 2 == 0) {\n                if (min == -1 ||\
    \ x < min) {\n                    min = x;\n                    idx = i;\n   \
    \             }\n            }\n        }\n        if (min == -1) return a;\n\
    \        a.add(min);\n        a.add((long)idx);\n        return a;", "       \
    \ if (arr.size() == 0) {\n            return new ArrayList<Long>();\n        }\n\
    \        TreeMap<Long, Integer> sorted = new TreeMap<Long, Integer>();\n     \
    \   for (int i = 0; i < arr.size(); i++) {\n            Long node = arr.get(i);\n\
    \            if (node % 2 == 0) {\n                sorted.put(node, i);\n    \
    \        }\n        }\n        if (sorted.size() == 0) {\n            return new\
    \ ArrayList<Long>();\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(sorted.firstKey());\n        result.add((long)sorted.get(sorted.firstKey()));\n\
    \        return result;", "        Optional<Long> found = arr.stream().filter(i\
    \ -> i % 2 == 0).findFirst();\n        if (found.isPresent()) {\n            ArrayList<Long>\
    \ answer = new ArrayList<Long>();\n            answer.add(found.get());\n    \
    \        answer.add((long)arr.indexOf(found.get()));\n            return answer;\n\
    \        }\n        return new ArrayList<Long>();", '        return new ArrayList<Long>();',
  "        ArrayList<Long> output = new ArrayList<Long>();\n        try {\n      \
    \      // 2l is even, so we can use it as a seed.\n            Pair<Long, Integer>\
    \ even =\n                StreamEx.of(arr)\n                .map(x -> new Pair<Long,\
    \ Integer>(x, arr.indexOf(x)))\n                .filter(x -> x.getValue0() % 2\
    \ == 0)\n                .reduce((x, y) -> x.getValue0() < y.getValue0() ? x :\
    \ y)\n                .orElse(new Pair<Long, Integer>(2l, 0));\n            //\
    \ Return nothing if the node is even.\n            if (even.getValue0() == 2l)\
    \ {\n                return output;\n            }\n            output.add(even.getValue0());\n\
    \            output.add((long)even.getValue1());\n        } catch (Exception ex)\
    \ {\n            ex.printStackTrace();\n        }\n        return output;", '        return
    null;', "        ArrayList<Long> indexAndValue = new ArrayList<Long>();\n    \
    \    ArrayList<Long> evenValues = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < arr.size(); i++){\n            if (arr.get(i) % 2 == 0){\n          \
    \      evenValues.add(arr.get(i));\n            }\n        }\n        if (evenValues.size()\
    \ == 0){\n            return indexAndValue;\n        }\n        else {\n     \
    \       Long smallestEven = Collections.min(evenValues);\n            Long index\
    \ = (long)arr.indexOf(smallestEven);\n            indexAndValue.add(smallestEven);\n\
    \            indexAndValue.add(index);\n            return indexAndValue;\n  \
    \      }", "        // throw new java.lang.UnsupportedOperationException(\"Delete\
    \ this line and implement your code here!\");\n        // System.out.println(\"\
    pluck(\" + arr + \")\");\n        if (arr.size() == 0) return arr;\n        Long\
    \ smallestEven = arr.stream().filter(x -> x % 2 == 0).min(Comparator.naturalOrder()).orElse(null);\n\
    \        if (smallestEven == null) return arr;\n        Long index = (long) arr.indexOf(smallestEven);\n\
    \        return new ArrayList<Long>(Arrays.asList(smallestEven, index));", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long plucked\
    \ = -1;\n        int pluckedIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0)\
    \ {\n                if (plucked == -1 || value < plucked) {\n               \
    \     plucked = value;\n                    pluckedIndex = i;\n              \
    \  }\n            }\n        }\n        if (plucked == -1) {\n            return\
    \ result;\n        }\n        result.add(plucked);\n        result.add((long)pluckedIndex);\n\
    \        return result;", "        ArrayList<Long> r = new ArrayList<Long>();\n\
    \        Long e = null;\n        int l = arr.size();\n        for (int i = 0;\
    \ i < l; i++) {\n            Long n = arr.get(i);\n            if (n % 2 == 0)\
    \ {\n                if (e == null || n < e) {\n                    e = n;\n \
    \                   r.clear();\n                    r.add(e);\n              \
    \      r.add((long)i);\n                }\n            }\n        }\n        return\
    \ r;", "        if (arr.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        long min = Long.MAX_VALUE;\n        int minidx = -1;\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            long v = arr.get(i);\n\
    \            if (v % 2 == 0 && v < min) {\n                min = v;\n        \
    \        minidx = i;\n            }\n        }\n        if (minidx == -1) {\n\
    \            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        ret.add(min);\n        ret.add((long)minidx);\n\
    \        return ret;", "        long even = Long.MAX_VALUE;\n        long index\
    \ = -1;\n        int arrSize = arr.size();\n        if (arrSize > 0) {\n     \
    \       for (int i = 0; i < arrSize; i++) {\n                long num = arr.get(i);\n\
    \                if (num % 2 == 0 && num < even) {\n                    even =\
    \ num;\n                    index = i;\n                }\n            }\n   \
    \     }\n        if (index != -1) {\n            return new ArrayList<Long>(Arrays.asList(even,\
    \ index));\n        } else {\n            return new ArrayList<Long>(Arrays.asList());\n\
    \        }", "        ArrayList<Long> ans = new ArrayList<Long>();\n        if\
    \ (arr.size() == 0) {\n            return ans;\n        }\n        int min = Integer.MAX_VALUE;\n\
    \        int mi = -1;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i).intValue();\n\
    \                mi = i;\n            }\n        }\n        if (mi == -1) {\n\
    \            return ans;\n        }\n        ans.add((long)min);\n        ans.add((long)mi);\n\
    \        return ans;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if(arr.size() == 0) {\n            return result;\n        }\n      \
    \  long min = arr.get(0);\n        int min_index = 0;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if(value\
    \ % 2 == 0 && value < min) {\n                min = value;\n                min_index\
    \ = i;\n            }\n        }\n        if(min % 2 == 0) {\n            result.add(min);\n\
    \            result.add((long)min_index);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        Optional<Long> min =\
    \ arr.stream().filter(n -> n % 2 == 0).min(Comparator.naturalOrder());\n     \
    \   if (min.isPresent()) {\n            int index = arr.indexOf(min.get());\n\
    \            result.add(min.get());\n            result.add((long)index);\n  \
    \      }\n        return result;", "        // the two nodes\n        ArrayList<Long>\
    \ node = new ArrayList<Long>();\n        ArrayList<Long> node2 = new ArrayList<Long>();\n\
    \        // the smallest even number found so far\n        long min = Integer.MAX_VALUE;\n\
    \        // does the array have even values?\n        boolean has_even = false;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long v = arr.get(i);\n\
    \            if (v % 2 == 0) {\n                if (v < min) {\n             \
    \       node = new ArrayList<Long>(Arrays.asList(v, (long)i));\n             \
    \       min = v;\n                }\n                if (v == min) {\n       \
    \             node2 = new ArrayList<Long>(Arrays.asList(v, (long)i));\n      \
    \          }\n                has_even = true;\n            }\n        }\n   \
    \     if (has_even) {\n            if (node.get(1) < node2.get(1)) {\n       \
    \         return node;\n            } else {\n                return node2;\n\
    \            }\n        } else {\n            return new ArrayList<Long>();\n\
    \        }", '        return arr.stream().filter(x -> x % 2 == 0).reduce((a, b)
    -> a < b ? a : b).map(x -> new ArrayList<Long>(Arrays.asList(x, (long)arr.indexOf(x)))).orElse(new
    ArrayList<Long>());', "        ArrayList<Long> results = new ArrayList<Long>();\n\
    \        return results;", "        // return -1;\n        throw new RuntimeException(\"\
    Not implemented\");", "        if (arr.size() == 0) {\n            return arr;\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        Long\
    \ min = new Long(99999999);\n        int min_index = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < min) {\n                min = arr.get(i);\n                min_index = i;\n\
    \            }\n        }\n        if (min == 99999999) {\n            return\
    \ result;\n        }\n        result.add(min);\n        result.add((long)min_index);\n\
    \        return result;", "        // Type your Java code here.\n        // Find\
    \ the lowest even number and return the tuple of that number and its index.\n\
    \        return arr.stream()\n                .map(i -> new Pair<Long, Long>(i,\
    \ (long)arr.indexOf(i)))\n                .reduce((a, b) -> (a.getValue0() < b.getValue0()\
    \ && a.getValue0() % 2 == 0 ? a : b))\n                .map(r -> new ArrayList<Long>(Arrays.asList(r.getValue0(),\
    \ r.getValue1())))\n                .orElse(new ArrayList<Long>(Arrays.asList()));",
  "        if (arr.size() > 0) {\n            // first create a list of nonnegative\
    \ even integers\n            ArrayList<Long> even = new ArrayList<Long>();\n \
    \           for (int i = 0; i < arr.size(); i++) {\n                if (arr.get(i)\
    \ % 2 == 0) {\n                    even.add(arr.get(i));\n                }\n\
    \            }\n            // now find the smallest of those integers\n     \
    \       long smallest = even.get(0);\n            for (int i = 0; i < even.size();\
    \ i++) {\n                if (even.get(i) < smallest) {\n                    smallest\
    \ = even.get(i);\n                }\n            }\n            // now find the\
    \ index of that smallest integer\n            int index = 0;\n            for\
    \ (int i = 0; i < arr.size(); i++) {\n                if (arr.get(i) == smallest)\
    \ {\n                    index = i;\n                    break;\n            \
    \    }\n            }\n            // finally create the return list\n       \
    \     ArrayList<Long> ret = new ArrayList<Long>();\n            ret.add(smallest);\n\
    \            ret.add((long)index);\n            return ret;\n        } else {\n\
    \            return new ArrayList<Long>();\n        }", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) return result;\n\
    \        long min_even = 10001;\n        int min_index = -1;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < min_even) {\n                min_even = arr.get(i);\n                min_index\
    \ = i;\n            }\n        }\n        if (min_index == -1) return result;\n\
    \        result.add(min_even);\n        result.add((long)min_index);\n       \
    \ return result;", "        ArrayList<Long> ret = new ArrayList<Long>();\n   \
    \     long smalest_value = -1;\n        long index = -1;\n        for (long i\
    \ = 0; i < arr.size(); i++) {\n            long l = arr.get((int)i);\n       \
    \     if (l % 2 == 0) {\n                if (smalest_value == -1 || l < smalest_value)\
    \ {\n                    smalest_value = l;\n                    index = i;\n\
    \                }\n            }\n        }\n        if (smalest_value == -1)\
    \ {\n            return ret;\n        }\n        ret.add(smalest_value);\n   \
    \     ret.add(index);\n        return ret;", "        long smallest = Long.MAX_VALUE;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          if (arr.get(i) % 2 == 0 && arr.get(i) < smallest) {\n             \
    \   smallest = arr.get(i);\n                index = i;\n            }\n      \
    \  }\n        if (index == -1) {\n            return new ArrayList<Long>();\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(smallest, index));",
  "        if (arr.size() == 0) {\n            return new ArrayList<Long>();\n   \
    \     }\n        long min = Long.MAX_VALUE;\n        int minIdx = -1;\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0\
    \ && arr.get(i) < min) {\n                min = arr.get(i);\n                minIdx\
    \ = i;\n            }\n        }\n        if (minIdx == -1) {\n            return\
    \ new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(min,\
    \ (long)minIdx));", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // your code here\n        return result;", "        // REPLACE WITH\
    \ YOUR CODE\n        ArrayList<Long> ans = new ArrayList<Long>();\n        long\
    \ min = Integer.MAX_VALUE;\n        int i = 0;\n        int k = 0;\n        for\
    \ (long x : arr) {\n            if (x % 2 == 0 && x < min) {\n               \
    \ min = x;\n                k = i;\n            }\n            i++;\n        }\n\
    \        if (min == Integer.MAX_VALUE) {\n            return ans;\n        }\n\
    \        ans.add(min);\n        ans.add((long)k);\n        return ans;", "   \
    \     // Your code here\n        // Make sure the result is typecasted to the\
    \ correct type\n        // i.e. ArrayList<Long>\n        // Use new ArrayList<Long>(Arrays.asList(...))\
    \ to create a\n        // new array list with values inside it\n        return\
    \ (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l)));", '        return
    null;', "        ArrayList<Long> evens = new ArrayList<Long>();\n        ArrayList<Long>\
    \ indices = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long e = arr.get(i);\n            if (e == 0) {\n           \
    \     evens.add(e);\n                indices.add((long)i);\n            } else\
    \ if (e % 2 == 0) {\n                evens.add(e);\n                indices.add((long)i);\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ new ArrayList<Long>();\n        }\n        long min = evens.get(0);\n      \
    \  int index = 0;\n        for (int i = 1; i < evens.size(); i++) {\n        \
    \    long e = evens.get(i);\n            if (e < min) {\n                min =\
    \ e;\n                index = i;\n            }\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add(min);\n        result.add(indices.get((long)index));\n\
    \        return result;", "        ArrayList<Long> al = new ArrayList<Long>();\n\
    \        for (Long l : arr) {\n            if (l % 2 == 0) {\n               \
    \ al.add(l);\n            }\n        }\n        if (al.size() == 0) {\n      \
    \      return new ArrayList<Long>();\n        }\n        long l = al.get(0);\n\
    \        for (Long ll : al) {\n            if (ll < l) {\n                l =\
    \ ll;\n            }\n        }\n        return new ArrayList<Long>(Arrays.asList(l,\
    \ (long)arr.indexOf(l)));", "        // Your code here\n        return null;",
  '        return null;', "        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long l = arr.get(i);\n\
    \            if (l % 2 == 0) {\n                evens.add(l);\n            }\n\
    \        }\n        if (evens.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        long smallest = Collections.min(evens);\n        ArrayList<Long>\
    \ rv = new ArrayList<Long>();\n        rv.add(smallest);\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            Long l = arr.get(i);\n            if\
    \ (l == smallest) {\n                rv.add((long)i);\n                return\
    \ rv;\n            }\n        }\n        return rv;", "        // type: function\n\
    \        long val = Long.MAX_VALUE;\n        int idx = -1;\n        int i = 0;\n\
    \        for (Long x : arr) {\n            if (x != null && x != 0 && x % 2 ==\
    \ 0 && x < val) {\n                val = x;\n                idx = i;\n      \
    \      }\n            i++;\n        }\n        if (idx >= 0) {\n            return\
    \ new ArrayList<Long>(Arrays.asList(val, (long)idx));\n        } else {\n    \
    \        return new ArrayList<Long>(Arrays.asList());\n        }", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        Optional<Long> res1 = arr.stream().filter(x\
    \ -> x % 2 == 0).min(Long::compare);\n        Long even_min = -1l;\n        if\
    \ (res1.isPresent()) {\n            even_min = res1.get();\n        }\n      \
    \  if (even_min >= 0) {\n            for (int i = 0; i < arr.size(); i++) {\n\
    \                if (arr.get(i) == even_min) {\n                    res.add(even_min);\n\
    \                    res.add((long) i);\n                    break;\n        \
    \        }\n            }\n        }\n        return res;", '        return arr;',
  "        List<Long> odds = arr.stream().filter(\n            n -> n % 2 != 0\n \
    \       ).collect(Collectors.toList());\n        List<Long> evens = arr.stream().filter(\n\
    \            n -> n % 2 == 0\n        ).collect(Collectors.toList());\n      \
    \  if (odds.size() == arr.size()) {\n            return new ArrayList<Long>();\n\
    \        }\n        else {\n            ArrayList<Long> ans = new ArrayList<Long>();\n\
    \            ans.add(\n                evens.stream().min(\n                 \
    \   Comparator.comparing(Long::valueOf)\n                ).get()\n           \
    \ );\n            ans.add(\n                (long) arr.indexOf(\n            \
    \        ans.get(0)\n                )\n            );\n            return ans;\n\
    \        }", "        Long lMin = Arrays.stream(arr.toArray(new Long[0])).mapToLong(l\
    \ -> l).min().orElse(0);\n        ArrayList<Long> arrEvens = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                arrEvens.add(arr.get(i));\n            }\n      \
    \  }\n        Long lMinEven = Arrays.stream(arrEvens.toArray(new Long[0])).mapToLong(l\
    \ -> l).min().orElse(0);\n        int iIndex = arr.indexOf(lMinEven);\n      \
    \  return new ArrayList<Long>(Arrays.asList(lMinEven, (long)iIndex));", "    \
    \    ArrayList<Long> evens = new ArrayList<Long>();\n        for (Long l : arr)\
    \ {\n            if (l % 2 == 0) {\n                evens.add(l);\n          \
    \  }\n        }\n        if (evens.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        long min = evens.get(0);\n        long index = 0;\n      \
    \  for (int i = 0; i < evens.size(); i++) {\n            if (evens.get(i) < min)\
    \ {\n                min = evens.get(i);\n                index = i;\n       \
    \     }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add(min);\n        result.add(index);\n        return result;",
  "        var ret = new ArrayList<Long>();\n        if (arr.size() == 0) {\n    \
    \        return ret;\n        }\n        int min = -1;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n           \
    \     if (min == -1) {\n                    min = i;\n                } else if\
    \ (arr.get(i) < arr.get(min)) {\n                    min = i;\n              \
    \  }\n            }\n        }\n        if (min == -1) {\n            return ret;\n\
    \        }\n        ret.add(arr.get(min));\n        ret.add((long)min);\n    \
    \    return ret;", '        return new ArrayList<Long>();', "        ArrayList<Long>\
    \ lst = new ArrayList<Long>();\n        Iterator<Long> iter = arr.iterator();\n\
    \        Long min = null;\n        int ind = -1;\n        for (int i = 0; iter.hasNext();\
    \ i++) {\n            Long cur = iter.next();\n            if (cur % 2 == 0) {\n\
    \                if (min == null || cur < min) {\n                    min = cur;\n\
    \                    ind = i;\n                }\n            }\n        }\n \
    \       if (min != null) {\n            lst.add(min);\n            lst.add((long)ind);\n\
    \        }\n        return lst;", "        Optional<Pair<Long, Integer>> o = arr.stream().map(x\
    \ -> new Pair<Long, Integer>(x, arr.indexOf(x))).\n            filter(x -> x.getValue0()\
    \ % 2 == 0).\n            min(Comparator.comparing(x -> x.getValue0()));\n   \
    \     return o.isPresent() ? new ArrayList<Long>(Arrays.asList(o.get().getValue0(),\
    \ (long)o.get().getValue1())) : new ArrayList<Long>();", "        int size = arr.size();\n\
    \        if (size == 0) return new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n\
    \        int index = 0;\n        for (int i = 0; i < size; i++) {\n          \
    \  long value = arr.get(i);\n            if (value % 2 == 0 && value < min) {\n\
    \                min = value;\n                index = i;\n            }\n   \
    \     }\n        if (min == Long.MAX_VALUE) return new ArrayList<Long>();\n  \
    \      ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(min);\n \
    \       ret.add((long)index);\n        return ret;", "        Long smallest =\
    \ null;\n        Long index = null;\n        for (Long i = 0l; i < arr.size();\
    \ i++) {\n            Long num = arr.get(i);\n            if (num % 2 == 0) {\n\
    \                if (smallest == null || num < smallest) {\n                 \
    \   smallest = num;\n                    index = i;\n                }\n     \
    \       }\n        }\n        if (smallest == null) {\n            return new\
    \ ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(smallest,\
    \ index));", "        ArrayList<Long> result = new ArrayList<Long>();\n      \
    \  int smallestIndex = 0;\n        Long smallest = null;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            Long current = arr.get(i);\n        \
    \    if (current % 2 == 0) {\n                if (smallest == null || current\
    \ < smallest) {\n                    smallest = current;\n                   \
    \ smallestIndex = i;\n                }\n            }\n        }\n        if\
    \ (smallest != null) {\n            result.add(smallest);\n            result.add((long)smallestIndex);\n\
    \        }\n        return result;", "        long minEvenVal = Long.MAX_VALUE;\n\
    \        int minEvenValIndex = Integer.MAX_VALUE;\n        ArrayList<Long> answer\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           long v = arr.get(i);\n            if (v % 2 == 0 && v < minEvenVal)\
    \ {\n                minEvenVal = v;\n                minEvenValIndex = i;\n \
    \           }\n        }\n        if (minEvenVal == Long.MAX_VALUE) {\n      \
    \      return answer;\n        }\n        answer.add(minEvenVal);\n        answer.add((long)minEvenValIndex);\n\
    \        return answer;", "        return arr.stream().filter(a -> a % 2 == 0).min(Comparator.comparing(a\
    \ -> a)).map(a -> {\n            ArrayList<Long> lst = new ArrayList<Long>();\n\
    \            lst.add(a);\n            lst.add((long)arr.indexOf(a));\n       \
    \     return lst;\n        }).orElse(new ArrayList<Long>());", "        OptionalInt\
    \ minIndex = IntStream.range(0, arr.size())\n                .filter(i -> arr.get(i)\
    \ % 2 == 0)\n                .reduce((a, b) -> arr.get(a) < arr.get(b) ? a : b);\n\
    \        return minIndex.isPresent() ? new ArrayList<Long>(Arrays.asList(arr.get(minIndex.getAsInt()),\
    \ (long)minIndex.getAsInt())) : new ArrayList<Long>();", '        return arr.stream().filter(i
    -> i % 2 == 0).sorted().limit(1).collect(Collectors.toCollection(ArrayList::new));',
  "        Optional<Long> smallestEven = arr.stream().filter(v -> v % 2 == 0).min(Long::compare);\n\
    \        if (smallestEven.isPresent()) {\n            long smallestEvenValue =\
    \ smallestEven.get();\n            Optional<Long> smallestEvenIndex = arr.stream().map(v\
    \ -> v == smallestEvenValue ? 1l : 0l).collect(Collectors.summarizingLong(Long::longValue)).map(Long::longValue).min(Long::compare);\n\
    \            if (smallestEvenIndex.isPresent()) {\n                long smallestEvenIndexValue\
    \ = smallestEvenIndex.get();\n                return new ArrayList<Long>(Arrays.asList(smallestEvenValue,\
    \ smallestEvenIndexValue));\n            }\n        }\n        return new ArrayList<Long>(Arrays.asList());",
  "        Long min = Long.MAX_VALUE;\n        Integer minIndex = null;\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            Long val = arr.get(i);\n            if (val % 2 == 0 && val < min)\
    \ {\n                min = val;\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex != null) {\n            ret.add(min);\n     \
    \       ret.add((long)minIndex);\n        }\n        return ret;", "        Long\
    \ minEvenValue = Long.MAX_VALUE;\n        Long minEvenIndex = Long.MAX_VALUE;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long currentValue\
    \ = arr.get(i);\n            if (currentValue % 2 == 0 && currentValue < minEvenValue)\
    \ {\n                minEvenValue = currentValue;\n                minEvenIndex\
    \ = (long)i;\n            }\n        }\n        if (minEvenValue == Long.MAX_VALUE\
    \ || minEvenIndex == Long.MAX_VALUE) {\n            return new ArrayList<Long>();\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(minEvenValue, minEvenIndex));",
  "        ArrayList<Long> answer = new ArrayList<Long>();\n        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        ArrayList<Long> indexes = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                evens.add(arr.get(i));\n                indexes.add((long)i);\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ answer;\n        }\n        else {\n            Long smallestEven = evens.get(0);\n\
    \            for (int i = 0; i < evens.size(); i++) {\n                if (evens.get(i)\
    \ < smallestEven) {\n                    smallestEven = evens.get(i);\n      \
    \          }\n            }\n            Long smallestIndex = (long)1;\n     \
    \       for (int i = 0; i < evens.size(); i++) {\n                if (evens.get(i)\
    \ == smallestEven) {\n                    smallestIndex = indexes.get(i);\n  \
    \                  break;\n                }\n            }\n            answer.add(smallestEven);\n\
    \            answer.add(smallestIndex);\n            return answer;\n        }",
  "        int i = 0;\n        int j = -1;\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        for (i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0 && value < smallestEvenValue) {\n            \
    \    smallestEvenValue = value;\n                j = i;\n            }\n     \
    \   }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        if (j !=\
    \ -1) {\n            ans.add(smallestEvenValue);\n            ans.add((long)j);\n\
    \        }\n        return ans;", "        Long minEvenValue = null;\n       \
    \ Integer minEvenValueIndex = null;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long val = arr.get(i);\n            if (val != null && (val %\
    \ 2) == 0) {\n                if (minEvenValue == null || minEvenValue > val)\
    \ {\n                    minEvenValue = val;\n                    minEvenValueIndex\
    \ = i;\n                }\n            }\n        }\n        if (minEvenValue\
    \ == null) {\n            return new ArrayList<Long>();\n        }\n        return\
    \ new ArrayList<Long>(Arrays.asList(minEvenValue, (long)minEvenValueIndex));",
  "        ArrayList<Long> out = new ArrayList<Long>();\n        Long min_val = Long.MAX_VALUE;\n\
    \        int min_i = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         Long val = arr.get(i);\n            if (val % 2 == 0 && val < min_val)\
    \ {\n                min_val = val;\n                min_i = i;\n            }\n\
    \        }\n        if (min_i != -1) {\n            out.add(min_val);\n      \
    \      out.add((long)min_i);\n        }\n        return out;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        for (Long i: arr) {\n            if (i % 2 == 0) {\n                even.add(i);\n\
    \            }\n        }\n        if (even.size() == 0) {\n            return\
    \ result;\n        }\n        Long min = even.get(0);\n        for (Long i: even)\
    \ {\n            if (i < min) {\n                min = i;\n            }\n   \
    \     }\n        result.add(min);\n        result.add((long) arr.indexOf(min));\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        boolean hasEven = false;\n        int minIndex = 0;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            long val = arr.get(i);\n        \
    \    if (val % 2 == 0) {\n                hasEven = true;\n                if\
    \ (result.size() == 0) {\n                    result.add(val);\n             \
    \       result.add((long)i);\n                } else {\n                    long\
    \ curMin = result.get(0);\n                    if (val < curMin) {\n         \
    \               result.clear();\n                        result.add(val);\n  \
    \                      result.add((long)i);\n                    }\n         \
    \       }\n            }\n        }\n        if (!hasEven) {\n            result.clear();\n\
    \        }\n        return result;", "        long min = -1;\n        long minIdx\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (min == -1 || arr.get(i) < min) {\n        \
    \            min = arr.get(i);\n                    minIdx = i;\n            \
    \    }\n            }\n        }\n        if (min == -1) {\n            return\
    \ new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(min,\
    \ minIdx));", "        // arr[0]<=arr[1]<=arr[2]<=arr[3]<=arr[4]<=arr[5]<=...\n\
    \        // arr[0]=0\n        // arr[1]=1\n        // arr[2]=2\n        // arr[3]=3\n\
    \        // arr[4]=4\n        // arr[5]=5\n        // arr[6]=6\n        // arr[7]=7\n\
    \        // arr[8]=8\n        // arr[9]=9\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        Long[] array = new Long[arr.size()];\n        long tot = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            array[i] = arr.get(i);\n\
    \            tot += arr.get(i);\n        }\n        Long[] array2 = new Long[arr.size()];\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            array2[i] = tot -\
    \ arr.get(i);\n        }\n        long max = -1;\n        long index = -1;\n \
    \       long index2 = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          if (array[i] > max) {\n                max = array[i];\n          \
    \      index = i;\n            }\n        }\n        max = -1;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (array2[i] > max) {\n        \
    \        max = array2[i];\n                index2 = i;\n            }\n      \
    \  }\n        if (index == index2) {\n            ret.add(max);\n            ret.add(index);\n\
    \        }\n        return ret;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        return result;", "        int n = arr.size();\n        if (n == 0) {\n\
    \            return new ArrayList<Long>();\n        }\n        long minVal = Long.MAX_VALUE;\n\
    \        int minIdx = -1;\n        for (int i = 0; i < n; i++) {\n           \
    \ long v = arr.get(i);\n            if (v % 2 == 0 && v < minVal) {\n        \
    \        minVal = v;\n                minIdx = i;\n            }\n        }\n\
    \        if (minIdx == -1) {\n            return new ArrayList<Long>();\n    \
    \    }\n        ArrayList<Long> res = new ArrayList<Long>();\n        res.add(minVal);\n\
    \        res.add((long)minIdx);\n        return res;", "        // Write your\
    \ code here\n        ArrayList<Long> list = new ArrayList<Long>();\n        Long\
    \ smallest = Long.MAX_VALUE;\n        int ind = -1;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            Long val = arr.get(i);\n            if (val\
    \ % 2 == 0 && val < smallest) {\n                smallest = val;\n           \
    \     ind = i;\n            }\n        }\n        if (ind != -1) {\n         \
    \   list.add(smallest);\n            list.add((long)ind);\n        }\n       \
    \ return list;", "        Long min_even = null;\n        int min_even_index =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            Long node =\
    \ arr.get(i);\n            if (node % 2 == 0) {\n                if (min_even\
    \ == null || node < min_even) {\n                    min_even = node;\n      \
    \              min_even_index = i;\n                }\n            }\n       \
    \ }\n        if (min_even_index == -1) {\n            return new ArrayList<Long>();\n\
    \        } else {\n            return new ArrayList<Long>(Arrays.asList(min_even,\
    \ (long)min_even_index));\n        }", "        if (arr.size() == 0) {\n     \
    \       return arr;\n        }\n        ArrayList<Long> r = new ArrayList<Long>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestEvenValueIndex\
    \ = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenValue) {\n       \
    \         smallestEvenValue = arr.get(i);\n                smallestEvenValueIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenValue == Long.MAX_VALUE)\
    \ {\n            return r;\n        }\n        r.add(smallestEvenValue);\n   \
    \     r.add((long)smallestEvenValueIndex);\n        return r;", "        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ new ArrayList<Long>();\n        }\n        Long min = Collections.min(evens);\n\
    \        int index = arr.indexOf(min);\n        ArrayList<Long> answer = new ArrayList<Long>();\n\
    \        answer.add(min);\n        answer.add((long)index);\n        return answer;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long e :\
    \ arr) {\n            if (e % 2 == 0) {\n                if (result.size() ==\
    \ 0) {\n                    result.add(e);\n                    result.add((long)\
    \ arr.indexOf(e));\n                } else if (e < result.get(0)) {\n        \
    \            result.set(0, e);\n                    result.set(1, (long) arr.indexOf(e));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size() == 0)\
    \ {\n            return res;\n        }\n        int min_ind = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (res.size() == 0) {\n   \
    \             if (arr.get(i) % 2 == 0) {\n                    res.add(arr.get(i));\n\
    \                    res.add((long)i);\n                }\n            } else\
    \ {\n                if (arr.get(i) % 2 == 0 && arr.get(i) < res.get(0)) {\n \
    \                   res.set(0, arr.get(i));\n                    res.set(1, (long)i);\n\
    \                }\n            }\n        }\n        return res;", "        //implement\
    \ the code here\n        return null;", "        long min = Long.MAX_VALUE;\n\
    \        int minIndex = 0;\n        boolean hasEven = false;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n    \
    \            hasEven = true;\n                if (arr.get(i) < min) {\n      \
    \              min = arr.get(i);\n                    minIndex = i;\n        \
    \        }\n            }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        if (hasEven) {\n            res.add(min);\n            res.add((long)minIndex);\n\
    \        }\n        return res;", "        if (arr.size() == 0) {\n          \
    \  return new ArrayList<Long>();\n        }\n        long smallestEven = Long.MAX_VALUE;\n\
    \        long smallestEvenIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEven) {\n\
    \                smallestEven = arr.get(i);\n                smallestEvenIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenIndex == -1) {\n   \
    \         return new ArrayList<Long>();\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n\
    \        return result;", "        int n = arr.size();\n        if (n == 0) return\
    \ new ArrayList<Long>();\n        ArrayList<Long> r = new ArrayList<Long>();\n\
    \        ArrayList<Long> evens = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n\
    \        int minPos = -1;\n        for (int i = 0; i < n; i++) {\n           \
    \ long v = arr.get(i);\n            if (v % 2 == 0) {\n                evens.add(v);\n\
    \                if (v < min) {\n                    min = v;\n              \
    \      minPos = i;\n                }\n            }\n        }\n        int numEvens\
    \ = evens.size();\n        if (numEvens == 0) return new ArrayList<Long>();\n\
    \        r.add(min);\n        r.add((long)minPos);\n        return r;", '        return
    new ArrayList<Long>();', "        Long minEven = null;\n        Long minEvenIndex\
    \ = null;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (minEven == null || arr.get(i) < minEven) {\n\
    \                    minEven = arr.get(i);\n                    minEvenIndex =\
    \ (long)i;\n                }\n            }\n        }\n        if (minEven ==\
    \ null) {\n            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        ret.add(minEven);\n        ret.add(minEvenIndex);\n\
    \        return ret;", "        // TODO: solve the problem\n        return null;",
  '        return new ArrayList<Long>();', "        // your code here\n        int\
    \ i, len;\n        ArrayList<Long> out;\n        long minEven;\n        len =\
    \ arr.size();\n        out = new ArrayList<Long>();\n        if (len == 0) {\n\
    \            return out;\n        }\n        minEven = Long.MAX_VALUE;\n     \
    \   for (i = 0; i < len; i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < minEven) {\n                minEven = arr.get(i);\n            }\n       \
    \ }\n        if (minEven == Long.MAX_VALUE) {\n            return out;\n     \
    \   }\n        for (i = 0; i < len; i++) {\n            if (arr.get(i) == minEven)\
    \ {\n                out.add(minEven);\n                out.add((long)i);\n  \
    \              return out;\n            }\n        }\n        return out;", " \
    \       long min = arr.stream().filter(x -> x % 2 == 0).mapToLong(x -> x).min().orElse(-1);\n\
    \        if (min == -1) {\n            return new ArrayList<Long>();\n       \
    \ }\n        int index = arr.indexOf(min);\n        return new ArrayList<Long>(Arrays.asList(min,\
    \ (long)index));", "        ArrayList<Long> res = new ArrayList<Long>();\n   \
    \     int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long cur = arr.get(i);\n            if (cur % 2 == 0 && cur <\
    \ min) {\n                min = (int) cur;\n                res.clear();\n   \
    \             res.add(cur);\n                res.add((long) i);\n            }\n\
    \        }\n        return res;", "        // Write your code here\n        //\
    \ To print results to the standard output you can use System.out.println()\n \
    \       // Example: System.out.println(\"Hello world!\");\n        // System.out.println(\"\
    Largest even integer:\");\n        return arr;", '        throw new RuntimeException("Implement
    this!");', "        // Your code goes here\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        boolean found = false;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n           \
    \     if (!found) {\n                    result.add(arr.get(i));\n           \
    \         result.add((long) i);\n                    found = true;\n         \
    \       } else {\n                    if (arr.get(i) < result.get(0)) {\n    \
    \                    result.clear();\n                        result.add(arr.get(i));\n\
    \                        result.add((long) i);\n                    }\n      \
    \          }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        int\
    \ idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long\
    \ num = arr.get(i);\n            if (num % 2 == 0 && num < min) {\n          \
    \      min = num;\n                idx = i;\n            }\n        }\n      \
    \  if (idx != -1) {\n            ret.add(min);\n            ret.add((long)idx);\n\
    \        }\n        return ret;", '        return null;', "        if (arr.size()\
    \ > 0) {\n            ArrayList<Long> ret = new ArrayList<Long>();\n         \
    \   int idx = 0;\n            for (long i : arr) {\n                if (i % 2\
    \ == 0) {\n                    if (ret.size() == 0) {\n                      \
    \  ret.add(i);\n                        ret.add((long)idx);\n                \
    \    } else if (ret.get(0) > i) {\n                        ret.set(0, i);\n  \
    \                      ret.set(1, (long)idx);\n                    }\n       \
    \         }\n                idx++;\n            }\n            return ret;\n\
    \        } else {\n            return new ArrayList<Long>();\n        }", "  \
    \      // Edge case, if the array is empty or null\n        if (arr == null ||\
    \ arr.size() == 0) {\n            return new ArrayList<Long>();\n        }\n \
    \       // Return the result\n        return pluckHelp(arr, 0, arr.size());",
  "        ArrayList<Long> ans = new ArrayList<Long>();\n        Long firstEven =\
    \ null;\n        int firstEvenIdx = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (firstEven == null && arr.get(i) % 2 == 0) {\n      \
    \          firstEven = arr.get(i);\n                firstEvenIdx = i;\n      \
    \      } else if (firstEven != null && arr.get(i) % 2 == 0) {\n              \
    \  if (arr.get(i) < firstEven) {\n                    firstEven = arr.get(i);\n\
    \                    firstEvenIdx = i;\n                }\n            }\n   \
    \     }\n        if (firstEven != null) {\n            ans.add(firstEven);\n \
    \           ans.add((long)firstEvenIdx);\n        }\n        return ans;", " \
    \       if (arr.size() == 0) {\n            return arr;\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add(0, 1l);\n        result.add(1,\
    \ 0l);\n        for (Long i = 0l; i < arr.size(); i += 1) {\n            if (arr.get(i.intValue())\
    \ % 2 == 0) {\n                if (arr.get(i.intValue()) < result.get(0)) {\n\
    \                    result.set(0, arr.get(i.intValue()));\n                 \
    \   result.set(1, i);\n                }\n            }\n        }\n        if\
    \ (result.get(0) == 1l) {\n            result.clear();\n        }\n        return\
    \ result;", "        if (arr.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        long smallest_value = Integer.MAX_VALUE;\n        long smallest_index\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < smallest_value) {\n                smallest_value =\
    \ arr.get(i);\n                smallest_index = i;\n            }\n        }\n\
    \        if (smallest_index == -1) {\n            return new ArrayList<Long>();\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(smallest_value, smallest_index));",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long smallestEvenValue\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n        \
    \    if (arr.get(i) != null && arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenValue)\
    \ {\n                smallestEvenValue = arr.get(i);\n                result.clear();\n\
    \                result.add(arr.get(i));\n                result.add((long)i);\n\
    \            }\n        }\n        return result;", "        // Your Code Here\n\
    \        long smallest = Long.MAX_VALUE;\n        int index = -1;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long a = arr.get(i);\n     \
    \       if (a % 2 == 0 && a < smallest) {\n                smallest = a;\n   \
    \             index = i;\n            }\n        }\n        if (index == -1) {\n\
    \            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ output = new ArrayList<Long>();\n        output.add(smallest);\n        output.add((long)index);\n\
    \        return output;", '        return null;', "        // write your code\
    \ here\n        return null;", "        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestEvenValueIndex = -1;\n        long smallestValue = Long.MAX_VALUE;\n\
    \        int smallestValueIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long val = arr.get(i);\n            if (val < smallestValue)\
    \ {\n                smallestValue = val;\n                smallestValueIndex\
    \ = i;\n            }\n            if (val % 2 == 0 && val < smallestEvenValue)\
    \ {\n                smallestEvenValue = val;\n                smallestEvenValueIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenValueIndex == -1) {\n\
    \            return new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(smallestEvenValue,\
    \ (long)smallestEvenValueIndex));", "        ArrayList<Long> empty = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return empty;\n        }\n      \
    \  long[] node_array = new long[arr.size()];\n        long min = Long.MAX_VALUE;\n\
    \        int min_index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long node = arr.get(i);\n            if (node % 2 == 0 && node <\
    \ min) {\n                min = node;\n                min_index = i;\n      \
    \      }\n        }\n        if (min == Long.MAX_VALUE) {\n            return\
    \ empty;\n        }\n        return new ArrayList<Long>(Arrays.asList(min, (long)min_index));",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return result;\n        }\n        long val = 0;\n    \
    \    for (int i = 0; i < arr.size(); i++) {\n            long tmp = arr.get(i);\n\
    \            if (tmp % 2 == 0) {\n                if (val == 0) {\n          \
    \          val = tmp;\n                    result.add(val);\n                \
    \    result.add((long) i);\n                } else if (tmp < val) {\n        \
    \            val = tmp;\n                    result.set(0, val);\n           \
    \         result.set(1, (long) i);\n                }\n            }\n       \
    \ }\n        if (val == 0) {\n            result.clear();\n        }\n       \
    \ return result;", "        if (arr.size() == 0) return arr;\n        long min\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n        \
    \    if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n\
    \            }\n        }\n        if (min == Long.MAX_VALUE) return new ArrayList<Long>();\n\
    \        ArrayList<Long> ans = new ArrayList<Long>();\n        ans.add(min);\n\
    \        ans.add((long) arr.indexOf(min));\n        return ans;", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        Long num = arr.stream().filter(i -> (i\
    \ % 2 == 0)).min(Comparator.comparing(Long::valueOf)).orElse(null);\n        res.add(num);\n\
    \        res.add((long)arr.indexOf(num));\n        return res;", "        int\
    \ size = arr.size();\n        long min_even = Integer.MAX_VALUE;\n        int\
    \ min_even_index = -1;\n        for (int i = 0; i < size; i++) {\n           \
    \ long num = arr.get(i);\n            if (num % 2 == 0 && num < min_even) {\n\
    \                min_even = num;\n                min_even_index = i;\n      \
    \      }\n        }\n        if (min_even_index == -1) {\n            return new\
    \ ArrayList<Long>();\n        }\n        ArrayList<Long> lst = new ArrayList<Long>();\n\
    \        lst.add(min_even);\n        lst.add((long)min_even_index);\n        return\
    \ lst;", "        try {\n            long min = Long.MAX_VALUE;\n            int\
    \ min_idx = -1;\n            for (int i = 0; i < arr.size(); i++) {\n        \
    \        long n = arr.get(i);\n                if (n % 2 == 0 && n < min) {\n\
    \                    min = n;\n                    min_idx = i;\n            \
    \    }\n            }\n            if (min_idx >= 0) {\n                return\
    \ new ArrayList<Long>(Arrays.asList(min, (long)min_idx));\n            }\n   \
    \         return new ArrayList<Long>();\n        } catch (Throwable t) {\n   \
    \         t.printStackTrace();\n            throw t;\n        }", "        int\
    \ min = Integer.MAX_VALUE;\n        int min_index = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n          \
    \  if (value % 2 == 0 && value < min) {\n                min = (int)value;\n \
    \               min_index = i;\n            }\n        }\n        if (min_index\
    \ < 0) {\n            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add((long)min);\n        result.add((long)min_index);\n\
    \        return result;", '        throw new RuntimeException("Please implement
    the pluck() method");', "        List<Long> l = arr.stream().filter(x -> x % 2\
    \ == 0).collect(Collectors.toList());\n        if (l.size() == 0) {\n        \
    \    return new ArrayList<Long>();\n        }\n        long minEven = l.stream().min(Comparator.comparing(Long::valueOf)).get();\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(minEven);\n\
    \        ret.add((long) arr.indexOf(minEven));\n        return ret;", "      \
    \  ArrayList<Long> r = new ArrayList<Long>();\n        long min = -1;\n      \
    \  int idx = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0) {\n                if (min == -1 || arr.get(i) < min)\
    \ {\n                    min = arr.get(i);\n                    idx = i;\n   \
    \             }\n            }\n        }\n        if (min == -1) {\n        \
    \    return r;\n        }\n        else {\n            r.add(min);\n         \
    \   r.add((long)idx);\n            return r;\n        }", "        ArrayList<Long>\
    \ retval = new ArrayList<Long>();\n        long size = arr.size();\n        if\
    \ (0 == size) {\n            return retval;\n        }\n        long i = 0;\n\
    \        ArrayList<Long> even = new ArrayList<Long>();\n        ArrayList<Long>\
    \ odd = new ArrayList<Long>();\n        for (Long v : arr) {\n            if (v\
    \ % 2 == 0) {\n                even.add(v);\n            } else {\n          \
    \      odd.add(v);\n            }\n        }\n        if (even.size() == 0) {\n\
    \            return retval;\n        }\n        long min = Collections.min(even);\n\
    \        i = 0;\n        for (Long v : arr) {\n            if (v == min) {\n \
    \               retval.add(min);\n                retval.add(i);\n           \
    \     return retval;\n            }\n            i++;\n        }\n        return\
    \ retval;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long smallest = Integer.MAX_VALUE;\n        int idx = 0;\n        int smallest_idx\
    \ = 0;\n        boolean found = false;\n        for (long i : arr) {\n       \
    \     if (i % 2 == 0 && i < smallest) {\n                smallest = i;\n     \
    \           smallest_idx = idx;\n                found = true;\n            }\n\
    \            idx++;\n        }\n        if (found) {\n            result.add(smallest);\n\
    \            result.add((long)smallest_idx);\n        }\n        return result;",
  "        long min = Long.MAX_VALUE;\n        int minIndex = -1;\n        int i =\
    \ 0;\n        for (long value : arr) {\n            if (value % 2 == 0 && value\
    \ < min) {\n                min = value;\n                minIndex = i;\n    \
    \        }\n            i++;\n        }\n        if (minIndex >= 0) {\n      \
    \      return new ArrayList<Long>(Arrays.asList(min, (long)minIndex));\n     \
    \   } else {\n            return new ArrayList<Long>();\n        }", '        return
    arr.stream().filter(x -> x % 2 == 0).sorted().collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> answer = new ArrayList<Long>();\n        if (arr.size()\
    \ == 0) {\n            return answer;\n        }\n        long evenValue = Long.MAX_VALUE;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          long n = arr.get(i);\n            if (n % 2 == 0 && n < evenValue)\
    \ {\n                evenValue = n;\n                index = i;\n            }\n\
    \        }\n        if (index != -1) {\n            answer.add(evenValue);\n \
    \           answer.add(index);\n        }\n        return answer;", "        Long\
    \ min_even = arr.stream().filter(x -> x % 2 == 0).min(Comparator.naturalOrder()).orElse(Long.MAX_VALUE);\n\
    \        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) == min_even) {\n                index = i;\n        \
    \        break;\n            }\n        }\n        if (index == -1) {\n      \
    \      return new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(min_even,\
    \ (long)index));", "        long min = Integer.MAX_VALUE;\n        int index =\
    \ 0;\n        int min_index = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n            \
    \    min = arr.get(i);\n                min_index = i;\n            }\n      \
    \  }\n        if (min == Integer.MAX_VALUE) {\n            ArrayList<Long> res\
    \ = new ArrayList<Long>();\n            return res;\n        }\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        res.add(min);\n        res.add((long)min_index);\n\
    \        return res;", "        long smalest = Long.MAX_VALUE;\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < smalest) {\n            \
    \    smalest = arr.get(i);\n                ret.clear();\n                ret.add(smalest);\n\
    \                ret.add((long)i);\n            }\n        }\n        return ret;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        ArrayList<Long> evenIndexes = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                evens.add(arr.get(i));\n                evenIndexes.add((long)i);\n\
    \            }\n        }\n        if (evens.size() == 0) {\n            return\
    \ result;\n        }\n        long smallestEven = evens.get(0);\n        long\
    \ smallestEvenIndex = evenIndexes.get(0);\n        for (int i = 0; i < evens.size();\
    \ i++) {\n            if (evens.get(i) < smallestEven) {\n                smallestEven\
    \ = evens.get(i);\n                smallestEvenIndex = evenIndexes.get(i);\n \
    \           }\n        }\n        result.add(smallestEven);\n        result.add(smallestEvenIndex);\n\
    \        return result;", "        ArrayList<Long> answer = new ArrayList<Long>();\n\
    \        Long minEven = Long.MAX_VALUE;\n        Long minEvenIndex = Long.MAX_VALUE;\n\
    \        for (Long i = 0L; i < arr.size(); i++) {\n            Long value = arr.get(i.intValue());\n\
    \            if (value % 2 == 0 && value < minEven) {\n                minEven\
    \ = value;\n                minEvenIndex = i;\n            }\n        }\n    \
    \    if (minEven != Long.MAX_VALUE) {\n            answer.add(minEven);\n    \
    \        answer.add(minEvenIndex);\n        }\n        return answer;", "    \
    \    // fill code here\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return res;\n        }\n\n      \
    \  ArrayList<Long> evens = arr.stream().filter(x -> x % 2 == 0).collect(Collectors.toCollection(ArrayList::new));\n\
    \        if (evens.size() == 0) {\n            return res;\n        }\n\n    \
    \    long min = Collections.min(evens);\n        long index = arr.indexOf(min);\n\
    \        res.add(min);\n        res.add(index);\n        return res;", "     \
    \   long min = Long.MAX_VALUE;\n        int index = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long n = arr.get(i);\n            if\
    \ (n > 0 && n % 2 == 0 && n < min) {\n                min = n;\n             \
    \   index = i;\n            }\n        }\n        if (index == -1) {\n       \
    \     return new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(min,\
    \ index));", "        Long min=arr.stream().filter(x->x%2==0).min(Comparator.comparing(Long::longValue)).orElse(null);\n\
    \        Integer idx=min==null?null:arr.indexOf(min);\n        return new ArrayList<Long>(Arrays.asList(min,\
    \ (long)idx));", "        //throw new java.lang.UnsupportedOperationException(\"\
    Not implemented yet.\");\n        long mindex = -1;\n        long mvalue = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long el = arr.get(i);\n\
    \            if (el % 2 == 0) {\n                if (mvalue < 0 || el < mvalue)\
    \ {\n                    mvalue = el;\n                    mindex = i;\n     \
    \           }\n            }\n        }\n        if (mindex >= 0) {\n        \
    \    return new ArrayList<Long>(Arrays.asList(mvalue, mindex));\n        } else\
    \ {\n            return new ArrayList<Long>(Arrays.asList());\n        }", " \
    \       ArrayList<Long> evens = new ArrayList<Long>();\n        for (Long l :\
    \ arr) {\n            if (l % 2 == 0) {\n                evens.add(l);\n     \
    \       }\n        }\n        Long min = Collections.min(evens);\n        Integer\
    \ idx = arr.indexOf(min);\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        ret.add(min);\n        ret.add((long)idx);\n        return ret;", " \
    \       ArrayList<Long> smallest = new ArrayList<Long>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            Long v = arr.get(i);\n            if\
    \ (v != null && v != 0 && v % 2 == 0) {\n                if (smallest.size() ==\
    \ 0) {\n                    smallest.add(arr.get(i));\n                    smallest.add((long)i);\n\
    \                } else {\n                    if (arr.get(i) < smallest.get(0))\
    \ {\n                        smallest.set(0, arr.get(i));\n                  \
    \      smallest.set(1, (long)i);\n                    }\n                }\n \
    \           }\n        }\n        return smallest;", "        Optional<Long> opt\
    \ = arr.stream().filter(l -> l%2 == 0).sorted().findFirst();\n        if (opt.isPresent())\
    \ {\n            Long l = opt.get();\n            Long i = (long)arr.indexOf(l);\n\
    \            return new ArrayList<Long>(Arrays.asList(l, i));\n        }\n   \
    \     return new ArrayList<Long>();", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        // your code here\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        for (Long i : arr) {\n            if (i.longValue() % 2 == 0) {\n   \
    \             evens.add(i);\n            }\n        }\n        if (evens.size()\
    \ == 0) {\n            return result;\n        }\n        Long smallest = evens.get(0);\n\
    \        for (Long i : evens) {\n            if (i.longValue() < smallest.longValue())\
    \ {\n                smallest = i;\n            }\n        }\n        Long smallestIndex\
    \ = 0l;\n        for (Long i = 0l; i < arr.size(); i++) {\n            if (arr.get(i.intValue()).longValue()\
    \ == smallest.longValue()) {\n                smallestIndex = i;\n           \
    \     break;\n            }\n        }\n        result.add(smallest);\n      \
    \  result.add(smallestIndex);\n        return result;", "        long min = Long.MAX_VALUE;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) return new ArrayList<Long>();\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        ret.add(min);\n        ret.add((long)minIndex);\n\
    \        return ret;", '        throw new UnsupportedOperationException("Not Implemented
    Yet.");', "        ArrayList<Long> result = new ArrayList<Long>();\n        Long\
    \ result_value = Long.MAX_VALUE;\n        int result_index = Integer.MAX_VALUE;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long value = arr.get(i);\n\
    \            if (value % 2 == 0 && value < result_value) {\n                result_value\
    \ = value;\n                result_index = i;\n            }\n        }\n    \
    \    if (result_value != Long.MAX_VALUE) {\n            result.add(result_value);\n\
    \            result.add((long)result_index);\n        }\n        return result;",
  '        return arr.stream().filter(e -> e % 2 == 0).reduce((a, b) -> a < b ? a
    : b).map(e -> new ArrayList<Long>(Arrays.asList(e, arr.indexOf(e)))).orElse(new
    ArrayList<Long>());', "        long smallest = Long.MAX_VALUE;\n        int index\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long val\
    \ = arr.get(i);\n            if (val % 2 == 0 && val < smallest) {\n         \
    \       smallest = val;\n                index = i;\n            }\n        }\n\
    \        if (index == -1) {\n            return new ArrayList<Long>();\n     \
    \   }\n        ArrayList<Long> res = new ArrayList<Long>();\n        res.add(smallest);\n\
    \        res.add((long)index);\n        return res;", "        Long minEven =\
    \ null;\n        Integer minEvenIndex = null;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (minEven\
    \ == null || arr.get(i) < minEven) {\n                    minEven = arr.get(i);\n\
    \                    minEvenIndex = i;\n                }\n            }\n   \
    \     }\n        if (minEven == null) {\n            return new ArrayList<Long>();\n\
    \        } else {\n            return new ArrayList<Long>(Arrays.asList(minEven,\
    \ (long)minEvenIndex));\n        }", "        Long mn_even = null;\n        int\
    \ mn_idx = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            Long n = arr.get(i);\n            if (n % 2 == 0) {\n           \
    \     if (mn_even == null || n < mn_even) {\n                    mn_even = n;\n\
    \                    mn_idx = i;\n                }\n            }\n        }\n\
    \        if (mn_even == null) return new ArrayList<Long>();\n        return new\
    \ ArrayList<Long>(Arrays.asList(mn_even, (long)mn_idx));", "        if (arr.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        Pair<Long,\
    \ Long> p = arr.stream().filter(x -> x % 2 == 0).min(Comparator.comparing(x ->\
    \ x)).map(x -> new Pair<Long, Long>(x, arr.indexOf(x))).orElse(new Pair<Long,\
    \ Long>(-1l, -1l));\n        if (p.getValue0() == -1) {\n            return new\
    \ ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(p.getValue0(),\
    \ p.getValue1()));", "        if (arr.size() == 0) return arr;\n        long min\
    \ = 10000;\n        int minIndex = 10000;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long num = arr.get(i);\n            if (num % 2 == 0 &&\
    \ num < min) {\n                min = num;\n                minIndex = i;\n  \
    \          }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        if (min == 10000) {\n            return ans;\n        }\n        ans.add(min);\n\
    \        ans.add((long)minIndex);\n        return ans;", "        if (arr.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        } else {\n     \
    \       ArrayList<Long> results = new ArrayList<Long>();\n            Long min\
    \ = Collections.min(arr);\n            if (min % 2 == 0) {\n                results.add(min);\n\
    \                results.add((long)arr.indexOf(min));\n            } else {\n\
    \                results.add((long)0);\n                results.add((long)0);\n\
    \            }\n            return results;\n        }", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long value = 0;\n        int index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long v = arr.get(i);\n\
    \            if (v % 2 == 0) {\n                if (index == -1 || v < value)\
    \ {\n                    value = v;\n                    index = i;\n        \
    \        }\n            }\n        }\n        if (index != -1) {\n           \
    \ res.add(value);\n            res.add((long)index);\n        }\n        return\
    \ res;", "        ArrayList<Long> ans = new ArrayList<Long>();\n        Long min\
    \ = null;\n        Long min_index = null;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long value = arr.get(i);\n            if (value % 2 == 0)\
    \ {\n                if (min == null || value < min) {\n                    min\
    \ = value;\n                    min_index = (long)i;\n                }\n    \
    \        }\n        }\n        if (min != null) {\n            ans.add(min);\n\
    \            ans.add(min_index);\n        }\n        return ans;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        if (arr.size() == 0) {\n          \
    \  return result;\n        }\n        long smallest = arr.get(0);\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) < smallest && arr.get(i) % 2 == 0) {\n                smallest\
    \ = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n\
    \        if (smallest % 2 == 0) {\n            result.add(smallest);\n       \
    \     result.add((long)smallestIndex);\n        }\n        return result;", " \
    \       ArrayList<Long> ans = new ArrayList<Long>();\n        // your code here.\n\
    \        return ans;", "        if (arr.size() == 0) {\n            return arr;\n\
    \        }\n        Long smallest = Long.MAX_VALUE;\n        int pos = -1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            Long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < smallest) {\n                smallest =\
    \ val;\n                pos = i;\n            }\n        }\n        if (pos ==\
    \ -1) {\n            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        result.add(smallest);\n        result.add((long)pos);\n\
    \        return result;", "        ArrayList<Long> evens = (ArrayList<Long>)arr.stream().filter(x\
    \ -> x % 2 == 0).collect(Collectors.toList());\n        if (evens.size() == 0)\
    \ return new ArrayList<Long>();\n        Long min = evens.stream().reduce(Long.MAX_VALUE,\
    \ (a, b) -> a < b ? a : b);\n        Long index = (long)arr.indexOf(min);\n  \
    \      ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(min);\n \
    \       ret.add(index);\n        return ret;", "        if (arr.size() == 0) {\n\
    \            return arr;\n        }\n        final long[] smallestEven = {Long.MAX_VALUE};\n\
    \        final int[] smallestEvenIndex = {0};\n        final boolean[] hasSmallestEven\
    \ = {false};\n        arr.stream().map(l -> {\n            if (l % 2 == 0 && l\
    \ < smallestEven[0]) {\n                smallestEven[0] = l;\n               \
    \ hasSmallestEven[0] = true;\n            }\n            return null;\n      \
    \  }).collect(Collectors.toList());\n        final int[] index = {0};\n      \
    \  arr.stream().map(l -> {\n            if (l.equals(smallestEven[0])) {\n   \
    \             smallestEvenIndex[0] = index[0];\n            }\n            index[0]++;\n\
    \            return null;\n        }).collect(Collectors.toList());\n        if\
    \ (hasSmallestEven[0]) {\n            return new ArrayList<Long>(Arrays.asList(smallestEven[0],\
    \ (long)smallestEvenIndex[0]));\n        } else {\n            return new ArrayList<Long>();\n\
    \        }", "        // Fill in this function to pass the test cases.\n     \
    \   // DO NOT remove any of the code in the template.\n        long min_even =\
    \ Long.MAX_VALUE;\n        long min_even_index = Long.MAX_VALUE;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n \
    \           if (value % 2 == 0 && value < min_even) {\n                min_even\
    \ = value;\n                min_even_index = i;\n            }\n        }\n  \
    \      if (min_even == Long.MAX_VALUE) {\n            return new ArrayList<Long>();\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(min_even, min_even_index));",
  "        int n = arr.size();\n        if (n == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        long\
    \ smallest_index = Long.MAX_VALUE;\n        long smallest_even = Long.MAX_VALUE;\n\
    \        for (int i = 0; i < n; i++) {\n            long x = arr.get(i);\n   \
    \         if (x % 2 == 0 && x < smallest_even) {\n                smallest_even\
    \ = x;\n                smallest_index = i;\n            }\n        }\n      \
    \  if (smallest_even == Long.MAX_VALUE) {\n            return new ArrayList<Long>();\n\
    \        }\n        res.add(smallest_even);\n        res.add(smallest_index);\n\
    \        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return result;\n        }\n     \
    \   Long minEven = Long.MAX_VALUE;\n        Integer minEvenIndex = -1;\n     \
    \   for (int i = 0; i < arr.size(); i++) {\n            Long v = arr.get(i);\n\
    \            if (v % 2 == 0 && v < minEven) {\n                minEven = v;\n\
    \                minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex\
    \ != -1) {\n            result.add(minEven);\n            result.add((long)minEvenIndex);\n\
    \        }\n        return result;", '        throw new RuntimeException("Implement
    me!");', "        long smallest = Long.MAX_VALUE;\n        int smallestIndex =\
    \ -1;\n        for (int i = 0; i < arr.size(); i++) {\n            long curr =\
    \ arr.get(i);\n            if (curr % 2 == 0 && curr < smallest) {\n         \
    \       smallest = curr;\n                smallestIndex = i;\n            }\n\
    \        }\n        if (smallestIndex < 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(smallest, (long)smallestIndex));",
  "        class TupleLongArrayList {\n            public Tuple2<Long,ArrayList<Long>>\
    \ t;\n            public TupleLongArrayList(Tuple2<Long,ArrayList<Long>> tt) {\n\
    \                t = tt;\n            }\n            public String toString()\
    \ {\n                return String.format(\"[%s,%s]\",t.getValue0(),t.getValue1());\n\
    \            }\n        }\n        // Solution.\n        // Preserve input to\
    \ be able to compare with output.\n        ArrayList<Long> arr_copy = new ArrayList<Long>(arr);\n\
    \        ArrayList<Long> res = new ArrayList<Long>();\n        // Write your solution\
    \ here\n        // return res;\n        ArrayList<Long> even_arr = new ArrayList<Long>();\n\
    \        for (Long e : arr) {\n            if (e%2 == 0) {\n                even_arr.add(e);\n\
    \            }\n        }\n        if (even_arr.size() == 0) {\n            res.add((long)0);\n\
    \            res.add((long)0);\n            return res;\n        }\n        Long\
    \ smallest_even = Collections.min(even_arr);\n        ArrayList<Integer> index_list\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) == smallest_even) {\n                index_list.add(i);\n\
    \            }\n        }\n        Integer smallest_index = Collections.min(index_list);\n\
    \        res.add(smallest_even);\n        res.add((long)smallest_index);\n   \
    \     return res;", '        return null;', "        ArrayList<Long> evs = new\
    \ ArrayList<Long>();\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) evs.add(arr.get(i));\n        }\n        if (evs.size() == 0) return\
    \ result;\n        Long min = Collections.min(evs);\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) == min) {\n               \
    \ result.add(min);\n                result.add((long)i);\n                return\
    \ result;\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ answer = new ArrayList<Long>();\n        // determine if there are any even\
    \ numbers\n        boolean hasEven = false;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                hasEven = true;\n\
    \                break;\n            }\n        }\n        if (hasEven) {\n  \
    \          // find the smallest even number\n            long smallest = arr.get(0);\n\
    \            for (int i = 0; i < arr.size(); i++) {\n                if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < smallest) {\n                    smallest = arr.get(i);\n\
    \                }\n            }\n            // find the index of the smallest\
    \ even number\n            long index = -1;\n            for (int i = 0; i < arr.size();\
    \ i++) {\n                if (arr.get(i) == smallest) {\n                    index\
    \ = i;\n                    break;\n                }\n            }\n       \
    \     answer.add(smallest);\n            answer.add(index);\n        }\n     \
    \   return answer;", "        // your code here\n        int sz = arr.size();\n\
    \        if (sz == 0) return new ArrayList<Long>();\n        ArrayList<Long> ans\
    \ = new ArrayList<Long>();\n        long smallest = 100000000l;\n        int index\
    \ = -1;\n        for (int i = 0; i < sz; i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < smallest) {\n                smallest =\
    \ val;\n                index = i;\n            }\n        }\n        if (index\
    \ == -1) return new ArrayList<Long>();\n        ans.add(smallest);\n        ans.add((long)index);\n\
    \        return ans;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        result.add((long)0l);\n        result.add((long)0l);\n        Long smallestEven\
    \ = (long)9223372036854775807l;\n        int index = -1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < smallestEven) {\n                smallestEven = arr.get(i);\n            \
    \    index = i;\n            }\n        }\n        if (index != -1) {\n      \
    \      result.set(0, smallestEven);\n            result.set(1, (long)index);\n\
    \        }\n        return result;", '        throw new RuntimeException("Not
    implemented.");', "        // // your code here\n        // return (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)));\n        // https://www.scala-lang.org/api/2.12.6/scala/collection/JavaConverters$.html\n\
    \        // https://alvinalexander.com/java/java-arraylist-to-scala-list-conversion-method\n\
    \        // https://alvinalexander.com/scala/how-create-initialize-immutable-lists-scala-cookbook\n\
    \        // https://alvinalexander.com/scala/scala-list-class-syntax-examples-immutable-array-cookbook\n\
    \        // http://www.scala-lang.org/api/2.9.1/scala/collection/immutable/List.html\n\
    \        // http://www.scala-lang.org/api/2.9.1/scala/collection/immutable/List$.html\n\
    \        // https://alvinalexander.com/scala/how-create-initialize-immutable-lists-scala-cookbook\n\
    \        // https://alvinalexander.com/scala/scala-list-class-syntax-examples-immutable-array-cookbook\n\
    \        // https://alvinalexander.com/scala/scala-immutable-map-class-examples-cookbook\n\
    \        // https://docs.scala-lang.org/overviews/collections/introduction.html\n\
    \        // https://docs.scala-lang.org/overviews/collections/maps.html\n    \
    \    // https://docs.scala-lang.org/overviews/collections/maps.html\n        //\
    \ https://docs.scala-lang.org/overviews/collections/maps.html\n        // https://www.scala-lang.org/api/2.12.6/scala/collection/immutable/Map.html\n\
    \        // https://alvinalexander.com/scala/scala-map-class-examples-scala-cookbook\n\
    \        // https://alvinalexander.com/scala/how-initialize", "        ArrayList<Long>retVal\
    \ = new ArrayList<Long>();\n        if (arr.size() == 0) {\n            return\
    \ retVal;\n        }\n        long minVal = arr.get(0);\n        long minIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (arr.get(i) < minVal) {\n                  \
    \  minVal = arr.get(i);\n                    minIndex = i;\n                }\n\
    \            }\n        }\n        if (minVal % 2 == 0) {\n            retVal.add(minVal);\n\
    \            retVal.add(minIndex);\n        }\n        return retVal;", "    \
    \    long min = Long.MAX_VALUE;\n        int min_ind = -1;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            long curr = arr.get(i);\n         \
    \   if (curr % 2 == 0 && curr < min) {\n                min = curr;\n        \
    \        min_ind = i;\n            }\n        }\n        if (min == Long.MAX_VALUE)\
    \ {\n            return new ArrayList<Long>();\n        }\n        ArrayList<Long>\
    \ output = new ArrayList<Long>();\n        output.add(min);\n        output.add((long)min_ind);\n\
    \        return output;", "        // BEGIN\n        ArrayList<Long> ans = new\
    \ ArrayList<Long>();\n        Integer idx = null;\n        Long smallest = null;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long el = arr.get(i);\n\
    \            if (el % 2 == 0) {\n                if (smallest == null || el <\
    \ smallest) {\n                    smallest = el;\n                    idx = i;\n\
    \                }\n            }\n        }\n        if (idx != null) {\n   \
    \         ans.add(smallest);\n            ans.add((long)idx);\n        }\n   \
    \     return ans;\n        // END", "        long minEven = 9999999999999999l;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long e = arr.get(i);\n            if (e % 2 == 0 && e < minEven)\
    \ {\n                minEven = e;\n                minIndex = i;\n           \
    \ }\n        }\n        ArrayList<Long> rv = new ArrayList<Long>();\n        if\
    \ (minIndex != -1) {\n            rv.add(minEven);\n            rv.add((long)minIndex);\n\
    \        }\n        return rv;", "        // Your code here\n        return new\
    \ ArrayList<Long>();", "        ArrayList<Long> lst = new ArrayList<Long>();\n\
    \        if (arr.size() == 0) {\n            return lst;\n        }\n        Long\
    \ min = Long.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            Long elem = arr.get(i);\n            if (elem\
    \ % 2 == 0 && elem < min) {\n                min = elem;\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex != -1) {\n            lst.add(min);\n\
    \            lst.add((long)minIndex);\n        }\n        return lst;", "    \
    \    ArrayList<Long> ret = new ArrayList<Long>();\n        Long smallestEvenVal\
    \ = null;\n        Long smallestEvenValIndex = null;\n        for (Long i = 0l;\
    \ i < arr.size(); i++) {\n            Long n = arr.get(i);\n            if (n\
    \ % 2 == 0) {\n                if (smallestEvenVal == null || n < smallestEvenVal)\
    \ {\n                    smallestEvenVal = n;\n                    smallestEvenValIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEvenVal\
    \ != null) {\n            ret.add(smallestEvenVal);\n            ret.add(smallestEvenValIndex);\n\
    \        }\n        return ret;", '        return new ArrayList<>();', "     \
    \   ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.size() < 1)\
    \ {\n            return res;\n        }\n        Long even = Long.MAX_VALUE;\n\
    \        Long even_index = 0L;\n        for (Long i = 0L; i < arr.size(); i++)\
    \ {\n            if (arr.get(i.intValue()) % 2 == 0) {\n                if (arr.get(i.intValue())\
    \ < even) {\n                    even = arr.get(i.intValue());\n             \
    \       even_index = i;\n                }\n            }\n        }\n       \
    \ if (even == Long.MAX_VALUE) {\n            return res;\n        }\n        res.add(even);\n\
    \        res.add(even_index);\n        return res;", "        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        // Any number is even if its lowest bit\
    \ is 0.\n        // System.out.println(\"arr = \" + arr);\n        Long min =\
    \ null;\n        for (int i = 0; i < arr.size(); i++) {\n            Long n =\
    \ arr.get(i);\n            if ((n & 1) == 0) {\n                if (min == null\
    \ || n < min) {\n                    min = n;\n                    ret.clear();\n\
    \                    ret.add(n);\n                    ret.add((long)i);\n    \
    \            }\n            }\n        }\n        // System.out.println(\"ret\
    \ = \" + ret);\n        return ret;", "        List<Long> tmp = arr.stream().filter(x\
    \ -> x % 2 == 0).collect(Collectors.toList());\n        if (tmp.size() == 0) return\
    \ new ArrayList<Long>();\n        Long min = tmp.stream().min(Comparator.comparing(Long::valueOf)).get();\n\
    \        return new ArrayList<Long>(Arrays.asList(min, (long)arr.indexOf(min)));",
  "        // BEGIN SOLUTION\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long min = Integer.MAX_VALUE;\n        int index = -1;\n        int count\
    \ = 0;\n        for (long x : arr) {\n            if (x % 2 == 0 && x < min) {\n\
    \                min = x;\n                index = count;\n            }\n   \
    \         count++;\n        }\n        if (index != -1) {\n            result.add(min);\n\
    \            result.add((long)index);\n        }\n        return result;\n   \
    \     // END SOLUTION", "        // your code here\n        // return new ArrayList<Long>();\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n           \
    \     temp.add(arr.get(i));\n            }\n        }\n        if (temp.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        Collections.sort(temp);\n\
    \        long minValue = temp.get(0);\n        long minValueIndex = arr.indexOf(minValue);\n\
    \        return new ArrayList<Long>(Arrays.asList(minValue, minValueIndex));",
  "        ArrayList<Long> ret = new ArrayList<Long>();\n        Long smallest = Long.MAX_VALUE;\n\
    \        Long index = Long.MAX_VALUE;\n        for (Long i = (long)0l; i < arr.size();\
    \ i++) {\n            Long value = arr.get(i.intValue());\n            if (value\
    \ % 2 == 0 && value < smallest) {\n                smallest = value;\n       \
    \         index = i;\n            }\n        }\n        if (smallest == Long.MAX_VALUE)\
    \ {\n            return ret;\n        }\n        ret.add(smallest);\n        ret.add(index);\n\
    \        return ret;", "        long[] r = new long[2];\n        boolean found\
    \ = false;\n        if (arr == null || arr.size() == 0) {\n            return\
    \ new ArrayList<Long>();\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long n = arr.get(i);\n            if (n % 2 == 0) {\n       \
    \         if (!found) {\n                    r[0] = n;\n                    r[1]\
    \ = i;\n                    found = true;\n                } else {\n        \
    \            if (n < r[0]) {\n                        r[0] = n;\n            \
    \            r[1] = i;\n                    }\n                }\n           \
    \ }\n        }\n        if (found) {\n            ArrayList<Long> result = new\
    \ ArrayList<Long>();\n            result.add(r[0]);\n            result.add(r[1]);\n\
    \            return result;\n        } else {\n            return new ArrayList<Long>();\n\
    \        }", '        return null;', "        // Write your code here.\n     \
    \   return null;", "        ArrayList<Long> ret = new ArrayList<Long>();\n   \
    \     // 1. Find the first even number\n        // 2. Find the smallest even number\n\
    \        // 3. Find the index of the smallest even number\n        //    if there\
    \ are multiple of the same smallest number,\n        //    use the first one,\
    \ not the last one.\n        // 4. Return (new ArrayList<Long>(Arrays.asList(value,\
    \ index)));\n        for (int i = 0; i < arr.size(); i++) {\n            Long\
    \ value = arr.get(i);\n            if (value % 2 == 0) {\n                ret.add(value);\n\
    \                ret.add((long)i);\n                break;\n            }\n  \
    \      }\n        for (int i = 0; i < arr.size(); i++) {\n            Long value\
    \ = arr.get(i);\n            if (value % 2 == 0) {\n                if (value\
    \ < ret.get(0)) {\n                    ret.set(0, value);\n                  \
    \  ret.set(1, (long)i);\n                }\n            }\n        }\n       \
    \ return ret;", "        ArrayList<Long> res = new ArrayList<Long>();\n      \
    \  Long least_even = Long.MAX_VALUE;\n        Integer least_even_idx = null;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            Long val = arr.get(i);\n\
    \            if (val % 2 == 0 && val < least_even) {\n                least_even\
    \ = val;\n                least_even_idx = i;\n            }\n        }\n    \
    \    if (least_even_idx != null) {\n            res.add(least_even);\n       \
    \     res.add((long)least_even_idx);\n        }\n        return res;", "     \
    \   // your code goes here\n        return new ArrayList<Long>();", "        //\
    \ Your code goes here\n        if (arr.size() == 0) {\n            return new\
    \ ArrayList<Long>();\n        }\n        long m = Long.MAX_VALUE;\n        int\
    \ mi = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0 && arr.get(i) < m) {\n                m = arr.get(i);\n           \
    \     mi = i;\n            }\n        }\n        if (mi == -1) {\n           \
    \ return new ArrayList<Long>();\n        }\n        ArrayList<Long> sol = new\
    \ ArrayList<Long>();\n        sol.add(m);\n        sol.add((long)mi);\n      \
    \  return sol;", "        if (arr.size() == 0) {\n            return arr;\n  \
    \      }\n        Optional<Long> optMin = arr.stream().filter(x -> x % 2 == 0).min(Long::compare);\n\
    \        if (!optMin.isPresent()) {\n            return new ArrayList<Long>();\n\
    \        }\n        long min = optMin.get();\n        int index = arr.indexOf(min);\n\
    \        return new ArrayList<Long>(Arrays.asList(min, (long)index));", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Pair<Long,\
    \ Long>> even_values = new ArrayList<Pair<Long, Long>>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            Long v = arr.get(i);\n            if\
    \ (v % 2 == 0) {\n                even_values.add(new Pair<Long, Long>(v, (long)i));\n\
    \            }\n        }\n        if (even_values.size() == 0) {\n          \
    \  return result;\n        }\n        even_values.sort(new Comparator<Pair<Long,\
    \ Long>>() {\n            @Override\n            public int compare(Pair<Long,\
    \ Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n\
    \            }\n        });\n        Pair<Long, Long> e = even_values.get(0);\n\
    \        result.add(e.getValue0());\n        result.add(e.getValue1());\n    \
    \    return result;", "        Long minEven = null;\n        Long minEvenIdx =\
    \ null;\n        for (int i = 0; i < arr.size(); i++) {\n            Long curr\
    \ = arr.get(i);\n            if (curr % 2 == 0) {\n                if (minEven\
    \ == null || curr < minEven) {\n                    minEven = curr;\n        \
    \            minEvenIdx = (long)i;\n                }\n            }\n       \
    \ }\n        if (minEven == null) {\n            return new ArrayList<Long>();\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(minEven, minEvenIdx));",
  "        long result = 2147483647;\n        int index = -1;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n        \
    \    if (value % 2 == 0 && value < result) {\n                result = value;\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new ArrayList<Long>();\n        }\n        return new\
    \ ArrayList<Long>(Arrays.asList(result, (long)index));", "        if (arr.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        long\
    \ i = 0, min = Long.MAX_VALUE, pos = 0;\n        for (long val : arr) {\n    \
    \        if (val % 2 == 0 && val < min) {\n                min = val;\n      \
    \          pos = i;\n            }\n            i++;\n        }\n        if (min\
    \ == Long.MAX_VALUE) {\n            return new ArrayList<Long>();\n        }\n\
    \        return new ArrayList<Long>(Arrays.asList(min, pos));", "        // Write\
    \ your code here.\n        return null;", "        ArrayList<Long> rtn = new ArrayList<Long>();\n\
    \        rtn.add((long)0l);\n        rtn.add((long)0l);\n        if (arr.size()\
    \ == 0) {\n            return rtn;\n        }\n        int minIdx = 0;\n     \
    \   long minValue = 0;\n        boolean set = false;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n           \
    \     if (!set) {\n                    minIdx = i;\n                    minValue\
    \ = arr.get(i);\n                    set = true;\n                } else {\n \
    \                   if (arr.get(i) < minValue) {\n                        minIdx\
    \ = i;\n                        minValue = arr.get(i);\n                    }\n\
    \                }\n            }\n        }\n        if (set) {\n           \
    \ rtn.set(0, minValue);\n            rtn.set(1, (long)minIdx);\n        }\n  \
    \      return rtn;", '        throw new UnsupportedOperationException("You must
    implement this function.");', "        Long best_even = Long.MAX_VALUE;\n    \
    \    Long best_even_idx = -1L;\n        for (Long i = 0L; i < arr.size(); i++)\
    \ {\n            Long a = arr.get(i.intValue());\n            if (a % 2 == 0 &&\
    \ a < best_even) {\n                best_even = a;\n                best_even_idx\
    \ = i;\n            }\n        }\n        if (best_even_idx < 0) {\n         \
    \   return new ArrayList<Long>();\n        }\n        return new ArrayList<Long>(Arrays.asList(best_even,\
    \ best_even_idx));", "        long min = (long)1e12;\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min\
    \ = arr.get(i);\n                ret.clear();\n                ret.add(min);\n\
    \                ret.add((long)i);\n            }\n        }\n        return ret;",
  "        // Use the variable arr to implement the function pluck\n        // Please\
    \ code here.\n        // Remove below statement after your implementation\n  \
    \      return new ArrayList<Long>();", "        if (arr.size() == 0) return new\
    \ ArrayList<Long>();\n        long min = Long.MAX_VALUE;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < min) {\n                min = arr.get(i);\n            }\n        }\n    \
    \    if (min == Long.MAX_VALUE) return new ArrayList<Long>();\n        return\
    \ new ArrayList<Long>(Arrays.asList(min, arr.indexOf(min)));", "        Optional<Long>\
    \ e = arr.stream().filter(item -> item % 2 == 0).min(Comparator.naturalOrder());\n\
    \        if (!e.isPresent()) return new ArrayList<Long>();\n        long val =\
    \ e.get();\n        ArrayList<Long> result = new ArrayList<Long>();\n        result.add(val);\n\
    \        result.add((long) arr.indexOf(val));\n        return result;", "    \
    \    // TODO implement me\n        return new ArrayList<Long>();", "        //\
    \ Your code goes here.\n        return null;", '        return null;', "     \
    \   // Your code here\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      if (arr.get(i) % 2 == 0) {\n                ArrayList<Long> result = new\
    \ ArrayList<Long>();\n                result.add(arr.get(i));\n              \
    \  result.add((long)i);\n                return result;\n            }\n     \
    \   }\n        return new ArrayList<Long>();", "        ArrayList<Long> ret =\
    \ new ArrayList<Long>();\n        ArrayList<Long> zeroed = new ArrayList<Long>();\n\
    \        long min = 0l;\n        long minzero = 0l;\n        long mindex = 0l;\n\
    \        long minind = 0l;\n        boolean found = false;\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            long d = arr.get(i);\n            if\
    \ (d == 0l) {\n                zeroed.add(d);\n                if (minzero ==\
    \ 0l || d < minzero) {\n                    minzero = d;\n                   \
    \ minind = i;\n                }\n            } else if (d % 2 == 0) {\n     \
    \           if (min == 0l || d < min) {\n                    min = d;\n      \
    \              mindex = i;\n                    found = true;\n              \
    \  }\n            }\n        }\n        if (found) {\n            ret.add(min);\n\
    \            ret.add(mindex);\n        } else if (zeroed.size() > 0) {\n     \
    \       ret.add(minzero);\n            ret.add(minind);\n        }\n        return\
    \ ret;"]
stop_tokens:
- "\n    }\n"
