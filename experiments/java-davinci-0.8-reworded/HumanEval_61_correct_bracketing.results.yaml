language: java
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                balance++;\n            } else {\n              \
    \  balance--;\n            }\n            if (balance < 0) {\n               \
    \ return false;\n            }\n        }\n        return balance == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   int counter = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n\
    \            if (brackets.charAt(i) == '(') {\n                counter += 1;\n\
    \            } else {\n                counter -= 1;\n            }\n        \
    \    if (counter < 0) {\n                result = false;\n            }\n    \
    \    }\n        if (counter != 0) {\n            result = false;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new Error(\"Missing implementation.\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.Error: Missing implementation.\n\
    \tat Problem.correctBracketing(tmpsa7vzipd.java:20)\n\tat Problem.main(tmpsa7vzipd.java:23)\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\t\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptgl8txvd.java:21: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                counter++;\n            } else {\n              \
    \  counter--;\n            }\n            if (counter < 0) {\n               \
    \ return false;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return recursive(brackets,0,0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpequj_ib0.java:20: error: cannot find symbol\n        return recursive(brackets,0,0);\n\
    \               ^\n  symbol:   method recursive(String,int,int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') count += 1;\n            else if (c == ')') count -=\
    \ 1;\n            if (count < 0) return false;\n        }\n        return count\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                count += 1;\n            } else\
    \ if (c == ')') {\n                count -= 1;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int len = brackets.length();\n\
    \        int count = 0;\n        for (int i = 0; i < len; i++) {\n           \
    \ if (brackets.charAt(i) == '(') {\n                count += 1;\n            }\
    \ else {\n                count -= 1;\n            }\n            if (count <\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                balance += 1;\n            } else {\n           \
    \     balance -= 1;\n            }\n            if (balance < 0) {\n         \
    \       return false;\n            }\n        }\n        return balance == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpen = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                numOpen += 1;\n            } else {\n           \
    \     numOpen -= 1;\n            }\n            if (numOpen < 0) {\n         \
    \       return false;\n            }\n        }\n        return numOpen == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n = brackets.length();\n \
    \       // we can't have more closing brackets than opening brackets\n       \
    \ if (brackets.replace(\"(\", \"\").length() > n / 2) {\n            return false;\n\
    \        }\n        // we can't have more opening brackets than closing brackets\n\
    \        if (brackets.replace(\")\", \"\").length() > n / 2) {\n            return\
    \ false;\n        }\n        // count the number of opening brackets we have to\
    \ close\n        int toClose = 0;\n        for (int i = 0; i < n; i++) {\n   \
    \         if (brackets.charAt(i) == '(') {\n                toClose += 1;\n  \
    \          } else {\n                toClose -= 1;\n            }\n          \
    \  // if we have to close an opening bracket and there is none to close, return\
    \ false\n            if (toClose < 0) {\n                return false;\n     \
    \       }\n        }\n        // if we didn't close all opening brackets, return\
    \ false\n        if (toClose != 0) {\n            return false;\n        }\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    Not implemented.\");\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented.\n\
    \tat Problem.correctBracketing(tmp17_hjqma.java:20)\n\tat Problem.main(tmp17_hjqma.java:23)\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        brackets = brackets.replace(\"\
    ()\", \"\");\n        if (brackets.length() % 2 == 1) {\n            return false;\n\
    \        }\n        for (int i = 0; i < brackets.length(); i++) {\n          \
    \  if (brackets.charAt(i) == '(') {\n                return false;\n         \
    \   }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0bjywlh3.java:33)\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new UnsupportedOperationException(\"\
    delete this line and complete the problem.\");\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: delete\
    \ this line and complete the problem.\n\tat Problem.correctBracketing(tmp6po0_ejj.java:20)\n\
    \tat Problem.main(tmp6po0_ejj.java:23)\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tint count = 0;\n\tboolean flag = true;\n\
    \tfor (int i = 0; i < brackets.length(); i++) {\n\t    if (brackets.charAt(i)\
    \ == '(') {\n\t\tcount += 1;\n\t    }\n\t    else if (brackets.charAt(i) == ')')\
    \ {\n\t\tcount -= 1;\n\t    }\n\t    if (count < 0) {\n\t\tflag = false;\n\t \
    \   }\n\t}\n\tif (count != 0) {\n\t    flag = false;\n\t}\n\treturn flag;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Your code here.\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcy2x6ara.java:28)\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> s = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                s.push(c);\n            } else if (c == ')') {\n            \
    \    if (s.empty()) {\n                    return false;\n                }\n\
    \                char prev = s.pop();\n                if (prev != '(') {\n  \
    \                  return false;\n                }\n            }\n        }\n\
    \        return s.empty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                open++;\n            } else {\n                open--;\n\
    \            }\n            if (open < 0) {\n                return false;\n \
    \           }\n        }\n        return open == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n = brackets.length();\n \
    \       int count = 0;\n        for (int i = 0; i < n; i++) {\n            char\
    \ c = brackets.charAt(i);\n            if (c == '(') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int openCount = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openCount += 1;\n            } else\
    \ if (c == ')') {\n                openCount -= 1;\n            }\n          \
    \  if (openCount < 0) {\n                return false;\n            }\n      \
    \  }\n        return openCount == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        LinkedList<Character> s = new\
    \ LinkedList<Character>();\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            if (brackets.charAt(i) == '(') {\n                s.push(brackets.charAt(i));\n\
    \            } else if (brackets.charAt(i) == ')') {\n                if (s.size()\
    \ != 0) {\n                    s.pop();\n                } else {\n          \
    \          return false;\n                }\n            }\n        }\n      \
    \  if (s.size() == 0) {\n            return true;\n        } else {\n        \
    \    return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    implement me!\");\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: implement me!\n\
    \tat Problem.correctBracketing(tmpnj2g56gd.java:20)\n\tat Problem.main(tmpnj2g56gd.java:23)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                counter += 1;\n            } else {\n           \
    \     counter -= 1;\n            }\n            if (counter < 0) {\n         \
    \       return false;\n            }\n        }\n        return counter == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int i = 0;\n        int j = 0;\n\
    \        while (i < brackets.length()) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                j += 1;\n            } else {\n                j -=\
    \ 1;\n            }\n            if (j < 0) {\n                return false;\n\
    \            }\n            i += 1;\n        }\n        return (j == 0);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int openingBrackets = 0;\n   \
    \     for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets++;\n           \
    \ } else if (c == ')') {\n                openingBrackets--;\n            }\n\
    \            if (openingBrackets < 0) {\n                return false;\n     \
    \       }\n        }\n        return openingBrackets == 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpening = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '(') {\n                numOpening++;\n          \
    \  } else if (bracket == ')') {\n                numOpening--;\n            }\n\
    \            if (numOpening < 0) {\n                return false;\n          \
    \  }\n        }\n        return numOpening == 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                if (checkleft(brackets,\
    \ i)) {\n                    continue;\n                } else {\n           \
    \         return false;\n                }\n            }\n        }\n       \
    \ return true;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa40edq62.java:22: error: cannot find symbol\n                if\
    \ (checkleft(brackets, i)) {\n                    ^\n  symbol:   method checkleft(String,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.isEmpty() ||\n\
    \            (brackets.charAt(0) == '(' &&\n             brackets.charAt(brackets.length()\
    \ - 1) == ')' &&\n             correctBracketing(brackets.substring(1, brackets.length()\
    \ - 1)));\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnmi18l6f.java:27)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // \n        int counter = 0;\n\
    \        int n = brackets.length();\n        for (int i = 0; i < n; i++) {\n \
    \           if (brackets.charAt(i) == '(') {\n                counter++;\n   \
    \         } else {\n                counter--;\n            }\n            if\
    \ (counter < 0) {\n                return false;\n            }\n        }\n \
    \       return counter == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // implement this function\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4e50qw_.java:28)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // TODO: fill in this method.\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv69gorih.java:24)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                count++;\n            } else if\
    \ (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        //\n        // YOUR CODE HERE\n\
    \        //\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3n48s3q5.java:23: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n      Stack<Character> s = new Stack<Character>();\n\
    \      char curr;\n      int i = 0;\n      while (i < brackets.length()) {\n \
    \       curr = brackets.charAt(i);\n        if (curr == '(') {\n          s.push(curr);\n\
    \        } else if (curr == ')') {\n          if (s.isEmpty()) {\n           \
    \ return false;\n          } else {\n            s.pop();\n          }\n     \
    \   }\n        i++;\n      }\n      return s.isEmpty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcow11ak.java:27)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int check = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                check++;\n            } else {\n                check--;\n\
    \            }\n            if (check < 0) {\n                return false;\n\
    \            }\n        }\n        return (check == 0);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    not yet\");\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: not yet\n\tat\
    \ Problem.correctBracketing(tmpy_eahpnn.java:20)\n\tat Problem.main(tmpy_eahpnn.java:23)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                counter++;\n            } else if\
    \ (c == ')') {\n                counter--;\n            }\n            if (counter\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ counter == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') balance++;\n            else balance--;\n            if (balance < 0)\
    \ return false;\n        }\n        return balance == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    TODO: implement me\");\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: TODO: implement\
    \ me\n\tat Problem.correctBracketing(tmpi7_k2h3p.java:20)\n\tat Problem.main(tmpi7_k2h3p.java:23)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                counter++;\n            } else {\n              \
    \  counter--;\n            }\n            if (counter < 0) {\n               \
    \ return false;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // --- YOUR CODE STARTS HERE\n\
    \        int n = brackets.length();\n        int count = 0;\n        boolean state\
    \ = true;\n        for (int i = 0; i < n; i++) {\n            char x = brackets.charAt(i);\n\
    \            if (x == '(') {\n                count++;\n            } else if\
    \ (x == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                state = false;\n            }\n        }\n        return\
    \ count == 0 && state;\n        // --- YOUR CODE ENDS HERE\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Your code here\n        int\
    \ sum = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n          \
    \  char c = brackets.charAt(i);\n            if (c == '(') {\n               \
    \ sum++;\n            } else {\n                sum--;\n            }\n      \
    \      if (sum < 0) {\n                return false;\n            }\n        }\n\
    \        return sum == 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                counter++;\n            } else {\n              \
    \  counter--;\n            }\n            if (counter < 0) {\n               \
    \ return false;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int i = 0;\n        int j = 0;\n\
    \        while (i < brackets.length()) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                j = i + 1;\n                while (j < brackets.length())\
    \ {\n                    if (brackets.charAt(j) == ')') {\n                  \
    \      brackets = brackets.substring(0, i) +\n                               \
    \    brackets.substring(i + 1, j) +\n                                   brackets.substring(j\
    \ + 1);\n                        i--;\n                        break;\n      \
    \              }\n                    j++;\n                }\n              \
    \  if (j == brackets.length()) {\n                    return false;\n        \
    \        }\n            }\n            i++;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuf17it2g.java:45)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        int close\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '(') {\n                open++;\n            } else {\n\
    \                close++;\n            }\n            if (close > open) {\n  \
    \              return false;\n            }\n        }\n        return open ==\
    \ close;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n      Stack<Character> chars = new Stack<Character>();\n\
    \      for (char c : brackets.toCharArray()) {\n        if (c == '(') {\n    \
    \      chars.push(c);\n        } else if (c == ')') {\n          if (chars.empty())\
    \ {\n            return false;\n          } else {\n            chars.pop();\n\
    \          }\n        }\n      }\n      return chars.empty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> st = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                st.push(c);\n            } else if (c == ')') {\n           \
    \     if (st.isEmpty()) {\n                    return false;\n               \
    \ }\n                char popped = st.pop();\n                if (popped != '(')\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return st.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011150
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    Not implemented.\");\n    }\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Not implemented.\n\
    \tat Problem.correctBracketing(tmp17_hjqma.java:20)\n\tat Problem.main(tmp17_hjqma.java:23)\n"
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> s = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                s.push(c);\n            } else if (c == ')') {\n            \
    \    if (s.isEmpty()) return false;\n                else s.pop();\n         \
    \   }\n        }\n        return s.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.equals(\"\")) {\n\
    \            return true;\n        } else if (brackets.charAt(0) == ')') {\n \
    \           return false;\n        } else {\n            int length = brackets.length();\n\
    \            int i = 0;\n            int count = 0;\n            while (i < length)\
    \ {\n                if (brackets.charAt(i) == '(') {\n                    count\
    \ += 1;\n                } else {\n                    count -= 1;\n         \
    \       }\n                if (count < 0) {\n                    return false;\n\
    \                }\n                i += 1;\n            }\n            return\
    \ count == 0;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // STUDENT: implement this\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcogm5zj8.java:24)\n"
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcow11ak.java:27)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> myStack = new\
    \ Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n     \
    \       if (c == '(') {\n                myStack.push(c);\n            } else\
    \ if (c == ')') {\n                if (myStack.isEmpty()) {\n                \
    \    return false;\n                } else {\n                    myStack.pop();\n\
    \                }\n            }\n        }\n        return myStack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int x = 0; x < brackets.length(); x++) {\n            if (brackets.charAt(x)\
    \ == '(') {\n                balance++;\n            } else {\n              \
    \  balance--;\n            }\n            if (balance < 0) {\n               \
    \ return false;\n            }\n        }\n        return balance == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                stack.pop();\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int openCount = 0;\n        int\
    \ closeCount = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n   \
    \         if (brackets.charAt(i) == '(') {\n                openCount++;\n   \
    \         } else {\n                closeCount++;\n            }\n           \
    \ if (closeCount > openCount) {\n                return false;\n            }\n\
    \        }\n        return openCount == closeCount;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tint depth = 0;\n\tfor (int i = 0; i\
    \ < brackets.length(); i++) {\n\t    char c = brackets.charAt(i);\n\t    if (c\
    \ == '(') depth++;\n\t    else if (c == ')') depth--;\n\t    if (depth < 0) return\
    \ false;\n\t}\n\treturn depth == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                depth += 1;\n            } else {\n                depth\
    \ -= 1;\n            }\n            if (depth < 0) {\n                return false;\n\
    \            }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() % 2 ==\
    \ 0 &&\n            // The below code is equivalent to:\n            // brackets.replace(\"\
    ()\", \"\").length() == 0\n            Stream.iterate(brackets, b -> b.replace(\"\
    ()\", \"\"))\n            .dropWhile(b -> b.contains(\"()\"))\n            .findFirst()\n\
    \            .get()\n            .length() == 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // TODO: fill in your code here.\n\
    \        int open = 0;\n        int close = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++){\n          if (brackets.charAt(i) == '('){\n            open++;\n    \
    \      }\n          else if (brackets.charAt(i) == ')'){\n            close++;\n\
    \          }\n        }\n        if (open != close){\n          return false;\n\
    \        }\n        else{\n          return true;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpakbl5mis.java:44)\n"
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Your code here.\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdgnldx2s.java:24)\n"
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                count++;\n            } else if\
    \ (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.chars().filter(x\
    \ -> x == '(').count() == brackets.chars().filter(x -> x == ')').count();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyu7vw77.java:28)\n"
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack <Character> stack = new\
    \ Stack <Character>();\n        for (char i : brackets.toCharArray()) {\n    \
    \        if (i == '(') stack.push(i);\n            else if (i == ')') {\n    \
    \            if (stack.empty()) return false;\n                stack.pop();\n\
    \            }\n        }\n        return stack.empty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                depth++;\n            } else {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                return false;\n\
    \            }\n        }\n        return depth == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                sb.append(c);\n            } else if (c == ')') {\n         \
    \       if (sb.length() == 0) {\n                    return false;\n         \
    \       }\n                sb.deleteCharAt(sb.length() - 1);\n            }\n\
    \        }\n        return sb.length() == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ {\n            return false;\n        }\n        String open = \"(\";\n    \
    \    String close = \")\";\n        int index = brackets.indexOf(open);\n    \
    \    while (index != -1) {\n            int closeIndex = brackets.indexOf(close,\
    \ index + 1);\n            if (closeIndex == -1) {\n                return false;\n\
    \            }\n            index = brackets.indexOf(open, index + 1);\n     \
    \   }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11n607zo.java:41)\n"
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // remove all the characters except\
    \ \"(\" and \")\"\n        brackets = brackets.replaceAll(\"[^()]\", \"\");\n\
    \        // If a string contains an even number of brackets,\n        // it must\
    \ be equal to a string of two equal halves\n        if (brackets.length() % 2\
    \ == 0) {\n            brackets = brackets.substring(0, brackets.length() / 2);\n\
    \        }\n        // The string must be reduced to the empty string\n      \
    \  while (brackets.length() > 0) {\n            // remove every pair of opening\
    \ and closing brackets\n            brackets = brackets.replaceAll(\"\\\\(\\\\\
    )\", \"\");\n            // if this operation did not change the string,\n   \
    \         // then the string was not correct\n            if (brackets.length()\
    \ == brackets.replaceAll(\"\\\\(\\\\)\", \"\").length()) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvfniurbf.java:40)\n"
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') open++;\n            else if (brackets.charAt(i) == ')') open--;\n    \
    \        if (open < 0) return false;\n        }\n        return open == 0;\n \
    \   }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int p = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(')\
    \ {\n                p++;\n            } else {\n                p--;\n      \
    \      }\n            if (p < 0) {\n                return false;\n          \
    \  }\n        }\n        return p == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Implement this function.\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjyi3q4m9.java:28)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i += 1) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                open += 1;\n            } else {\n              \
    \  open -= 1;\n            }\n            if (open < 0) {\n                return\
    \ false;\n            }\n        }\n        return open == 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        int close\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '(') {\n                open++;\n            } else {\n\
    \                close++;\n            }\n            if (close > open) {\n  \
    \              return false;\n            }\n        }\n        return open ==\
    \ close;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(')\n\
    \                stack.push(c);\n            else {\n                if (stack.isEmpty())\n\
    \                    return false;\n                stack.pop();\n           \
    \ }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int nb_open = 0;\n        int\
    \ nb_close = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n     \
    \       char c = brackets.charAt(i);\n            if (c == '(')\n            \
    \    nb_open++;\n            else if (c == ')')\n                nb_close++;\n\
    \            if (nb_close > nb_open)\n                return false;\n        }\n\
    \        return nb_open == nb_close;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<String> stack = new Stack<String>();\n\
    \        for (int i = 0; i < brackets.length(); i++){\n            String letter\
    \ = Character.toString(brackets.charAt(i));\n            if (letter.equals(\"\
    (\")){\n                stack.push(letter);\n            } else if (letter.equals(\"\
    )\")){\n                if (stack.empty() || !stack.pop().equals(\"(\")){\n  \
    \                  return false;\n                }\n            }\n        }\n\
    \        return stack.empty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Write your code here\n    \
    \    if (brackets.length() % 2 != 0) {\n            return false;\n        }\n\
    \        Stack<Character> stack = new Stack<Character>();\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(')\
    \ {\n                stack.push(brackets.charAt(i));\n            } else {\n \
    \               if (stack.isEmpty()) {\n                    return false;\n  \
    \              }\n                stack.pop();\n            }\n        }\n   \
    \     return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() % 2 ==\
    \ 0 && open(brackets, 0) == brackets.length();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp2mezcyt.java:20: error: cannot find symbol\n        return brackets.length()\
    \ % 2 == 0 && open(brackets, 0) == brackets.length();\n                      \
    \                       ^\n  symbol:   method open(String,int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> parens = new\
    \ Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n\
    \            if (brackets.charAt(i) == '(') {\n                parens.push('(');\n\
    \            } else if (brackets.charAt(i) == ')') {\n                if (parens.empty())\
    \ {\n                    return false;\n                } else {\n           \
    \         parens.pop();\n                }\n            }\n        }\n       \
    \ return parens.empty();\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (char bracket : brackets.toCharArray()) {\n            if (bracket\
    \ == '(') {\n                stack.push(bracket);\n            } else if (bracket\
    \ == ')') {\n                if (stack.empty()) {\n                    return\
    \ false;\n                }\n                stack.pop();\n            }\n   \
    \     }\n        return stack.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new UnsupportedOperationException(\"\
    problem 3\");\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: problem\
    \ 3\n\tat Problem.correctBracketing(tmpnv88j0lc.java:20)\n\tat Problem.main(tmpnv88j0lc.java:23)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcow11ak.java:27)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean match = true;\n      \
    \  for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                match = false;\n            } else if (brackets.charAt(i)\
    \ == ')') {\n                match = true;\n            }\n        }\n       \
    \ return match;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwgk8xoz6.java:35)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n\
    \            return true;\n        }\n        else if (brackets.charAt(0) == '(')\
    \ {\n            if (brackets.indexOf(')') != -1) {\n                return correctBracketing(brackets.substring(1,\
    \ brackets.indexOf(')')) + brackets.substring(brackets.indexOf(')') + 1));\n \
    \           }\n            else {\n                return false;\n           \
    \ }\n        }\n        else {\n            return false;\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Fill this in.\n        int\
    \ sum = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n          \
    \  sum += brackets.charAt(i) == '(' ? 1 : -1;\n            if (sum < 0) return\
    \ false;\n        }\n        return sum == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int bracketsCount = 0;\n     \
    \   for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                bracketsCount++;\n            } else {\n        \
    \        bracketsCount--;\n            }\n            if (bracketsCount < 0) {\n\
    \                return false;\n            }\n        }\n        return bracketsCount\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthcpjnkp.java:23)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthcpjnkp.java:23)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcow11ak.java:27)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new UnsupportedOperationException(\"\
    Please implement this function.\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: Please\
    \ implement this function.\n\tat Problem.correctBracketing(tmp83fgbe9h.java:20)\n\
    \tat Problem.main(tmp83fgbe9h.java:23)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int bracketCounter = 0;\n    \
    \    int numLength = brackets.length();\n        for (int i = 0; i < numLength;\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                bracketCounter++;\n\
    \            } else if (brackets.charAt(i) == ')') {\n                bracketCounter--;\n\
    \            }\n            if (bracketCounter < 0) {\n                return\
    \ false;\n            }\n        }\n        return (bracketCounter == 0);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.isEmpty()) {\n  \
    \          return true;\n        } else {\n            for (int i = 0; i < brackets.length();\
    \ i++) {\n                if (brackets.charAt(i) == '(') {\n                 \
    \   if (brackets.length() > i + 1 && brackets.charAt(i + 1) == ')') {\n      \
    \                  if (correctBracketing(brackets.substring(0, i) + brackets.substring(i\
    \ + 2))) {\n                            return true;\n                       \
    \ }\n                    }\n                }\n            }\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpen = 0;\n        int\
    \ numClose = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n     \
    \       if (brackets.charAt(i) == '(') {\n                numOpen++;\n       \
    \     } else {\n                numClose++;\n            }\n            if (numClose\
    \ > numOpen) {\n                return false;\n            }\n        }\n    \
    \    return numOpen == numClose;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // your code here\n        if\
    \ (brackets.length() % 2 != 0) {\n            return false;\n        }\n     \
    \   boolean isCorrect = true;\n        int leftBrackets = 0;\n        int rightBrackets\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '(') {\n                leftBrackets++;\n           \
    \ } else {\n                rightBrackets++;\n            }\n            if (rightBrackets\
    \ > leftBrackets) {\n                isCorrect = false;\n            }\n     \
    \   }\n        if (leftBrackets != rightBrackets) {\n            isCorrect = false;\n\
    \        }\n        return isCorrect;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // todo: write this function\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptm3ivqcd.java:24)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int stack_depth = 0;\n       \
    \ for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                stack_depth += 1;\n            } else if (brackets.charAt(i)\
    \ == ')') {\n                stack_depth -= 1;\n            }\n            if\
    \ (stack_depth < 0) {\n                return false;\n            }\n        }\n\
    \        return stack_depth == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    correctBracketing is not implemented yet\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: correctBracketing\
    \ is not implemented yet\n\tat Problem.correctBracketing(tmpw6up4rh5.java:20)\n\
    \tat Problem.main(tmpw6up4rh5.java:23)\n"
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int depth = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(')\n                depth++;\n            else if (brackets.charAt(i) == ')')\n\
    \                depth--;\n            if (depth < 0)\n                return\
    \ false;\n        }\n        return depth == 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n = brackets.length();\n \
    \       if (n % 2 == 1) {\n            return false;\n        }\n        int count\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                count += 1;\n            } else {\n             \
    \   count -= 1;\n            }\n            if (count < 0) {\n               \
    \ return false;\n            }\n        }\n        return count == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                for (int\
    \ j = i + 1; j < brackets.length(); j++) {\n                    if (brackets.charAt(j)\
    \ == ')') {\n                        if (brackets.substring(i + 1, j).contains(\"\
    (\")) {\n                            return false;\n                        }\n\
    \                        i = j;\n                        break;\n            \
    \        }\n                }\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp26z_m0i.java:37)\n"
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char ch = brackets.charAt(i);\n\
    \            if (ch == '(') {\n                balance += 1;\n            } else\
    \ if (ch == ')') {\n                balance -= 1;\n            }\n           \
    \ if (balance < 0) {\n                return false;\n            }\n        }\n\
    \        return balance == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpen = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                numOpen++;\n            } else if\
    \ (c == ')') {\n                numOpen--;\n            }\n            if (numOpen\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ numOpen == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int answer = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                answer += 1;\n            } else\
    \ if (c == ')') {\n                answer -= 1;\n            }\n            if\
    \ (answer < 0) {\n                return false;\n            }\n        }\n  \
    \      return answer == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int balance = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i += 1) {\n            char ch = brackets.charAt(i);\n\
    \            if (ch == '(') balance += 1;\n            else balance -= 1;\n  \
    \          if (balance < 0) return false;\n        }\n        return balance ==\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int tracker = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                tracker += 1;\n            } else {\n           \
    \     tracker -= 1;\n            }\n            if (tracker < 0) {\n         \
    \       return false;\n            }\n        }\n        return tracker == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                stack.pop();\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int correct = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                correct += 1;\n            } else {\n           \
    \     correct -= 1;\n            }\n            if (correct < 0) {\n         \
    \       return false;\n            }\n        }\n        return correct == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int counter = 0;\n        for\
    \ (int x = 0; x < brackets.length(); x++) {\n            if (brackets.charAt(x)\
    \ == '(') {\n                counter++;\n            } else {\n              \
    \  counter--;\n            }\n            if (counter < 0) {\n               \
    \ return false;\n            }\n        }\n        return counter == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthcpjnkp.java:23)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.chars().filter(c\
    \ -> c == '(').count() == brackets.chars().filter(c -> c == ')').count();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsupj5ipw.java:28)\n"
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> bracketStack\
    \ = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n\
    \            if (c == '(') {\n                bracketStack.push(c);\n        \
    \    } else if (c == ')') {\n                if (bracketStack.empty()) {\n   \
    \                 return false;\n                } else {\n                  \
    \  bracketStack.pop();\n                }\n            }\n        }\n        return\
    \ bracketStack.empty();\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<String> bracketStack = new\
    \ Stack<String>();\n        for (int i = 0; i < brackets.length(); i++){\n   \
    \         String current = brackets.substring(i, i+1);\n            if (current.equals(\"\
    (\")) {\n                bracketStack.push(current);\n            } else if (current.equals(\"\
    )\")) {\n                if (bracketStack.empty()) {\n                    return\
    \ false;\n                } else {\n                    bracketStack.pop();\n\
    \                }\n            }\n        }\n        return bracketStack.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.chars().boxed().mapToInt(i\
    \ -> i).sum() == 0;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgi1utyar.java:23)\n"
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpen = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                numOpen++;\n            } else {\n              \
    \  numOpen--;\n            }\n            if (numOpen < 0) {\n               \
    \ return false;\n            }\n        }\n        return numOpen == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() == 0) return\
    \ true;\n        if (brackets.length() == 1) return false;\n        int n = brackets.length();\n\
    \        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (brackets.charAt(i) == '(') {\n                count++;\n            } else\
    \ {\n                count--;\n            }\n            if (count < 0) return\
    \ false;\n        }\n        return count == 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ return false;\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') count++;\n            else\
    \ count--;\n            if (count < 0) return false;\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // We use a stack to remember\
    \ the opening brackets,\n        // and then see if they match the closing brackets.\n\
    \        // A stack is a data structure where you can only get\n        // the\
    \ top element, and push an element onto the top\n        // of the stack.\n  \
    \      // There is also a pop method which removes the top\n        // element.\n\
    \        Stack<Character> stack = new Stack<Character>();\n        // brackets.charAt(i)\
    \ gives you the ith character of\n        // the string.\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            char b = brackets.charAt(i);\n\
    \            if (b == '(') {\n                // push the opening bracket onto\
    \ the stack.\n                stack.push(b);\n            } else if (b == ')')\
    \ {\n                // If there are no opening brackets, then this\n        \
    \        // closing bracket doesn't match any opening\n                // bracket.\n\
    \                if (stack.isEmpty()) {\n                    return false;\n \
    \               }\n                // pop the last opening bracket off the stack.\n\
    \                stack.pop();\n            }\n        }\n        // If there are\
    \ any unmatched opening brackets, then\n        // the string has incorrect bracketing.\n\
    \        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tint open = 0;\n\tfor (int i = 0; i <\
    \ brackets.length(); i++) {\n\t    char c = brackets.charAt(i);\n\t    if (c ==\
    \ '(') open++;\n\t    else open--;\n\t    if (open < 0) return false;\n\t}\n\t\
    return open == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthcpjnkp.java:23)\n"
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n=0;\n        for(int i=0;i<brackets.length();i++){\n\
    \            if(brackets.charAt(i)=='(') n++;\n            else n--;\n       \
    \     if(n<0) return false;\n        }\n        return n==0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int numOpen = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                numOpen++;\n            } else {\n              \
    \  numOpen--;\n            }\n            if (numOpen < 0) {\n               \
    \ return false;\n            }\n        }\n        return numOpen == 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (char bracket : brackets.toCharArray()) {\n            if (bracket\
    \ == '(') {\n                stack.push(bracket);\n            } else if (bracket\
    \ == ')') {\n                if (stack.empty()) {\n                    return\
    \ false;\n                }\n                stack.pop();\n            }\n   \
    \     }\n        return stack.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011152
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // set up a stack to keep track\
    \ of the position of open brackets\n        Stack<Integer> openBrackets = new\
    \ Stack<Integer>();\n        // loop through the brackets and check whether each\
    \ bracket is an opening or closing bracket\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                // if\
    \ it's an opening bracket, add it to the stack\n                openBrackets.push(i);\n\
    \            } else {\n                // if it's a closing bracket, check whether\
    \ there are any opening brackets on the stack\n                if (openBrackets.empty())\
    \ {\n                    // if there aren't, this is a bad bracketing\n      \
    \              return false;\n                } else {\n                    //\
    \ if there are, pop an opening bracket off the stack\n                    openBrackets.pop();\n\
    \                }\n            }\n        }\n        // return true if there\
    \ are no opening brackets left\n        return openBrackets.empty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // TODO: implement this method\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3k_gu6ff.java:24)\n"
  stdout: ''
  timestamp: 1660011153
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        ArrayList<String> arr = new ArrayList<String>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            arr.add(brackets.substring(i,\
    \ i + 1));\n        }\n        while (arr.contains(\"()\")) {\n            arr.remove(\"\
    ()\");\n        }\n        return arr.size() == 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7kf2hyp.java:30)\n"
  stdout: ''
  timestamp: 1660011154
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int left = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') left++;\n            else if (brackets.charAt(i) == ')') left--;\n    \
    \        if (left < 0) return false;\n        }\n        return left == 0;\n \
    \   }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011154
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int c = 0;\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(')\
    \ {\n                c++;\n            } else {\n                c--;\n      \
    \      }\n            if (c < 0) return false;\n        }\n        return c ==\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011154
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcow11ak.java:27)\n"
  stdout: ''
  timestamp: 1660011149
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<String> stack = new Stack<String>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            String current\
    \ = String.valueOf(brackets.charAt(i));\n            if (current.equals(\"(\"\
    )) {\n                stack.push(current);\n            } else {\n           \
    \     if (stack.empty()) {\n                    return false;\n              \
    \  } else {\n                    stack.pop();\n                }\n           \
    \ }\n        }\n        return stack.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011154
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int open = 0;\n        int close\
    \ = 0;\n        boolean ans = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '(') {\n                open++;\n\
    \            } else {\n                close++;\n            }\n            if\
    \ (close > open) {\n                ans = false;\n            }\n        }\n \
    \       if (open != close) {\n            ans = false;\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011154
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return new ProblemSolver().correctBracketing(brackets);\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrxdxl4j.java:20: error: cannot find symbol\n        return new\
    \ ProblemSolver().correctBracketing(brackets);\n                   ^\n  symbol:\
    \   class ProblemSolver\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011154
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    TODO\");\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: TODO\n\tat Problem.correctBracketing(tmpnxfcbm9r.java:20)\n\
    \tat Problem.main(tmpnxfcbm9r.java:23)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                stack.pop();\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int paranthesisCount = 0;\n  \
    \      for (int i = 0; i < brackets.length(); i++) {\n            char ch = brackets.charAt(i);\n\
    \            if (ch == '(') {\n                paranthesisCount += 1;\n      \
    \      } else if (ch == ')') {\n                paranthesisCount -= 1;\n     \
    \       }\n            if (paranthesisCount < 0) {\n                return false;\n\
    \            }\n        }\n        return paranthesisCount == 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011154
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // Increment count by 1 for each\
    \ open bracket, decrement by 1 for each close bracket. If count is ever negative,\
    \ or is nonzero at the end, something is wrong.\n        int count = 0;\n    \
    \    for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                count++;\n            } else if (brackets.charAt(i)\
    \ == ')') {\n                count--;\n            }\n            if (count <\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011154
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ {\n            return false;\n        }\n        int count = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() % 2 ==\
    \ 0 &&\n            // write your answer here\n                !brackets.contains(\"\
    )\") ||\n                brackets.contains(\"(\") ;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeke95pzf.java:30)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count=0;\n        for(int\
    \ i=0;i<brackets.length();i++){\n            if(brackets.charAt(i)=='('){\n  \
    \              count++;\n            }\n            else if(brackets.charAt(i)==')'){\n\
    \                count--;\n            }\n            if(count<0){\n         \
    \       return false;\n            }\n        }\n        if(count==0){\n     \
    \       return true;\n        }\n        else{\n            return false;\n  \
    \      }\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // create a stack to put the brackets\
    \ in\n        Stack<Character> s = new Stack<Character>();\n        // loop through\
    \ the brackets\n        for (int i = 0; i < brackets.length(); i++) {\n      \
    \      char c = brackets.charAt(i);\n            // put the opening brackets into\
    \ the stack\n            if (c == '(') {\n                s.push(c);\n       \
    \     }\n            // if we see a closing bracket and the stack is empty or\
    \ if the top of the stack is not an opening bracket,\n            // then return\
    \ false\n            else if (c == ')' && (s.empty() || s.peek() != '(')) {\n\
    \                return false;\n            }\n            // if we see a closing\
    \ bracket and the top of the stack is an opening bracket, pop the opening bracket\n\
    \            else if (c == ')' && s.peek() == '(') {\n                s.pop();\n\
    \            }\n        }\n        // if we're left with an empty stack, then\
    \ return true\n        return s.empty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int sum = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                sum += 1;\n            } else if\
    \ (c == ')') {\n                sum -= 1;\n            }\n            if (sum\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ sum == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int opens = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                opens++;\n            } else {\n                opens--;\n\
    \            }\n            if (opens < 0) {\n                return false;\n\
    \            }\n        }\n        return opens == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // >>>>> YOUR CODE GOES HERE!\
    \ <<<<<\n        // Assume that brackets is a string of \"(\" and \")\".\n   \
    \     if (brackets.length() == 0) {\n            return true;\n        } else\
    \ if (brackets.length() == 1) {\n            return false;\n        } else {\n\
    \            String str = \"\";\n            int total = 0;\n            for (int\
    \ i = 0; i < brackets.length(); i++) {\n                String bracket = brackets.substring(i,\
    \ i + 1);\n                str += bracket;\n                if (bracket.equals(\"\
    (\")) {\n                    total++;\n                } else {\n            \
    \        total--;\n                }\n                if (total < 0) {\n     \
    \               return false;\n                }\n            }\n            if\
    \ (total == 0) {\n                return true;\n            } else {\n       \
    \         return false;\n            }\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0)\
    \ {\n            return false;\n        }\n        else {\n            int open\
    \ = 0;\n            int closed = 0;\n            for (int i = 0; i < brackets.length();\
    \ i++) {\n                if (brackets.charAt(i) == '(') {\n                 \
    \   open++;\n                }\n                else {\n                    closed++;\n\
    \                }\n                if (closed > open) {\n                   \
    \ return false;\n                }\n            }\n            if (open == closed)\
    \ {\n                return true;\n            }\n            else {\n       \
    \         return false;\n            }\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if(brackets.length() % 2 != 0)\
    \ return false;\n        ArrayList<Character> list = new ArrayList<Character>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char curr =\
    \ brackets.charAt(i);\n            if(curr == '(') {\n                list.add(curr);\n\
    \            } else {\n                if(list.size() == 0) return false;\n  \
    \              list.remove(list.size() - 1);\n            }\n        }\n     \
    \   return list.size() == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> s = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                s.push(c);\n            } else if (c == ')') {\n            \
    \    if (s.empty()) {\n                    return false;\n                }\n\
    \                s.pop();\n            }\n        }\n        return s.empty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int l = brackets.length();\n \
    \       int total = 0;\n        for (int i = 0; i < l; i++) {\n            char\
    \ letter = brackets.charAt(i);\n            if (letter == '(') {\n           \
    \     total++;\n            } else {\n                total--;\n            }\n\
    \            if (total < 0) {\n                return false;\n            }\n\
    \        }\n        return total == 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int n = brackets.length();\n \
    \       char c;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            c = brackets.charAt(i);\n            if (c == '(') {\n          \
    \      count++;\n            } else if (c == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean retVal = true;\n     \
    \   int counter = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n\
    \            if (brackets.charAt(i) == '(') {\n                counter++;\n  \
    \          } else if (brackets.charAt(i) == ')') {\n                counter--;\n\
    \            }\n            if (counter < 0) {\n                retVal = false;\n\
    \                break;\n            }\n        }\n        if (counter != 0) {\n\
    \            retVal = false;\n        }\n        return retVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                stack.pop();\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new Error(\"not implemented\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.Error: not implemented\n\tat Problem.correctBracketing(tmpj4kxzrmm.java:20)\n\
    \tat Problem.main(tmpj4kxzrmm.java:23)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // write your code here\n    \
    \    return false;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwhbrfs9x.java:24)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1kncp5lq.java:23)\n"
  stdout: ''
  timestamp: 1660011150
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int result = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            String bracket = brackets.substring(i,\
    \ i + 1);\n            if (bracket.equals(\"(\")) {\n                result++;\n\
    \            } else {\n                result--;\n            }\n            if\
    \ (result < 0) {\n                return false;\n            }\n        }\n  \
    \      return result == 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if(brackets.length() % 2 != 0)\
    \ return false;\n        Stack<Character> matchingStack = new Stack<Character>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') matchingStack.push(c);\n            else if(c == ')')\
    \ {\n                if(matchingStack.isEmpty()) return false;\n             \
    \   else if(matchingStack.peek() == '(') matchingStack.pop();\n              \
    \  else return false;\n            }\n        }\n        return matchingStack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count++;\n            } else {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011148
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int openCount = 0;\n        for\
    \ (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '(') {\n                openCount++;\n            } else {\n            \
    \    openCount--;\n            }\n            if (openCount < 0) {\n         \
    \       return false;\n            }\n        }\n        return openCount == 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n\tStack<String> stack = new Stack<String>();\n\
    \tfor (int i = 0; i < brackets.length(); i++) {\n\t    if (brackets.charAt(i)\
    \ == '(') {\n\t\tstack.push(\"(\");\n\t    } else {\n\t\tif (stack.empty()) {\n\
    \t\t    return false;\n\t\t} else {\n\t\t    stack.pop();\n\t\t}\n\t    }\n\t\
    }\n\treturn stack.empty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // just count the parentheses\
    \ and make sure the final count is 0.\n        // this is because for each left\
    \ bracket, there is a +1, and for each right bracket, there is a -1.\n       \
    \ // so if there are matching left and right parentheses, the count will be 0\
    \ at the end.\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char currentChar = brackets.charAt(i);\n            if (currentChar\
    \ == '(') {\n                count++;\n            } else if (currentChar == ')')\
    \ {\n                count--;\n            }\n        }\n        return count\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8uk5yxa.java:40)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        if(brackets.length() == 0) {\n\
    \            return true;\n        } else if(brackets.length() % 2 != 0) {\n \
    \           return false;\n        } else {\n            int open = 0;\n     \
    \       int close = 0;\n            for(int i = 0; i < brackets.length(); i++)\
    \ {\n                if(brackets.charAt(i) == '(') {\n                    open++;\n\
    \                } else if(brackets.charAt(i) == ')') {\n                    close++;\n\
    \                }\n                if(close > open) {\n                    return\
    \ false;\n                }\n            }\n            return open == close;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // TODO: Implement your solution\
    \ here.\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4ukovl9.java:24)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        throw new RuntimeException(\"\
    NOT IMPLEMENTED\");\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: NOT IMPLEMENTED\n\
    \tat Problem.correctBracketing(tmp0kzk0rx3.java:20)\n\tat Problem.main(tmp0kzk0rx3.java:23)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.length() == 2\
    \ * numberOfBracketGroups(brackets);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp17ift6kf.java:20: error: cannot find symbol\n        return brackets.length()\
    \ == 2 * numberOfBracketGroups(brackets);\n                                  \
    \      ^\n  symbol:   method numberOfBracketGroups(String)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        // error(\"complete this\");\n\
    \        int length = brackets.length();\n        int i = 0;\n        int count\
    \ = 0;\n        while (i < length) {\n            if (brackets.charAt(i) == '(')\
    \ {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n            i += 1;\n        }\n        return (count == 0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        return brackets.chars().filter(c\
    \ -> c == '(').count() == brackets.chars().filter(c -> c == ')').count();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsupj5ipw.java:28)\n"
  stdout: ''
  timestamp: 1660011153
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        int count = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '(') {\n                count += 1;\n            } else {\n                count\
    \ -= 1;\n            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011151
