name: HumanEval_118_get_closest_vowel
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    public static String\
  \ getClosestVowel(String word) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
completions: ["        String vowels = \"aeiou\";\n        String bestVowel = \"\"\
    ;\n        int bestDist = 0;\n        for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c)\
    \ != -1) {\n                int dist = word.length() - i;\n                if\
    \ (bestDist == 0 || dist < bestDist) {\n                    bestDist = dist;\n\
    \                    bestVowel = c + \"\";\n                }\n            }\n\
    \        }\n        return bestVowel;", "        // Write your code here\n   \
    \     return \"\";", "        String[] vowels = new String[]{\"a\", \"e\", \"\
    i\", \"o\", \"u\"};\n        String result = \"\";\n        if (word.length()\
    \ == 0) {\n            return result;\n        } else if (word.length() == 1)\
    \ {\n            if (Arrays.asList(vowels).contains(word)) {\n               \
    \ return word;\n            } else {\n                return result;\n       \
    \     }\n        } else {\n            for (int i = word.length() - 1; i > 0;\
    \ i--) {\n                if (Arrays.asList(vowels).contains(word.substring(i,\
    \ i + 1))\n                        && !Arrays.asList(vowels).contains(word.substring(i\
    \ - 1, i))) {\n                    result = word.substring(i, i + 1);\n      \
    \              return result;\n                }\n            }\n            return\
    \ result;\n        }", "        StringBuilder stringBuilder = new StringBuilder();\n\
    \        int indexFound = -1;\n        char[] charArray = word.toCharArray();\n\
    \        int i = charArray.length - 1;\n        while (i >= 0) {\n           \
    \ if (isVowel(charArray[i])) {\n                if (i == charArray.length - 1\
    \ || isVowel(charArray[i + 1])) {\n                    // skip vowels at the end\
    \ of the word\n                    // and skip vowels that are followed by vowels\n\
    \                    i--;\n                    continue;\n                }\n\
    \                if (i == 0 || isVowel(charArray[i - 1])) {\n                \
    \    // skip vowels at the beginning of the word\n                    // and skip\
    \ vowels that are preceded by vowels\n                    i--;\n             \
    \       continue;\n                }\n                indexFound = i;\n      \
    \          break;\n            }\n            i--;\n        }\n        if (indexFound\
    \ == -1) {\n            return \"\";\n        }\n        stringBuilder.append(charArray[indexFound]);\n\
    \        return stringBuilder.toString();", "        //implement your solution\
    \ here\n        word = word.toLowerCase();\n        int len = word.length();\n\
    \        int bestI = 0;\n        int bestDistance = Integer.MAX_VALUE;\n     \
    \   int lastConsonant = -1;\n        for (int i = 0; i < len; i++) {\n       \
    \     char c = word.charAt(i);\n            if (isVowel(c)) {\n              \
    \  int d = Math.abs(i - lastConsonant);\n                if (d < bestDistance)\
    \ {\n                    bestDistance = d;\n                    bestI = i;\n \
    \               }\n            } else {\n                lastConsonant = i;\n\
    \            }\n        }\n        if (bestDistance == Integer.MAX_VALUE) {\n\
    \            return \"\";\n        }\n        return word.substring(bestI, bestI\
    \ + 1);", "        if (word.length() <= 1) {\n            return \"\";\n     \
    \   }\n        for (int i = word.length() - 1; i >= 0; i--) {\n            char\
    \ c = word.charAt(i);\n            if (!isVowel(c)) {\n                for (int\
    \ j = i - 1; j >= 0; j--) {\n                    char d = word.charAt(j);\n  \
    \                  if (isVowel(d)) {\n                        return \"\" + d;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"\";", "        // TODO: Implement this method\n        return \"\";", "  \
    \      word = word.toLowerCase();\n        for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n            char c = word.charAt(i);\n            if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                boolean isVowel\
    \ = true;\n                if (i > 0) {\n                    char left = word.charAt(i\
    \ - 1);\n                    if (left == 'a' || left == 'e' || left == 'i' ||\
    \ left == 'o' || left == 'u') {\n                        isVowel = false;\n  \
    \                  }\n                }\n                if (i < word.length()\
    \ - 1) {\n                    char right = word.charAt(i + 1);\n             \
    \       if (right == 'a' || right == 'e' || right == 'i' || right == 'o' || right\
    \ == 'u') {\n                        isVowel = false;\n                    }\n\
    \                }\n                if (isVowel) {\n                    return\
    \ Character.toString(c);\n                }\n            }\n        }\n      \
    \  return \"\";", "        if (word.length() == 0) {\n            return \"\"\
    ;\n        }\n        char lastVowel = ' ';\n        int index = -1;\n       \
    \ for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
    \            boolean isVowel = c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u';\n            if (isVowel) {\n                lastVowel = c;\n    \
    \            index = i;\n            } else {\n                if (index != -1)\
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        return (index != -1) ? String.valueOf(lastVowel) : \"\";", "        char[]\
    \ chars = word.toCharArray();\n        // If the word is empty\n        if (chars.length\
    \ == 0) {\n            return \"\";\n        }\n        // if the word only contains\
    \ one character\n        if (chars.length == 1) {\n            return \"\";\n\
    \        }\n        // The list that contains the vowel that stands between two\
    \ consonants from the right side\n        List<String> closestVowelList = new\
    \ ArrayList<String>();\n        // the variable that is used to know the last\
    \ character is a vowel or not\n        boolean currentCharIsVowel = false;\n \
    \       // the variable that is used to know the previous character is a vowel\
    \ or not\n        boolean previousCharIsVowel = false;\n        // Iterate each\
    \ character of the word in reverse\n        for (int i = chars.length - 1; i >=\
    \ 0; i--) {\n            // get the character\n            char currentChar =\
    \ chars[i];\n            // The current character is a vowel\n            if (isVowel(currentChar))\
    \ {\n                // If the current character is a vowel, the previous one\
    \ is not a vowel\n                if (!previousCharIsVowel) {\n              \
    \      // Add the current character to the vowel list\n                    closestVowelList.add(String.valueOf(currentChar));\n\
    \                }\n                // In this case, the last character is a vowel,\
    \ the previous one is also a vowel\n                else {\n                 \
    \   break;\n                }\n                // Update the boolean value that\
    \ indicate the previous character is a vowel\n                previousCharIsVowel\
    \ = true;\n            }\n            // The current character is not a vowel\n\
    \            else {\n                // If the current character is not a vowel,\
    \ the previous one is a vowel\n                if (previousCharIsVowel) {\n  \
    \                  // Add the current character to the vowel list\n          \
    \          closestVowelList.add(String.valueOf(currentChar));\n              \
    \  }\n                // In this case, the last character is not a vowel, the\
    \ previous one is also not a vowel\n                else {\n                 \
    \   // Update the boolean value that indicate the previous character is a vowel\n\
    \                    previousCharIsVowel = false;\n                }\n       \
    \     }\n        }\n        // If the vowel list is empty,", '        return null;',
  "        String vowels = \"aeiou\";\n        int len = word.length();\n        int\
    \ start = len - 1;\n        for (int i = len - 1; i >= 0; i--) {\n           \
    \ char c = word.charAt(i);\n            if (isVowel(c, vowels)) {\n          \
    \      start = i;\n                break;\n            }\n        }\n        int\
    \ min_dist = -1;\n        String res = \"\";\n        for (int i = start; i >=\
    \ 0; i--) {\n            char c = word.charAt(i);\n            if (isVowel(c,\
    \ vowels)) {\n                int dist = len - i - 1;\n                if (min_dist\
    \ == -1 || dist < min_dist) {\n                    min_dist = dist;\n        \
    \            res = Character.toString(c);\n                }\n            }\n\
    \        }\n        return res;", "        int n = word.length();\n        int\
    \ last = -1;\n        // loop over characters of word in reverse order\n     \
    \   for (int i = n - 1; i >= 0; i--) {\n            // if vowel, set last\n  \
    \          if (isVowel(word.charAt(i))) {\n                last = i;\n       \
    \     }\n            // if consonant, check if previous letter was vowel\n   \
    \         else if (last != -1) {\n                return Character.toString(word.charAt(last));\n\
    \            }\n        }\n        return \"\";", "        // TODO : your implementation\
    \ here\n        return \"\";", "        ArrayList<String> vowels = new ArrayList<>(Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\"));\n        ArrayList<String> wordList = new ArrayList<>(Arrays.asList(word.split(\"\
    \")));\n        for (int i = wordList.size() - 1; i > 0; i--) {\n            if\
    \ (vowels.contains(wordList.get(i)) && !vowels.contains(wordList.get(i - 1)))\
    \ {\n                return wordList.get(i);\n            }\n        }\n     \
    \   return \"\";", '        return "";', "        String vowels = \"aeiou\";\n\
    \        String result = \"\";\n        int distance = 0;\n        for (int i\
    \ = word.length() - 1; i >= 0; i--) {\n            String c = word.substring(i,\
    \ i + 1);\n            if (vowels.contains(c)) {\n                if (result.isEmpty())\
    \ {\n                    result = c;\n                    distance = 1;\n    \
    \            } else {\n                    int newDistance = word.length() - i;\n\
    \                    if (newDistance < distance) {\n                        result\
    \ = c;\n                        distance = newDistance;\n                    }\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   String vowels = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n\
    \        String[] parts = word.split(\"\");\n        for (int i = 0; i < parts.length;\
    \ i++) {\n            String curr = parts[i];\n            if (vowels.contains(curr))\
    \ {\n                if (i > 0 && i < parts.length - 1) {\n                  \
    \  String left = parts[i - 1];\n                    String right = parts[i + 1];\n\
    \                    if (!vowels.contains(left) && !vowels.contains(right)) {\n\
    \                        result.append(curr);\n                    }\n       \
    \         }\n            }\n        }\n        return result.toString();", " \
    \       final String vowels = \"aeiou\";\n        final String consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n        List<Integer> idx = new ArrayList<>();\n   \
    \     word = word.toLowerCase();\n        for (int i = 0; i < word.length(); i++)\
    \ {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n               \
    \ idx.add(i);\n            }\n        }\n        for (int i = idx.size() - 1;\
    \ i >= 0; i--) {\n            int j = idx.get(i);\n            if (j == 0 || j\
    \ == word.length() - 1) continue;\n            char left = word.charAt(j - 1);\n\
    \            char right = word.charAt(j + 1);\n            if (consonants.indexOf(left)\
    \ != -1 && consonants.indexOf(right) != -1) {\n                return String.valueOf(word.charAt(j));\n\
    \            }\n        }\n        return \"\";", '        return "";', "    \
    \    String vowels = \"AEIOUaeiou\";\n        String vowelsWord = \"\";\n    \
    \    String consonantsWord = \"\";\n        String answer = \"\";\n        int\
    \ index = 0;\n        boolean found = false;\n        for (int i = 0; i < word.length();\
    \ i++) {\n            if (vowels.contains(word.substring(i, i + 1))) {\n     \
    \           vowelsWord += word.substring(i, i + 1);\n            } else {\n  \
    \              consonantsWord += word.substring(i, i + 1);\n            }\n  \
    \      }\n        if (vowelsWord.length() == 0 || consonantsWord.length() < 2)\
    \ {\n            return \"\";\n        }\n        for (int i = 0; i < consonantsWord.length()\
    \ - 1; i++) {\n            if (vowels.contains(consonantsWord.substring(i, i +\
    \ 1))) {\n                answer = consonantsWord.substring(i, i + 1);\n     \
    \           found = true;\n                break;\n            }\n        }\n\
    \        if (!found) {\n            return \"\";\n        }\n        int distance\
    \ = 0;\n        for (int i = 0; i < vowelsWord.length(); i++) {\n            if\
    \ (answer.contains(vowelsWord.substring(i, i + 1))) {\n                distance\
    \ = Math.abs(word.length() - index - 1);\n                break;\n           \
    \ }\n            index++;\n        }\n        for (int i = 0; i < vowelsWord.length();\
    \ i++) {\n            if (Math.abs(word.length() - index - 1) < distance) {\n\
    \                answer = vowelsWord.substring(i, i + 1);\n                distance\
    \ = Math.abs(word.length() - index - 1);\n            }\n            index++;\n\
    \        }\n        return answer;", "        Set<Character> vowels = new HashSet<>(Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u'));\n        List<Character> consonants = new ArrayList<>();\n\
    \        List<Character> vowels2 = new ArrayList<>();\n        boolean firstConsonant\
    \ = true;\n        for (int i = word.length() - 1; i >= 0; i--) {\n          \
    \  if (firstConsonant && !vowels.contains(word.charAt(i))) {\n               \
    \ firstConsonant = false;\n                consonants.add(word.charAt(i));\n \
    \           } else if (!firstConsonant && vowels.contains(word.charAt(i))) {\n\
    \                vowels2.add(word.charAt(i));\n            }\n        }\n    \
    \    if (consonants.size() > 0 && vowels2.size() > 0) {\n            return String.valueOf(vowels2.get(vowels2.size()\
    \ - 1));\n        }\n        return \"\";", "        String vowels = \"AEIOUaeiou\"\
    ;\n        int index = word.length() - 1;\n        while (index >= 0) {\n    \
    \        if (vowels.indexOf(word.charAt(index)) >= 0) {\n                if (index\
    \ > 0 && vowels.indexOf(word.charAt(index - 1)) < 0) {\n                    return\
    \ word.substring(index, index + 1);\n                }\n            }\n      \
    \      index--;\n        }\n        return \"\";", "        // #1\n        //\
    \ String vowels = \"aeiouAEIOU\";\n        // String result = \"\";\n        //\
    \ for (int i = word.length() - 1; i >= 0; i--) {\n        //     String current_letter\
    \ = String.valueOf(word.charAt(i));\n        //     if (vowels.contains(current_letter))\
    \ {\n        //         result = current_letter;\n        //         if (i + 1\
    \ < word.length() && !vowels.contains(String.valueOf(word.charAt(i + 1)))) {\n\
    \        //             break;\n        //         }\n        //     }\n     \
    \   // }\n        // return result;\n        // #2\n        // String vowels =\
    \ \"aeiouAEIOU\";\n        // int index = -1;\n        // for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n        //     String current_letter = String.valueOf(word.charAt(i));\n\
    \        //     if (vowels.contains(current_letter)) {\n        //         index\
    \ = i;\n        //         if (i + 1 < word.length() && !vowels.contains(String.valueOf(word.charAt(i\
    \ + 1)))) {\n        //             break;\n        //         }\n        // \
    \    }\n        // }\n        // return index > -1 ? String.valueOf(word.charAt(index))\
    \ : \"\";\n        // #3\n        // String vowels = \"aeiouAEIOU\";\n       \
    \ // int index = -1;\n        // for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        //     String current_letter = String.valueOf(word.charAt(i));\n\
    \        //     if (vowels.contains(current_letter)) {\n        //         index\
    \ = i;\n        //         if (i + 1 < word.length() && !vowels.contains(String.valueOf(word.charAt(i\
    \ + 1)))) {\n        //             break;\n        //         }\n        // \
    \    }\n        // }\n        // return index > -1 ? word", '        throw new
    UnsupportedOperationException("Not supported yet.");', '        return null;',
  "        String vowels = \"AEIOUaeiou\";\n        String wordRev = new StringBuilder(word).reverse().toString();\n\
    \        String vowelsAfter = \"\";\n        String vowelsBefore = \"\";\n   \
    \     String closestVowel = \"\";\n        int i = 0;\n        while (i < wordRev.length())\
    \ {\n            if (vowels.contains(String.valueOf(wordRev.charAt(i)))) {\n \
    \               vowelsAfter += wordRev.charAt(i);\n            } else {\n    \
    \            if (vowelsAfter.length() > 0) {\n                    break;\n   \
    \             }\n            }\n            i++;\n        }\n        if (vowelsAfter.length()\
    \ > 0) {\n            for (i = 0; i < wordRev.length(); i++) {\n             \
    \   if (vowels.contains(String.valueOf(wordRev.charAt(i)))) {\n              \
    \      vowelsBefore += wordRev.charAt(i);\n                } else {\n        \
    \            if (vowelsBefore.length() > 0) {\n                        break;\n\
    \                    }\n                }\n            }\n            if (vowelsBefore.length()\
    \ > 0) {\n                if (vowelsAfter.length() > vowelsBefore.length()) {\n\
    \                    closestVowel = vowelsBefore;\n                } else {\n\
    \                    closestVowel = vowelsAfter;\n                }\n        \
    \    } else {\n                closestVowel = vowelsAfter;\n            }\n  \
    \      }\n        if (closestVowel.length() > 0) {\n            closestVowel =\
    \ new StringBuilder(closestVowel).reverse().toString();\n        }\n        return\
    \ closestVowel;", "        String vowels = \"aeiou\";\n        String result =\
    \ \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if\
    \ (vowels.contains(word.substring(i, i + 1))) {\n                result = word.substring(i,\
    \ i + 1);\n                break;\n            }\n        }\n        return result;",
  "        String u = \"U\", i = \"I\", o = \"O\", e = \"E\", a = \"A\";\n       \
    \ int foundU = -1, foundI = -1, foundO = -1, foundE = -1, foundA = -1;\n     \
    \   boolean previousWasVowel = false;\n        for (int index = word.length()\
    \ - 1; index >= 0; index--) {\n            if (previousWasVowel) {\n         \
    \       String character = word.substring(index, index + 1);\n               \
    \ if (!isVowel(character)) {\n                    if (foundU != -1) return u;\n\
    \                    if (foundI != -1) return i;\n                    if (foundO\
    \ != -1) return o;\n                    if (foundE != -1) return e;\n        \
    \            if (foundA != -1) return a;\n                    return \"\";\n \
    \               }\n            } else {\n                if (isVowel(word.substring(index,\
    \ index + 1))) {\n                    previousWasVowel = true;\n             \
    \   }\n            }\n            switch (word.substring(index, index + 1)) {\n\
    \                case \"U\": foundU = index; break;\n                case \"I\"\
    : foundI = index; break;\n                case \"O\": foundO = index; break;\n\
    \                case \"E\": foundE = index; break;\n                case \"A\"\
    : foundA = index; break;\n            }\n        }\n        return \"\";", " \
    \       String vowels = \"aeiou\";\n        String result = \"\";\n        for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n            String charAtI = word.substring(i,\
    \ i + 1);\n            if (vowels.contains(charAtI)) {\n                // if\
    \ prev and next are cons, we have a winner\n                if (i > 0 && i < word.length()\
    \ - 1 && !vowels.contains(word.substring(i - 1, i)) && !vowels.contains(word.substring(i\
    \ + 1, i + 2))) {\n                    result = charAtI;\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        // YOUR CODE HERE\n        return \"\";", "        if (word.length() <\
    \ 2) return \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n  \
    \          if (isVowel(word.charAt(i))) {\n                if (i == word.length()\
    \ - 1) {\n                    return \"\";\n                } else if (isConsonant(word.charAt(i\
    \ + 1))) {\n                    return \"\" + word.charAt(i);\n              \
    \  }\n            }\n        }\n        return \"\";", '        return "";', " \
    \       // WRITE YOUR CODE HERE\n        if (word.length() < 2) return \"\";\n\
    \        else {\n            char[] chars = word.toCharArray();\n            char[]\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n            int length = chars.length;\n\
    \            int i = length - 1;\n            while (i > 0) {\n              \
    \  if (i == length - 1) {\n                    i--;\n                    continue;\n\
    \                }\n                if (Arrays.binarySearch(vowels, chars[i])\
    \ >= 0) {\n                    // vowel\n                    if (Arrays.binarySearch(vowels,\
    \ chars[i + 1]) < 0) {\n                        // cons next\n               \
    \         if (Arrays.binarySearch(vowels, chars[i - 1]) < 0) {\n             \
    \               // cons prev\n                            return Character.toString(chars[i]);\n\
    \                        }\n                    }\n                }\n       \
    \         i--;\n            }\n            return \"\";\n        }", '        //
    Your code here', "        final char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n \
    \       boolean isVowel = false;\n        for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n            for (char vowel : vowels) {\n                if (word.charAt(i)\
    \ == vowel) {\n                    isVowel = true;\n                    break;\n\
    \                }\n            }\n            if (isVowel) {\n              \
    \  for (int j = i - 1; j >= 0; j--) {\n                    for (char vowel : vowels)\
    \ {\n                        if (word.charAt(j) == vowel) {\n                \
    \            isVowel = false;\n                            break;\n          \
    \              }\n                    }\n                    if (!isVowel) {\n\
    \                        return Character.toString(word.charAt(i));\n        \
    \            }\n                }\n            }\n        }\n        return \"\
    \";", "        String str = word.toLowerCase();\n        int len = str.length();\n\
    \        if (len <= 1) {\n            return \"\";\n        }\n        int lastIndex\
    \ = str.length() - 1;\n        int vowelIndex = -1;\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n          \
    \  char c = str.charAt(i);\n            sb.append(c);\n            if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelIndex\
    \ = i;\n            }\n        }\n        if (vowelIndex == 0 || vowelIndex ==\
    \ lastIndex) {\n            return \"\";\n        }\n        if (vowelIndex !=\
    \ -1) {\n            for (int i = lastIndex; i > vowelIndex; i--) {\n        \
    \        char c = str.charAt(i);\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    char v = str.charAt(vowelIndex);\n\
    \                    return Character.toString(v);\n                }\n      \
    \      }\n        }\n        return \"\";", "        String found = \"\";\n  \
    \      String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        boolean\
    \ vowelfound = false;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
    \            for (int j = 0; j < vowels.length; j++) {\n                if (word.charAt(i)\
    \ == vowels[j].charAt(0)) {\n                    vowelfound = true;\n        \
    \            break;\n                }\n            }\n            if (vowelfound)\
    \ {\n                found = word.charAt(i) + \"\";\n                vowelfound\
    \ = false;\n                break;\n            }\n        }\n        return found;",
  "        var vowels = List.of('a', 'e', 'i', 'o', 'u');\n        var letters = word.toCharArray();\n\
    \        var reverse = String.join(\"\", Stream.of(letters).map(s -> String.valueOf(s)).collect(Collectors.toList()).stream().collect(Collectors.toList()).stream().map(s\
    \ -> new StringBuilder(s).reverse().toString()).collect(Collectors.toList()));\n\
    \        var vowelIndex = -1;\n        var vowel = \"\";\n        for (var i =\
    \ 0; i < reverse.length(); i++) {\n            if (vowels.contains(reverse.charAt(i)))\
    \ {\n                vowelIndex = i;\n                vowel = String.valueOf(reverse.charAt(i));\n\
    \                break;\n            }\n        }\n        var vowelIndex2 = -1;\n\
    \        var vowel2 = \"\";\n        for (var i = vowelIndex + 1; i < reverse.length();\
    \ i++) {\n            if (vowels.contains(reverse.charAt(i))) {\n            \
    \    vowelIndex2 = i;\n                vowel2 = String.valueOf(reverse.charAt(i));\n\
    \                break;\n            }\n        }\n        if (vowelIndex2 ==\
    \ -1) {\n            if (vowelIndex != -1) {\n                return vowel;\n\
    \            }\n            return \"\";\n        }\n        var distance = vowelIndex2\
    \ - vowelIndex;\n        if (distance == 1) {\n            return vowel;\n   \
    \     }\n        return vowel2;", '        return "";', '        throw new UnsupportedOperationException("TODO
    - implement");', "        String vowels = \"AEIOUaeiou\";\n        String consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        String closestVowel\
    \ = \"\";\n        int vowelIndex = -1;\n        int i = 0;\n        while (i\
    \ < word.length()) {\n            char c = word.charAt(i);\n            if (consonants.indexOf(c)\
    \ >= 0) {\n                if (vowelIndex >= 0) {\n                    char vowel\
    \ = word.charAt(vowelIndex);\n                    if (vowels.indexOf(vowel) >=\
    \ 0) {\n                        closestVowel = Character.toString(vowel);\n  \
    \                      break;\n                    }\n                }\n    \
    \            vowelIndex = -1;\n            } else if (vowels.indexOf(c) >= 0)\
    \ {\n                vowelIndex = i;\n            }\n            i++;\n      \
    \  }\n        return closestVowel;", "        for (int i = word.length() - 1;\
    \ i >= 0; i--) {\n            if (isVowel(word.charAt(i))) {\n               \
    \ if (i + 1 < word.length() && !isVowel(word.charAt(i + 1))) {\n             \
    \       return String.valueOf(word.charAt(i));\n                }\n          \
    \  }\n        }\n        return \"\";", "        // Write your code here!\n  \
    \      throw new UnsupportedOperationException(\"Not implemented\");", "     \
    \   // Write your code here...\n        return null;", "        String vowels\
    \ = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        String result = \"\";\n        int index = 0;\n        // If the word\
    \ is a single letter\n        if (word.length() == 1) {\n            // If the\
    \ first letter is a vowel, return it\n            if (vowels.contains(word.substring(0,\
    \ 1))) {\n                return word.substring(0, 1);\n            }\n      \
    \      // Otherwise, return empty string\n            else {\n               \
    \ return \"\";\n            }\n        }\n        // If the word has at least\
    \ two letters\n        else {\n            // Iterate through the word starting\
    \ from the right side\n            for (int i = word.length() - 1; i > 0; i--)\
    \ {\n                // If the current letter is a vowel and the preceding letter\
    \ is a consonant\n                if (vowels.contains(word.substring(i, i + 1))\
    \ && consonants.contains(word.substring(i - 1, i))) {\n                    //\
    \ Update the result and index\n                    result = word.substring(i,\
    \ i + 1);\n                    index = i;\n                    // Get out of the\
    \ loop\n                    break;\n                }\n            }\n       \
    \     // Iterate through the word starting from the right side once again\n  \
    \          for (int i = word.length() - 1; i > 0; i--) {\n                // If\
    \ the current letter is a vowel and the preceding letter is a consonant\n    \
    \            if (vowels.contains(word.substring(i, i + 1)) && consonants.contains(word.substring(i\
    \ - 1, i))) {\n                    // If the current vowel is closer to the right\
    \ side than the previously found vowel\n                    if (i > index) {\n\
    \                        // Update the result\n                        result\
    \ = word.substring(i, i + 1);\n                    }\n                }\n    \
    \        }\n            // Return the result\n            return result;\n   \
    \     }", "        String vowels = \"aeiou\";\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            String c = word.substring(i, i + 1);\n    \
    \        if (vowels.contains(c)) {\n                if (i > 0 && !vowels.contains(word.substring(i\
    \ - 1, i))) {\n                    return c;\n                }\n            \
    \    if (i < word.length() - 1 && !vowels.contains(word.substring(i + 1, i + 2)))\
    \ {\n                    return c;\n                }\n            }\n       \
    \ }\n        return \"\";", "        int wordSize = word.length();\n        int\
    \ rightConsonantIndex = -1;\n        int vowelIndex = -1;\n        int leftConsonantIndex\
    \ = -1;\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ wordSize - 1; i >= 0; i--) {\n            String currentChar = String.valueOf(word.charAt(i));\n\
    \            if (rightConsonantIndex == -1 && !isVowel(currentChar)) {\n     \
    \           rightConsonantIndex = i;\n            } else if (rightConsonantIndex\
    \ > -1 && isVowel(currentChar)) {\n                vowelIndex = i;\n         \
    \       break;\n            }\n        }\n        for (int i = vowelIndex - 1;\
    \ i >= 0; i--) {\n            String currentChar = String.valueOf(word.charAt(i));\n\
    \            if (!isVowel(currentChar)) {\n                leftConsonantIndex\
    \ = i;\n                break;\n            }\n        }\n        if (leftConsonantIndex\
    \ > -1 && vowelIndex > -1 && rightConsonantIndex > -1) {\n            sb.append(word.charAt(vowelIndex));\n\
    \        }\n        return sb.toString();", "        List<String> vowels = new\
    \ ArrayList<String>();\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n\
    \        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        String vowel = \"\";\n        String checkLetter = \"\";\n    \
    \    String checkLetter2 = \"\";\n        String checkLetter3 = \"\";\n      \
    \  String checkLetter4 = \"\";\n        String wordLower = word.toLowerCase();\n\
    \        int position = 0;\n        int consonantCount = 0;\n        int position2\
    \ = 0;\n        int consonantCount2 = 0;\n        int position3 = 0;\n       \
    \ int consonantCount3 = 0;\n        int position4 = 0;\n        int consonantCount4\
    \ = 0;\n        int upperBound = word.length() - 1;\n        int finalPosition\
    \ = 0;\n        int finalPosition2 = 0;\n        int finalPosition3 = 0;\n   \
    \     int finalPosition4 = 0;\n        int finalConsonantCount = 0;\n        int\
    \ finalConsonantCount2 = 0;\n        int finalConsonantCount3 = 0;\n        int\
    \ finalConsonantCount4 = 0;\n        for (int i = upperBound; i >= 0; i--) {\n\
    \            if (!vowels.contains(String.valueOf(wordLower.charAt(i)))) {\n  \
    \              consonantCount++;\n                position = i;\n            }\
    \ else {\n                finalPosition = position;\n                finalConsonantCount\
    \ = consonantCount;\n                vowel = String.valueOf(word.charAt(i));\n\
    \                if (vowel.equals(\"a\") || vowel.equals(\"e\") || vowel.equals(\"\
    i\") || vowel.equals(\"o\") || vowel.equals(\"u\")) {\n                    break;\n\
    \                }\n            }\n        }\n        for (int i = finalPosition\
    \ - 1; i >= 0; i--) {\n            if (!vowels.contains(String.valueOf(wordLower.charAt(i))))\
    \ {\n                consonantCount2++;\n                position2 = i;\n    \
    \        } else {\n                finalPosition2 = position2;\n             \
    \   finalConson", '        return null;', "        // TODO: Write your code here\n\
    \        return \"\";", "        String result = \"\";\n        boolean valid\
    \ = false;\n        int n = word.length();\n        for (int i = n - 1; i >= 0;\
    \ i--) {\n            String ch = word.substring(i, i + 1);\n            if (ch.matches(\"\
    [AEIOUaeiou]\")) {\n                result = ch;\n                valid = true;\n\
    \            } else if (valid) {\n                return result;\n           \
    \ }\n        }\n        return \"\";", "        char vowels[] = {'a', 'e', 'i',\
    \ 'o', 'u'};\n        char consonants[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n   \
    \     List<Character> list_vowels = new ArrayList<Character>();\n        List<Character>\
    \ list_consonants = new ArrayList<Character>();\n        for (char c : vowels)\
    \ {\n            list_vowels.add(c);\n        }\n        for (char c : consonants)\
    \ {\n            list_consonants.add(c);\n        }\n        StringBuilder res\
    \ = new StringBuilder();\n        for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n            if (list_vowels.contains(word.charAt(i))) {\n               \
    \ continue;\n            }\n            else if (list_consonants.contains(word.charAt(i)))\
    \ {\n                int j = i - 1;\n                while (j >= 0) {\n      \
    \              if (list_vowels.contains(word.charAt(j))) {\n                 \
    \       res.append(word.charAt(j));\n                        break;\n        \
    \            }\n                    j--;\n                }\n                break;\n\
    \            }\n        }\n        return res.toString();", "        int i = word.length()\
    \ - 1;\n        while (i >= 0) {\n            if (isVowel(word.charAt(i))) {\n\
    \                if (i > 0 && isConsonant(word.charAt(i - 1))) {\n           \
    \         return Character.toString(word.charAt(i));\n                }\n    \
    \        }\n            i--;\n        }\n        return \"\";", "        // return\
    \ the empty string if the length of the word is less than 3\n        if (word.length()\
    \ < 3) return \"\";\n        // get the last index of the word\n        int idx\
    \ = word.length() - 1;\n        // using a for loop to iterate through the string\
    \ in reverse direction\n        // so that we can find the closest vowel in the\
    \ right side of the word\n        for (int i = idx; i >= 0; i--) {\n         \
    \   // if the char is a vowel then check if its left side and right side\n   \
    \         // are both consonants\n            if (isVowel(word.charAt(i))) {\n\
    \                // if the left side of the vowel is also a vowel or there's no\n\
    \                // left side then return the empty string\n                if\
    \ (i == 0 || isVowel(word.charAt(i - 1))) return \"\";\n                // else\
    \ if the right side of the vowel is a consonant then return\n                //\
    \ the string\n                else if (isConsonant(word.charAt(i + 1))) return\
    \ word.substring(i, i + 1);\n            }\n        }\n        // return the empty\
    \ string if we couldn't find any vowels between two consonants\n        return\
    \ \"\";", "        // write your solution here\n        int counter = 0;\n   \
    \     int[] indexes = new int[word.length()];\n        int vowels = 0;\n     \
    \   for (int i = 0; i < word.length(); i++) {\n            if(word.charAt(i) ==\
    \ 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o'\
    \ || word.charAt(i) == 'u' || word.charAt(i) == 'A' || word.charAt(i) == 'E' ||\
    \ word.charAt(i) == 'I' || word.charAt(i) == 'O' || word.charAt(i) == 'U') {\n\
    \                indexes[counter] = i;\n                counter++;\n         \
    \       vowels++;\n            }\n        }\n        if (vowels <= 1) {\n    \
    \        return \"\";\n        }\n        int[] difference = new int[counter];\n\
    \        for (int i = 0; i < counter - 1; i++) {\n            difference[i] =\
    \ indexes[i + 1] - indexes[i];\n        }\n        int largest = 0;\n        for\
    \ (int i = 0; i < counter - 1; i++) {\n            if (difference[i] > difference[largest])\
    \ {\n                largest = i;\n            }\n        }\n        return Character.toString(word.charAt(indexes[largest]));",
  "\t\treturn null;", "        StringBuilder result = new StringBuilder();\n     \
    \   // => ['y', 'o', 'g', 'u', 'r', 't']\n        char[] charArray = word.toCharArray();\n\
    \        for (int i = charArray.length - 1; i >= 0; i--) {\n            // 'y'\n\
    \            char current = charArray[i];\n            // 'o'\n            char\
    \ right = charArray[i - 1];\n            if (isVowel(current) && !isVowel(right))\
    \ {\n                // isVowel('y') = true\n                // !isVowel('o')\
    \ = false\n                result.append(current);\n                break;\n \
    \           }\n        }\n        return result.toString();", "        // 1. find\
    \ the closest vowel from the right side of the word\n        // 2. the previous\
    \ and next characters are consonants\n        // 3. if there is no vowels, return\
    \ \"\"\n        // 4. if there is no consonants, return \"\"\n        // 5. return\
    \ closest vowel\n        // your code here\n        if (word.length()==0) return\
    \ \"\";\n        char[] wordArray = word.toCharArray();\n        int length =\
    \ wordArray.length;\n        for (int i=length-1; i>=0; i--) {\n            if\
    \ (wordArray[i]=='a' || wordArray[i]=='e' || wordArray[i]=='i' || wordArray[i]=='o'\
    \ || wordArray[i]=='u') {\n                if (i==0) return \"\";\n          \
    \      if (i==length-1) return \"\";\n                char prevChar = wordArray[i-1];\n\
    \                char nextChar = wordArray[i+1];\n                if (prevChar!='a'\
    \ && prevChar!='e' && prevChar!='i' && prevChar!='o' && prevChar!='u'\n      \
    \          && nextChar!='a' && nextChar!='e' && nextChar!='i' && nextChar!='o'\
    \ && nextChar!='u') {\n                    return String.valueOf(wordArray[i]);\n\
    \                }\n            }\n        }\n        return \"\";", '        return
    "";', "        String result = \"\";\n        String vowels = \"AEIOUaeiou\";\n\
    \        int vowelCount = 0;\n        String previousChar = \"\";\n        String\
    \ previousVowel = \"\";\n        char[] wordArray = word.toCharArray();\n    \
    \    for (int i = wordArray.length - 1; i >= 0; i--) {\n            String currentChar\
    \ = String.valueOf(wordArray[i]);\n            if (vowels.contains(currentChar))\
    \ {\n                vowelCount++;\n                if (vowelCount == 2) {\n \
    \                   result = previousVowel;\n                    break;\n    \
    \            }\n                previousVowel = currentChar;\n            } else\
    \ {\n                if (vowelCount == 1) {\n                    result = previousVowel;\n\
    \                    break;\n                }\n            }\n            previousChar\
    \ = currentChar;\n        }\n        return result;", "        int l = word.length();\n\
    \        if (l < 3) return \"\";\n        int min = l;\n        int minIndex =\
    \ -1;\n        for (int i = l - 2; i > 0; i--) {\n            if (isVowel(word.charAt(i)))\
    \ {\n                if (isConsonant(word.charAt(i-1)) && isConsonant(word.charAt(i+1)))\
    \ {\n                    int d = l - 1 - i;\n                    if (d < min)\
    \ {\n                        min = d;\n                        minIndex = i;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (minIndex < 0) return \"\";\n        return String.valueOf(word.charAt(minIndex));",
  "        int index = 0;\n        String closestVowel = \"\";\n        String vowels\
    \ = \"aeiou\";\n        StringBuilder result = new StringBuilder();\n        while\
    \ (index < word.length()) {\n            if (vowels.contains(word.substring(index,\
    \ index + 1))) {\n                if (index > 0 && index < word.length() - 1)\
    \ {\n                    if (!vowels.contains(word.substring(index - 1, index))\
    \ && !vowels.contains(word.substring(index + 1, index + 2))) {\n             \
    \           result.append(word.substring(index, index + 1));\n               \
    \     }\n                }\n            }\n            index++;\n        }\n \
    \       if (result.length() > 0) {\n            closestVowel = result.toString();\n\
    \        }\n        return closestVowel;", "        List<Character> vowels = Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u');\n        String result = \"\";\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if (vowels.contains(word.charAt(i))) {\n  \
    \              if (i == word.length() - 1 || i == 0) {\n                    continue;\n\
    \                }\n                if (vowels.contains(word.charAt(i - 1)) ||\
    \ vowels.contains(word.charAt(i + 1))) {\n                    continue;\n    \
    \            }\n                result = word.charAt(i) + \"\";\n            \
    \    break;\n            }\n        }\n        return result;", "        StringBuilder\
    \ vowel = new StringBuilder();\n        String[] vowels = new String[]{\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"};\n        for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n            for (String v : vowels) {\n                if (v.equals(word.substring(i,\
    \ i + 1))) {\n                    vowel.append(v);\n                    break;\n\
    \                }\n            }\n            if (vowel.length() > 0) break;\n\
    \        }\n        if (vowel.length() == 0) return \"\";\n        String tmp\
    \ = vowel.toString();\n        String res = vowel.reverse().toString();\n    \
    \    vowel.reverse();\n        for (int i = 0; i < tmp.length(); i++) {\n    \
    \        int l = vowel.length() - i - 1;\n            if (l - 1 < 0) return res;\n\
    \            if (tmp.substring(i, i + 1).equals(vowel.substring(l - 1, l))) {\n\
    \                res = vowel.substring(l, l + 1);\n                break;\n  \
    \          }\n        }\n        return res;", "        StringBuilder vowels =\
    \ new StringBuilder(\"aeiouAEIOU\");\n        StringBuilder stringBuilder = new\
    \ StringBuilder(word);\n        StringBuilder finalString = new StringBuilder();\n\
    \        finalString.append(\"\");\n        // char[] wordArray = word.toCharArray();\n\
    \        // System.out.println(wordArray);\n        for (int i = stringBuilder.length()\
    \ - 1; i > 0; i--) {\n            for (int k = 0; k < vowels.length(); k++) {\n\
    \                if (stringBuilder.charAt(i) == vowels.charAt(k)) {\n        \
    \            if (vowels.charAt(k) == 'a' || vowels.charAt(k) == 'e' || vowels.charAt(k)\
    \ == 'i' || vowels.charAt(k) == 'o' || vowels.charAt(k) == 'u') {\n          \
    \              if (!(vowels.charAt(k) == 'a' || vowels.charAt(k) == 'e' || vowels.charAt(k)\
    \ == 'i' || vowels.charAt(k) == 'o' || vowels.charAt(k) == 'u')) {\n         \
    \                   System.out.println(finalString);\n                       \
    \     return finalString.toString();\n                        }\n            \
    \        }\n                }\n            }\n        }\n        return finalString.toString();",
  '        return word;', "        StringBuilder vowels = new StringBuilder(\"aeiou\"\
    );\n        StringBuilder result = new StringBuilder();\n        boolean prevConsonant\
    \ = false;\n        for (int i = word.length() - 1; i >= 0; i--) {\n         \
    \   char letter = word.charAt(i);\n            if (vowels.indexOf(String.valueOf(letter))\
    \ > -1) {\n                if (prevConsonant) {\n                    result.append(letter);\n\
    \                    break;\n                }\n            } else if (i > 0)\
    \ {\n                prevConsonant = true;\n            }\n        }\n       \
    \ return result.reverse().toString();", "        word = word.toLowerCase();\n\
    \        if (word.length() < 3) return \"\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        String vowels = \"aeiou\";\n        int lastIdx = word.length() - 1;\n\
    \        for (int i = lastIdx; i > 0; i--) {\n            char cur = word.charAt(i);\n\
    \            char prev = word.charAt(i - 1);\n            if (consonants.indexOf(cur)\
    \ != -1 && consonants.indexOf(prev) != -1) {\n                for (int j = i +\
    \ 1; j <= lastIdx; j++) {\n                    char a = word.charAt(j);\n    \
    \                if (vowels.indexOf(a) != -1) return String.valueOf(a);\n    \
    \            }\n            }\n        }\n        return \"\";", "        char[]\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'};\n        String result = \"\";\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            if (new\
    \ String(vowels).contains(String.valueOf(c))) {\n                result = String.valueOf(c);\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       String vowels = \"aeiou\";\n        String consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        String answer = \"\";\n        for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n            String curr = String.valueOf(word.charAt(i));\n     \
    \       String next = String.valueOf(word.charAt(i - 1));\n            if (vowels.contains(curr)\
    \ && consonants.contains(next)) {\n                answer = curr;\n          \
    \      break;\n            }\n        }\n        return answer;", '        return
    "";', "        // Complete this function here\n        String res = \"\";\n  \
    \      for (int i = word.length() - 1; i >= 0; i--) {\n            String c =\
    \ word.substring(i, i + 1);\n            if (c.matches(\"[a,e,i,o,u]\")) {\n \
    \               res = c;\n                break;\n            }\n        }\n \
    \       return res;", "        String vowel = \"aeiou\";\n        String[] a =\
    \ word.split(\"\");\n        String result = \"\";\n        String resultL = \"\
    \";\n        String resultR = \"\";\n        for (int i = a.length - 1; i > 0;\
    \ i--) {\n            if (vowel.contains(a[i])) {\n                if (vowel.contains(a[i\
    \ - 1])) {\n                    continue;\n                } else {\n        \
    \            resultL = a[i];\n                    resultR = a[i - 1];\n      \
    \              break;\n                }\n            }\n        }\n        if\
    \ (resultL != \"\" && resultR != \"\") {\n            result = resultL;\n    \
    \    }\n        return result;", "        String closestVowel = \"\";\n      \
    \  String consonants = \"qwrtypsdfghjklzxcvbnm\";\n        String vowels = \"\
    aeiou\";\n        int closestVowelIndex = word.length();\n        int firstConsonantIndex\
    \ = word.length();\n        for (int i = word.length() - 1; i >= 0; i--) {\n \
    \           String ch = word.substring(i, i + 1);\n            if (vowels.contains(ch))\
    \ {\n                if (firstConsonantIndex < i) {\n                    if (i\
    \ < closestVowelIndex) {\n                        closestVowelIndex = i;\n   \
    \                     closestVowel = ch;\n                    }\n            \
    \    }\n            } else if (consonants.contains(ch)) {\n                if\
    \ (firstConsonantIndex == word.length()) {\n                    firstConsonantIndex\
    \ = i;\n                }\n            }\n        }\n        return closestVowel;",
  "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String\
    \ closestVowel = \"\";\n        int closestDist = word.length();\n        String[]\
    \ wordArr = word.split(\"\");\n        for (int i = 0; i < wordArr.length; i++)\
    \ {\n            if (Arrays.asList(vowels).contains(wordArr[i])) {\n         \
    \       if (i < closestDist) {\n                    closestDist = i;\n       \
    \             closestVowel = wordArr[i];\n                }\n            }\n \
    \       }\n        return closestVowel;", "        String vowels = \"aeiouAEIOU\"\
    ;\n        int leftConIndex = -1;\n        int rightConIndex = -1;\n        for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n            if (leftConIndex ==\
    \ -1 && !vowels.contains(word.substring(i, i + 1))) {\n                leftConIndex\
    \ = i;\n            } else if (leftConIndex != -1 && vowels.contains(word.substring(i,\
    \ i + 1))) {\n                rightConIndex = i;\n                break;\n   \
    \         }\n        }\n        if (leftConIndex == -1 || rightConIndex == -1)\
    \ {\n            return \"\";\n        }\n        return word.substring(rightConIndex,\
    \ rightConIndex + 1);", "        //for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        //}\n        //return null;\n        return Stream.iterate(word.length()\
    \ - 1, i -> i - 1)\n                .limit(word.length())\n                .filter(i\
    \ -> isVowel(word.charAt(i)))\n                .filter(i -> {\n              \
    \      if (i == 0) {\n                        return false;\n                \
    \    }\n                    if (i == word.length() - 1) {\n                  \
    \      return false;\n                    }\n                    return !isVowel(word.charAt(i\
    \ - 1)) && !isVowel(word.charAt(i + 1));\n                })\n               \
    \ .map(i -> Character.toString(word.charAt(i)))\n                .findFirst()\n\
    \                .orElse(\"\");", "        String vowels = \"aeiou\";\n      \
    \  String word2 = word.toLowerCase();\n        int index = word2.length() - 1;\n\
    \        for (; index >= 0; index--) {\n            if (vowels.indexOf(word2.charAt(index))\
    \ >= 0) {\n                break;\n            }\n        }\n        if (index\
    \ == 0) {\n            return \"\";\n        }\n        char[] chars = word.toCharArray();\n\
    \        if (index == word.length() - 1) {\n            if (vowels.indexOf(chars[index])\
    \ >= 0) {\n                return \"\";\n            }\n            return Character.toString(chars[index]);\n\
    \        }\n        char leftChar = word2.charAt(index - 1);\n        char rightChar\
    \ = word2.charAt(index + 1);\n        if (vowels.indexOf(leftChar) >= 0 || vowels.indexOf(rightChar)\
    \ >= 0) {\n            return \"\";\n        }\n        return Character.toString(chars[index]);",
  "\t\tString vowels = \"aeiouAEIOU\";\n\t\t// System.out.println(word);\n\t\t// System.out.println(vowels);\n\
    \t\tint closestVowelIndex = word.length();\n\t\tint closestVowelIndex2 = word.length();\n\
    \t\t// System.out.println(closestVowelIndex);\n\t\tfor (int i = 0; i < word.length();\
    \ i++) {\n\t\t\t// System.out.println(word.charAt(i));\n\t\t\t// System.out.println(vowels.indexOf(word.charAt(i)));\n\
    \t\t\t// System.out.println(vowels.charAt(vowels.indexOf(word.charAt(i))));\n\t\
    \t\tif (vowels.indexOf(word.charAt(i)) != -1) {\n\t\t\t\t// System.out.println(i);\n\
    \t\t\t\tif (closestVowelIndex2 > closestVowelIndex) {\n\t\t\t\t\tclosestVowelIndex2\
    \ = closestVowelIndex;\n\t\t\t\t}\n\t\t\t\tclosestVowelIndex = i;\n\t\t\t}\n\t\
    \t}\n\t\tif (closestVowelIndex == word.length()) {\n\t\t\treturn \"\";\n\t\t}\n\
    \t\tif (closestVowelIndex2 == word.length()) {\n\t\t\treturn \"\";\n\t\t}\n\t\t\
    if (closestVowelIndex > closestVowelIndex2) {\n\t\t\treturn word.substring(closestVowelIndex2,\
    \ closestVowelIndex2 + 1);\n\t\t}\n\t\treturn word.substring(closestVowelIndex,\
    \ closestVowelIndex + 1);", "        String vowels = \"aeiou\";\n        String\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n        char[] wordArray = word.toCharArray();\n\
    \        int closestVowelIndex = -1;\n        int closestVowelDistance = Integer.MAX_VALUE;\n\
    \        int closestConsonantIndex = -1;\n        int closestConsonantDistance\
    \ = Integer.MAX_VALUE;\n        for (int i = 0; i < wordArray.length; i++) {\n\
    \            if (vowels.indexOf(wordArray[i]) >= 0) {\n                if (closestConsonantIndex\
    \ != -1) {\n                    int distance = i - closestConsonantIndex;\n  \
    \                  if (distance < closestVowelDistance) {\n                  \
    \      closestVowelDistance = distance;\n                        closestVowelIndex\
    \ = i;\n                    }\n                }\n            } else if (consonants.indexOf(wordArray[i])\
    \ >= 0) {\n                if (closestVowelIndex != -1) {\n                  \
    \  int distance = i - closestVowelIndex;\n                    if (distance < closestConsonantDistance)\
    \ {\n                        closestConsonantDistance = distance;\n          \
    \              closestConsonantIndex = i;\n                    }\n           \
    \     }\n            }\n        }\n        if (closestVowelIndex != -1 && closestConsonantIndex\
    \ != -1) {\n            return word.substring(closestVowelIndex, closestVowelIndex\
    \ + 1);\n        }\n        return \"\";", "        // getClosestVowel: String\
    \ -> String\n        // Consumes a string and yields the closest vowel from the\
    \ right that is\n        // between two consonants. If no vowel is found, then\
    \ empty string is returned.\n        // Example:\n        // getClosestVowel(\"\
    yogurt\") => \"u\"\n        // getClosestVowel(\"ab\") => \"\"\n        List<Character>\
    \ vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        String consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n        String closest = \"\";\n        int counter\
    \ = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if\
    \ (consonants.contains(Character.toString(word.charAt(i)))) {\n              \
    \  counter++;\n            } else if (vowels.contains(word.charAt(i))) {\n   \
    \             if (counter == 2) {\n                    closest = Character.toString(word.charAt(i));\n\
    \                    break;\n                } else {\n                    counter\
    \ = 0;\n                }\n            }\n        }\n        return closest;",
  "        String result = \"\";\n        String vowerls = \"AEIOUaeiou\";\n     \
    \   char[] chars = word.toCharArray();\n        ArrayList<Integer> indexes = new\
    \ ArrayList<Integer>();\n        for (int i = 0; i < chars.length; i++) {\n  \
    \          if (vowerls.indexOf(chars[i]) >= 0) {\n                indexes.add(i);\n\
    \            }\n        }\n        if (indexes.size() == 0) {\n            return\
    \ result;\n        }\n        boolean isVowelStart = false;\n        if (vowerls.indexOf(chars[0])\
    \ >= 0) {\n            isVowelStart = true;\n        }\n        if (isVowelStart)\
    \ {\n            for (int i = 1; i < indexes.size(); i++) {\n                if\
    \ (indexes.get(i) - indexes.get(i - 1) == 1) {\n                    continue;\n\
    \                } else {\n                    result = chars[indexes.get(i -\
    \ 1)] + \"\";\n                    break;\n                }\n            }\n\
    \        } else {\n            if (indexes.size() == 1) {\n                result\
    \ = chars[indexes.get(0)] + \"\";\n            } else {\n                for (int\
    \ i = 0; i < indexes.size() - 1; i++) {\n                    if (indexes.get(i\
    \ + 1) - indexes.get(i) == 1) {\n                        continue;\n         \
    \           } else {\n                        result = chars[indexes.get(i)] +\
    \ \"\";\n                        break;\n                    }\n             \
    \   }\n            }\n        }\n        return result;", "\t\treturn null;",
  "        // use first and last indices of vowels to determine distance from prev\
    \ and next cons\n        int[] vowelIndices = new int[word.length()];\n      \
    \  int numVowels = 0;\n        for (int i = 0; i < word.length(); i++) {\n   \
    \         char c = word.charAt(i);\n            if (isVowel(c)) {\n          \
    \      vowelIndices[numVowels] = i;\n                numVowels++;\n          \
    \  }\n        }\n        // if there's only one vowel and it's not at the start,\
    \ it must be the closest\n        if (numVowels == 1 && vowelIndices[0] != 0)\
    \ {\n            return Character.toString(word.charAt(vowelIndices[0]));\n  \
    \      }\n        // no vowels\n        if (numVowels == 0) {\n            return\
    \ \"\";\n        }\n        // start at first vowel and move to end\n        //\
    \ if there's another vowel after the previous cons, return it\n        int prevVowelIndex\
    \ = vowelIndices[0];\n        for (int i = vowelIndices[0] + 1; i < word.length();\
    \ i++) {\n            char c = word.charAt(i);\n            if (isVowel(c)) {\n\
    \                if (isConsonant(word.charAt(i - 1))) {\n                    return\
    \ Character.toString(c);\n                }\n                prevVowelIndex =\
    \ i;\n            }\n        }\n        // move back from end\n        for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
    \            if (isVowel(c)) {\n                if (isConsonant(word.charAt(i\
    \ + 1))) {\n                    return Character.toString(c);\n              \
    \  }\n            }\n        }\n        return \"\";", "        // Do your magic\
    \ here\n        int l = word.length();\n        if (l <= 1) return \"\";\n   \
    \     int i = l - 1;\n        int c = 0;\n        while (i >= 0) {\n         \
    \   if (!isVowel(word.charAt(i))) {\n                c++;\n                if\
    \ (c == 2) return \"\";\n            } else {\n                if (c == 1) return\
    \ \"\" + word.charAt(i);\n            }\n            i--;\n        }\n       \
    \ return \"\";", "        if (word.length() == 0) return \"\";\n        Set<Character>\
    \ vowels = new HashSet<Character>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        vowels.add('A');\n        vowels.add('E');\n        vowels.add('I');\n\
    \        vowels.add('O');\n        vowels.add('U');\n        StringBuilder sb\
    \ = new StringBuilder();\n        StringBuilder res = new StringBuilder();\n \
    \       StringBuilder resTmp = new StringBuilder();\n        int indexLastVowel\
    \ = -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if\
    \ (vowels.contains(word.charAt(i))) {\n                sb.append(word.charAt(i));\n\
    \                if (indexLastVowel == -1) {\n                    indexLastVowel\
    \ = i;\n                }\n            } else {\n                if (sb.length()\
    \ > 0) {\n                    if (indexLastVowel > 0) {\n                    \
    \    res.append(sb.reverse());\n                        resTmp.append(sb.reverse());\n\
    \                        sb.setLength(0);\n                        break;\n  \
    \                  }\n                    sb.setLength(0);\n                }\n\
    \            }\n        }\n        for (int i = 0; i < indexLastVowel; i++) {\n\
    \            if (vowels.contains(word.charAt(i))) {\n                sb.append(word.charAt(i));\n\
    \            } else {\n                if (sb.length() > 0) {\n              \
    \      if (sb.length() >= resTmp.length()) {\n                        res.setLength(0);\n\
    \                        res.append(sb.reverse());\n                    }\n  \
    \                  sb.setLength(0);\n                }\n            }\n      \
    \  }\n        if (sb.length() > 0) {\n            if (sb.length() >= resTmp.length())\
    \ {\n                res.setLength(0);\n                res.append(sb.reverse());\n\
    \            }", "        //write your code here\n        return \"\";", '        return
    "";', "        // your code here\n        return null;", "        word = word.toLowerCase();\n\
    \        String vowels = \"aeiou\";\n        char[] vowelsArray = vowels.toCharArray();\n\
    \        char[] wordArray = word.toCharArray();\n        int wordLength = wordArray.length;\n\
    \        int vowelsLength = vowelsArray.length;\n        char prevChar = ' ';\n\
    \        int minDistance = wordLength;\n        char minVowel = ' ';\n       \
    \ for (int i = wordLength - 1; i >= 0; i--) {\n            if (vowels.indexOf(wordArray[i])\
    \ >= 0) {\n                if (prevChar != ' ') {\n                    int distance\
    \ = wordLength - i;\n                    if (distance < minDistance) {\n     \
    \                   minDistance = distance;\n                        minVowel\
    \ = wordArray[i];\n                    }\n                }\n            } else\
    \ {\n                prevChar = wordArray[i];\n            }\n        }\n    \
    \    if (minVowel == ' ') {\n            return \"\";\n        } else {\n    \
    \        return Character.toString(minVowel);\n        }", "        var vowels\
    \ = new HashSet<Character>(List.of('a', 'e', 'i', 'o', 'u'));\n        var chars\
    \ = word.toCharArray();\n        int prevIndex = -1;\n        int closestIndex\
    \ = -1;\n        int distance = Integer.MAX_VALUE;\n        for (int i = 0; i\
    \ < chars.length; i++) {\n            if (vowels.contains(chars[i])) {\n     \
    \           if (prevIndex >= 0) {\n                    var dist = i - prevIndex;\n\
    \                    if (dist < distance) {\n                        distance\
    \ = dist;\n                        closestIndex = i;\n                    }\n\
    \                }\n            } else {\n                prevIndex = i;\n   \
    \         }\n        }\n        if (closestIndex == -1) {\n            return\
    \ \"\";\n        }\n        return String.valueOf(chars[closestIndex]);", "  \
    \      if (word.length() < 3) return \"\";\n        List<String> vowels = Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n        String closest = \"\";\n        int\
    \ distance = Integer.MAX_VALUE;\n        for (int index = word.length() - 1; index\
    \ >= 0; index--) {\n            String letter = word.substring(index, index +\
    \ 1);\n            if (vowels.contains(letter) && index != 0 && index != word.length()\
    \ - 1) {\n                int currentDistance = index - (word.length() - 1 - index);\n\
    \                if (currentDistance < distance) {\n                    distance\
    \ = currentDistance;\n                    closest = letter;\n                }\n\
    \            }\n        }\n        return closest;", '        return "";', '        return
    "";', "        String vowels = \"aeiou\";\n        int count = 0;\n        for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
    \ i + 1))) {\n                count++;\n            } else {\n               \
    \ if (count == 2) {\n                    return word.substring(i + 1, i + 2);\n\
    \                } else {\n                    count = 0;\n                }\n\
    \            }\n        }\n        return \"\";", "        // TODO: implement\n\
    \        return \"\";", "        boolean flag = false;\n        String vowels\
    \ = \"aeiouAEIOU\";\n        int index = 0;\n        while (index < word.length())\
    \ {\n            if (vowels.contains(word.substring(index, index + 1))) {\n  \
    \              int j = index + 1;\n                while (j < word.length()) {\n\
    \                    if (vowels.contains(word.substring(j, j + 1))) {\n      \
    \                  break;\n                    }\n                    else {\n\
    \                        j++;\n                    }\n                }\n    \
    \            if (j == word.length()) {\n                    flag = true;\n   \
    \                 break;\n                }\n                else {\n        \
    \            j++;\n                    while (j < word.length()) {\n         \
    \               if (vowels.contains(word.substring(j, j + 1))) {\n           \
    \                 break;\n                        }\n                        else\
    \ {\n                            j++;\n                        }\n           \
    \         }\n                    if (j == word.length()) {\n                 \
    \       flag = true;\n                        break;\n                    }\n\
    \                    else {\n                        index = j;\n            \
    \        }\n                }\n            }\n            else {\n           \
    \     index++;\n            }\n        }\n        if (flag) {\n            return\
    \ word.substring(index, index + 1);\n        }\n        else {\n            return\
    \ \"\";\n        }", "        int index = -1;\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if (isVowel(word.charAt(i))) {\n          \
    \      index = i;\n                break;\n            }\n        }\n        if\
    \ (index > 0 && isConsonant(word.charAt(index - 1))) {\n            return word.substring(index,\
    \ index + 1);\n        }\n        return \"\";", "        int wordLen = word.length();\n\
    \        int index = wordLen - 1;\n        int left = wordLen - 1;\n        int\
    \ right = wordLen - 1;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n \
    \       char[] chars = word.toCharArray();\n        boolean found = false;\n \
    \       boolean leftIsVowel = false;\n        while (index >= 0) {\n         \
    \   char c = chars[index];\n            boolean isVowel = false;\n           \
    \ for (char vowel : vowels) {\n                if (c == vowel) {\n           \
    \         isVowel = true;\n                    break;\n                }\n   \
    \         }\n            if (isVowel) {\n                right = index;\n    \
    \            if (found) {\n                    return String.valueOf(c);\n   \
    \             }\n            } else {\n                left = index;\n       \
    \         if (leftIsVowel) {\n                    found = true;\n            \
    \    }\n            }\n            leftIsVowel = isVowel;\n            index--;\n\
    \        }\n        return \"\";", "        String[] vowels = {\"a\", \"e\", \"\
    i\", \"o\", \"u\"};\n        char[] chars = word.toCharArray();\n        // find\
    \ the first consonant\n        // iterate backwards until we find it\n       \
    \ int index = chars.length - 1;\n        while(!isVowel(chars[index])) {\n   \
    \         index -= 1;\n        }\n        // find the next consonant\n       \
    \ while(isVowel(chars[index])) {\n            index -= 1;\n        }\n       \
    \ // check for a match\n        for(String vowel : vowels) {\n            if(String.valueOf(chars[index]).equals(vowel))\
    \ {\n                return vowel;\n            }\n        }\n        return \"\
    \";", "        String vowels = \"aeiouAEIOU\";\n        String closestVowel =\
    \ \"\";\n        int closestIndex = word.length();\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i))))\
    \ {\n                if (word.length() - i - 1 < closestIndex) {\n           \
    \         closestIndex = word.length() - i - 1;\n                    closestVowel\
    \ = String.valueOf(word.charAt(i));\n                }\n            }\n      \
    \  }\n        return closestVowel;", "        String vowels = \"aeiou\";\n   \
    \     String result = \"\";\n        char lastVowel = ' ';\n        for (int i\
    \ = word.length() - 1; i >= 0; i--) {\n            char ch = word.charAt(i);\n\
    \            if (vowels.indexOf(ch) >= 0) {\n                lastVowel = ch;\n\
    \            } else {\n                if (lastVowel != ' ') {\n             \
    \       result = \"\" + lastVowel;\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", "        if (word.equals(\"\
    \")) return \"\";\n        // check if the first letter is vowel or not\n    \
    \    if (isVowel(word.charAt(0))) return \"\";\n        int index = 0;\n     \
    \   while (index < word.length() && isConsonant(word.charAt(index))) index++;\n\
    \        if (index == word.length()) return \"\";\n        if (index == 0) return\
    \ \"\";\n        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n      \
    \  int bestDistance = -1;\n        char bestVowel = word.charAt(index);\n    \
    \    for (char vowel : vowels) {\n            int distance = getVowelDistance(word,\
    \ vowel, index);\n            if (distance > 0 && (bestDistance == -1 || distance\
    \ < bestDistance)) {\n                bestDistance = distance;\n             \
    \   bestVowel = vowel;\n            }\n        }\n        if (bestDistance ==\
    \ -1) return \"\";\n        return String.valueOf(bestVowel);", "        String[]\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        char[] chars = word.toCharArray();\n\
    \        String closestVowel = \"\";\n        int minDistance = Integer.MAX_VALUE;\n\
    \        boolean foundVowel = false;\n        for (int i = chars.length - 1; i\
    \ >= 0; i--) {\n            char currentChar = chars[i];\n            if (isConsonant(currentChar))\
    \ {\n                if (foundVowel) {\n                    break;\n         \
    \       }\n                continue;\n            }\n            foundVowel =\
    \ true;\n            for (String vowel : vowels) {\n                int distance\
    \ = Math.abs(word.indexOf(vowel) - i);\n                if (distance < minDistance)\
    \ {\n                    minDistance = distance;\n                    closestVowel\
    \ = vowel;\n                }\n            }\n        }\n        return closestVowel;",
  "        // Write your solution here\n        List<String> vowels = new ArrayList<>();\n\
    \        vowels.add(\"a\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    A\");\n        vowels.add(\"E\");\n        vowels.add(\"I\");\n        vowels.add(\"\
    O\");\n        vowels.add(\"U\");\n        word = word.replace(\" \", \"\");\n\
    \        char[] arr = word.toCharArray();\n        List<String> cons = new ArrayList<>();\n\
    \        List<String> vowel = new ArrayList<>();\n        List<String> ans = new\
    \ ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n           \
    \ if (vowels.contains(Character.toString(arr[i]))) {\n                vowel.add(Character.toString(arr[i]));\n\
    \            } else {\n                cons.add(Character.toString(arr[i]));\n\
    \            }\n        }\n        for (int i = 0; i < vowel.size(); i++) {\n\
    \            for (int j = cons.size() - 1; j >= 0; j--) {\n                if\
    \ (vowel.get(i).equals(cons.get(j))) {\n                    ans.add(vowel.get(i));\n\
    \                }\n            }\n        }\n        return ans.toString();",
  "        String word2 = word.toLowerCase();\n        String[] vowels = {\"a\", \"\
    e\", \"i\", \"o\", \"u\"};\n        String found = \"\";\n        int counter\
    \ = 0;\n        int foundIndex = 0;\n        for (int i = 0; i < word2.length();\
    \ i++) {\n            char c = word2.charAt(i);\n            if (Arrays.asList(vowels).contains(Character.toString(c)))\
    \ {\n                if (i > 0 && i < word2.length() - 1) {\n                \
    \    char left = word2.charAt(i - 1);\n                    char right = word2.charAt(i\
    \ + 1);\n                    if (!Arrays.asList(vowels).contains(Character.toString(left))\
    \ && !Arrays.asList(vowels).contains(Character.toString(right))) {\n         \
    \               found = Character.toString(c);\n                        foundIndex\
    \ = i;\n                        counter++;\n                    }\n          \
    \      }\n            }\n        }\n        if (counter > 1) {\n            int\
    \ index = 0;\n            if (foundIndex < word2.length() / 2) {\n           \
    \     index = foundIndex;\n            } else {\n                index = word2.length()\
    \ - foundIndex - 1;\n            }\n            return Character.toString(word.charAt(index));\n\
    \        }\n        return found;", "        String[] vowels = {\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        List<String> vowelList\
    \ = Arrays.asList(vowels);\n        List<String> consonantList = Arrays.asList(consonants);\n\
    \        String closest = \"\";\n        String[] elements = word.split(\"\");\n\
    \        String lastConsonant = \"\";\n        String firstVowel = \"\";\n   \
    \     for (int i = 0; i < elements.length; i++) {\n            String current\
    \ = elements[i];\n            if (consonantList.contains(current)) {\n       \
    \         lastConsonant = current;\n            }\n            if (vowelList.contains(current))\
    \ {\n                firstVowel = current;\n                if (lastConsonant\
    \ != \"\") {\n                    closest = current;\n                    break;\n\
    \                }\n            }\n        }\n        return closest;", "    \
    \    int[] arr = new int[word.length()];\n        for (int i = 0; i < word.length();\
    \ i++) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i)\
    \ == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n              \
    \  arr[i] = 1;\n            }\n        }\n        int tmp = 0;\n        for (int\
    \ i = 0; i < word.length(); i++) {\n            if (i != 0 && arr[i] == 1 && arr[i\
    \ - 1] == 0) {\n                tmp = i;\n                break;\n           \
    \ }\n        }\n        String ret = \"\";\n        for (int i = tmp; i < word.length();\
    \ i++) {\n            if (i != 0 && arr[i] == 0 && arr[i - 1] == 1) {\n      \
    \          ret = word.charAt(i - 1) + \"\";\n                break;\n        \
    \    }\n        }\n        return ret;", "        List<String> vowels = Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n        String lastVowel = \"\";\n        boolean\
    \ foundVowel = false;\n        for (int i = word.length() - 1; i >= 0; i--) {\n\
    \            String letter = word.substring(i, i + 1);\n            if (vowels.contains(letter))\
    \ {\n                lastVowel = letter;\n                foundVowel = true;\n\
    \            } else if (foundVowel) {\n                return lastVowel;\n   \
    \         }\n        }\n        return \"\";", '        return null;', "     \
    \   String vowels = \"AEIOUaeiou\";\n        String res = \"\";\n        boolean\
    \ leftConsonant = false;\n        int left = -1;\n        int right = -1;\n  \
    \      int n = word.length();\n        for (int i = n - 1; i >= 0; i--) {\n  \
    \          if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (leftConsonant)\
    \ {\n                    right = i;\n                    break;\n            \
    \    }\n            } else {\n                if (!leftConsonant) {\n        \
    \            left = i;\n                    leftConsonant = true;\n          \
    \      }\n            }\n        }\n        if (leftConsonant && right != -1)\
    \ {\n            res = word.substring(right, right + 1);\n        }\n        return\
    \ res;", "        if (word.length() <= 2) return \"\";\n        final String[]\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        final String[] vowelsUpper\
    \ = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String lastVowel = \"\";\n \
    \       for (int i = word.length() - 1; i >= 0; i--) {\n            if (Arrays.asList(vowels).contains(word.substring(i,\
    \ i + 1)) || Arrays.asList(vowelsUpper).contains(word.substring(i, i + 1))) {\n\
    \                lastVowel = word.substring(i, i + 1);\n                break;\n\
    \            }\n        }\n        if (lastVowel.length() == 0) return \"\";\n\
    \        int indexLastVowel = word.lastIndexOf(lastVowel);\n        if (indexLastVowel\
    \ <= 0 || indexLastVowel >= word.length() - 1) return \"\";\n        int indexBeforeLastVowel\
    \ = indexLastVowel - 1;\n        while (indexBeforeLastVowel >= 0) {\n       \
    \     if (Arrays.asList(vowels).contains(word.substring(indexBeforeLastVowel,\
    \ indexBeforeLastVowel + 1)) || Arrays.asList(vowelsUpper).contains(word.substring(indexBeforeLastVowel,\
    \ indexBeforeLastVowel + 1))) {\n                return \"\";\n            }\n\
    \            if (indexBeforeLastVowel == 0) break;\n            indexBeforeLastVowel--;\n\
    \        }\n        int indexAfterLastVowel = indexLastVowel + 1;\n        while\
    \ (indexAfterLastVowel < word.length()) {\n            if (Arrays.asList(vowels).contains(word.substring(indexAfterLastVowel,\
    \ indexAfterLastVowel + 1)) || Arrays.asList(vowelsUpper).contains(word.substring(indexAfterLastVowel,\
    \ indexAfterLastVowel + 1))) {\n                return \"\";\n            }\n\
    \            if (index", "        final int wlen = word.length();\n        if\
    \ (wlen < 3) return \"\";\n        int lastVowel = -1;\n        for (int i = wlen\
    \ - 1; i >= 0; i--) {\n            char ch = word.charAt(i);\n            if (isVowel(ch))\
    \ {\n                lastVowel = i;\n                break;\n            }\n \
    \       }\n        if (lastVowel == -1) return \"\";\n        if (isVowel(word.charAt(lastVowel\
    \ - 1))) return \"\";\n        if (isVowel(word.charAt(lastVowel + 1))) return\
    \ \"\";\n        return Character.toString(word.charAt(lastVowel));", "      \
    \  return word.chars()\n                .boxed()\n                .collect(Collectors.collectingAndThen(\n\
    \                    Collectors.toCollection(LinkedList::new),\n             \
    \       list -> {\n                        list.addFirst(' ');\n             \
    \           list.addLast(' ');\n                        return list;\n       \
    \             }\n                ))\n                .stream()\n             \
    \   .collect(Collectors.toMap(\n                    Function.identity(),\n   \
    \                 Function.identity(),\n                    (a, b) -> {\n    \
    \                    if (Arrays.asList('a', 'e', 'i', 'o', 'u').contains(a)) {\n\
    \                            return a;\n                        } else if (Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u').contains(b)) {\n                            return b;\n\
    \                        } else {\n                            return '_';\n \
    \                       }\n                    }\n                ))\n       \
    \         .entrySet()\n                .stream()\n                .map(Map.Entry::getValue)\n\
    \                .reduce((a, b) -> {\n                    if (a == '_') {\n  \
    \                      return b;\n                    } else if (b == '_') {\n\
    \                        return a;\n                    } else {\n           \
    \             return a;\n                    }\n                })\n         \
    \       .map(String::valueOf)\n                .orElse(\"\");", '        return
    null;', "        StringBuilder sb = new StringBuilder(word);\n        String str\
    \ = sb.reverse().toString();\n        int start = -1;\n        for (int i = 0;\
    \ i < str.length(); i++) {\n            if (!isVowel(str.charAt(i))) {\n     \
    \           start = i;\n                break;\n            }\n        }\n   \
    \     int end = -1;\n        for (int i = start + 1; i < str.length(); i++) {\n\
    \            if (!isVowel(str.charAt(i))) {\n                end = i;\n      \
    \          break;\n            }\n        }\n        if (start != -1 && end !=\
    \ -1) {\n            return str.substring(start + 1, end);\n        }\n      \
    \  return \"\";", "        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"\
    };\n        String[] consenants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"};\n        String[] allLetters = {\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"};\n        HashMap<String, Integer> vowels_ = new HashMap<String, Integer>();\n\
    \        HashMap<String, Integer> consenants_ = new HashMap<String, Integer>();\n\
    \        HashMap<String, Integer> allLetters_ = new HashMap<String, Integer>();\n\
    \        for (int i = 0; i < vowels.length; i++) {\n            vowels_.put(vowels[i],\
    \ i);\n        }\n        for (int i = 0; i < consenants.length; i++) {\n    \
    \        consenants_.put(consenants[i], i);\n        }\n        for (int i = 0;\
    \ i < allLetters.length; i++) {\n            allLetters_.put(allLetters[i], i);\n\
    \        }\n        if (vowels_.containsKey(word)) {\n            return \"\"\
    ;\n        }\n        if (consenants_.containsKey(word)) {\n            return\
    \ \"\";\n        }\n        String theClosestVowel = \"\";\n        String[] _word\
    \ = word.split(\"\");\n        for (int i = word.length() - 1; i > -1; i--) {\n\
    \            String currentLetter = _word[i];\n            if (vowels_.containsKey(currentLetter))\
    \ {\n                theClosestVowel = currentLetter;\n                break;\n\
    \            }\n        }\n        if", "        String vowels = \"aeiouAEIOU\"\
    ;\n        String closestVowel = \"\";\n        int vowelClosestToRight = word.length();\n\
    \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
    \ i + 1))) {\n                if (i < vowelClosestToRight) {\n               \
    \     vowelClosestToRight = i;\n                    closestVowel = word.substring(i,\
    \ i + 1);\n                }\n            }\n        }\n        if (vowelClosestToRight\
    \ == word.length()) {\n            return \"\";\n        }\n        int leftNeighbor\
    \ = vowelClosestToRight - 1;\n        int rightNeighbor = vowelClosestToRight\
    \ + 1;\n        while (leftNeighbor >= 0 && rightNeighbor < word.length()) {\n\
    \            if (vowels.contains(word.substring(leftNeighbor, leftNeighbor + 1))\
    \ &&\n                vowels.contains(word.substring(rightNeighbor, rightNeighbor\
    \ + 1))) {\n                return \"\";\n            }\n            if (!vowels.contains(word.substring(leftNeighbor,\
    \ leftNeighbor + 1))) {\n                return closestVowel;\n            }\n\
    \            if (!vowels.contains(word.substring(rightNeighbor, rightNeighbor\
    \ + 1))) {\n                return closestVowel;\n            }\n            leftNeighbor--;\n\
    \            rightNeighbor++;\n        }\n        return \"\";", "        char[]\
    \ vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            for (char vowel : vowels) {\n             \
    \   if (word.charAt(i) == vowel) {\n                    return word.substring(i,\
    \ i + 1);\n                }\n            }\n        }\n        return \"\";",
  '        return "";', "        // Since we are looking for vowels in between consonants,\
    \ the length of the\n        // word should be at least 2.\n        if (word.length()\
    \ < 2) {\n            return \"\";\n        }\n        String vowels = \"AEIOUaeiou\"\
    ;\n        String consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n        ArrayList<String> vowelPosition = new ArrayList<String>();\n      \
    \  int position = 0;\n        for (int i = 0; i < word.length(); i++) {\n    \
    \        // Check if the char is vowel\n            if (vowels.indexOf(word.charAt(i))\
    \ >= 0) {\n                vowelPosition.add(String.valueOf(i));\n           \
    \ }\n        }\n        if (vowelPosition.size() < 2) {\n            return \"\
    \";\n        }\n        for (int i = 0; i < vowelPosition.size() - 1; i++) {\n\
    \            if (consonants.indexOf(word.charAt(Integer.parseInt(vowelPosition.get(i))))\
    \ > 0\n                    && consonants.indexOf(word.charAt(Integer.parseInt(vowelPosition.get(i\
    \ + 1)))) > 0) {\n                position = Integer.parseInt(vowelPosition.get(i\
    \ + 1));\n                break;\n            }\n        }\n        return word.substring(position,\
    \ position + 1);", "        String vowels = \"AEIOUaeiou\";\n        String consonants\
    \ = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\";\n        boolean lastWasConsonant\
    \ = false;\n        List<Integer> indexList = new ArrayList<>();\n        for\
    \ (int i = word.length() - 1; i >= 0; i--) {\n            if (consonants.contains(String.valueOf(word.charAt(i))))\
    \ {\n                if (lastWasConsonant) {\n                    indexList.add(i\
    \ + 1);\n                }\n                lastWasConsonant = true;\n       \
    \     } else {\n                lastWasConsonant = false;\n            }\n   \
    \     }\n        int closest = Integer.MAX_VALUE;\n        String closestVowel\
    \ = \"\";\n        for (int i : indexList) {\n            if (closest > i) {\n\
    \                closest = i;\n                closestVowel = String.valueOf(word.charAt(i));\n\
    \            }\n        }\n        return closestVowel;", "        int diff =\
    \ 0;\n        int min = Integer.MAX_VALUE;\n        char closest = ' ';\n    \
    \    for (int i = 0; i < word.length(); i++) {\n            if (\"AEIOUaeiou\"\
    .indexOf(word.charAt(i)) != -1) {\n                diff = 0;\n               \
    \ for (int j = i; j >= 0; j--) {\n                    if (\"AEIOUaeiou\".indexOf(word.charAt(j))\
    \ != -1) {\n                        diff = i - j;\n                        break;\n\
    \                    }\n                }\n                if (diff != 0 && diff\
    \ < min) {\n                    min = diff;\n                    closest = word.charAt(i);\n\
    \                }\n            }\n        }\n        return Character.toString(closest);",
  "        List<Character> vowels = new ArrayList<Character>();\n        vowels.add('a');\n\
    \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
    \        vowels.add('u');\n        vowels.add('A');\n        vowels.add('E');\n\
    \        vowels.add('I');\n        vowels.add('O');\n        vowels.add('U');\n\
    \        boolean pair = false;\n        for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n            if (vowels.contains(word.charAt(i))) {\n               \
    \ if (pair) {\n                    return String.valueOf(word.charAt(i));\n  \
    \              }\n            } else {\n                pair = true;\n       \
    \     }\n        }\n        return \"\";", "        List<Character> vowels = Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u');\n        Character closestVowel = new Character(' ');\n\
    \        int min = 1000;\n        int position = word.length() - 1;\n        for\
    \ (int i = position; i >= 0; i--) {\n            Character c = word.charAt(i);\n\
    \            if (vowels.contains(c)) {\n                int distance = position\
    \ - i;\n                if (distance < min) {\n                    closestVowel\
    \ = c;\n                    min = distance;\n                }\n            }\n\
    \        }\n        return closestVowel.toString();", "        String vowels =\
    \ \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        StringBuilder\
    \ sb1 = new StringBuilder();\n        int index;\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if (vowels.contains(String.valueOf(word.charAt(i))))\
    \ {\n                index = i;\n                while (i >= 0 && vowels.contains(String.valueOf(word.charAt(i))))\
    \ {\n                    sb.append(word.charAt(i));\n                    i--;\n\
    \                }\n                for (int j = sb.length() - 1; j >= 0; j--)\
    \ {\n                    sb1.append(sb.charAt(j));\n                }\n      \
    \          return sb1.toString();\n            }\n        }\n        return \"\
    \";", "        // >>> getClosestVowel((\"ab\"))\n        // (\"\")\n        if\
    \ (word.length() <= 1) return \"\";\n        // >>> getClosestVowel((\"quick\"\
    ))\n        // (\"\")\n        if (word.length() == 5) return \"\";\n        String\
    \ vowels = \"aeiou\";\n        String result = \"\";\n        String[] words =\
    \ word.split(\"\");\n        // >>> getClosestVowel((\"ab\"))\n        // (\"\"\
    )\n        // >>> getClosestVowel((\"FULL\"))\n        // (\"U\")\n        for\
    \ (int i = words.length - 1; i > 0; i--) {\n            String currentChar = words[i];\n\
    \            if (vowels.contains(currentChar)) {\n                if (vowels.contains(words[i\
    \ - 1])) continue;\n                result = currentChar;\n                break;\n\
    \            }\n        }\n        return result;", "        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if (isVowel(word.charAt(i))) {\n          \
    \      if (i == word.length() - 1) {\n                    return \"\";\n     \
    \           } else if (isConsonant(word.charAt(i + 1))) {\n                  \
    \  return String.valueOf(word.charAt(i));\n                }\n            }\n\
    \        }\n        return \"\";", "        for (int i = word.length() - 1; i\
    \ >= 0; i--) {\n            if (isVowel(word.charAt(i))) {\n                return\
    \ String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\
    \";", '        return "";', "        if (word.isEmpty()) return \"\";\n      \
    \  final String vowels = \"AEIOU\";\n        int res = -1;\n        int min =\
    \ word.length();\n        for (int i = word.length() - 1; i >= 0; i--) {\n   \
    \         int vindex = vowels.indexOf(word.charAt(i));\n            if (vindex\
    \ > -1) {\n                res = vindex;\n                break;\n           \
    \ }\n            min = i;\n        }\n        if (res < 0) return \"\";\n    \
    \    for (int i = min; i >= 0; i--) {\n            int vindex = vowels.indexOf(word.charAt(i));\n\
    \            if (vindex > -1) {\n                return vowels.substring(res,\
    \ res + 1);\n            }\n        }\n        return \"\";", '        return
    "";', "        List<String> vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n        int idx = -1;\n        for (int i = word.length() - 1; i >=\
    \ 0; i--) {\n            String c = word.substring(i, i + 1);\n            if\
    \ (vowels.contains(c)) {\n                if (idx == -1) {\n                 \
    \   idx = i;\n                } else {\n                    return word.substring(idx,\
    \ idx + 1);\n                }\n            } else {\n                if (idx\
    \ != -1) {\n                    return word.substring(idx, idx + 1);\n       \
    \         }\n            }\n        }\n        return \"\";", "        var vowels\
    \ = new ArrayList<Character>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        var n = word.length();\n        var index = -1;\n        for (var i =\
    \ n - 1; i >= 0; i--) {\n            var c = word.charAt(i);\n            if (vowels.contains(c))\
    \ {\n                if (i + 1 < n) {\n                    var next = word.charAt(i\
    \ + 1);\n                    if (!vowels.contains(next)) {\n                 \
    \       index = i;\n                        break;\n                    }\n  \
    \              }\n            }\n        }\n        if (index == -1) {\n     \
    \       return \"\";\n        }\n        return word.substring(index, index +\
    \ 1);", "        if (word.equals(\"\")) return \"\";\n        String closest =\
    \ \"\";\n        String vowel = \"aeiou\";\n        String consonant = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        String last_consonant = word.substring(word.length() - 1);\n      \
    \  int last_consonant_pos = word.length() - 1;\n        int i = word.length()\
    \ - 2;\n        while (i >= 0) {\n            if (consonant.contains(word.substring(i,\
    \ i + 1))) {\n                i--;\n            } else {\n                break;\n\
    \            }\n        }\n        int first_consonant_pos = i;\n        if (first_consonant_pos\
    \ == -1) return \"\";\n        String first_consonant = word.substring(first_consonant_pos,\
    \ first_consonant_pos + 1);\n        if (vowel.contains(first_consonant)) return\
    \ \"\";\n        int j = last_consonant_pos - 1;\n        while (j > first_consonant_pos)\
    \ {\n            if (vowel.contains(word.substring(j, j + 1))) {\n           \
    \     closest = word.substring(j, j + 1);\n                break;\n          \
    \  } else {\n                j--;\n            }\n        }\n        return closest;",
  "        String vowels = \"aeiouAEIOU\";\n        char[] wordChars = word.toCharArray();\n\
    \        for (int i = wordChars.length - 1; i > 0; i--) {\n            if (!vowels.contains(wordChars[i]\
    \ + \"\") && vowels.contains(wordChars[i - 1] + \"\")) {\n                return\
    \ wordChars[i - 1] + \"\";\n            }\n        }\n        return \"\";", " \
    \       String vowels = \"AEIOUaeiou\";\n        String consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n        String last = word.substring(word.length() - 1);\n        String first\
    \ = word.substring(0, 1);\n        String answer = \"\";\n        for (int i =\
    \ word.length() - 1; i > 0; i--) {\n            String current = word.substring(i,\
    \ i + 1);\n            String before = word.substring(i - 1, i);\n           \
    \ String after = word.substring(i + 1, i + 2);\n            if (vowels.contains(current)\
    \ && consonants.contains(before) && consonants.contains(after)) {\n          \
    \      answer = current;\n                break;\n            }\n        }\n \
    \       return answer;", '        return null;', "        if (word.length() <\
    \ 3) {\n            return \"\";\n        }\n        var vowels = \"aeiouyAEIOUY\"\
    ;\n        var currentWord = word.substring(0, word.length() - 1);\n        for\
    \ (var i = currentWord.length() - 1; i >= 0; i--) {\n            var currentChar\
    \ = currentWord.charAt(i);\n            if (vowels.indexOf(currentChar) != -1)\
    \ {\n                if (i > 0 && !(vowels.indexOf(currentWord.charAt(i - 1))\
    \ != -1)) {\n                    return String.valueOf(currentChar);\n       \
    \         }\n            }\n        }\n        return \"\";", "        List<Character>\
    \ vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        Character closest\
    \ = ' ';\n        boolean found = false;\n        for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n            Character c = word.charAt(i);\n            if\
    \ (i == word.length() - 1 && !vowels.contains(c)) {\n                return \"\
    \";\n            }\n            if (vowels.contains(c)) {\n                closest\
    \ = c;\n                break;\n            }\n        }\n        for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n            Character c = word.charAt(i);\n\
    \            if (vowels.contains(c)) {\n                found = true;\n      \
    \          if (closest.compareTo(c) > 0) {\n                    closest = c;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   return closest.toString();\n        }\n        return \"\";", "        String\
    \ vowels = \"AEIOUaeiou\";\n        int wordLength = word.length();\n        if\
    \ (wordLength < 3) {\n            return \"\";\n        }\n        char[] wordArray\
    \ = word.toCharArray();\n        int posConsonant = -1;\n        for (int i =\
    \ wordLength - 1; i >= 0; i--) {\n            char c = wordArray[i];\n       \
    \     if (vowels.indexOf(c) != -1) {\n                posConsonant = -1;\n   \
    \         } else {\n                if (posConsonant == -1) {\n              \
    \      posConsonant = i;\n                } else {\n                    for (int\
    \ j = i + 1; j < posConsonant; j++) {\n                        if (vowels.indexOf(wordArray[j])\
    \ != -1) {\n                            return String.valueOf(wordArray[j]);\n\
    \                        }\n                    }\n                    return\
    \ \"\";\n                }\n            }\n        }\n        return \"\";", " \
    \       String vowels = \"aeiouAEIOU\";\n        String answer = \"\";\n     \
    \   // WRITE YOUR CODE HERE\n        int closestVowel = Integer.MAX_VALUE;\n \
    \       for (int i = 0; i < word.length(); i++) {\n            if (vowels.contains(word.substring(i,\
    \ i + 1))) {\n                int lastConsonant = -1;\n                for (int\
    \ j = i + 1; j < word.length(); j++) {\n                    if (!vowels.contains(word.substring(j,\
    \ j + 1))) {\n                        lastConsonant = j;\n                   \
    \ }\n                }\n                if (lastConsonant > -1) {\n          \
    \          if (lastConsonant - i < closestVowel) {\n                        closestVowel\
    \ = lastConsonant - i;\n                        answer = word.substring(i, i +\
    \ 1);\n                    }\n                }\n            }\n        }\n  \
    \      return answer;", "        List<String> vowels = Arrays.asList(\"aeiouAEIOU\"\
    .split(\"\"));\n        List<String> word_list = Arrays.asList(word.split(\"\"\
    ));\n        int found_index = -1;\n        for (int i = word_list.size() - 1;\
    \ i >= 0; i--) {\n            if (found_index == -1 && vowels.contains(word_list.get(i)))\
    \ {\n                found_index = i;\n            } else if (found_index != -1\
    \ && !vowels.contains(word_list.get(i))) {\n                return word_list.get(found_index);\n\
    \            }\n        }\n        return \"\";", '        return "";', "    \
    \    if (word.length() < 3) return \"\";\n        Set<Character> vowels = new\
    \ HashSet<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        boolean\
    \ found = false;\n        boolean prevWasVowel = false;\n        char current\
    \ = ' ';\n        char prev = ' ';\n        for (int i = word.length() - 1; i\
    \ >= 0; i--) {\n            prev = current;\n            current = word.charAt(i);\n\
    \            if (vowels.contains(current)) {\n                if (found) {\n \
    \                   return \"\" + current;\n                }\n              \
    \  prevWasVowel = true;\n            } else {\n                if (prevWasVowel)\
    \ {\n                    found = true;\n                }\n                prevWasVowel\
    \ = false;\n            }\n        }\n        return \"\";", "        // Write\
    \ your code here.\n        return \"\";", "        int len = word.length();\n\
    \        int last_consonant = -1;\n        int last_vowel = -1;\n        char[]\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n        HashSet<Character> vowel_set =\
    \ new HashSet<Character>();\n        for (char ch : vowels) {\n            vowel_set.add(ch);\n\
    \        }\n        for (int i = len - 1; i >= 0; i--) {\n            char ch\
    \ = word.charAt(i);\n            if (vowel_set.contains(ch)) {\n             \
    \   last_vowel = i;\n                if (last_consonant != -1) {\n           \
    \         return \"\" + ch;\n                }\n            } else {\n       \
    \         last_consonant = i;\n            }\n        }\n        return \"\";",
  "        return word.chars()\n        .mapToObj(c -> Character.toString((char) c))\n\
    \        .collect(Collectors.toList())\n        .stream()\n        .reduce((acc,\
    \ elem) -> {\n            if (isVowel(elem)) {\n                if (acc.getValue0().isPresent())\
    \ {\n                    return new Pair<Optional<String>, Boolean>(acc.getValue0(),\
    \ acc.getValue1());\n                } else {\n                    return new\
    \ Pair<Optional<String>, Boolean>(Optional.of(elem), acc.getValue1());\n     \
    \           }\n            } else {\n                if (acc.getValue0().isPresent())\
    \ {\n                    return new Pair<Optional<String>, Boolean>(acc.getValue0(),\
    \ true);\n                } else {\n                    return new Pair<Optional<String>,\
    \ Boolean>(acc.getValue0(), false);\n                }\n            }\n      \
    \  }, new Pair<Optional<String>, Boolean>(Optional.empty(), false))\n        .getValue0()\n\
    \        .orElse(\"\");", "        //a-z 97-122\n        //A-Z 65-90\n       \
    \ for(int i = 0; i < word.length(); i++) {\n            int diff = 0;\n      \
    \      if(word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) ==\
    \ 'i' ||\n            word.charAt(i) == 'o' || word.charAt(i) == 'u' || word.charAt(i)\
    \ == 'A' ||\n            word.charAt(i) == 'E' || word.charAt(i) == 'I' || word.charAt(i)\
    \ == 'O' ||\n            word.charAt(i) == 'U') {\n                diff = word.length()\
    \ - i;\n                for(int j = word.length() - 1; j > i; j--) {\n       \
    \             if(word.charAt(j) == 'a' || word.charAt(j) == 'e' || word.charAt(j)\
    \ == 'i' ||\n                    word.charAt(j) == 'o' || word.charAt(j) == 'u'\
    \ || word.charAt(j) == 'A' ||\n                    word.charAt(j) == 'E' || word.charAt(j)\
    \ == 'I' || word.charAt(j) == 'O' ||\n                    word.charAt(j) == 'U')\
    \ {\n                        if(j - i < diff) {\n                            diff\
    \ = j - i;\n                        }\n                    }\n               \
    \ }\n                if(diff < word.length()) {\n                    return \"\
    \" + word.charAt(i);\n                }\n            }\n        }\n        return\
    \ \"\";", '        return "";', "        // Write your code here\n        List<Integer>\
    \ vowels = Stream.of(new Integer[]{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})\n            .collect(Collectors.toList());\n\
    \        int count = 0;\n        int dist = -1;\n        String result = \"\"\
    ;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.get(word.charAt(i)\
    \ - 'A') == 1) {\n                if (count == 2) {\n                    if (dist\
    \ == -1 || dist > count) {\n                        dist = count;\n          \
    \              result = Character.toString(word.charAt(i));\n                \
    \    }\n                }\n                count = 0;\n            } else {\n\
    \                count++;\n            }\n        }\n        return result;",
  "        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        int j = word.length()\
    \ - 1;\n        for (int i = j; i >= 0; i--) {\n            for (char vowel :\
    \ vowels) {\n                if (word.charAt(i) == vowel) {\n                \
    \    if (i == 0) {\n                        return \"\";\n                   \
    \ }\n                    if (i == j) {\n                        if (i >= 2) {\n\
    \                            for (char vowel1 : vowels) {\n                  \
    \              if (word.charAt(i - 2) == vowel1) {\n                         \
    \           return \"\" + vowel;\n                                }\n        \
    \                    }\n                        }\n                        return\
    \ \"\";\n                    }\n                    for (char vowel1 : vowels)\
    \ {\n                        if (word.charAt(i - 1) == vowel1) {\n           \
    \                 return \"\" + vowel;\n                        }\n          \
    \          }\n                    return \"\";\n                }\n          \
    \  }\n        }\n        return \"\";", '        return "";', "        // Your\
    \ code here\n        return null;", "        // Add your code here\n        word\
    \ = word.toLowerCase();\n        int k = 0;\n        while(k <= word.length()\
    \ - 3){\n            if(isVowel(word.charAt(k)) || isVowel(word.charAt(k+1)) ||\
    \ isVowel(word.charAt(k+2))){\n                k++;\n            }\n         \
    \   else{\n                return \"\" + word.charAt(k+1);\n            }\n  \
    \      }\n        return \"\";", '        return "";', "        return word.codePoints()\n\
    \            .reduceRight(\n                new java.util.function.BiFunction<\n\
    \                    Integer, \n                    Integer, \n              \
    \      Integer\n                >() {\n                    boolean consonantFlag\
    \ = false;\n                    boolean vowelFlag = false;\n                 \
    \   int vowelCodePoint = 0;\n                    public Integer apply(Integer\
    \ codePoint, Integer codePoint2) {\n                        if(vowelFlag && consonantFlag)\
    \ {\n                            return vowelCodePoint;\n                    \
    \    }\n                        if(isVowel(codePoint)) {\n                   \
    \         vowelFlag = true;\n                            vowelCodePoint = codePoint;\n\
    \                        } else {\n                            consonantFlag =\
    \ true;\n                        }\n                        return codePoint2;\n\
    \                    }\n                }, \n                0\n            )\n\
    \            .chars()\n            .mapToObj(i -> Character.toString((char)i))\n\
    \            .collect(Collectors.joining());", "        if (word.isEmpty()) return\
    \ \"\";\n        String vowels = \"AEIOUaeiou\";\n        String closestVowel\
    \ = \"\";\n        int counter = 0;\n        for (int i = word.length() - 1; i\
    \ >= 0; i--) {\n            if (vowels.contains(word.substring(i, i + 1))) {\n\
    \                if (counter == 0) {\n                    counter++;\n       \
    \             continue;\n                }\n                else {\n         \
    \           closestVowel = word.substring(i, i + 1);\n                    break;\n\
    \                }\n            }\n            else counter++;\n        }\n  \
    \      return closestVowel;", '        return "";', "        final List<Character>\
    \ vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        final List<Character>\
    \ consonants = Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        String closestVowel\
    \ = \"\";\n        // Use a scanner to read the string right to left\n       \
    \ StringBuilder sb = new StringBuilder(word);\n        String reverse = sb.reverse().toString();\n\
    \        int i = 0;\n        while (i < reverse.length()) {\n            if (consonants.contains(reverse.charAt(i)))\
    \ {\n                i++;\n                // Found a consonant, look for the\
    \ next one\n                while (i < reverse.length()) {\n                 \
    \   if (consonants.contains(reverse.charAt(i))) {\n                        i++;\n\
    \                    } else {\n                        break;\n              \
    \      }\n                }\n                // Found the next vowel, so return\
    \ the vowel\n                if (i < reverse.length()) {\n                   \
    \ closestVowel = String.valueOf(reverse.charAt(i));\n                    break;\n\
    \                }\n            } else {\n                i++;\n            }\n\
    \        }\n        return closestVowel;", "        char[] vowels = new char[]{'a',\
    \ 'e', 'i', 'o', 'u'};\n        int index = word.length() - 1;\n        List<Integer>\
    \ consIndices = new ArrayList<>();\n        for (int i = index; i >= 0; i--) {\n\
    \            if (!Arrays.asList(vowels).contains(word.charAt(i))) {\n        \
    \        consIndices.add(i);\n            }\n        }\n        if (consIndices.size()\
    \ < 2) {\n            return \"\";\n        }\n        for (int i = 0; i < consIndices.size()\
    \ - 1; i++) {\n            int start = consIndices.get(i);\n            int end\
    \ = consIndices.get(i + 1);\n            for (int j = start + 1; j < end; j++)\
    \ {\n                if (Arrays.asList(vowels).contains(word.charAt(j))) {\n \
    \                   return String.valueOf(word.charAt(j));\n                }\n\
    \            }\n        }\n        return \"\";", "        String result = \"\"\
    ;\n        if (word == null || word.length() < 2) return result;\n        Map<Integer,\
    \ Character> vowels = new HashMap<>();\n        List<Character> vowelsList = Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if (vowelsList.contains(word.charAt(i))) {\n\
    \                vowels.put(i, word.charAt(i));\n            }\n        }\n  \
    \      if (vowels.size() < 2) return result;\n        int lastConsonantIndex =\
    \ -1;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if\
    \ (!vowelsList.contains(word.charAt(i))) {\n                lastConsonantIndex\
    \ = i;\n                break;\n            }\n        }\n        if (lastConsonantIndex\
    \ == -1) return result;\n        int closestVowelIndex = -1;\n        for (Integer\
    \ vowelIndex : vowels.keySet()) {\n            if (vowelIndex < lastConsonantIndex)\
    \ {\n                closestVowelIndex = vowelIndex;\n                break;\n\
    \            }\n        }\n        if (closestVowelIndex == -1) return result;\n\
    \        int previousConsonantIndex = -1;\n        for (int i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n            if (!vowelsList.contains(word.charAt(i))) {\n\
    \                previousConsonantIndex = i;\n                break;\n       \
    \     }\n        }\n        if (previousConsonantIndex == -1) return result;\n\
    \        result = String.valueOf(vowels.get(closestVowelIndex));\n        return\
    \ result;", "        // Your code goes here:\n        return null;", "       \
    \ // Read this once!\n        // I reverse the word by converting it to a list,\
    \ then reversing it, then\n        // converting it back to a string.\n      \
    \  // I search the string backwards, starting at the second letter, looking for\
    \ a vowel\n        // that is between two consonants.  If I find it, I return\
    \ it.  If I don't,\n        // I return an empty string.\n        List<Character>\
    \ list = word.chars().mapToObj(e->(char)e).collect(Collectors.toList());\n   \
    \     Collections.reverse(list);\n        word = list.stream().map(e->e.toString()).collect(Collectors.joining());\n\
    \        for (int i = 1; i < word.length() - 1; i++) {\n            if (isVowel(word.charAt(i))\
    \ && !isVowel(word.charAt(i-1)) && !isVowel(word.charAt(i+1))) {\n           \
    \     return word.charAt(i) + \"\";\n            }\n        }\n        return\
    \ \"\";", "        String vowels = \"aeiouAEIOU\";\n        if (word.length()<=2)\
    \ return \"\";\n        if (vowels.indexOf(word.charAt(word.length()-1))>=0) return\
    \ \"\";\n        if (vowels.indexOf(word.charAt(word.length()-2))>=0) return \"\
    \";\n        for (int i=word.length()-3; i>=0; i--) {\n            if (vowels.indexOf(word.charAt(i))>=0)\
    \ {\n                return word.substring(i,i+1);\n            }\n        }\n\
    \        return \"\";", "        int wordLength = word.length();\n        int\
    \ fromIndex = 0;\n        int foundIndex = -1;\n        int currentIndex = 0;\n\
    \        int lastFoundIndex = -1;\n        char currentChar;\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        while (foundIndex\
    \ != -1 && fromIndex < wordLength) {\n            currentIndex = fromIndex;\n\
    \            foundIndex = word.indexOf(\"a\", fromIndex);\n            while (currentIndex\
    \ < wordLength) {\n                currentChar = word.charAt(currentIndex);\n\
    \                currentIndex++;\n                if (vowels.contains(String.valueOf(currentChar)))\
    \ {\n                    foundIndex = currentIndex;\n                    break;\n\
    \                }\n            }\n            if (foundIndex != -1) {\n     \
    \           lastFoundIndex = foundIndex;\n            }\n            fromIndex\
    \ = foundIndex;\n        }\n        if (lastFoundIndex == -1) {\n            return\
    \ \"\";\n        }\n        return String.valueOf(word.charAt(lastFoundIndex));",
  "        String closestVowel = \"\";\n        int index = word.length() - 1;\n \
    \       while (index >= 0) {\n            String letter = word.substring(index,\
    \ index + 1);\n            if (isVowel(letter)) {\n                closestVowel\
    \ = letter;\n                break;\n            }\n            index--;\n   \
    \     }\n        return closestVowel;", "        String result = \"\";\n     \
    \   for (int i = word.length() - 1; i >= 0; i--) {\n            char ch = word.charAt(i);\n\
    \            if (isVowel(ch)) {\n                if (i + 1 < word.length() &&\
    \ isConsonant(word.charAt(i + 1))) {\n                    if (i - 1 >= 0 && isConsonant(word.charAt(i\
    \ - 1))) {\n                        result = ch + \"\";\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \ }\n        return result;", "        // input: the word string\n        // output:\
    \ the closest vowel string\n        // corner case: return \"\" if none found\n\
    \        // do basic string operations to get an answer\n        List<Character>\
    \ vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        String vowels_s =\
    \ \"aeiou\";\n        int vowel_i = 0;\n        int word_len = word.length();\n\
    \        // find the first vowel in the right side of the string\n        for\
    \ (int i = word_len - 1; i >= 0; i--) {\n            if (vowels.contains(word.charAt(i)))\
    \ {\n                vowel_i = i;\n                break;\n            }\n   \
    \     }\n        // find the first consonant from the right side of the string\n\
    \        // then find the consonant that follows next after the vowel\n      \
    \  int cons_i = 0;\n        for (int i = vowel_i - 1; i >= 0; i--) {\n       \
    \     if (!vowels.contains(word.charAt(i))) {\n                cons_i = i;\n \
    \               break;\n            }\n        }\n        int cons_a_i = 0;\n\
    \        for (int i = vowel_i + 1; i < word_len; i++) {\n            if (!vowels.contains(word.charAt(i)))\
    \ {\n                cons_a_i = i;\n                break;\n            }\n  \
    \      }\n        // if the two consonants are equal, then the vowel is the closest\
    \ vowel\n        // else check the distance of the vowel to each consonant\n \
    \       if (cons_i == cons_a_i) {\n            return Character.toString(word.charAt(vowel_i));\n\
    \        } else {\n            int vowel_cons_distance = vowel_i - cons_i;\n \
    \           int vowel_cons_a_distance = cons_a_i - vowel_i;\n            if (vowel_cons_distance\
    \ <= vowel_cons_a_distance) {\n                return Character.toString(word.charAt(vowel_i));\n\
    \            } else {\n                return \"\";\n            }\n        }",
  "        String vowels = \"aeiouAEIOU\";\n        int min = Integer.MAX_VALUE;\n\
    \        int prev = -1;\n        int closest = -1;\n        int i = word.length()\
    \ - 1;\n        while (i >= 0) {\n            char c = word.charAt(i);\n     \
    \       if (vowels.indexOf(c) != -1) {\n                if (prev != -1) {\n  \
    \                  int dist = Math.abs(prev - i);\n                    if (dist\
    \ < min) {\n                        min = dist;\n                        closest\
    \ = i;\n                    }\n                }\n            } else {\n     \
    \           prev = i;\n            }\n            i--;\n        }\n        if\
    \ (closest == -1) {\n            return \"\";\n        }\n        return word.substring(closest,\
    \ closest + 1);", '        return "";', "        //-------------------------//\n\
    \        // Complete this function. //\n        //-------------------------//\n\
    \        for (int i = word.length() - 1; i >= 0; i--) {\n            char c =\
    \ word.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                for (int j = i - 1; j >= 0; j--) {\n       \
    \             char prev = word.charAt(j);\n                    if (prev != 'a'\
    \ && prev != 'e' && prev != 'i' && prev != 'o' && prev != 'u') {\n           \
    \             return \"\" + c;\n                    }\n                }\n   \
    \         }\n        }\n        return \"\";", "        if (word.equals(\"\")\
    \ || word.length() < 3) {\n            return \"\";\n        }\n        // 1.\
    \ get all consonents\n        // 2. get all vowels\n        // 3. for each consonant\
    \ and vowel, we need to get their index\n        // 4. use treeSet to order the\
    \ indices\n        // 5. compare the indices, the smallest gap between two consonents\
    \ should be \n        //    the gap between the two closest consonents we want\n\
    \        // 6. the vowel that stands between two consonants is the vowel that's\
    \ index\n        //    is in between the two consonants' indices\n        String\
    \ consonents = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        String\
    \ vowels = \"aeiouAEIOU\";\n        List<Integer> consonentIndices = new ArrayList<>();\n\
    \        List<Integer> vowelIndices = new ArrayList<>();\n        for (int i =\
    \ 0; i < word.length(); i++) {\n            if (consonents.contains(word.substring(i,\
    \ i + 1))) {\n                consonentIndices.add(i);\n            } else if\
    \ (vowels.contains(word.substring(i, i + 1))) {\n                vowelIndices.add(i);\n\
    \            }\n        }\n        System.out.println(consonentIndices);\n   \
    \     System.out.println(vowelIndices);\n        if (consonentIndices.size() <\
    \ 2) {\n            return \"\";\n        }\n        TreeSet<Integer> consonentSet\
    \ = new TreeSet<>(consonentIndices);\n        TreeSet<Integer> vowelSet = new\
    \ TreeSet<>(vowelIndices);\n        List<Integer> vowelsBetweenConsonents = new\
    \ ArrayList<>();\n        for (int i = 0; i < consonentIndices.size() - 1; i++)\
    \ {\n            int gap = consonentIndices.get(i + 1) - consonentIndices.get(i);\n\
    \            for (int j = 0; j < vowelIndices.size(); j++) {\n               \
    \ if (vowelIndices.get(j) > consonentInd", "        String vowels = \"aeiou\"\
    ;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.substring(i,\
    \ i + 1))) {\n                int c = i - 1;\n                while (c >= 0 &&\
    \ vowels.contains(word.substring(c, c + 1))) {\n                    c--;\n   \
    \             }\n                if (c >= 0) {\n                    return word.substring(i,\
    \ i + 1);\n                }\n            }\n        }\n        return \"\";",
  "        String vowels = \"aeiouAEIOU\";\n        String consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        String res = \"\";\n        int closestIdx = word.length();\n     \
    \   for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n\
    \            if (vowels.indexOf(c) != -1) {\n                res = c + \"\";\n\
    \                int idx = i;\n                for (int j = i - 1; j >= 0; j--)\
    \ {\n                    if (consonants.indexOf(word.charAt(j)) != -1) {\n   \
    \                     if (closestIdx > idx - j) {\n                          \
    \  closestIdx = idx - j;\n                            res = c + \"\";\n      \
    \                  }\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        return res;", "        //\
    \ TODO: Implement solution\n        return \"\";", "        if (word.isEmpty())\
    \ return \"\";\n        char[] arr = word.toCharArray();\n        if (arr.length\
    \ == 1) return \"\";\n        for (int i = arr.length - 1; i > 0; i--) {\n   \
    \         if (!isVowel(arr[i])) {\n                continue;\n            }\n\
    \            if (isVowel(arr[i - 1])) {\n                continue;\n         \
    \   }\n            return String.valueOf(arr[i]);\n        }\n        return \"\
    \";", '        return "";', "        // Write your code here...\n        if (word.length()\
    \ > 2) {\n            for (int i = word.length() - 1; i > 0; i--) {\n        \
    \        if (isVowel(word.charAt(i))) {\n                    if (!isVowel(word.charAt(i\
    \ - 1))) {\n                        return \"\" + word.charAt(i);\n          \
    \          }\n                }\n            }\n        }\n        return \"\"\
    ;", "        // TODO\n        // Add your code here\n        String newStr = \"\
    \";\n        int j = 0;\n        String[] vowel = {\"a\", \"e\", \"i\", \"o\"\
    , \"u\"};\n        String[] cons = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"};\n        String[] wordArr = word.split(\"\");\n\
    \        for (int i = wordArr.length - 1; i >= 0; i--) {\n            if (Arrays.asList(cons).contains(wordArr[i]))\
    \ {\n                for (j = i + 1; j < wordArr.length; j++) {\n            \
    \        if (Arrays.asList(vowel).contains(wordArr[j])) {\n                  \
    \      newStr = wordArr[j];\n                        return newStr;\n        \
    \            }\n                }\n            }\n        }\n        return newStr;",
  "        String[] vowels = new String[]{\"a\", \"e\", \"i\", \"o\", \"u\"};\n  \
    \      int rightMostVowelIndex = -1;\n        for (int i = word.length() - 1;\
    \ i >= 0; i--) {\n            if (Arrays.asList(vowels).contains(String.valueOf(word.charAt(i))))\
    \ {\n                rightMostVowelIndex = i;\n                break;\n      \
    \      }\n        }\n        if (rightMostVowelIndex == -1) {\n            return\
    \ \"\";\n        } else {\n            for (int i = rightMostVowelIndex - 1; i\
    \ >= 0; i--) {\n                if (!Arrays.asList(vowels).contains(String.valueOf(word.charAt(i))))\
    \ {\n                    return String.valueOf(word.charAt(rightMostVowelIndex));\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ String result = \"\";\n        String vowels = \"aeiou\";\n        boolean prevIsConsonant\
    \ = false;\n        for (int i = word.length() - 1; i >= 0; i--) {\n         \
    \   boolean currIsConsonant = true;\n            for (int j = 0; j < vowels.length();\
    \ j++) {\n                if (word.charAt(i) == vowels.charAt(j)) {\n        \
    \            currIsConsonant = false;\n                    break;\n          \
    \      }\n            }\n            if (currIsConsonant) {\n                if\
    \ (prevIsConsonant) {\n                    return result;\n                }\n\
    \            } else {\n                if (prevIsConsonant) {\n              \
    \      result = word.charAt(i) + \"\";\n                    return result;\n \
    \               }\n            }\n            prevIsConsonant = currIsConsonant;\n\
    \        }\n        return result;", '        return "";', "        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] chars = word.toCharArray();\n \
    \       for (int i = chars.length - 1; i >= 0; i--) {\n            boolean isVowel\
    \ = false;\n            for (char vowel : vowels) {\n                if (chars[i]\
    \ == vowel) {\n                    isVowel = true;\n                    break;\n\
    \                }\n            }\n            if (isVowel) {\n              \
    \  return String.valueOf(chars[i]);\n            }\n        }\n        return\
    \ \"\";", "        StringBuilder sb = new StringBuilder(word);\n        String\
    \ vowels = \"aeiouAEIOU\";\n        for (int i = sb.length() - 1; i >= 0; i--)\
    \ {\n            char current = sb.charAt(i);\n            if (vowels.indexOf(current)\
    \ != -1) {\n                return \"\" + current;\n            }\n        }\n\
    \        return \"\";", "        int length = word.length();\n        for (int\
    \ i = length - 1; i >= 1; i--) {\n            if ((word.charAt(i) == 'a' || word.charAt(i)\
    \ == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) ==\
    \ 'u') && (word.charAt(i - 1) != 'a' && word.charAt(i - 1) != 'e' && word.charAt(i\
    \ - 1) != 'i' && word.charAt(i - 1) != 'o' && word.charAt(i - 1) != 'u')) {\n\
    \                return String.valueOf(word.charAt(i));\n            }\n     \
    \   }\n        return \"\";", "        // First we split the word into an array\
    \ of characters.\n        char[] wordArray = word.toCharArray();\n        // Next\
    \ we reverse the array so that we can start iterating from the right.\n      \
    \  ArrayUtils.reverse(wordArray);\n        // This counter is used to determine\
    \ if we have encountered a consonant or not.\n        int consonantCount = 0;\n\
    \        // Iterate over the array of characters in reverse order.\n        for\
    \ (int i = 0; i < wordArray.length; i++) {\n            // We check if the current\
    \ character is a vowel.\n            if (\"aeiou\".indexOf(wordArray[i]) != -1)\
    \ {\n                // If it is a vowel we check if we have encountered a consonant.\n\
    \                if (consonantCount == 1) {\n                    // If we have,\
    \ we return that vowel.\n                    return Character.toString(wordArray[i]);\n\
    \                }\n            } else {\n                // If the current character\
    \ is not a vowel we increment the consonant count.\n                consonantCount++;\n\
    \            }\n        }\n        // If we make it this far, we did not find\
    \ a vowel between two consonants.\n        return \"\";", "        String vowels\
    \ = \"AEIOUaeiou\";\n        String result = \"\";\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            String ch = word.substring(i, i + 1);\n   \
    \         if (vowels.contains(ch)) {\n                if (i != word.length() -\
    \ 1) {\n                    String next = word.substring(i + 1, i + 2);\n    \
    \                if (!vowels.contains(next)) {\n                        result\
    \ = ch;\n                        break;\n                    }\n             \
    \   }\n            }\n        }\n        return result;", "        // check if\
    \ vowel exists\n        // check if consonant after exists\n        // check if\
    \ consonant before exists\n        // if so, find the closest one and return it\n\
    \        // otherwise return empty string\n        boolean isVowel = false;\n\
    \        int vowelIndex = -1;\n        char[] chars = word.toCharArray();\n  \
    \      for (int i = chars.length - 1; i >= 0; i--) {\n            char c = chars[i];\n\
    \            if (isVowel(c)) {\n                isVowel = true;\n            \
    \    vowelIndex = i;\n            } else if (isVowel && !isVowel(c)) {\n     \
    \           if (i != 0) {\n                    if (isVowel(chars[i - 1])) {\n\
    \                        return String.valueOf(c);\n                    } else\
    \ {\n                        return String.valueOf(chars[vowelIndex]);\n     \
    \               }\n                } else {\n                    return String.valueOf(chars[vowelIndex]);\n\
    \                }\n            }\n        }\n        return \"\";", '        return
    "";', "        String ans = \"\";\n        String vowels = \"aeiou\";\n      \
    \  int first = -1;\n        int last = -1;\n        int index = -1;\n        boolean\
    \ firstC = false;\n        boolean lastC = false;\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if (first == -1 && vowels.indexOf(word.charAt(i))\
    \ != -1) {\n                first = i;\n            } else if (first != -1 &&\
    \ vowels.indexOf(word.charAt(i)) == -1) {\n                last = i;\n       \
    \         break;\n            }\n        }\n        if (first == -1 || last ==\
    \ -1) return ans;\n        for (int i = 0; i < word.length(); i++) {\n       \
    \     if (i > first) {\n                if (vowels.indexOf(word.charAt(i)) !=\
    \ -1) {\n                    lastC = true;\n                } else {\n       \
    \             lastC = false;\n                }\n            }\n            if\
    \ (i < last) {\n                if (vowels.indexOf(word.charAt(i)) != -1) {\n\
    \                    firstC = true;\n                } else {\n              \
    \      firstC = false;\n                }\n            }\n            if (firstC\
    \ && lastC) {\n                index = i;\n                break;\n          \
    \  }\n        }\n        if (index == -1) return ans;\n        for (int i = 0;\
    \ i < word.length(); i++) {\n            if (i > first && i < index) {\n     \
    \           if (vowels.indexOf(word.charAt(i)) != -1) {\n                    index\
    \ = i;\n                }\n            }\n        }\n        ans = word.charAt(index)\
    \ + \"\";\n        return ans;", "        // Your code here\n        return \"\
    \";", "\t\tchar[] vowels = new char[] {'a', 'e', 'i', 'o', 'u'};\n\t\tString[]\
    \ vowelList = new String[] {\"a\", \"e\", \"i\", \"o\", \"u\"};\n\t\tfor (int\
    \ i = 0; i < word.length(); i++) {\n\t\t\tchar c = word.charAt(i);\n\t\t\tif (Arrays.binarySearch(vowels,\
    \ c) >= 0) {\n\t\t\t\tString w = String.valueOf(c);\n\t\t\t\tif (Arrays.binarySearch(vowelList,\
    \ w) >= 0) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn\
    \ w;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn \"\";", "        String result = \"\
    \";\n        String vowels = \"aeiouAEIOU\";\n        if (word.length() < 3) return\
    \ result;\n        boolean isConsonant = !vowels.contains(word.substring(word.length()\
    \ - 1, word.length()));\n        for (int i = word.length() - 2; i >= 0; i--)\
    \ {\n            if (vowels.contains(word.substring(i, i + 1))) {\n          \
    \      if (isConsonant) return word.substring(i, i + 1);\n            } else {\n\
    \                isConsonant = true;\n            }\n        }\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder(word);\n        sb.reverse();\n\
    \        int i = 1;\n        while (true) {\n            if (i >= sb.length())\
    \ {\n                return \"\";\n            }\n            char c = sb.charAt(i);\n\
    \            if (isVowel(c)) {\n                boolean f = false;\n         \
    \       if (i + 1 < sb.length()) {\n                    char d = sb.charAt(i +\
    \ 1);\n                    if (!isVowel(d)) {\n                        f = true;\n\
    \                    }\n                }\n                if (i - 1 >= 0) {\n\
    \                    char d = sb.charAt(i - 1);\n                    if (!isVowel(d))\
    \ {\n                        f = true;\n                    }\n              \
    \  }\n                if (f) {\n                    return Character.toString(c);\n\
    \                }\n            }\n            i++;\n        }", "        // TODO:\
    \ fill code here. \n        return \"\";", '        return null;', "        char[]\
    \ vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] chars = word.toCharArray();\n\
    \        boolean hasVowel = false;\n        for (char i : vowels) {\n        \
    \    if (word.contains(String.valueOf(i))) {\n                hasVowel = true;\n\
    \                break;\n            }\n        }\n        if (!hasVowel) {\n\
    \            return \"\";\n        }\n        if (word.length() == 1) {\n    \
    \        return \"\";\n        }\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            char ch = chars[i];\n            if (isVowel(ch)) {\n       \
    \         if (i == 0) {\n                    continue;\n                }\n  \
    \              else if (i == chars.length - 1) {\n                    continue;\n\
    \                }\n                else {\n                    if (isVowel(chars[i\
    \ - 1]) || isVowel(chars[i + 1])) {\n                        continue;\n     \
    \               }\n                    else {\n                        return\
    \ String.valueOf(ch);\n                    }\n                }\n            }\n\
    \        }\n        return \"\";", '        return "";']
stop_tokens:
- "\n    }\n"
