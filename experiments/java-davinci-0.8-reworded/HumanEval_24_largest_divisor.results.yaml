language: java
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 1; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1k2s74e0.java:21)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = 2; i <=\
    \ Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n          \
    \      return n / i;\n            }\n        }\n        return 1;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest_divisor =\
    \ 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest_divisor = i;\n            }\n        }\n        return\
    \ largest_divisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphs149gwa.java:22)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >\
    \ 0; i--) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >=\
    \ 1; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // First try to divide\
    \ by 2\n        if (n % 2 == 0) {\n            n = n / 2;\n            while (n\
    \ % 2 == 0) {\n                n = n / 2;\n            }\n            return n;\n\
    \        }\n        // Now try the rest of the odd numbers\n        long i = 3;\n\
    \        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n        \
    \        n = n / i;\n                while (n % i == 0) {\n                  \
    \  n = n / i;\n                }\n                return n;\n            }\n \
    \           i = i + 2;\n        }\n        return n;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowx0gvra.java:36)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return IntStream.rangeClosed(2,\
    \ (int)Math.sqrt(n)).filter(i -> n % i == 0).max().orElse(1);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpftpwut66.java:18)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // your code here\n  \
    \      long temp = 2;\n        if (n%temp == 0) {\n            return temp;\n\
    \        } else {\n            for (long i = 3; i < n/2; i+=2) {\n           \
    \     if (n%i == 0) {\n                    temp = i;\n                }\n    \
    \        }\n        }\n        return temp;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuanxidq1.java:27)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long upperBound = (long)\
    \ Math.sqrt(n);\n        long largestDivisor = 1;\n        for (long i = 2; i\
    \ <= upperBound; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoa69jnds.java:25)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ n;\n        for (long i = n-1; i > 1; i--) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n                break;\n            }\n\
    \        }\n        return largestDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbzilailx.java:23)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 1;\n  \
    \      for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n  \
    \              largest = i;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n % 2 == 0) {\n  \
    \          return largestDivisor(n / 2);\n        }\n        for (long i = 3;\
    \ i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n              \
    \  return largestDivisor(n / i);\n            }\n        }\n        return n;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7dj74w1f.java:24)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long d = 2; d <=\
    \ n / 2; d++) {\n            if (n % d == 0) {\n                return n / d;\n\
    \            }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return IntStream.rangeClosed(2,\
    \ (int)Math.floor(Math.sqrt(n)))\n            .filter(i -> n % i == 0)\n     \
    \       .mapToLong(i -> i)\n            .max()\n            .orElse(n);\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wdf2sci.java:20)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return (1l);\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppkrwyph0.java:18)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        //Eliminate even numbers\n\
    \        while(n % 2 == 0) {\n            n /= 2;\n        }\n        // Try all\
    \ remaining odd numbers\n        for(long i = 3; i * i <= n; i += 2) {\n     \
    \       while(n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \        // Return the largest prime factor\n        return n;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7g49wtpk.java:27)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >=\
    \ 1; i--) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 1;\n      \
    \  long z = n;\n        while (z % 2 == 0) {\n            max = 2;\n         \
    \   z /= 2;\n        }\n        for (long i = 3; i <= z; i += 2) {\n         \
    \   if (z % i == 0) {\n                max = i;\n                z /= i;\n   \
    \         }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5i5hny3l.java:28)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i;\n        for (i\
    \ = n / 2; i > 0; i--) {\n            if (n % i == 0) {\n                return\
    \ i;\n            }\n        }\n        return i;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n < 1) throw new IllegalArgumentException(\"\
    n must be >= 1\");\n        if (n == 1) return n;\n        long largest = 1;\n\
    \        for (long i = 2; i <= n/2; i++) {\n            if (n % i == 0) largest\
    \ = i;\n        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long d = n - 1; d\
    \ > 0; d--) {\n            if (n % d == 0) return d;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // >>> largestDivisor((15l))\n\
    \        // (5l)\n        return\n            LongStream.range(2, n)\n       \
    \     .filter(it -> n % it == 0)\n            .reduce((a, b) -> b)\n         \
    \   .orElse(-1);\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxyi06jfc.java:22)\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long d = n - 1; d\
    \ > 0; d--) {\n            if (n % d == 0) {\n                return d;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // BEGIN SECRET\n    \
    \    for (long k = n - 1; k > 1; k--) {\n            if (n % k == 0) {\n     \
    \           return k;\n            }\n        }\n        return 1;\n        //\
    \ END SECRET\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n <= 1) {\n      \
    \      return n;\n        }\n        for (long i = n - 1; i > 1; i--) {\n    \
    \        if (n % i == 0) {\n                return i;\n            }\n       \
    \ }\n        return 1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >=\
    \ 1; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Stream.iterate(n\
    \ - 1, i -> i - 1)\n            .filter(i -> n % i == 0)\n            .findFirst()\n\
    \            .get();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return 1l;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp83r5h8ct.java:18)\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 1;\n      \
    \  for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n      \
    \          max = i;\n            }\n        }\n        return max;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = -1;\n\
    \        // Returns true if and only if n is prime.\n        // >>> isPrime(11l)\n\
    \        // True\n        boolean isPrime = n -> {\n            // Fastest way\
    \ to check if n is prime (in O(log n))\n            // >>> isPrime(11l)\n    \
    \        // True\n            for (long i = 2; i * i <= n; i++) {\n          \
    \      if (n % i == 0) {\n                    return false;\n                }\n\
    \            }\n            return true;\n        };\n        // The list of primes\
    \ is infinite. Here we store the primes up to n.\n        List<Long> primes =\
    \ new ArrayList<>();\n        // Loop through numbers between 2 and n (inclusive)\n\
    \        for (long i = 2; i <= n; i++) {\n            // If i is prime\n     \
    \       if (isPrime(i)) {\n                // Append it to primes\n          \
    \      primes.add(i);\n            }\n        }\n        // Loop through primes\
    \ in reverse order\n        for (int i = primes.size() - 1; i >= 0; i--) {\n \
    \           // If the current prime divides n evenly\n            if (n % primes.get(i)\
    \ == 0) {\n                // Update maxDivisor\n                maxDivisor =\
    \ primes.get(i);\n                // Break\n                break;\n         \
    \   }\n        }\n        // Return the maximum divisor\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplmuv5d7e.java:17: error: incompatible types: boolean is not a functional\
    \ interface\n        boolean isPrime = n -> {\n                          ^\n/tmp/tmplmuv5d7e.java:33:\
    \ error: cannot find symbol\n            if (isPrime(i)) {\n                ^\n\
    \  symbol:   method isPrime(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2l;\
    \ i > 1l; i--) {\n            if (n % i == 0) {\n                return i;\n \
    \           }\n        }\n        return 1l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n <= 0) {\n      \
    \      throw new IllegalArgumentException(\"n must be > 0\");\n        }\n   \
    \     long largestDivisor = 1;\n        while (largestDivisor < n) {\n       \
    \     largestDivisor++;\n            if (n % largestDivisor == 0) {\n        \
    \        return largestDivisor;\n            }\n        }\n        return largestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45ujx32y.java:26)\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return IntStream.rangeClosed(2,\
    \ ((int)Math.floor(Math.sqrt(n))) + 1)\n            .filter(i -> n % i == 0)\n\
    \            .mapToLong(x -> n / x)\n            .findFirst()\n            .orElse(-1);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzqpw5omt.java:20)\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        //System.out.println(\"\
    n = \" + n);\n        long i = 2;\n        while (i < n) {\n            if (n\
    \ % i == 0) {\n                return i;\n            }\n            i++;\n  \
    \      }\n        return n;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4dd11q1z.java:24)\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long half = n / 2;\n \
    \       for (long i = half; i > 0; i--) {\n            if (n % i == 0) {\n   \
    \             return i;\n            }\n        }\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return largestDivisor(n,\
    \ n - 1);\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnz_x3vfm.java:13: error: method largestDivisor in class Problem\
    \ cannot be applied to given types;\n        return largestDivisor(n, n - 1);\n\
    \               ^\n  required: long\n  found:    long,long\n  reason: actual and\
    \ formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long d = 2;\n        for\
    \ (; d < n; d++) {\n            if (n % d == 0) {\n                return d;\n\
    \            }\n        }\n        return d;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpso4519w6.java:22)\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 1;\n  \
    \      long maxDivisor = n;\n        while (divisor < maxDivisor) {\n        \
    \    if (n % divisor == 0) {\n                maxDivisor = n / divisor;\n    \
    \        }\n            divisor++;\n        }\n        return maxDivisor;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_8495h9.java:24)\n"
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = n/2;\n    \
    \    for (long i = max; i >= 1; i--) {\n            if (n % i == 0) {\n      \
    \          return i;\n            }\n        }\n        return 1;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) largestDivisor\
    \ = i;\n        }\n        return largestDivisor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long d = n - 1; d\
    \ > 0; d--) {\n            if (n % d == 0) return d;\n        }\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // If n is even\n    \
    \    if (n % 2 == 0)\n            return n / 2;\n        // If n is a power of\
    \ two\n        if (n == (n & -n))\n            return n / 2;\n        // Iterate\
    \ through odd numbers and check if they divide n evenly\n        long m = (long)Math.sqrt(n);\n\
    \        for (long i = 3; i <= m; i += 2) {\n            if (n % i == 0)\n   \
    \             return n / i;\n        }\n        // n is prime\n        return\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n % 2 == 0) {\n  \
    \          return n / 2;\n        }\n        long divisor = (long)Math.sqrt(n);\n\
    \        while (divisor > 1) {\n            if (n % divisor == 0) {\n        \
    \        return divisor;\n            }\n            divisor--;\n        }\n \
    \       return -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8x3ttl_.java:26)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long m = n-1;\n      \
    \  while(m > 0) {\n            if(n % m == 0) {\n                return m;\n \
    \           }\n            m--;\n        }\n        return 1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // TODO\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv22eodnj.java:17)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ n / 2;\n        while (largestDivisor > 0) {\n            if (n % largestDivisor\
    \ == 0) {\n                return largestDivisor;\n            }\n           \
    \ largestDivisor -= 1;\n        }\n        return largestDivisor;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long L = 1;\n        long\
    \ R = n-1;\n        long result = 0;\n        while (L <= R) {\n            long\
    \ mid = (L+R)/2;\n            if (n % mid == 0) {\n                result = mid;\n\
    \                L = mid+1;\n            } else {\n                R = mid-1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl5vfgm2d.java:32)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Try all numbers from\
    \ 2 to n/2 + 1\n        for (long i = n / 2 + 1; i >= 2; i--) {\n            if\
    \ (n % i == 0) return i;\n        }\n        // n must be prime\n        return\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Initially we have no\
    \ divisor, let's call it d\n        long d = 1;\n        // Let's try to find\
    \ the largest divisor of n\n        while (d < n) {\n            d = d + 1;\n\
    \            // if d is a divisor of n, let's remember that d is our best divisor\
    \ so far\n            if (n % d == 0) {\n                d = d;\n            }\n\
    \            // if d is not a divisor of n, then this d does not help us\n   \
    \         else {\n                d = d - 1;\n            }\n        }\n     \
    \   // We are done, let's return the largest divisor of n\n        return d;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 1;\n  \
    \      long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                largest = i;\n            }\n            i += 1;\n      \
    \  }\n        return largest;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5__4p3j.java:26)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i = 2;\n        while\
    \ (n % i != 0) i++;\n        return i;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0uikizgo.java:18)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long m = (long) Math.sqrt(n);\n\
    \        while(m > 0 && n % m != 0) m--;\n        return m;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8ouqlhe.java:20)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // start at n-1, find\
    \ the largest divisor of n that is smaller than n\n        for (long i = n-1;\
    \ i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n  \
    \          }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long sqrt = (long) Math.sqrt(n);\n\
    \        long i = sqrt;\n        while (n % i != 0) {\n            i--;\n    \
    \    }\n        return i;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8l0b65q.java:23)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = 2; i <=\
    \ Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return\
    \ largestDivisor(n / i);\n            }\n        }\n        return n;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7eil7dse.java:21)\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // TRICKY: If the input\
    \ is a prime, then the output is simply 1\n        if (BigInteger.valueOf(n).isProbablePrime(10))\
    \ {\n            return 1;\n        }\n        // TRICKY: If we got here, then\
    \ the input number is not prime. So the output is going to be some factor of it,\
    \ and we'll find it\n        // TRICKY: We start with the largest possible divisor\
    \ and decrease until we find a divisor\n        for (long i = n - 1; i > 1; i--)\
    \ {\n            if (n % i == 0) {\n                return i;\n            }\n\
    \        }\n        // TRICKY: If we got here, then the input number was bad and\
    \ there are no divisors in the range we tested\n        throw new RuntimeException(\"\
    Bad input: \" + n);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >=\
    \ 1; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        BigInteger nBig = BigInteger.valueOf(n);\n\
    \        BigInteger two = BigInteger.valueOf(2);\n        BigInteger zero = BigInteger.valueOf(0);\n\
    \        if (nBig.mod(two).equals(zero)) {\n            return (long) nBig.divide(two).longValue();\n\
    \        }\n        BigInteger high = nBig.divide(two);\n        BigInteger low\
    \ = BigInteger.valueOf(3);\n        while (high.compareTo(low) >= 0) {\n     \
    \       BigInteger mid = high.add(low).divide(two);\n            if (nBig.mod(mid).equals(zero))\
    \ {\n                return (long) mid.longValue();\n            } else if (mid.multiply(mid).compareTo(nBig)\
    \ > 0) {\n                high = mid.subtract(BigInteger.valueOf(1));\n      \
    \      } else {\n                low = mid.add(BigInteger.valueOf(1));\n     \
    \       }\n        }\n        return (long) nBig.longValue();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmn709ooy.java:34)\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        long sqrtN = (long) Math.sqrt(n);\n        for (long divisor = 2;\
    \ divisor <= sqrtN; divisor++) {\n            if (n % divisor == 0) {\n      \
    \          largestDivisor = divisor;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe6j1334w.java:25)\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n          \
    \      max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ljsuy4r.java:22)\n"
  stdout: ''
  timestamp: 1660010675
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long m = n;\n        for\
    \ (long i = 2; i <= m; i++) {\n            if (m % i == 0) {\n               \
    \ m = m / i;\n                return m;\n            }\n        }\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 1; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = 2; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                return n / i;\n     \
    \       }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long d = n - 1; d\
    \ > 0; d--) {\n            if (n % d == 0) {\n                return d;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long d = n - 1; d\
    \ > 0; d--) {\n            if (n % d == 0) {\n                return d;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestDivisor = i;\n            }\n        }\n \
    \       return largestDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppx2rx45b.java:24)\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n % 2 == 0) {\n  \
    \          return n / 2;\n        }\n        for (long i = 3; i <= Math.sqrt(n);\
    \ i+=2) {\n            if (n % i == 0) {\n                return n / i;\n    \
    \        }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73jgh7jq.java:24)\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2if2j89x.java:16)\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Go through all the\
    \ numbers up to n, starting at n/2\n        for (long i = n/2; i > 0; i--) {\n\
    \            // If i divides n evenly, return i\n            if (n % i == 0) {\n\
    \                return i;\n            }\n        }\n        // If no numbers\
    \ divide n evenly, return 0\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return largestDivisor_0(n);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvrj7dur.java:13: error: cannot find symbol\n        return largestDivisor_0(n);\n\
    \               ^\n  symbol:   method largestDivisor_0(long)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        double sqrt = Math.sqrt(n);\n\
    \        long largestDivisor = 1;\n        for (long i = 2; i <= sqrt; i++) {\n\
    \            if (n % i == 0) {\n                largestDivisor = i;\n        \
    \    }\n        }\n        return largestDivisor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx8pwf9op.java:25)\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return numberStream(2l,\
    \ n).filter(x -> n % x == 0).max().get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13_4s2fw.java:13: error: cannot find symbol\n        return numberStream(2l,\
    \ n).filter(x -> n % x == 0).max().get();\n               ^\n  symbol:   method\
    \ numberStream(long,long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long result = n;\n   \
    \     while(result > 0) {\n            if(n % result == 0)\n                return\
    \ result;\n            result--;\n        }\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfcqp7aaz.java:22)\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n <= 1) return 0;\n\
    \        long largestDivisor = 1;\n        long counter = 2;\n        while (counter\
    \ < n) {\n            if (n % counter == 0) {\n                largestDivisor\
    \ = counter;\n            }\n            counter++;\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList<Long> factors\
    \ = Utils.primeFactors(n);\n        int len = factors.size();\n        long result\
    \ = 1;\n        for (int i = 0; i < len - 1; i++) {\n            result *= factors.get(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp879f3ei0.java:13: error: cannot find symbol\n        ArrayList<Long>\
    \ factors = Utils.primeFactors(n);\n                                  ^\n  symbol:\
    \   variable Utils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010676
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        int i = (int) Math.sqrt(n);\n\
    \        for (; i > 0; i--) {\n            if (n % i == 0) {\n               \
    \ return i;\n            }\n        }\n        return n;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3nul1nxu.java:24)\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestFactor = 1;\n\
    \        long tempFactor = 2;\n        long limit = n / 2;\n        while (tempFactor\
    \ <= limit) {\n            if (n % tempFactor == 0) {\n                largestFactor\
    \ = tempFactor;\n                limit = n / tempFactor;\n            }\n    \
    \        tempFactor++;\n        }\n        return largestFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3vm0piq9.java:29)\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // TODO: implement\n \
    \       return 0l;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvd5cj6h.java:17)\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 1; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest_divisor =\
    \ 1;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ {\n                largest_divisor = i;\n            }\n        }\n        return\
    \ largest_divisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1) {\n      \
    \      return 1;\n        }\n        long largest = 0;\n        for (long i =\
    \ 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n            }\n        }\n        return largest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6nsm4jp.java:25)\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        int largest = 1;\n   \
    \     for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n         \
    \       largest = i;\n            }\n        }\n        return largest;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long m = n - 1;\n    \
    \    while (m > 0) {\n            if (n % m == 0) {\n                return m;\n\
    \            }\n            m--;\n        }\n        return 1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >\
    \ 0; i--) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = (long) 1;\n\
    \        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           max = i;\n            }\n        }\n        return max;\n    }\n \
    \   public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // # generate the list\
    \ of primes <= sqrt(n)\n        // primes = [x for x in range(2, int(n**0.5) +\
    \ 1) if isPrime(x)]\n        // # start with the highest, work our way down\n\
    \        // for prime in primes[::-1]:\n        //     if n % prime == 0:\n  \
    \      //         return n // prime\n        // # we're done. last resort: n -\
    \ 1\n        // return n - 1\n        return LongStream.range(2, (long) Math.sqrt(n)\
    \ + 1).filter(Problem::isPrime).reduce((x, y) -> y).getAsLong();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnvsy33s.java:21: error: invalid method reference\n        return\
    \ LongStream.range(2, (long) Math.sqrt(n) + 1).filter(Problem::isPrime).reduce((x,\
    \ y) -> y).getAsLong();\n                                                    \
    \               ^\n  cannot find symbol\n    symbol:   method isPrime(long)\n\
    \    location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Start with all the\
    \ divisors of the number, and start filtering out the ones that are not prime\n\
    \        // We will do this by starting with the smallest prime number and then\
    \ removing all the numbers that are not divisible by that number\n        // by\
    \ the time we have checked every number, the last number left will be the largest\
    \ prime divisor\n        // (We use a linked list to do this because we are going\
    \ to be removing things at random and we don't want to deal with the overhead\
    \ of resizing an array)\n        LinkedList<Long> divisors = new LinkedList<Long>();\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           divisors.add(i);\n            }\n        }\n        // Keep the last\
    \ prime number that was added\n        long lastPrime = 2;\n        while (divisors.size()\
    \ > 1) {\n            // Remove all the numbers that are not divisible by the\
    \ last prime\n            divisors.removeIf(x -> {\n                if (x % lastPrime\
    \ == 0) {\n                    lastPrime = x;\n                    return false;\n\
    \                }\n                return true;\n            });\n        }\n\
    \        // The last element left is the largest prime divisor\n        return\
    \ divisors.peekLast();\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx919_k_a.java:28: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n                if (x % lastPrime\
    \ == 0) {\n                        ^\n/tmp/tmpx919_k_a.java:29: error: local variables\
    \ referenced from a lambda expression must be final or effectively final\n   \
    \                 lastPrime = x;\n                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010677
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long d = 2;\n        while\
    \ (n % d != 0) {\n            d++;\n        }\n        return d;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_w8_kz7f.java:20)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1) return 0;\n\
    \        else if (n % 2 == 0) return largestDivisor(n / 2);\n        else {\n\
    \            long factor = (long) Math.floor(Math.sqrt(n));\n            while\
    \ (n % factor != 0) {\n                factor -= 1;\n            }\n         \
    \   return largestDivisor(factor);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb8atlute.java:24)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return primeFactors(n)\n\
    \            .map(x -> x-1)\n            .reduce(1, (x,y) -> x*y);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr59iif1.java:13: error: cannot find symbol\n        return primeFactors(n)\n\
    \               ^\n  symbol:   method primeFactors(long)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 2;\n  \
    \      if (n == 2) {\n            return 1;\n        }\n        while (divisor\
    \ < n) {\n            if (n % divisor == 0) {\n                return divisor;\n\
    \            }\n            divisor++;\n        }\n        return n;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8mh7x2ir.java:26)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long m = 2;\n        long\
    \ max = 1;\n        while (m * m <= n) {\n            if (n % m == 0) {\n    \
    \            max = m;\n            }\n            m += 1;\n        }\n       \
    \ return max;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7y2fvio.java:26)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >\
    \ 0; i--) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ -1;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                largestDivisor = i;\n            }\n        }\n \
    \       return largestDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq4s0ci0t.java:22)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i = 2;\n        long\
    \ j = n;\n        while (i < j) {\n            long mid = (i + j) / 2;\n     \
    \       if (n % mid == 0) {\n                i = mid;\n            } else {\n\
    \                j = mid;\n            }\n        }\n        if (i == j) {\n \
    \           return i;\n        } else {\n            return j;\n        }\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9cyk9i5f.java:30)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1) return 1;\n\
    \        long curr = n-1;\n        while (curr > 1) {\n            if (n % curr\
    \ == 0) return curr;\n            curr--;\n        }\n        return 1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return (1l);\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppkrwyph0.java:18)\n"
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1) return 1;\n\
    \        long highest = 1;\n        for (long i = 2; i < Math.sqrt(n); i++) {\n\
    \            if (n % i == 0) {\n                highest = i;\n            }\n\
    \        }\n        return highest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpefjfmi1f.java:25)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >\
    \ 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i = 1l;\n       \
    \ long target = 0l;\n        if (n % 2 == 0)\n            target = 2l;\n     \
    \   else\n            target = 1l;\n        for (i = 1l; i <= n; i++) {\n    \
    \        if (n % i == 0 && i > target)\n                target = i;\n        }\n\
    \        return target;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdez1syub.java:26)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ -1;\n        long nCopy = n;\n        long i = 2;\n        while (i <= nCopy)\
    \ {\n            if (n % i == 0) {\n                largestDivisor = i;\n    \
    \            nCopy = nCopy / i;\n            } else {\n                i += 1;\n\
    \            }\n        }\n        return largestDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqpf4e0t5.java:27)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i = 2;\n        while\
    \ (i < n) {\n            if (n % i == 0) {\n                return n / i;\n  \
    \          }\n            i += 1;\n        }\n        return 1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0;\n  \
    \      for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n       \
    \         largest = i;\n            }\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdekk5njf.java:22)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long result = n;\n   \
    \     while (result > 0) {\n            if (n % result == 0) return result;\n\
    \            result--;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2tguijhz.java:21)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Find the largest divisor\
    \ that is smaller than n\n        // >>> n % (n-1)\n        // 1\n        // So\
    \ if n - 1 divides n evenly, then we have found the largest divisor smaller than\
    \ n\n        // Otherwise, keep going down by one.\n        long m = n - 1;\n\
    \        while (n % m != 0) m -= 1;\n        return m;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i = 2;\n        for\
    \ (; i < n; i++) {\n            if (n % i == 0) {\n                break;\n  \
    \          }\n        }\n        return i;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzv2_eoqb.java:22)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz2_qh81b.java:22)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = n;\n      \
    \  long min = 2;\n        while (min < max) {\n            long mid = (max - min)\
    \ / 2 + min;\n            if (n % mid == 0) {\n                min = mid + 1;\n\
    \            } else {\n                max = mid;\n            }\n        }\n\
    \        return max - 1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4b42l_7u.java:28)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = n - 1;\n\
    \        while (n % divisor != 0) {\n            divisor -= 1;\n        }\n  \
    \      return divisor;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long res = 2;\n      \
    \  for (long i = n-1; i > 0; i--) {\n            if (n % i == 0) {\n         \
    \       res = i;\n                break;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return (n == 1l) ? 1l\
    \ : Enumerable.range(2l, (n / 2l)).filter(i -> n % i == 0).max();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58sxl3or.java:13: error: cannot find symbol\n        return (n\
    \ == 1l) ? 1l : Enumerable.range(2l, (n / 2l)).filter(i -> n % i == 0).max();\n\
    \                                ^\n  symbol:   variable Enumerable\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList<Long> primes\
    \ = new ArrayList<Long>();\n        primes.add(2l);\n        long nextDivisor\
    \ = n;\n        while(nextDivisor != 1) {\n            while(n % nextDivisor ==\
    \ 0) {\n                n = n / nextDivisor;\n            }\n            nextDivisor\
    \ = nextDivisor - 1;\n        }\n        return n;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr63jsamo.java:27)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1) {\n      \
    \      return 0;\n        }\n        long sqrt = (long) Math.sqrt(n);\n      \
    \  long largest = 1;\n        for (long i = 2; i <= sqrt; i++) {\n           \
    \ if (n % i == 0) {\n                largest = i;\n            }\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ivzs8et.java:28)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long result = 1;\n   \
    \     for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0;\n  \
    \      for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n       \
    \         largest = i;\n            }\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 0;\n        for (long i = 1; i <= n / 2; i++) {\n            if (n % i == 0)\
    \ largestDivisor = i;\n        }\n        return largestDivisor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1) {\n      \
    \      return n;\n        }\n        long divisor = (long) Math.floor(Math.sqrt(n));\n\
    \        while (n % divisor != 0) {\n            divisor--;\n        }\n     \
    \   return divisor;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnpz2eh1g.java:25)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long root = (long) Math.sqrt(n);\n\
    \        for (long i = root; i > 0; i--) {\n            if (n % i == 0) {\n  \
    \              return i;\n            }\n        }\n        return -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6om8qtn3.java:24)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long currentDivisor =\
    \ n / 2;\n        while (n % currentDivisor != 0)\n            currentDivisor--;\n\
    \        return currentDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long lDivisor = 0;\n \
    \       for (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n  \
    \              lDivisor = i;\n                break;\n            }\n        }\n\
    \        return lDivisor;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long high = (long) Math.sqrt(n);\n\
    \        while (n % high != 0 && high > 1) {\n            high--;\n        }\n\
    \        return high;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdhnc8kxl.java:22)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return 0l;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gc75re0.java:16)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = n;\n  \
    \      while (largest > 1) {\n            largest--;\n            if (n % largest\
    \ == 0) {\n                return largest;\n            }\n        }\n       \
    \ return n;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long t;\n        for (long\
    \ i = n - 1; i > 0; i--) {\n            if (n % i == 0) return i;\n        }\n\
    \        return 0;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n-1;\n\
    \        while (n % maxDivisor != 0) {\n            maxDivisor -= 1;\n       \
    \ }\n        return maxDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i = n - 1;\n    \
    \    while(i > 0) {\n            if(n % i == 0) {\n                return i;\n\
    \            }\n            i--;\n        }\n        return i;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n / 2; i\
    \ > 1; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010676
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n-1; i >\
    \ 0; i--) {\n            if (n % i == 0) {\n                return i;\n      \
    \      }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010677
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long sqrt = (long) Math.sqrt(n);\n\
    \        for (long i = sqrt; i > 0; i--) {\n            if (n % i == 0) return\
    \ i;\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp02i8mldh.java:22)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long i = n-1;\n      \
    \  while (i > 0) {\n            if (n % i == 0) {\n                return i;\n\
    \            }\n            i--;\n        }\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long smallestPrime = 2;\n\
    \        while (n > smallestPrime) {\n            if (n % smallestPrime == 0)\
    \ {\n                return n / smallestPrime;\n            }\n            smallestPrime++;\n\
    \        }\n        return n;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o_kwxp_.java:23)\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long d = n / 2;\n    \
    \    while (d > 0) {\n            if (n % d == 0) return d;\n            d -=\
    \ 1;\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Calculate the square\
    \ root of n\n        long sqrtN = (long) Math.sqrt(n);\n        long r = n;\n\
    \        // Check every number smaller than the square root of n, if it divides\
    \ n evenly\n        for (long i = sqrtN; i > 1; i--) {\n            if (n % i\
    \ == 0) {\n                // The number i is the largest divisor of n\n     \
    \           r = i;\n                break;\n            }\n        }\n       \
    \ return r;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39w9jqf8.java:27)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long x = (long)Math.sqrt(n);\n\
    \        while (!(n % x == 0)) {\n            x--;\n        }\n        return\
    \ x;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_aics18.java:22)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long result = n - 1;\n\
    \        for (long i = result; i > 1; i--) {\n            if (n % i == 0) {\n\
    \                return i;\n            }\n        }\n        return 1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return  IntStream.rangeClosed(2,(int)\
    \ Math.sqrt(n)).filter(i -> n % i == 0).filter(i -> i <= n/i).findFirst().orElse(1);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbgsoinen.java:18)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Fix this code\n   \
    \     return 0;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcaj0n6y8.java:17)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long res = 0;\n      \
    \  for (long i = n/2; i >= 1; i--) {\n            if (n % i == 0) {\n        \
    \        res = i;\n                break;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n;\n\
    \        for (long divisor = maxDivisor - 1; divisor > 1; divisor--) {\n     \
    \       if (n % divisor == 0) {\n                maxDivisor = divisor;\n     \
    \           break;\n            }\n        }\n        return maxDivisor;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cy8z4zg.java:23)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        var j = n - 1;\n     \
    \   var largest = 0l;\n        while (j > 1) {\n            if (n % j == 0) {\n\
    \                return j;\n            }\n            j--;\n        }\n     \
    \   return 1l;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ n / 2;\n        while (largestDivisor > 1) {\n            if (n % largestDivisor\
    \ == 0)\n                return largestDivisor;\n            largestDivisor -=\
    \ 1;\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long cd = 2;\n       \
    \ while (cd < n) {\n            if (n % cd == 0) return cd;\n            cd++;\n\
    \        }\n        return 1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_cx4052k.java:23)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = -1;\n     \
    \   for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       max = i;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0gx7z9uq.java:22)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n;\n\
    \        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i ==\
    \ 0) {\n                maxDivisor = i;\n            }\n        }\n        return\
    \ maxDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00z7rdmk.java:22)\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n < 0) throw new IllegalArgumentException(\"\
    n must be positive\");\n        if (n == 0) return 0;\n        if (n == 1) return\
    \ 1;\n        long m = n / 2;\n        while (m >= 1) {\n            if (n % m\
    \ == 0) return m;\n            m--;\n        }\n        return 1;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010680
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) {\n                return i;\n    \
    \        }\n        }\n        return 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 1;\n      \
    \  for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n      \
    \          max = i;\n            }\n        }\n        return max;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010674
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0;\n  \
    \      for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n       \
    \         largest = i;\n            }\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdekk5njf.java:22)\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        for (long i = n - 1; i\
    \ > 0; i--) {\n            if (n % i == 0) return i;\n        }\n        return\
    \ -1;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010673
