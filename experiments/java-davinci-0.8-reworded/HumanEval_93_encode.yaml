name: HumanEval_93_encode
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes a message, and encodes in such\
  \ a \n    // way that it swaps case of all letters, replaces all vowels in \n  \
  \  // the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
  \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String\
  \ message) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(encode((\"\
  TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
  )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This\
  \ is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt\
  \ KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
completions: ["        String vowels = \"aeiou\";\n        StringBuffer encoded_message\
    \ = new StringBuffer();\n        for (char ch : message.toCharArray()) {\n   \
    \         char encoded_ch = Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
    \ : Character.toUpperCase(ch);\n            if (vowels.indexOf(encoded_ch) !=\
    \ -1) {\n                int index = (vowels.indexOf(encoded_ch) + 2) % vowels.length();\n\
    \                encoded_ch = vowels.charAt(index);\n            }\n         \
    \   encoded_message.append(encoded_ch);\n        }\n        return encoded_message.toString();",
  "        char[] chars = message.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (c >= 'a' && c <= 'z')\
    \ {\n                c -= 32;\n            } else if (c >= 'A' && c <= 'Z') {\n\
    \                c += 32;\n            } else {\n                continue;\n \
    \           }\n            switch (c) {\n                case 'A':\n         \
    \           c = 'C';\n                    break;\n                case 'E':\n\
    \                    c = 'G';\n                    break;\n                case\
    \ 'I':\n                    c = 'K';\n                    break;\n           \
    \     case 'O':\n                    c = 'Q';\n                    break;\n  \
    \              case 'U':\n                    c = 'S';\n                    break;\n\
    \                case 'a':\n                    c = 'c';\n                   \
    \ break;\n                case 'e':\n                    c = 'g';\n          \
    \          break;\n                case 'i':\n                    c = 'k';\n \
    \                   break;\n                case 'o':\n                    c =\
    \ 'q';\n                    break;\n                case 'u':\n              \
    \      c = 's';\n                    break;\n            }\n            chars[i]\
    \ = c;\n        }\n        return new String(chars);", "        StringBuilder\
    \ output = new StringBuilder(message.length());\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (c == 'a') {\n\
    \                output.append('c');\n            } else if (c == 'e') {\n   \
    \             output.append('g');\n            } else if (c == 'i') {\n      \
    \          output.append('k');\n            } else if (c == 'o') {\n         \
    \       output.append('q');\n            } else if (c == 'u') {\n            \
    \    output.append('y');\n            } else if (c == 'A') {\n               \
    \ output.append('C');\n            } else if (c == 'E') {\n                output.append('G');\n\
    \            } else if (c == 'I') {\n                output.append('K');\n   \
    \         } else if (c == 'O') {\n                output.append('Q');\n      \
    \      } else if (c == 'U') {\n                output.append('Y');\n         \
    \   } else if (c == ' ') {\n                output.append(' ');\n            }\
    \ else {\n                char next = (char) (c + 2);\n                output.append(next);\n\
    \            }\n        }\n        return output.toString();", '        return
    "";', "        // Go through each letter, transform case and vowel \n        //\
    \ append to new string. \n        StringBuilder output = new StringBuilder(\"\"\
    );\n        String vowels = \"aeiou\";\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char letter = message.charAt(i);\n            if (Character.isLowerCase(letter))\
    \ {\n                // Check if letter is vowel\n                if (vowels.indexOf(letter)\
    \ != -1) {\n                    // Letter is a vowel\n                    int\
    \ location = vowels.indexOf(letter);\n                    if (location == 4) {\n\
    \                        output.append(vowels.charAt(0));\n                  \
    \  } else {\n                        output.append(vowels.charAt(location + 2));\n\
    \                    }\n                } else {\n                    // Letter\
    \ is not a vowel\n                    // Swap case\n                    output.append(Character.toUpperCase(letter));\n\
    \                }\n            } else {\n                // Letter is uppercase\n\
    \                if (vowels.indexOf(Character.toLowerCase(letter)) != -1) {\n\
    \                    // Letter is a vowel\n                    int location =\
    \ vowels.indexOf(Character.toLowerCase(letter));\n                    if (location\
    \ == 4) {\n                        output.append(Character.toUpperCase(vowels.charAt(0)));\n\
    \                    } else {\n                        output.append(Character.toUpperCase(vowels.charAt(location\
    \ + 2)));\n                    }\n                } else {\n                 \
    \   // Letter is not a vowel\n                    // Swap case\n             \
    \       output.append(Character.toLowerCase(letter));\n                }\n   \
    \         }\n        }\n        return output.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\
    \        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                c = Character.toLowerCase(c);\n            } else {\n   \
    \             c = Character.toUpperCase(c);\n            }\n            boolean\
    \ isVowel = false;\n            for (char vowel : vowels) {\n                if\
    \ (c == vowel) {\n                    c = (char) (c + 2);\n                  \
    \  isVowel = true;\n                    break;\n                }\n          \
    \  }\n            if (!isVowel) {\n                c = (char) (c + 1);\n     \
    \       }\n            sb.append(c);\n        }\n        return sb.toString();",
  '        throw new RuntimeException("Not Implemented");', '        return message;',
  "        // YOUR CODE HERE\n        return null;", "        // TODO fill in this\
    \ function so that it runs\n        return \"\";", "        char[] vowels = new\
    \ char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .toCharArray();\n        char[] s = message.toCharArray();\n        for (int i\
    \ = 0; i < s.length; i++) {\n            if (Character.isLetter(s[i])) {\n   \
    \             if (Character.isUpperCase(s[i])) {\n                    s[i] = Character.toLowerCase(s[i]);\n\
    \                }\n                s[i] = rotate(s[i], alphabet);\n         \
    \       if (Character.isUpperCase(message.charAt(i))) {\n                    s[i]\
    \ = Character.toUpperCase(s[i]);\n                }\n            }\n        }\n\
    \        return new String(s);", "        //YOUR CODE HERE\n        return \"\"\
    ;", "        int[] cipher = new int[]{2, 2, 1, 2, 2, 2, 1};\n        StringBuilder\
    \ encodedMessage = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char currChar = message.charAt(i);\n            if (currChar\
    \ >= 'a' && currChar <= 'z') {\n                currChar -= 'a';\n           \
    \     currChar = (char) ((currChar + 26 - cipher[currChar % 7]) % 26);\n     \
    \           currChar += 'A';\n            } else if (currChar >= 'A' && currChar\
    \ <= 'Z') {\n                currChar -= 'A';\n                currChar = (char)\
    \ ((currChar + 26 - cipher[currChar % 7]) % 26);\n                currChar +=\
    \ 'a';\n            }\n            encodedMessage.append(currChar);\n        }\n\
    \        return encodedMessage.toString();", "        String tmp = \"\";\n   \
    \     for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
    \            } else {\n                c = Character.toUpperCase(c);\n       \
    \     }\n            if (c == 'a') c = 'c';\n            else if (c == 'e') c\
    \ = 'g';\n            else if (c == 'i') c = 'k';\n            else if (c == 'o')\
    \ c = 'q';\n            else if (c == 'u') c = 'y';\n            tmp += c;\n \
    \       }\n        return tmp;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < message.length(); i++) {\n            int v = message.charAt(i);\n\
    \            if ((v >= 'a' && v <= 'z') || (v >= 'A' && v <= 'Z')) {\n       \
    \         if (v == 'z') {\n                    v = 'a';\n                } else\
    \ if (v == 'Z') {\n                    v = 'A';\n                } else {\n  \
    \                  v++;\n                }\n                sb.append((char)v);\n\
    \            } else {\n                sb.append((char)v);\n            }\n  \
    \      }\n        return sb.toString();", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String uppercaseAlphabet = alphabet.toUpperCase();\n        String\
    \ encodedMessage = \"\";\n        String[] splitMessage = message.split(\"\");\n\
    \        for (String letter : splitMessage) {\n            if (letter.matches(\"\
    [a-zA-Z]\")) {\n                if (letter.equals(letter.toUpperCase())) {\n \
    \                   // Lowercase the letter\n                    encodedMessage\
    \ += letter.toLowerCase();\n                } else {\n                    // Uppercase\
    \ the letter\n                    encodedMessage += letter.toUpperCase();\n  \
    \              }\n            } else {\n                // Letter is not a character\n\
    \                encodedMessage += letter;\n            }\n        }\n       \
    \ // The message is now swapped case\n        // We now replace the vowels\n \
    \       encodedMessage = encodedMessage.replaceAll(\"[AEIOUaeiou]\", \"\");\n\
    \        return encodedMessage;", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        StringBuilder result = new StringBuilder();\n        String vowels =\
    \ \"aeiou\";\n        for (char c : sb.toString().toCharArray()) {\n         \
    \   if (vowels.indexOf(c) != -1) {\n                int index = (vowels.indexOf(c)\
    \ + 2) % vowels.length();\n                result.append(vowels.charAt(index));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n        return result.toString();", "        String[] allVowels = {\"\
    a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] allVowelsEncode = {\"c\",\
    \ \"g\", \"k\", \"o\", \"s\"};\n        String[] allConsanants = {\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] allConsanantsEncode\
    \ = {\"d\", \"e\", \"f\", \"h\", \"i\", \"j\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"t\", \"u\", \"v\", \"x\", \"y\", \"z\", \"b\", \"c\"};\n       \
    \ String[] allChar = new String[allVowels.length + allConsanants.length];\n  \
    \      String[] allCharEncode = new String[allVowelsEncode.length + allConsanantsEncode.length];\n\
    \        for (int i = 0; i < allChar.length; i++) {\n            if (i < allVowels.length)\
    \ {\n                allChar[i] = allVowels[i];\n                allCharEncode[i]\
    \ = allVowelsEncode[i];\n            } else {\n                allChar[i] = allConsanants[i\
    \ - allVowels.length];\n                allCharEncode[i] = allConsanantsEncode[i\
    \ - allVowelsEncode.length];\n            }\n        }\n        String encoded\
    \ = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            String\
    \ letter = message.substring(i, i + 1);\n            if (letter.equals(letter.toUpperCase()))\
    \ {\n                for (int j = 0; j < allChar.length; j++) {\n            \
    \        if (letter.toLowerCase().equals(allChar[j])) {\n                    \
    \    encoded += allCharEncode[j].toUpperCase();\n                    }\n     \
    \           }\n            } else {\n                for (int j = 0", "      \
    \  String encoded = \"\";\n        String[] vowels = {\"a\", \"e\", \"i\", \"\
    o\", \"u\"};\n        for (char c : message.toCharArray()) {\n            String\
    \ s = \"\" + c;\n            if (s.equals(s.toUpperCase())) {\n              \
    \  s = s.toLowerCase();\n            } else {\n                s = s.toUpperCase();\n\
    \            }\n            if (Arrays.asList(vowels).contains(s)) {\n       \
    \         int index = Arrays.asList(vowels).indexOf(s);\n                index\
    \ = (index + 2) % 5;\n                s = vowels[index];\n            }\n    \
    \        encoded += s;\n        }\n        return encoded;", "        char[] arr\
    \ = message.toCharArray();\n        char[] vowels = \"AEIOUaeiou\".toCharArray();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (Arrays.binarySearch(vowels,\
    \ arr[i]) > -1) {\n                arr[i] = (char) (arr[i] + 2);\n           \
    \ }\n            if (Character.isUpperCase(arr[i])) {\n                arr[i]\
    \ = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i]\
    \ = Character.toUpperCase(arr[i]);\n            }\n        }\n        return new\
    \ String(arr);", "        String vowels = \"aeiou\";\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n\
    \            char c = message.charAt(i);\n            int index = vowels.indexOf(c);\n\
    \            if (index == -1) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                int forwardIndex = (index + 2) % vowels.length();\n\
    \                sb.append(vowels.charAt(forwardIndex));\n            }\n    \
    \    }\n        return sb.toString();", "        int vLocation = 0;\n        char[]\
    \ messageArr = message.toCharArray();\n        for (int i = 0; i < messageArr.length;\
    \ i++) {\n            if (messageArr[i] == 'a' || messageArr[i] == 'e' || messageArr[i]\
    \ == 'i' || messageArr[i] == 'o' || messageArr[i] == 'u') {\n                vLocation\
    \ = i;\n                char vowels = messageArr[vLocation];\n               \
    \ if (vowels == 'a') {\n                    vowels = 'c';\n                } else\
    \ if (vowels == 'e') {\n                    vowels = 'g';\n                } else\
    \ if (vowels == 'i') {\n                    vowels = 'k';\n                } else\
    \ if (vowels == 'o') {\n                    vowels = 'm';\n                } else\
    \ if (vowels == 'u') {\n                    vowels = 'p';\n                }\n\
    \                messageArr[vLocation] = vowels;\n            }\n        }\n \
    \       message = new String(messageArr);\n        return message;", "       \
    \ String encodedMessage = \"\";\n        String alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        String vowels = \"AEIOU\";\n        String messageString = message.toUpperCase();\n\
    \        for (int i = 0; i < messageString.length(); i++) {\n            if (alphabet.indexOf(messageString.charAt(i))\
    \ > -1) {\n                if (vowels.indexOf(messageString.charAt(i)) > -1) {\n\
    \                    if (vowels.indexOf(messageString.charAt(i)) < vowels.length()\
    \ - 2) {\n                        encodedMessage += vowels.charAt(vowels.indexOf(messageString.charAt(i))\
    \ + 2);\n                    } else {\n                        encodedMessage\
    \ += vowels.charAt(vowels.indexOf(messageString.charAt(i)) - 24);\n          \
    \          }\n                } else {\n                    if (alphabet.indexOf(messageString.charAt(i))\
    \ < alphabet.length() - 2) {\n                        encodedMessage += alphabet.charAt(alphabet.indexOf(messageString.charAt(i))\
    \ + 2);\n                    } else {\n                        encodedMessage\
    \ += alphabet.charAt(alphabet.indexOf(messageString.charAt(i)) - 24);\n      \
    \              }\n                }\n            } else {\n                encodedMessage\
    \ += messageString.charAt(i);\n            }\n        }\n        return encodedMessage;",
  '        return "";', "        String lowerCase = message.toLowerCase();\n     \
    \   String swapCase = swapCase(lowerCase);\n        String encodeVowels = encodeVowels(swapCase);\n\
    \        return encodeVowels;", "        int[] offsets = {1, 2, 1, 2, 1, 2, 1,\
    \ 2, 0, 1, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 1, 2};\n        StringBuilder\
    \ sb = new StringBuilder();\n        int offset = 0;\n        for (int i = 0;\
    \ i < message.length(); i++) {\n            char c = message.charAt(i);\n    \
    \        if (Character.isLetter(c)) {\n                c = Character.isUpperCase(c)\
    \ ? 'A' : 'a';\n                int index = Character.isUpperCase(message.charAt(i))\
    \ ? message.charAt(i) - 'A' : message.charAt(i) - 'a';\n                c += (index\
    \ + offsets[index]) % 26;\n            }\n            sb.append(c);\n        }\n\
    \        return sb.toString();", '        return "";', "\tStringBuilder sb = new\
    \ StringBuilder();\n\tMap<Character, Character> m = new HashMap<>();\n\tfor (int\
    \ i = 0; i < message.length(); i++) {\n\t    char ch = message.charAt(i);\n\t\
    \    if (Character.isLetter(ch)) {\n\t\tchar c = Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
    \ : ch;\n\t\tif (m.containsKey(c)) {\n\t\t    sb.append(m.get(c));\n\t\t} else\
    \ {\n\t\t    char x = Character.isUpperCase(ch) ? Character.toUpperCase(getNext(c))\
    \ : getNext(c);\n\t\t    m.put(c, x);\n\t\t    sb.append(x);\n\t\t}\n\t    } else\
    \ {\n\t\tsb.append(ch);\n\t    }\n\t}\n\treturn sb.toString();", "        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        String vowels = \"aeiou\";\n \
    \       for (int i = 0; i < message.length(); i++) {\n            char current\
    \ = message.charAt(i);\n            int currentAscii = (int)current;\n       \
    \     // Uppercase\n            if (currentAscii >= 65 && currentAscii <= 90)\
    \ {\n                // If the current character is a vowel\n                if\
    \ (vowels.indexOf(current) != -1) {\n                    int newAscii = currentAscii\
    \ - 2;\n                    if (newAscii < 65) {\n                        newAscii\
    \ = newAscii + 26;\n                    }\n                    stringBuilder.append((char)newAscii);\n\
    \                } else {\n                    stringBuilder.append((char)(currentAscii\
    \ + 32));\n                }\n            } else if (currentAscii >= 97 && currentAscii\
    \ <= 122) {\n                // If the current character is a vowel\n        \
    \        if (vowels.indexOf(current) != -1) {\n                    int newAscii\
    \ = currentAscii - 2;\n                    if (newAscii < 97) {\n            \
    \            newAscii = newAscii + 26;\n                    }\n              \
    \      stringBuilder.append((char)newAscii);\n                } else {\n     \
    \               stringBuilder.append((char)(currentAscii - 32));\n           \
    \     }\n            } else {\n                stringBuilder.append(current);\n\
    \            }\n        }\n        return stringBuilder.toString();", "      \
    \  String enc = \"\";\n        String vowels = \"aeiou\";\n        String newVowels\
    \ = \"cdfghjklmnpqrstvwxyz\";\n        String result = \"\";\n        int val\
    \ = 0;\n        for (int i = 0; i < message.length(); i++) {\n            val\
    \ = (int)message.charAt(i);\n            if (val >= 97 && val <= 122) {\n    \
    \            val -= 32;\n            }\n            if (vowels.indexOf(message.charAt(i))\
    \ != -1) {\n                val = newVowels.charAt(vowels.indexOf(message.charAt(i)));\n\
    \            }\n            result += (char)val;\n        }\n        return result;",
  "        String result = \"\";\n        String vowels = \"aeiou\";\n        String\
    \ characters = \"abcdefghijklmnopqrstuvwxyz\";\n        for (int i = 0; i < message.length();\
    \ i++) {\n            String char_to_test = message.substring(i, i + 1);\n   \
    \         if (vowels.contains(char_to_test)) {\n                int index = vowels.indexOf(char_to_test);\n\
    \                index = (index + 2) % 5;\n                result += vowels.substring(index,\
    \ index + 1);\n            } else if (characters.contains(char_to_test)) {\n \
    \               int index = characters.indexOf(char_to_test);\n              \
    \  index = (index + 13) % 26;\n                if (index < 0) index += 26;\n \
    \               if (index > 25) index -= 26;\n                result += characters.substring(index,\
    \ index + 1);\n            } else {\n                result += char_to_test;\n\
    \            }\n        }\n        return result;", "        StringBuilder output\
    \ = new StringBuilder(message.length());\n        for (char c : message.toCharArray())\
    \ {\n            output.append(encode_char(c));\n        }\n        return output.toString();",
  "        StringBuilder sb = new StringBuilder();\n        String vowels = \"aeiou\"\
    ;\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                if (vowels.indexOf(Character.toLowerCase(c)) >= 0) {\n  \
    \                  int index = vowels.indexOf(Character.toLowerCase(c));\n   \
    \                 index = (index + 2) % 5;\n                    c = Character.toUpperCase(vowels.charAt(index));\n\
    \                } else {\n                    c = Character.toLowerCase(c);\n\
    \                }\n            } else if (Character.isLowerCase(c)) {\n     \
    \           if (vowels.indexOf(c) >= 0) {\n                    int index = vowels.indexOf(c);\n\
    \                    index = (index + 2) % 5;\n                    c = vowels.charAt(index);\n\
    \                } else {\n                    c = Character.toUpperCase(c);\n\
    \                }\n            }\n            sb.append(c);\n        }\n    \
    \    return sb.toString();", "      String lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n      String upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n      String encoded\
    \ = \"\";\n      for (int i = 0; i < message.length(); i++) {\n        char current\
    \ = message.charAt(i);\n        if (lower.indexOf(current) >= 0) {\n         \
    \ encoded += lower.charAt((lower.indexOf(current) + 2) % 26);\n        } else\
    \ if (upper.indexOf(current) >= 0) {\n          encoded += upper.charAt((upper.indexOf(current)\
    \ + 2) % 26);\n        } else {\n          encoded += current;\n        }\n  \
    \    }\n      return encoded;", "        String ans = \"\";\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                char d = Character.toLowerCase(c);\n\
    \                ans += move(d);\n            } else {\n                ans +=\
    \ move(c);\n            }\n        }\n        return ans;", "        // code here\n\
    \        // make a list of all vowels in the alphabet\n        List<Character>\
    \ vowels = new ArrayList<Character>();\n        for (char c : \"aeiou\".toCharArray())\
    \ {\n            vowels.add(c);\n        }\n        // create a list of each character\
    \ in the message\n        List<Character> messageList = new ArrayList<Character>();\n\
    \        for (char c : message.toCharArray()) {\n            messageList.add(c);\n\
    \        }\n        // create a new list of characters\n        List<Character>\
    \ encoded = new ArrayList<Character>();\n        // if the character is a vowel,\
    \ add the next vowel to the encoded list\n        // else, add the same character\n\
    \        for (char c : messageList) {\n            if (vowels.contains(c)) {\n\
    \                int index = vowels.indexOf(c);\n                if (index < 4)\
    \ {\n                    encoded.add(vowels.get(index + 2));\n               \
    \ } else {\n                    encoded.add(vowels.get(0));\n                }\n\
    \            } else {\n                encoded.add(c);\n            }\n      \
    \  }\n        String encodedMessage = \"\";\n        for (char c : encoded) {\n\
    \            encodedMessage += c;\n        }\n        return encodedMessage;",
  '        return "";', '        return "";', "        // TODO: Your code here\n \
    \       return \"\";", '        return null;', "        String encoded = \"\"\
    ;\n        for (char x : message.toCharArray()) {\n            if (Character.isUpperCase(x))\
    \ {\n                encoded += Character.toLowerCase(x);\n            } else\
    \ if (Character.isLowerCase(x)) {\n                encoded += Character.toUpperCase(x);\n\
    \            } else {\n                encoded += x;\n            }\n        }\n\
    \        String vowels = \"aeiou\";\n        String output = \"\";\n        String\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char x : encoded.toCharArray())\
    \ {\n            if (vowels.contains(Character.toString(x))) {\n             \
    \   int index = vowels.indexOf(x);\n                if (index + 2 >= vowels.length())\
    \ {\n                    output += vowels.charAt(index + 2 - vowels.length());\n\
    \                } else {\n                    output += vowels.charAt(index +\
    \ 2);\n                }\n            } else {\n                output += x;\n\
    \            }\n        }\n        return output;", "        StringBuffer result\
    \ = new StringBuffer();\n        char[] messageAsCharArray = message.toCharArray();\n\
    \        int shiftBy = 2;\n        for (char ch : messageAsCharArray) {\n    \
    \        char newCh = ch;\n            if (Character.isLetter(ch)) {\n       \
    \         if (Character.isUpperCase(ch)) {\n                    if (ch == 'Z')\
    \ {\n                        newCh = 'B';\n                    } else if (ch ==\
    \ 'Y') {\n                        newCh = 'A';\n                    } else {\n\
    \                        newCh = (char) (ch + shiftBy);\n                    }\n\
    \                } else {\n                    if (ch == 'z') {\n            \
    \            newCh = 'b';\n                    } else if (ch == 'y') {\n     \
    \                   newCh = 'a';\n                    } else {\n             \
    \           newCh = (char) (ch + shiftBy);\n                    }\n          \
    \      }\n            }\n            result.append(newCh);\n        }\n      \
    \  return result.toString();", "        // Fill in code here\n        int[] maps\
    \ = new int[26];\n        maps['a' - 'a'] = 'c';\n        maps['e' - 'a'] = 'g';\n\
    \        maps['i' - 'a'] = 'k';\n        maps['o' - 'a'] = 'm';\n        maps['u'\
    \ - 'a'] = 'o';\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (c >= 'a' && c <= 'z') {\n                sb.append((char) ('a'\
    \ + maps[c - 'a']));\n            } else if (c >= 'A' && c <= 'Z') {\n       \
    \         sb.append((char) ('A' + maps[c - 'A']));\n            } else {\n   \
    \             sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length;\
    \ i++) {\n            if (letters[i] == ' ') {\n                continue;\n  \
    \          } else if (letters[i] < 91) {\n                letters[i] += 32;\n\
    \            }\n            if (letters[i] == 'u') {\n                letters[i]\
    \ = 'a';\n            } else if (letters[i] == 'w') {\n                letters[i]\
    \ = 'b';\n            } else if (letters[i] == 'x') {\n                letters[i]\
    \ = 'c';\n            } else if (letters[i] == 'y') {\n                letters[i]\
    \ = 'd';\n            } else if (letters[i] == 'z') {\n                letters[i]\
    \ = 'e';\n            } else if (letters[i] == 'e') {\n                letters[i]\
    \ = 'g';\n            } else if (letters[i] == 'r') {\n                letters[i]\
    \ = 'h';\n            } else if (letters[i] == 't') {\n                letters[i]\
    \ = 'i';\n            } else if (letters[i] == 'y') {\n                letters[i]\
    \ = 'j';\n            } else if (letters[i] == 'u') {\n                letters[i]\
    \ = 'k';\n            } else if (letters[i] == 'i') {\n                letters[i]\
    \ = 'l';\n            } else if (letters[i] == 'o') {\n                letters[i]\
    \ = 'm';\n            } else if (letters[i] == 'p') {\n                letters[i]\
    \ = 'n';\n            } else if (letters[i] == 'a') {\n                letters[i]\
    \ = 'o';\n            } else if (letters[i] == 's') {\n                letters[i]\
    \ = 'p';\n            } else if (letters[i] == 'd') {\n                letters[i]\
    \ = 'q';\n            } else if (letters[i] == 'f') {\n                letters[i]\
    \ = 'r';\n            } else if (letters[i] == 'g') {\n", "        StringBuilder\
    \ result = new StringBuilder();\n        for (char c : message.toCharArray())\
    \ {\n            int offset = Character.isUpperCase(c) ? 'A' : 'a';\n        \
    \    int newChar = c - offset;\n            newChar = (newChar + 13) % 26;\n \
    \           newChar += offset;\n            result.append((char) newChar);\n \
    \       }\n        return result.toString();", "        char[] arr = message.toCharArray();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 'a')\
    \ {\n                arr[i] = 'c';\n            } else if (arr[i] == 'e') {\n\
    \                arr[i] = 'g';\n            } else if (arr[i] == 'i') {\n    \
    \            arr[i] = 'k';\n            } else if (arr[i] == 'o') {\n        \
    \        arr[i] = 'q';\n            } else if (arr[i] == 'u') {\n            \
    \    arr[i] = 'y';\n            } else if (arr[i] == 'A') {\n                arr[i]\
    \ = 'C';\n            } else if (arr[i] == 'E') {\n                arr[i] = 'G';\n\
    \            } else if (arr[i] == 'I') {\n                arr[i] = 'K';\n    \
    \        } else if (arr[i] == 'O') {\n                arr[i] = 'Q';\n        \
    \    } else if (arr[i] == 'U') {\n                arr[i] = 'Y';\n            }\
    \ else if (arr[i] == 'z') {\n                arr[i] = 'a';\n            } else\
    \ if (arr[i] == 'Z') {\n                arr[i] = 'A';\n            } else if (arr[i]\
    \ == 'b') {\n                arr[i] = 'a';\n            } else if (arr[i] == 'B')\
    \ {\n                arr[i] = 'A';\n            } else if (arr[i] == 'd') {\n\
    \                arr[i] = 'c';\n            } else if (arr[i] == 'D') {\n    \
    \            arr[i] = 'C';\n            } else if (arr[i] == 'f') {\n        \
    \        arr[i] = 'e';\n            } else if (arr[i] == 'F') {\n            \
    \    arr[i] = 'E';\n            } else if (arr[i] == 'h') {\n                arr[i]\
    \ = 'g';\n            } else if (arr[i", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String alphabetSwap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String\
    \ result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n     \
    \       char currentLetter = message.charAt(i);\n            if (alphabet.indexOf(currentLetter)\
    \ != -1) {\n                result += alphabetSwap.charAt(alphabet.indexOf(currentLetter));\n\
    \            } else if (alphabetSwap.indexOf(currentLetter) != -1) {\n       \
    \         result += alphabet.charAt(alphabetSwap.indexOf(currentLetter));\n  \
    \          } else {\n                result += currentLetter;\n            }\n\
    \        }\n        return result;", "        HashMap<Character, Character> map\
    \ = new HashMap<>();\n        map.put('a', 'c');\n        map.put('e', 'g');\n\
    \        map.put('i', 'k');\n        map.put('o', 'q');\n        map.put('u',\
    \ 'w');\n        map.put('A', 'C');\n        map.put('E', 'G');\n        map.put('I',\
    \ 'K');\n        map.put('O', 'Q');\n        map.put('U', 'W');\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++)\
    \ {\n            char c = message.charAt(i);\n            if (map.containsKey(c))\
    \ {\n                sb.append(map.get(c));\n            } else {\n          \
    \      sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        // TODO: Implement a solution\n        return null;", "        int offset\
    \ = 2;\n        char[] messageChars = message.toCharArray();\n        for (int\
    \ i = 0; i < messageChars.length; i++) {\n            char currentChar = messageChars[i];\n\
    \            if (currentChar >= 'a' && currentChar <= 'z') {\n               \
    \ messageChars[i] = (char) ('A' + (currentChar - 'a'));\n            } else if\
    \ (currentChar >= 'A' && currentChar <= 'Z') {\n                messageChars[i]\
    \ = (char) ('a' + (currentChar - 'A'));\n            }\n            if (currentChar\
    \ == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' ||\
    \ currentChar == 'u') {\n                messageChars[i] = (char) (currentChar\
    \ + offset);\n            }\n        }\n        return new String(messageChars);",
  "        // TODO: Fix this function\n        char[] msg_arr = message.toCharArray();\n\
    \        int shift = 2;\n        String vowels = \"aeiou\";\n        StringBuilder\
    \ result = new StringBuilder();\n        for (char ch : msg_arr) {\n         \
    \   if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n\
    \            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n\
    \            }\n            if (vowels.indexOf(ch) != -1) {\n                char\
    \ new_ch = (char) (ch + shift);\n                if (new_ch > 'z') {\n       \
    \             new_ch = (char) (new_ch - 26);\n                }\n            \
    \    result.append(new_ch);\n            } else {\n                result.append(ch);\n\
    \            }\n        }\n        return result.toString();", '        return
    "";', "        StringBuilder sb = new StringBuilder();\n        String vowels\
    \ = \"aeiou\";\n        String lowerCase = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \       String upperCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        for (int i\
    \ = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            int ind = lowerCase.indexOf(c);\n            if (ind >= 0) {\n  \
    \              c = lowerCase.charAt((ind + 2) % 26);\n            } else {\n \
    \               ind = upperCase.indexOf(c);\n                if (ind >= 0) {\n\
    \                    c = upperCase.charAt((ind + 2) % 26);\n                }\n\
    \            }\n            sb.append(c);\n        }\n        return sb.toString();",
  '        return "";', '        return null;', "        String result = \"\";\n \
    \       for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
    \            } else if (Character.isLowerCase(c)) {\n                result +=\
    \ Character.toUpperCase(c);\n            } else {\n                result += c;\n\
    \            }\n        }\n        for (int i = 0; i < result.length(); i++) {\n\
    \            char c = result.charAt(i);\n            switch (c) {\n          \
    \      case 'a':\n                    result = result.substring(0, i) + \"c\"\
    \ + result.substring(i + 1);\n                    break;\n                case\
    \ 'e':\n                    result = result.substring(0, i) + \"g\" + result.substring(i\
    \ + 1);\n                    break;\n                case 'i':\n             \
    \       result = result.substring(0, i) + \"k\" + result.substring(i + 1);\n \
    \                   break;\n                case 'o':\n                    result\
    \ = result.substring(0, i) + \"m\" + result.substring(i + 1);\n              \
    \      break;\n                case 'u':\n                    result = result.substring(0,\
    \ i) + \"o\" + result.substring(i + 1);\n                    break;\n        \
    \    }\n        }\n        return result;", "        String temp = message.toUpperCase();\n\
    \        StringBuilder sb = new StringBuilder();\n        String vowels = \"AEIOU\"\
    ;\n        char[] letter = temp.toCharArray();\n        for (int i = 0; i < letter.length;\
    \ i++) {\n            if (vowels.indexOf(letter[i]) != -1) {\n               \
    \ int index = (vowels.indexOf(letter[i]) + 2) % 5;\n                sb.append(vowels.charAt(index));\n\
    \            } else {\n                sb.append(letter[i]);\n            }\n\
    \        }\n        return sb.toString();", "        String result = \"\";\n \
    \       String alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n        for (int i = 0; i < message.length();\
    \ i++) {\n            if (letters.contains(message.substring(i, i + 1))) {\n \
    \               int index = letters.indexOf(message.substring(i, i + 1));\n  \
    \              result += letters.substring(index + 2, index + 3);\n          \
    \  } else if (alphabet.contains(message.substring(i, i + 1))) {\n            \
    \    int index = alphabet.indexOf(message.substring(i, i + 1));\n            \
    \    result += alphabet.substring(index + 2, index + 3);\n            } else {\n\
    \                result += message.substring(i, i + 1);\n            }\n     \
    \   }\n        return result;", '        return "";', "        // Your code here\n\
    \        String msg = message.toUpperCase();\n        String result = \"\";\n\
    \        Map<String, String> map = new HashMap<>();\n        map.put(\"A\", \"\
    C\");\n        map.put(\"E\", \"G\");\n        map.put(\"I\", \"K\");\n      \
    \  map.put(\"O\", \"Q\");\n        map.put(\"U\", \"W\");\n        for (char ch\
    \ : msg.toCharArray()) {\n            if (map.containsKey(String.valueOf(ch)))\
    \ {\n                result += map.get(String.valueOf(ch));\n            } else\
    \ {\n                result += ch;\n            }\n        }\n        return result;",
  '        return null;', "        if (message == null) return \"\";\n        StringBuilder\
    \ encoded = new StringBuilder();\n        List<Character> vowel = new ArrayList<Character>();\n\
    \        vowel.add('a');\n        vowel.add('e');\n        vowel.add('i');\n \
    \       vowel.add('o');\n        vowel.add('u');\n        vowel.add('A');\n  \
    \      vowel.add('E');\n        vowel.add('I');\n        vowel.add('O');\n   \
    \     vowel.add('U');\n        for (int i = 0; i < message.length(); i++) {\n\
    \            char c = message.charAt(i);\n            if (vowel.contains(c)) {\n\
    \                int pos = vowel.indexOf(c);\n                pos = (pos + 2)\
    \ % 5;\n                encoded.append(vowel.get(pos));\n            } else {\n\
    \                if (Character.isUpperCase(c)) {\n                    encoded.append(Character.toLowerCase(c));\n\
    \                } else {\n                    encoded.append(Character.toUpperCase(c));\n\
    \                }\n            }\n        }\n        return encoded.toString();",
  "        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u'};\n        char[] message_chars\
    \ = message.toCharArray();\n        for (int i = 0; i < message_chars.length;\
    \ i++) {\n            char char_item = message_chars[i];\n            if (Character.isUpperCase(char_item))\
    \ {\n                message_chars[i] = Character.toLowerCase(char_item);\n  \
    \          } else if (Character.isLowerCase(char_item)) {\n                message_chars[i]\
    \ = Character.toUpperCase(char_item);\n            }\n            if (Arrays.asList(vowels).contains(message_chars[i]))\
    \ {\n                message_chars[i] = (char) (message_chars[i] + 2);\n     \
    \       }\n        }\n        return new String(message_chars);", "        //\
    \ Write your code here\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (int i = 0; i < message.length(); i++) {\n            sb.append(encodeChar(message.charAt(i)));\n\
    \        }\n        return sb.toString();", "        Map<Character, Character>\
    \ replacements = new HashMap<>();\n        replacements.put('a', 'c');\n     \
    \   replacements.put('A', 'C');\n        replacements.put('e', 'g');\n       \
    \ replacements.put('E', 'G');\n        replacements.put('i', 'k');\n        replacements.put('I',\
    \ 'K');\n        replacements.put('o', 'q');\n        replacements.put('O', 'Q');\n\
    \        replacements.put('u', 'w');\n        replacements.put('U', 'W');\n  \
    \      replacements.put('y', 'a');\n        replacements.put('Y', 'A');\n    \
    \    replacements.put(' ',' ');\n        return message.chars()\n            .mapToObj(x\
    \ -> (char)x)\n            .map(x -> replacements.getOrDefault(x, 'x'))\n    \
    \        .map(x -> Character.toString(x))\n            .reduce(\"\", (a, b) ->\
    \ a + b);", "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        Map<Character,\
    \ Character> vowelMap = new HashMap<>();\n        for (int i = 0; i < vowels.length;\
    \ i++) {\n            char vowel = vowels[i];\n            char encryptedVowel\
    \ = vowels[(i + 2) % vowels.length];\n            vowelMap.put(vowel, encryptedVowel);\n\
    \            vowelMap.put(Character.toUpperCase(vowel), Character.toUpperCase(encryptedVowel));\n\
    \        }\n        char[] messageChars = message.toCharArray();\n        for\
    \ (int i = 0; i < messageChars.length; i++) {\n            char messageChar =\
    \ messageChars[i];\n            if (vowelMap.containsKey(messageChar)) {\n   \
    \             messageChars[i] = vowelMap.get(messageChar);\n            } else\
    \ {\n                messageChars[i] = Character.isUpperCase(messageChar) ? Character.toLowerCase(messageChar)\
    \ : Character.toUpperCase(messageChar);\n            }\n        }\n        return\
    \ new String(messageChars);", "        int n = message.length();\n        char[]\
    \ chars = message.toCharArray();\n        for (int i = 0; i < n; i++) {\n    \
    \        char c = chars[i];\n            if (c >= 'a' && c <= 'z') {\n       \
    \         chars[i] = Character.toUpperCase(c);\n            } else if (c >= 'A'\
    \ && c <= 'Z') {\n                chars[i] = Character.toLowerCase(c);\n     \
    \       } else if (c == 'a') {\n                chars[i] = 'c';\n            }\
    \ else if (c == 'e') {\n                chars[i] = 'g';\n            } else if\
    \ (c == 'i') {\n                chars[i] = 'k';\n            } else if (c == 'o')\
    \ {\n                chars[i] = 'q';\n            } else if (c == 'u') {\n   \
    \             chars[i] = 'y';\n            } else if (c == 'A') {\n          \
    \      chars[i] = 'C';\n            } else if (c == 'E') {\n                chars[i]\
    \ = 'G';\n            } else if (c == 'I') {\n                chars[i] = 'K';\n\
    \            } else if (c == 'O') {\n                chars[i] = 'Q';\n       \
    \     } else if (c == 'U') {\n                chars[i] = 'Y';\n            }\n\
    \        }\n        return new String(chars);", "        return new String(message.chars()\n\
    \                .map(ch -> Character.isUpperCase(ch) ? Character.toLowerCase(ch)\
    \ : Character.toUpperCase(ch))\n                .map(Problem::vowelSwap)\n   \
    \             .toArray(), 0, message.length());", "        StringBuilder builder\
    \ = new StringBuilder();\n        String vowels = \"aeiou\";\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
    \            } else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n\
    \            }\n            if (vowels.indexOf(c) != -1) {\n                int\
    \ vowelIndex = vowels.indexOf(c);\n                vowelIndex = (vowelIndex +\
    \ 2) % vowels.length();\n                c = vowels.charAt(vowelIndex);\n    \
    \        }\n            builder.append(c);\n        }\n        return builder.toString();",
  '        return null;', "        StringBuilder enc_str = new StringBuilder();\n\
    \        String vowels = \"aeiou\";\n        int c = 0;\n        while (c < message.length())\
    \ {\n            char ch = message.charAt(c);\n            if (vowels.indexOf(ch)\
    \ != -1) {\n                int vpos = vowels.indexOf(ch);\n                int\
    \ new_vpos = (vpos + 2) % 5;\n                enc_str.append(vowels.charAt(new_vpos));\n\
    \            } else {\n                enc_str.append(ch);\n            }\n  \
    \          c++;\n        }\n        return enc_str.toString();", "        char[]\
    \ words = message.toCharArray();\n        for (int i = 0; i < words.length; i++)\
    \ {\n            if (Character.isUpperCase(words[i])) {\n                words[i]\
    \ = Character.toLowerCase(words[i]);\n            } else {\n                words[i]\
    \ = Character.toUpperCase(words[i]);\n            }\n        }\n        String[]\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] alphabet = {\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"};\n        String answer = new String(words);\n     \
    \   int index = 0;\n        for (int i = 0; i < vowels.length; i++) {\n      \
    \      for (int j = 0; j < answer.length(); j++) {\n                if (vowels[i].equals(answer.substring(j,\
    \ j + 1))) {\n                    for (int k = 0; k < alphabet.length; k++) {\n\
    \                        if (alphabet[k].equals(answer.substring(j, j + 1))) {\n\
    \                            index = k;\n                        }\n         \
    \           }\n                    answer = answer.substring(0, j) + alphabet[index\
    \ + 2] + answer.substring(j + 1);\n                }\n            }\n        }\n\
    \        return answer;", "        char arr[] = message.toCharArray();\n     \
    \   String str = \"\";\n        for(int i = 0; i < arr.length; i++) {\n      \
    \      if(Character.isLowerCase(arr[i]))\n                arr[i] = Character.toUpperCase(arr[i]);\n\
    \            else\n                arr[i] = Character.toLowerCase(arr[i]);\n \
    \           if(isVowel(arr[i])) {\n                int temp = arr[i] - 65;\n \
    \               arr[i] = (char)((temp + 2) % 26 + 65);\n            }\n      \
    \      str += arr[i];\n        }\n        return str;", '        return null;',
  '        return message.toUpperCase();', "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i <\
    \ message.length(); i++) {\n            char c = message.charAt(i);\n        \
    \    if (Character.isLowerCase(c)) {\n                sb.append(alphabet.charAt((alphabet.indexOf(c)\
    \ + 1) % alphabet.length()));\n            } else if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toUpperCase(alphabet.charAt((alphabet.indexOf(Character.toLowerCase(c))\
    \ + 1) % alphabet.length())));\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();", '        return null;',
  '        return null;', "        StringBuilder encodedMessage = new StringBuilder();\n\
    \        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c))\n\
    \                encodedMessage.append(Character.toLowerCase(c));\n          \
    \  else if (Character.isLowerCase(c))\n                encodedMessage.append(Character.toUpperCase(c));\n\
    \            else\n                encodedMessage.append(c);\n        }\n    \
    \    StringBuilder result = new StringBuilder();\n        for (char c : encodedMessage.toString().toCharArray())\
    \ {\n            int tmp = c + 2;\n            if (Character.isAlphabetic(c))\
    \ {\n                if (tmp > 'z')\n                    tmp -= 26;\n        \
    \        result.append((char) tmp);\n            } else {\n                result.append(c);\n\
    \            }\n        }\n        return result.toString();", "        String\
    \ result = \"\";\n        for (char c : message.toCharArray()) {\n           \
    \ if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
    \            } else if (Character.isLowerCase(c)) {\n                result +=\
    \ Character.toUpperCase(c);\n            } else {\n                result += c;\n\
    \            }\n        }\n        return result;", "        char[] message_arr\
    \ = message.toCharArray();\n        for (int i = 0; i < message_arr.length; i++)\
    \ {\n            if (Character.isUpperCase(message_arr[i])) {\n              \
    \  message_arr[i] = Character.toLowerCase(message_arr[i]);\n            } else\
    \ {\n                message_arr[i] = Character.toUpperCase(message_arr[i]);\n\
    \            }\n        }\n        for (int i = 0; i < message_arr.length; i++)\
    \ {\n            switch (message_arr[i]) {\n                case 'a':\n      \
    \              message_arr[i] = 'c';\n                    break;\n           \
    \     case 'e':\n                    message_arr[i] = 'g';\n                 \
    \   break;\n                case 'i':\n                    message_arr[i] = 'k';\n\
    \                    break;\n                case 'o':\n                    message_arr[i]\
    \ = 'q';\n                    break;\n                case 'u':\n            \
    \        message_arr[i] = 'y';\n                    break;\n                case\
    \ 'A':\n                    message_arr[i] = 'C';\n                    break;\n\
    \                case 'E':\n                    message_arr[i] = 'G';\n      \
    \              break;\n                case 'I':\n                    message_arr[i]\
    \ = 'K';\n                    break;\n                case 'O':\n            \
    \        message_arr[i] = 'Q';\n                    break;\n                case\
    \ 'U':\n                    message_arr[i] = 'Y';\n                    break;\n\
    \            }\n        }\n        return new String(message_arr);", '        return
    null;', "        // write code here\n        return \"\";", '        return "";',
  "        char[] result = new char[message.length()];\n        for (int i = 0; i\
    \ < message.length(); i++) {\n            char c = message.charAt(i);\n      \
    \      if (Character.isUpperCase(c)) {\n                result[i] = Character.toLowerCase(c);\n\
    \            } else if (Character.isLowerCase(c)) {\n                result[i]\
    \ = Character.toUpperCase(c);\n            } else {\n                result[i]\
    \ = c;\n            }\n        }\n        return new String(result);", "     \
    \   String[] splits = message.split(\"\\\\s+\");\n        String ans = \"\";\n\
    \        for (String s : splits) {\n            String s1 = s.toUpperCase();\n\
    \            StringBuilder string = new StringBuilder();\n            for (int\
    \ i = 0; i < s1.length(); i++) {\n                if (Character.isAlphabetic(s1.charAt(i)))\
    \ {\n                    string.append(s1.charAt(i));\n                }\n   \
    \         }\n            s1 = string.toString();\n            for (int i = 0;\
    \ i < s1.length(); i++) {\n                int ascii = (int) s1.charAt(i);\n \
    \               if (ascii >= 65 && ascii <= 90) {\n                    if (ascii\
    \ <= 89) {\n                        int newAscii = ascii + 2;\n              \
    \          ans += (char) newAscii;\n                    } else if (ascii == 90)\
    \ {\n                        ans += 'A';\n                    } else if (ascii\
    \ == 91) {\n                        ans += 'B';\n                    }\n     \
    \           }\n            }\n            ans += \" \";\n        }\n        return\
    \ ans;", '        return null;', '        return "";', "        // Your code here\n\
    \        return \"\";", "        HashMap<Character, Character> map = new HashMap<>();\n\
    \        String[] vowels = new String[] {\"A\", \"E\", \"I\", \"O\", \"U\"};\n\
    \        String[] consonants = new String[] {\"B\", \"C\", \"D\", \"F\", \"G\"\
    , \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n        String[] nvowels = new String[]\
    \ {\"C\", \"F\", \"I\", \"L\", \"O\", \"R\", \"U\", \"X\"};\n        String[]\
    \ nconsonants = new String[] {\"D\", \"G\", \"J\", \"M\", \"P\", \"S\", \"V\"\
    , \"Y\"};\n        for (int i = 0; i < vowels.length; i++) {\n            map.put(vowels[i].charAt(0),\
    \ nvowels[i].charAt(0));\n            map.put(Character.toLowerCase(vowels[i].charAt(0)),\
    \ Character.toLowerCase(nvowels[i].charAt(0)));\n        }\n        for (int i\
    \ = 0; i < consonants.length; i++) {\n            map.put(consonants[i].charAt(0),\
    \ nconsonants[i].charAt(0));\n            map.put(Character.toLowerCase(consonants[i].charAt(0)),\
    \ Character.toLowerCase(nconsonants[i].charAt(0)));\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++)\
    \ {\n            char c = message.charAt(i);\n            sb.append(map.getOrDefault(c,\
    \ Character.toUpperCase(c)));\n        }\n        return sb.toString();", "  \
    \      char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n     \
    \   HashMap<Character, Character> map = new HashMap<>();\n        for (int i =\
    \ 0; i < alphabet.length; i++) {\n            if (i < 20) {\n                map.put(alphabet[i],\
    \ alphabet[i + 2]);\n            } else {\n                map.put(alphabet[i],\
    \ alphabet[i - 20]);\n            }\n        }\n        char[] msg = message.toCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ msg.length; i++) {\n            if (map.containsKey(msg[i])) {\n           \
    \     sb.append(map.get(msg[i]));\n            } else {\n                sb.append(msg[i]);\n\
    \            }\n        }\n        return sb.toString();", '        return null;',
  "        // TODO\n        return \"\";", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (c >= 'a' && c <= 'z') {\n                c = Character.toUpperCase(c);\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                c = Character.toLowerCase(c);\n\
    \            }\n            sb.append(c);\n        }\n        String s = sb.toString();\n\
    \        String t = s.replaceAll(\"[AEIOU]\", \"1\").replaceAll(\"[aeiou]\", \"\
    1\");\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                char d = t.charAt(i);\n                if (d == '1') {\n    \
    \                c = c == 'a' ? 'c' : (c == 'e' ? 'g' : (c == 'i' ? 'k' : (c ==\
    \ 'o' ? 'q' : 's')));\n                } else {\n                    c++;\n  \
    \                  c++;\n                }\n            }\n            t = t.substring(0,\
    \ i) + c + t.substring(i + 1);\n        }\n        return t;", "        String\
    \ msg = message.toUpperCase();\n        String encode = \"\";\n        String\
    \ vowels = \"AEIOU\";\n        for (int i = 0; i < msg.length(); i++) {\n    \
    \        char c = msg.charAt(i);\n            int index = vowels.indexOf(c);\n\
    \            if (index != -1) {\n                encode += vowels.charAt((index\
    \ + 2) % 5);\n            } else {\n                encode += c;\n           \
    \ }\n        }\n        return encode;", "        StringBuilder sb = new StringBuilder();\n\
    \        String encoded = \"\";\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        int idx;\n        for (int i = 0; i < message.length(); i++) {\n  \
    \          if (message.charAt(i) == ' ') {\n                sb.append(' ');\n\
    \            } else {\n                if (Character.isUpperCase(message.charAt(i)))\
    \ {\n                    idx = alphabet.indexOf(Character.toLowerCase(message.charAt(i)));\n\
    \                    idx = (idx + 2) % 26;\n                    if (vowel(alphabet.charAt(idx)))\
    \ {\n                        idx = (idx + 2) % 26;\n                    }\n  \
    \                  sb.append(Character.toUpperCase(alphabet.charAt(idx)));\n \
    \               } else {\n                    idx = alphabet.indexOf(message.charAt(i));\n\
    \                    idx = (idx + 2) % 26;\n                    if (vowel(alphabet.charAt(idx)))\
    \ {\n                        idx = (idx + 2) % 26;\n                    }\n  \
    \                  sb.append(alphabet.charAt(idx));\n                }\n     \
    \       }\n        }\n        encoded = sb.toString();\n        return encoded;",
  '        return null;', "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        StringBuilder builder = new StringBuilder();\n        for (char letter\
    \ : message.toCharArray()) {\n            int index = alphabet.indexOf(letter);\n\
    \            if (index == -1) {\n                index = alphabet.indexOf(Character.toLowerCase(letter));\n\
    \            }\n            if (index != -1) {\n                index = (index\
    \ + 2) % alphabet.length();\n                if (Character.isUpperCase(letter))\
    \ {\n                    builder.append(Character.toUpperCase(alphabet.charAt(index)));\n\
    \                } else {\n                    builder.append(alphabet.charAt(index));\n\
    \                }\n            } else {\n                builder.append(letter);\n\
    \            }\n        }\n        return builder.toString();", '        return
    null;', "        String res = \"\";\n        String vowels = \"AEIOU\";\n    \
    \    String newVowels = \"CGFKPS\";\n        int newVowelIndex = 0;\n        for\
    \ (int i = 0; i < message.length(); i++) {\n            String currChar = Character.toString(message.charAt(i));\n\
    \            if (vowels.contains(currChar.toUpperCase())) {\n                res\
    \ += newVowels.charAt(newVowelIndex);\n                newVowelIndex = (newVowelIndex\
    \ + 1) % newVowels.length();\n            } else {\n                res += currChar.toUpperCase().equals(currChar)\
    \ ? currChar.toLowerCase() : currChar.toUpperCase();\n            }\n        }\n\
    \        return res;", "        String ret = \"\";\n        for (char c : message.toCharArray())\
    \ {\n            char n = ' ';\n            if (Character.isUpperCase(c)) {\n\
    \                n = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c))\
    \ {\n                n = Character.toUpperCase(c);\n            }\n          \
    \  switch (n) {\n                case 'a':\n                    ret += 'c';\n\
    \                    break;\n                case 'e':\n                    ret\
    \ += 'g';\n                    break;\n                case 'i':\n           \
    \         ret += 'k';\n                    break;\n                case 'o':\n\
    \                    ret += 'q';\n                    break;\n               \
    \ case 'u':\n                    ret += 'y';\n                    break;\n   \
    \             default:\n                    ret += n;\n            }\n       \
    \ }\n        return ret;", "        String result = \"\";\n        String vowelString\
    \ = \"aeiouAEIOU\";\n        String alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        String newAlphabet = \"cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\"\
    ;\n        for (int i = 0; i < message.length(); i++) {\n            char currentChar\
    \ = message.charAt(i);\n            if (vowelString.indexOf(currentChar) >= 0)\
    \ {\n                result += newAlphabet.charAt(alphabet.indexOf(currentChar));\n\
    \            } else {\n                result += currentChar;\n            }\n\
    \        }\n        return result;", "        // TODO: implement this function!\n\
    \        String result = \"\";\n        char[] characters = message.toCharArray();\n\
    \        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for (char c : characters)\
    \ {\n            if (Character.isUpperCase(c)) {\n                result += Character.toLowerCase(c);\n\
    \            } else if (Character.isLowerCase(c)) {\n                result +=\
    \ Character.toUpperCase(c);\n            } else {\n                result += c;\n\
    \            }\n        }\n        for (int i = 0; i < vowels.length; i++) {\n\
    \            result = result.replace(vowels[i], (char) (vowels[i] + 2));\n   \
    \     }\n        return result;", '        throw new UnsupportedOperationException("Not
    implemented");', '        return message;', '        return new String();', '        return
    message;', '        return message;', '        return "TODO";', '        return
    null;', "        StringBuilder output = new StringBuilder();\n        for (char\
    \ c : message.toCharArray()) {\n            if (Character.isUpperCase(c))\n  \
    \              output.append(Character.toLowerCase(c));\n            else if (Character.isLowerCase(c))\n\
    \                output.append(Character.toUpperCase(c));\n            else\n\
    \                output.append(c);\n        }\n        String vowel = \"aeiou\"\
    ;\n        String vowel_next_next = \"cgkmoqsuwy\";\n        String vowel_next\
    \ = \"bfhjlnprtvxz\";\n        String vowels = vowel + vowel_next + vowel_next_next;\n\
    \        HashMap<Character, Character> map = new HashMap<>();\n        for (int\
    \ i = 0; i < vowel.length(); i++) {\n            map.put(vowel.charAt(i), vowel_next_next.charAt(i));\n\
    \            map.put(Character.toUpperCase(vowel.charAt(i)), Character.toUpperCase(vowel_next_next.charAt(i)));\n\
    \        }\n        for (int i = 0; i < vowel_next.length(); i++) {\n        \
    \    map.put(vowel_next.charAt(i), vowel_next_next.charAt(i + 1));\n         \
    \   map.put(Character.toUpperCase(vowel_next.charAt(i)), Character.toUpperCase(vowel_next_next.charAt(i\
    \ + 1)));\n        }\n        map.put('x', 'a');\n        map.put('X', 'A');\n\
    \        map.put('z', 'b');\n        map.put('Z', 'B');\n        for (int i =\
    \ 0; i < output.length(); i++) {\n            if (vowels.indexOf(output.charAt(i))\
    \ != -1) {\n                output.setCharAt(i, map.get(output.charAt(i)));\n\
    \            }\n        }\n        return output.toString();", "        String\
    \ encoded = \"\";\n        String vowels = \"aeiou\";\n        String upper_case\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String lower_case = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String upper_case_encoded = \"CDEFGHIJKLMNOPQRSTUVWXYZAB\";\n     \
    \   String lower_case_encoded = \"cdefghijklmnopqrstuvwxyzab\";\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            if (vowels.indexOf(message.charAt(i))\
    \ != -1) {\n                encoded += (char)lower_case_encoded.charAt(lower_case.indexOf(message.charAt(i)));\n\
    \            } else if (lower_case.indexOf(message.charAt(i)) != -1) {\n     \
    \           encoded += (char)lower_case_encoded.charAt(lower_case.indexOf(message.charAt(i)));\n\
    \            } else if (upper_case.indexOf(message.charAt(i)) != -1) {\n     \
    \           encoded += (char)upper_case_encoded.charAt(upper_case.indexOf(message.charAt(i)));\n\
    \            } else {\n                encoded += message.charAt(i);\n       \
    \     }\n        }\n        return encoded;", "        final String alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n        final String vowels = \"aeiou\";\n\
    \        char[] encoded = new char[message.length()];\n        for (int i = 0;\
    \ i < message.length(); i++) {\n            char c = message.charAt(i);\n    \
    \        if (vowels.indexOf(c) != -1) {\n                int loc = alphabet.indexOf(c);\n\
    \                encoded[i] = alphabet.charAt((loc + 2) % alphabet.length());\n\
    \            } else {\n                encoded[i] = c;\n            }\n      \
    \  }\n        return new String(encoded);", '        return "";', "        String\
    \ ret = \"\";\n        for (char c : message.toCharArray()) {\n            int\
    \ tmp = c;\n            if (c == ' ')\n                ret += \" \";\n       \
    \     else if (c == 'z') {\n                ret += 'B';\n            } else if\
    \ (c == 'Z') {\n                ret += 'b';\n            } else if (c == 'y')\
    \ {\n                ret += 'A';\n            } else if (c == 'Y') {\n       \
    \         ret += 'a';\n            } else if (c == 'x') {\n                ret\
    \ += '@';\n            } else if (c == 'X') {\n                ret += '^';\n \
    \           } else if (c == 'w') {\n                ret += '>';\n            }\
    \ else if (c == 'W') {\n                ret += '<';\n            } else if (c\
    \ == 'v') {\n                ret += '?';\n            } else if (c == 'V') {\n\
    \                ret += '/';\n            } else if (c == 'u') {\n           \
    \     ret += ']';\n            } else if (c == 'U') {\n                ret +=\
    \ '[';\n            } else if (c == 't') {\n                ret += '}';\n    \
    \        } else if (c == 'T') {\n                ret += '{';\n            } else\
    \ if (c == 's') {\n                ret += ')';\n            } else if (c == 'S')\
    \ {\n                ret += '(';\n            } else if (c == 'r') {\n       \
    \         ret += '3';\n            } else if (c == 'R') {\n                ret\
    \ += '#';\n            } else if (c == 'q') {\n                ret += '2';\n \
    \           } else if (c == 'Q') {\n                ret += '\"';\n           \
    \ } else if (c == 'p') {\n                ret += '1';\n            } else if (c\
    \ == 'P') {\n                ret += '!';\n            } else if (c == 'o') {\n\
    \                ret += '>';\n            } else if (c == 'O') {\n           \
    \     ret += '<';\n            } else if (c == 'n') {\n                ret", " \
    \       // TODO: You're going to have to write your own tests for this one.\n\
    \        return \"\";", "        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .toCharArray();\n        HashMap<Character, Integer> alphabet_mapping = new HashMap<Character,\
    \ Integer>();\n        int length = alphabet.length;\n        for (int i = 0;\
    \ i < length; i++) {\n            alphabet_mapping.put(alphabet[i], i);\n    \
    \    }\n        String[] message_array = message.split(\"\");\n        String\
    \ encoded_message = \"\";\n        for (String letter : message_array) {\n   \
    \         if (alphabet_mapping.containsKey(letter.toLowerCase().charAt(0))) {\n\
    \                int index = alphabet_mapping.get(letter.toLowerCase().charAt(0));\n\
    \                if (index < (length - 2)) {\n                    encoded_message\
    \ += alphabet[index + 2];\n                } else {\n                    encoded_message\
    \ += alphabet[(index + 2) - length];\n                }\n            } else {\n\
    \                encoded_message += letter;\n            }\n        }\n      \
    \  return encoded_message;", "        String encoded = \"\";\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                encoded += Character.toLowerCase(c);\n\
    \            } else if (Character.isLowerCase(c)) {\n                encoded +=\
    \ Character.toUpperCase(c);\n            } else {\n                encoded +=\
    \ c;\n            }\n        }\n        return encoded;", "        String str1\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        String str2 = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        int str1l = str1.length();\n        int str2l = str2.length();\n  \
    \      char[] c1 = str1.toCharArray();\n        char[] c2 = str2.toCharArray();\n\
    \        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            int index = str1.indexOf(c);\n\
    \            if (index > -1) {\n                int idx = (index + 2) % str1l;\n\
    \                sb.append(c1[idx]);\n            } else {\n                index\
    \ = str2.indexOf(c);\n                if (index > -1) {\n                    int\
    \ idx = (index + 2) % str2l;\n                    sb.append(c2[idx]);\n      \
    \          } else {\n                    sb.append(c);\n                }\n  \
    \          }\n        }\n        return sb.toString();", "        StringBuilder\
    \ build = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            int j = message.charAt(i);\n            if (Character.isUpperCase(j))\
    \ {\n                j = Character.toLowerCase(j);\n            } else {\n   \
    \             j = Character.toUpperCase(j);\n            }\n            switch\
    \ (j) {\n                case 'a': j = 'c'; break;\n                case 'e':\
    \ j = 'g'; break;\n                case 'i': j = 'k'; break;\n               \
    \ case 'o': j = 'q'; break;\n                case 'u': j = 'y'; break;\n     \
    \       }\n            build.append((char)j);\n        }\n        return build.toString();",
  '        return "";', '        return "";', "        // Implement the function here\n\
    \        return null;", "        message = message.toUpperCase();\n        char[]\
    \ vowels = {'A', 'E', 'I', 'O', 'U'};\n        char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .toCharArray();\n        HashMap<Character, Integer> map = new HashMap<>();\n\
    \        for (int i = 0; i < vowels.length; i++)\n            map.put(vowels[i],\
    \ i);\n        char[] msg = message.toCharArray();\n        for (int i = 0; i\
    \ < msg.length; i++) {\n            if (map.containsKey(msg[i])) {\n         \
    \       int index = map.get(msg[i]);\n                if (index == vowels.length\
    \ - 1)\n                    msg[i] = vowels[0];\n                else\n      \
    \              msg[i] = vowels[index + 1];\n            }\n        }\n       \
    \ return new String(msg);", "        // TODO: write your code here\n        return\
    \ null;", "      char[] input_letters = message.toCharArray();\n      char[] output_letters\
    \ = new char[input_letters.length];\n      int count = 0;\n      for (char letter\
    \ : input_letters) {\n        if (Character.isLetter(letter)) {\n          if\
    \ (Character.isUpperCase(letter)) {\n            letter = Character.toLowerCase(letter);\n\
    \          } else {\n            letter = Character.toUpperCase(letter);\n   \
    \       }\n          if (letter == 'a') {\n            letter = 'c';\n       \
    \   } else if (letter == 'e') {\n            letter = 'g';\n          } else if\
    \ (letter == 'i') {\n            letter = 'k';\n          } else if (letter ==\
    \ 'o') {\n            letter = 'q';\n          } else if (letter == 'u') {\n \
    \           letter = 's';\n          } else if (letter == 'y') {\n           \
    \ letter = 'a';\n          } else {\n            letter++;\n          }\n    \
    \    }\n        output_letters[count] = letter;\n        count++;\n      }\n \
    \     return new String(output_letters);", "        final String vowels = \"aeiou\"\
    ;\n        final String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        StringBuilder\
    \ result = new StringBuilder();\n        for (char c : message.toCharArray())\
    \ {\n            int index = alphabet.indexOf(Character.toLowerCase(c));\n   \
    \         if (index != -1) {\n                result.append(Character.isUpperCase(c)\
    \ ? \n                              Character.toUpperCase(alphabet.charAt((index\
    \ + 2) % 26)) :\n                              alphabet.charAt((index + 2) % 26));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n        return result.toString();", "        char[] temp = message.toCharArray();\n\
    \        for (int i = 0; i < temp.length; i++) {\n            if (Character.isUpperCase(temp[i]))\
    \ {\n                temp[i] = Character.toLowerCase(temp[i]);\n            }\
    \ else {\n                temp[i] = Character.toUpperCase(temp[i]);\n        \
    \    }\n        }\n        String newMessage = new String(temp);\n        newMessage\
    \ = newMessage.replaceAll(\"[aeiou]\", \"*\");\n        newMessage = newMessage.replaceAll(\"\
    [aeiou]\", \"*\");\n        newMessage = newMessage.replaceAll(\"[b-df-hj-np-tv-z]\"\
    , \"$0\");\n        newMessage = newMessage.replaceAll(\"[c-e-g-i-k-m-o-q-s-u-w-y-a]\"\
    , \"$0$0\");\n        newMessage = newMessage.replaceAll(\"[d-f-h-j-l-n-p-r-t-v-x-z-b]\"\
    , \"$0$0$0\");\n        newMessage = newMessage.replaceAll(\"[e-g-i-k-m-o-q-s-u-w-y-a-c]\"\
    , \"$0$0$0$0\");\n        newMessage = newMessage.replaceAll(\"[f-h-j-l-n-p-r-t-v-x-z-b-d]\"\
    , \"$0$0$0$0$0\");\n        newMessage = newMessage.replaceAll(\"[g-i-k-m-o-q-s-u-w-y-a-c-e]\"\
    , \"$0$0$0$0$0$0\");\n        newMessage = newMessage.replaceAll(\"[h-j-l-n-p-r-t-v-x-z-b-d-f]\"\
    , \"$0$0$0$0$0$0$0\");\n        newMessage = newMessage.replaceAll(\"[i-k-m-o-q-s-u-w-y-a-c-e-g]\"\
    , \"$0$0$0", "        char[] charArray = message.toCharArray();\n        for (int\
    \ i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n  \
    \          if(c >= 'a' && c <= 'z') {\n                charArray[i] = (char)('A'\
    \ + (c - 'a'));\n            } else if(c >= 'A' && c <= 'Z') {\n             \
    \   charArray[i] = (char)('a' + (c - 'A'));\n            } else if(c == 'u') {\n\
    \                charArray[i] = 'w';\n            } else if(c == 'U') {\n    \
    \            charArray[i] = 'W';\n            } else if(c == 'o') {\n        \
    \        charArray[i] = 'q';\n            } else if(c == 'O') {\n            \
    \    charArray[i] = 'Q';\n            } else if(c == 'i') {\n                charArray[i]\
    \ = 'k';\n            } else if(c == 'I') {\n                charArray[i] = 'K';\n\
    \            } else if(c == 'e') {\n                charArray[i] = 'g';\n    \
    \        } else if(c == 'E') {\n                charArray[i] = 'G';\n        \
    \    } else if(c == 'a') {\n                charArray[i] = 'c';\n            }\
    \ else if(c == 'A') {\n                charArray[i] = 'C';\n            }\n  \
    \      }\n        return new String(charArray);", "        String alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        int len = alpha.length();\n        String vowels = \"aeiou\";\n   \
    \     StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' &&\
    \ c <= 'z') {\n                if (vowels.indexOf(c) >= 0) {\n               \
    \     int index = vowels.indexOf(c);\n                    c = alpha.charAt((index\
    \ + 2) % len);\n                } else {\n                    c = alpha.charAt((alpha.indexOf(c)\
    \ + 2) % len);\n                }\n            } else if (c >= 'A' && c <= 'Z')\
    \ {\n                if (vowels.indexOf(c) >= 0) {\n                    int index\
    \ = vowels.indexOf(c);\n                    c = alpha.toUpperCase().charAt((index\
    \ + 2) % len);\n                } else {\n                    c = alpha.toUpperCase().charAt((alpha.indexOf(c)\
    \ + 2) % len);\n                }\n            }\n            sb.append(c);\n\
    \        }\n        return sb.toString();", "        HashMap<Character, Character>\
    \ map = new HashMap<>();\n        map.put('a', 'c');\n        map.put('e', 'g');\n\
    \        map.put('i', 'k');\n        map.put('o', 'q');\n        map.put('u',\
    \ 'w');\n        map.put('A', 'C');\n        map.put('E', 'G');\n        map.put('I',\
    \ 'K');\n        map.put('O', 'Q');\n        map.put('U', 'W');\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (map.containsKey(c))\n\
    \                builder.append(map.get(c));\n            else\n             \
    \   builder.append(c);\n        }\n        return builder.toString();", "    \
    \    String result = \"\";\n        for (char c : message.toCharArray()) {\n \
    \           result += c == ' ' ? ' ' : getVowel(c);\n        }\n        return\
    \ result;", '        return null;', "        String vowels = \"aeiou\";\n    \
    \    String result = \"\";\n        for (int i = 0; i < message.length(); i++)\
    \ {\n            if (vowels.indexOf(message.charAt(i)) != -1) {\n            \
    \    result += vowels.charAt((vowels.indexOf(message.charAt(i)) + 2) % 5);\n \
    \           } else {\n                result += Character.toUpperCase(message.charAt(i));\n\
    \            }\n        }\n        return result;", "        char[] arr = message.toCharArray();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n\
    \            if (c >= 'a' && c <= 'z') {\n                arr[i] = (char) (c -\
    \ 32);\n            } else if (c >= 'A' && c <= 'Z') {\n                arr[i]\
    \ = (char) (c + 32);\n            } else if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n                arr[i] = (char) (c + 2);\n     \
    \       } else if (c == 'Y') {\n                arr[i] = 'A';\n            } else\
    \ if (c == 'Z') {\n                arr[i] = 'B';\n            }\n        }\n \
    \       return new String(arr);", '        return null;', "        String vowels\
    \ = \"aeiou\";\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  \
    \      String upperAlphabet = alphabet.toUpperCase();\n        StringBuilder result\
    \ = new StringBuilder();\n        for (char c : message.toCharArray()) {\n   \
    \         StringBuilder letter = new StringBuilder();\n            if (Character.isUpperCase(c))\
    \ {\n                letter.append(Character.toLowerCase(c));\n            } else\
    \ {\n                letter.append(c);\n            }\n            if (vowels.contains(letter))\
    \ {\n                int index = vowels.indexOf(letter.toString());\n        \
    \        index = (index + 2) % 5;\n                letter = new StringBuilder(vowels.charAt(index));\n\
    \            }\n            if (Character.isUpperCase(c)) {\n                letter.setCharAt(0,\
    \ Character.toUpperCase(letter.charAt(0)));\n            }\n            result.append(letter);\n\
    \        }\n        return result.toString();", "        char[] charArray = message.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         } else {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n\
    \            }\n            if (charArray[i] == 'A') {\n                charArray[i]\
    \ = 'C';\n            } else if (charArray[i] == 'E') {\n                charArray[i]\
    \ = 'G';\n            } else if (charArray[i] == 'I') {\n                charArray[i]\
    \ = 'K';\n            } else if (charArray[i] == 'O') {\n                charArray[i]\
    \ = 'Q';\n            } else if (charArray[i] == 'U') {\n                charArray[i]\
    \ = 'S';\n            } else if (charArray[i] == 'C') {\n                charArray[i]\
    \ = 'E';\n            } else if (charArray[i] == 'G') {\n                charArray[i]\
    \ = 'I';\n            } else if (charArray[i] == 'K') {\n                charArray[i]\
    \ = 'M';\n            } else if (charArray[i] == 'Q') {\n                charArray[i]\
    \ = 'U';\n            } else if (charArray[i] == 'S') {\n                charArray[i]\
    \ = 'W';\n            }\n        }\n        return new String(charArray);", " \
    \       StringBuilder encoded = new StringBuilder();\n        for (int i = 0;\
    \ i < message.length(); i++) {\n            char c = message.charAt(i);\n    \
    \        if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n\
    \            } else {\n                c = Character.toLowerCase(c);\n       \
    \     }\n            switch (c) {\n                case 'A':\n               \
    \     c = 'C';\n                    break;\n                case 'E':\n      \
    \              c = 'G';\n                    break;\n                case 'I':\n\
    \                    c = 'K';\n                    break;\n                case\
    \ 'O':\n                    c = 'Q';\n                    break;\n           \
    \     case 'U':\n                    c = 'S';\n                    break;\n  \
    \              case 'B':\n                    c = 'D';\n                    break;\n\
    \                case 'F':\n                    c = 'H';\n                   \
    \ break;\n                case 'J':\n                    c = 'L';\n          \
    \          break;\n                case 'P':\n                    c = 'R';\n \
    \                   break;\n                case 'V':\n                    c =\
    \ 'T';\n                    break;\n                case 'C':\n              \
    \      c = 'E';\n                    break;\n                case 'G':\n     \
    \               c = 'I';\n                    break;\n                case 'K':\n\
    \                    c = 'M';\n                    break;\n                case\
    \ 'Q':\n                    c = 'U';\n                    break;\n           \
    \     case 'W':\n                    c = 'V';\n                    break;\n  \
    \              case 'D':\n                    c = 'F';\n                    break;\n\
    \                case 'H':\n                    c = 'J';\n                   \
    \ break;\n                case 'L':\n                    c = 'N';\n          \
    \          break;\n                case 'R':\n                    c = 'P';\n \
    \                   break;\n                case 'X':\n                    c =\
    \ 'Z';\n                    break;\n                case 'Y':\n              \
    \      c = 'A';\n                    break;\n                case 'Z':\n     \
    \               c = 'B';\n                    break;\n            }\n        \
    \    encoded.append(c);\n        }\n        return encoded.toString();", "   \
    \     StringBuilder sb = new StringBuilder();\n        char[] vowels = new char[]{'a',\
    \ 'e', 'i', 'o', 'u'};\n        for (char c : message.toCharArray()) {\n     \
    \       if (Character.isUpperCase(c)) {\n                if (Arrays.binarySearch(vowels,\
    \ Character.toLowerCase(c)) > -1) {\n                    sb.append(Character.toLowerCase(c));\n\
    \                } else {\n                    sb.append(c);\n               \
    \ }\n            } else {\n                if (Arrays.binarySearch(vowels, c)\
    \ > -1) {\n                    sb.append(Character.toUpperCase(c));\n        \
    \        } else {\n                    sb.append(c);\n                }\n    \
    \        }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        message = message.toLowerCase();\n      \
    \  char[] chars = message.toCharArray();\n        for (char ch : chars) {\n  \
    \          if (ch == 'a') {\n                sb.append('c');\n            } else\
    \ if (ch == 'e') {\n                sb.append('g');\n            } else if (ch\
    \ == 'i') {\n                sb.append('k');\n            } else if (ch == 'o')\
    \ {\n                sb.append('q');\n            } else if (ch == 'u') {\n  \
    \              sb.append('y');\n            } else if (ch == 'z') {\n        \
    \        sb.append('b');\n            } else if (ch == 'g') {\n              \
    \  sb.append('i');\n            } else if (ch == 'h') {\n                sb.append('j');\n\
    \            } else if (ch == 'j') {\n                sb.append('l');\n      \
    \      } else if (ch == 'k') {\n                sb.append('m');\n            }\
    \ else if (ch == 'l') {\n                sb.append('n');\n            } else if\
    \ (ch == 'm') {\n                sb.append('p');\n            } else if (ch ==\
    \ 'n') {\n                sb.append('r');\n            } else if (ch == 'p') {\n\
    \                sb.append('t');\n            } else if (ch == 'q') {\n      \
    \          sb.append('v');\n            } else if (ch == 'r') {\n            \
    \    sb.append('w');\n            } else if (ch == 's') {\n                sb.append('x');\n\
    \            } else if (ch == 't') {\n                sb.append('z');\n      \
    \      } else if (ch == 'x') {\n                sb.append('b');\n            }\
    \ else if (ch == 'y') {\n                sb.append('d');\n            } else if\
    \ (ch == 'b') {\n                sb.append('e');\n            } else if (ch ==\
    \ 'c') {\n                sb.append('f');\n            } else if (ch == '", " \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                char newC = c;\n                if (c >= 97 && c <= 122)\
    \ {\n                    newC = (char) (c - 32);\n                } else if (c\
    \ >= 65 && c <= 90) {\n                    newC = (char) (c + 32);\n         \
    \       }\n                char curr = (char) ((c + 2 > 122) ? (c + 2 - 26) :\
    \ (c + 2));\n                if (\"AEIOU\".indexOf(curr) >= 0) {\n           \
    \         curr = (char) ((curr + 2 > 122) ? (curr + 2 - 26) : (curr + 2));\n \
    \               }\n                sb.append(curr);\n            } else {\n  \
    \              sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        message = message.toUpperCase();\n        char[] chars = message.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            chars[i] = (char)\
    \ ((chars[i] + 1) % 'Z');\n            chars[i] = (char) (chars[i] + 'A');\n \
    \       }\n        String msg = new String(chars);\n        return msg;", '        return
    null;', "        // TODO\n        return null;", '        return "";', '        return
    null;', "        // DONE.\n        return message;", "        String vowels =\
    \ \"AEIOU\";\n        String temp = message.toUpperCase();\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < temp.length(); i++)\
    \ {\n            char ch = temp.charAt(i);\n            if (Character.isLetter(ch))\
    \ {\n                if (vowels.indexOf(ch) != -1) {\n                    result.append(vowels.charAt((vowels.indexOf(ch)\
    \ + 2) % 5));\n                } else {\n                    result.append(ch);\n\
    \                }\n            } else {\n                result.append(ch);\n\
    \            }\n        }\n        return result.toString();", '        return
    encode(message, 0);', "        StringBuilder encoded = new StringBuilder();\n\
    \        for (char c : message.toCharArray()) {\n            if (c == ' ') {\n\
    \                encoded.append(' ');\n            } else {\n                char\
    \ d = encodeLetter(c);\n                encoded.append(d);\n            }\n  \
    \      }\n        return encoded.toString();", '        return "";', '        return
    null;', "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] alphabet\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] lower\
    \ = message.toLowerCase().toCharArray();\n        char[] upper = message.toUpperCase().toCharArray();\n\
    \        char[] result = new char[message.length()];\n        int index = 0;\n\
    \        for (int i = 0; i < message.length(); i++) {\n            if (upper[i]\
    \ == message.charAt(i)) {\n                if (Arrays.binarySearch(vowels, lower[i])\
    \ >= 0) {\n                    index = Arrays.binarySearch(alphabet, lower[i]);\n\
    \                    result[i] = upper[index + 2];\n                } else {\n\
    \                    result[i] = upper[i];\n                }\n            } else\
    \ {\n                if (Arrays.binarySearch(vowels, lower[i]) >= 0) {\n     \
    \               index = Arrays.binarySearch(alphabet, lower[i]);\n           \
    \         result[i] = lower[index + 2];\n                } else {\n          \
    \          result[i] = lower[i];\n                }\n            }\n        }\n\
    \        return new String(result);", "        // Your code goes here:\n     \
    \   // Code and run it without looking at the test cases.\n        // If it makes\
    \ sense, it works!\n        // Write your logic here:\n        // Hint: if you're\
    \ stuck, think about how you would tackle this problem\n        // if you had\
    \ a set of instructions (like a recipe)\n        // If you still can't solve it,\
    \ feel free to ask!\n        return \"\";", '        return null;', "        String\
    \ encoded = \"\";\n        int j = 0;\n        char[] vowels = {'a', 'e', 'i',\
    \ 'o', 'u'};\n        for (int i = 0; i < message.length(); i++) {\n         \
    \   char c = message.charAt(i);\n            if (Character.isLowerCase(c)) {\n\
    \                c = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c))\
    \ {\n                c = Character.toLowerCase(c);\n            }\n          \
    \  while (j < vowels.length && vowels[j] != c) {\n                j++;\n     \
    \       }\n            if (j < vowels.length) {\n                c = vowels[(j\
    \ + 2) % vowels.length];\n            }\n            encoded += c;\n        }\n\
    \        return encoded;", "        String encoded = \"\";\n        String lowered\
    \ = message.toLowerCase();\n        for (int i = 0; i < lowered.length(); i++)\
    \ {\n            char current = lowered.charAt(i);\n            switch (current)\
    \ {\n                case 'a':\n                    encoded += \"c\";\n      \
    \              break;\n                case 'e':\n                    encoded\
    \ += \"g\";\n                    break;\n                case 'i':\n         \
    \           encoded += \"k\";\n                    break;\n                case\
    \ 'o':\n                    encoded += \"q\";\n                    break;\n  \
    \              case 'u':\n                    encoded += \"y\";\n            \
    \        break;\n                default:\n                    encoded += current;\n\
    \                    break;\n            }\n        }\n        String result =\
    \ \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char\
    \ current = message.charAt(i);\n            char loweredCurrent = lowered.charAt(i);\n\
    \            if (Character.isUpperCase(current)) {\n                result +=\
    \ Character.toUpperCase(encoded.charAt(i));\n            } else {\n          \
    \      result += encoded.charAt(i);\n            }\n        }\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        HashMap<Character, Character> alphabet = new HashMap<>();\n        alphabet.put('a',\
    \ 'c');\n        alphabet.put('e', 'g');\n        alphabet.put('i', 'k');\n  \
    \      alphabet.put('o', 'q');\n        alphabet.put('u', 'w');\n        alphabet.put('A',\
    \ 'C');\n        alphabet.put('E', 'G');\n        alphabet.put('I', 'K');\n  \
    \      alphabet.put('O', 'Q');\n        alphabet.put('U', 'W');\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        for (int i = 0; i < sb.length(); i++) {\n\
    \            char c = sb.charAt(i);\n            if (alphabet.containsKey(c))\
    \ {\n                sb2.append(alphabet.get(c));\n            } else {\n    \
    \            sb2.append(c);\n            }\n        }\n        return sb2.toString();",
  '        return message.toUpperCase();', "        StringBuilder sb = new StringBuilder();\n\
    \        String vowels = \"AEIOU\";\n        String chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        for (int i = 0; i < message.length(); i++) {\n            char c =\
    \ message.charAt(i);\n            if (Character.isUpperCase(c)) {\n          \
    \      sb.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        String result\
    \ = sb.toString();\n        StringBuilder sb1 = new StringBuilder();\n       \
    \ for (int i = 0; i < result.length(); i++) {\n            char c = result.charAt(i);\n\
    \            if (vowels.indexOf(c) >= 0) {\n                sb1.append(chars.charAt((chars.indexOf(c)\
    \ + 2) % 26));\n            } else {\n                sb1.append(c);\n       \
    \     }\n        }\n        return sb1.toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n\
    \            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z')\
    \ {\n                sb.append((char)(c - 'a' + 'A'));\n            } else if\
    \ (c >= 'A' && c <= 'Z') {\n                sb.append((char)(c - 'A' + 'a'));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", "        // set up our lookup table\n       \
    \ Map<Character, Character> charMap = new HashMap<>();\n        charMap.put('A',\
    \ 'C');\n        charMap.put('E', 'G');\n        charMap.put('I', 'K');\n    \
    \    charMap.put('O', 'Q');\n        charMap.put('U', 'W');\n        charMap.put('a',\
    \ 'c');\n        charMap.put('e', 'g');\n        charMap.put('i', 'k');\n    \
    \    charMap.put('o', 'q');\n        charMap.put('u', 'w');\n        // convert\
    \ our message into a character array,\n        // and modify it in place\n   \
    \     char[] letters = message.toCharArray();\n        for (int i = 0; i < letters.length;\
    \ i++) {\n            char c = letters[i];\n            // if char is upper, switch\
    \ to lower\n            if (Character.isUpperCase(c)) {\n                letters[i]\
    \ = Character.toLowerCase(c);\n            }\n            // if it's lower, switch\
    \ to upper\n            else if (Character.isLowerCase(c)) {\n               \
    \ letters[i] = Character.toUpperCase(c);\n            }\n            // check\
    \ if it's in our lookup table and replace\n            if (charMap.containsKey(c))\
    \ {\n                letters[i] = charMap.get(c);\n            }\n        }\n\
    \        // convert our modified character array back into a string\n        return\
    \ new String(letters);", "        int len = message.length();\n        char[]\
    \ new_message = new char[len];\n        for (int i = 0; i < len; i++) {\n    \
    \        char c = message.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                new_message[i] = Character.toUpperCase(c);\n            }\
    \ else if (Character.isUpperCase(c)) {\n                new_message[i] = Character.toLowerCase(c);\n\
    \            } else {\n                new_message[i] = c;\n            }\n  \
    \      }\n        // The alphabet is [a,z]\n        int offset = 2;\n        for\
    \ (int i = 0; i < len; i++) {\n            char c = new_message[i];\n        \
    \    if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n       \
    \         new_message[i] = (char) ((c - offset) % 26 + 'A');\n            }\n\
    \        }\n        return new String(new_message);", "        StringBuilder result\
    \ = new StringBuilder();\n        for (char c : message.toCharArray()) {\n   \
    \         if (c >= 'a' && c <= 'z') {\n                c = (char) (c - 'a' + 'A');\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                c = (char) (c\
    \ - 'A' + 'a');\n            } else if (c == 'a') {\n                c = 'c';\n\
    \            } else if (c == 'e') {\n                c = 'g';\n            } else\
    \ if (c == 'i') {\n                c = 'k';\n            } else if (c == 'o')\
    \ {\n                c = 'q';\n            } else if (c == 'u') {\n          \
    \      c = 'y';\n            } else if (c == 'A') {\n                c = 'C';\n\
    \            } else if (c == 'E') {\n                c = 'G';\n            } else\
    \ if (c == 'I') {\n                c = 'K';\n            } else if (c == 'O')\
    \ {\n                c = 'Q';\n            } else if (c == 'U') {\n          \
    \      c = 'Y';\n            }\n            result.append(c);\n        }\n   \
    \     return result.toString();", "        message = message.toUpperCase();\n\
    \        StringBuilder message_sb = new StringBuilder(message);\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            if (message.charAt(i) >= 'A'\
    \ && message.charAt(i) <= 'Z') {\n                if (message.charAt(i) == 'Y')\
    \ {\n                    message_sb.setCharAt(i, 'A');\n                } else\
    \ if (message.charAt(i) == 'Z') {\n                    message_sb.setCharAt(i,\
    \ 'B');\n                } else {\n                    message_sb.setCharAt(i,\
    \ (char)(message.charAt(i) + 2));\n                }\n            }\n        }\n\
    \        message = message_sb.toString();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            if (message.charAt(i) == 'A' || message.charAt(i) == 'E'\
    \ || message.charAt(i) == 'I' || message.charAt(i) == 'O' || message.charAt(i)\
    \ == 'U') {\n                message_sb.setCharAt(i, (char)(message.charAt(i)\
    \ + 32));\n            }\n        }\n        return message_sb.toString();", " \
    \       final int[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++)\
    \ {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <=\
    \ 'z') {\n                c -= 32;\n            }\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                boolean isVowel = false;\n                for (int\
    \ j = 0; j < vowels.length; j++) {\n                    if (c == vowels[j]) {\n\
    \                        isVowel = true;\n                        c = (char) (vowels[(j\
    \ + 2) % vowels.length] - 32);\n                        break;\n             \
    \       }\n                }\n                if (!isVowel) {\n              \
    \      c += 32;\n                }\n            }\n            sb.append(c);\n\
    \        }\n        return sb.toString();", "        StringBuilder newMessage\
    \ = new StringBuilder();\n        String[] vowels = new String[] {\"a\", \"e\"\
    , \"i\", \"o\", \"u\"};\n        for (int i = 0; i < message.length(); i++) {\n\
    \            String currentLetter = message.substring(i, i + 1);\n           \
    \ if (Arrays.asList(vowels).contains(currentLetter.toLowerCase())) {\n       \
    \         newMessage.append(getTwoAhead(currentLetter));\n            } else {\n\
    \                newMessage.append(currentLetter.toUpperCase().equals(currentLetter)\
    \ ? currentLetter.toLowerCase() : currentLetter.toUpperCase());\n            }\n\
    \        }\n        return newMessage.toString();", "        StringBuilder encodedMessage\
    \ = new StringBuilder();\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        String ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] VOWELS = {'A', 'E', 'I', 'O', 'U'};\n\
    \        boolean lowercase;\n        int index;\n        // Encode the message\n\
    \        for (int i = 0; i < message.length(); i++) {\n            lowercase =\
    \ Character.isLowerCase(message.charAt(i));\n            if (lowercase) {\n  \
    \              index = alphabet.indexOf(message.charAt(i));\n                if\
    \ (index == -1) {\n                    encodedMessage.append(message.charAt(i));\n\
    \                } else {\n                    for (int j = 0; j < vowels.length;\
    \ j++) {\n                        if (vowels[j] == message.charAt(i)) {\n    \
    \                        if (j + 2 < vowels.length) {\n                      \
    \          encodedMessage.append(vowels[j + 2]);\n                           \
    \ } else {\n                                encodedMessage.append(vowels[j + 2\
    \ - vowels.length]);\n                            }\n                        }\n\
    \                    }\n                    if (index + 2 < alphabet.length())\
    \ {\n                        encodedMessage.append(Character.toUpperCase(alphabet.charAt(index\
    \ + 2)));\n                    } else {\n                        encodedMessage.append(Character.toUpperCase(alphabet.charAt(index\
    \ + 2 - alphabet.length())));\n                    }\n                }\n    \
    \        } else {\n                index = ALPHABET.indexOf(message.charAt(i));\n\
    \                if (index == -1) {\n                    encodedMessage.append(message.charAt(i));\n\
    \                } else {\n                    for (int j = 0; j < VOWELS.length;\
    \ j++) {\n                        if (VOWELS[j] == message.charAt(i)) {\n    \
    \                        if (j + 2 < VOWELS.length) {\n                      \
    \          encodedMessage.", "        String s = message.toUpperCase();\n    \
    \    StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <=\
    \ 'Z') {\n                sb.append(String.valueOf(c).toLowerCase());\n      \
    \      } else {\n                sb.append(String.valueOf(c).toUpperCase());\n\
    \            }\n        }\n        return sb.toString();", "        String newMessage\
    \ = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            int\
    \ c = message.charAt(i);\n            // If this is not a letter, then just add\
    \ it to the string as is.\n            if (c < 65 || c > 122 || (c > 90 && c <\
    \ 97)) {\n                newMessage += (char) c;\n                continue;\n\
    \            }\n            // Convert to upper case, and check the value of the\
    \ character to \n            // see if we need to check it. \n            // If\
    \ so, we should \"rotate\" it by 2.\n            c = c - (c >= 97 ? 32 : 0);\n\
    \            char newChar = (char) c;\n            switch (c) {\n            \
    \    case 'A':\n                    newChar = 'C';\n                    break;\n\
    \                case 'E':\n                    newChar = 'G';\n             \
    \       break;\n                case 'I':\n                    newChar = 'K';\n\
    \                    break;\n                case 'O':\n                    newChar\
    \ = 'Q';\n                    break;\n                case 'U':\n            \
    \        newChar = 'Y';\n                    break;\n                default:\n\
    \                    newChar = (char) ((c + 2) - (c > 71 ? 26 : 0));\n       \
    \             break;\n            }\n            // Convert back to lower case\
    \ if needed.\n            newMessage += (char) (newChar + (message.charAt(i) >=\
    \ 97 ? 32 : 0));\n        }\n        return newMessage;", "        StringBuffer\
    \ sb = new StringBuffer();\n        StringBuilder sb2 = new StringBuilder();\n\
    \        StringBuilder sb3 = new StringBuilder();\n        StringBuilder sb4 =\
    \ new StringBuilder();\n        StringBuilder sb5 = new StringBuilder();\n   \
    \     StringBuilder sb6 = new StringBuilder();\n        StringBuilder sb7 = new\
    \ StringBuilder();\n        StringBuilder sb8 = new StringBuilder();\n       \
    \ StringBuilder sb9 = new StringBuilder();\n        StringBuilder sb10 = new StringBuilder();\n\
    \        StringBuilder sb11 = new StringBuilder();\n        StringBuilder sb12\
    \ = new StringBuilder();\n        StringBuilder sb13 = new StringBuilder();\n\
    \        StringBuilder sb14 = new StringBuilder();\n        StringBuilder sb15\
    \ = new StringBuilder();\n        StringBuilder sb16 = new StringBuilder();\n\
    \        StringBuilder sb17 = new StringBuilder();\n        StringBuilder sb18\
    \ = new StringBuilder();\n        StringBuilder sb19 = new StringBuilder();\n\
    \        StringBuilder sb20 = new StringBuilder();\n        StringBuilder sb21\
    \ = new StringBuilder();\n        StringBuilder sb22 = new StringBuilder();\n\
    \        StringBuilder sb23 = new StringBuilder();\n        StringBuilder sb24\
    \ = new StringBuilder();\n        StringBuilder sb25 = new StringBuilder();\n\
    \        StringBuilder sb26 = new StringBuilder();\n        StringBuilder sb27\
    \ = new StringBuilder();\n        StringBuilder sb28 = new StringBuilder();\n\
    \        StringBuilder sb29 = new StringBuilder();\n        StringBuilder sb30\
    \ = new StringBuilder();\n        StringBuilder sb31 = new StringBuilder();\n\
    \        StringBuilder sb32 = new StringBuilder();\n        StringBuilder sb33\
    \ = new StringBuilder();\n        StringBuilder sb34 = new StringBuilder();\n\
    \        StringBuilder sb35 = new StringBuilder();\n        StringBuilder sb36\
    \ = new StringBuilder();\n        StringBuilder sb37 = new StringBuilder();\n\
    \        StringBuilder sb38 = new StringBuilder();\n        StringBuilder sb39\
    \ = new StringBuilder();\n        StringBuilder sb40 = new StringBuilder();\n\
    \        StringBuilder sb41 = new StringBuilder();\n        StringBuilder sb42\
    \ = new StringBuilder();\n        StringBuilder sb43 = new", "        StringBuilder\
    \ code = new StringBuilder(message.length());\n        String vowels = \"aeiou\"\
    ;\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (vowels.indexOf(c) != -1) {\n                int index = (alphabet.indexOf(c)\
    \ + 2) % alphabet.length();\n                code.append(alphabet.charAt(index));\n\
    \            } else {\n                code.append(c);\n            }\n      \
    \  }\n        return code.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        HashMap<Character, Character> myMap = new HashMap<Character, Character>();\n\
    \        myMap.put('a', 'c');\n        myMap.put('e', 'g');\n        myMap.put('i',\
    \ 'k');\n        myMap.put('o', 'q');\n        myMap.put('u', 'w');\n        myMap.put('A',\
    \ 'C');\n        myMap.put('E', 'G');\n        myMap.put('I', 'K');\n        myMap.put('O',\
    \ 'Q');\n        myMap.put('U', 'W');\n        for (int i = 0; i < message.length();\
    \ i++) {\n            if (myMap.containsKey(message.charAt(i))) {\n          \
    \      sb.append(myMap.get(message.charAt(i)));\n            } else {\n      \
    \          sb.append(message.charAt(i));\n            }\n        }\n        return\
    \ sb.toString();", "        int[] temp = {9,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5};\n\
    \        char[] vowels = {'a','e','i','o','u'};\n        char[] c = message.toCharArray();\n\
    \        for(int i = 0; i < c.length; i++) {\n            if(Character.isUpperCase(c[i]))\
    \ c[i] = Character.toLowerCase(c[i]);\n            else c[i] = Character.toUpperCase(c[i]);\n\
    \            if(Arrays.binarySearch(vowels, c[i]) > -1) {\n                int\
    \ index = Arrays.binarySearch(vowels, c[i]);\n                index = (index +\
    \ 2) % 5;\n                c[i] = vowels[index];\n            }\n        }\n \
    \       return new String(c);", '        return null;', "        // Your code\
    \ here\n        return null;", "        return message.chars()\n             \
    \         .mapToObj(e -> (char)e)\n                      .map(Problem::transform)\n\
    \                      .collect(Collectors.joining());", "        String result\
    \ = \"\";\n        for (char c : message.toCharArray()) {\n            int index\
    \ = -1;\n            String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n     \
    \       if (alphabet.indexOf(Character.toLowerCase(c)) != -1) {\n            \
    \    index = (alphabet.indexOf(Character.toLowerCase(c)) + 2) % 26;\n        \
    \    }\n            if (index == -1) {\n                result += c;\n       \
    \     } else {\n                if (Character.isUpperCase(c)) {\n            \
    \        result += Character.toUpperCase(alphabet.charAt(index));\n          \
    \      } else {\n                    result += alphabet.charAt(index);\n     \
    \           }\n            }\n        }\n        return result;", "        message\
    \ = message.toUpperCase();\n        HashMap<Character, Character> map = new HashMap<>();\n\
    \        char current = 'A';\n        for (int i = 0; i < 26; i++) {\n       \
    \     map.put(current, (char)(current + 2));\n            if (current == 'Y')\
    \ {\n                current = 'A';\n            } else {\n                current++;\n\
    \            }\n        }\n        System.out.println(map);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++)\
    \ {\n            char currentChar = message.charAt(i);\n            if (currentChar\
    \ == ' ') {\n                sb.append(' ');\n            } else if (map.containsKey(currentChar))\
    \ {\n                sb.append(map.get(currentChar));\n            } else {\n\
    \                sb.append(currentChar);\n            }\n        }\n        return\
    \ sb.toString();", '        return null;', "        char[] chars = message.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \ } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n    \
    \        }\n            switch (chars[i]) {\n                case 'A':\n     \
    \               chars[i] = 'C';\n                    break;\n                case\
    \ 'E':\n                    chars[i] = 'G';\n                    break;\n    \
    \            case 'I':\n                    chars[i] = 'K';\n                \
    \    break;\n                case 'O':\n                    chars[i] = 'M';\n\
    \                    break;\n                case 'U':\n                    chars[i]\
    \ = 'Q';\n                    break;\n                case 'Y':\n            \
    \        chars[i] = 'S';\n                    break;\n                case 'C':\n\
    \                    chars[i] = 'E';\n                    break;\n           \
    \     case 'G':\n                    chars[i] = 'I';\n                    break;\n\
    \                case 'K':\n                    chars[i] = 'O';\n            \
    \        break;\n                case 'M':\n                    chars[i] = 'U';\n\
    \                    break;\n                case 'Q':\n                    chars[i]\
    \ = 'Y';\n                    break;\n                case 'S':\n            \
    \        chars[i] = 'A';\n                    break;\n            }\n        }\n\
    \        return new String(chars);", '        return "";', "        // CODE HERE\n\
    \        return \"\";", "        StringBuilder encodedMessage = new StringBuilder();\n\
    \        String vowels = \"aeiou\";\n        for (int i = 0; i < message.length();\
    \ i++) {\n            String charAsString = String.valueOf(message.charAt(i));\n\
    \            char letter = message.charAt(i);\n            if (Character.isUpperCase(letter))\
    \ {\n                encodedMessage.append(charAsString.toLowerCase());\n    \
    \        } else if (Character.isLowerCase(letter)) {\n                encodedMessage.append(charAsString.toUpperCase());\n\
    \            } else {\n                encodedMessage.append(letter);\n      \
    \      }\n            if (vowels.contains(charAsString.toLowerCase())) {\n   \
    \             char vowel = charAsString.toLowerCase().charAt(0);\n           \
    \     int index = vowels.indexOf(vowel);\n                encodedMessage.deleteCharAt(encodedMessage.length()\
    \ - 1);\n                encodedMessage.append(vowels.charAt((index + 2) % 5));\n\
    \            }\n        }\n        return encodedMessage.toString();", '        return
    "";', '        return "";', "        StringBuilder encoded = new StringBuilder();\n\
    \        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                c = Character.isUpperCase(c) ? Character.toLowerCase(c) :\
    \ Character.toUpperCase(c);\n                switch (c) {\n                  \
    \  case 'a':\n                        c = 'c';\n                        break;\n\
    \                    case 'e':\n                        c = 'g';\n           \
    \             break;\n                    case 'i':\n                        c\
    \ = 'k';\n                        break;\n                    case 'o':\n    \
    \                    c = 'q';\n                        break;\n              \
    \      case 'u':\n                        c = 'y';\n                        break;\n\
    \                    case 'y':\n                        c = 'a';\n           \
    \             break;\n                    default:\n                        c\
    \ = (char) (c + 2);\n                        break;\n                }\n     \
    \       }\n            encoded.append(c);\n        }\n        return encoded.toString();",
  "        int [] letter = new int[message.length()];\n        for (int i = 0; i <\
    \ message.length(); i++) {\n            int index = (int) message.charAt(i);\n\
    \            if (index >= 97 && index <= 122) {\n                letter[i] = index\
    \ - 32;\n            } else if (index >= 65 && index <= 90) {\n              \
    \  letter[i] = index + 32;\n            } else {\n                letter[i] =\
    \ index;\n            }\n        }\n        for (int i = 0; i < message.length();\
    \ i++) {\n            int index = (int) letter[i];\n            if (index == 65\
    \ || index == 69 || index == 73 || index == 79 || index == 85) {\n           \
    \     if (index == 85) {\n                        letter[i] = 65;\n          \
    \      } else {\n                    letter[i] = index + 2;\n                }\n\
    \            }\n        }\n        String answer = \"\";\n        for (int i =\
    \ 0; i < message.length(); i++) {\n            answer += Character.toString((char)\
    \ letter[i]);\n        }\n        return answer;", '        // Write your code
    here', "        StringBuilder result = new StringBuilder();\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        for (int i = 0; i < message.length(); i++) {\n            char character\
    \ = message.charAt(i);\n            if (Character.isUpperCase(character)) {\n\
    \                character = Character.toLowerCase(character);\n            }\n\
    \            boolean isVowel = false;\n            for (int j = 0; j < vowels.length;\
    \ j++) {\n                if (character == vowels[j]) {\n                    isVowel\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (isVowel) {\n                character = alphabet.charAt((alphabet.indexOf(character)\
    \ + 2) % alphabet.length());\n            }\n            result.append(character);\n\
    \        }\n        return result.toString();", "        // take the string and\
    \ convert it to char array\n        char[] messageChars = message.toCharArray();\n\
    \        // iterate over the char array\n        // replace letters with their\
    \ swapped cases\n        // replace letters with their alphabetically equivalent\
    \ letters\n        for (int i = 0; i < messageChars.length; i++) {\n         \
    \   switch (messageChars[i]) {\n                case 'a':\n                  \
    \  messageChars[i] = 'C';\n                    break;\n                case 'A':\n\
    \                    messageChars[i] = 'c';\n                    break;\n    \
    \            case 'e':\n                    messageChars[i] = 'G';\n         \
    \           break;\n                case 'E':\n                    messageChars[i]\
    \ = 'g';\n                    break;\n                case 'i':\n            \
    \        messageChars[i] = 'K';\n                    break;\n                case\
    \ 'I':\n                    messageChars[i] = 'k';\n                    break;\n\
    \                case 'o':\n                    messageChars[i] = 'M';\n     \
    \               break;\n                case 'O':\n                    messageChars[i]\
    \ = 'm';\n                    break;\n                case 'u':\n            \
    \        messageChars[i] = 'S';\n                    break;\n                case\
    \ 'U':\n                    messageChars[i] = 's';\n                    break;\n\
    \                case 'b':\n                    messageChars[i] = 'd';\n     \
    \               break;\n                case 'B':\n                    messageChars[i]\
    \ = 'D';\n                    break;\n                case 'c':\n            \
    \        messageChars[i] = 'f';\n                    break;\n                case\
    \ 'C':\n                    messageChars[i] = 'F';\n                    break;\n\
    \                case 'd':\n                    messageChars[i] = 'h';\n     \
    \               break;\n                case 'D':\n                    messageChars[i]\
    \ = 'H';\n                    break;\n                case 'f':\n            \
    \        messageChars[i] = 'j';\n                    break;\n                case\
    \ 'F':\n                    messageChars[i] = 'J';\n                    break;\n\
    \                case 'g':\n                    messageChars[i] = 'l';\n     \
    \               break;\n                case 'G':\n                   ", '        return
    null;', "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        HashMap<Character,\
    \ Character> vowelMap = new HashMap<>();\n        for (int i = 0; i < vowels.length;\
    \ i++) {\n            char t = vowels[i];\n            if (i == vowels.length\
    \ - 1) {\n                vowelMap.put(t, vowels[0]);\n            } else {\n\
    \                vowelMap.put(t, vowels[i + 1]);\n            }\n        }\n \
    \       StringBuilder builder = new StringBuilder();\n        for (int i = 0;\
    \ i < message.length(); i++) {\n            char c = message.charAt(i);\n    \
    \        if (vowelMap.containsKey(c)) {\n                builder.append(vowelMap.get(c));\n\
    \            } else {\n                builder.append(c);\n            }\n   \
    \     }\n        return builder.toString();", "        char[] letters = message.toCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (char letter : letters)\
    \ {\n            if (letter == 'a') {\n                sb.append('c');\n     \
    \       } else if (letter == 'e') {\n                sb.append('g');\n       \
    \     } else if (letter == 'i') {\n                sb.append('k');\n         \
    \   } else if (letter == 'o') {\n                sb.append('q');\n           \
    \ } else if (letter == 'u') {\n                sb.append('y');\n            }\
    \ else if (letter == 'A') {\n                sb.append('C');\n            } else\
    \ if (letter == 'E') {\n                sb.append('G');\n            } else if\
    \ (letter == 'I') {\n                sb.append('K');\n            } else if (letter\
    \ == 'O') {\n                sb.append('Q');\n            } else if (letter ==\
    \ 'U') {\n                sb.append('Y');\n            } else if (letter >= 'a'\
    \ && letter <= 'z') {\n                sb.append((char) (letter - 'a' + 'A'));\n\
    \            } else if (letter >= 'A' && letter <= 'Z') {\n                sb.append((char)\
    \ (letter - 'A' + 'a'));\n            } else {\n                sb.append(letter);\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++)\
    \ {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sb.append(Character.toLowerCase(c));\n            } else\
    \ if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        //System.out.println(sb.toString());\n        return sb.toString();",
  "        StringBuilder out = new StringBuilder();\n        String vowels = \"aeiou\"\
    ;\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                c = Character.toLowerCase(c);\n            } else {\n   \
    \             c = Character.toUpperCase(c);\n            }\n            int idx\
    \ = vowels.indexOf(c);\n            if (idx != -1) {\n                c = vowels.charAt((idx\
    \ + 2) % vowels.length());\n            }\n            out.append(c);\n      \
    \  }\n        return out.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char c;\n       \
    \ // Loop through each letter\n        for (int i = 0; i < message.length(); i++)\
    \ {\n            c = message.charAt(i);\n            // Check if character is\
    \ a letter\n            if (Character.isLetter(c)) {\n                // Check\
    \ if character is lower case\n                if (Character.isLowerCase(c)) {\n\
    \                    // Check if character is a vowel\n                    if\
    \ (contains(vowels, c)) {\n                        // Add the letter that is 2\
    \ places ahead of the vowel\n                        sb.append(vowels[(indexOf(vowels,\
    \ c) + 2) % 5]);\n                    } else {\n                        // Convert\
    \ to upper case\n                        sb.append(Character.toUpperCase(c));\n\
    \                    }\n                } else {\n                    // Check\
    \ if character is a vowel\n                    if (contains(vowels, Character.toLowerCase(c)))\
    \ {\n                        // Add the letter that is 2 places ahead of the vowel\n\
    \                        sb.append(Character.toUpperCase(vowels[(indexOf(vowels,\
    \ Character.toLowerCase(c)) + 2) % 5]));\n                    } else {\n     \
    \                   // Convert to lower case\n                        sb.append(Character.toLowerCase(c));\n\
    \                    }\n                }\n            } else {\n            \
    \    // Add character\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", '        // write your code here', "        StringBuilder\
    \ sb = new StringBuilder();\n        String[] vowels = {\"a\", \"e\", \"i\", \"\
    o\", \"u\"};\n        String[] vowelsCaps = {\"A\", \"E\", \"I\", \"O\", \"U\"\
    };\n        int[] indexes = {2, 3, 4, 5, 0};\n        int count = 0;\n       \
    \ for (int i = 0; i < message.length(); i++) {\n            String alpha = message.substring(i,\
    \ i + 1);\n            if (Arrays.asList(vowels).contains(alpha)) {\n        \
    \        String alpha2 = vowels[indexes[count]];\n                sb.append(alpha2);\n\
    \                count++;\n            } else if (Arrays.asList(vowelsCaps).contains(alpha))\
    \ {\n                String alpha2 = vowelsCaps[indexes[count]];\n           \
    \     sb.append(alpha2);\n                count++;\n            } else {\n   \
    \             sb.append(alpha);\n            }\n        }\n        return sb.toString();"]
stop_tokens:
- "\n    }\n"
