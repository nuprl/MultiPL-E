name: HumanEval_83_starts_one_ends
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer n, return the count of the numbers\
  \ of n-digit\n    // positive integers that start or end with 1.\n    public static\
  \ long startsOneEnds(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        // Create the set of factors.\n        long[] factors = new\
    \ long[(int)n];\n        for (int i = 0; i < n; i++) {\n            factors[i]\
    \ = (i == 0) ? 9 : 10;\n        }\n        // Using the factors, compute the values\
    \ of the sum.\n        long[] result = new long[(int)n];\n        result[0] =\
    \ 1;\n        for (int i = 1; i < n; i++) {\n            result[i] = result[i\
    \ - 1] * factors[i - 1];\n        }\n        // Remove the number of numbers that\
    \ start and end with 1, because\n        // they have been double counted.\n \
    \       long numSubsequences = (n == 1) ? 0 : result[(int)n - 1] - result[(int)n\
    \ - 2];\n        return result[(int)n - 1] + numSubsequences;", "        long\
    \ sum = 0;\n        if (n == 1) {\n            return 2;\n        }\n        long\
    \ f = (long) Math.pow(10, n - 1);\n        long s = f * 2;\n        while (f <\
    \ s) {\n            sum += f;\n            f *= 10;\n        }\n        return\
    \ sum;", "        long result = 0;\n        if (n <= 2) {\n            if (n ==\
    \ 1) {\n                result = 10;\n            } else {\n                result\
    \ = 21;\n            }\n        } else {\n            result = 10 * startsOneEnds(n\
    \ - 1) - 9 * endsOne(n - 1);\n        }\n        return result;", "        long\
    \ ans = (n - 1) * 9;\n        if (n > 1) {\n            ans += 9;\n        }\n\
    \        return ans;", "        // For n = 1, the answer is 2 (1, 1)\n       \
    \ // For n = 2, the answer is 6 (11, 12, 13, 21, 22, 23)\n        // For n = 3,\
    \ the answer is 26 (111, 112, 113, 121, 122, 123,\n        //                \
    \              211, 212, 213, 221, 222, 223,\n        //                     \
    \         311, 312, 313, 321, 322, 323)\n        // This is a Catalan number problem.\
    \ The answer is counted by the\n        // formula 2*C(n-1, 2n-1)\n        return\
    \ 2*binomial(n-1, 2*n-1);", "        long ans = 0;\n        for (long i = 0; i\
    \ < n; i++) {\n            long a = (long) Math.pow(10, i);\n            long\
    \ b = (long) Math.pow(10, n - i);\n            ans += (a * (b - a)) + a;\n   \
    \     }\n        return ans;", "        // Base case.\n        if (n == 1) return\
    \ 10;\n        // Initialize an array of size 10.\n        long[] arr = new long[10];\n\
    \        // Inititialize the array.\n        Arrays.fill(arr, 1);\n        //\
    \ Iterate over the range [1, n).\n        for (int i = 1; i < n; i++) {\n    \
    \        // Iterate over the range [0, 9].\n            for (int j = 0; j < 10;\
    \ j++) {\n                // Update the count for each number.\n             \
    \   if (j != 0) arr[j] += arr[j - 1];\n            }\n        }\n        // Return\
    \ the count of the number that starts with 1 and ends with 1.\n        return\
    \ arr[9] * 2;", '        return ((long) Math.pow(10, n - 1) - (long) Math.pow(9,
    n - 1)) + ((long) Math.pow(9, n - 1) - (long) Math.pow(8, n - 1));', '        return
    count(n, 1);', "        assert n > 0;\n        if (n == 1) return 10;\n      \
    \  return 10 * numNines(n - 1) + (n - 1) * 9;", '        return n * 9 * (long)
    Math.pow(10, n - 1);', "        if (n == 1) {\n            return 1;\n       \
    \ }\n        return (long) Math.pow(10, n - 1) + (long) Math.pow(10, n - 2) *\
    \ 9;", "        if (n == 1) {\n            return 10;\n        }\n        // Returns\
    \ a number of the form 10^(n-1)*a + b where a is 0...9\n        // and b is 1...9.\n\
    \        // For example, if n = 2, then we have 10x+y where x is 0...9 and\n \
    \       // y is 1...9. \n        // n = 3, then we have 100x+10y+z where x is\
    \ 0...9, y is 0...9, and\n        // z is 1...9.\n        long min =  (long)Math.pow(10,\
    \ n-1);\n        long max = (long)Math.pow(10, n) - 1;\n        // We need the\
    \ following:\n        // 1. those numbers with 1 at the beginning (and thus a\
    \ zero in the \n        // remainder of the number).\n        // 2. those numbers\
    \ with a 0 at the beginning, and a 1 at the end.\n        // 3. those numbers\
    \ with a 1 at the end.\n        // For example, if n = 2:\n        // then we\
    \ need 1, 10, 11, 12... 98, 99.\n        //\n        // If n = 3:\n        //\
    \ then we need 1, 10, 100, 101, 110, 111, 112, 120, 121, 122, 130,\n        //\
    \ 131, 132, ..., 991, 992, 993, 994, 995, 996, 997, 998, 999.\n        //\n  \
    \      // If n = 4:\n        // then we need 1, 10, 100, 1000, 1001, 1010, 1011,\
    \ 1012, ..., 9990,\n        // 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998,\
    \ 9999.\n        //\n        // The numbers that start with 1 are 1 + (n-1) digits\
    \ which start \n        // with 0. Therefore, n-1 9s for the remaining digits.\n\
    \        // The numbers that end with 1 are 10^(n-1).\n        // The numbers\
    \ that have a 0 before the 1 are (n-1) * 9 * 10^(n-2).\n        // Multiply by\
    \ 2 because the first digit", "        if (n < 1) {\n            return 0;\n \
    \       }\n        if (n == 1) {\n            return 2;\n        }\n        if\
    \ (n == 2) {\n            return 3;\n        }\n        long result = 3;\n   \
    \     for (long i = 3; i <= n; i++) {\n            result = (result * 2) - 1;\n\
    \        }\n        return result;", "        // Base case\n        if (n == 1)\
    \ {\n            return 10;\n        }\n        // Get the count of n-1 digit\
    \ integers that starts with a 1.\n        long cnt = n >= 2 ? (int)Math.pow(10,\
    \ n - 2) : 0;\n        // Add the count of n-1 digit integers that ends with a\
    \ 1.\n        cnt += (int)Math.pow(10, n - 1);\n        return cnt;", '        throw
    new UnsupportedOperationException("FILL ME IN");', "        if (n == 1) return\
    \ 10;\n        long total = 0;\n        for (long i = 1; i <= 9; i++) {\n    \
    \        total += ends(i, n - 1);\n        }\n        return total;", '        return
    10;', "        if (n == 1) return 2;\n        long arr[] = new long[(int)n];\n\
    \        arr[0] = 2;\n        arr[1] = 5;\n        for (int i = 2; i < n; i++)\
    \ {\n            arr[i] = (arr[i-1] + arr[i-2]) * 3;\n        }\n        return\
    \ arr[(int)n-1];", "        // return 0L;\n        return n == 1 ? 2 : 9 * (n\
    \ - 1) * (int) Math.pow(10, n - 2);"]
stop_tokens:
- "\n    }\n"
